
413_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0f4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800c2d4  0800c2d4  0001c2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8bc  0800c8bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8bc  0800c8bc  0001c8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8c4  0800c8c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8c4  0800c8c4  0001c8c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8c8  0800c8c8  0001c8c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800c8cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000067dc  20000070  0800c93c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000684c  0800c93c  0002684c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020c6c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000041d4  00000000  00000000  00040d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a90  00000000  00000000  00044ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001878  00000000  00000000  00046970  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000268db  00000000  00000000  000481e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001bb00  00000000  00000000  0006eac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e28ec  00000000  00000000  0008a5c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016ceaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076f4  00000000  00000000  0016cf2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c2bc 	.word	0x0800c2bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	0800c2bc 	.word	0x0800c2bc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
 80005c6:	b087      	sub	sp, #28
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef ret;
	uint8_t myWrite[30] = "TEST STRING";
 80005ca:	4aaa      	ldr	r2, [pc, #680]	; (8000874 <main+0x2b4>)
 80005cc:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80005d0:	f103 0310 	add.w	r3, r3, #16
 80005d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80005d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80005da:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80005de:	f103 031c 	add.w	r3, r3, #28
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	821a      	strh	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f001 ff1f 	bl	8002430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f963 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 fc6b 	bl	8000ed0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fa:	f000 fc41 	bl	8000e80 <MX_DMA_Init>
  MX_ADC1_Init();
 80005fe:	f000 f9f7 	bl	80009f0 <MX_ADC1_Init>
  MX_DAC_Init();
 8000602:	f000 fa47 	bl	8000a94 <MX_DAC_Init>
  MX_DFSDM1_Init();
 8000606:	f000 fa6f 	bl	8000ae8 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 800060a:	f000 fad1 	bl	8000bb0 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 800060e:	f000 fb33 	bl	8000c78 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 8000612:	f000 fe19 	bl	8001248 <MX_FSMC_Init>
  MX_I2S2_Init();
 8000616:	f000 fb65 	bl	8000ce4 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 800061a:	f000 fb91 	bl	8000d40 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 800061e:	f000 fbbb 	bl	8000d98 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 8000622:	f000 fbd9 	bl	8000dd8 <MX_UART10_Init>
  MX_USART6_UART_Init();
 8000626:	f000 fc01 	bl	8000e2c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800062a:	f007 fc93 	bl	8007f54 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  ret = HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, Rec1Buf, AUDIO_REC);
 800062e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000632:	4991      	ldr	r1, [pc, #580]	; (8000878 <main+0x2b8>)
 8000634:	4891      	ldr	r0, [pc, #580]	; (800087c <main+0x2bc>)
 8000636:	f002 fdb1 	bl	800319c <HAL_DFSDM_FilterRegularStart_DMA>
 800063a:	4603      	mov	r3, r0
 800063c:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8000640:	f102 020f 	add.w	r2, r2, #15
 8000644:	7013      	strb	r3, [r2, #0]
  if(ret != HAL_OK)
 8000646:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800064a:	f103 030f 	add.w	r3, r3, #15
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <main+0x9a>
  {
	  printf("DMA on filter not started");
 8000654:	488a      	ldr	r0, [pc, #552]	; (8000880 <main+0x2c0>)
 8000656:	f00a ff91 	bl	800b57c <iprintf>
  }

  ret = HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm2_filter0, Rec2Buf, AUDIO_REC);
 800065a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800065e:	4989      	ldr	r1, [pc, #548]	; (8000884 <main+0x2c4>)
 8000660:	4889      	ldr	r0, [pc, #548]	; (8000888 <main+0x2c8>)
 8000662:	f002 fd9b 	bl	800319c <HAL_DFSDM_FilterRegularStart_DMA>
 8000666:	4603      	mov	r3, r0
 8000668:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800066c:	f102 020f 	add.w	r2, r2, #15
 8000670:	7013      	strb	r3, [r2, #0]
   if(ret != HAL_OK)
 8000672:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8000676:	f103 030f 	add.w	r3, r3, #15
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <main+0xc6>
   {
 	  printf("DMA on filter not started");
 8000680:	487f      	ldr	r0, [pc, #508]	; (8000880 <main+0x2c0>)
 8000682:	f00a ff7b 	bl	800b57c <iprintf>

   FATFS myFAT;
   	FIL myFile;
   	UINT byteCount;

   	printf("path: '%s'\r\n", SDPath);
 8000686:	4981      	ldr	r1, [pc, #516]	; (800088c <main+0x2cc>)
 8000688:	4881      	ldr	r0, [pc, #516]	; (8000890 <main+0x2d0>)
 800068a:	f00a ff77 	bl	800b57c <iprintf>
   	double duration = 10; /*seconds*/
 800068e:	f04f 0300 	mov.w	r3, #0
 8000692:	4c80      	ldr	r4, [pc, #512]	; (8000894 <main+0x2d4>)
 8000694:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8000698:	e9c2 3400 	strd	r3, r4, [r2]
	int32_t FrameCount = 40;// AUDIO_REC * 40;
 800069c:	2328      	movs	r3, #40	; 0x28
 800069e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80006a2:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80006a6:	6013      	str	r3, [r2, #0]
   	FRESULT fRet = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80006ae:	f102 023b 	add.w	r2, r2, #59	; 0x3b
 80006b2:	7013      	strb	r3, [r2, #0]

   	fRet = f_mount(&myFAT, SDPath, 1);
 80006b4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80006b8:	f103 0318 	add.w	r3, r3, #24
 80006bc:	2201      	movs	r2, #1
 80006be:	4973      	ldr	r1, [pc, #460]	; (800088c <main+0x2cc>)
 80006c0:	4618      	mov	r0, r3
 80006c2:	f00a f877 	bl	800a7b4 <f_mount>
 80006c6:	4603      	mov	r3, r0
 80006c8:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80006cc:	f102 023b 	add.w	r2, r2, #59	; 0x3b
 80006d0:	7013      	strb	r3, [r2, #0]
   	int pass = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80006d8:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80006dc:	6013      	str	r3, [r2, #0]

//   	write_PCM16_stereo_header(&myFAT, SAMPLE_RATE, FrameCount * AUDIO_REC);
   	if(fRet == FR_OK){
 80006de:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80006e2:	f103 033b 	add.w	r3, r3, #59	; 0x3b
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d136      	bne.n	800075a <main+0x19a>
   		f_open(&myFile, "test2.txt", FA_WRITE | FA_CREATE_ALWAYS);
 80006ec:	f107 0318 	add.w	r3, r7, #24
 80006f0:	3b10      	subs	r3, #16
 80006f2:	220a      	movs	r2, #10
 80006f4:	4968      	ldr	r1, [pc, #416]	; (8000898 <main+0x2d8>)
 80006f6:	4618      	mov	r0, r3
 80006f8:	f00a f8a2 	bl	800a840 <f_open>
   		f_write(&myFile, myWrite, 30, &byteCount);
 80006fc:	f107 0318 	add.w	r3, r7, #24
 8000700:	3b14      	subs	r3, #20
 8000702:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 8000706:	f101 0110 	add.w	r1, r1, #16
 800070a:	f107 0018 	add.w	r0, r7, #24
 800070e:	3810      	subs	r0, #16
 8000710:	221e      	movs	r2, #30
 8000712:	f00a fbc0 	bl	800ae96 <f_write>
   		f_close(&myFile);
 8000716:	f107 0318 	add.w	r3, r7, #24
 800071a:	3b10      	subs	r3, #16
 800071c:	4618      	mov	r0, r3
 800071e:	f00a fdcc 	bl	800b2ba <f_close>

   		f_open(&myFile, "test2.txt", FA_READ);
 8000722:	f107 0318 	add.w	r3, r7, #24
 8000726:	3b10      	subs	r3, #16
 8000728:	2201      	movs	r2, #1
 800072a:	495b      	ldr	r1, [pc, #364]	; (8000898 <main+0x2d8>)
 800072c:	4618      	mov	r0, r3
 800072e:	f00a f887 	bl	800a840 <f_open>
   		f_read(&myFile, myRead, 5, &byteCount);
 8000732:	f107 0318 	add.w	r3, r7, #24
 8000736:	3b14      	subs	r3, #20
 8000738:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 800073c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8000740:	f107 0018 	add.w	r0, r7, #24
 8000744:	3810      	subs	r0, #16
 8000746:	2205      	movs	r2, #5
 8000748:	f00a fa46 	bl	800abd8 <f_read>
   		f_close(&myFile);
 800074c:	f107 0318 	add.w	r3, r7, #24
 8000750:	3b10      	subs	r3, #16
 8000752:	4618      	mov	r0, r3
 8000754:	f00a fdb1 	bl	800b2ba <f_close>
 8000758:	e00b      	b.n	8000772 <main+0x1b2>
   	}else{
   		printf("mount fail :(\r\n");
 800075a:	4850      	ldr	r0, [pc, #320]	; (800089c <main+0x2dc>)
 800075c:	f00a ff82 	bl	800b664 <puts>
   		printf("err. code: %d\r\n", fRet);
 8000760:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000764:	f103 033b 	add.w	r3, r3, #59	; 0x3b
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	4619      	mov	r1, r3
 800076c:	484c      	ldr	r0, [pc, #304]	; (80008a0 <main+0x2e0>)
 800076e:	f00a ff05 	bl	800b57c <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int data = 1;
 8000772:	2301      	movs	r3, #1
 8000774:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000778:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800077c:	6013      	str	r3, [r2, #0]
	  HAL_DFSDM_Channel_StateTypeDef status = HAL_DFSDM_ChannelGetState(&hdfsdm1_channel1);
 800077e:	4849      	ldr	r0, [pc, #292]	; (80008a4 <main+0x2e4>)
 8000780:	f002 fbcc 	bl	8002f1c <HAL_DFSDM_ChannelGetState>
 8000784:	4603      	mov	r3, r0
 8000786:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 800078a:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 800078e:	7013      	strb	r3, [r2, #0]
//	  HAL_StatusTypeDef clk_pres = HAL_DFSDM_ChannelPollForCkab(&hdfsdm1_channel1, 1000);
//	  data = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0, 1);
	  printf("data = %ld\r\n", data);
 8000790:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000794:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000798:	6819      	ldr	r1, [r3, #0]
 800079a:	4843      	ldr	r0, [pc, #268]	; (80008a8 <main+0x2e8>)
 800079c:	f00a feee 	bl	800b57c <iprintf>
	  if(DmaRecHalfBuffCplt == 1)
 80007a0:	4b42      	ldr	r3, [pc, #264]	; (80008ac <main+0x2ec>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d12d      	bne.n	8000804 <main+0x244>
	  {
		  for(int i = 0; i < AUDIO_REC/2; i++)
 80007a8:	2300      	movs	r3, #0
 80007aa:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80007ae:	f102 0214 	add.w	r2, r2, #20
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	e01b      	b.n	80007ee <main+0x22e>
		  {
			  Value1Buf[i] = Rec1Buf[i] & 0xffff;
 80007b6:	4a30      	ldr	r2, [pc, #192]	; (8000878 <main+0x2b8>)
 80007b8:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80007bc:	f103 0314 	add.w	r3, r3, #20
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4939      	ldr	r1, [pc, #228]	; (80008b0 <main+0x2f0>)
 80007ca:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80007ce:	f103 0314 	add.w	r3, r3, #20
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for(int i = 0; i < AUDIO_REC/2; i++)
 80007d8:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80007dc:	f103 0314 	add.w	r3, r3, #20
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	3301      	adds	r3, #1
 80007e4:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80007e8:	f102 0214 	add.w	r2, r2, #20
 80007ec:	6013      	str	r3, [r2, #0]
 80007ee:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80007f2:	f103 0314 	add.w	r3, r3, #20
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007fc:	dbdb      	blt.n	80007b6 <main+0x1f6>
		  }
		  DmaRecHalfBuffCplt = 0;
 80007fe:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <main+0x2ec>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
	  }
	  if(DmaRecBuffCplt == 1)
 8000804:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <main+0x2f4>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d1b2      	bne.n	8000772 <main+0x1b2>
	  {
		  printf("ooo wee\r\n");
 800080c:	482a      	ldr	r0, [pc, #168]	; (80008b8 <main+0x2f8>)
 800080e:	f00a ff29 	bl	800b664 <puts>
		  for(int i = AUDIO_REC/2; i < AUDIO_REC; i++)
 8000812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000816:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800081a:	f102 0210 	add.w	r2, r2, #16
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	e01b      	b.n	800085a <main+0x29a>
		  {
			  Value1Buf[i] = Rec1Buf[i] & 0xffff;
 8000822:	4a15      	ldr	r2, [pc, #84]	; (8000878 <main+0x2b8>)
 8000824:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8000828:	f103 0310 	add.w	r3, r3, #16
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000832:	b29a      	uxth	r2, r3
 8000834:	491e      	ldr	r1, [pc, #120]	; (80008b0 <main+0x2f0>)
 8000836:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800083a:	f103 0310 	add.w	r3, r3, #16
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for(int i = AUDIO_REC/2; i < AUDIO_REC; i++)
 8000844:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8000848:	f103 0310 	add.w	r3, r3, #16
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	3301      	adds	r3, #1
 8000850:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8000854:	f102 0210 	add.w	r2, r2, #16
 8000858:	6013      	str	r3, [r2, #0]
 800085a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800085e:	f103 0310 	add.w	r3, r3, #16
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000868:	dbdb      	blt.n	8000822 <main+0x262>
		  }
		  DmaRecBuffCplt = 0;
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <main+0x2f4>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
  {
 8000870:	e77f      	b.n	8000772 <main+0x1b2>
 8000872:	bf00      	nop
 8000874:	0800c348 	.word	0x0800c348
 8000878:	20002354 	.word	0x20002354
 800087c:	20003354 	.word	0x20003354
 8000880:	0800c2d4 	.word	0x0800c2d4
 8000884:	20001354 	.word	0x20001354
 8000888:	20003578 	.word	0x20003578
 800088c:	200047dc 	.word	0x200047dc
 8000890:	0800c2f0 	.word	0x0800c2f0
 8000894:	40240000 	.word	0x40240000
 8000898:	0800c300 	.word	0x0800c300
 800089c:	0800c30c 	.word	0x0800c30c
 80008a0:	0800c31c 	.word	0x0800c31c
 80008a4:	2000131c 	.word	0x2000131c
 80008a8:	0800c32c 	.word	0x0800c32c
 80008ac:	2000008c 	.word	0x2000008c
 80008b0:	2000031c 	.word	0x2000031c
 80008b4:	2000008d 	.word	0x2000008d
 80008b8:	0800c33c 	.word	0x0800c33c

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b0aa      	sub	sp, #168	; 0xa8
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008c6:	2234      	movs	r2, #52	; 0x34
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f00a fda6 	bl	800b41c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	2258      	movs	r2, #88	; 0x58
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f00a fd97 	bl	800b41c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b3d      	ldr	r3, [pc, #244]	; (80009e8 <SystemClock_Config+0x12c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a3c      	ldr	r2, [pc, #240]	; (80009e8 <SystemClock_Config+0x12c>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b3a      	ldr	r3, [pc, #232]	; (80009e8 <SystemClock_Config+0x12c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	4b37      	ldr	r3, [pc, #220]	; (80009ec <SystemClock_Config+0x130>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a36      	ldr	r2, [pc, #216]	; (80009ec <SystemClock_Config+0x130>)
 8000914:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000918:	6013      	str	r3, [r2, #0]
 800091a:	4b34      	ldr	r3, [pc, #208]	; (80009ec <SystemClock_Config+0x130>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000926:	2301      	movs	r3, #1
 8000928:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800092a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800092e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000930:	2302      	movs	r3, #2
 8000932:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000936:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800093a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 25;
 800093e:	2319      	movs	r3, #25
 8000940:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000944:	23c0      	movs	r3, #192	; 0xc0
 8000946:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800094a:	2302      	movs	r3, #2
 800094c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000950:	2308      	movs	r3, #8
 8000952:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000960:	4618      	mov	r0, r3
 8000962:	f004 fec9 	bl	80056f8 <HAL_RCC_OscConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800096c:	f000 fd3e 	bl	80013ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000970:	230f      	movs	r3, #15
 8000972:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000974:	2302      	movs	r3, #2
 8000976:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800097c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000980:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000986:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800098a:	2103      	movs	r1, #3
 800098c:	4618      	mov	r0, r3
 800098e:	f004 f90b 	bl	8004ba8 <HAL_RCC_ClockConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000998:	f000 fd28 	bl	80013ec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 800099c:	f240 1371 	movw	r3, #369	; 0x171
 80009a0:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80009a2:	2332      	movs	r3, #50	; 0x32
 80009a4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 80009a6:	230c      	movs	r3, #12
 80009a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80009b2:	2300      	movs	r3, #0
 80009b4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 80009b6:	2300      	movs	r3, #0
 80009b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80009ba:	2300      	movs	r3, #0
 80009bc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 80009be:	2300      	movs	r3, #0
 80009c0:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 80009c6:	2300      	movs	r3, #0
 80009c8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	4618      	mov	r0, r3
 80009d0:	f004 fab6 	bl	8004f40 <HAL_RCCEx_PeriphCLKConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0x122>
  {
    Error_Handler();
 80009da:	f000 fd07 	bl	80013ec <Error_Handler>
  }
}
 80009de:	bf00      	nop
 80009e0:	37a8      	adds	r7, #168	; 0xa8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40007000 	.word	0x40007000

080009f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009f6:	463b      	mov	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a04:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <MX_ADC1_Init+0x9c>)
 8000a06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a0e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a32:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <MX_ADC1_Init+0xa0>)
 8000a34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a52:	f001 fd81 	bl	8002558 <HAL_ADC_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a5c:	f000 fcc6 	bl	80013ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a60:	230a      	movs	r3, #10
 8000a62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a64:	2301      	movs	r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a72:	f001 fdb5 	bl	80025e0 <HAL_ADC_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a7c:	f000 fcb6 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20003470 	.word	0x20003470
 8000a8c:	40012000 	.word	0x40012000
 8000a90:	0f000001 	.word	0x0f000001

08000a94 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <MX_DAC_Init+0x4c>)
 8000aa4:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <MX_DAC_Init+0x50>)
 8000aa6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <MX_DAC_Init+0x4c>)
 8000aaa:	f002 f8d8 	bl	8002c5e <HAL_DAC_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ab4:	f000 fc9a 	bl	80013ec <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <MX_DAC_Init+0x4c>)
 8000ac8:	f002 f8eb 	bl	8002ca2 <HAL_DAC_ConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000ad2:	f000 fc8b 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20003518 	.word	0x20003518
 8000ae4:	40007400 	.word	0x40007400

08000ae8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000aec:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <MX_DFSDM1_Init+0xb4>)
 8000aee:	4a2c      	ldr	r2, [pc, #176]	; (8000ba0 <MX_DFSDM1_Init+0xb8>)
 8000af0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000af2:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <MX_DFSDM1_Init+0xb4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 8000af8:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <MX_DFSDM1_Init+0xb4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000afe:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <MX_DFSDM1_Init+0xb4>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 8000b04:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <MX_DFSDM1_Init+0xb4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 50;
 8000b0a:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <MX_DFSDM1_Init+0xb4>)
 8000b0c:	2232      	movs	r2, #50	; 0x32
 8000b0e:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000b10:	4b22      	ldr	r3, [pc, #136]	; (8000b9c <MX_DFSDM1_Init+0xb4>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000b16:	4821      	ldr	r0, [pc, #132]	; (8000b9c <MX_DFSDM1_Init+0xb4>)
 8000b18:	f002 fa0e 	bl	8002f38 <HAL_DFSDM_FilterInit>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_DFSDM1_Init+0x3e>
  {
    Error_Handler();
 8000b22:	f000 fc63 	bl	80013ec <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_DFSDM1_Init+0xbc>)
 8000b28:	4a1f      	ldr	r2, [pc, #124]	; (8000ba8 <MX_DFSDM1_Init+0xc0>)
 8000b2a:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_DFSDM1_Init+0xbc>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_DFSDM1_Init+0xbc>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 40;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_DFSDM1_Init+0xbc>)
 8000b3a:	2228      	movs	r2, #40	; 0x28
 8000b3c:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_DFSDM1_Init+0xbc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_DFSDM1_Init+0xbc>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_DFSDM1_Init+0xbc>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_DFSDM1_Init+0xbc>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_DFSDM1_Init+0xbc>)
 8000b58:	2204      	movs	r2, #4
 8000b5a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_DFSDM1_Init+0xbc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_DFSDM1_Init+0xbc>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_DFSDM1_Init+0xbc>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <MX_DFSDM1_Init+0xbc>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000b74:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <MX_DFSDM1_Init+0xbc>)
 8000b76:	f002 f8e1 	bl	8002d3c <HAL_DFSDM_ChannelInit>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_DFSDM1_Init+0x9c>
  {
    Error_Handler();
 8000b80:	f000 fc34 	bl	80013ec <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000b84:	2201      	movs	r2, #1
 8000b86:	4909      	ldr	r1, [pc, #36]	; (8000bac <MX_DFSDM1_Init+0xc4>)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_DFSDM1_Init+0xb4>)
 8000b8a:	f002 fac1 	bl	8003110 <HAL_DFSDM_FilterConfigRegChannel>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_DFSDM1_Init+0xb0>
  {
    Error_Handler();
 8000b94:	f000 fc2a 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20003354 	.word	0x20003354
 8000ba0:	40016100 	.word	0x40016100
 8000ba4:	2000131c 	.word	0x2000131c
 8000ba8:	40016020 	.word	0x40016020
 8000bac:	00010002 	.word	0x00010002

08000bb0 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_filter0.Instance = DFSDM2_Filter0;
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <MX_DFSDM2_Init+0xb4>)
 8000bb6:	4a2c      	ldr	r2, [pc, #176]	; (8000c68 <MX_DFSDM2_Init+0xb8>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hdfsdm2_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000bba:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <MX_DFSDM2_Init+0xb4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
  hdfsdm2_filter0.Init.RegularParam.FastMode = ENABLE;
 8000bc0:	4b28      	ldr	r3, [pc, #160]	; (8000c64 <MX_DFSDM2_Init+0xb4>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	721a      	strb	r2, [r3, #8]
  hdfsdm2_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000bc6:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <MX_DFSDM2_Init+0xb4>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	725a      	strb	r2, [r3, #9]
  hdfsdm2_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 8000bcc:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <MX_DFSDM2_Init+0xb4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  hdfsdm2_filter0.Init.FilterParam.Oversampling = 50;
 8000bd2:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <MX_DFSDM2_Init+0xb4>)
 8000bd4:	2232      	movs	r2, #50	; 0x32
 8000bd6:	621a      	str	r2, [r3, #32]
  hdfsdm2_filter0.Init.FilterParam.IntOversampling = 1;
 8000bd8:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <MX_DFSDM2_Init+0xb4>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm2_filter0) != HAL_OK)
 8000bde:	4821      	ldr	r0, [pc, #132]	; (8000c64 <MX_DFSDM2_Init+0xb4>)
 8000be0:	f002 f9aa 	bl	8002f38 <HAL_DFSDM_FilterInit>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_DFSDM2_Init+0x3e>
  {
    Error_Handler();
 8000bea:	f000 fbff 	bl	80013ec <Error_Handler>
  }
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8000bee:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <MX_DFSDM2_Init+0xbc>)
 8000bf0:	4a1f      	ldr	r2, [pc, #124]	; (8000c70 <MX_DFSDM2_Init+0xc0>)
 8000bf2:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <MX_DFSDM2_Init+0xbc>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <MX_DFSDM2_Init+0xbc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 40;
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_DFSDM2_Init+0xbc>)
 8000c02:	2228      	movs	r2, #40	; 0x28
 8000c04:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <MX_DFSDM2_Init+0xbc>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_DFSDM2_Init+0xbc>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <MX_DFSDM2_Init+0xbc>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_DFSDM2_Init+0xbc>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <MX_DFSDM2_Init+0xbc>)
 8000c20:	2204      	movs	r2, #4
 8000c22:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_DFSDM2_Init+0xbc>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MX_DFSDM2_Init+0xbc>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_DFSDM2_Init+0xbc>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <MX_DFSDM2_Init+0xbc>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 8000c3c:	480b      	ldr	r0, [pc, #44]	; (8000c6c <MX_DFSDM2_Init+0xbc>)
 8000c3e:	f002 f87d 	bl	8002d3c <HAL_DFSDM_ChannelInit>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_DFSDM2_Init+0x9c>
  {
    Error_Handler();
 8000c48:	f000 fbd0 	bl	80013ec <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm2_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4909      	ldr	r1, [pc, #36]	; (8000c74 <MX_DFSDM2_Init+0xc4>)
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <MX_DFSDM2_Init+0xb4>)
 8000c52:	f002 fa5d 	bl	8003110 <HAL_DFSDM_FilterConfigRegChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_DFSDM2_Init+0xb0>
  {
    Error_Handler();
 8000c5c:	f000 fbc6 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20003578 	.word	0x20003578
 8000c68:	40016500 	.word	0x40016500
 8000c6c:	20003438 	.word	0x20003438
 8000c70:	40016420 	.word	0x40016420
 8000c74:	00010002 	.word	0x00010002

08000c78 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <MX_FMPI2C1_Init+0x60>)
 8000c7e:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <MX_FMPI2C1_Init+0x64>)
 8000c80:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x20303E5D;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_FMPI2C1_Init+0x60>)
 8000c84:	4a16      	ldr	r2, [pc, #88]	; (8000ce0 <MX_FMPI2C1_Init+0x68>)
 8000c86:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <MX_FMPI2C1_Init+0x60>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <MX_FMPI2C1_Init+0x60>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <MX_FMPI2C1_Init+0x60>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_FMPI2C1_Init+0x60>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <MX_FMPI2C1_Init+0x60>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_FMPI2C1_Init+0x60>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <MX_FMPI2C1_Init+0x60>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000cb2:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <MX_FMPI2C1_Init+0x60>)
 8000cb4:	f002 ff56 	bl	8003b64 <HAL_FMPI2C_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000cbe:	f000 fb95 	bl	80013ec <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_FMPI2C1_Init+0x60>)
 8000cc6:	f002 ffdc 	bl	8003c82 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000cd0:	f000 fb8c 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2000352c 	.word	0x2000352c
 8000cdc:	40006000 	.word	0x40006000
 8000ce0:	20303e5d 	.word	0x20303e5d

08000ce4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_I2S2_Init+0x54>)
 8000cea:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <MX_I2S2_Init+0x58>)
 8000cec:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_I2S2_Init+0x54>)
 8000cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <MX_I2S2_Init+0x54>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_I2S2_Init+0x54>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <MX_I2S2_Init+0x54>)
 8000d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d08:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_I2S2_Init+0x54>)
 8000d0c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000d10:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_I2S2_Init+0x54>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <MX_I2S2_Init+0x54>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_I2S2_Init+0x54>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_I2S2_Init+0x54>)
 8000d26:	f003 f9bb 	bl	80040a0 <HAL_I2S_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000d30:	f000 fb5c 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20004740 	.word	0x20004740
 8000d3c:	40003800 	.word	0x40003800

08000d40 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_QUADSPI_Init+0x50>)
 8000d46:	4a13      	ldr	r2, [pc, #76]	; (8000d94 <MX_QUADSPI_Init+0x54>)
 8000d48:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_QUADSPI_Init+0x50>)
 8000d4c:	22ff      	movs	r2, #255	; 0xff
 8000d4e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_QUADSPI_Init+0x50>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_QUADSPI_Init+0x50>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <MX_QUADSPI_Init+0x50>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_QUADSPI_Init+0x50>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_QUADSPI_Init+0x50>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_QUADSPI_Init+0x50>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_QUADSPI_Init+0x50>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_QUADSPI_Init+0x50>)
 8000d7c:	f003 fe52 	bl	8004a24 <HAL_QSPI_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000d86:	f000 fb31 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20004788 	.word	0x20004788
 8000d94:	a0001000 	.word	0xa0001000

08000d98 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_SDIO_SD_Init+0x38>)
 8000d9e:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <MX_SDIO_SD_Init+0x3c>)
 8000da0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_SDIO_SD_Init+0x38>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_SDIO_SD_Init+0x38>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <MX_SDIO_SD_Init+0x38>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_SDIO_SD_Init+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <MX_SDIO_SD_Init+0x38>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <MX_SDIO_SD_Init+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	2000367c 	.word	0x2000367c
 8000dd4:	40012c00 	.word	0x40012c00

08000dd8 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_UART10_Init+0x4c>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <MX_UART10_Init+0x50>)
 8000de0:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <MX_UART10_Init+0x4c>)
 8000de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de8:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <MX_UART10_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_UART10_Init+0x4c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <MX_UART10_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_UART10_Init+0x4c>)
 8000dfe:	220c      	movs	r2, #12
 8000e00:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <MX_UART10_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_UART10_Init+0x4c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_UART10_Init+0x4c>)
 8000e10:	f005 fe94 	bl	8006b3c <HAL_UART_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000e1a:	f000 fae7 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200033a8 	.word	0x200033a8
 8000e28:	40011c00 	.word	0x40011c00

08000e2c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_USART6_UART_Init+0x4c>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <MX_USART6_UART_Init+0x50>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <MX_USART6_UART_Init+0x4c>)
 8000e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e3c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <MX_USART6_UART_Init+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_USART6_UART_Init+0x4c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <MX_USART6_UART_Init+0x4c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_USART6_UART_Init+0x4c>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <MX_USART6_UART_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <MX_USART6_UART_Init+0x4c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_USART6_UART_Init+0x4c>)
 8000e64:	f005 fe6a 	bl	8006b3c <HAL_UART_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000e6e:	f000 fabd 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20003700 	.word	0x20003700
 8000e7c:	40011400 	.word	0x40011400

08000e80 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <MX_DMA_Init+0x4c>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <MX_DMA_Init+0x4c>)
 8000e90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <MX_DMA_Init+0x4c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2038      	movs	r0, #56	; 0x38
 8000ea8:	f001 fea3 	bl	8002bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000eac:	2038      	movs	r0, #56	; 0x38
 8000eae:	f001 febc 	bl	8002c2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	203c      	movs	r0, #60	; 0x3c
 8000eb8:	f001 fe9b 	bl	8002bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000ebc:	203c      	movs	r0, #60	; 0x3c
 8000ebe:	f001 feb4 	bl	8002c2a <HAL_NVIC_EnableIRQ>

}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800

08000ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08e      	sub	sp, #56	; 0x38
 8000ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
 8000eea:	4bb1      	ldr	r3, [pc, #708]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4ab0      	ldr	r2, [pc, #704]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000ef0:	f043 0310 	orr.w	r3, r3, #16
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4bae      	ldr	r3, [pc, #696]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	623b      	str	r3, [r7, #32]
 8000f00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
 8000f06:	4baa      	ldr	r3, [pc, #680]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4aa9      	ldr	r2, [pc, #676]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4ba7      	ldr	r3, [pc, #668]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	61fb      	str	r3, [r7, #28]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
 8000f22:	4ba3      	ldr	r3, [pc, #652]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4aa2      	ldr	r2, [pc, #648]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000f28:	f043 0320 	orr.w	r3, r3, #32
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4ba0      	ldr	r3, [pc, #640]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0320 	and.w	r3, r3, #32
 8000f36:	61bb      	str	r3, [r7, #24]
 8000f38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	4b9c      	ldr	r3, [pc, #624]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a9b      	ldr	r2, [pc, #620]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b99      	ldr	r3, [pc, #612]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b95      	ldr	r3, [pc, #596]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a94      	ldr	r2, [pc, #592]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b92      	ldr	r3, [pc, #584]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b8e      	ldr	r3, [pc, #568]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a8d      	ldr	r2, [pc, #564]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b8b      	ldr	r3, [pc, #556]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	4b87      	ldr	r3, [pc, #540]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a86      	ldr	r2, [pc, #536]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b84      	ldr	r3, [pc, #528]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	4b80      	ldr	r3, [pc, #512]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a7f      	ldr	r2, [pc, #508]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000fb4:	f043 0308 	orr.w	r3, r3, #8
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b7d      	ldr	r3, [pc, #500]	; (80011b0 <MX_GPIO_Init+0x2e0>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2138      	movs	r1, #56	; 0x38
 8000fca:	487a      	ldr	r0, [pc, #488]	; (80011b4 <MX_GPIO_Init+0x2e4>)
 8000fcc:	f003 f84e 	bl	800406c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2120      	movs	r1, #32
 8000fd4:	4878      	ldr	r0, [pc, #480]	; (80011b8 <MX_GPIO_Init+0x2e8>)
 8000fd6:	f003 f849 	bl	800406c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000fe0:	4876      	ldr	r0, [pc, #472]	; (80011bc <MX_GPIO_Init+0x2ec>)
 8000fe2:	f003 f843 	bl	800406c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000fec:	4874      	ldr	r0, [pc, #464]	; (80011c0 <MX_GPIO_Init+0x2f0>)
 8000fee:	f003 f83d 	bl	800406c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000ff2:	2338      	movs	r3, #56	; 0x38
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001006:	4619      	mov	r1, r3
 8001008:	486a      	ldr	r0, [pc, #424]	; (80011b4 <MX_GPIO_Init+0x2e4>)
 800100a:	f002 fe85 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 800100e:	2340      	movs	r3, #64	; 0x40
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800101e:	2303      	movs	r3, #3
 8001020:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001026:	4619      	mov	r1, r3
 8001028:	4862      	ldr	r0, [pc, #392]	; (80011b4 <MX_GPIO_Init+0x2e4>)
 800102a:	f002 fe75 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800102e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001040:	2302      	movs	r3, #2
 8001042:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001048:	4619      	mov	r1, r3
 800104a:	485e      	ldr	r0, [pc, #376]	; (80011c4 <MX_GPIO_Init+0x2f4>)
 800104c:	f002 fe64 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001050:	2302      	movs	r3, #2
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001054:	4b5c      	ldr	r3, [pc, #368]	; (80011c8 <MX_GPIO_Init+0x2f8>)
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	4619      	mov	r1, r3
 8001062:	4855      	ldr	r0, [pc, #340]	; (80011b8 <MX_GPIO_Init+0x2e8>)
 8001064:	f002 fe58 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8001068:	2301      	movs	r3, #1
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800106c:	4b56      	ldr	r3, [pc, #344]	; (80011c8 <MX_GPIO_Init+0x2f8>)
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001078:	4619      	mov	r1, r3
 800107a:	4854      	ldr	r0, [pc, #336]	; (80011cc <MX_GPIO_Init+0x2fc>)
 800107c:	f002 fe4c 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8001080:	2320      	movs	r3, #32
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001094:	4619      	mov	r1, r3
 8001096:	4848      	ldr	r0, [pc, #288]	; (80011b8 <MX_GPIO_Init+0x2e8>)
 8001098:	f002 fe3e 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800109c:	2301      	movs	r3, #1
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010ac:	2302      	movs	r3, #2
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b4:	4619      	mov	r1, r3
 80010b6:	4841      	ldr	r0, [pc, #260]	; (80011bc <MX_GPIO_Init+0x2ec>)
 80010b8:	f002 fe2e 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 80010bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ce:	4619      	mov	r1, r3
 80010d0:	483c      	ldr	r0, [pc, #240]	; (80011c4 <MX_GPIO_Init+0x2f4>)
 80010d2:	f002 fe21 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80010d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010dc:	2312      	movs	r3, #18
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e4:	2303      	movs	r3, #3
 80010e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010e8:	2304      	movs	r3, #4
 80010ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f0:	4619      	mov	r1, r3
 80010f2:	4832      	ldr	r0, [pc, #200]	; (80011bc <MX_GPIO_Init+0x2ec>)
 80010f4:	f002 fe10 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800110a:	2307      	movs	r3, #7
 800110c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001112:	4619      	mov	r1, r3
 8001114:	4829      	ldr	r0, [pc, #164]	; (80011bc <MX_GPIO_Init+0x2ec>)
 8001116:	f002 fdff 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 800111a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001130:	4619      	mov	r1, r3
 8001132:	4822      	ldr	r0, [pc, #136]	; (80011bc <MX_GPIO_Init+0x2ec>)
 8001134:	f002 fdf0 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8001138:	f248 0380 	movw	r3, #32896	; 0x8080
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <MX_GPIO_Init+0x2f8>)
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	4619      	mov	r1, r3
 800114c:	481c      	ldr	r0, [pc, #112]	; (80011c0 <MX_GPIO_Init+0x2f0>)
 800114e:	f002 fde3 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 8001152:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	4619      	mov	r1, r3
 800116a:	4815      	ldr	r0, [pc, #84]	; (80011c0 <MX_GPIO_Init+0x2f0>)
 800116c:	f002 fdd4 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001170:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001182:	230a      	movs	r3, #10
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118a:	4619      	mov	r1, r3
 800118c:	480f      	ldr	r0, [pc, #60]	; (80011cc <MX_GPIO_Init+0x2fc>)
 800118e:	f002 fdc3 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8001192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011a4:	2301      	movs	r3, #1
 80011a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	e010      	b.n	80011d0 <MX_GPIO_Init+0x300>
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020400 	.word	0x40020400
 80011c0:	40021800 	.word	0x40021800
 80011c4:	40021400 	.word	0x40021400
 80011c8:	10110000 	.word	0x10110000
 80011cc:	40020000 	.word	0x40020000
 80011d0:	4619      	mov	r1, r3
 80011d2:	481a      	ldr	r0, [pc, #104]	; (800123c <MX_GPIO_Init+0x36c>)
 80011d4:	f002 fda0 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80011d8:	2330      	movs	r3, #48	; 0x30
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011e8:	2306      	movs	r3, #6
 80011ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f0:	4619      	mov	r1, r3
 80011f2:	4813      	ldr	r0, [pc, #76]	; (8001240 <MX_GPIO_Init+0x370>)
 80011f4:	f002 fd90 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80011f8:	2340      	movs	r3, #64	; 0x40
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_GPIO_Init+0x374>)
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001208:	4619      	mov	r1, r3
 800120a:	480d      	ldr	r0, [pc, #52]	; (8001240 <MX_GPIO_Init+0x370>)
 800120c:	f002 fd84 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001222:	2302      	movs	r3, #2
 8001224:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122a:	4619      	mov	r1, r3
 800122c:	4804      	ldr	r0, [pc, #16]	; (8001240 <MX_GPIO_Init+0x370>)
 800122e:	f002 fd73 	bl	8003d18 <HAL_GPIO_Init>

}
 8001232:	bf00      	nop
 8001234:	3738      	adds	r7, #56	; 0x38
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40020000 	.word	0x40020000
 8001240:	40020400 	.word	0x40020400
 8001244:	10110000 	.word	0x10110000

08001248 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	615a      	str	r2, [r3, #20]
 800125e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001260:	4b4f      	ldr	r3, [pc, #316]	; (80013a0 <MX_FSMC_Init+0x158>)
 8001262:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001266:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001268:	4b4d      	ldr	r3, [pc, #308]	; (80013a0 <MX_FSMC_Init+0x158>)
 800126a:	4a4e      	ldr	r2, [pc, #312]	; (80013a4 <MX_FSMC_Init+0x15c>)
 800126c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800126e:	4b4c      	ldr	r3, [pc, #304]	; (80013a0 <MX_FSMC_Init+0x158>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001274:	4b4a      	ldr	r3, [pc, #296]	; (80013a0 <MX_FSMC_Init+0x158>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800127a:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <MX_FSMC_Init+0x158>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001280:	4b47      	ldr	r3, [pc, #284]	; (80013a0 <MX_FSMC_Init+0x158>)
 8001282:	2210      	movs	r2, #16
 8001284:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001286:	4b46      	ldr	r3, [pc, #280]	; (80013a0 <MX_FSMC_Init+0x158>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800128c:	4b44      	ldr	r3, [pc, #272]	; (80013a0 <MX_FSMC_Init+0x158>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001292:	4b43      	ldr	r3, [pc, #268]	; (80013a0 <MX_FSMC_Init+0x158>)
 8001294:	2200      	movs	r2, #0
 8001296:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8001298:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <MX_FSMC_Init+0x158>)
 800129a:	2200      	movs	r2, #0
 800129c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800129e:	4b40      	ldr	r3, [pc, #256]	; (80013a0 <MX_FSMC_Init+0x158>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80012a4:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <MX_FSMC_Init+0x158>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012aa:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <MX_FSMC_Init+0x158>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80012b0:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <MX_FSMC_Init+0x158>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80012b6:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <MX_FSMC_Init+0x158>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80012bc:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <MX_FSMC_Init+0x158>)
 80012be:	2200      	movs	r2, #0
 80012c0:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80012c2:	4b37      	ldr	r3, [pc, #220]	; (80013a0 <MX_FSMC_Init+0x158>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80012c8:	230f      	movs	r3, #15
 80012ca:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80012cc:	230f      	movs	r3, #15
 80012ce:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80012d0:	23ff      	movs	r3, #255	; 0xff
 80012d2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80012d4:	230f      	movs	r3, #15
 80012d6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80012d8:	2310      	movs	r3, #16
 80012da:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80012dc:	2311      	movs	r3, #17
 80012de:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2200      	movs	r2, #0
 80012e8:	4619      	mov	r1, r3
 80012ea:	482d      	ldr	r0, [pc, #180]	; (80013a0 <MX_FSMC_Init+0x158>)
 80012ec:	f005 fbe2 	bl	8006ab4 <HAL_SRAM_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 80012f6:	f000 f879 	bl	80013ec <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 80012fa:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <MX_FSMC_Init+0x160>)
 80012fc:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001300:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001302:	4b29      	ldr	r3, [pc, #164]	; (80013a8 <MX_FSMC_Init+0x160>)
 8001304:	4a27      	ldr	r2, [pc, #156]	; (80013a4 <MX_FSMC_Init+0x15c>)
 8001306:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8001308:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <MX_FSMC_Init+0x160>)
 800130a:	2204      	movs	r2, #4
 800130c:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800130e:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <MX_FSMC_Init+0x160>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001314:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <MX_FSMC_Init+0x160>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800131a:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <MX_FSMC_Init+0x160>)
 800131c:	2210      	movs	r2, #16
 800131e:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001320:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <MX_FSMC_Init+0x160>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <MX_FSMC_Init+0x160>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800132c:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <MX_FSMC_Init+0x160>)
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <MX_FSMC_Init+0x160>)
 8001334:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_FSMC_Init+0x160>)
 800133c:	2200      	movs	r2, #0
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <MX_FSMC_Init+0x160>)
 8001342:	2200      	movs	r2, #0
 8001344:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_FSMC_Init+0x160>)
 8001348:	2200      	movs	r2, #0
 800134a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_FSMC_Init+0x160>)
 800134e:	2200      	movs	r2, #0
 8001350:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <MX_FSMC_Init+0x160>)
 8001354:	2200      	movs	r2, #0
 8001356:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <MX_FSMC_Init+0x160>)
 800135a:	2200      	movs	r2, #0
 800135c:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <MX_FSMC_Init+0x160>)
 8001360:	2200      	movs	r2, #0
 8001362:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001364:	230f      	movs	r3, #15
 8001366:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001368:	230f      	movs	r3, #15
 800136a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800136c:	23ff      	movs	r3, #255	; 0xff
 800136e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001370:	230f      	movs	r3, #15
 8001372:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001374:	2310      	movs	r3, #16
 8001376:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001378:	2311      	movs	r3, #17
 800137a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	2200      	movs	r2, #0
 8001384:	4619      	mov	r1, r3
 8001386:	4808      	ldr	r0, [pc, #32]	; (80013a8 <MX_FSMC_Init+0x160>)
 8001388:	f005 fb94 	bl	8006ab4 <HAL_SRAM_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_FSMC_Init+0x14e>
  {
    Error_Handler( );
 8001392:	f000 f82b 	bl	80013ec <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001396:	bf00      	nop
 8001398:	3720      	adds	r7, #32
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200033e8 	.word	0x200033e8
 80013a4:	a0000104 	.word	0xa0000104
 80013a8:	2000362c 	.word	0x2000362c

080013ac <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

		DmaRecHalfBuffCplt=1;
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]


}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	2000008c 	.word	0x2000008c

080013cc <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	DmaRecBuffCplt=1;
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	2000008d 	.word	0x2000008d

080013ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_MspInit+0x4c>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <HAL_MspInit+0x4c>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_MspInit+0x4c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_MspInit+0x4c>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a08      	ldr	r2, [pc, #32]	; (8001448 <HAL_MspInit+0x4c>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_MspInit+0x4c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800

0800144c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08c      	sub	sp, #48	; 0x30
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a31      	ldr	r2, [pc, #196]	; (8001530 <HAL_ADC_MspInit+0xe4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d15b      	bne.n	8001526 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	4b30      	ldr	r3, [pc, #192]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a2f      	ldr	r2, [pc, #188]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	4b29      	ldr	r3, [pc, #164]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a28      	ldr	r2, [pc, #160]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b22      	ldr	r3, [pc, #136]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a21      	ldr	r2, [pc, #132]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a1a      	ldr	r2, [pc, #104]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 80014de:	2311      	movs	r3, #17
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e2:	2303      	movs	r3, #3
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	4619      	mov	r1, r3
 80014f0:	4811      	ldr	r0, [pc, #68]	; (8001538 <HAL_ADC_MspInit+0xec>)
 80014f2:	f002 fc11 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 80014f6:	2326      	movs	r3, #38	; 0x26
 80014f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014fa:	2303      	movs	r3, #3
 80014fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	4619      	mov	r1, r3
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <HAL_ADC_MspInit+0xf0>)
 800150a:	f002 fc05 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 800150e:	2302      	movs	r3, #2
 8001510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001512:	2303      	movs	r3, #3
 8001514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	4619      	mov	r1, r3
 8001520:	4807      	ldr	r0, [pc, #28]	; (8001540 <HAL_ADC_MspInit+0xf4>)
 8001522:	f002 fbf9 	bl	8003d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001526:	bf00      	nop
 8001528:	3730      	adds	r7, #48	; 0x30
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40012000 	.word	0x40012000
 8001534:	40023800 	.word	0x40023800
 8001538:	40020800 	.word	0x40020800
 800153c:	40020000 	.word	0x40020000
 8001540:	40020400 	.word	0x40020400

08001544 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <HAL_DAC_MspInit+0x7c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d127      	bne.n	80015b6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_DAC_MspInit+0x80>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <HAL_DAC_MspInit+0x80>)
 8001570:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <HAL_DAC_MspInit+0x80>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <HAL_DAC_MspInit+0x80>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <HAL_DAC_MspInit+0x80>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <HAL_DAC_MspInit+0x80>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 800159e:	2310      	movs	r3, #16
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a2:	2303      	movs	r3, #3
 80015a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <HAL_DAC_MspInit+0x84>)
 80015b2:	f002 fbb1 	bl	8003d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40007400 	.word	0x40007400
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000

080015cc <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08e      	sub	sp, #56	; 0x38
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_FILTER_INSTANCE(hdfsdm_filter->Instance))&&(DFSDM1_Init == 0))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a32      	ldr	r2, [pc, #200]	; (80016b4 <HAL_DFSDM_FilterMspInit+0xe8>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d004      	beq.n	80015f8 <HAL_DFSDM_FilterMspInit+0x2c>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a31      	ldr	r2, [pc, #196]	; (80016b8 <HAL_DFSDM_FilterMspInit+0xec>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d16b      	bne.n	80016d0 <HAL_DFSDM_FilterMspInit+0x104>
 80015f8:	4b30      	ldr	r3, [pc, #192]	; (80016bc <HAL_DFSDM_FilterMspInit+0xf0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d167      	bne.n	80016d0 <HAL_DFSDM_FilterMspInit+0x104>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001600:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <HAL_DFSDM_FilterMspInit+0xf4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	4a2e      	ldr	r2, [pc, #184]	; (80016c0 <HAL_DFSDM_FilterMspInit+0xf4>)
 8001608:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800160a:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <HAL_DFSDM_FilterMspInit+0xf4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d10d      	bne.n	800162e <HAL_DFSDM_FilterMspInit+0x62>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
 8001616:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	4a2a      	ldr	r2, [pc, #168]	; (80016c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 800161c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001620:	6453      	str	r3, [r2, #68]	; 0x44
 8001622:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800162a:	623b      	str	r3, [r7, #32]
 800162c:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
 8001632:	4b24      	ldr	r3, [pc, #144]	; (80016c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a23      	ldr	r2, [pc, #140]	; (80016c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	61fb      	str	r3, [r7, #28]
 8001648:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
 800164e:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a1c      	ldr	r2, [pc, #112]	; (80016c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001654:	f043 0308 	orr.w	r3, r3, #8
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	61bb      	str	r3, [r7, #24]
 8001664:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration    
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001666:	f44f 7380 	mov.w	r3, #256	; 0x100
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	2302      	movs	r3, #2
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001678:	2306      	movs	r3, #6
 800167a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001680:	4619      	mov	r1, r3
 8001682:	4811      	ldr	r0, [pc, #68]	; (80016c8 <HAL_DFSDM_FilterMspInit+0xfc>)
 8001684:	f002 fb48 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001688:	2340      	movs	r3, #64	; 0x40
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001698:	2306      	movs	r3, #6
 800169a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800169c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a0:	4619      	mov	r1, r3
 80016a2:	480a      	ldr	r0, [pc, #40]	; (80016cc <HAL_DFSDM_FilterMspInit+0x100>)
 80016a4:	f002 fb38 	bl	8003d18 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <HAL_DFSDM_FilterMspInit+0xf0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	4a03      	ldr	r2, [pc, #12]	; (80016bc <HAL_DFSDM_FilterMspInit+0xf0>)
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	e091      	b.n	80017d8 <HAL_DFSDM_FilterMspInit+0x20c>
 80016b4:	40016100 	.word	0x40016100
 80016b8:	40016180 	.word	0x40016180
 80016bc:	20000098 	.word	0x20000098
 80016c0:	20000090 	.word	0x20000090
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020000 	.word	0x40020000
 80016cc:	40020c00 	.word	0x40020c00
  }
  else if(!(IS_DFSDM1_FILTER_INSTANCE(hdfsdm_filter->Instance))&&(DFSDM2_Init == 0))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a87      	ldr	r2, [pc, #540]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x328>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d07e      	beq.n	80017d8 <HAL_DFSDM_FilterMspInit+0x20c>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a86      	ldr	r2, [pc, #536]	; (80018f8 <HAL_DFSDM_FilterMspInit+0x32c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d079      	beq.n	80017d8 <HAL_DFSDM_FilterMspInit+0x20c>
 80016e4:	4b85      	ldr	r3, [pc, #532]	; (80018fc <HAL_DFSDM_FilterMspInit+0x330>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d175      	bne.n	80017d8 <HAL_DFSDM_FilterMspInit+0x20c>
  {
  /* USER CODE BEGIN DFSDM2_MspInit 0 */

  /* USER CODE END DFSDM2_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM2_CLK_ENABLED++;
 80016ec:	4b84      	ldr	r3, [pc, #528]	; (8001900 <HAL_DFSDM_FilterMspInit+0x334>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	3301      	adds	r3, #1
 80016f2:	4a83      	ldr	r2, [pc, #524]	; (8001900 <HAL_DFSDM_FilterMspInit+0x334>)
 80016f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM2_CLK_ENABLED==1){
 80016f6:	4b82      	ldr	r3, [pc, #520]	; (8001900 <HAL_DFSDM_FilterMspInit+0x334>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d10d      	bne.n	800171a <HAL_DFSDM_FilterMspInit+0x14e>
      __HAL_RCC_DFSDM2_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	4b80      	ldr	r3, [pc, #512]	; (8001904 <HAL_DFSDM_FilterMspInit+0x338>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a7f      	ldr	r2, [pc, #508]	; (8001904 <HAL_DFSDM_FilterMspInit+0x338>)
 8001708:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b7d      	ldr	r3, [pc, #500]	; (8001904 <HAL_DFSDM_FilterMspInit+0x338>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697b      	ldr	r3, [r7, #20]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b79      	ldr	r3, [pc, #484]	; (8001904 <HAL_DFSDM_FilterMspInit+0x338>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a78      	ldr	r2, [pc, #480]	; (8001904 <HAL_DFSDM_FilterMspInit+0x338>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b76      	ldr	r3, [pc, #472]	; (8001904 <HAL_DFSDM_FilterMspInit+0x338>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b72      	ldr	r3, [pc, #456]	; (8001904 <HAL_DFSDM_FilterMspInit+0x338>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a71      	ldr	r2, [pc, #452]	; (8001904 <HAL_DFSDM_FilterMspInit+0x338>)
 8001740:	f043 0308 	orr.w	r3, r3, #8
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b6f      	ldr	r3, [pc, #444]	; (8001904 <HAL_DFSDM_FilterMspInit+0x338>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	4b6b      	ldr	r3, [pc, #428]	; (8001904 <HAL_DFSDM_FilterMspInit+0x338>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a6a      	ldr	r2, [pc, #424]	; (8001904 <HAL_DFSDM_FilterMspInit+0x338>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b68      	ldr	r3, [pc, #416]	; (8001904 <HAL_DFSDM_FilterMspInit+0x338>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM2 GPIO Configuration    
    PA7     ------> DFSDM2_DATIN1
    PD2     ------> DFSDM2_CKOUT
    PB7     ------> DFSDM2_DATIN7 
    */
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 800177e:	2307      	movs	r3, #7
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	485f      	ldr	r0, [pc, #380]	; (8001908 <HAL_DFSDM_FilterMspInit+0x33c>)
 800178a:	f002 fac5 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 800178e:	2304      	movs	r3, #4
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 800179e:	2303      	movs	r3, #3
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a6:	4619      	mov	r1, r3
 80017a8:	4858      	ldr	r0, [pc, #352]	; (800190c <HAL_DFSDM_FilterMspInit+0x340>)
 80017aa:	f002 fab5 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 80017be:	2306      	movs	r3, #6
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 80017c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c6:	4619      	mov	r1, r3
 80017c8:	4851      	ldr	r0, [pc, #324]	; (8001910 <HAL_DFSDM_FilterMspInit+0x344>)
 80017ca:	f002 faa5 	bl	8003d18 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM2_MspInit 1 */

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
 80017ce:	4b4b      	ldr	r3, [pc, #300]	; (80018fc <HAL_DFSDM_FilterMspInit+0x330>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	4a49      	ldr	r2, [pc, #292]	; (80018fc <HAL_DFSDM_FilterMspInit+0x330>)
 80017d6:	6013      	str	r3, [r2, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a45      	ldr	r2, [pc, #276]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x328>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d13f      	bne.n	8001862 <HAL_DFSDM_FilterMspInit+0x296>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80017e2:	4b4c      	ldr	r3, [pc, #304]	; (8001914 <HAL_DFSDM_FilterMspInit+0x348>)
 80017e4:	4a4c      	ldr	r2, [pc, #304]	; (8001918 <HAL_DFSDM_FilterMspInit+0x34c>)
 80017e6:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_7;
 80017e8:	4b4a      	ldr	r3, [pc, #296]	; (8001914 <HAL_DFSDM_FilterMspInit+0x348>)
 80017ea:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80017ee:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017f0:	4b48      	ldr	r3, [pc, #288]	; (8001914 <HAL_DFSDM_FilterMspInit+0x348>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80017f6:	4b47      	ldr	r3, [pc, #284]	; (8001914 <HAL_DFSDM_FilterMspInit+0x348>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80017fc:	4b45      	ldr	r3, [pc, #276]	; (8001914 <HAL_DFSDM_FilterMspInit+0x348>)
 80017fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001802:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001804:	4b43      	ldr	r3, [pc, #268]	; (8001914 <HAL_DFSDM_FilterMspInit+0x348>)
 8001806:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800180a:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800180c:	4b41      	ldr	r3, [pc, #260]	; (8001914 <HAL_DFSDM_FilterMspInit+0x348>)
 800180e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001812:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001814:	4b3f      	ldr	r3, [pc, #252]	; (8001914 <HAL_DFSDM_FilterMspInit+0x348>)
 8001816:	f44f 7280 	mov.w	r2, #256	; 0x100
 800181a:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 800181c:	4b3d      	ldr	r3, [pc, #244]	; (8001914 <HAL_DFSDM_FilterMspInit+0x348>)
 800181e:	2200      	movs	r2, #0
 8001820:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001822:	4b3c      	ldr	r3, [pc, #240]	; (8001914 <HAL_DFSDM_FilterMspInit+0x348>)
 8001824:	2204      	movs	r2, #4
 8001826:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dfsdm1_flt0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001828:	4b3a      	ldr	r3, [pc, #232]	; (8001914 <HAL_DFSDM_FilterMspInit+0x348>)
 800182a:	2203      	movs	r2, #3
 800182c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dfsdm1_flt0.Init.MemBurst = DMA_MBURST_SINGLE;
 800182e:	4b39      	ldr	r3, [pc, #228]	; (8001914 <HAL_DFSDM_FilterMspInit+0x348>)
 8001830:	2200      	movs	r2, #0
 8001832:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dfsdm1_flt0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001834:	4b37      	ldr	r3, [pc, #220]	; (8001914 <HAL_DFSDM_FilterMspInit+0x348>)
 8001836:	2200      	movs	r2, #0
 8001838:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800183a:	4836      	ldr	r0, [pc, #216]	; (8001914 <HAL_DFSDM_FilterMspInit+0x348>)
 800183c:	f001 fe24 	bl	8003488 <HAL_DMA_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_DFSDM_FilterMspInit+0x27e>
    {
      Error_Handler();
 8001846:	f7ff fdd1 	bl	80013ec <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a31      	ldr	r2, [pc, #196]	; (8001914 <HAL_DFSDM_FilterMspInit+0x348>)
 800184e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001850:	4a30      	ldr	r2, [pc, #192]	; (8001914 <HAL_DFSDM_FilterMspInit+0x348>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a2e      	ldr	r2, [pc, #184]	; (8001914 <HAL_DFSDM_FilterMspInit+0x348>)
 800185a:	629a      	str	r2, [r3, #40]	; 0x28
 800185c:	4a2d      	ldr	r2, [pc, #180]	; (8001914 <HAL_DFSDM_FilterMspInit+0x348>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM2 DMA Init */
    /* DFSDM2_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM2_Filter0){
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a2d      	ldr	r2, [pc, #180]	; (800191c <HAL_DFSDM_FilterMspInit+0x350>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d13f      	bne.n	80018ec <HAL_DFSDM_FilterMspInit+0x320>
    hdma_dfsdm2_flt0.Instance = DMA2_Stream4;
 800186c:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <HAL_DFSDM_FilterMspInit+0x354>)
 800186e:	4a2d      	ldr	r2, [pc, #180]	; (8001924 <HAL_DFSDM_FilterMspInit+0x358>)
 8001870:	601a      	str	r2, [r3, #0]
    hdma_dfsdm2_flt0.Init.Channel = DMA_CHANNEL_8;
 8001872:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <HAL_DFSDM_FilterMspInit+0x354>)
 8001874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001878:	605a      	str	r2, [r3, #4]
    hdma_dfsdm2_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800187a:	4b29      	ldr	r3, [pc, #164]	; (8001920 <HAL_DFSDM_FilterMspInit+0x354>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
    hdma_dfsdm2_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <HAL_DFSDM_FilterMspInit+0x354>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
    hdma_dfsdm2_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <HAL_DFSDM_FilterMspInit+0x354>)
 8001888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800188c:	611a      	str	r2, [r3, #16]
    hdma_dfsdm2_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800188e:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_DFSDM_FilterMspInit+0x354>)
 8001890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001894:	615a      	str	r2, [r3, #20]
    hdma_dfsdm2_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <HAL_DFSDM_FilterMspInit+0x354>)
 8001898:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800189c:	619a      	str	r2, [r3, #24]
    hdma_dfsdm2_flt0.Init.Mode = DMA_CIRCULAR;
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_DFSDM_FilterMspInit+0x354>)
 80018a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a4:	61da      	str	r2, [r3, #28]
    hdma_dfsdm2_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80018a6:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <HAL_DFSDM_FilterMspInit+0x354>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	621a      	str	r2, [r3, #32]
    hdma_dfsdm2_flt0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018ac:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <HAL_DFSDM_FilterMspInit+0x354>)
 80018ae:	2204      	movs	r2, #4
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dfsdm2_flt0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_DFSDM_FilterMspInit+0x354>)
 80018b4:	2203      	movs	r2, #3
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dfsdm2_flt0.Init.MemBurst = DMA_MBURST_SINGLE;
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <HAL_DFSDM_FilterMspInit+0x354>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dfsdm2_flt0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018be:	4b18      	ldr	r3, [pc, #96]	; (8001920 <HAL_DFSDM_FilterMspInit+0x354>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dfsdm2_flt0) != HAL_OK)
 80018c4:	4816      	ldr	r0, [pc, #88]	; (8001920 <HAL_DFSDM_FilterMspInit+0x354>)
 80018c6:	f001 fddf 	bl	8003488 <HAL_DMA_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_DFSDM_FilterMspInit+0x308>
    {
      Error_Handler();
 80018d0:	f7ff fd8c 	bl	80013ec <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm2_flt0);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <HAL_DFSDM_FilterMspInit+0x354>)
 80018d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80018da:	4a11      	ldr	r2, [pc, #68]	; (8001920 <HAL_DFSDM_FilterMspInit+0x354>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm2_flt0);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <HAL_DFSDM_FilterMspInit+0x354>)
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
 80018e6:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <HAL_DFSDM_FilterMspInit+0x354>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 80018ec:	bf00      	nop
 80018ee:	3738      	adds	r7, #56	; 0x38
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40016100 	.word	0x40016100
 80018f8:	40016180 	.word	0x40016180
 80018fc:	2000009c 	.word	0x2000009c
 8001900:	20000094 	.word	0x20000094
 8001904:	40023800 	.word	0x40023800
 8001908:	40020000 	.word	0x40020000
 800190c:	40020c00 	.word	0x40020c00
 8001910:	40020400 	.word	0x40020400
 8001914:	200034b8 	.word	0x200034b8
 8001918:	40026410 	.word	0x40026410
 800191c:	40016500 	.word	0x40016500
 8001920:	200035cc 	.word	0x200035cc
 8001924:	40026470 	.word	0x40026470

08001928 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08e      	sub	sp, #56	; 0x38
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a81      	ldr	r2, [pc, #516]	; (8001b4c <HAL_DFSDM_ChannelMspInit+0x224>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d00e      	beq.n	8001968 <HAL_DFSDM_ChannelMspInit+0x40>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a80      	ldr	r2, [pc, #512]	; (8001b50 <HAL_DFSDM_ChannelMspInit+0x228>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d009      	beq.n	8001968 <HAL_DFSDM_ChannelMspInit+0x40>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a7e      	ldr	r2, [pc, #504]	; (8001b54 <HAL_DFSDM_ChannelMspInit+0x22c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d004      	beq.n	8001968 <HAL_DFSDM_ChannelMspInit+0x40>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a7d      	ldr	r2, [pc, #500]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x230>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d15d      	bne.n	8001a24 <HAL_DFSDM_ChannelMspInit+0xfc>
 8001968:	4b7c      	ldr	r3, [pc, #496]	; (8001b5c <HAL_DFSDM_ChannelMspInit+0x234>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d159      	bne.n	8001a24 <HAL_DFSDM_ChannelMspInit+0xfc>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001970:	4b7b      	ldr	r3, [pc, #492]	; (8001b60 <HAL_DFSDM_ChannelMspInit+0x238>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	3301      	adds	r3, #1
 8001976:	4a7a      	ldr	r2, [pc, #488]	; (8001b60 <HAL_DFSDM_ChannelMspInit+0x238>)
 8001978:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800197a:	4b79      	ldr	r3, [pc, #484]	; (8001b60 <HAL_DFSDM_ChannelMspInit+0x238>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d10d      	bne.n	800199e <HAL_DFSDM_ChannelMspInit+0x76>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
 8001986:	4b77      	ldr	r3, [pc, #476]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	4a76      	ldr	r2, [pc, #472]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 800198c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001990:	6453      	str	r3, [r2, #68]	; 0x44
 8001992:	4b74      	ldr	r3, [pc, #464]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800199a:	623b      	str	r3, [r7, #32]
 800199c:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	4b70      	ldr	r3, [pc, #448]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a6f      	ldr	r2, [pc, #444]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b6d      	ldr	r3, [pc, #436]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	4b69      	ldr	r3, [pc, #420]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a68      	ldr	r2, [pc, #416]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 80019c4:	f043 0308 	orr.w	r3, r3, #8
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b66      	ldr	r3, [pc, #408]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration    
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 80019d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80019e8:	2306      	movs	r3, #6
 80019ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80019ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f0:	4619      	mov	r1, r3
 80019f2:	485d      	ldr	r0, [pc, #372]	; (8001b68 <HAL_DFSDM_ChannelMspInit+0x240>)
 80019f4:	f002 f990 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 80019f8:	2340      	movs	r3, #64	; 0x40
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	2300      	movs	r3, #0
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001a08:	2306      	movs	r3, #6
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a10:	4619      	mov	r1, r3
 8001a12:	4856      	ldr	r0, [pc, #344]	; (8001b6c <HAL_DFSDM_ChannelMspInit+0x244>)
 8001a14:	f002 f980 	bl	8003d18 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001a18:	4b50      	ldr	r3, [pc, #320]	; (8001b5c <HAL_DFSDM_ChannelMspInit+0x234>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	4a4f      	ldr	r2, [pc, #316]	; (8001b5c <HAL_DFSDM_ChannelMspInit+0x234>)
 8001a20:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8001a22:	e08f      	b.n	8001b44 <HAL_DFSDM_ChannelMspInit+0x21c>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a48      	ldr	r2, [pc, #288]	; (8001b4c <HAL_DFSDM_ChannelMspInit+0x224>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	f000 808a 	beq.w	8001b44 <HAL_DFSDM_ChannelMspInit+0x21c>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a46      	ldr	r2, [pc, #280]	; (8001b50 <HAL_DFSDM_ChannelMspInit+0x228>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	f000 8084 	beq.w	8001b44 <HAL_DFSDM_ChannelMspInit+0x21c>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a44      	ldr	r2, [pc, #272]	; (8001b54 <HAL_DFSDM_ChannelMspInit+0x22c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d07e      	beq.n	8001b44 <HAL_DFSDM_ChannelMspInit+0x21c>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a43      	ldr	r2, [pc, #268]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x230>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d079      	beq.n	8001b44 <HAL_DFSDM_ChannelMspInit+0x21c>
 8001a50:	4b47      	ldr	r3, [pc, #284]	; (8001b70 <HAL_DFSDM_ChannelMspInit+0x248>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d175      	bne.n	8001b44 <HAL_DFSDM_ChannelMspInit+0x21c>
    HAL_RCC_DFSDM2_CLK_ENABLED++;
 8001a58:	4b46      	ldr	r3, [pc, #280]	; (8001b74 <HAL_DFSDM_ChannelMspInit+0x24c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	4a45      	ldr	r2, [pc, #276]	; (8001b74 <HAL_DFSDM_ChannelMspInit+0x24c>)
 8001a60:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM2_CLK_ENABLED==1){
 8001a62:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <HAL_DFSDM_ChannelMspInit+0x24c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d10d      	bne.n	8001a86 <HAL_DFSDM_ChannelMspInit+0x15e>
      __HAL_RCC_DFSDM2_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	4b3d      	ldr	r3, [pc, #244]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	4a3c      	ldr	r2, [pc, #240]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001a74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a78:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7a:	4b3a      	ldr	r3, [pc, #232]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a35      	ldr	r2, [pc, #212]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b33      	ldr	r3, [pc, #204]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a2e      	ldr	r2, [pc, #184]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001aac:	f043 0308 	orr.w	r3, r3, #8
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a27      	ldr	r2, [pc, #156]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001aea:	2307      	movs	r3, #7
 8001aec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af2:	4619      	mov	r1, r3
 8001af4:	481c      	ldr	r0, [pc, #112]	; (8001b68 <HAL_DFSDM_ChannelMspInit+0x240>)
 8001af6:	f002 f90f 	bl	8003d18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001afa:	2304      	movs	r3, #4
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afe:	2302      	movs	r3, #2
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b12:	4619      	mov	r1, r3
 8001b14:	4815      	ldr	r0, [pc, #84]	; (8001b6c <HAL_DFSDM_ChannelMspInit+0x244>)
 8001b16:	f002 f8ff 	bl	8003d18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001b2a:	2306      	movs	r3, #6
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b32:	4619      	mov	r1, r3
 8001b34:	4810      	ldr	r0, [pc, #64]	; (8001b78 <HAL_DFSDM_ChannelMspInit+0x250>)
 8001b36:	f002 f8ef 	bl	8003d18 <HAL_GPIO_Init>
  DFSDM2_Init++;
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <HAL_DFSDM_ChannelMspInit+0x248>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <HAL_DFSDM_ChannelMspInit+0x248>)
 8001b42:	6013      	str	r3, [r2, #0]
}
 8001b44:	bf00      	nop
 8001b46:	3738      	adds	r7, #56	; 0x38
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40016000 	.word	0x40016000
 8001b50:	40016020 	.word	0x40016020
 8001b54:	40016040 	.word	0x40016040
 8001b58:	40016060 	.word	0x40016060
 8001b5c:	20000098 	.word	0x20000098
 8001b60:	20000090 	.word	0x20000090
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020000 	.word	0x40020000
 8001b6c:	40020c00 	.word	0x40020c00
 8001b70:	2000009c 	.word	0x2000009c
 8001b74:	20000094 	.word	0x20000094
 8001b78:	40020400 	.word	0x40020400

08001b7c <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a19      	ldr	r2, [pc, #100]	; (8001c00 <HAL_FMPI2C_MspInit+0x84>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d12b      	bne.n	8001bf6 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <HAL_FMPI2C_MspInit+0x88>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a17      	ldr	r2, [pc, #92]	; (8001c04 <HAL_FMPI2C_MspInit+0x88>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_FMPI2C_MspInit+0x88>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration    
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8001bba:	23c0      	movs	r3, #192	; 0xc0
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bbe:	2312      	movs	r3, #18
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001bca:	2304      	movs	r3, #4
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480c      	ldr	r0, [pc, #48]	; (8001c08 <HAL_FMPI2C_MspInit+0x8c>)
 8001bd6:	f002 f89f 	bl	8003d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_FMPI2C_MspInit+0x88>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a08      	ldr	r2, [pc, #32]	; (8001c04 <HAL_FMPI2C_MspInit+0x88>)
 8001be4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_FMPI2C_MspInit+0x88>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8001bf6:	bf00      	nop
 8001bf8:	3728      	adds	r7, #40	; 0x28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40006000 	.word	0x40006000
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020800 	.word	0x40020800

08001c0c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08c      	sub	sp, #48	; 0x30
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a4f      	ldr	r2, [pc, #316]	; (8001d68 <HAL_I2S_MspInit+0x15c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	f040 8097 	bne.w	8001d5e <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	4b4d      	ldr	r3, [pc, #308]	; (8001d6c <HAL_I2S_MspInit+0x160>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	4a4c      	ldr	r2, [pc, #304]	; (8001d6c <HAL_I2S_MspInit+0x160>)
 8001c3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c40:	4b4a      	ldr	r3, [pc, #296]	; (8001d6c <HAL_I2S_MspInit+0x160>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	4b46      	ldr	r3, [pc, #280]	; (8001d6c <HAL_I2S_MspInit+0x160>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	4a45      	ldr	r2, [pc, #276]	; (8001d6c <HAL_I2S_MspInit+0x160>)
 8001c56:	f043 0304 	orr.w	r3, r3, #4
 8001c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5c:	4b43      	ldr	r3, [pc, #268]	; (8001d6c <HAL_I2S_MspInit+0x160>)
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c68:	2300      	movs	r3, #0
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	4b3f      	ldr	r3, [pc, #252]	; (8001d6c <HAL_I2S_MspInit+0x160>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	4a3e      	ldr	r2, [pc, #248]	; (8001d6c <HAL_I2S_MspInit+0x160>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6313      	str	r3, [r2, #48]	; 0x30
 8001c78:	4b3c      	ldr	r3, [pc, #240]	; (8001d6c <HAL_I2S_MspInit+0x160>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <HAL_I2S_MspInit+0x160>)
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	4a37      	ldr	r2, [pc, #220]	; (8001d6c <HAL_I2S_MspInit+0x160>)
 8001c8e:	f043 0308 	orr.w	r3, r3, #8
 8001c92:	6313      	str	r3, [r2, #48]	; 0x30
 8001c94:	4b35      	ldr	r3, [pc, #212]	; (8001d6c <HAL_I2S_MspInit+0x160>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	4b31      	ldr	r3, [pc, #196]	; (8001d6c <HAL_I2S_MspInit+0x160>)
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	4a30      	ldr	r2, [pc, #192]	; (8001d6c <HAL_I2S_MspInit+0x160>)
 8001caa:	f043 0302 	orr.w	r3, r3, #2
 8001cae:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb0:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <HAL_I2S_MspInit+0x160>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001ccc:	2306      	movs	r3, #6
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4826      	ldr	r0, [pc, #152]	; (8001d70 <HAL_I2S_MspInit+0x164>)
 8001cd8:	f002 f81e 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8001cdc:	2308      	movs	r3, #8
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cec:	2305      	movs	r3, #5
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	481e      	ldr	r0, [pc, #120]	; (8001d70 <HAL_I2S_MspInit+0x164>)
 8001cf8:	f002 f80e 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d0c:	2305      	movs	r3, #5
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	4619      	mov	r1, r3
 8001d16:	4817      	ldr	r0, [pc, #92]	; (8001d74 <HAL_I2S_MspInit+0x168>)
 8001d18:	f001 fffe 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8001d1c:	2308      	movs	r3, #8
 8001d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d2c:	2305      	movs	r3, #5
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001d30:	f107 031c 	add.w	r3, r7, #28
 8001d34:	4619      	mov	r1, r3
 8001d36:	4810      	ldr	r0, [pc, #64]	; (8001d78 <HAL_I2S_MspInit+0x16c>)
 8001d38:	f001 ffee 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d4e:	2305      	movs	r3, #5
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8001d52:	f107 031c 	add.w	r3, r7, #28
 8001d56:	4619      	mov	r1, r3
 8001d58:	4808      	ldr	r0, [pc, #32]	; (8001d7c <HAL_I2S_MspInit+0x170>)
 8001d5a:	f001 ffdd 	bl	8003d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d5e:	bf00      	nop
 8001d60:	3730      	adds	r7, #48	; 0x30
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40003800 	.word	0x40003800
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020800 	.word	0x40020800
 8001d74:	40020000 	.word	0x40020000
 8001d78:	40020c00 	.word	0x40020c00
 8001d7c:	40020400 	.word	0x40020400

08001d80 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08e      	sub	sp, #56	; 0x38
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a56      	ldr	r2, [pc, #344]	; (8001ef8 <HAL_QSPI_MspInit+0x178>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	f040 80a6 	bne.w	8001ef0 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001da4:	2300      	movs	r3, #0
 8001da6:	623b      	str	r3, [r7, #32]
 8001da8:	4b54      	ldr	r3, [pc, #336]	; (8001efc <HAL_QSPI_MspInit+0x17c>)
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	4a53      	ldr	r2, [pc, #332]	; (8001efc <HAL_QSPI_MspInit+0x17c>)
 8001dae:	f043 0302 	orr.w	r3, r3, #2
 8001db2:	6393      	str	r3, [r2, #56]	; 0x38
 8001db4:	4b51      	ldr	r3, [pc, #324]	; (8001efc <HAL_QSPI_MspInit+0x17c>)
 8001db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	623b      	str	r3, [r7, #32]
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61fb      	str	r3, [r7, #28]
 8001dc4:	4b4d      	ldr	r3, [pc, #308]	; (8001efc <HAL_QSPI_MspInit+0x17c>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	4a4c      	ldr	r2, [pc, #304]	; (8001efc <HAL_QSPI_MspInit+0x17c>)
 8001dca:	f043 0310 	orr.w	r3, r3, #16
 8001dce:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd0:	4b4a      	ldr	r3, [pc, #296]	; (8001efc <HAL_QSPI_MspInit+0x17c>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	4b46      	ldr	r3, [pc, #280]	; (8001efc <HAL_QSPI_MspInit+0x17c>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	4a45      	ldr	r2, [pc, #276]	; (8001efc <HAL_QSPI_MspInit+0x17c>)
 8001de6:	f043 0320 	orr.w	r3, r3, #32
 8001dea:	6313      	str	r3, [r2, #48]	; 0x30
 8001dec:	4b43      	ldr	r3, [pc, #268]	; (8001efc <HAL_QSPI_MspInit+0x17c>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	f003 0320 	and.w	r3, r3, #32
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	4b3f      	ldr	r3, [pc, #252]	; (8001efc <HAL_QSPI_MspInit+0x17c>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	4a3e      	ldr	r2, [pc, #248]	; (8001efc <HAL_QSPI_MspInit+0x17c>)
 8001e02:	f043 0302 	orr.w	r3, r3, #2
 8001e06:	6313      	str	r3, [r2, #48]	; 0x30
 8001e08:	4b3c      	ldr	r3, [pc, #240]	; (8001efc <HAL_QSPI_MspInit+0x17c>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	4b38      	ldr	r3, [pc, #224]	; (8001efc <HAL_QSPI_MspInit+0x17c>)
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	4a37      	ldr	r2, [pc, #220]	; (8001efc <HAL_QSPI_MspInit+0x17c>)
 8001e1e:	f043 0308 	orr.w	r3, r3, #8
 8001e22:	6313      	str	r3, [r2, #48]	; 0x30
 8001e24:	4b35      	ldr	r3, [pc, #212]	; (8001efc <HAL_QSPI_MspInit+0x17c>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	4b31      	ldr	r3, [pc, #196]	; (8001efc <HAL_QSPI_MspInit+0x17c>)
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	4a30      	ldr	r2, [pc, #192]	; (8001efc <HAL_QSPI_MspInit+0x17c>)
 8001e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e40:	4b2e      	ldr	r3, [pc, #184]	; (8001efc <HAL_QSPI_MspInit+0x17c>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001e5c:	2309      	movs	r3, #9
 8001e5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e64:	4619      	mov	r1, r3
 8001e66:	4826      	ldr	r0, [pc, #152]	; (8001f00 <HAL_QSPI_MspInit+0x180>)
 8001e68:	f001 ff56 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001e6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e7e:	230a      	movs	r3, #10
 8001e80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e86:	4619      	mov	r1, r3
 8001e88:	481e      	ldr	r0, [pc, #120]	; (8001f04 <HAL_QSPI_MspInit+0x184>)
 8001e8a:	f001 ff45 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001e8e:	2304      	movs	r3, #4
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001e9e:	2309      	movs	r3, #9
 8001ea0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4817      	ldr	r0, [pc, #92]	; (8001f08 <HAL_QSPI_MspInit+0x188>)
 8001eaa:	f001 ff35 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001ec0:	2309      	movs	r3, #9
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4810      	ldr	r0, [pc, #64]	; (8001f0c <HAL_QSPI_MspInit+0x18c>)
 8001ecc:	f001 ff24 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001ed0:	2340      	movs	r3, #64	; 0x40
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001edc:	2303      	movs	r3, #3
 8001ede:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ee0:	230a      	movs	r3, #10
 8001ee2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4809      	ldr	r0, [pc, #36]	; (8001f10 <HAL_QSPI_MspInit+0x190>)
 8001eec:	f001 ff14 	bl	8003d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001ef0:	bf00      	nop
 8001ef2:	3738      	adds	r7, #56	; 0x38
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	a0001000 	.word	0xa0001000
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40021400 	.word	0x40021400
 8001f08:	40020400 	.word	0x40020400
 8001f0c:	40020c00 	.word	0x40020c00
 8001f10:	40021800 	.word	0x40021800

08001f14 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a31      	ldr	r2, [pc, #196]	; (8001ff8 <HAL_SD_MspInit+0xe4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d15b      	bne.n	8001fee <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <HAL_SD_MspInit+0xe8>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	4a2f      	ldr	r2, [pc, #188]	; (8001ffc <HAL_SD_MspInit+0xe8>)
 8001f40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f44:	6453      	str	r3, [r2, #68]	; 0x44
 8001f46:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <HAL_SD_MspInit+0xe8>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <HAL_SD_MspInit+0xe8>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a28      	ldr	r2, [pc, #160]	; (8001ffc <HAL_SD_MspInit+0xe8>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b26      	ldr	r3, [pc, #152]	; (8001ffc <HAL_SD_MspInit+0xe8>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <HAL_SD_MspInit+0xe8>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a21      	ldr	r2, [pc, #132]	; (8001ffc <HAL_SD_MspInit+0xe8>)
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <HAL_SD_MspInit+0xe8>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK 
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001f8a:	2340      	movs	r3, #64	; 0x40
 8001f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f96:	2303      	movs	r3, #3
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001f9a:	230c      	movs	r3, #12
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4816      	ldr	r0, [pc, #88]	; (8002000 <HAL_SD_MspInit+0xec>)
 8001fa6:	f001 feb7 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin;
 8001faa:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001fbc:	230c      	movs	r3, #12
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	480f      	ldr	r0, [pc, #60]	; (8002004 <HAL_SD_MspInit+0xf0>)
 8001fc8:	f001 fea6 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_CLK_Pin;
 8001fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001fde:	230c      	movs	r3, #12
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CLK_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4806      	ldr	r0, [pc, #24]	; (8002004 <HAL_SD_MspInit+0xf0>)
 8001fea:	f001 fe95 	bl	8003d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001fee:	bf00      	nop
 8001ff0:	3728      	adds	r7, #40	; 0x28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40012c00 	.word	0x40012c00
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020000 	.word	0x40020000
 8002004:	40020800 	.word	0x40020800

08002008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08c      	sub	sp, #48	; 0x30
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 031c 	add.w	r3, r7, #28
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a33      	ldr	r2, [pc, #204]	; (80020f4 <HAL_UART_MspInit+0xec>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d12d      	bne.n	8002086 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	61bb      	str	r3, [r7, #24]
 800202e:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a31      	ldr	r2, [pc, #196]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 8002034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a2a      	ldr	r2, [pc, #168]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 8002050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration    
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX 
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8002062:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800206c:	2301      	movs	r3, #1
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8002074:	230b      	movs	r3, #11
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	4619      	mov	r1, r3
 800207e:	481f      	ldr	r0, [pc, #124]	; (80020fc <HAL_UART_MspInit+0xf4>)
 8002080:	f001 fe4a 	bl	8003d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002084:	e031      	b.n	80020ea <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a1d      	ldr	r2, [pc, #116]	; (8002100 <HAL_UART_MspInit+0xf8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d12c      	bne.n	80020ea <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 8002096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002098:	4a17      	ldr	r2, [pc, #92]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 800209a:	f043 0320 	orr.w	r3, r3, #32
 800209e:	6453      	str	r3, [r2, #68]	; 0x44
 80020a0:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 80020b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020ba:	6313      	str	r3, [r2, #48]	; 0x30
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80020c8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80020cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d6:	2303      	movs	r3, #3
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80020da:	2308      	movs	r3, #8
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	4619      	mov	r1, r3
 80020e4:	4805      	ldr	r0, [pc, #20]	; (80020fc <HAL_UART_MspInit+0xf4>)
 80020e6:	f001 fe17 	bl	8003d18 <HAL_GPIO_Init>
}
 80020ea:	bf00      	nop
 80020ec:	3730      	adds	r7, #48	; 0x30
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40011c00 	.word	0x40011c00
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40021800 	.word	0x40021800
 8002100:	40011400 	.word	0x40011400

08002104 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002118:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <HAL_FSMC_MspInit+0xc8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d151      	bne.n	80021c4 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8002120:	4b2a      	ldr	r3, [pc, #168]	; (80021cc <HAL_FSMC_MspInit+0xc8>)
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	4b29      	ldr	r3, [pc, #164]	; (80021d0 <HAL_FSMC_MspInit+0xcc>)
 800212c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212e:	4a28      	ldr	r2, [pc, #160]	; (80021d0 <HAL_FSMC_MspInit+0xcc>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6393      	str	r3, [r2, #56]	; 0x38
 8002136:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <HAL_FSMC_MspInit+0xcc>)
 8002138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin 
 8002142:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8002146:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin 
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002154:	230c      	movs	r3, #12
 8002156:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	4619      	mov	r1, r3
 800215c:	481d      	ldr	r0, [pc, #116]	; (80021d4 <HAL_FSMC_MspInit+0xd0>)
 800215e:	f001 fddb 	bl	8003d18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin 
 8002162:	f240 433f 	movw	r3, #1087	; 0x43f
 8002166:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002174:	230c      	movs	r3, #12
 8002176:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	4619      	mov	r1, r3
 800217c:	4816      	ldr	r0, [pc, #88]	; (80021d8 <HAL_FSMC_MspInit+0xd4>)
 800217e:	f001 fdcb 	bl	8003d18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin 
 8002182:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002186:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin 
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002190:	2303      	movs	r3, #3
 8002192:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002194:	230c      	movs	r3, #12
 8002196:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	4619      	mov	r1, r3
 800219c:	480f      	ldr	r0, [pc, #60]	; (80021dc <HAL_FSMC_MspInit+0xd8>)
 800219e:	f001 fdbb 	bl	8003d18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin 
 80021a2:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 80021a6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin 
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b0:	2303      	movs	r3, #3
 80021b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80021b4:	230c      	movs	r3, #12
 80021b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	4619      	mov	r1, r3
 80021bc:	4808      	ldr	r0, [pc, #32]	; (80021e0 <HAL_FSMC_MspInit+0xdc>)
 80021be:	f001 fdab 	bl	8003d18 <HAL_GPIO_Init>
 80021c2:	e000      	b.n	80021c6 <HAL_FSMC_MspInit+0xc2>
    return;
 80021c4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	200000a0 	.word	0x200000a0
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40021400 	.word	0x40021400
 80021d8:	40021800 	.word	0x40021800
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40020c00 	.word	0x40020c00

080021e4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80021ec:	f7ff ff8a 	bl	8002104 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220a:	e7fe      	b.n	800220a <HardFault_Handler+0x4>

0800220c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <MemManage_Handler+0x4>

08002212 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002216:	e7fe      	b.n	8002216 <BusFault_Handler+0x4>

08002218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800221c:	e7fe      	b.n	800221c <UsageFault_Handler+0x4>

0800221e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800224c:	f000 f942 	bl	80024d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}

08002254 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <DMA2_Stream0_IRQHandler+0x10>)
 800225a:	f001 fa1b 	bl	8003694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200034b8 	.word	0x200034b8

08002268 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm2_flt0);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <DMA2_Stream4_IRQHandler+0x10>)
 800226e:	f001 fa11 	bl	8003694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200035cc 	.word	0x200035cc

0800227c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	e00a      	b.n	80022a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800228e:	f3af 8000 	nop.w
 8002292:	4601      	mov	r1, r0
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	60ba      	str	r2, [r7, #8]
 800229a:	b2ca      	uxtb	r2, r1
 800229c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	3301      	adds	r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	dbf0      	blt.n	800228e <_read+0x12>
	}

return len;
 80022ac:	687b      	ldr	r3, [r7, #4]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b086      	sub	sp, #24
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	e009      	b.n	80022dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	60ba      	str	r2, [r7, #8]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	3301      	adds	r3, #1
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	dbf1      	blt.n	80022c8 <_write+0x12>
	}
	return len;
 80022e4:	687b      	ldr	r3, [r7, #4]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <_close>:

int _close(int file)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
	return -1;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002316:	605a      	str	r2, [r3, #4]
	return 0;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <_isatty>:

int _isatty(int file)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
	return 1;
 800232e:	2301      	movs	r3, #1
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
	return 0;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <_sbrk+0x50>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d102      	bne.n	800236e <_sbrk+0x16>
		heap_end = &end;
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <_sbrk+0x50>)
 800236a:	4a10      	ldr	r2, [pc, #64]	; (80023ac <_sbrk+0x54>)
 800236c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <_sbrk+0x50>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <_sbrk+0x50>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4413      	add	r3, r2
 800237c:	466a      	mov	r2, sp
 800237e:	4293      	cmp	r3, r2
 8002380:	d907      	bls.n	8002392 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002382:	f009 f821 	bl	800b3c8 <__errno>
 8002386:	4602      	mov	r2, r0
 8002388:	230c      	movs	r3, #12
 800238a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800238c:	f04f 33ff 	mov.w	r3, #4294967295
 8002390:	e006      	b.n	80023a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8002392:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <_sbrk+0x50>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	4a03      	ldr	r2, [pc, #12]	; (80023a8 <_sbrk+0x50>)
 800239c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800239e:	68fb      	ldr	r3, [r7, #12]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	200000a4 	.word	0x200000a4
 80023ac:	20006850 	.word	0x20006850

080023b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023b4:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <SystemInit+0x28>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	4a07      	ldr	r2, [pc, #28]	; (80023d8 <SystemInit+0x28>)
 80023bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <SystemInit+0x28>)
 80023c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023ca:	609a      	str	r2, [r3, #8]
#endif
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80023dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002414 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80023e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023e2:	e003      	b.n	80023ec <LoopCopyDataInit>

080023e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023ea:	3104      	adds	r1, #4

080023ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023ec:	480b      	ldr	r0, [pc, #44]	; (800241c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023f4:	d3f6      	bcc.n	80023e4 <CopyDataInit>
  ldr  r2, =_sbss
 80023f6:	4a0b      	ldr	r2, [pc, #44]	; (8002424 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023f8:	e002      	b.n	8002400 <LoopFillZerobss>

080023fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80023fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023fc:	f842 3b04 	str.w	r3, [r2], #4

08002400 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002402:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002404:	d3f9      	bcc.n	80023fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002406:	f7ff ffd3 	bl	80023b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800240a:	f008 ffe3 	bl	800b3d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800240e:	f7fe f8d7 	bl	80005c0 <main>
  bx  lr    
 8002412:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002414:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002418:	0800c8cc 	.word	0x0800c8cc
  ldr  r0, =_sdata
 800241c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002420:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002424:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002428:	2000684c 	.word	0x2000684c

0800242c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800242c:	e7fe      	b.n	800242c <ADC_IRQHandler>
	...

08002430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002434:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <HAL_Init+0x40>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <HAL_Init+0x40>)
 800243a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800243e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_Init+0x40>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <HAL_Init+0x40>)
 8002446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800244a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <HAL_Init+0x40>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a07      	ldr	r2, [pc, #28]	; (8002470 <HAL_Init+0x40>)
 8002452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002458:	2003      	movs	r0, #3
 800245a:	f000 fbbf 	bl	8002bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800245e:	2000      	movs	r0, #0
 8002460:	f000 f808 	bl	8002474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002464:	f7fe ffca 	bl	80013fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023c00 	.word	0x40023c00

08002474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_InitTick+0x54>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_InitTick+0x58>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800248a:	fbb3 f3f1 	udiv	r3, r3, r1
 800248e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fbd7 	bl	8002c46 <HAL_SYSTICK_Config>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e00e      	b.n	80024c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b0f      	cmp	r3, #15
 80024a6:	d80a      	bhi.n	80024be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a8:	2200      	movs	r2, #0
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f000 fb9f 	bl	8002bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024b4:	4a06      	ldr	r2, [pc, #24]	; (80024d0 <HAL_InitTick+0x5c>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e000      	b.n	80024c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000000 	.word	0x20000000
 80024cc:	20000008 	.word	0x20000008
 80024d0:	20000004 	.word	0x20000004

080024d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_IncTick+0x20>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_IncTick+0x24>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <HAL_IncTick+0x24>)
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000008 	.word	0x20000008
 80024f8:	200047d4 	.word	0x200047d4

080024fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <HAL_GetTick+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	200047d4 	.word	0x200047d4

08002514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff ffee 	bl	80024fc <HAL_GetTick>
 8002520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d005      	beq.n	800253a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_Delay+0x40>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800253a:	bf00      	nop
 800253c:	f7ff ffde 	bl	80024fc <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	429a      	cmp	r2, r3
 800254a:	d8f7      	bhi.n	800253c <HAL_Delay+0x28>
  {
  }
}
 800254c:	bf00      	nop
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000008 	.word	0x20000008

08002558 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e033      	b.n	80025d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7fe ff68 	bl	800144c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d118      	bne.n	80025c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800259e:	f023 0302 	bic.w	r3, r3, #2
 80025a2:	f043 0202 	orr.w	r2, r3, #2
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f94a 	bl	8002844 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f023 0303 	bic.w	r3, r3, #3
 80025be:	f043 0201 	orr.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
 80025c6:	e001      	b.n	80025cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x1c>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e113      	b.n	8002824 <HAL_ADC_ConfigChannel+0x244>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b09      	cmp	r3, #9
 800260a:	d925      	bls.n	8002658 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68d9      	ldr	r1, [r3, #12]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	3b1e      	subs	r3, #30
 8002622:	2207      	movs	r2, #7
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43da      	mvns	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	400a      	ands	r2, r1
 8002630:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68d9      	ldr	r1, [r3, #12]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	b29b      	uxth	r3, r3
 8002642:	4618      	mov	r0, r3
 8002644:	4603      	mov	r3, r0
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4403      	add	r3, r0
 800264a:	3b1e      	subs	r3, #30
 800264c:	409a      	lsls	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	e022      	b.n	800269e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6919      	ldr	r1, [r3, #16]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	4613      	mov	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	4413      	add	r3, r2
 800266c:	2207      	movs	r2, #7
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	400a      	ands	r2, r1
 800267a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6919      	ldr	r1, [r3, #16]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	4618      	mov	r0, r3
 800268e:	4603      	mov	r3, r0
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4403      	add	r3, r0
 8002694:	409a      	lsls	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b06      	cmp	r3, #6
 80026a4:	d824      	bhi.n	80026f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	3b05      	subs	r3, #5
 80026b8:	221f      	movs	r2, #31
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43da      	mvns	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	400a      	ands	r2, r1
 80026c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	4618      	mov	r0, r3
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	3b05      	subs	r3, #5
 80026e2:	fa00 f203 	lsl.w	r2, r0, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	635a      	str	r2, [r3, #52]	; 0x34
 80026ee:	e04c      	b.n	800278a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b0c      	cmp	r3, #12
 80026f6:	d824      	bhi.n	8002742 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	3b23      	subs	r3, #35	; 0x23
 800270a:	221f      	movs	r2, #31
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43da      	mvns	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	400a      	ands	r2, r1
 8002718:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	b29b      	uxth	r3, r3
 8002726:	4618      	mov	r0, r3
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	3b23      	subs	r3, #35	; 0x23
 8002734:	fa00 f203 	lsl.w	r2, r0, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
 8002740:	e023      	b.n	800278a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	3b41      	subs	r3, #65	; 0x41
 8002754:	221f      	movs	r2, #31
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43da      	mvns	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	400a      	ands	r2, r1
 8002762:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	b29b      	uxth	r3, r3
 8002770:	4618      	mov	r0, r3
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	3b41      	subs	r3, #65	; 0x41
 800277e:	fa00 f203 	lsl.w	r2, r0, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800278a:	4b29      	ldr	r3, [pc, #164]	; (8002830 <HAL_ADC_ConfigChannel+0x250>)
 800278c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a28      	ldr	r2, [pc, #160]	; (8002834 <HAL_ADC_ConfigChannel+0x254>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d10f      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x1d8>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b12      	cmp	r3, #18
 800279e:	d10b      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a1d      	ldr	r2, [pc, #116]	; (8002834 <HAL_ADC_ConfigChannel+0x254>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d12b      	bne.n	800281a <HAL_ADC_ConfigChannel+0x23a>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1c      	ldr	r2, [pc, #112]	; (8002838 <HAL_ADC_ConfigChannel+0x258>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d003      	beq.n	80027d4 <HAL_ADC_ConfigChannel+0x1f4>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b11      	cmp	r3, #17
 80027d2:	d122      	bne.n	800281a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a11      	ldr	r2, [pc, #68]	; (8002838 <HAL_ADC_ConfigChannel+0x258>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d111      	bne.n	800281a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027f6:	4b11      	ldr	r3, [pc, #68]	; (800283c <HAL_ADC_ConfigChannel+0x25c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a11      	ldr	r2, [pc, #68]	; (8002840 <HAL_ADC_ConfigChannel+0x260>)
 80027fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002800:	0c9a      	lsrs	r2, r3, #18
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800280c:	e002      	b.n	8002814 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	3b01      	subs	r3, #1
 8002812:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f9      	bne.n	800280e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	40012300 	.word	0x40012300
 8002834:	40012000 	.word	0x40012000
 8002838:	10000012 	.word	0x10000012
 800283c:	20000000 	.word	0x20000000
 8002840:	431bde83 	.word	0x431bde83

08002844 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800284c:	4b79      	ldr	r3, [pc, #484]	; (8002a34 <ADC_Init+0x1f0>)
 800284e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	431a      	orrs	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002878:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	021a      	lsls	r2, r3, #8
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800289c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6899      	ldr	r1, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	4a58      	ldr	r2, [pc, #352]	; (8002a38 <ADC_Init+0x1f4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d022      	beq.n	8002922 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6899      	ldr	r1, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800290c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6899      	ldr	r1, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	e00f      	b.n	8002942 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002930:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002940:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0202 	bic.w	r2, r2, #2
 8002950:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6899      	ldr	r1, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	7e1b      	ldrb	r3, [r3, #24]
 800295c:	005a      	lsls	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d01b      	beq.n	80029a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800297e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800298e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6859      	ldr	r1, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	3b01      	subs	r3, #1
 800299c:	035a      	lsls	r2, r3, #13
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	e007      	b.n	80029b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	051a      	lsls	r2, r3, #20
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6899      	ldr	r1, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029fa:	025a      	lsls	r2, r3, #9
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6899      	ldr	r1, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	029a      	lsls	r2, r3, #10
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	609a      	str	r2, [r3, #8]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40012300 	.word	0x40012300
 8002a38:	0f000001 	.word	0x0f000001

08002a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6e:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	60d3      	str	r3, [r2, #12]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <__NVIC_GetPriorityGrouping+0x18>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	f003 0307 	and.w	r3, r3, #7
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	db0b      	blt.n	8002aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	4907      	ldr	r1, [pc, #28]	; (8002ad8 <__NVIC_EnableIRQ+0x38>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000e100 	.word	0xe000e100

08002adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	6039      	str	r1, [r7, #0]
 8002ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db0a      	blt.n	8002b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	490c      	ldr	r1, [pc, #48]	; (8002b28 <__NVIC_SetPriority+0x4c>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	0112      	lsls	r2, r2, #4
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	440b      	add	r3, r1
 8002b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b04:	e00a      	b.n	8002b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4908      	ldr	r1, [pc, #32]	; (8002b2c <__NVIC_SetPriority+0x50>)
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	3b04      	subs	r3, #4
 8002b14:	0112      	lsls	r2, r2, #4
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	440b      	add	r3, r1
 8002b1a:	761a      	strb	r2, [r3, #24]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000e100 	.word	0xe000e100
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f1c3 0307 	rsb	r3, r3, #7
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	bf28      	it	cs
 8002b4e:	2304      	movcs	r3, #4
 8002b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3304      	adds	r3, #4
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	d902      	bls.n	8002b60 <NVIC_EncodePriority+0x30>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3b03      	subs	r3, #3
 8002b5e:	e000      	b.n	8002b62 <NVIC_EncodePriority+0x32>
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	401a      	ands	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b78:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b82:	43d9      	mvns	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b88:	4313      	orrs	r3, r2
         );
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3724      	adds	r7, #36	; 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba8:	d301      	bcc.n	8002bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00f      	b.n	8002bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bae:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <SysTick_Config+0x40>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bb6:	210f      	movs	r1, #15
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbc:	f7ff ff8e 	bl	8002adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <SysTick_Config+0x40>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <SysTick_Config+0x40>)
 8002bc8:	2207      	movs	r2, #7
 8002bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	e000e010 	.word	0xe000e010

08002bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ff29 	bl	8002a3c <__NVIC_SetPriorityGrouping>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b086      	sub	sp, #24
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
 8002bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c04:	f7ff ff3e 	bl	8002a84 <__NVIC_GetPriorityGrouping>
 8002c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	6978      	ldr	r0, [r7, #20]
 8002c10:	f7ff ff8e 	bl	8002b30 <NVIC_EncodePriority>
 8002c14:	4602      	mov	r2, r0
 8002c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff5d 	bl	8002adc <__NVIC_SetPriority>
}
 8002c22:	bf00      	nop
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	4603      	mov	r3, r0
 8002c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ff31 	bl	8002aa0 <__NVIC_EnableIRQ>
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff ffa2 	bl	8002b98 <SysTick_Config>
 8002c54:	4603      	mov	r3, r0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e014      	b.n	8002c9a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	791b      	ldrb	r3, [r3, #4]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d105      	bne.n	8002c86 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7fe fc5f 	bl	8001544 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b087      	sub	sp, #28
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	795b      	ldrb	r3, [r3, #5]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_DAC_ConfigChannel+0x20>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e036      	b.n	8002d30 <HAL_DAC_ConfigChannel+0x8e>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002cd6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6819      	ldr	r1, [r3, #0]
 8002d10:	22c0      	movs	r2, #192	; 0xc0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43da      	mvns	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	400a      	ands	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	371c      	adds	r7, #28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e0cf      	b.n	8002eee <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a69      	ldr	r2, [pc, #420]	; (8002ef8 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00e      	beq.n	8002d76 <HAL_DFSDM_ChannelInit+0x3a>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a67      	ldr	r2, [pc, #412]	; (8002efc <HAL_DFSDM_ChannelInit+0x1c0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d009      	beq.n	8002d76 <HAL_DFSDM_ChannelInit+0x3a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a66      	ldr	r2, [pc, #408]	; (8002f00 <HAL_DFSDM_ChannelInit+0x1c4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d004      	beq.n	8002d76 <HAL_DFSDM_ChannelInit+0x3a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a64      	ldr	r2, [pc, #400]	; (8002f04 <HAL_DFSDM_ChannelInit+0x1c8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d106      	bne.n	8002d84 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8002d76:	4b64      	ldr	r3, [pc, #400]	; (8002f08 <HAL_DFSDM_ChannelInit+0x1cc>)
 8002d78:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8002d7a:	4b64      	ldr	r3, [pc, #400]	; (8002f0c <HAL_DFSDM_ChannelInit+0x1d0>)
 8002d7c:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8002d7e:	4b5e      	ldr	r3, [pc, #376]	; (8002ef8 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	e005      	b.n	8002d90 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8002d84:	4b62      	ldr	r3, [pc, #392]	; (8002f10 <HAL_DFSDM_ChannelInit+0x1d4>)
 8002d86:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8002d88:	4b62      	ldr	r3, [pc, #392]	; (8002f14 <HAL_DFSDM_ChannelInit+0x1d8>)
 8002d8a:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8002d8c:	4b62      	ldr	r3, [pc, #392]	; (8002f18 <HAL_DFSDM_ChannelInit+0x1dc>)
 8002d8e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 fabd 	bl	8003314 <DFSDM_GetChannelFromInstance>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4413      	add	r3, r2
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0a0      	b.n	8002eee <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7fe fdbb 	bl	8001928 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d125      	bne.n	8002e10 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	791b      	ldrb	r3, [r3, #4]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d108      	bne.n	8002e04 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002e1e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6819      	ldr	r1, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002e2e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002e34:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 020f 	bic.w	r2, r2, #15
 8002e4c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6819      	ldr	r1, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002e74:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6899      	ldr	r1, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	3b01      	subs	r3, #1
 8002e86:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f002 0207 	and.w	r2, r2, #7
 8002ea0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6859      	ldr	r1, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ecc:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fa1a 	bl	8003314 <DFSDM_GetChannelFromInstance>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40016000 	.word	0x40016000
 8002efc:	40016020 	.word	0x40016020
 8002f00:	40016040 	.word	0x40016040
 8002f04:	40016060 	.word	0x40016060
 8002f08:	200000a8 	.word	0x200000a8
 8002f0c:	200000ac 	.word	0x200000ac
 8002f10:	200000bc 	.word	0x200000bc
 8002f14:	200000c0 	.word	0x200000c0
 8002f18:	40016400 	.word	0x40016400

08002f1c <HAL_DFSDM_ChannelGetState>:
  * @brief  This function allows to get the current DFSDM channel handle state.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval DFSDM channel state.
  */
HAL_DFSDM_Channel_StateTypeDef HAL_DFSDM_ChannelGetState(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Return DFSDM channel handle state */
  return hdfsdm_channel->State;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e0d9      	b.n	80030fe <HAL_DFSDM_FilterInit+0x1c6>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a6e      	ldr	r2, [pc, #440]	; (8003108 <HAL_DFSDM_FilterInit+0x1d0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d109      	bne.n	8002f68 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d003      	beq.n	8002f64 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0ca      	b.n	80030fe <HAL_DFSDM_FilterInit+0x1c6>
  }
#if defined (DFSDM2_Channel0)  
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a67      	ldr	r2, [pc, #412]	; (800310c <HAL_DFSDM_FilterInit+0x1d4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d109      	bne.n	8002f86 <HAL_DFSDM_FilterInit+0x4e>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d003      	beq.n	8002f82 <HAL_DFSDM_FilterInit+0x4a>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_DFSDM_FilterInit+0x4e>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0bb      	b.n	80030fe <HAL_DFSDM_FilterInit+0x1c6>
  }  
#endif /* DFSDM2_Channel0 */
       
  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1U;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1U;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe fb14 	bl	80015cc <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002fb2:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	7a1b      	ldrb	r3, [r3, #8]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d108      	bne.n	8002fce <HAL_DFSDM_FilterInit+0x96>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e007      	b.n	8002fde <HAL_DFSDM_FilterInit+0xa6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002fdc:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	7a5b      	ldrb	r3, [r3, #9]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d108      	bne.n	8002ff8 <HAL_DFSDM_FilterInit+0xc0>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	e007      	b.n	8003008 <HAL_DFSDM_FilterInit+0xd0>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003006:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8003016:	f023 0308 	bic.w	r3, r3, #8
 800301a:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d108      	bne.n	8003036 <HAL_DFSDM_FilterInit+0xfe>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6819      	ldr	r1, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	7c1b      	ldrb	r3, [r3, #16]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d108      	bne.n	8003050 <HAL_DFSDM_FilterInit+0x118>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0210 	orr.w	r2, r2, #16
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	e007      	b.n	8003060 <HAL_DFSDM_FilterInit+0x128>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0210 	bic.w	r2, r2, #16
 800305e:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	7c5b      	ldrb	r3, [r3, #17]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d108      	bne.n	800307a <HAL_DFSDM_FilterInit+0x142>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0220 	orr.w	r2, r2, #32
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	e007      	b.n	800308a <HAL_DFSDM_FilterInit+0x152>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0220 	bic.w	r2, r2, #32
 8003088:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8003098:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800309c:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6959      	ldr	r1, [r3, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80030b0:	431a      	orrs	r2, r3
                                     (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80030b8:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	7c1a      	ldrb	r2, [r3, #16]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40016100 	.word	0x40016100
 800310c:	40016500 	.word	0x40016500

08003110 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003126:	2b00      	cmp	r3, #0
 8003128:	d02e      	beq.n	8003188 <HAL_DFSDM_FilterConfigRegChannel+0x78>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8003130:	2bff      	cmp	r3, #255	; 0xff
 8003132:	d029      	beq.n	8003188 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003146:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d10d      	bne.n	800316a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	021b      	lsls	r3, r3, #8
 8003158:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800315c:	431a      	orrs	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	e00a      	b.n	8003180 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6819      	ldr	r1, [r3, #0]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	021b      	lsls	r3, r3, #8
 8003174:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
 8003186:	e001      	b.n	800318c <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }  
  else
  {
    status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800318c:	7dfb      	ldrb	r3, [r7, #23]
}
 800318e:	4618      	mov	r0, r3
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0U))
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d102      	bne.n	80031be <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	75fb      	strb	r3, [r7, #23]
 80031bc:	e066      	b.n	800328c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031cc:	d002      	beq.n	80031d4 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	75fb      	strb	r3, [r7, #23]
 80031d2:	e05b      	b.n	800328c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10e      	bne.n	80031fa <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10a      	bne.n	80031fa <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d105      	bne.n	80031fa <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d002      	beq.n	80031fa <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1U))
  {
    status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	75fb      	strb	r3, [r7, #23]
 80031f8:	e048      	b.n	800328c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10c      	bne.n	800321c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003206:	2b00      	cmp	r3, #0
 8003208:	d108      	bne.n	800321c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003214:	d102      	bne.n	800321c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	75fb      	strb	r3, [r7, #23]
 800321a:	e037      	b.n	800328c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003222:	2b01      	cmp	r3, #1
 8003224:	d004      	beq.n	8003230 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800322c:	2b03      	cmp	r3, #3
 800322e:	d12b      	bne.n	8003288 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	4a18      	ldr	r2, [pc, #96]	; (8003298 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8003236:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	4a17      	ldr	r2, [pc, #92]	; (800329c <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800323e:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324a:	d101      	bne.n	8003250 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 800324c:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 800324e:	e000      	b.n	8003252 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8003250:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	331c      	adds	r3, #28
 8003262:	4619      	mov	r1, r3
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f000 f9bc 	bl	80035e4 <HAL_DMA_Start_IT>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d006      	beq.n	8003280 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	22ff      	movs	r2, #255	; 0xff
 8003276:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800327e:	e005      	b.n	800328c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f8ab 	bl	80033dc <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003286:	e001      	b.n	800328c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800328c:	7dfb      	ldrb	r3, [r7, #23]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	080032d5 	.word	0x080032d5
 800329c:	080032f1 	.word	0x080032f1
 80032a0:	080032b9 	.word	0x080032b9

080032a4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdfsdm_filter);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f7fe f870 	bl	80013ac <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80032cc:	bf00      	nop
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f7fe f872 	bl	80013cc <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2203      	movs	r2, #3
 8003302:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f7ff ffcd 	bl	80032a4 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800330a:	bf00      	nop
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a24      	ldr	r2, [pc, #144]	; (80033b0 <DFSDM_GetChannelFromInstance+0x9c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d003      	beq.n	800332c <DFSDM_GetChannelFromInstance+0x18>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a23      	ldr	r2, [pc, #140]	; (80033b4 <DFSDM_GetChannelFromInstance+0xa0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d102      	bne.n	8003332 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	e037      	b.n	80033a2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a20      	ldr	r2, [pc, #128]	; (80033b8 <DFSDM_GetChannelFromInstance+0xa4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d003      	beq.n	8003342 <DFSDM_GetChannelFromInstance+0x2e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a1f      	ldr	r2, [pc, #124]	; (80033bc <DFSDM_GetChannelFromInstance+0xa8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d102      	bne.n	8003348 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8003342:	2301      	movs	r3, #1
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	e02c      	b.n	80033a2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a1d      	ldr	r2, [pc, #116]	; (80033c0 <DFSDM_GetChannelFromInstance+0xac>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d003      	beq.n	8003358 <DFSDM_GetChannelFromInstance+0x44>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a1c      	ldr	r2, [pc, #112]	; (80033c4 <DFSDM_GetChannelFromInstance+0xb0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d102      	bne.n	800335e <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8003358:	2302      	movs	r3, #2
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	e021      	b.n	80033a2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a19      	ldr	r2, [pc, #100]	; (80033c8 <DFSDM_GetChannelFromInstance+0xb4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d003      	beq.n	800336e <DFSDM_GetChannelFromInstance+0x5a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a18      	ldr	r2, [pc, #96]	; (80033cc <DFSDM_GetChannelFromInstance+0xb8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d102      	bne.n	8003374 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 800336e:	2303      	movs	r3, #3
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	e016      	b.n	80033a2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a16      	ldr	r2, [pc, #88]	; (80033d0 <DFSDM_GetChannelFromInstance+0xbc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d102      	bne.n	8003382 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 800337c:	2304      	movs	r3, #4
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	e00f      	b.n	80033a2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a13      	ldr	r2, [pc, #76]	; (80033d4 <DFSDM_GetChannelFromInstance+0xc0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d102      	bne.n	8003390 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 800338a:	2305      	movs	r3, #5
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	e008      	b.n	80033a2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a11      	ldr	r2, [pc, #68]	; (80033d8 <DFSDM_GetChannelFromInstance+0xc4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d102      	bne.n	800339e <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8003398:	2306      	movs	r3, #6
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	e001      	b.n	80033a2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 800339e:	2307      	movs	r3, #7
 80033a0:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 80033a2:	68fb      	ldr	r3, [r7, #12]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	40016000 	.word	0x40016000
 80033b4:	40016400 	.word	0x40016400
 80033b8:	40016020 	.word	0x40016020
 80033bc:	40016420 	.word	0x40016420
 80033c0:	40016040 	.word	0x40016040
 80033c4:	40016440 	.word	0x40016440
 80033c8:	40016060 	.word	0x40016060
 80033cc:	40016460 	.word	0x40016460
 80033d0:	40016480 	.word	0x40016480
 80033d4:	400164a0 	.word	0x400164a0
 80033d8:	400164c0 	.word	0x400164c0

080033dc <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d108      	bne.n	80033fe <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e033      	b.n	8003466 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800341c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0201 	orr.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003434:	2b03      	cmp	r3, #3
 8003436:	d116      	bne.n	8003466 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	2b00      	cmp	r3, #0
 800343e:	d107      	bne.n	8003450 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0202 	orr.w	r2, r2, #2
 800344e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003456:	2b01      	cmp	r3, #1
 8003458:	d102      	bne.n	8003460 <DFSDM_RegConvStart+0x84>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345e:	e000      	b.n	8003462 <DFSDM_RegConvStart+0x86>
 8003460:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <DFSDM_RegConvStart+0x98>
 8003470:	2202      	movs	r2, #2
 8003472:	e000      	b.n	8003476 <DFSDM_RegConvStart+0x9a>
 8003474:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003494:	f7ff f832 	bl	80024fc <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e099      	b.n	80035d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0201 	bic.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034c4:	e00f      	b.n	80034e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034c6:	f7ff f819 	bl	80024fc <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b05      	cmp	r3, #5
 80034d2:	d908      	bls.n	80034e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2203      	movs	r2, #3
 80034de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e078      	b.n	80035d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1e8      	bne.n	80034c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	4b38      	ldr	r3, [pc, #224]	; (80035e0 <HAL_DMA_Init+0x158>)
 8003500:	4013      	ands	r3, r2
 8003502:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003512:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800351e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800352a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	2b04      	cmp	r3, #4
 800353e:	d107      	bne.n	8003550 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	4313      	orrs	r3, r2
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f023 0307 	bic.w	r3, r3, #7
 8003566:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	2b04      	cmp	r3, #4
 8003578:	d117      	bne.n	80035aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00e      	beq.n	80035aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fa6f 	bl	8003a70 <DMA_CheckFifoParam>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2240      	movs	r2, #64	; 0x40
 800359c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035a6:	2301      	movs	r3, #1
 80035a8:	e016      	b.n	80035d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fa26 	bl	8003a04 <DMA_CalcBaseAndBitshift>
 80035b8:	4603      	mov	r3, r0
 80035ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c0:	223f      	movs	r2, #63	; 0x3f
 80035c2:	409a      	lsls	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	e010803f 	.word	0xe010803f

080035e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_DMA_Start_IT+0x26>
 8003606:	2302      	movs	r3, #2
 8003608:	e040      	b.n	800368c <HAL_DMA_Start_IT+0xa8>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b01      	cmp	r3, #1
 800361c:	d12f      	bne.n	800367e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2202      	movs	r2, #2
 8003622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f9b8 	bl	80039a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363c:	223f      	movs	r2, #63	; 0x3f
 800363e:	409a      	lsls	r2, r3
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0216 	orr.w	r2, r2, #22
 8003652:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	2b00      	cmp	r3, #0
 800365a:	d007      	beq.n	800366c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0208 	orr.w	r2, r2, #8
 800366a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	e005      	b.n	800368a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003686:	2302      	movs	r3, #2
 8003688:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800368a:	7dfb      	ldrb	r3, [r7, #23]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036a0:	4b92      	ldr	r3, [pc, #584]	; (80038ec <HAL_DMA_IRQHandler+0x258>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a92      	ldr	r2, [pc, #584]	; (80038f0 <HAL_DMA_IRQHandler+0x25c>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	0a9b      	lsrs	r3, r3, #10
 80036ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	2208      	movs	r2, #8
 80036c0:	409a      	lsls	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d01a      	beq.n	8003700 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d013      	beq.n	8003700 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0204 	bic.w	r2, r2, #4
 80036e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ec:	2208      	movs	r2, #8
 80036ee:	409a      	lsls	r2, r3
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	f043 0201 	orr.w	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003704:	2201      	movs	r2, #1
 8003706:	409a      	lsls	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d012      	beq.n	8003736 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00b      	beq.n	8003736 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003722:	2201      	movs	r2, #1
 8003724:	409a      	lsls	r2, r3
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372e:	f043 0202 	orr.w	r2, r3, #2
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373a:	2204      	movs	r2, #4
 800373c:	409a      	lsls	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4013      	ands	r3, r2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d012      	beq.n	800376c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00b      	beq.n	800376c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003758:	2204      	movs	r2, #4
 800375a:	409a      	lsls	r2, r3
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003764:	f043 0204 	orr.w	r2, r3, #4
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003770:	2210      	movs	r2, #16
 8003772:	409a      	lsls	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d043      	beq.n	8003804 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d03c      	beq.n	8003804 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378e:	2210      	movs	r2, #16
 8003790:	409a      	lsls	r2, r3
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d018      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d108      	bne.n	80037c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d024      	beq.n	8003804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	4798      	blx	r3
 80037c2:	e01f      	b.n	8003804 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d01b      	beq.n	8003804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	4798      	blx	r3
 80037d4:	e016      	b.n	8003804 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d107      	bne.n	80037f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0208 	bic.w	r2, r2, #8
 80037f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003808:	2220      	movs	r2, #32
 800380a:	409a      	lsls	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 808e 	beq.w	8003932 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 8086 	beq.w	8003932 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382a:	2220      	movs	r2, #32
 800382c:	409a      	lsls	r2, r3
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b05      	cmp	r3, #5
 800383c:	d136      	bne.n	80038ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0216 	bic.w	r2, r2, #22
 800384c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800385c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d103      	bne.n	800386e <HAL_DMA_IRQHandler+0x1da>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386a:	2b00      	cmp	r3, #0
 800386c:	d007      	beq.n	800387e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0208 	bic.w	r2, r2, #8
 800387c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003882:	223f      	movs	r2, #63	; 0x3f
 8003884:	409a      	lsls	r2, r3
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d07d      	beq.n	800399e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	4798      	blx	r3
        }
        return;
 80038aa:	e078      	b.n	800399e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d01c      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d108      	bne.n	80038da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d030      	beq.n	8003932 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4798      	blx	r3
 80038d8:	e02b      	b.n	8003932 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d027      	beq.n	8003932 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
 80038ea:	e022      	b.n	8003932 <HAL_DMA_IRQHandler+0x29e>
 80038ec:	20000000 	.word	0x20000000
 80038f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10f      	bne.n	8003922 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0210 	bic.w	r2, r2, #16
 8003910:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003936:	2b00      	cmp	r3, #0
 8003938:	d032      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d022      	beq.n	800398c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2205      	movs	r2, #5
 800394a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0201 	bic.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	3301      	adds	r3, #1
 8003962:	60bb      	str	r3, [r7, #8]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	429a      	cmp	r2, r3
 8003968:	d307      	bcc.n	800397a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f2      	bne.n	800395e <HAL_DMA_IRQHandler+0x2ca>
 8003978:	e000      	b.n	800397c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800397a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	4798      	blx	r3
 800399c:	e000      	b.n	80039a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800399e:	bf00      	nop
    }
  }
}
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop

080039a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b40      	cmp	r3, #64	; 0x40
 80039d4:	d108      	bne.n	80039e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039e6:	e007      	b.n	80039f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	60da      	str	r2, [r3, #12]
}
 80039f8:	bf00      	nop
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	3b10      	subs	r3, #16
 8003a14:	4a14      	ldr	r2, [pc, #80]	; (8003a68 <DMA_CalcBaseAndBitshift+0x64>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a1e:	4a13      	ldr	r2, [pc, #76]	; (8003a6c <DMA_CalcBaseAndBitshift+0x68>)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d909      	bls.n	8003a46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a3a:	f023 0303 	bic.w	r3, r3, #3
 8003a3e:	1d1a      	adds	r2, r3, #4
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	659a      	str	r2, [r3, #88]	; 0x58
 8003a44:	e007      	b.n	8003a56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a4e:	f023 0303 	bic.w	r3, r3, #3
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	aaaaaaab 	.word	0xaaaaaaab
 8003a6c:	0800c3c8 	.word	0x0800c3c8

08003a70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d11f      	bne.n	8003aca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d855      	bhi.n	8003b3c <DMA_CheckFifoParam+0xcc>
 8003a90:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <DMA_CheckFifoParam+0x28>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003aa9 	.word	0x08003aa9
 8003a9c:	08003abb 	.word	0x08003abb
 8003aa0:	08003aa9 	.word	0x08003aa9
 8003aa4:	08003b3d 	.word	0x08003b3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d045      	beq.n	8003b40 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab8:	e042      	b.n	8003b40 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ac2:	d13f      	bne.n	8003b44 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ac8:	e03c      	b.n	8003b44 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ad2:	d121      	bne.n	8003b18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d836      	bhi.n	8003b48 <DMA_CheckFifoParam+0xd8>
 8003ada:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <DMA_CheckFifoParam+0x70>)
 8003adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae0:	08003af1 	.word	0x08003af1
 8003ae4:	08003af7 	.word	0x08003af7
 8003ae8:	08003af1 	.word	0x08003af1
 8003aec:	08003b09 	.word	0x08003b09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
      break;
 8003af4:	e02f      	b.n	8003b56 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d024      	beq.n	8003b4c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b06:	e021      	b.n	8003b4c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b10:	d11e      	bne.n	8003b50 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b16:	e01b      	b.n	8003b50 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d902      	bls.n	8003b24 <DMA_CheckFifoParam+0xb4>
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d003      	beq.n	8003b2a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b22:	e018      	b.n	8003b56 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
      break;
 8003b28:	e015      	b.n	8003b56 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00e      	beq.n	8003b54 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	73fb      	strb	r3, [r7, #15]
      break;
 8003b3a:	e00b      	b.n	8003b54 <DMA_CheckFifoParam+0xe4>
      break;
 8003b3c:	bf00      	nop
 8003b3e:	e00a      	b.n	8003b56 <DMA_CheckFifoParam+0xe6>
      break;
 8003b40:	bf00      	nop
 8003b42:	e008      	b.n	8003b56 <DMA_CheckFifoParam+0xe6>
      break;
 8003b44:	bf00      	nop
 8003b46:	e006      	b.n	8003b56 <DMA_CheckFifoParam+0xe6>
      break;
 8003b48:	bf00      	nop
 8003b4a:	e004      	b.n	8003b56 <DMA_CheckFifoParam+0xe6>
      break;
 8003b4c:	bf00      	nop
 8003b4e:	e002      	b.n	8003b56 <DMA_CheckFifoParam+0xe6>
      break;   
 8003b50:	bf00      	nop
 8003b52:	e000      	b.n	8003b56 <DMA_CheckFifoParam+0xe6>
      break;
 8003b54:	bf00      	nop
    }
  } 
  
  return status; 
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e081      	b.n	8003c7a <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fd fff6 	bl	8001b7c <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2224      	movs	r2, #36	; 0x24
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bc4:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d107      	bne.n	8003bde <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bda:	609a      	str	r2, [r3, #8]
 8003bdc:	e006      	b.n	8003bec <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003bea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d104      	bne.n	8003bfe <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c10:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c20:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	ea42 0103 	orr.w	r1, r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	021a      	lsls	r2, r3, #8
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69d9      	ldr	r1, [r3, #28]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1a      	ldr	r2, [r3, #32]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d138      	bne.n	8003d0a <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e032      	b.n	8003d0c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2224      	movs	r2, #36	; 0x24
 8003cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0201 	bic.w	r2, r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cd4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6819      	ldr	r1, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e000      	b.n	8003d0c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d0a:	2302      	movs	r3, #2
  }
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b089      	sub	sp, #36	; 0x24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	e165      	b.n	8004000 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d34:	2201      	movs	r2, #1
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4013      	ands	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	f040 8154 	bne.w	8003ffa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d00b      	beq.n	8003d72 <HAL_GPIO_Init+0x5a>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d007      	beq.n	8003d72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d66:	2b11      	cmp	r3, #17
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b12      	cmp	r3, #18
 8003d70:	d130      	bne.n	8003dd4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	2203      	movs	r2, #3
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43db      	mvns	r3, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4013      	ands	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003da8:	2201      	movs	r2, #1
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4013      	ands	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	f003 0201 	and.w	r2, r3, #1
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	2203      	movs	r2, #3
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d003      	beq.n	8003e14 <HAL_GPIO_Init+0xfc>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b12      	cmp	r3, #18
 8003e12:	d123      	bne.n	8003e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	08da      	lsrs	r2, r3, #3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3208      	adds	r2, #8
 8003e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	220f      	movs	r2, #15
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	4013      	ands	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	08da      	lsrs	r2, r3, #3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3208      	adds	r2, #8
 8003e56:	69b9      	ldr	r1, [r7, #24]
 8003e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	2203      	movs	r2, #3
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f003 0203 	and.w	r2, r3, #3
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80ae 	beq.w	8003ffa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	4b5c      	ldr	r3, [pc, #368]	; (8004014 <HAL_GPIO_Init+0x2fc>)
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	4a5b      	ldr	r2, [pc, #364]	; (8004014 <HAL_GPIO_Init+0x2fc>)
 8003ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eac:	6453      	str	r3, [r2, #68]	; 0x44
 8003eae:	4b59      	ldr	r3, [pc, #356]	; (8004014 <HAL_GPIO_Init+0x2fc>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eba:	4a57      	ldr	r2, [pc, #348]	; (8004018 <HAL_GPIO_Init+0x300>)
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	089b      	lsrs	r3, r3, #2
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	220f      	movs	r2, #15
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a4e      	ldr	r2, [pc, #312]	; (800401c <HAL_GPIO_Init+0x304>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d025      	beq.n	8003f32 <HAL_GPIO_Init+0x21a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a4d      	ldr	r2, [pc, #308]	; (8004020 <HAL_GPIO_Init+0x308>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01f      	beq.n	8003f2e <HAL_GPIO_Init+0x216>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a4c      	ldr	r2, [pc, #304]	; (8004024 <HAL_GPIO_Init+0x30c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d019      	beq.n	8003f2a <HAL_GPIO_Init+0x212>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a4b      	ldr	r2, [pc, #300]	; (8004028 <HAL_GPIO_Init+0x310>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <HAL_GPIO_Init+0x20e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a4a      	ldr	r2, [pc, #296]	; (800402c <HAL_GPIO_Init+0x314>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00d      	beq.n	8003f22 <HAL_GPIO_Init+0x20a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a49      	ldr	r2, [pc, #292]	; (8004030 <HAL_GPIO_Init+0x318>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d007      	beq.n	8003f1e <HAL_GPIO_Init+0x206>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a48      	ldr	r2, [pc, #288]	; (8004034 <HAL_GPIO_Init+0x31c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d101      	bne.n	8003f1a <HAL_GPIO_Init+0x202>
 8003f16:	2306      	movs	r3, #6
 8003f18:	e00c      	b.n	8003f34 <HAL_GPIO_Init+0x21c>
 8003f1a:	2307      	movs	r3, #7
 8003f1c:	e00a      	b.n	8003f34 <HAL_GPIO_Init+0x21c>
 8003f1e:	2305      	movs	r3, #5
 8003f20:	e008      	b.n	8003f34 <HAL_GPIO_Init+0x21c>
 8003f22:	2304      	movs	r3, #4
 8003f24:	e006      	b.n	8003f34 <HAL_GPIO_Init+0x21c>
 8003f26:	2303      	movs	r3, #3
 8003f28:	e004      	b.n	8003f34 <HAL_GPIO_Init+0x21c>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e002      	b.n	8003f34 <HAL_GPIO_Init+0x21c>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <HAL_GPIO_Init+0x21c>
 8003f32:	2300      	movs	r3, #0
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	f002 0203 	and.w	r2, r2, #3
 8003f3a:	0092      	lsls	r2, r2, #2
 8003f3c:	4093      	lsls	r3, r2
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f44:	4934      	ldr	r1, [pc, #208]	; (8004018 <HAL_GPIO_Init+0x300>)
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	089b      	lsrs	r3, r3, #2
 8003f4a:	3302      	adds	r3, #2
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f52:	4b39      	ldr	r3, [pc, #228]	; (8004038 <HAL_GPIO_Init+0x320>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f76:	4a30      	ldr	r2, [pc, #192]	; (8004038 <HAL_GPIO_Init+0x320>)
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f7c:	4b2e      	ldr	r3, [pc, #184]	; (8004038 <HAL_GPIO_Init+0x320>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	43db      	mvns	r3, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fa0:	4a25      	ldr	r2, [pc, #148]	; (8004038 <HAL_GPIO_Init+0x320>)
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fa6:	4b24      	ldr	r3, [pc, #144]	; (8004038 <HAL_GPIO_Init+0x320>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fca:	4a1b      	ldr	r2, [pc, #108]	; (8004038 <HAL_GPIO_Init+0x320>)
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fd0:	4b19      	ldr	r3, [pc, #100]	; (8004038 <HAL_GPIO_Init+0x320>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ff4:	4a10      	ldr	r2, [pc, #64]	; (8004038 <HAL_GPIO_Init+0x320>)
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	61fb      	str	r3, [r7, #28]
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	2b0f      	cmp	r3, #15
 8004004:	f67f ae96 	bls.w	8003d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004008:	bf00      	nop
 800400a:	3724      	adds	r7, #36	; 0x24
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	40023800 	.word	0x40023800
 8004018:	40013800 	.word	0x40013800
 800401c:	40020000 	.word	0x40020000
 8004020:	40020400 	.word	0x40020400
 8004024:	40020800 	.word	0x40020800
 8004028:	40020c00 	.word	0x40020c00
 800402c:	40021000 	.word	0x40021000
 8004030:	40021400 	.word	0x40021400
 8004034:	40021800 	.word	0x40021800
 8004038:	40013c00 	.word	0x40013c00

0800403c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	887b      	ldrh	r3, [r7, #2]
 800404e:	4013      	ands	r3, r2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
 8004058:	e001      	b.n	800405e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800405a:	2300      	movs	r3, #0
 800405c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800405e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	807b      	strh	r3, [r7, #2]
 8004078:	4613      	mov	r3, r2
 800407a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800407c:	787b      	ldrb	r3, [r7, #1]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004082:	887a      	ldrh	r2, [r7, #2]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004088:	e003      	b.n	8004092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800408a:	887b      	ldrh	r3, [r7, #2]
 800408c:	041a      	lsls	r2, r3, #16
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	619a      	str	r2, [r3, #24]
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
	...

080040a0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e154      	b.n	800435c <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a98      	ldr	r2, [pc, #608]	; (800432c <HAL_I2S_Init+0x28c>)
 80040ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7fd fd9d 	bl	8001c0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2202      	movs	r2, #2
 80040d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80040e8:	f023 030f 	bic.w	r3, r3, #15
 80040ec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2202      	movs	r2, #2
 80040f4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d06f      	beq.n	80041de <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d102      	bne.n	800410c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004106:	2310      	movs	r3, #16
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	e001      	b.n	8004110 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800410c:	2320      	movs	r3, #32
 800410e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2b20      	cmp	r3, #32
 8004116:	d802      	bhi.n	800411e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a83      	ldr	r2, [pc, #524]	; (8004330 <HAL_I2S_Init+0x290>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d004      	beq.n	8004132 <HAL_I2S_Init+0x92>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a81      	ldr	r2, [pc, #516]	; (8004334 <HAL_I2S_Init+0x294>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d104      	bne.n	800413c <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8004132:	2001      	movs	r0, #1
 8004134:	f001 f990 	bl	8005458 <HAL_RCCEx_GetPeriphCLKFreq>
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	e003      	b.n	8004144 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 800413c:	2002      	movs	r0, #2
 800413e:	f001 f98b 	bl	8005458 <HAL_RCCEx_GetPeriphCLKFreq>
 8004142:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800414c:	d125      	bne.n	800419a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d010      	beq.n	8004178 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	461a      	mov	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004172:	3305      	adds	r3, #5
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	e01f      	b.n	80041b8 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004182:	4613      	mov	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	461a      	mov	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	fbb2 f3f3 	udiv	r3, r2, r3
 8004194:	3305      	adds	r3, #5
 8004196:	613b      	str	r3, [r7, #16]
 8004198:	e00e      	b.n	80041b8 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	fbb2 f2f3 	udiv	r2, r2, r3
 80041a2:	4613      	mov	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	461a      	mov	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b4:	3305      	adds	r3, #5
 80041b6:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4a5f      	ldr	r2, [pc, #380]	; (8004338 <HAL_I2S_Init+0x298>)
 80041bc:	fba2 2303 	umull	r2, r3, r2, r3
 80041c0:	08db      	lsrs	r3, r3, #3
 80041c2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	085b      	lsrs	r3, r3, #1
 80041d4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	021b      	lsls	r3, r3, #8
 80041da:	61bb      	str	r3, [r7, #24]
 80041dc:	e003      	b.n	80041e6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80041de:	2302      	movs	r3, #2
 80041e0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d902      	bls.n	80041f2 <HAL_I2S_Init+0x152>
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	2bff      	cmp	r3, #255	; 0xff
 80041f0:	d907      	bls.n	8004202 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f6:	f043 0210 	orr.w	r2, r3, #16
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e0ac      	b.n	800435c <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691a      	ldr	r2, [r3, #16]
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	ea42 0103 	orr.w	r1, r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	430a      	orrs	r2, r1
 8004214:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004220:	f023 030f 	bic.w	r3, r3, #15
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6851      	ldr	r1, [r2, #4]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6892      	ldr	r2, [r2, #8]
 800422c:	4311      	orrs	r1, r2
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	68d2      	ldr	r2, [r2, #12]
 8004232:	4311      	orrs	r1, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6992      	ldr	r2, [r2, #24]
 8004238:	430a      	orrs	r2, r1
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004244:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2b30      	cmp	r3, #48	; 0x30
 800424c:	d003      	beq.n	8004256 <HAL_I2S_Init+0x1b6>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	2bb0      	cmp	r3, #176	; 0xb0
 8004254:	d107      	bne.n	8004266 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004264:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d16e      	bne.n	800434c <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a32      	ldr	r2, [pc, #200]	; (800433c <HAL_I2S_Init+0x29c>)
 8004272:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a2d      	ldr	r2, [pc, #180]	; (8004330 <HAL_I2S_Init+0x290>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d101      	bne.n	8004282 <HAL_I2S_Init+0x1e2>
 800427e:	4b30      	ldr	r3, [pc, #192]	; (8004340 <HAL_I2S_Init+0x2a0>)
 8004280:	e001      	b.n	8004286 <HAL_I2S_Init+0x1e6>
 8004282:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	4928      	ldr	r1, [pc, #160]	; (8004330 <HAL_I2S_Init+0x290>)
 800428e:	428a      	cmp	r2, r1
 8004290:	d101      	bne.n	8004296 <HAL_I2S_Init+0x1f6>
 8004292:	4a2b      	ldr	r2, [pc, #172]	; (8004340 <HAL_I2S_Init+0x2a0>)
 8004294:	e001      	b.n	800429a <HAL_I2S_Init+0x1fa>
 8004296:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800429a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800429e:	f023 030f 	bic.w	r3, r3, #15
 80042a2:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a21      	ldr	r2, [pc, #132]	; (8004330 <HAL_I2S_Init+0x290>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d101      	bne.n	80042b2 <HAL_I2S_Init+0x212>
 80042ae:	4b24      	ldr	r3, [pc, #144]	; (8004340 <HAL_I2S_Init+0x2a0>)
 80042b0:	e001      	b.n	80042b6 <HAL_I2S_Init+0x216>
 80042b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042b6:	2202      	movs	r2, #2
 80042b8:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1c      	ldr	r2, [pc, #112]	; (8004330 <HAL_I2S_Init+0x290>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d101      	bne.n	80042c8 <HAL_I2S_Init+0x228>
 80042c4:	4b1e      	ldr	r3, [pc, #120]	; (8004340 <HAL_I2S_Init+0x2a0>)
 80042c6:	e001      	b.n	80042cc <HAL_I2S_Init+0x22c>
 80042c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d8:	d003      	beq.n	80042e2 <HAL_I2S_Init+0x242>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d103      	bne.n	80042ea <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80042e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	e001      	b.n	80042ee <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80042ea:	2300      	movs	r3, #0
 80042ec:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	b299      	uxth	r1, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004304:	4303      	orrs	r3, r0
 8004306:	b29b      	uxth	r3, r3
 8004308:	430b      	orrs	r3, r1
 800430a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800430c:	4313      	orrs	r3, r2
 800430e:	b29a      	uxth	r2, r3
 8004310:	897b      	ldrh	r3, [r7, #10]
 8004312:	4313      	orrs	r3, r2
 8004314:	b29b      	uxth	r3, r3
 8004316:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800431a:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a03      	ldr	r2, [pc, #12]	; (8004330 <HAL_I2S_Init+0x290>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10e      	bne.n	8004344 <HAL_I2S_Init+0x2a4>
 8004326:	4b06      	ldr	r3, [pc, #24]	; (8004340 <HAL_I2S_Init+0x2a0>)
 8004328:	e00e      	b.n	8004348 <HAL_I2S_Init+0x2a8>
 800432a:	bf00      	nop
 800432c:	0800445b 	.word	0x0800445b
 8004330:	40003800 	.word	0x40003800
 8004334:	40003c00 	.word	0x40003c00
 8004338:	cccccccd 	.word	0xcccccccd
 800433c:	08004571 	.word	0x08004571
 8004340:	40003400 	.word	0x40003400
 8004344:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004348:	897a      	ldrh	r2, [r7, #10]
 800434a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3720      	adds	r7, #32
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	881a      	ldrh	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	1c9a      	adds	r2, r3, #2
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10e      	bne.n	80043f4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043e4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7ff ffb8 	bl	8004364 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80043f4:	bf00      	nop
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	b292      	uxth	r2, r2
 8004410:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	1c9a      	adds	r2, r3, #2
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10e      	bne.n	8004452 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004442:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff ff93 	bl	8004378 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b086      	sub	sp, #24
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b04      	cmp	r3, #4
 8004474:	d13a      	bne.n	80044ec <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b01      	cmp	r3, #1
 800447e:	d109      	bne.n	8004494 <I2S_IRQHandler+0x3a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448a:	2b40      	cmp	r3, #64	; 0x40
 800448c:	d102      	bne.n	8004494 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff ffb4 	bl	80043fc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d126      	bne.n	80044ec <I2S_IRQHandler+0x92>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d11f      	bne.n	80044ec <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80044bc:	2300      	movs	r3, #0
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	f043 0202 	orr.w	r2, r3, #2
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff ff50 	bl	800438c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d136      	bne.n	8004566 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d109      	bne.n	8004516 <I2S_IRQHandler+0xbc>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450c:	2b80      	cmp	r3, #128	; 0x80
 800450e:	d102      	bne.n	8004516 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff ff45 	bl	80043a0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b08      	cmp	r3, #8
 800451e:	d122      	bne.n	8004566 <I2S_IRQHandler+0x10c>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f003 0320 	and.w	r3, r3, #32
 800452a:	2b20      	cmp	r3, #32
 800452c:	d11b      	bne.n	8004566 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800453c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004558:	f043 0204 	orr.w	r2, r3, #4
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff ff13 	bl	800438c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004566:	bf00      	nop
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4aa2      	ldr	r2, [pc, #648]	; (8004810 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d101      	bne.n	800458e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800458a:	4ba2      	ldr	r3, [pc, #648]	; (8004814 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800458c:	e001      	b.n	8004592 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800458e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a9b      	ldr	r2, [pc, #620]	; (8004810 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d101      	bne.n	80045ac <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80045a8:	4b9a      	ldr	r3, [pc, #616]	; (8004814 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045aa:	e001      	b.n	80045b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80045ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045bc:	d004      	beq.n	80045c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f040 8099 	bne.w	80046fa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d107      	bne.n	80045e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f925 	bl	800482c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d107      	bne.n	80045fc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f9c8 	bl	800498c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	2b40      	cmp	r3, #64	; 0x40
 8004604:	d13a      	bne.n	800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b00      	cmp	r3, #0
 800460e:	d035      	beq.n	800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a7e      	ldr	r2, [pc, #504]	; (8004810 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d101      	bne.n	800461e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800461a:	4b7e      	ldr	r3, [pc, #504]	; (8004814 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800461c:	e001      	b.n	8004622 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800461e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4979      	ldr	r1, [pc, #484]	; (8004810 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800462a:	428b      	cmp	r3, r1
 800462c:	d101      	bne.n	8004632 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800462e:	4b79      	ldr	r3, [pc, #484]	; (8004814 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004630:	e001      	b.n	8004636 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004632:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004636:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800463a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800464a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466e:	f043 0202 	orr.w	r2, r3, #2
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff fe88 	bl	800438c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b08      	cmp	r3, #8
 8004684:	f040 80be 	bne.w	8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 80b8 	beq.w	8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046a2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a59      	ldr	r2, [pc, #356]	; (8004810 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d101      	bne.n	80046b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80046ae:	4b59      	ldr	r3, [pc, #356]	; (8004814 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046b0:	e001      	b.n	80046b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80046b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4954      	ldr	r1, [pc, #336]	; (8004810 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046be:	428b      	cmp	r3, r1
 80046c0:	d101      	bne.n	80046c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80046c2:	4b54      	ldr	r3, [pc, #336]	; (8004814 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046c4:	e001      	b.n	80046ca <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80046c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046ce:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80046d0:	2300      	movs	r3, #0
 80046d2:	60bb      	str	r3, [r7, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	f043 0204 	orr.w	r2, r3, #4
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7ff fe4a 	bl	800438c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046f8:	e084      	b.n	8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b02      	cmp	r3, #2
 8004702:	d107      	bne.n	8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f8be 	bl	8004890 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b01      	cmp	r3, #1
 800471c:	d107      	bne.n	800472e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f8fd 	bl	8004928 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004734:	2b40      	cmp	r3, #64	; 0x40
 8004736:	d12f      	bne.n	8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b00      	cmp	r3, #0
 8004740:	d02a      	beq.n	8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004750:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a2e      	ldr	r2, [pc, #184]	; (8004810 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d101      	bne.n	8004760 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800475c:	4b2d      	ldr	r3, [pc, #180]	; (8004814 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800475e:	e001      	b.n	8004764 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004760:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4929      	ldr	r1, [pc, #164]	; (8004810 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800476c:	428b      	cmp	r3, r1
 800476e:	d101      	bne.n	8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004770:	4b28      	ldr	r3, [pc, #160]	; (8004814 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004772:	e001      	b.n	8004778 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004774:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004778:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800477c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478a:	f043 0202 	orr.w	r2, r3, #2
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7ff fdfa 	bl	800438c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d131      	bne.n	8004806 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d02c      	beq.n	8004806 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a17      	ldr	r2, [pc, #92]	; (8004810 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d101      	bne.n	80047ba <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80047b6:	4b17      	ldr	r3, [pc, #92]	; (8004814 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047b8:	e001      	b.n	80047be <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80047ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4912      	ldr	r1, [pc, #72]	; (8004810 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047c6:	428b      	cmp	r3, r1
 80047c8:	d101      	bne.n	80047ce <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80047ca:	4b12      	ldr	r3, [pc, #72]	; (8004814 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047cc:	e001      	b.n	80047d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80047ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047d6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047e6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f4:	f043 0204 	orr.w	r2, r3, #4
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff fdc5 	bl	800438c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004802:	e000      	b.n	8004806 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004804:	bf00      	nop
}
 8004806:	bf00      	nop
 8004808:	3720      	adds	r7, #32
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40003800 	.word	0x40003800
 8004814:	40003400 	.word	0x40003400

08004818 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	1c99      	adds	r1, r3, #2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6251      	str	r1, [r2, #36]	; 0x24
 800483e:	881a      	ldrh	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d113      	bne.n	8004886 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800486c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d106      	bne.n	8004886 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff ffc9 	bl	8004818 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004886:	bf00      	nop
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	1c99      	adds	r1, r3, #2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6251      	str	r1, [r2, #36]	; 0x24
 80048a2:	8819      	ldrh	r1, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a1d      	ldr	r2, [pc, #116]	; (8004920 <I2SEx_TxISR_I2SExt+0x90>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d101      	bne.n	80048b2 <I2SEx_TxISR_I2SExt+0x22>
 80048ae:	4b1d      	ldr	r3, [pc, #116]	; (8004924 <I2SEx_TxISR_I2SExt+0x94>)
 80048b0:	e001      	b.n	80048b6 <I2SEx_TxISR_I2SExt+0x26>
 80048b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048b6:	460a      	mov	r2, r1
 80048b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d121      	bne.n	8004916 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a12      	ldr	r2, [pc, #72]	; (8004920 <I2SEx_TxISR_I2SExt+0x90>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d101      	bne.n	80048e0 <I2SEx_TxISR_I2SExt+0x50>
 80048dc:	4b11      	ldr	r3, [pc, #68]	; (8004924 <I2SEx_TxISR_I2SExt+0x94>)
 80048de:	e001      	b.n	80048e4 <I2SEx_TxISR_I2SExt+0x54>
 80048e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	490d      	ldr	r1, [pc, #52]	; (8004920 <I2SEx_TxISR_I2SExt+0x90>)
 80048ec:	428b      	cmp	r3, r1
 80048ee:	d101      	bne.n	80048f4 <I2SEx_TxISR_I2SExt+0x64>
 80048f0:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <I2SEx_TxISR_I2SExt+0x94>)
 80048f2:	e001      	b.n	80048f8 <I2SEx_TxISR_I2SExt+0x68>
 80048f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d106      	bne.n	8004916 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff ff81 	bl	8004818 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004916:	bf00      	nop
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40003800 	.word	0x40003800
 8004924:	40003400 	.word	0x40003400

08004928 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68d8      	ldr	r0, [r3, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493a:	1c99      	adds	r1, r3, #2
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004940:	b282      	uxth	r2, r0
 8004942:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004948:	b29b      	uxth	r3, r3
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d113      	bne.n	8004984 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800496a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff ff4a 	bl	8004818 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004984:	bf00      	nop
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a20      	ldr	r2, [pc, #128]	; (8004a1c <I2SEx_RxISR_I2SExt+0x90>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d101      	bne.n	80049a2 <I2SEx_RxISR_I2SExt+0x16>
 800499e:	4b20      	ldr	r3, [pc, #128]	; (8004a20 <I2SEx_RxISR_I2SExt+0x94>)
 80049a0:	e001      	b.n	80049a6 <I2SEx_RxISR_I2SExt+0x1a>
 80049a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049a6:	68d8      	ldr	r0, [r3, #12]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	1c99      	adds	r1, r3, #2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80049b2:	b282      	uxth	r2, r0
 80049b4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d121      	bne.n	8004a12 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a12      	ldr	r2, [pc, #72]	; (8004a1c <I2SEx_RxISR_I2SExt+0x90>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d101      	bne.n	80049dc <I2SEx_RxISR_I2SExt+0x50>
 80049d8:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <I2SEx_RxISR_I2SExt+0x94>)
 80049da:	e001      	b.n	80049e0 <I2SEx_RxISR_I2SExt+0x54>
 80049dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	490d      	ldr	r1, [pc, #52]	; (8004a1c <I2SEx_RxISR_I2SExt+0x90>)
 80049e8:	428b      	cmp	r3, r1
 80049ea:	d101      	bne.n	80049f0 <I2SEx_RxISR_I2SExt+0x64>
 80049ec:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <I2SEx_RxISR_I2SExt+0x94>)
 80049ee:	e001      	b.n	80049f4 <I2SEx_RxISR_I2SExt+0x68>
 80049f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049f8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d106      	bne.n	8004a12 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff ff03 	bl	8004818 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a12:	bf00      	nop
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40003800 	.word	0x40003800
 8004a20:	40003400 	.word	0x40003400

08004a24 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004a2c:	f7fd fd66 	bl	80024fc <HAL_GetTick>
 8004a30:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e069      	b.n	8004b10 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10b      	bne.n	8004a60 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7fd f995 	bl	8001d80 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004a56:	f241 3188 	movw	r1, #5000	; 0x1388
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f85e 	bl	8004b1c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	021a      	lsls	r2, r3, #8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	2120      	movs	r1, #32
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f856 	bl	8004b38 <QSPI_WaitFlagStateUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004a90:	7afb      	ldrb	r3, [r7, #11]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d137      	bne.n	8004b06 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004aa0:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6852      	ldr	r2, [r2, #4]
 8004aa8:	0611      	lsls	r1, r2, #24
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	68d2      	ldr	r2, [r2, #12]
 8004aae:	4311      	orrs	r1, r2
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	69d2      	ldr	r2, [r2, #28]
 8004ab4:	4311      	orrs	r1, r2
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6a12      	ldr	r2, [r2, #32]
 8004aba:	4311      	orrs	r1, r2
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6812      	ldr	r2, [r2, #0]
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	4b13      	ldr	r3, [pc, #76]	; (8004b18 <HAL_QSPI_Init+0xf4>)
 8004acc:	4013      	ands	r3, r2
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6912      	ldr	r2, [r2, #16]
 8004ad2:	0411      	lsls	r1, r2, #16
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6952      	ldr	r2, [r2, #20]
 8004ad8:	4311      	orrs	r1, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6992      	ldr	r2, [r2, #24]
 8004ade:	4311      	orrs	r1, r2
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6812      	ldr	r2, [r2, #0]
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004b0e:	7afb      	ldrb	r3, [r7, #11]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	ffe0f8fe 	.word	0xffe0f8fe

08004b1c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	4613      	mov	r3, r2
 8004b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004b48:	e01a      	b.n	8004b80 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b50:	d016      	beq.n	8004b80 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b52:	f7fd fcd3 	bl	80024fc <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d302      	bcc.n	8004b68 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10b      	bne.n	8004b80 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b74:	f043 0201 	orr.w	r2, r3, #1
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e00e      	b.n	8004b9e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	bf14      	ite	ne
 8004b8e:	2301      	movne	r3, #1
 8004b90:	2300      	moveq	r3, #0
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	461a      	mov	r2, r3
 8004b96:	79fb      	ldrb	r3, [r7, #7]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d1d6      	bne.n	8004b4a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0cc      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bbc:	4b68      	ldr	r3, [pc, #416]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d90c      	bls.n	8004be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bca:	4b65      	ldr	r3, [pc, #404]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd2:	4b63      	ldr	r3, [pc, #396]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0b8      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d020      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bfc:	4b59      	ldr	r3, [pc, #356]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	4a58      	ldr	r2, [pc, #352]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c14:	4b53      	ldr	r3, [pc, #332]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	4a52      	ldr	r2, [pc, #328]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c20:	4b50      	ldr	r3, [pc, #320]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	494d      	ldr	r1, [pc, #308]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d044      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d107      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c46:	4b47      	ldr	r3, [pc, #284]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d119      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e07f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d003      	beq.n	8004c66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d107      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c66:	4b3f      	ldr	r3, [pc, #252]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e06f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c76:	4b3b      	ldr	r3, [pc, #236]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e067      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c86:	4b37      	ldr	r3, [pc, #220]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f023 0203 	bic.w	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4934      	ldr	r1, [pc, #208]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c98:	f7fd fc30 	bl	80024fc <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca0:	f7fd fc2c 	bl	80024fc <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e04f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb6:	4b2b      	ldr	r3, [pc, #172]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 020c 	and.w	r2, r3, #12
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d1eb      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc8:	4b25      	ldr	r3, [pc, #148]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d20c      	bcs.n	8004cf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd6:	4b22      	ldr	r3, [pc, #136]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cde:	4b20      	ldr	r3, [pc, #128]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e032      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cfc:	4b19      	ldr	r3, [pc, #100]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4916      	ldr	r1, [pc, #88]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	490e      	ldr	r1, [pc, #56]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d2e:	f000 f821 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 8004d32:	4601      	mov	r1, r0
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	091b      	lsrs	r3, r3, #4
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	4a0a      	ldr	r2, [pc, #40]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004d40:	5cd3      	ldrb	r3, [r2, r3]
 8004d42:	fa21 f303 	lsr.w	r3, r1, r3
 8004d46:	4a09      	ldr	r2, [pc, #36]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d4a:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <HAL_RCC_ClockConfig+0x1c8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fd fb90 	bl	8002474 <HAL_InitTick>

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	40023c00 	.word	0x40023c00
 8004d64:	40023800 	.word	0x40023800
 8004d68:	0800c3b0 	.word	0x0800c3b0
 8004d6c:	20000000 	.word	0x20000000
 8004d70:	20000004 	.word	0x20000004

08004d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	607b      	str	r3, [r7, #4]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	2300      	movs	r3, #0
 8004d84:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d8a:	4b50      	ldr	r3, [pc, #320]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x158>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 030c 	and.w	r3, r3, #12
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d007      	beq.n	8004da6 <HAL_RCC_GetSysClockFreq+0x32>
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d008      	beq.n	8004dac <HAL_RCC_GetSysClockFreq+0x38>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f040 808d 	bne.w	8004eba <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004da0:	4b4b      	ldr	r3, [pc, #300]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004da2:	60bb      	str	r3, [r7, #8]
       break;
 8004da4:	e08c      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004da6:	4b4b      	ldr	r3, [pc, #300]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004da8:	60bb      	str	r3, [r7, #8]
      break;
 8004daa:	e089      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dac:	4b47      	ldr	r3, [pc, #284]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x158>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004db4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004db6:	4b45      	ldr	r3, [pc, #276]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x158>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d023      	beq.n	8004e0a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dc2:	4b42      	ldr	r3, [pc, #264]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x158>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	099b      	lsrs	r3, r3, #6
 8004dc8:	f04f 0400 	mov.w	r4, #0
 8004dcc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	ea03 0501 	and.w	r5, r3, r1
 8004dd8:	ea04 0602 	and.w	r6, r4, r2
 8004ddc:	4a3d      	ldr	r2, [pc, #244]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004dde:	fb02 f106 	mul.w	r1, r2, r6
 8004de2:	2200      	movs	r2, #0
 8004de4:	fb02 f205 	mul.w	r2, r2, r5
 8004de8:	440a      	add	r2, r1
 8004dea:	493a      	ldr	r1, [pc, #232]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004dec:	fba5 0101 	umull	r0, r1, r5, r1
 8004df0:	1853      	adds	r3, r2, r1
 8004df2:	4619      	mov	r1, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f04f 0400 	mov.w	r4, #0
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	4623      	mov	r3, r4
 8004dfe:	f7fb fa5f 	bl	80002c0 <__aeabi_uldivmod>
 8004e02:	4603      	mov	r3, r0
 8004e04:	460c      	mov	r4, r1
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	e049      	b.n	8004e9e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e0a:	4b30      	ldr	r3, [pc, #192]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x158>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	099b      	lsrs	r3, r3, #6
 8004e10:	f04f 0400 	mov.w	r4, #0
 8004e14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	ea03 0501 	and.w	r5, r3, r1
 8004e20:	ea04 0602 	and.w	r6, r4, r2
 8004e24:	4629      	mov	r1, r5
 8004e26:	4632      	mov	r2, r6
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	f04f 0400 	mov.w	r4, #0
 8004e30:	0154      	lsls	r4, r2, #5
 8004e32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e36:	014b      	lsls	r3, r1, #5
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4622      	mov	r2, r4
 8004e3c:	1b49      	subs	r1, r1, r5
 8004e3e:	eb62 0206 	sbc.w	r2, r2, r6
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	f04f 0400 	mov.w	r4, #0
 8004e4a:	0194      	lsls	r4, r2, #6
 8004e4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e50:	018b      	lsls	r3, r1, #6
 8004e52:	1a5b      	subs	r3, r3, r1
 8004e54:	eb64 0402 	sbc.w	r4, r4, r2
 8004e58:	f04f 0100 	mov.w	r1, #0
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	00e2      	lsls	r2, r4, #3
 8004e62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e66:	00d9      	lsls	r1, r3, #3
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4614      	mov	r4, r2
 8004e6c:	195b      	adds	r3, r3, r5
 8004e6e:	eb44 0406 	adc.w	r4, r4, r6
 8004e72:	f04f 0100 	mov.w	r1, #0
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	02a2      	lsls	r2, r4, #10
 8004e7c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004e80:	0299      	lsls	r1, r3, #10
 8004e82:	460b      	mov	r3, r1
 8004e84:	4614      	mov	r4, r2
 8004e86:	4618      	mov	r0, r3
 8004e88:	4621      	mov	r1, r4
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f04f 0400 	mov.w	r4, #0
 8004e90:	461a      	mov	r2, r3
 8004e92:	4623      	mov	r3, r4
 8004e94:	f7fb fa14 	bl	80002c0 <__aeabi_uldivmod>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x158>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	0c1b      	lsrs	r3, r3, #16
 8004ea4:	f003 0303 	and.w	r3, r3, #3
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb6:	60bb      	str	r3, [r7, #8]
      break;
 8004eb8:	e002      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eba:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004ebc:	60bb      	str	r3, [r7, #8]
      break;
 8004ebe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ec0:	68bb      	ldr	r3, [r7, #8]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	00f42400 	.word	0x00f42400
 8004ed4:	017d7840 	.word	0x017d7840

08004ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004edc:	4b03      	ldr	r3, [pc, #12]	; (8004eec <HAL_RCC_GetHCLKFreq+0x14>)
 8004ede:	681b      	ldr	r3, [r3, #0]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	20000000 	.word	0x20000000

08004ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ef4:	f7ff fff0 	bl	8004ed8 <HAL_RCC_GetHCLKFreq>
 8004ef8:	4601      	mov	r1, r0
 8004efa:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	0a9b      	lsrs	r3, r3, #10
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	4a03      	ldr	r2, [pc, #12]	; (8004f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f06:	5cd3      	ldrb	r3, [r2, r3]
 8004f08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40023800 	.word	0x40023800
 8004f14:	0800c3c0 	.word	0x0800c3c0

08004f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f1c:	f7ff ffdc 	bl	8004ed8 <HAL_RCC_GetHCLKFreq>
 8004f20:	4601      	mov	r1, r0
 8004f22:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	0b5b      	lsrs	r3, r3, #13
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	4a03      	ldr	r2, [pc, #12]	; (8004f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f2e:	5cd3      	ldrb	r3, [r2, r3]
 8004f30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	0800c3c0 	.word	0x0800c3c0

08004f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d010      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004f64:	4b7a      	ldr	r3, [pc, #488]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f6a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	4977      	ldr	r1, [pc, #476]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8004f82:	2301      	movs	r3, #1
 8004f84:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d010      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004f92:	4b6f      	ldr	r3, [pc, #444]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f98:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	496b      	ldr	r1, [pc, #428]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d022      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8004fc0:	4b63      	ldr	r3, [pc, #396]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fce:	4960      	ldr	r1, [pc, #384]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fea:	d10c      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004fec:	4b58      	ldr	r3, [pc, #352]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ff2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	4954      	ldr	r1, [pc, #336]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d022      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8005012:	4b4f      	ldr	r3, [pc, #316]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005018:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005020:	494b      	ldr	r1, [pc, #300]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005030:	2301      	movs	r3, #1
 8005032:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005038:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800503c:	d10c      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800503e:	4b44      	ldr	r3, [pc, #272]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005044:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	3b01      	subs	r3, #1
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	493f      	ldr	r1, [pc, #252]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 808a 	beq.w	800517a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	4b39      	ldr	r3, [pc, #228]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	4a38      	ldr	r2, [pc, #224]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005074:	6413      	str	r3, [r2, #64]	; 0x40
 8005076:	4b36      	ldr	r3, [pc, #216]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005082:	4b34      	ldr	r3, [pc, #208]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a33      	ldr	r2, [pc, #204]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800508c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800508e:	f7fd fa35 	bl	80024fc <HAL_GetTick>
 8005092:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005094:	e008      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005096:	f7fd fa31 	bl	80024fc <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e1d1      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050a8:	4b2a      	ldr	r3, [pc, #168]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0f0      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050b4:	4b26      	ldr	r3, [pc, #152]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80050b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050bc:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d02f      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d028      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050d2:	4b1f      	ldr	r3, [pc, #124]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050da:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050dc:	4b1e      	ldr	r3, [pc, #120]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80050de:	2201      	movs	r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050e2:	4b1d      	ldr	r3, [pc, #116]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050e8:	4a19      	ldr	r2, [pc, #100]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050ee:	4b18      	ldr	r3, [pc, #96]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d114      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050fa:	f7fd f9ff 	bl	80024fc <HAL_GetTick>
 80050fe:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005100:	e00a      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005102:	f7fd f9fb 	bl	80024fc <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005110:	4293      	cmp	r3, r2
 8005112:	d901      	bls.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e199      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005118:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800511a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0ee      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005130:	d114      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005132:	4b07      	ldr	r3, [pc, #28]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005146:	4902      	ldr	r1, [pc, #8]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005148:	4313      	orrs	r3, r2
 800514a:	608b      	str	r3, [r1, #8]
 800514c:	e00c      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800514e:	bf00      	nop
 8005150:	40023800 	.word	0x40023800
 8005154:	40007000 	.word	0x40007000
 8005158:	42470e40 	.word	0x42470e40
 800515c:	4b89      	ldr	r3, [pc, #548]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	4a88      	ldr	r2, [pc, #544]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005162:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005166:	6093      	str	r3, [r2, #8]
 8005168:	4b86      	ldr	r3, [pc, #536]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800516a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005174:	4983      	ldr	r1, [pc, #524]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005176:	4313      	orrs	r3, r2
 8005178:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0304 	and.w	r3, r3, #4
 8005182:	2b00      	cmp	r3, #0
 8005184:	d004      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800518c:	4b7e      	ldr	r3, [pc, #504]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800518e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0310 	and.w	r3, r3, #16
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800519c:	4b79      	ldr	r3, [pc, #484]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800519e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051aa:	4976      	ldr	r1, [pc, #472]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d011      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80051be:	4b71      	ldr	r3, [pc, #452]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80051c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	496d      	ldr	r1, [pc, #436]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051dc:	d101      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80051de:	2301      	movs	r3, #1
 80051e0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80051ee:	4b65      	ldr	r3, [pc, #404]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80051f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051f4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fc:	4961      	ldr	r1, [pc, #388]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d004      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b80      	cmp	r3, #128	; 0x80
 8005210:	f040 80c6 	bne.w	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005214:	4b5d      	ldr	r3, [pc, #372]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800521a:	f7fd f96f 	bl	80024fc <HAL_GetTick>
 800521e:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005220:	e008      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005222:	f7fd f96b 	bl	80024fc <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e10b      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005234:	4b53      	ldr	r3, [pc, #332]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1f0      	bne.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005240:	4a53      	ldr	r2, [pc, #332]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005246:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d023      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d019      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005278:	2b00      	cmp	r3, #0
 800527a:	d004      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005280:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005284:	d00e      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800528e:	2b00      	cmp	r3, #0
 8005290:	d019      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005296:	2b00      	cmp	r3, #0
 8005298:	d115      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052a2:	d110      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	019b      	lsls	r3, r3, #6
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	061b      	lsls	r3, r3, #24
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	071b      	lsls	r3, r3, #28
 80052be:	4931      	ldr	r1, [pc, #196]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d009      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d026      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d122      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052ee:	4b25      	ldr	r3, [pc, #148]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80052f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052f4:	0e1b      	lsrs	r3, r3, #24
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	019b      	lsls	r3, r3, #6
 8005306:	431a      	orrs	r2, r3
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	061b      	lsls	r3, r3, #24
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	071b      	lsls	r3, r3, #28
 8005314:	491b      	ldr	r1, [pc, #108]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 800531c:	4b19      	ldr	r3, [pc, #100]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800531e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005322:	f023 021f 	bic.w	r2, r3, #31
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	3b01      	subs	r3, #1
 800532c:	4915      	ldr	r1, [pc, #84]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800532e:	4313      	orrs	r3, r2
 8005330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533c:	2b00      	cmp	r3, #0
 800533e:	d010      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	019b      	lsls	r3, r3, #6
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	061b      	lsls	r3, r3, #24
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	071b      	lsls	r3, r3, #28
 800535a:	490a      	ldr	r1, [pc, #40]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005362:	4b0a      	ldr	r3, [pc, #40]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005364:	2201      	movs	r2, #1
 8005366:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005368:	f7fd f8c8 	bl	80024fc <HAL_GetTick>
 800536c:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800536e:	e011      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005370:	f7fd f8c4 	bl	80024fc <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d90a      	bls.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e064      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005382:	bf00      	nop
 8005384:	40023800 	.word	0x40023800
 8005388:	424711e0 	.word	0x424711e0
 800538c:	42470068 	.word	0x42470068
 8005390:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005394:	4b2f      	ldr	r3, [pc, #188]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0e7      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053ac:	4b29      	ldr	r3, [pc, #164]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80053ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ba:	4926      	ldr	r1, [pc, #152]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80053ce:	4b21      	ldr	r3, [pc, #132]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80053d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053d4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	491d      	ldr	r1, [pc, #116]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80053f0:	4b18      	ldr	r3, [pc, #96]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80053f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fe:	4915      	ldr	r1, [pc, #84]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8005412:	4b10      	ldr	r3, [pc, #64]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005418:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005420:	490c      	ldr	r1, [pc, #48]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005422:	4313      	orrs	r3, r2
 8005424:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005434:	4b07      	ldr	r3, [pc, #28]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800543a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005442:	4904      	ldr	r1, [pc, #16]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3720      	adds	r7, #32
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	40023800 	.word	0x40023800

08005458 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d003      	beq.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8005476:	2b02      	cmp	r3, #2
 8005478:	f000 8098 	beq.w	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800547c:	e12d      	b.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800547e:	4b9a      	ldr	r3, [pc, #616]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005484:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005488:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005490:	d00c      	beq.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8005492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005496:	d802      	bhi.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00a      	beq.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 800549c:	e082      	b.n	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800549e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054a2:	d047      	beq.n	8005534 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80054a4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80054a8:	d06f      	beq.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 80054aa:	e07b      	b.n	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80054ac:	4b8f      	ldr	r3, [pc, #572]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054ae:	617b      	str	r3, [r7, #20]
          break;
 80054b0:	e07b      	b.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80054b2:	4b8d      	ldr	r3, [pc, #564]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80054b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054c0:	d109      	bne.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80054c2:	4b89      	ldr	r3, [pc, #548]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80054c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054cc:	4a87      	ldr	r2, [pc, #540]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d2:	613b      	str	r3, [r7, #16]
 80054d4:	e019      	b.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80054d6:	4b84      	ldr	r3, [pc, #528]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054e2:	d109      	bne.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80054e4:	4b80      	ldr	r3, [pc, #512]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80054e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054ee:	4a80      	ldr	r2, [pc, #512]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80054f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f4:	613b      	str	r3, [r7, #16]
 80054f6:	e008      	b.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80054f8:	4b7b      	ldr	r3, [pc, #492]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80054fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005502:	4a7c      	ldr	r2, [pc, #496]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005504:	fbb2 f3f3 	udiv	r3, r2, r3
 8005508:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800550a:	4b77      	ldr	r3, [pc, #476]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800550c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005510:	099b      	lsrs	r3, r3, #6
 8005512:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	fb02 f303 	mul.w	r3, r2, r3
 800551c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800551e:	4b72      	ldr	r3, [pc, #456]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005524:	0f1b      	lsrs	r3, r3, #28
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005530:	617b      	str	r3, [r7, #20]
          break;
 8005532:	e03a      	b.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005534:	4b6c      	ldr	r3, [pc, #432]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800553c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005540:	d108      	bne.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005542:	4b69      	ldr	r3, [pc, #420]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800554a:	4a69      	ldr	r2, [pc, #420]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800554c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005550:	613b      	str	r3, [r7, #16]
 8005552:	e007      	b.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005554:	4b64      	ldr	r3, [pc, #400]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800555c:	4a65      	ldr	r2, [pc, #404]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800555e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005562:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005564:	4b60      	ldr	r3, [pc, #384]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	099b      	lsrs	r3, r3, #6
 800556a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	fb02 f303 	mul.w	r3, r2, r3
 8005574:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005576:	4b5c      	ldr	r3, [pc, #368]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	0f1b      	lsrs	r3, r3, #28
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	fbb2 f3f3 	udiv	r3, r2, r3
 8005586:	617b      	str	r3, [r7, #20]
          break;
 8005588:	e00f      	b.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800558a:	4b57      	ldr	r3, [pc, #348]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005596:	d102      	bne.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8005598:	4b55      	ldr	r3, [pc, #340]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800559a:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800559c:	e005      	b.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 800559e:	4b55      	ldr	r3, [pc, #340]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80055a0:	617b      	str	r3, [r7, #20]
          break;
 80055a2:	e002      	b.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	617b      	str	r3, [r7, #20]
          break;
 80055a8:	bf00      	nop
        }
      }
      break;
 80055aa:	e096      	b.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80055ac:	4b4e      	ldr	r3, [pc, #312]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80055ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b2:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80055b6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055be:	d00c      	beq.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80055c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055c4:	d802      	bhi.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80055ca:	e082      	b.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80055cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055d0:	d047      	beq.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80055d2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80055d6:	d06f      	beq.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80055d8:	e07b      	b.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80055da:	4b44      	ldr	r3, [pc, #272]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055dc:	617b      	str	r3, [r7, #20]
          break;
 80055de:	e07b      	b.n	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80055e0:	4b41      	ldr	r3, [pc, #260]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80055e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055ee:	d109      	bne.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80055f0:	4b3d      	ldr	r3, [pc, #244]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80055f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055fa:	4a3c      	ldr	r2, [pc, #240]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	e019      	b.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005604:	4b38      	ldr	r3, [pc, #224]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800560c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005610:	d109      	bne.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005612:	4b35      	ldr	r3, [pc, #212]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800561c:	4a34      	ldr	r2, [pc, #208]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800561e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	e008      	b.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005626:	4b30      	ldr	r3, [pc, #192]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800562c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005630:	4a30      	ldr	r2, [pc, #192]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005632:	fbb2 f3f3 	udiv	r3, r2, r3
 8005636:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005638:	4b2b      	ldr	r3, [pc, #172]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800563a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800563e:	099b      	lsrs	r3, r3, #6
 8005640:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	fb02 f303 	mul.w	r3, r2, r3
 800564a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800564c:	4b26      	ldr	r3, [pc, #152]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800564e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005652:	0f1b      	lsrs	r3, r3, #28
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	fbb2 f3f3 	udiv	r3, r2, r3
 800565e:	617b      	str	r3, [r7, #20]
          break;
 8005660:	e03a      	b.n	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005662:	4b21      	ldr	r3, [pc, #132]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800566a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800566e:	d108      	bne.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005670:	4b1d      	ldr	r3, [pc, #116]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005678:	4a1d      	ldr	r2, [pc, #116]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800567a:	fbb2 f3f3 	udiv	r3, r2, r3
 800567e:	613b      	str	r3, [r7, #16]
 8005680:	e007      	b.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005682:	4b19      	ldr	r3, [pc, #100]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800568a:	4a1a      	ldr	r2, [pc, #104]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800568c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005690:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	099b      	lsrs	r3, r3, #6
 8005698:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	fb02 f303 	mul.w	r3, r2, r3
 80056a2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80056a4:	4b10      	ldr	r3, [pc, #64]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	0f1b      	lsrs	r3, r3, #28
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b4:	617b      	str	r3, [r7, #20]
          break;
 80056b6:	e00f      	b.n	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80056b8:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056c4:	d102      	bne.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 80056c6:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80056c8:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80056ca:	e005      	b.n	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 80056cc:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80056ce:	617b      	str	r3, [r7, #20]
          break;
 80056d0:	e002      	b.n	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]
          break;
 80056d6:	bf00      	nop
        }
      }
      break;
 80056d8:	bf00      	nop
    }
  }
  return frequency;
 80056da:	697b      	ldr	r3, [r7, #20]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	371c      	adds	r7, #28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	40023800 	.word	0x40023800
 80056ec:	00bb8000 	.word	0x00bb8000
 80056f0:	017d7840 	.word	0x017d7840
 80056f4:	00f42400 	.word	0x00f42400

080056f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d075      	beq.n	80057fc <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005710:	4ba2      	ldr	r3, [pc, #648]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 030c 	and.w	r3, r3, #12
 8005718:	2b04      	cmp	r3, #4
 800571a:	d00c      	beq.n	8005736 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800571c:	4b9f      	ldr	r3, [pc, #636]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005724:	2b08      	cmp	r3, #8
 8005726:	d112      	bne.n	800574e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005728:	4b9c      	ldr	r3, [pc, #624]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005730:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005734:	d10b      	bne.n	800574e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005736:	4b99      	ldr	r3, [pc, #612]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d05b      	beq.n	80057fa <HAL_RCC_OscConfig+0x102>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d157      	bne.n	80057fa <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e20b      	b.n	8005b66 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005756:	d106      	bne.n	8005766 <HAL_RCC_OscConfig+0x6e>
 8005758:	4b90      	ldr	r3, [pc, #576]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a8f      	ldr	r2, [pc, #572]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 800575e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	e01d      	b.n	80057a2 <HAL_RCC_OscConfig+0xaa>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800576e:	d10c      	bne.n	800578a <HAL_RCC_OscConfig+0x92>
 8005770:	4b8a      	ldr	r3, [pc, #552]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a89      	ldr	r2, [pc, #548]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 8005776:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	4b87      	ldr	r3, [pc, #540]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a86      	ldr	r2, [pc, #536]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 8005782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005786:	6013      	str	r3, [r2, #0]
 8005788:	e00b      	b.n	80057a2 <HAL_RCC_OscConfig+0xaa>
 800578a:	4b84      	ldr	r3, [pc, #528]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a83      	ldr	r2, [pc, #524]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 8005790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	4b81      	ldr	r3, [pc, #516]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a80      	ldr	r2, [pc, #512]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 800579c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d013      	beq.n	80057d2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057aa:	f7fc fea7 	bl	80024fc <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057b2:	f7fc fea3 	bl	80024fc <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b64      	cmp	r3, #100	; 0x64
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e1d0      	b.n	8005b66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057c4:	4b75      	ldr	r3, [pc, #468]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0f0      	beq.n	80057b2 <HAL_RCC_OscConfig+0xba>
 80057d0:	e014      	b.n	80057fc <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d2:	f7fc fe93 	bl	80024fc <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057da:	f7fc fe8f 	bl	80024fc <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b64      	cmp	r3, #100	; 0x64
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e1bc      	b.n	8005b66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ec:	4b6b      	ldr	r3, [pc, #428]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1f0      	bne.n	80057da <HAL_RCC_OscConfig+0xe2>
 80057f8:	e000      	b.n	80057fc <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057fa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d063      	beq.n	80058d0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005808:	4b64      	ldr	r3, [pc, #400]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 030c 	and.w	r3, r3, #12
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00b      	beq.n	800582c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005814:	4b61      	ldr	r3, [pc, #388]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800581c:	2b08      	cmp	r3, #8
 800581e:	d11c      	bne.n	800585a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005820:	4b5e      	ldr	r3, [pc, #376]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d116      	bne.n	800585a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800582c:	4b5b      	ldr	r3, [pc, #364]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <HAL_RCC_OscConfig+0x14c>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d001      	beq.n	8005844 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e190      	b.n	8005b66 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005844:	4b55      	ldr	r3, [pc, #340]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	4952      	ldr	r1, [pc, #328]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 8005854:	4313      	orrs	r3, r2
 8005856:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005858:	e03a      	b.n	80058d0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d020      	beq.n	80058a4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005862:	4b4f      	ldr	r3, [pc, #316]	; (80059a0 <HAL_RCC_OscConfig+0x2a8>)
 8005864:	2201      	movs	r2, #1
 8005866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005868:	f7fc fe48 	bl	80024fc <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005870:	f7fc fe44 	bl	80024fc <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e171      	b.n	8005b66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005882:	4b46      	ldr	r3, [pc, #280]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f0      	beq.n	8005870 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800588e:	4b43      	ldr	r3, [pc, #268]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	493f      	ldr	r1, [pc, #252]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	600b      	str	r3, [r1, #0]
 80058a2:	e015      	b.n	80058d0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058a4:	4b3e      	ldr	r3, [pc, #248]	; (80059a0 <HAL_RCC_OscConfig+0x2a8>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058aa:	f7fc fe27 	bl	80024fc <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058b2:	f7fc fe23 	bl	80024fc <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e150      	b.n	8005b66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058c4:	4b35      	ldr	r3, [pc, #212]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1f0      	bne.n	80058b2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d030      	beq.n	800593e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d016      	beq.n	8005912 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058e4:	4b2f      	ldr	r3, [pc, #188]	; (80059a4 <HAL_RCC_OscConfig+0x2ac>)
 80058e6:	2201      	movs	r2, #1
 80058e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ea:	f7fc fe07 	bl	80024fc <HAL_GetTick>
 80058ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058f0:	e008      	b.n	8005904 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058f2:	f7fc fe03 	bl	80024fc <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e130      	b.n	8005b66 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005904:	4b25      	ldr	r3, [pc, #148]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 8005906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0f0      	beq.n	80058f2 <HAL_RCC_OscConfig+0x1fa>
 8005910:	e015      	b.n	800593e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005912:	4b24      	ldr	r3, [pc, #144]	; (80059a4 <HAL_RCC_OscConfig+0x2ac>)
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005918:	f7fc fdf0 	bl	80024fc <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005920:	f7fc fdec 	bl	80024fc <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e119      	b.n	8005b66 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005932:	4b1a      	ldr	r3, [pc, #104]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 8005934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f0      	bne.n	8005920 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b00      	cmp	r3, #0
 8005948:	f000 809f 	beq.w	8005a8a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800594c:	2300      	movs	r3, #0
 800594e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005950:	4b12      	ldr	r3, [pc, #72]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10f      	bne.n	800597c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800595c:	2300      	movs	r3, #0
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	4b0e      	ldr	r3, [pc, #56]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	4a0d      	ldr	r2, [pc, #52]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 8005966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800596a:	6413      	str	r3, [r2, #64]	; 0x40
 800596c:	4b0b      	ldr	r3, [pc, #44]	; (800599c <HAL_RCC_OscConfig+0x2a4>)
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005978:	2301      	movs	r3, #1
 800597a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597c:	4b0a      	ldr	r3, [pc, #40]	; (80059a8 <HAL_RCC_OscConfig+0x2b0>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005984:	2b00      	cmp	r3, #0
 8005986:	d120      	bne.n	80059ca <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005988:	4b07      	ldr	r3, [pc, #28]	; (80059a8 <HAL_RCC_OscConfig+0x2b0>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a06      	ldr	r2, [pc, #24]	; (80059a8 <HAL_RCC_OscConfig+0x2b0>)
 800598e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005992:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005994:	f7fc fdb2 	bl	80024fc <HAL_GetTick>
 8005998:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800599a:	e010      	b.n	80059be <HAL_RCC_OscConfig+0x2c6>
 800599c:	40023800 	.word	0x40023800
 80059a0:	42470000 	.word	0x42470000
 80059a4:	42470e80 	.word	0x42470e80
 80059a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059ac:	f7fc fda6 	bl	80024fc <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e0d3      	b.n	8005b66 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059be:	4b6c      	ldr	r3, [pc, #432]	; (8005b70 <HAL_RCC_OscConfig+0x478>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0f0      	beq.n	80059ac <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d106      	bne.n	80059e0 <HAL_RCC_OscConfig+0x2e8>
 80059d2:	4b68      	ldr	r3, [pc, #416]	; (8005b74 <HAL_RCC_OscConfig+0x47c>)
 80059d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d6:	4a67      	ldr	r2, [pc, #412]	; (8005b74 <HAL_RCC_OscConfig+0x47c>)
 80059d8:	f043 0301 	orr.w	r3, r3, #1
 80059dc:	6713      	str	r3, [r2, #112]	; 0x70
 80059de:	e01c      	b.n	8005a1a <HAL_RCC_OscConfig+0x322>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2b05      	cmp	r3, #5
 80059e6:	d10c      	bne.n	8005a02 <HAL_RCC_OscConfig+0x30a>
 80059e8:	4b62      	ldr	r3, [pc, #392]	; (8005b74 <HAL_RCC_OscConfig+0x47c>)
 80059ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ec:	4a61      	ldr	r2, [pc, #388]	; (8005b74 <HAL_RCC_OscConfig+0x47c>)
 80059ee:	f043 0304 	orr.w	r3, r3, #4
 80059f2:	6713      	str	r3, [r2, #112]	; 0x70
 80059f4:	4b5f      	ldr	r3, [pc, #380]	; (8005b74 <HAL_RCC_OscConfig+0x47c>)
 80059f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f8:	4a5e      	ldr	r2, [pc, #376]	; (8005b74 <HAL_RCC_OscConfig+0x47c>)
 80059fa:	f043 0301 	orr.w	r3, r3, #1
 80059fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005a00:	e00b      	b.n	8005a1a <HAL_RCC_OscConfig+0x322>
 8005a02:	4b5c      	ldr	r3, [pc, #368]	; (8005b74 <HAL_RCC_OscConfig+0x47c>)
 8005a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a06:	4a5b      	ldr	r2, [pc, #364]	; (8005b74 <HAL_RCC_OscConfig+0x47c>)
 8005a08:	f023 0301 	bic.w	r3, r3, #1
 8005a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a0e:	4b59      	ldr	r3, [pc, #356]	; (8005b74 <HAL_RCC_OscConfig+0x47c>)
 8005a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a12:	4a58      	ldr	r2, [pc, #352]	; (8005b74 <HAL_RCC_OscConfig+0x47c>)
 8005a14:	f023 0304 	bic.w	r3, r3, #4
 8005a18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d015      	beq.n	8005a4e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a22:	f7fc fd6b 	bl	80024fc <HAL_GetTick>
 8005a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a28:	e00a      	b.n	8005a40 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a2a:	f7fc fd67 	bl	80024fc <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e092      	b.n	8005b66 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a40:	4b4c      	ldr	r3, [pc, #304]	; (8005b74 <HAL_RCC_OscConfig+0x47c>)
 8005a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0ee      	beq.n	8005a2a <HAL_RCC_OscConfig+0x332>
 8005a4c:	e014      	b.n	8005a78 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a4e:	f7fc fd55 	bl	80024fc <HAL_GetTick>
 8005a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a54:	e00a      	b.n	8005a6c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a56:	f7fc fd51 	bl	80024fc <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e07c      	b.n	8005b66 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a6c:	4b41      	ldr	r3, [pc, #260]	; (8005b74 <HAL_RCC_OscConfig+0x47c>)
 8005a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1ee      	bne.n	8005a56 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a78:	7dfb      	ldrb	r3, [r7, #23]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d105      	bne.n	8005a8a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a7e:	4b3d      	ldr	r3, [pc, #244]	; (8005b74 <HAL_RCC_OscConfig+0x47c>)
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	4a3c      	ldr	r2, [pc, #240]	; (8005b74 <HAL_RCC_OscConfig+0x47c>)
 8005a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d068      	beq.n	8005b64 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a92:	4b38      	ldr	r3, [pc, #224]	; (8005b74 <HAL_RCC_OscConfig+0x47c>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 030c 	and.w	r3, r3, #12
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d060      	beq.n	8005b60 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d145      	bne.n	8005b32 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aa6:	4b34      	ldr	r3, [pc, #208]	; (8005b78 <HAL_RCC_OscConfig+0x480>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aac:	f7fc fd26 	bl	80024fc <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ab4:	f7fc fd22 	bl	80024fc <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e04f      	b.n	8005b66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ac6:	4b2b      	ldr	r3, [pc, #172]	; (8005b74 <HAL_RCC_OscConfig+0x47c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1f0      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69da      	ldr	r2, [r3, #28]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	019b      	lsls	r3, r3, #6
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae8:	085b      	lsrs	r3, r3, #1
 8005aea:	3b01      	subs	r3, #1
 8005aec:	041b      	lsls	r3, r3, #16
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	061b      	lsls	r3, r3, #24
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afc:	071b      	lsls	r3, r3, #28
 8005afe:	491d      	ldr	r1, [pc, #116]	; (8005b74 <HAL_RCC_OscConfig+0x47c>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b04:	4b1c      	ldr	r3, [pc, #112]	; (8005b78 <HAL_RCC_OscConfig+0x480>)
 8005b06:	2201      	movs	r2, #1
 8005b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0a:	f7fc fcf7 	bl	80024fc <HAL_GetTick>
 8005b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b10:	e008      	b.n	8005b24 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b12:	f7fc fcf3 	bl	80024fc <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e020      	b.n	8005b66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b24:	4b13      	ldr	r3, [pc, #76]	; (8005b74 <HAL_RCC_OscConfig+0x47c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0f0      	beq.n	8005b12 <HAL_RCC_OscConfig+0x41a>
 8005b30:	e018      	b.n	8005b64 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b32:	4b11      	ldr	r3, [pc, #68]	; (8005b78 <HAL_RCC_OscConfig+0x480>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b38:	f7fc fce0 	bl	80024fc <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b40:	f7fc fcdc 	bl	80024fc <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e009      	b.n	8005b66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b52:	4b08      	ldr	r3, [pc, #32]	; (8005b74 <HAL_RCC_OscConfig+0x47c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1f0      	bne.n	8005b40 <HAL_RCC_OscConfig+0x448>
 8005b5e:	e001      	b.n	8005b64 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e000      	b.n	8005b66 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	40007000 	.word	0x40007000
 8005b74:	40023800 	.word	0x40023800
 8005b78:	42470060 	.word	0x42470060

08005b7c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e022      	b.n	8005bd4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d105      	bne.n	8005ba6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7fc f9b7 	bl	8001f14 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2203      	movs	r2, #3
 8005baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f814 	bl	8005bdc <HAL_SD_InitCard>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e00a      	b.n	8005bd4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005bdc:	b5b0      	push	{r4, r5, r7, lr}
 8005bde:	b08e      	sub	sp, #56	; 0x38
 8005be0:	af04      	add	r7, sp, #16
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005be4:	2300      	movs	r3, #0
 8005be6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005be8:	2300      	movs	r3, #0
 8005bea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005bec:	2300      	movs	r3, #0
 8005bee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005bf8:	2376      	movs	r3, #118	; 0x76
 8005bfa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681d      	ldr	r5, [r3, #0]
 8005c00:	466c      	mov	r4, sp
 8005c02:	f107 0314 	add.w	r3, r7, #20
 8005c06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005c0e:	f107 0308 	add.w	r3, r7, #8
 8005c12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c14:	4628      	mov	r0, r5
 8005c16:	f001 fc7b 	bl	8007510 <SDIO_Init>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e031      	b.n	8005c90 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005c2c:	4b1a      	ldr	r3, [pc, #104]	; (8005c98 <HAL_SD_InitCard+0xbc>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 fcb3 	bl	80075a2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005c3c:	4b16      	ldr	r3, [pc, #88]	; (8005c98 <HAL_SD_InitCard+0xbc>)
 8005c3e:	2201      	movs	r2, #1
 8005c40:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fe80 	bl	8006948 <SD_PowerON>
 8005c48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00b      	beq.n	8005c68 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e013      	b.n	8005c90 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fd9f 	bl	80067ac <SD_InitCard>
 8005c6e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00b      	beq.n	8005c8e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3728      	adds	r7, #40	; 0x28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bdb0      	pop	{r4, r5, r7, pc}
 8005c98:	422580a0 	.word	0x422580a0

08005c9c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b092      	sub	sp, #72	; 0x48
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005caa:	f7fc fc27 	bl	80024fc <HAL_GetTick>
 8005cae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d107      	bne.n	8005cce <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e1d7      	b.n	800607e <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	f040 81ca 	bne.w	8006070 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005ce2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	441a      	add	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d907      	bls.n	8005d00 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e1be      	b.n	800607e <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2203      	movs	r2, #3
 8005d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d002      	beq.n	8005d1e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1a:	025b      	lsls	r3, r3, #9
 8005d1c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d26:	4618      	mov	r0, r3
 8005d28:	f001 fcce 	bl	80076c8 <SDMMC_CmdBlockLength>
 8005d2c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00f      	beq.n	8005d54 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a9a      	ldr	r2, [pc, #616]	; (8005fa4 <HAL_SD_ReadBlocks+0x308>)
 8005d3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d42:	431a      	orrs	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e194      	b.n	800607e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d54:	f04f 33ff 	mov.w	r3, #4294967295
 8005d58:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	025b      	lsls	r3, r3, #9
 8005d5e:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005d60:	2390      	movs	r3, #144	; 0x90
 8005d62:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005d64:	2302      	movs	r3, #2
 8005d66:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f107 0214 	add.w	r2, r7, #20
 8005d78:	4611      	mov	r1, r2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f001 fc78 	bl	8007670 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d90a      	bls.n	8005d9c <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d92:	4618      	mov	r0, r3
 8005d94:	f001 fcdc 	bl	8007750 <SDMMC_CmdReadMultiBlock>
 8005d98:	6478      	str	r0, [r7, #68]	; 0x44
 8005d9a:	e009      	b.n	8005db0 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005da8:	4618      	mov	r0, r3
 8005daa:	f001 fcaf 	bl	800770c <SDMMC_CmdReadSingleBlock>
 8005dae:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d012      	beq.n	8005ddc <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a7a      	ldr	r2, [pc, #488]	; (8005fa4 <HAL_SD_ReadBlocks+0x308>)
 8005dbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e150      	b.n	800607e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005de0:	e061      	b.n	8005ea6 <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d03c      	beq.n	8005e6a <HAL_SD_ReadBlocks+0x1ce>
 8005df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d039      	beq.n	8005e6a <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005df6:	2300      	movs	r3, #0
 8005df8:	643b      	str	r3, [r7, #64]	; 0x40
 8005dfa:	e033      	b.n	8005e64 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f001 fbb0 	bl	8007566 <SDIO_ReadFIFO>
 8005e06:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e12:	3301      	adds	r3, #1
 8005e14:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1e:	0a1b      	lsrs	r3, r3, #8
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e24:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e28:	3301      	adds	r3, #1
 8005e2a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e34:	0c1b      	lsrs	r3, r3, #16
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3e:	3301      	adds	r3, #1
 8005e40:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e44:	3b01      	subs	r3, #1
 8005e46:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4a:	0e1b      	lsrs	r3, r3, #24
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e50:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e54:	3301      	adds	r3, #1
 8005e56:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e60:	3301      	adds	r3, #1
 8005e62:	643b      	str	r3, [r7, #64]	; 0x40
 8005e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e66:	2b07      	cmp	r3, #7
 8005e68:	d9c8      	bls.n	8005dfc <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005e6a:	f7fc fb47 	bl	80024fc <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d902      	bls.n	8005e80 <HAL_SD_ReadBlocks+0x1e4>
 8005e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d112      	bne.n	8005ea6 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a47      	ldr	r2, [pc, #284]	; (8005fa4 <HAL_SD_ReadBlocks+0x308>)
 8005e86:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e0eb      	b.n	800607e <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eac:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d096      	beq.n	8005de2 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d022      	beq.n	8005f08 <HAL_SD_ReadBlocks+0x26c>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d91f      	bls.n	8005f08 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d01b      	beq.n	8005f08 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f001 fca1 	bl	800781c <SDMMC_CmdStopTransfer>
 8005eda:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d012      	beq.n	8005f08 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a2f      	ldr	r2, [pc, #188]	; (8005fa4 <HAL_SD_ReadBlocks+0x308>)
 8005ee8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ef0:	431a      	orrs	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e0ba      	b.n	800607e <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0e:	f003 0308 	and.w	r3, r3, #8
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d012      	beq.n	8005f3c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a22      	ldr	r2, [pc, #136]	; (8005fa4 <HAL_SD_ReadBlocks+0x308>)
 8005f1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f22:	f043 0208 	orr.w	r2, r3, #8
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e0a0      	b.n	800607e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d012      	beq.n	8005f70 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a15      	ldr	r2, [pc, #84]	; (8005fa4 <HAL_SD_ReadBlocks+0x308>)
 8005f50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f56:	f043 0202 	orr.w	r2, r3, #2
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e086      	b.n	800607e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d063      	beq.n	8006046 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a08      	ldr	r2, [pc, #32]	; (8005fa4 <HAL_SD_ReadBlocks+0x308>)
 8005f84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8a:	f043 0220 	orr.w	r2, r3, #32
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e06c      	b.n	800607e <HAL_SD_ReadBlocks+0x3e2>
 8005fa4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f001 fada 	bl	8007566 <SDIO_ReadFIFO>
 8005fb2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fba:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fca:	0a1b      	lsrs	r3, r3, #8
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe0:	0c1b      	lsrs	r3, r3, #16
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fea:	3301      	adds	r3, #1
 8005fec:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff6:	0e1b      	lsrs	r3, r3, #24
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006000:	3301      	adds	r3, #1
 8006002:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006006:	3b01      	subs	r3, #1
 8006008:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800600a:	f7fc fa77 	bl	80024fc <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006016:	429a      	cmp	r2, r3
 8006018:	d902      	bls.n	8006020 <HAL_SD_ReadBlocks+0x384>
 800601a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800601c:	2b00      	cmp	r3, #0
 800601e:	d112      	bne.n	8006046 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a18      	ldr	r2, [pc, #96]	; (8006088 <HAL_SD_ReadBlocks+0x3ec>)
 8006026:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e01b      	b.n	800607e <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <HAL_SD_ReadBlocks+0x3be>
 8006054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1a6      	bne.n	8005fa8 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006062:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800606c:	2300      	movs	r3, #0
 800606e:	e006      	b.n	800607e <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006074:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
  }
}
 800607e:	4618      	mov	r0, r3
 8006080:	3748      	adds	r7, #72	; 0x48
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	004005ff 	.word	0x004005ff

0800608c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b092      	sub	sp, #72	; 0x48
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800609a:	f7fc fa2f 	bl	80024fc <HAL_GetTick>
 800609e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d107      	bne.n	80060be <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e182      	b.n	80063c4 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	f040 8175 	bne.w	80063b6 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80060d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	441a      	add	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060dc:	429a      	cmp	r2, r3
 80060de:	d907      	bls.n	80060f0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e169      	b.n	80063c4 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2203      	movs	r2, #3
 80060f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2200      	movs	r2, #0
 80060fe:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006104:	2b01      	cmp	r3, #1
 8006106:	d002      	beq.n	800610e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610a:	025b      	lsls	r3, r3, #9
 800610c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006116:	4618      	mov	r0, r3
 8006118:	f001 fad6 	bl	80076c8 <SDMMC_CmdBlockLength>
 800611c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800611e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00f      	beq.n	8006144 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a9c      	ldr	r2, [pc, #624]	; (800639c <HAL_SD_WriteBlocks+0x310>)
 800612a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006132:	431a      	orrs	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e13f      	b.n	80063c4 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006144:	f04f 33ff 	mov.w	r3, #4294967295
 8006148:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	025b      	lsls	r3, r3, #9
 800614e:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006150:	2390      	movs	r3, #144	; 0x90
 8006152:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006154:	2300      	movs	r3, #0
 8006156:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006158:	2300      	movs	r3, #0
 800615a:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800615c:	2301      	movs	r3, #1
 800615e:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f107 0218 	add.w	r2, r7, #24
 8006168:	4611      	mov	r1, r2
 800616a:	4618      	mov	r0, r3
 800616c:	f001 fa80 	bl	8007670 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d90a      	bls.n	800618c <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2220      	movs	r2, #32
 800617a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006182:	4618      	mov	r0, r3
 8006184:	f001 fb28 	bl	80077d8 <SDMMC_CmdWriteMultiBlock>
 8006188:	6478      	str	r0, [r7, #68]	; 0x44
 800618a:	e009      	b.n	80061a0 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2210      	movs	r2, #16
 8006190:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006198:	4618      	mov	r0, r3
 800619a:	f001 fafb 	bl	8007794 <SDMMC_CmdWriteSingleBlock>
 800619e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80061a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d012      	beq.n	80061cc <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a7c      	ldr	r2, [pc, #496]	; (800639c <HAL_SD_WriteBlocks+0x310>)
 80061ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061b4:	431a      	orrs	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e0fb      	b.n	80063c4 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80061d0:	e065      	b.n	800629e <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d040      	beq.n	8006262 <HAL_SD_WriteBlocks+0x1d6>
 80061e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d03d      	beq.n	8006262 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80061e6:	2300      	movs	r3, #0
 80061e8:	643b      	str	r3, [r7, #64]	; 0x40
 80061ea:	e037      	b.n	800625c <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 80061ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80061f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f4:	3301      	adds	r3, #1
 80061f6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80061f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061fa:	3b01      	subs	r3, #1
 80061fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80061fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	021a      	lsls	r2, r3, #8
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800620a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620c:	3301      	adds	r3, #1
 800620e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006212:	3b01      	subs	r3, #1
 8006214:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	041a      	lsls	r2, r3, #16
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006224:	3301      	adds	r3, #1
 8006226:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622a:	3b01      	subs	r3, #1
 800622c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800622e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	061a      	lsls	r2, r3, #24
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800623a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623c:	3301      	adds	r3, #1
 800623e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006242:	3b01      	subs	r3, #1
 8006244:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f107 0214 	add.w	r2, r7, #20
 800624e:	4611      	mov	r1, r2
 8006250:	4618      	mov	r0, r3
 8006252:	f001 f995 	bl	8007580 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006258:	3301      	adds	r3, #1
 800625a:	643b      	str	r3, [r7, #64]	; 0x40
 800625c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800625e:	2b07      	cmp	r3, #7
 8006260:	d9c4      	bls.n	80061ec <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006262:	f7fc f94b 	bl	80024fc <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800626e:	429a      	cmp	r2, r3
 8006270:	d902      	bls.n	8006278 <HAL_SD_WriteBlocks+0x1ec>
 8006272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006274:	2b00      	cmp	r3, #0
 8006276:	d112      	bne.n	800629e <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a47      	ldr	r2, [pc, #284]	; (800639c <HAL_SD_WriteBlocks+0x310>)
 800627e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006286:	431a      	orrs	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e092      	b.n	80063c4 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a4:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d092      	beq.n	80061d2 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d022      	beq.n	8006300 <HAL_SD_WriteBlocks+0x274>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d91f      	bls.n	8006300 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d01b      	beq.n	8006300 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f001 faa5 	bl	800781c <SDMMC_CmdStopTransfer>
 80062d2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80062d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d012      	beq.n	8006300 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a2f      	ldr	r2, [pc, #188]	; (800639c <HAL_SD_WriteBlocks+0x310>)
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062e8:	431a      	orrs	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e061      	b.n	80063c4 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006306:	f003 0308 	and.w	r3, r3, #8
 800630a:	2b00      	cmp	r3, #0
 800630c:	d012      	beq.n	8006334 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a22      	ldr	r2, [pc, #136]	; (800639c <HAL_SD_WriteBlocks+0x310>)
 8006314:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631a:	f043 0208 	orr.w	r2, r3, #8
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e047      	b.n	80063c4 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d012      	beq.n	8006368 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a15      	ldr	r2, [pc, #84]	; (800639c <HAL_SD_WriteBlocks+0x310>)
 8006348:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634e:	f043 0202 	orr.w	r2, r3, #2
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e02d      	b.n	80063c4 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636e:	f003 0310 	and.w	r3, r3, #16
 8006372:	2b00      	cmp	r3, #0
 8006374:	d014      	beq.n	80063a0 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a08      	ldr	r2, [pc, #32]	; (800639c <HAL_SD_WriteBlocks+0x310>)
 800637c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	f043 0210 	orr.w	r2, r3, #16
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e013      	b.n	80063c4 <HAL_SD_WriteBlocks+0x338>
 800639c:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f240 523a 	movw	r2, #1338	; 0x53a
 80063a8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	e006      	b.n	80063c4 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
  }
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3748      	adds	r7, #72	; 0x48
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063da:	0f9b      	lsrs	r3, r3, #30
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063e6:	0e9b      	lsrs	r3, r3, #26
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063f8:	0e1b      	lsrs	r3, r3, #24
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	f003 0303 	and.w	r3, r3, #3
 8006400:	b2da      	uxtb	r2, r3
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800640a:	0c1b      	lsrs	r3, r3, #16
 800640c:	b2da      	uxtb	r2, r3
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006416:	0a1b      	lsrs	r3, r3, #8
 8006418:	b2da      	uxtb	r2, r3
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006422:	b2da      	uxtb	r2, r3
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800642c:	0d1b      	lsrs	r3, r3, #20
 800642e:	b29a      	uxth	r2, r3
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006438:	0c1b      	lsrs	r3, r3, #16
 800643a:	b2db      	uxtb	r3, r3
 800643c:	f003 030f 	and.w	r3, r3, #15
 8006440:	b2da      	uxtb	r2, r3
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800644a:	0bdb      	lsrs	r3, r3, #15
 800644c:	b2db      	uxtb	r3, r3
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	b2da      	uxtb	r2, r3
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800645c:	0b9b      	lsrs	r3, r3, #14
 800645e:	b2db      	uxtb	r3, r3
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	b2da      	uxtb	r2, r3
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800646e:	0b5b      	lsrs	r3, r3, #13
 8006470:	b2db      	uxtb	r3, r3
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	b2da      	uxtb	r2, r3
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006480:	0b1b      	lsrs	r3, r3, #12
 8006482:	b2db      	uxtb	r3, r3
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	b2da      	uxtb	r2, r3
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2200      	movs	r2, #0
 8006492:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006498:	2b00      	cmp	r3, #0
 800649a:	d163      	bne.n	8006564 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064a0:	009a      	lsls	r2, r3, #2
 80064a2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80064a6:	4013      	ands	r3, r2
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80064ac:	0f92      	lsrs	r2, r2, #30
 80064ae:	431a      	orrs	r2, r3
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064b8:	0edb      	lsrs	r3, r3, #27
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ca:	0e1b      	lsrs	r3, r3, #24
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064dc:	0d5b      	lsrs	r3, r3, #21
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ee:	0c9b      	lsrs	r3, r3, #18
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006500:	0bdb      	lsrs	r3, r3, #15
 8006502:	b2db      	uxtb	r3, r3
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	b2da      	uxtb	r2, r3
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	7e1b      	ldrb	r3, [r3, #24]
 800651c:	b2db      	uxtb	r3, r3
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	3302      	adds	r3, #2
 8006524:	2201      	movs	r2, #1
 8006526:	fa02 f303 	lsl.w	r3, r2, r3
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800652e:	fb02 f203 	mul.w	r2, r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	7a1b      	ldrb	r3, [r3, #8]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	f003 030f 	and.w	r3, r3, #15
 8006540:	2201      	movs	r2, #1
 8006542:	409a      	lsls	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006550:	0a52      	lsrs	r2, r2, #9
 8006552:	fb02 f203 	mul.w	r2, r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006560:	661a      	str	r2, [r3, #96]	; 0x60
 8006562:	e031      	b.n	80065c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006568:	2b01      	cmp	r3, #1
 800656a:	d11d      	bne.n	80065a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006570:	041b      	lsls	r3, r3, #16
 8006572:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800657a:	0c1b      	lsrs	r3, r3, #16
 800657c:	431a      	orrs	r2, r3
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	3301      	adds	r3, #1
 8006588:	029a      	lsls	r2, r3, #10
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800659c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	661a      	str	r2, [r3, #96]	; 0x60
 80065a6:	e00f      	b.n	80065c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a58      	ldr	r2, [pc, #352]	; (8006710 <HAL_SD_GetCardCSD+0x344>)
 80065ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e09d      	b.n	8006704 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065cc:	0b9b      	lsrs	r3, r3, #14
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065de:	09db      	lsrs	r3, r3, #7
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006600:	0fdb      	lsrs	r3, r3, #31
 8006602:	b2da      	uxtb	r2, r3
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660c:	0f5b      	lsrs	r3, r3, #29
 800660e:	b2db      	uxtb	r3, r3
 8006610:	f003 0303 	and.w	r3, r3, #3
 8006614:	b2da      	uxtb	r2, r3
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661e:	0e9b      	lsrs	r3, r3, #26
 8006620:	b2db      	uxtb	r3, r3
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	b2da      	uxtb	r2, r3
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006630:	0d9b      	lsrs	r3, r3, #22
 8006632:	b2db      	uxtb	r3, r3
 8006634:	f003 030f 	and.w	r3, r3, #15
 8006638:	b2da      	uxtb	r2, r3
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006642:	0d5b      	lsrs	r3, r3, #21
 8006644:	b2db      	uxtb	r3, r3
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	b2da      	uxtb	r2, r3
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665e:	0c1b      	lsrs	r3, r3, #16
 8006660:	b2db      	uxtb	r3, r3
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	b2da      	uxtb	r2, r3
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006672:	0bdb      	lsrs	r3, r3, #15
 8006674:	b2db      	uxtb	r3, r3
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	b2da      	uxtb	r2, r3
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006686:	0b9b      	lsrs	r3, r3, #14
 8006688:	b2db      	uxtb	r3, r3
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	b2da      	uxtb	r2, r3
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669a:	0b5b      	lsrs	r3, r3, #13
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ae:	0b1b      	lsrs	r3, r3, #12
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c2:	0a9b      	lsrs	r3, r3, #10
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	f003 0303 	and.w	r3, r3, #3
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d6:	0a1b      	lsrs	r3, r3, #8
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ea:	085b      	lsrs	r3, r3, #1
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	004005ff 	.word	0x004005ff

08006714 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006774:	2300      	movs	r3, #0
 8006776:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006778:	f107 030c 	add.w	r3, r7, #12
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f970 	bl	8006a64 <SD_SendStatus>
 8006784:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d005      	beq.n	8006798 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	0a5b      	lsrs	r3, r3, #9
 800679c:	f003 030f 	and.w	r3, r3, #15
 80067a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80067a2:	693b      	ldr	r3, [r7, #16]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80067ac:	b5b0      	push	{r4, r5, r7, lr}
 80067ae:	b094      	sub	sp, #80	; 0x50
 80067b0:	af04      	add	r7, sp, #16
 80067b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80067b4:	2301      	movs	r3, #1
 80067b6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 feff 	bl	80075c0 <SDIO_GetPowerState>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d102      	bne.n	80067ce <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80067c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80067cc:	e0b7      	b.n	800693e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d02f      	beq.n	8006836 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f001 f8e5 	bl	80079aa <SDMMC_CmdSendCID>
 80067e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80067e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <SD_InitCard+0x40>
    {
      return errorstate;
 80067e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ea:	e0a8      	b.n	800693e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2100      	movs	r1, #0
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 ff29 	bl	800764a <SDIO_GetResponse>
 80067f8:	4602      	mov	r2, r0
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2104      	movs	r1, #4
 8006804:	4618      	mov	r0, r3
 8006806:	f000 ff20 	bl	800764a <SDIO_GetResponse>
 800680a:	4602      	mov	r2, r0
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2108      	movs	r1, #8
 8006816:	4618      	mov	r0, r3
 8006818:	f000 ff17 	bl	800764a <SDIO_GetResponse>
 800681c:	4602      	mov	r2, r0
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	210c      	movs	r1, #12
 8006828:	4618      	mov	r0, r3
 800682a:	f000 ff0e 	bl	800764a <SDIO_GetResponse>
 800682e:	4602      	mov	r2, r0
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683a:	2b03      	cmp	r3, #3
 800683c:	d00d      	beq.n	800685a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f107 020e 	add.w	r2, r7, #14
 8006846:	4611      	mov	r1, r2
 8006848:	4618      	mov	r0, r3
 800684a:	f001 f8eb 	bl	8007a24 <SDMMC_CmdSetRelAdd>
 800684e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <SD_InitCard+0xae>
    {
      return errorstate;
 8006856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006858:	e071      	b.n	800693e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685e:	2b03      	cmp	r3, #3
 8006860:	d036      	beq.n	80068d0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006862:	89fb      	ldrh	r3, [r7, #14]
 8006864:	461a      	mov	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006872:	041b      	lsls	r3, r3, #16
 8006874:	4619      	mov	r1, r3
 8006876:	4610      	mov	r0, r2
 8006878:	f001 f8b5 	bl	80079e6 <SDMMC_CmdSendCSD>
 800687c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800687e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006886:	e05a      	b.n	800693e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2100      	movs	r1, #0
 800688e:	4618      	mov	r0, r3
 8006890:	f000 fedb 	bl	800764a <SDIO_GetResponse>
 8006894:	4602      	mov	r2, r0
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2104      	movs	r1, #4
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 fed2 	bl	800764a <SDIO_GetResponse>
 80068a6:	4602      	mov	r2, r0
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2108      	movs	r1, #8
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fec9 	bl	800764a <SDIO_GetResponse>
 80068b8:	4602      	mov	r2, r0
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	210c      	movs	r1, #12
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 fec0 	bl	800764a <SDIO_GetResponse>
 80068ca:	4602      	mov	r2, r0
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2104      	movs	r1, #4
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 feb7 	bl	800764a <SDIO_GetResponse>
 80068dc:	4603      	mov	r3, r0
 80068de:	0d1a      	lsrs	r2, r3, #20
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80068e4:	f107 0310 	add.w	r3, r7, #16
 80068e8:	4619      	mov	r1, r3
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7ff fd6e 	bl	80063cc <HAL_SD_GetCardCSD>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80068fa:	e020      	b.n	800693e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6819      	ldr	r1, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006904:	041b      	lsls	r3, r3, #16
 8006906:	f04f 0400 	mov.w	r4, #0
 800690a:	461a      	mov	r2, r3
 800690c:	4623      	mov	r3, r4
 800690e:	4608      	mov	r0, r1
 8006910:	f000 ffa6 	bl	8007860 <SDMMC_CmdSelDesel>
 8006914:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <SD_InitCard+0x174>
  {
    return errorstate;
 800691c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800691e:	e00e      	b.n	800693e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681d      	ldr	r5, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	466c      	mov	r4, sp
 8006928:	f103 0210 	add.w	r2, r3, #16
 800692c:	ca07      	ldmia	r2, {r0, r1, r2}
 800692e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006932:	3304      	adds	r3, #4
 8006934:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006936:	4628      	mov	r0, r5
 8006938:	f000 fdea 	bl	8007510 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3740      	adds	r7, #64	; 0x40
 8006942:	46bd      	mov	sp, r7
 8006944:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006948 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	2300      	movs	r3, #0
 800695a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4618      	mov	r0, r3
 8006962:	f000 ffa0 	bl	80078a6 <SDMMC_CmdGoIdleState>
 8006966:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <SD_PowerON+0x2a>
  {
    return errorstate;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	e072      	b.n	8006a58 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4618      	mov	r0, r3
 8006978:	f000 ffb3 	bl	80078e2 <SDMMC_CmdOperCond>
 800697c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00d      	beq.n	80069a0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4618      	mov	r0, r3
 8006990:	f000 ff89 	bl	80078a6 <SDMMC_CmdGoIdleState>
 8006994:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d004      	beq.n	80069a6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	e05b      	b.n	8006a58 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d137      	bne.n	8006a1e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2100      	movs	r1, #0
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 ffb3 	bl	8007920 <SDMMC_CmdAppCommand>
 80069ba:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d02d      	beq.n	8006a1e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80069c6:	e047      	b.n	8006a58 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 ffa6 	bl	8007920 <SDMMC_CmdAppCommand>
 80069d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <SD_PowerON+0x98>
    {
      return errorstate;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	e03b      	b.n	8006a58 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	491e      	ldr	r1, [pc, #120]	; (8006a60 <SD_PowerON+0x118>)
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 ffbc 	bl	8007964 <SDMMC_CmdAppOperCommand>
 80069ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80069f8:	e02e      	b.n	8006a58 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2100      	movs	r1, #0
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 fe22 	bl	800764a <SDIO_GetResponse>
 8006a06:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	0fdb      	lsrs	r3, r3, #31
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d101      	bne.n	8006a14 <SD_PowerON+0xcc>
 8006a10:	2301      	movs	r3, #1
 8006a12:	e000      	b.n	8006a16 <SD_PowerON+0xce>
 8006a14:	2300      	movs	r3, #0
 8006a16:	613b      	str	r3, [r7, #16]

    count++;
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d802      	bhi.n	8006a2e <SD_PowerON+0xe6>
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d0cc      	beq.n	80069c8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d902      	bls.n	8006a3e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006a38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a3c:	e00c      	b.n	8006a58 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	645a      	str	r2, [r3, #68]	; 0x44
 8006a4e:	e002      	b.n	8006a56 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	c1100000 	.word	0xc1100000

08006a64 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d102      	bne.n	8006a7a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006a74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a78:	e018      	b.n	8006aac <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a82:	041b      	lsls	r3, r3, #16
 8006a84:	4619      	mov	r1, r3
 8006a86:	4610      	mov	r0, r2
 8006a88:	f000 ffed 	bl	8007a66 <SDMMC_CmdSendStatus>
 8006a8c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	e009      	b.n	8006aac <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fdd3 	bl	800764a <SDIO_GetResponse>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e034      	b.n	8006b34 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d106      	bne.n	8006ae4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f7fb fb80 	bl	80021e4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3308      	adds	r3, #8
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f000 fc0a 	bl	8007308 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6818      	ldr	r0, [r3, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	461a      	mov	r2, r3
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	f000 fc72 	bl	80073e8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6858      	ldr	r0, [r3, #4]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	6879      	ldr	r1, [r7, #4]
 8006b12:	f000 fcbd 	bl	8007490 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	6892      	ldr	r2, [r2, #8]
 8006b1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	6892      	ldr	r2, [r2, #8]
 8006b2a:	f041 0101 	orr.w	r1, r1, #1
 8006b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e03f      	b.n	8006bce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d106      	bne.n	8006b68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fb fa50 	bl	8002008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2224      	movs	r2, #36	; 0x24
 8006b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 f829 	bl	8006bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	691a      	ldr	r2, [r3, #16]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	695a      	ldr	r2, [r3, #20]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ba4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
	...

08006bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bdc:	b085      	sub	sp, #20
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68da      	ldr	r2, [r3, #12]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	431a      	orrs	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006c1a:	f023 030c 	bic.w	r3, r3, #12
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	6812      	ldr	r2, [r2, #0]
 8006c22:	68f9      	ldr	r1, [r7, #12]
 8006c24:	430b      	orrs	r3, r1
 8006c26:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	699a      	ldr	r2, [r3, #24]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c46:	f040 8199 	bne.w	8006f7c <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4ac6      	ldr	r2, [pc, #792]	; (8006f68 <UART_SetConfig+0x390>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d00f      	beq.n	8006c74 <UART_SetConfig+0x9c>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4ac4      	ldr	r2, [pc, #784]	; (8006f6c <UART_SetConfig+0x394>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00a      	beq.n	8006c74 <UART_SetConfig+0x9c>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4ac3      	ldr	r2, [pc, #780]	; (8006f70 <UART_SetConfig+0x398>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d005      	beq.n	8006c74 <UART_SetConfig+0x9c>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4ac1      	ldr	r2, [pc, #772]	; (8006f74 <UART_SetConfig+0x39c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	f040 80bd 	bne.w	8006dee <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c74:	f7fe f950 	bl	8004f18 <HAL_RCC_GetPCLK2Freq>
 8006c78:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	461d      	mov	r5, r3
 8006c7e:	f04f 0600 	mov.w	r6, #0
 8006c82:	46a8      	mov	r8, r5
 8006c84:	46b1      	mov	r9, r6
 8006c86:	eb18 0308 	adds.w	r3, r8, r8
 8006c8a:	eb49 0409 	adc.w	r4, r9, r9
 8006c8e:	4698      	mov	r8, r3
 8006c90:	46a1      	mov	r9, r4
 8006c92:	eb18 0805 	adds.w	r8, r8, r5
 8006c96:	eb49 0906 	adc.w	r9, r9, r6
 8006c9a:	f04f 0100 	mov.w	r1, #0
 8006c9e:	f04f 0200 	mov.w	r2, #0
 8006ca2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006ca6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006caa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006cae:	4688      	mov	r8, r1
 8006cb0:	4691      	mov	r9, r2
 8006cb2:	eb18 0005 	adds.w	r0, r8, r5
 8006cb6:	eb49 0106 	adc.w	r1, r9, r6
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	461d      	mov	r5, r3
 8006cc0:	f04f 0600 	mov.w	r6, #0
 8006cc4:	196b      	adds	r3, r5, r5
 8006cc6:	eb46 0406 	adc.w	r4, r6, r6
 8006cca:	461a      	mov	r2, r3
 8006ccc:	4623      	mov	r3, r4
 8006cce:	f7f9 faf7 	bl	80002c0 <__aeabi_uldivmod>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	460c      	mov	r4, r1
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	4ba7      	ldr	r3, [pc, #668]	; (8006f78 <UART_SetConfig+0x3a0>)
 8006cda:	fba3 2302 	umull	r2, r3, r3, r2
 8006cde:	095b      	lsrs	r3, r3, #5
 8006ce0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	461d      	mov	r5, r3
 8006ce8:	f04f 0600 	mov.w	r6, #0
 8006cec:	46a9      	mov	r9, r5
 8006cee:	46b2      	mov	sl, r6
 8006cf0:	eb19 0309 	adds.w	r3, r9, r9
 8006cf4:	eb4a 040a 	adc.w	r4, sl, sl
 8006cf8:	4699      	mov	r9, r3
 8006cfa:	46a2      	mov	sl, r4
 8006cfc:	eb19 0905 	adds.w	r9, r9, r5
 8006d00:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d04:	f04f 0100 	mov.w	r1, #0
 8006d08:	f04f 0200 	mov.w	r2, #0
 8006d0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d18:	4689      	mov	r9, r1
 8006d1a:	4692      	mov	sl, r2
 8006d1c:	eb19 0005 	adds.w	r0, r9, r5
 8006d20:	eb4a 0106 	adc.w	r1, sl, r6
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	461d      	mov	r5, r3
 8006d2a:	f04f 0600 	mov.w	r6, #0
 8006d2e:	196b      	adds	r3, r5, r5
 8006d30:	eb46 0406 	adc.w	r4, r6, r6
 8006d34:	461a      	mov	r2, r3
 8006d36:	4623      	mov	r3, r4
 8006d38:	f7f9 fac2 	bl	80002c0 <__aeabi_uldivmod>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	460c      	mov	r4, r1
 8006d40:	461a      	mov	r2, r3
 8006d42:	4b8d      	ldr	r3, [pc, #564]	; (8006f78 <UART_SetConfig+0x3a0>)
 8006d44:	fba3 1302 	umull	r1, r3, r3, r2
 8006d48:	095b      	lsrs	r3, r3, #5
 8006d4a:	2164      	movs	r1, #100	; 0x64
 8006d4c:	fb01 f303 	mul.w	r3, r1, r3
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	00db      	lsls	r3, r3, #3
 8006d54:	3332      	adds	r3, #50	; 0x32
 8006d56:	4a88      	ldr	r2, [pc, #544]	; (8006f78 <UART_SetConfig+0x3a0>)
 8006d58:	fba2 2303 	umull	r2, r3, r2, r3
 8006d5c:	095b      	lsrs	r3, r3, #5
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d64:	4498      	add	r8, r3
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	461d      	mov	r5, r3
 8006d6a:	f04f 0600 	mov.w	r6, #0
 8006d6e:	46a9      	mov	r9, r5
 8006d70:	46b2      	mov	sl, r6
 8006d72:	eb19 0309 	adds.w	r3, r9, r9
 8006d76:	eb4a 040a 	adc.w	r4, sl, sl
 8006d7a:	4699      	mov	r9, r3
 8006d7c:	46a2      	mov	sl, r4
 8006d7e:	eb19 0905 	adds.w	r9, r9, r5
 8006d82:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d86:	f04f 0100 	mov.w	r1, #0
 8006d8a:	f04f 0200 	mov.w	r2, #0
 8006d8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d9a:	4689      	mov	r9, r1
 8006d9c:	4692      	mov	sl, r2
 8006d9e:	eb19 0005 	adds.w	r0, r9, r5
 8006da2:	eb4a 0106 	adc.w	r1, sl, r6
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	461d      	mov	r5, r3
 8006dac:	f04f 0600 	mov.w	r6, #0
 8006db0:	196b      	adds	r3, r5, r5
 8006db2:	eb46 0406 	adc.w	r4, r6, r6
 8006db6:	461a      	mov	r2, r3
 8006db8:	4623      	mov	r3, r4
 8006dba:	f7f9 fa81 	bl	80002c0 <__aeabi_uldivmod>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	460c      	mov	r4, r1
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	4b6c      	ldr	r3, [pc, #432]	; (8006f78 <UART_SetConfig+0x3a0>)
 8006dc6:	fba3 1302 	umull	r1, r3, r3, r2
 8006dca:	095b      	lsrs	r3, r3, #5
 8006dcc:	2164      	movs	r1, #100	; 0x64
 8006dce:	fb01 f303 	mul.w	r3, r1, r3
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	3332      	adds	r3, #50	; 0x32
 8006dd8:	4a67      	ldr	r2, [pc, #412]	; (8006f78 <UART_SetConfig+0x3a0>)
 8006dda:	fba2 2303 	umull	r2, r3, r2, r3
 8006dde:	095b      	lsrs	r3, r3, #5
 8006de0:	f003 0207 	and.w	r2, r3, #7
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4442      	add	r2, r8
 8006dea:	609a      	str	r2, [r3, #8]
 8006dec:	e27d      	b.n	80072ea <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006dee:	f7fe f87f 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 8006df2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	461d      	mov	r5, r3
 8006df8:	f04f 0600 	mov.w	r6, #0
 8006dfc:	46a8      	mov	r8, r5
 8006dfe:	46b1      	mov	r9, r6
 8006e00:	eb18 0308 	adds.w	r3, r8, r8
 8006e04:	eb49 0409 	adc.w	r4, r9, r9
 8006e08:	4698      	mov	r8, r3
 8006e0a:	46a1      	mov	r9, r4
 8006e0c:	eb18 0805 	adds.w	r8, r8, r5
 8006e10:	eb49 0906 	adc.w	r9, r9, r6
 8006e14:	f04f 0100 	mov.w	r1, #0
 8006e18:	f04f 0200 	mov.w	r2, #0
 8006e1c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e20:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e24:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e28:	4688      	mov	r8, r1
 8006e2a:	4691      	mov	r9, r2
 8006e2c:	eb18 0005 	adds.w	r0, r8, r5
 8006e30:	eb49 0106 	adc.w	r1, r9, r6
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	461d      	mov	r5, r3
 8006e3a:	f04f 0600 	mov.w	r6, #0
 8006e3e:	196b      	adds	r3, r5, r5
 8006e40:	eb46 0406 	adc.w	r4, r6, r6
 8006e44:	461a      	mov	r2, r3
 8006e46:	4623      	mov	r3, r4
 8006e48:	f7f9 fa3a 	bl	80002c0 <__aeabi_uldivmod>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	460c      	mov	r4, r1
 8006e50:	461a      	mov	r2, r3
 8006e52:	4b49      	ldr	r3, [pc, #292]	; (8006f78 <UART_SetConfig+0x3a0>)
 8006e54:	fba3 2302 	umull	r2, r3, r3, r2
 8006e58:	095b      	lsrs	r3, r3, #5
 8006e5a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	461d      	mov	r5, r3
 8006e62:	f04f 0600 	mov.w	r6, #0
 8006e66:	46a9      	mov	r9, r5
 8006e68:	46b2      	mov	sl, r6
 8006e6a:	eb19 0309 	adds.w	r3, r9, r9
 8006e6e:	eb4a 040a 	adc.w	r4, sl, sl
 8006e72:	4699      	mov	r9, r3
 8006e74:	46a2      	mov	sl, r4
 8006e76:	eb19 0905 	adds.w	r9, r9, r5
 8006e7a:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e7e:	f04f 0100 	mov.w	r1, #0
 8006e82:	f04f 0200 	mov.w	r2, #0
 8006e86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e92:	4689      	mov	r9, r1
 8006e94:	4692      	mov	sl, r2
 8006e96:	eb19 0005 	adds.w	r0, r9, r5
 8006e9a:	eb4a 0106 	adc.w	r1, sl, r6
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	461d      	mov	r5, r3
 8006ea4:	f04f 0600 	mov.w	r6, #0
 8006ea8:	196b      	adds	r3, r5, r5
 8006eaa:	eb46 0406 	adc.w	r4, r6, r6
 8006eae:	461a      	mov	r2, r3
 8006eb0:	4623      	mov	r3, r4
 8006eb2:	f7f9 fa05 	bl	80002c0 <__aeabi_uldivmod>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	460c      	mov	r4, r1
 8006eba:	461a      	mov	r2, r3
 8006ebc:	4b2e      	ldr	r3, [pc, #184]	; (8006f78 <UART_SetConfig+0x3a0>)
 8006ebe:	fba3 1302 	umull	r1, r3, r3, r2
 8006ec2:	095b      	lsrs	r3, r3, #5
 8006ec4:	2164      	movs	r1, #100	; 0x64
 8006ec6:	fb01 f303 	mul.w	r3, r1, r3
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	00db      	lsls	r3, r3, #3
 8006ece:	3332      	adds	r3, #50	; 0x32
 8006ed0:	4a29      	ldr	r2, [pc, #164]	; (8006f78 <UART_SetConfig+0x3a0>)
 8006ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed6:	095b      	lsrs	r3, r3, #5
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ede:	4498      	add	r8, r3
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	461d      	mov	r5, r3
 8006ee4:	f04f 0600 	mov.w	r6, #0
 8006ee8:	46a9      	mov	r9, r5
 8006eea:	46b2      	mov	sl, r6
 8006eec:	eb19 0309 	adds.w	r3, r9, r9
 8006ef0:	eb4a 040a 	adc.w	r4, sl, sl
 8006ef4:	4699      	mov	r9, r3
 8006ef6:	46a2      	mov	sl, r4
 8006ef8:	eb19 0905 	adds.w	r9, r9, r5
 8006efc:	eb4a 0a06 	adc.w	sl, sl, r6
 8006f00:	f04f 0100 	mov.w	r1, #0
 8006f04:	f04f 0200 	mov.w	r2, #0
 8006f08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f14:	4689      	mov	r9, r1
 8006f16:	4692      	mov	sl, r2
 8006f18:	eb19 0005 	adds.w	r0, r9, r5
 8006f1c:	eb4a 0106 	adc.w	r1, sl, r6
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	461d      	mov	r5, r3
 8006f26:	f04f 0600 	mov.w	r6, #0
 8006f2a:	196b      	adds	r3, r5, r5
 8006f2c:	eb46 0406 	adc.w	r4, r6, r6
 8006f30:	461a      	mov	r2, r3
 8006f32:	4623      	mov	r3, r4
 8006f34:	f7f9 f9c4 	bl	80002c0 <__aeabi_uldivmod>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	4b0e      	ldr	r3, [pc, #56]	; (8006f78 <UART_SetConfig+0x3a0>)
 8006f40:	fba3 1302 	umull	r1, r3, r3, r2
 8006f44:	095b      	lsrs	r3, r3, #5
 8006f46:	2164      	movs	r1, #100	; 0x64
 8006f48:	fb01 f303 	mul.w	r3, r1, r3
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	3332      	adds	r3, #50	; 0x32
 8006f52:	4a09      	ldr	r2, [pc, #36]	; (8006f78 <UART_SetConfig+0x3a0>)
 8006f54:	fba2 2303 	umull	r2, r3, r2, r3
 8006f58:	095b      	lsrs	r3, r3, #5
 8006f5a:	f003 0207 	and.w	r2, r3, #7
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4442      	add	r2, r8
 8006f64:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006f66:	e1c0      	b.n	80072ea <UART_SetConfig+0x712>
 8006f68:	40011000 	.word	0x40011000
 8006f6c:	40011400 	.word	0x40011400
 8006f70:	40011800 	.word	0x40011800
 8006f74:	40011c00 	.word	0x40011c00
 8006f78:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4adc      	ldr	r2, [pc, #880]	; (80072f4 <UART_SetConfig+0x71c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d00f      	beq.n	8006fa6 <UART_SetConfig+0x3ce>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4adb      	ldr	r2, [pc, #876]	; (80072f8 <UART_SetConfig+0x720>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d00a      	beq.n	8006fa6 <UART_SetConfig+0x3ce>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4ad9      	ldr	r2, [pc, #868]	; (80072fc <UART_SetConfig+0x724>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d005      	beq.n	8006fa6 <UART_SetConfig+0x3ce>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4ad8      	ldr	r2, [pc, #864]	; (8007300 <UART_SetConfig+0x728>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	f040 80d1 	bne.w	8007148 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fa6:	f7fd ffb7 	bl	8004f18 <HAL_RCC_GetPCLK2Freq>
 8006faa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	469a      	mov	sl, r3
 8006fb0:	f04f 0b00 	mov.w	fp, #0
 8006fb4:	46d0      	mov	r8, sl
 8006fb6:	46d9      	mov	r9, fp
 8006fb8:	eb18 0308 	adds.w	r3, r8, r8
 8006fbc:	eb49 0409 	adc.w	r4, r9, r9
 8006fc0:	4698      	mov	r8, r3
 8006fc2:	46a1      	mov	r9, r4
 8006fc4:	eb18 080a 	adds.w	r8, r8, sl
 8006fc8:	eb49 090b 	adc.w	r9, r9, fp
 8006fcc:	f04f 0100 	mov.w	r1, #0
 8006fd0:	f04f 0200 	mov.w	r2, #0
 8006fd4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006fd8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006fdc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006fe0:	4688      	mov	r8, r1
 8006fe2:	4691      	mov	r9, r2
 8006fe4:	eb1a 0508 	adds.w	r5, sl, r8
 8006fe8:	eb4b 0609 	adc.w	r6, fp, r9
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	f04f 0200 	mov.w	r2, #0
 8006ff6:	f04f 0300 	mov.w	r3, #0
 8006ffa:	f04f 0400 	mov.w	r4, #0
 8006ffe:	0094      	lsls	r4, r2, #2
 8007000:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007004:	008b      	lsls	r3, r1, #2
 8007006:	461a      	mov	r2, r3
 8007008:	4623      	mov	r3, r4
 800700a:	4628      	mov	r0, r5
 800700c:	4631      	mov	r1, r6
 800700e:	f7f9 f957 	bl	80002c0 <__aeabi_uldivmod>
 8007012:	4603      	mov	r3, r0
 8007014:	460c      	mov	r4, r1
 8007016:	461a      	mov	r2, r3
 8007018:	4bba      	ldr	r3, [pc, #744]	; (8007304 <UART_SetConfig+0x72c>)
 800701a:	fba3 2302 	umull	r2, r3, r3, r2
 800701e:	095b      	lsrs	r3, r3, #5
 8007020:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	469b      	mov	fp, r3
 8007028:	f04f 0c00 	mov.w	ip, #0
 800702c:	46d9      	mov	r9, fp
 800702e:	46e2      	mov	sl, ip
 8007030:	eb19 0309 	adds.w	r3, r9, r9
 8007034:	eb4a 040a 	adc.w	r4, sl, sl
 8007038:	4699      	mov	r9, r3
 800703a:	46a2      	mov	sl, r4
 800703c:	eb19 090b 	adds.w	r9, r9, fp
 8007040:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007044:	f04f 0100 	mov.w	r1, #0
 8007048:	f04f 0200 	mov.w	r2, #0
 800704c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007050:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007054:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007058:	4689      	mov	r9, r1
 800705a:	4692      	mov	sl, r2
 800705c:	eb1b 0509 	adds.w	r5, fp, r9
 8007060:	eb4c 060a 	adc.w	r6, ip, sl
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	4619      	mov	r1, r3
 800706a:	f04f 0200 	mov.w	r2, #0
 800706e:	f04f 0300 	mov.w	r3, #0
 8007072:	f04f 0400 	mov.w	r4, #0
 8007076:	0094      	lsls	r4, r2, #2
 8007078:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800707c:	008b      	lsls	r3, r1, #2
 800707e:	461a      	mov	r2, r3
 8007080:	4623      	mov	r3, r4
 8007082:	4628      	mov	r0, r5
 8007084:	4631      	mov	r1, r6
 8007086:	f7f9 f91b 	bl	80002c0 <__aeabi_uldivmod>
 800708a:	4603      	mov	r3, r0
 800708c:	460c      	mov	r4, r1
 800708e:	461a      	mov	r2, r3
 8007090:	4b9c      	ldr	r3, [pc, #624]	; (8007304 <UART_SetConfig+0x72c>)
 8007092:	fba3 1302 	umull	r1, r3, r3, r2
 8007096:	095b      	lsrs	r3, r3, #5
 8007098:	2164      	movs	r1, #100	; 0x64
 800709a:	fb01 f303 	mul.w	r3, r1, r3
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	011b      	lsls	r3, r3, #4
 80070a2:	3332      	adds	r3, #50	; 0x32
 80070a4:	4a97      	ldr	r2, [pc, #604]	; (8007304 <UART_SetConfig+0x72c>)
 80070a6:	fba2 2303 	umull	r2, r3, r2, r3
 80070aa:	095b      	lsrs	r3, r3, #5
 80070ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070b0:	4498      	add	r8, r3
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	469b      	mov	fp, r3
 80070b6:	f04f 0c00 	mov.w	ip, #0
 80070ba:	46d9      	mov	r9, fp
 80070bc:	46e2      	mov	sl, ip
 80070be:	eb19 0309 	adds.w	r3, r9, r9
 80070c2:	eb4a 040a 	adc.w	r4, sl, sl
 80070c6:	4699      	mov	r9, r3
 80070c8:	46a2      	mov	sl, r4
 80070ca:	eb19 090b 	adds.w	r9, r9, fp
 80070ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80070d2:	f04f 0100 	mov.w	r1, #0
 80070d6:	f04f 0200 	mov.w	r2, #0
 80070da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070e6:	4689      	mov	r9, r1
 80070e8:	4692      	mov	sl, r2
 80070ea:	eb1b 0509 	adds.w	r5, fp, r9
 80070ee:	eb4c 060a 	adc.w	r6, ip, sl
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	4619      	mov	r1, r3
 80070f8:	f04f 0200 	mov.w	r2, #0
 80070fc:	f04f 0300 	mov.w	r3, #0
 8007100:	f04f 0400 	mov.w	r4, #0
 8007104:	0094      	lsls	r4, r2, #2
 8007106:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800710a:	008b      	lsls	r3, r1, #2
 800710c:	461a      	mov	r2, r3
 800710e:	4623      	mov	r3, r4
 8007110:	4628      	mov	r0, r5
 8007112:	4631      	mov	r1, r6
 8007114:	f7f9 f8d4 	bl	80002c0 <__aeabi_uldivmod>
 8007118:	4603      	mov	r3, r0
 800711a:	460c      	mov	r4, r1
 800711c:	461a      	mov	r2, r3
 800711e:	4b79      	ldr	r3, [pc, #484]	; (8007304 <UART_SetConfig+0x72c>)
 8007120:	fba3 1302 	umull	r1, r3, r3, r2
 8007124:	095b      	lsrs	r3, r3, #5
 8007126:	2164      	movs	r1, #100	; 0x64
 8007128:	fb01 f303 	mul.w	r3, r1, r3
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	011b      	lsls	r3, r3, #4
 8007130:	3332      	adds	r3, #50	; 0x32
 8007132:	4a74      	ldr	r2, [pc, #464]	; (8007304 <UART_SetConfig+0x72c>)
 8007134:	fba2 2303 	umull	r2, r3, r2, r3
 8007138:	095b      	lsrs	r3, r3, #5
 800713a:	f003 020f 	and.w	r2, r3, #15
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4442      	add	r2, r8
 8007144:	609a      	str	r2, [r3, #8]
 8007146:	e0d0      	b.n	80072ea <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007148:	f7fd fed2 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 800714c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	469a      	mov	sl, r3
 8007152:	f04f 0b00 	mov.w	fp, #0
 8007156:	46d0      	mov	r8, sl
 8007158:	46d9      	mov	r9, fp
 800715a:	eb18 0308 	adds.w	r3, r8, r8
 800715e:	eb49 0409 	adc.w	r4, r9, r9
 8007162:	4698      	mov	r8, r3
 8007164:	46a1      	mov	r9, r4
 8007166:	eb18 080a 	adds.w	r8, r8, sl
 800716a:	eb49 090b 	adc.w	r9, r9, fp
 800716e:	f04f 0100 	mov.w	r1, #0
 8007172:	f04f 0200 	mov.w	r2, #0
 8007176:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800717a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800717e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007182:	4688      	mov	r8, r1
 8007184:	4691      	mov	r9, r2
 8007186:	eb1a 0508 	adds.w	r5, sl, r8
 800718a:	eb4b 0609 	adc.w	r6, fp, r9
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	4619      	mov	r1, r3
 8007194:	f04f 0200 	mov.w	r2, #0
 8007198:	f04f 0300 	mov.w	r3, #0
 800719c:	f04f 0400 	mov.w	r4, #0
 80071a0:	0094      	lsls	r4, r2, #2
 80071a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80071a6:	008b      	lsls	r3, r1, #2
 80071a8:	461a      	mov	r2, r3
 80071aa:	4623      	mov	r3, r4
 80071ac:	4628      	mov	r0, r5
 80071ae:	4631      	mov	r1, r6
 80071b0:	f7f9 f886 	bl	80002c0 <__aeabi_uldivmod>
 80071b4:	4603      	mov	r3, r0
 80071b6:	460c      	mov	r4, r1
 80071b8:	461a      	mov	r2, r3
 80071ba:	4b52      	ldr	r3, [pc, #328]	; (8007304 <UART_SetConfig+0x72c>)
 80071bc:	fba3 2302 	umull	r2, r3, r3, r2
 80071c0:	095b      	lsrs	r3, r3, #5
 80071c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	469b      	mov	fp, r3
 80071ca:	f04f 0c00 	mov.w	ip, #0
 80071ce:	46d9      	mov	r9, fp
 80071d0:	46e2      	mov	sl, ip
 80071d2:	eb19 0309 	adds.w	r3, r9, r9
 80071d6:	eb4a 040a 	adc.w	r4, sl, sl
 80071da:	4699      	mov	r9, r3
 80071dc:	46a2      	mov	sl, r4
 80071de:	eb19 090b 	adds.w	r9, r9, fp
 80071e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80071e6:	f04f 0100 	mov.w	r1, #0
 80071ea:	f04f 0200 	mov.w	r2, #0
 80071ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80071f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071fa:	4689      	mov	r9, r1
 80071fc:	4692      	mov	sl, r2
 80071fe:	eb1b 0509 	adds.w	r5, fp, r9
 8007202:	eb4c 060a 	adc.w	r6, ip, sl
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	4619      	mov	r1, r3
 800720c:	f04f 0200 	mov.w	r2, #0
 8007210:	f04f 0300 	mov.w	r3, #0
 8007214:	f04f 0400 	mov.w	r4, #0
 8007218:	0094      	lsls	r4, r2, #2
 800721a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800721e:	008b      	lsls	r3, r1, #2
 8007220:	461a      	mov	r2, r3
 8007222:	4623      	mov	r3, r4
 8007224:	4628      	mov	r0, r5
 8007226:	4631      	mov	r1, r6
 8007228:	f7f9 f84a 	bl	80002c0 <__aeabi_uldivmod>
 800722c:	4603      	mov	r3, r0
 800722e:	460c      	mov	r4, r1
 8007230:	461a      	mov	r2, r3
 8007232:	4b34      	ldr	r3, [pc, #208]	; (8007304 <UART_SetConfig+0x72c>)
 8007234:	fba3 1302 	umull	r1, r3, r3, r2
 8007238:	095b      	lsrs	r3, r3, #5
 800723a:	2164      	movs	r1, #100	; 0x64
 800723c:	fb01 f303 	mul.w	r3, r1, r3
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	3332      	adds	r3, #50	; 0x32
 8007246:	4a2f      	ldr	r2, [pc, #188]	; (8007304 <UART_SetConfig+0x72c>)
 8007248:	fba2 2303 	umull	r2, r3, r2, r3
 800724c:	095b      	lsrs	r3, r3, #5
 800724e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007252:	4498      	add	r8, r3
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	469b      	mov	fp, r3
 8007258:	f04f 0c00 	mov.w	ip, #0
 800725c:	46d9      	mov	r9, fp
 800725e:	46e2      	mov	sl, ip
 8007260:	eb19 0309 	adds.w	r3, r9, r9
 8007264:	eb4a 040a 	adc.w	r4, sl, sl
 8007268:	4699      	mov	r9, r3
 800726a:	46a2      	mov	sl, r4
 800726c:	eb19 090b 	adds.w	r9, r9, fp
 8007270:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007274:	f04f 0100 	mov.w	r1, #0
 8007278:	f04f 0200 	mov.w	r2, #0
 800727c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007280:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007284:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007288:	4689      	mov	r9, r1
 800728a:	4692      	mov	sl, r2
 800728c:	eb1b 0509 	adds.w	r5, fp, r9
 8007290:	eb4c 060a 	adc.w	r6, ip, sl
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	4619      	mov	r1, r3
 800729a:	f04f 0200 	mov.w	r2, #0
 800729e:	f04f 0300 	mov.w	r3, #0
 80072a2:	f04f 0400 	mov.w	r4, #0
 80072a6:	0094      	lsls	r4, r2, #2
 80072a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80072ac:	008b      	lsls	r3, r1, #2
 80072ae:	461a      	mov	r2, r3
 80072b0:	4623      	mov	r3, r4
 80072b2:	4628      	mov	r0, r5
 80072b4:	4631      	mov	r1, r6
 80072b6:	f7f9 f803 	bl	80002c0 <__aeabi_uldivmod>
 80072ba:	4603      	mov	r3, r0
 80072bc:	460c      	mov	r4, r1
 80072be:	461a      	mov	r2, r3
 80072c0:	4b10      	ldr	r3, [pc, #64]	; (8007304 <UART_SetConfig+0x72c>)
 80072c2:	fba3 1302 	umull	r1, r3, r3, r2
 80072c6:	095b      	lsrs	r3, r3, #5
 80072c8:	2164      	movs	r1, #100	; 0x64
 80072ca:	fb01 f303 	mul.w	r3, r1, r3
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	011b      	lsls	r3, r3, #4
 80072d2:	3332      	adds	r3, #50	; 0x32
 80072d4:	4a0b      	ldr	r2, [pc, #44]	; (8007304 <UART_SetConfig+0x72c>)
 80072d6:	fba2 2303 	umull	r2, r3, r2, r3
 80072da:	095b      	lsrs	r3, r3, #5
 80072dc:	f003 020f 	and.w	r2, r3, #15
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4442      	add	r2, r8
 80072e6:	609a      	str	r2, [r3, #8]
}
 80072e8:	e7ff      	b.n	80072ea <UART_SetConfig+0x712>
 80072ea:	bf00      	nop
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f4:	40011000 	.word	0x40011000
 80072f8:	40011400 	.word	0x40011400
 80072fc:	40011800 	.word	0x40011800
 8007300:	40011c00 	.word	0x40011c00
 8007304:	51eb851f 	.word	0x51eb851f

08007308 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007320:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	4b2f      	ldr	r3, [pc, #188]	; (80073e4 <FSMC_NORSRAM_Init+0xdc>)
 8007326:	4013      	ands	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007332:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007338:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800733e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007344:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800734a:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007350:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007356:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800735c:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007362:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8007368:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 800736e:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8007374:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800737a:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	4313      	orrs	r3, r2
 8007380:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	2b08      	cmp	r3, #8
 8007388:	d103      	bne.n	8007392 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007390:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68f9      	ldr	r1, [r7, #12]
 800739a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073a6:	d10a      	bne.n	80073be <FSMC_NORSRAM_Init+0xb6>
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d006      	beq.n	80073be <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b8:	431a      	orrs	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d006      	beq.n	80073d4 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	ffc00480 	.word	0xffc00480

080073e8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	1c5a      	adds	r2, r3, #1
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007402:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800740a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007416:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800741e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007426:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	3b01      	subs	r3, #1
 800742e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007430:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	3b02      	subs	r3, #2
 8007438:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800743a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007440:	4313      	orrs	r3, r2
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	4313      	orrs	r3, r2
 8007446:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	1c5a      	adds	r2, r3, #1
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6979      	ldr	r1, [r7, #20]
 8007450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800745c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007460:	d10e      	bne.n	8007480 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800746a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	3b01      	subs	r3, #1
 8007472:	051b      	lsls	r3, r3, #20
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	4313      	orrs	r3, r2
 8007478:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	371c      	adds	r7, #28
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
	...

08007490 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
 800749c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074a8:	d122      	bne.n	80074f0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	4b15      	ldr	r3, [pc, #84]	; (800750c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80074b8:	4013      	ands	r3, r2
 80074ba:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80074c6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80074ce:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80074d6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80074dc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	6979      	ldr	r1, [r7, #20]
 80074ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80074ee:	e005      	b.n	80074fc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80074f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	371c      	adds	r7, #28
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	cff00000 	.word	0xcff00000

08007510 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007510:	b084      	sub	sp, #16
 8007512:	b480      	push	{r7}
 8007514:	b085      	sub	sp, #20
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	f107 001c 	add.w	r0, r7, #28
 800751e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007526:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007528:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800752a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800752e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007530:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007532:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007536:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800753a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	4313      	orrs	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800754a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	431a      	orrs	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	b004      	add	sp, #16
 8007564:	4770      	bx	lr

08007566 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007574:	4618      	mov	r0, r3
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b082      	sub	sp, #8
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2203      	movs	r2, #3
 80075ae:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80075b0:	2002      	movs	r0, #2
 80075b2:	f7fa ffaf 	bl	8002514 <HAL_Delay>
  
  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0303 	and.w	r3, r3, #3
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80075fa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007600:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007606:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	4313      	orrs	r3, r2
 800760c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007616:	f023 030f 	bic.w	r3, r3, #15
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	431a      	orrs	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	b2db      	uxtb	r3, r3
}
 800763e:	4618      	mov	r0, r3
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800764a:	b480      	push	{r7}
 800764c:	b085      	sub	sp, #20
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3314      	adds	r3, #20
 8007658:	461a      	mov	r2, r3
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	4413      	add	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
}  
 8007664:	4618      	mov	r0, r3
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800767a:	2300      	movs	r3, #0
 800767c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007696:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800769c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80076a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ae:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	431a      	orrs	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80076ba:	2300      	movs	r3, #0

}
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b088      	sub	sp, #32
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80076d6:	2310      	movs	r3, #16
 80076d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80076da:	2340      	movs	r3, #64	; 0x40
 80076dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076de:	2300      	movs	r3, #0
 80076e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076e8:	f107 0308 	add.w	r3, r7, #8
 80076ec:	4619      	mov	r1, r3
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7ff ff74 	bl	80075dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80076f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076f8:	2110      	movs	r1, #16
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f9fe 	bl	8007afc <SDMMC_GetCmdResp1>
 8007700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007702:	69fb      	ldr	r3, [r7, #28]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3720      	adds	r7, #32
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b088      	sub	sp, #32
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800771a:	2311      	movs	r3, #17
 800771c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800771e:	2340      	movs	r3, #64	; 0x40
 8007720:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007722:	2300      	movs	r3, #0
 8007724:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800772a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800772c:	f107 0308 	add.w	r3, r7, #8
 8007730:	4619      	mov	r1, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff ff52 	bl	80075dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007738:	f241 3288 	movw	r2, #5000	; 0x1388
 800773c:	2111      	movs	r1, #17
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f9dc 	bl	8007afc <SDMMC_GetCmdResp1>
 8007744:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007746:	69fb      	ldr	r3, [r7, #28]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3720      	adds	r7, #32
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b088      	sub	sp, #32
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800775e:	2312      	movs	r3, #18
 8007760:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007762:	2340      	movs	r3, #64	; 0x40
 8007764:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007766:	2300      	movs	r3, #0
 8007768:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800776a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800776e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007770:	f107 0308 	add.w	r3, r7, #8
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7ff ff30 	bl	80075dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800777c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007780:	2112      	movs	r1, #18
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f9ba 	bl	8007afc <SDMMC_GetCmdResp1>
 8007788:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800778a:	69fb      	ldr	r3, [r7, #28]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3720      	adds	r7, #32
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b088      	sub	sp, #32
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80077a2:	2318      	movs	r3, #24
 80077a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077a6:	2340      	movs	r3, #64	; 0x40
 80077a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077aa:	2300      	movs	r3, #0
 80077ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077b4:	f107 0308 	add.w	r3, r7, #8
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7ff ff0e 	bl	80075dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80077c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077c4:	2118      	movs	r1, #24
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f998 	bl	8007afc <SDMMC_GetCmdResp1>
 80077cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077ce:	69fb      	ldr	r3, [r7, #28]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3720      	adds	r7, #32
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b088      	sub	sp, #32
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80077e6:	2319      	movs	r3, #25
 80077e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077ea:	2340      	movs	r3, #64	; 0x40
 80077ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077ee:	2300      	movs	r3, #0
 80077f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077f8:	f107 0308 	add.w	r3, r7, #8
 80077fc:	4619      	mov	r1, r3
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7ff feec 	bl	80075dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007804:	f241 3288 	movw	r2, #5000	; 0x1388
 8007808:	2119      	movs	r1, #25
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f976 	bl	8007afc <SDMMC_GetCmdResp1>
 8007810:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007812:	69fb      	ldr	r3, [r7, #28]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3720      	adds	r7, #32
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007828:	230c      	movs	r3, #12
 800782a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800782c:	2340      	movs	r3, #64	; 0x40
 800782e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007830:	2300      	movs	r3, #0
 8007832:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007838:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800783a:	f107 0308 	add.w	r3, r7, #8
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff fecb 	bl	80075dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007846:	4a05      	ldr	r2, [pc, #20]	; (800785c <SDMMC_CmdStopTransfer+0x40>)
 8007848:	210c      	movs	r1, #12
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f956 	bl	8007afc <SDMMC_GetCmdResp1>
 8007850:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007852:	69fb      	ldr	r3, [r7, #28]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3720      	adds	r7, #32
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	05f5e100 	.word	0x05f5e100

08007860 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b08a      	sub	sp, #40	; 0x28
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007870:	2307      	movs	r3, #7
 8007872:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007874:	2340      	movs	r3, #64	; 0x40
 8007876:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007878:	2300      	movs	r3, #0
 800787a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800787c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007880:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007882:	f107 0310 	add.w	r3, r7, #16
 8007886:	4619      	mov	r1, r3
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f7ff fea7 	bl	80075dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800788e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007892:	2107      	movs	r1, #7
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 f931 	bl	8007afc <SDMMC_GetCmdResp1>
 800789a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3728      	adds	r7, #40	; 0x28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b088      	sub	sp, #32
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80078b6:	2300      	movs	r3, #0
 80078b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078ba:	2300      	movs	r3, #0
 80078bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078c4:	f107 0308 	add.w	r3, r7, #8
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7ff fe86 	bl	80075dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f8eb 	bl	8007aac <SDMMC_GetCmdError>
 80078d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078d8:	69fb      	ldr	r3, [r7, #28]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3720      	adds	r7, #32
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b088      	sub	sp, #32
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80078ea:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80078ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80078f0:	2308      	movs	r3, #8
 80078f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078f4:	2340      	movs	r3, #64	; 0x40
 80078f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078f8:	2300      	movs	r3, #0
 80078fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007900:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007902:	f107 0308 	add.w	r3, r7, #8
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7ff fe67 	bl	80075dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fad4 	bl	8007ebc <SDMMC_GetCmdResp7>
 8007914:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007916:	69fb      	ldr	r3, [r7, #28]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3720      	adds	r7, #32
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800792e:	2337      	movs	r3, #55	; 0x37
 8007930:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007932:	2340      	movs	r3, #64	; 0x40
 8007934:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007936:	2300      	movs	r3, #0
 8007938:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800793a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800793e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007940:	f107 0308 	add.w	r3, r7, #8
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7ff fe48 	bl	80075dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800794c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007950:	2137      	movs	r1, #55	; 0x37
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f8d2 	bl	8007afc <SDMMC_GetCmdResp1>
 8007958:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800795a:	69fb      	ldr	r3, [r7, #28]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3720      	adds	r7, #32
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b088      	sub	sp, #32
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007978:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800797a:	2329      	movs	r3, #41	; 0x29
 800797c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800797e:	2340      	movs	r3, #64	; 0x40
 8007980:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007982:	2300      	movs	r3, #0
 8007984:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800798a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800798c:	f107 0308 	add.w	r3, r7, #8
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7ff fe22 	bl	80075dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f9e1 	bl	8007d60 <SDMMC_GetCmdResp3>
 800799e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079a0:	69fb      	ldr	r3, [r7, #28]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3720      	adds	r7, #32
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b088      	sub	sp, #32
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80079b6:	2302      	movs	r3, #2
 80079b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80079ba:	23c0      	movs	r3, #192	; 0xc0
 80079bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079be:	2300      	movs	r3, #0
 80079c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079c8:	f107 0308 	add.w	r3, r7, #8
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7ff fe04 	bl	80075dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f97d 	bl	8007cd4 <SDMMC_GetCmdResp2>
 80079da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079dc:	69fb      	ldr	r3, [r7, #28]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3720      	adds	r7, #32
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b088      	sub	sp, #32
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80079f4:	2309      	movs	r3, #9
 80079f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80079f8:	23c0      	movs	r3, #192	; 0xc0
 80079fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079fc:	2300      	movs	r3, #0
 80079fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a06:	f107 0308 	add.w	r3, r7, #8
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7ff fde5 	bl	80075dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f95e 	bl	8007cd4 <SDMMC_GetCmdResp2>
 8007a18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a1a:	69fb      	ldr	r3, [r7, #28]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3720      	adds	r7, #32
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007a32:	2303      	movs	r3, #3
 8007a34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a36:	2340      	movs	r3, #64	; 0x40
 8007a38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a44:	f107 0308 	add.w	r3, r7, #8
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7ff fdc6 	bl	80075dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	2103      	movs	r1, #3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f9bd 	bl	8007dd4 <SDMMC_GetCmdResp6>
 8007a5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a5c:	69fb      	ldr	r3, [r7, #28]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3720      	adds	r7, #32
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b088      	sub	sp, #32
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007a74:	230d      	movs	r3, #13
 8007a76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a78:	2340      	movs	r3, #64	; 0x40
 8007a7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a86:	f107 0308 	add.w	r3, r7, #8
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7ff fda5 	bl	80075dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a96:	210d      	movs	r1, #13
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f82f 	bl	8007afc <SDMMC_GetCmdResp1>
 8007a9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007aa0:	69fb      	ldr	r3, [r7, #28]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3720      	adds	r7, #32
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
	...

08007aac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007aac:	b490      	push	{r4, r7}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ab4:	4b0f      	ldr	r3, [pc, #60]	; (8007af4 <SDMMC_GetCmdError+0x48>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a0f      	ldr	r2, [pc, #60]	; (8007af8 <SDMMC_GetCmdError+0x4c>)
 8007aba:	fba2 2303 	umull	r2, r3, r2, r3
 8007abe:	0a5b      	lsrs	r3, r3, #9
 8007ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007ac8:	4623      	mov	r3, r4
 8007aca:	1e5c      	subs	r4, r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d102      	bne.n	8007ad6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ad0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ad4:	e009      	b.n	8007aea <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d0f2      	beq.n	8007ac8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	22c5      	movs	r2, #197	; 0xc5
 8007ae6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bc90      	pop	{r4, r7}
 8007af2:	4770      	bx	lr
 8007af4:	20000000 	.word	0x20000000
 8007af8:	10624dd3 	.word	0x10624dd3

08007afc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007afc:	b590      	push	{r4, r7, lr}
 8007afe:	b087      	sub	sp, #28
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	460b      	mov	r3, r1
 8007b06:	607a      	str	r2, [r7, #4]
 8007b08:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b0a:	4b6f      	ldr	r3, [pc, #444]	; (8007cc8 <SDMMC_GetCmdResp1+0x1cc>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a6f      	ldr	r2, [pc, #444]	; (8007ccc <SDMMC_GetCmdResp1+0x1d0>)
 8007b10:	fba2 2303 	umull	r2, r3, r2, r3
 8007b14:	0a5b      	lsrs	r3, r3, #9
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007b1c:	4623      	mov	r3, r4
 8007b1e:	1e5c      	subs	r4, r3, #1
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d102      	bne.n	8007b2a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b28:	e0c9      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d0f0      	beq.n	8007b1c <SDMMC_GetCmdResp1+0x20>
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1eb      	bne.n	8007b1c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d004      	beq.n	8007b5a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2204      	movs	r2, #4
 8007b54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b56:	2304      	movs	r3, #4
 8007b58:	e0b1      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d004      	beq.n	8007b70 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e0a6      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	22c5      	movs	r2, #197	; 0xc5
 8007b74:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f7ff fd5a 	bl	8007630 <SDIO_GetCommandResponse>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	461a      	mov	r2, r3
 8007b80:	7afb      	ldrb	r3, [r7, #11]
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d001      	beq.n	8007b8a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e099      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f7ff fd5c 	bl	800764a <SDIO_GetResponse>
 8007b92:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	4b4e      	ldr	r3, [pc, #312]	; (8007cd0 <SDMMC_GetCmdResp1+0x1d4>)
 8007b98:	4013      	ands	r3, r2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e08d      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	da02      	bge.n	8007bae <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007ba8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007bac:	e087      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007bb8:	2340      	movs	r3, #64	; 0x40
 8007bba:	e080      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d001      	beq.n	8007bca <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007bc6:	2380      	movs	r3, #128	; 0x80
 8007bc8:	e079      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d002      	beq.n	8007bda <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bd8:	e071      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d002      	beq.n	8007bea <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007be4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007be8:	e069      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bf8:	e061      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d002      	beq.n	8007c0a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007c04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c08:	e059      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c18:	e051      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d002      	beq.n	8007c2a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007c24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c28:	e049      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007c34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c38:	e041      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8007c44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c48:	e039      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d002      	beq.n	8007c5a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007c54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c58:	e031      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007c64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007c68:	e029      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007c74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c78:	e021      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007c84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007c88:	e019      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007c94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007c98:	e011      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007ca4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007ca8:	e009      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	f003 0308 	and.w	r3, r3, #8
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007cb4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007cb8:	e001      	b.n	8007cbe <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007cba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	371c      	adds	r7, #28
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd90      	pop	{r4, r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20000000 	.word	0x20000000
 8007ccc:	10624dd3 	.word	0x10624dd3
 8007cd0:	fdffe008 	.word	0xfdffe008

08007cd4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007cd4:	b490      	push	{r4, r7}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007cdc:	4b1e      	ldr	r3, [pc, #120]	; (8007d58 <SDMMC_GetCmdResp2+0x84>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a1e      	ldr	r2, [pc, #120]	; (8007d5c <SDMMC_GetCmdResp2+0x88>)
 8007ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce6:	0a5b      	lsrs	r3, r3, #9
 8007ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007cf0:	4623      	mov	r3, r4
 8007cf2:	1e5c      	subs	r4, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d102      	bne.n	8007cfe <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007cf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007cfc:	e026      	b.n	8007d4c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d02:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d0f0      	beq.n	8007cf0 <SDMMC_GetCmdResp2+0x1c>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1eb      	bne.n	8007cf0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d004      	beq.n	8007d2e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2204      	movs	r2, #4
 8007d28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d2a:	2304      	movs	r3, #4
 8007d2c:	e00e      	b.n	8007d4c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d004      	beq.n	8007d44 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e003      	b.n	8007d4c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	22c5      	movs	r2, #197	; 0xc5
 8007d48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bc90      	pop	{r4, r7}
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	20000000 	.word	0x20000000
 8007d5c:	10624dd3 	.word	0x10624dd3

08007d60 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007d60:	b490      	push	{r4, r7}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d68:	4b18      	ldr	r3, [pc, #96]	; (8007dcc <SDMMC_GetCmdResp3+0x6c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a18      	ldr	r2, [pc, #96]	; (8007dd0 <SDMMC_GetCmdResp3+0x70>)
 8007d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d72:	0a5b      	lsrs	r3, r3, #9
 8007d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d78:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007d7c:	4623      	mov	r3, r4
 8007d7e:	1e5c      	subs	r4, r3, #1
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d102      	bne.n	8007d8a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d88:	e01b      	b.n	8007dc2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d8e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d0f0      	beq.n	8007d7c <SDMMC_GetCmdResp3+0x1c>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1eb      	bne.n	8007d7c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da8:	f003 0304 	and.w	r3, r3, #4
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d004      	beq.n	8007dba <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2204      	movs	r2, #4
 8007db4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007db6:	2304      	movs	r3, #4
 8007db8:	e003      	b.n	8007dc2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	22c5      	movs	r2, #197	; 0xc5
 8007dbe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bc90      	pop	{r4, r7}
 8007dca:	4770      	bx	lr
 8007dcc:	20000000 	.word	0x20000000
 8007dd0:	10624dd3 	.word	0x10624dd3

08007dd4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007dd4:	b590      	push	{r4, r7, lr}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	607a      	str	r2, [r7, #4]
 8007de0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007de2:	4b34      	ldr	r3, [pc, #208]	; (8007eb4 <SDMMC_GetCmdResp6+0xe0>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a34      	ldr	r2, [pc, #208]	; (8007eb8 <SDMMC_GetCmdResp6+0xe4>)
 8007de8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dec:	0a5b      	lsrs	r3, r3, #9
 8007dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8007df2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007df6:	4623      	mov	r3, r4
 8007df8:	1e5c      	subs	r4, r3, #1
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d102      	bne.n	8007e04 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007dfe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e02:	e052      	b.n	8007eaa <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e08:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d0f0      	beq.n	8007df6 <SDMMC_GetCmdResp6+0x22>
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1eb      	bne.n	8007df6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e22:	f003 0304 	and.w	r3, r3, #4
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d004      	beq.n	8007e34 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2204      	movs	r2, #4
 8007e2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e30:	2304      	movs	r3, #4
 8007e32:	e03a      	b.n	8007eaa <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d004      	beq.n	8007e4a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2201      	movs	r2, #1
 8007e44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e02f      	b.n	8007eaa <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f7ff fbf0 	bl	8007630 <SDIO_GetCommandResponse>
 8007e50:	4603      	mov	r3, r0
 8007e52:	461a      	mov	r2, r3
 8007e54:	7afb      	ldrb	r3, [r7, #11]
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d001      	beq.n	8007e5e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e025      	b.n	8007eaa <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	22c5      	movs	r2, #197	; 0xc5
 8007e62:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007e64:	2100      	movs	r1, #0
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f7ff fbef 	bl	800764a <SDIO_GetResponse>
 8007e6c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d106      	bne.n	8007e86 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	0c1b      	lsrs	r3, r3, #16
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007e82:	2300      	movs	r3, #0
 8007e84:	e011      	b.n	8007eaa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d002      	beq.n	8007e96 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e94:	e009      	b.n	8007eaa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d002      	beq.n	8007ea6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ea4:	e001      	b.n	8007eaa <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007ea6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	371c      	adds	r7, #28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd90      	pop	{r4, r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	20000000 	.word	0x20000000
 8007eb8:	10624dd3 	.word	0x10624dd3

08007ebc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007ebc:	b490      	push	{r4, r7}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ec4:	4b21      	ldr	r3, [pc, #132]	; (8007f4c <SDMMC_GetCmdResp7+0x90>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a21      	ldr	r2, [pc, #132]	; (8007f50 <SDMMC_GetCmdResp7+0x94>)
 8007eca:	fba2 2303 	umull	r2, r3, r2, r3
 8007ece:	0a5b      	lsrs	r3, r3, #9
 8007ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ed4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007ed8:	4623      	mov	r3, r4
 8007eda:	1e5c      	subs	r4, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d102      	bne.n	8007ee6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ee0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ee4:	e02c      	b.n	8007f40 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eea:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d0f0      	beq.n	8007ed8 <SDMMC_GetCmdResp7+0x1c>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1eb      	bne.n	8007ed8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f04:	f003 0304 	and.w	r3, r3, #4
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d004      	beq.n	8007f16 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2204      	movs	r2, #4
 8007f10:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f12:	2304      	movs	r3, #4
 8007f14:	e014      	b.n	8007f40 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d004      	beq.n	8007f2c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e009      	b.n	8007f40 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d002      	beq.n	8007f3e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2240      	movs	r2, #64	; 0x40
 8007f3c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007f3e:	2300      	movs	r3, #0
  
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bc90      	pop	{r4, r7}
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	20000000 	.word	0x20000000
 8007f50:	10624dd3 	.word	0x10624dd3

08007f54 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007f58:	4904      	ldr	r1, [pc, #16]	; (8007f6c <MX_FATFS_Init+0x18>)
 8007f5a:	4805      	ldr	r0, [pc, #20]	; (8007f70 <MX_FATFS_Init+0x1c>)
 8007f5c:	f003 fa24 	bl	800b3a8 <FATFS_LinkDriver>
 8007f60:	4603      	mov	r3, r0
 8007f62:	461a      	mov	r2, r3
 8007f64:	4b03      	ldr	r3, [pc, #12]	; (8007f74 <MX_FATFS_Init+0x20>)
 8007f66:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007f68:	bf00      	nop
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	200047dc 	.word	0x200047dc
 8007f70:	0800c3d0 	.word	0x0800c3d0
 8007f74:	200047d8 	.word	0x200047d8

08007f78 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007f7c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007f92:	f000 f86b 	bl	800806c <BSP_SD_IsDetected>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d001      	beq.n	8007fa0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e005      	b.n	8007fac <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007fa0:	4804      	ldr	r0, [pc, #16]	; (8007fb4 <BSP_SD_Init+0x2c>)
 8007fa2:	f7fd fdeb 	bl	8005b7c <HAL_SD_Init>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8007faa:	79fb      	ldrb	r3, [r7, #7]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	2000367c 	.word	0x2000367c

08007fb8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af02      	add	r7, sp, #8
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
 8007fc4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	68f9      	ldr	r1, [r7, #12]
 8007fd4:	4806      	ldr	r0, [pc, #24]	; (8007ff0 <BSP_SD_ReadBlocks+0x38>)
 8007fd6:	f7fd fe61 	bl	8005c9c <HAL_SD_ReadBlocks>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3718      	adds	r7, #24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	2000367c 	.word	0x2000367c

08007ff4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b088      	sub	sp, #32
 8007ff8:	af02      	add	r7, sp, #8
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
 8008000:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	68f9      	ldr	r1, [r7, #12]
 8008010:	4806      	ldr	r0, [pc, #24]	; (800802c <BSP_SD_WriteBlocks+0x38>)
 8008012:	f7fe f83b 	bl	800608c <HAL_SD_WriteBlocks>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8008020:	7dfb      	ldrb	r3, [r7, #23]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	2000367c 	.word	0x2000367c

08008030 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008034:	4805      	ldr	r0, [pc, #20]	; (800804c <BSP_SD_GetCardState+0x1c>)
 8008036:	f7fe fb99 	bl	800676c <HAL_SD_GetCardState>
 800803a:	4603      	mov	r3, r0
 800803c:	2b04      	cmp	r3, #4
 800803e:	bf14      	ite	ne
 8008040:	2301      	movne	r3, #1
 8008042:	2300      	moveq	r3, #0
 8008044:	b2db      	uxtb	r3, r3
}
 8008046:	4618      	mov	r0, r3
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	2000367c 	.word	0x2000367c

08008050 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	4803      	ldr	r0, [pc, #12]	; (8008068 <BSP_SD_GetCardInfo+0x18>)
 800805c:	f7fe fb5a 	bl	8006714 <HAL_SD_GetCardInfo>
}
 8008060:	bf00      	nop
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	2000367c 	.word	0x2000367c

0800806c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008072:	2301      	movs	r3, #1
 8008074:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8008076:	f000 f80b 	bl	8008090 <BSP_PlatformIsDetected>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008080:	2300      	movs	r3, #0
 8008082:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008084:	79fb      	ldrb	r3, [r7, #7]
 8008086:	b2db      	uxtb	r3, r3
}
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008096:	2301      	movs	r3, #1
 8008098:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800809a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800809e:	4806      	ldr	r0, [pc, #24]	; (80080b8 <BSP_PlatformIsDetected+0x28>)
 80080a0:	f7fb ffcc 	bl	800403c <HAL_GPIO_ReadPin>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80080aa:	2300      	movs	r3, #0
 80080ac:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 80080ae:	79fb      	ldrb	r3, [r7, #7]
}  
 80080b0:	4618      	mov	r0, r3
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	40021400 	.word	0x40021400

080080bc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	4603      	mov	r3, r0
 80080c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80080c6:	4b0b      	ldr	r3, [pc, #44]	; (80080f4 <SD_CheckStatus+0x38>)
 80080c8:	2201      	movs	r2, #1
 80080ca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80080cc:	f7ff ffb0 	bl	8008030 <BSP_SD_GetCardState>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d107      	bne.n	80080e6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80080d6:	4b07      	ldr	r3, [pc, #28]	; (80080f4 <SD_CheckStatus+0x38>)
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	f023 0301 	bic.w	r3, r3, #1
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	4b04      	ldr	r3, [pc, #16]	; (80080f4 <SD_CheckStatus+0x38>)
 80080e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80080e6:	4b03      	ldr	r3, [pc, #12]	; (80080f4 <SD_CheckStatus+0x38>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	b2db      	uxtb	r3, r3
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	20000009 	.word	0x20000009

080080f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	4603      	mov	r3, r0
 8008100:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8008102:	4b0b      	ldr	r3, [pc, #44]	; (8008130 <SD_initialize+0x38>)
 8008104:	2201      	movs	r2, #1
 8008106:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008108:	f7ff ff3e 	bl	8007f88 <BSP_SD_Init>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d107      	bne.n	8008122 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8008112:	79fb      	ldrb	r3, [r7, #7]
 8008114:	4618      	mov	r0, r3
 8008116:	f7ff ffd1 	bl	80080bc <SD_CheckStatus>
 800811a:	4603      	mov	r3, r0
 800811c:	461a      	mov	r2, r3
 800811e:	4b04      	ldr	r3, [pc, #16]	; (8008130 <SD_initialize+0x38>)
 8008120:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008122:	4b03      	ldr	r3, [pc, #12]	; (8008130 <SD_initialize+0x38>)
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	b2db      	uxtb	r3, r3
}
 8008128:	4618      	mov	r0, r3
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20000009 	.word	0x20000009

08008134 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800813e:	79fb      	ldrb	r3, [r7, #7]
 8008140:	4618      	mov	r0, r3
 8008142:	f7ff ffbb 	bl	80080bc <SD_CheckStatus>
 8008146:	4603      	mov	r3, r0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	60b9      	str	r1, [r7, #8]
 8008158:	607a      	str	r2, [r7, #4]
 800815a:	603b      	str	r3, [r7, #0]
 800815c:	4603      	mov	r3, r0
 800815e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008164:	f04f 33ff 	mov.w	r3, #4294967295
 8008168:	683a      	ldr	r2, [r7, #0]
 800816a:	6879      	ldr	r1, [r7, #4]
 800816c:	68b8      	ldr	r0, [r7, #8]
 800816e:	f7ff ff23 	bl	8007fb8 <BSP_SD_ReadBlocks>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d107      	bne.n	8008188 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008178:	bf00      	nop
 800817a:	f7ff ff59 	bl	8008030 <BSP_SD_GetCardState>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1fa      	bne.n	800817a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008188:	7dfb      	ldrb	r3, [r7, #23]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b086      	sub	sp, #24
 8008196:	af00      	add	r7, sp, #0
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
 800819c:	603b      	str	r3, [r7, #0]
 800819e:	4603      	mov	r3, r0
 80081a0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80081a6:	f04f 33ff 	mov.w	r3, #4294967295
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	68b8      	ldr	r0, [r7, #8]
 80081b0:	f7ff ff20 	bl	8007ff4 <BSP_SD_WriteBlocks>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d107      	bne.n	80081ca <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80081ba:	bf00      	nop
 80081bc:	f7ff ff38 	bl	8008030 <BSP_SD_GetCardState>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1fa      	bne.n	80081bc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3718      	adds	r7, #24
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b08c      	sub	sp, #48	; 0x30
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	603a      	str	r2, [r7, #0]
 80081de:	71fb      	strb	r3, [r7, #7]
 80081e0:	460b      	mov	r3, r1
 80081e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80081ea:	4b25      	ldr	r3, [pc, #148]	; (8008280 <SD_ioctl+0xac>)
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	f003 0301 	and.w	r3, r3, #1
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d001      	beq.n	80081fc <SD_ioctl+0x28>
 80081f8:	2303      	movs	r3, #3
 80081fa:	e03c      	b.n	8008276 <SD_ioctl+0xa2>

  switch (cmd)
 80081fc:	79bb      	ldrb	r3, [r7, #6]
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d834      	bhi.n	800826c <SD_ioctl+0x98>
 8008202:	a201      	add	r2, pc, #4	; (adr r2, 8008208 <SD_ioctl+0x34>)
 8008204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008208:	08008219 	.word	0x08008219
 800820c:	08008221 	.word	0x08008221
 8008210:	08008239 	.word	0x08008239
 8008214:	08008253 	.word	0x08008253
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800821e:	e028      	b.n	8008272 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008220:	f107 030c 	add.w	r3, r7, #12
 8008224:	4618      	mov	r0, r3
 8008226:	f7ff ff13 	bl	8008050 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800822a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008230:	2300      	movs	r3, #0
 8008232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008236:	e01c      	b.n	8008272 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008238:	f107 030c 	add.w	r3, r7, #12
 800823c:	4618      	mov	r0, r3
 800823e:	f7ff ff07 	bl	8008050 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	b29a      	uxth	r2, r3
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008250:	e00f      	b.n	8008272 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008252:	f107 030c 	add.w	r3, r7, #12
 8008256:	4618      	mov	r0, r3
 8008258:	f7ff fefa 	bl	8008050 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	0a5a      	lsrs	r2, r3, #9
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800826a:	e002      	b.n	8008272 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800826c:	2304      	movs	r3, #4
 800826e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008272:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008276:	4618      	mov	r0, r3
 8008278:	3730      	adds	r7, #48	; 0x30
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	20000009 	.word	0x20000009

08008284 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	4603      	mov	r3, r0
 800828c:	6039      	str	r1, [r7, #0]
 800828e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008290:	88fb      	ldrh	r3, [r7, #6]
 8008292:	2b7f      	cmp	r3, #127	; 0x7f
 8008294:	d802      	bhi.n	800829c <ff_convert+0x18>
		c = chr;
 8008296:	88fb      	ldrh	r3, [r7, #6]
 8008298:	81fb      	strh	r3, [r7, #14]
 800829a:	e025      	b.n	80082e8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00b      	beq.n	80082ba <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80082a2:	88fb      	ldrh	r3, [r7, #6]
 80082a4:	2bff      	cmp	r3, #255	; 0xff
 80082a6:	d805      	bhi.n	80082b4 <ff_convert+0x30>
 80082a8:	88fb      	ldrh	r3, [r7, #6]
 80082aa:	3b80      	subs	r3, #128	; 0x80
 80082ac:	4a12      	ldr	r2, [pc, #72]	; (80082f8 <ff_convert+0x74>)
 80082ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082b2:	e000      	b.n	80082b6 <ff_convert+0x32>
 80082b4:	2300      	movs	r3, #0
 80082b6:	81fb      	strh	r3, [r7, #14]
 80082b8:	e016      	b.n	80082e8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80082ba:	2300      	movs	r3, #0
 80082bc:	81fb      	strh	r3, [r7, #14]
 80082be:	e009      	b.n	80082d4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80082c0:	89fb      	ldrh	r3, [r7, #14]
 80082c2:	4a0d      	ldr	r2, [pc, #52]	; (80082f8 <ff_convert+0x74>)
 80082c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082c8:	88fa      	ldrh	r2, [r7, #6]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d006      	beq.n	80082dc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80082ce:	89fb      	ldrh	r3, [r7, #14]
 80082d0:	3301      	adds	r3, #1
 80082d2:	81fb      	strh	r3, [r7, #14]
 80082d4:	89fb      	ldrh	r3, [r7, #14]
 80082d6:	2b7f      	cmp	r3, #127	; 0x7f
 80082d8:	d9f2      	bls.n	80082c0 <ff_convert+0x3c>
 80082da:	e000      	b.n	80082de <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80082dc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80082de:	89fb      	ldrh	r3, [r7, #14]
 80082e0:	3380      	adds	r3, #128	; 0x80
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80082e8:	89fb      	ldrh	r3, [r7, #14]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	0800c3e4 	.word	0x0800c3e4

080082fc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	4603      	mov	r3, r0
 8008304:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008306:	88fb      	ldrh	r3, [r7, #6]
 8008308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800830c:	d201      	bcs.n	8008312 <ff_wtoupper+0x16>
 800830e:	4b3e      	ldr	r3, [pc, #248]	; (8008408 <ff_wtoupper+0x10c>)
 8008310:	e000      	b.n	8008314 <ff_wtoupper+0x18>
 8008312:	4b3e      	ldr	r3, [pc, #248]	; (800840c <ff_wtoupper+0x110>)
 8008314:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	1c9a      	adds	r2, r3, #2
 800831a:	617a      	str	r2, [r7, #20]
 800831c:	881b      	ldrh	r3, [r3, #0]
 800831e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008320:	8a7b      	ldrh	r3, [r7, #18]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d068      	beq.n	80083f8 <ff_wtoupper+0xfc>
 8008326:	88fa      	ldrh	r2, [r7, #6]
 8008328:	8a7b      	ldrh	r3, [r7, #18]
 800832a:	429a      	cmp	r2, r3
 800832c:	d364      	bcc.n	80083f8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	1c9a      	adds	r2, r3, #2
 8008332:	617a      	str	r2, [r7, #20]
 8008334:	881b      	ldrh	r3, [r3, #0]
 8008336:	823b      	strh	r3, [r7, #16]
 8008338:	8a3b      	ldrh	r3, [r7, #16]
 800833a:	0a1b      	lsrs	r3, r3, #8
 800833c:	81fb      	strh	r3, [r7, #14]
 800833e:	8a3b      	ldrh	r3, [r7, #16]
 8008340:	b2db      	uxtb	r3, r3
 8008342:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008344:	88fa      	ldrh	r2, [r7, #6]
 8008346:	8a79      	ldrh	r1, [r7, #18]
 8008348:	8a3b      	ldrh	r3, [r7, #16]
 800834a:	440b      	add	r3, r1
 800834c:	429a      	cmp	r2, r3
 800834e:	da49      	bge.n	80083e4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008350:	89fb      	ldrh	r3, [r7, #14]
 8008352:	2b08      	cmp	r3, #8
 8008354:	d84f      	bhi.n	80083f6 <ff_wtoupper+0xfa>
 8008356:	a201      	add	r2, pc, #4	; (adr r2, 800835c <ff_wtoupper+0x60>)
 8008358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835c:	08008381 	.word	0x08008381
 8008360:	08008393 	.word	0x08008393
 8008364:	080083a9 	.word	0x080083a9
 8008368:	080083b1 	.word	0x080083b1
 800836c:	080083b9 	.word	0x080083b9
 8008370:	080083c1 	.word	0x080083c1
 8008374:	080083c9 	.word	0x080083c9
 8008378:	080083d1 	.word	0x080083d1
 800837c:	080083d9 	.word	0x080083d9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008380:	88fa      	ldrh	r2, [r7, #6]
 8008382:	8a7b      	ldrh	r3, [r7, #18]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	005b      	lsls	r3, r3, #1
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	4413      	add	r3, r2
 800838c:	881b      	ldrh	r3, [r3, #0]
 800838e:	80fb      	strh	r3, [r7, #6]
 8008390:	e027      	b.n	80083e2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008392:	88fa      	ldrh	r2, [r7, #6]
 8008394:	8a7b      	ldrh	r3, [r7, #18]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	b29b      	uxth	r3, r3
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	b29b      	uxth	r3, r3
 80083a0:	88fa      	ldrh	r2, [r7, #6]
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	80fb      	strh	r3, [r7, #6]
 80083a6:	e01c      	b.n	80083e2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80083a8:	88fb      	ldrh	r3, [r7, #6]
 80083aa:	3b10      	subs	r3, #16
 80083ac:	80fb      	strh	r3, [r7, #6]
 80083ae:	e018      	b.n	80083e2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80083b0:	88fb      	ldrh	r3, [r7, #6]
 80083b2:	3b20      	subs	r3, #32
 80083b4:	80fb      	strh	r3, [r7, #6]
 80083b6:	e014      	b.n	80083e2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80083b8:	88fb      	ldrh	r3, [r7, #6]
 80083ba:	3b30      	subs	r3, #48	; 0x30
 80083bc:	80fb      	strh	r3, [r7, #6]
 80083be:	e010      	b.n	80083e2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80083c0:	88fb      	ldrh	r3, [r7, #6]
 80083c2:	3b1a      	subs	r3, #26
 80083c4:	80fb      	strh	r3, [r7, #6]
 80083c6:	e00c      	b.n	80083e2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80083c8:	88fb      	ldrh	r3, [r7, #6]
 80083ca:	3308      	adds	r3, #8
 80083cc:	80fb      	strh	r3, [r7, #6]
 80083ce:	e008      	b.n	80083e2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80083d0:	88fb      	ldrh	r3, [r7, #6]
 80083d2:	3b50      	subs	r3, #80	; 0x50
 80083d4:	80fb      	strh	r3, [r7, #6]
 80083d6:	e004      	b.n	80083e2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80083d8:	88fb      	ldrh	r3, [r7, #6]
 80083da:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80083de:	80fb      	strh	r3, [r7, #6]
 80083e0:	bf00      	nop
			}
			break;
 80083e2:	e008      	b.n	80083f6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80083e4:	89fb      	ldrh	r3, [r7, #14]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d195      	bne.n	8008316 <ff_wtoupper+0x1a>
 80083ea:	8a3b      	ldrh	r3, [r7, #16]
 80083ec:	005b      	lsls	r3, r3, #1
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	4413      	add	r3, r2
 80083f2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80083f4:	e78f      	b.n	8008316 <ff_wtoupper+0x1a>
			break;
 80083f6:	bf00      	nop
	}

	return chr;
 80083f8:	88fb      	ldrh	r3, [r7, #6]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	371c      	adds	r7, #28
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	0800c4e4 	.word	0x0800c4e4
 800840c:	0800c6d8 	.word	0x0800c6d8

08008410 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	4603      	mov	r3, r0
 8008418:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800841a:	79fb      	ldrb	r3, [r7, #7]
 800841c:	4a08      	ldr	r2, [pc, #32]	; (8008440 <disk_status+0x30>)
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	79fa      	ldrb	r2, [r7, #7]
 8008428:	4905      	ldr	r1, [pc, #20]	; (8008440 <disk_status+0x30>)
 800842a:	440a      	add	r2, r1
 800842c:	7a12      	ldrb	r2, [r2, #8]
 800842e:	4610      	mov	r0, r2
 8008430:	4798      	blx	r3
 8008432:	4603      	mov	r3, r0
 8008434:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	20000308 	.word	0x20000308

08008444 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	4603      	mov	r3, r0
 800844c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008452:	79fb      	ldrb	r3, [r7, #7]
 8008454:	4a0d      	ldr	r2, [pc, #52]	; (800848c <disk_initialize+0x48>)
 8008456:	5cd3      	ldrb	r3, [r2, r3]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d111      	bne.n	8008480 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800845c:	79fb      	ldrb	r3, [r7, #7]
 800845e:	4a0b      	ldr	r2, [pc, #44]	; (800848c <disk_initialize+0x48>)
 8008460:	2101      	movs	r1, #1
 8008462:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008464:	79fb      	ldrb	r3, [r7, #7]
 8008466:	4a09      	ldr	r2, [pc, #36]	; (800848c <disk_initialize+0x48>)
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	79fa      	ldrb	r2, [r7, #7]
 8008472:	4906      	ldr	r1, [pc, #24]	; (800848c <disk_initialize+0x48>)
 8008474:	440a      	add	r2, r1
 8008476:	7a12      	ldrb	r2, [r2, #8]
 8008478:	4610      	mov	r0, r2
 800847a:	4798      	blx	r3
 800847c:	4603      	mov	r3, r0
 800847e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008480:	7bfb      	ldrb	r3, [r7, #15]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	20000308 	.word	0x20000308

08008490 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008490:	b590      	push	{r4, r7, lr}
 8008492:	b087      	sub	sp, #28
 8008494:	af00      	add	r7, sp, #0
 8008496:	60b9      	str	r1, [r7, #8]
 8008498:	607a      	str	r2, [r7, #4]
 800849a:	603b      	str	r3, [r7, #0]
 800849c:	4603      	mov	r3, r0
 800849e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
 80084a2:	4a0a      	ldr	r2, [pc, #40]	; (80084cc <disk_read+0x3c>)
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	689c      	ldr	r4, [r3, #8]
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	4a07      	ldr	r2, [pc, #28]	; (80084cc <disk_read+0x3c>)
 80084b0:	4413      	add	r3, r2
 80084b2:	7a18      	ldrb	r0, [r3, #8]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	68b9      	ldr	r1, [r7, #8]
 80084ba:	47a0      	blx	r4
 80084bc:	4603      	mov	r3, r0
 80084be:	75fb      	strb	r3, [r7, #23]
  return res;
 80084c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	371c      	adds	r7, #28
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd90      	pop	{r4, r7, pc}
 80084ca:	bf00      	nop
 80084cc:	20000308 	.word	0x20000308

080084d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80084d0:	b590      	push	{r4, r7, lr}
 80084d2:	b087      	sub	sp, #28
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60b9      	str	r1, [r7, #8]
 80084d8:	607a      	str	r2, [r7, #4]
 80084da:	603b      	str	r3, [r7, #0]
 80084dc:	4603      	mov	r3, r0
 80084de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
 80084e2:	4a0a      	ldr	r2, [pc, #40]	; (800850c <disk_write+0x3c>)
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	68dc      	ldr	r4, [r3, #12]
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
 80084ee:	4a07      	ldr	r2, [pc, #28]	; (800850c <disk_write+0x3c>)
 80084f0:	4413      	add	r3, r2
 80084f2:	7a18      	ldrb	r0, [r3, #8]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	68b9      	ldr	r1, [r7, #8]
 80084fa:	47a0      	blx	r4
 80084fc:	4603      	mov	r3, r0
 80084fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8008500:	7dfb      	ldrb	r3, [r7, #23]
}
 8008502:	4618      	mov	r0, r3
 8008504:	371c      	adds	r7, #28
 8008506:	46bd      	mov	sp, r7
 8008508:	bd90      	pop	{r4, r7, pc}
 800850a:	bf00      	nop
 800850c:	20000308 	.word	0x20000308

08008510 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	4603      	mov	r3, r0
 8008518:	603a      	str	r2, [r7, #0]
 800851a:	71fb      	strb	r3, [r7, #7]
 800851c:	460b      	mov	r3, r1
 800851e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008520:	79fb      	ldrb	r3, [r7, #7]
 8008522:	4a09      	ldr	r2, [pc, #36]	; (8008548 <disk_ioctl+0x38>)
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	79fa      	ldrb	r2, [r7, #7]
 800852e:	4906      	ldr	r1, [pc, #24]	; (8008548 <disk_ioctl+0x38>)
 8008530:	440a      	add	r2, r1
 8008532:	7a10      	ldrb	r0, [r2, #8]
 8008534:	79b9      	ldrb	r1, [r7, #6]
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	4798      	blx	r3
 800853a:	4603      	mov	r3, r0
 800853c:	73fb      	strb	r3, [r7, #15]
  return res;
 800853e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	20000308 	.word	0x20000308

0800854c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	3301      	adds	r3, #1
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800855c:	89fb      	ldrh	r3, [r7, #14]
 800855e:	021b      	lsls	r3, r3, #8
 8008560:	b21a      	sxth	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	b21b      	sxth	r3, r3
 8008568:	4313      	orrs	r3, r2
 800856a:	b21b      	sxth	r3, r3
 800856c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800856e:	89fb      	ldrh	r3, [r7, #14]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	3303      	adds	r3, #3
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	021b      	lsls	r3, r3, #8
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	3202      	adds	r2, #2
 8008594:	7812      	ldrb	r2, [r2, #0]
 8008596:	4313      	orrs	r3, r2
 8008598:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	021b      	lsls	r3, r3, #8
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	3201      	adds	r2, #1
 80085a2:	7812      	ldrb	r2, [r2, #0]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	021b      	lsls	r3, r3, #8
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	7812      	ldrb	r2, [r2, #0]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	60fb      	str	r3, [r7, #12]
	return rv;
 80085b4:	68fb      	ldr	r3, [r7, #12]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80085c2:	b480      	push	{r7}
 80085c4:	b083      	sub	sp, #12
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	460b      	mov	r3, r1
 80085cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	1c5a      	adds	r2, r3, #1
 80085d2:	607a      	str	r2, [r7, #4]
 80085d4:	887a      	ldrh	r2, [r7, #2]
 80085d6:	b2d2      	uxtb	r2, r2
 80085d8:	701a      	strb	r2, [r3, #0]
 80085da:	887b      	ldrh	r3, [r7, #2]
 80085dc:	0a1b      	lsrs	r3, r3, #8
 80085de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	1c5a      	adds	r2, r3, #1
 80085e4:	607a      	str	r2, [r7, #4]
 80085e6:	887a      	ldrh	r2, [r7, #2]
 80085e8:	b2d2      	uxtb	r2, r2
 80085ea:	701a      	strb	r2, [r3, #0]
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	1c5a      	adds	r2, r3, #1
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	b2d2      	uxtb	r2, r2
 800860c:	701a      	strb	r2, [r3, #0]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	0a1b      	lsrs	r3, r3, #8
 8008612:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	1c5a      	adds	r2, r3, #1
 8008618:	607a      	str	r2, [r7, #4]
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	b2d2      	uxtb	r2, r2
 800861e:	701a      	strb	r2, [r3, #0]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	0a1b      	lsrs	r3, r3, #8
 8008624:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	1c5a      	adds	r2, r3, #1
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	b2d2      	uxtb	r2, r2
 8008630:	701a      	strb	r2, [r3, #0]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	0a1b      	lsrs	r3, r3, #8
 8008636:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	1c5a      	adds	r2, r3, #1
 800863c:	607a      	str	r2, [r7, #4]
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	b2d2      	uxtb	r2, r2
 8008642:	701a      	strb	r2, [r3, #0]
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008650:	b480      	push	{r7}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00d      	beq.n	8008686 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	1c53      	adds	r3, r2, #1
 800866e:	613b      	str	r3, [r7, #16]
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	1c59      	adds	r1, r3, #1
 8008674:	6179      	str	r1, [r7, #20]
 8008676:	7812      	ldrb	r2, [r2, #0]
 8008678:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	3b01      	subs	r3, #1
 800867e:	607b      	str	r3, [r7, #4]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1f1      	bne.n	800866a <mem_cpy+0x1a>
	}
}
 8008686:	bf00      	nop
 8008688:	371c      	adds	r7, #28
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008692:	b480      	push	{r7}
 8008694:	b087      	sub	sp, #28
 8008696:	af00      	add	r7, sp, #0
 8008698:	60f8      	str	r0, [r7, #12]
 800869a:	60b9      	str	r1, [r7, #8]
 800869c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	1c5a      	adds	r2, r3, #1
 80086a6:	617a      	str	r2, [r7, #20]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	b2d2      	uxtb	r2, r2
 80086ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	3b01      	subs	r3, #1
 80086b2:	607b      	str	r3, [r7, #4]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1f3      	bne.n	80086a2 <mem_set+0x10>
}
 80086ba:	bf00      	nop
 80086bc:	371c      	adds	r7, #28
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80086c6:	b480      	push	{r7}
 80086c8:	b089      	sub	sp, #36	; 0x24
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	60f8      	str	r0, [r7, #12]
 80086ce:	60b9      	str	r1, [r7, #8]
 80086d0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	61fb      	str	r3, [r7, #28]
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80086da:	2300      	movs	r3, #0
 80086dc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	1c5a      	adds	r2, r3, #1
 80086e2:	61fa      	str	r2, [r7, #28]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	4619      	mov	r1, r3
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	1c5a      	adds	r2, r3, #1
 80086ec:	61ba      	str	r2, [r7, #24]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	1acb      	subs	r3, r1, r3
 80086f2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	3b01      	subs	r3, #1
 80086f8:	607b      	str	r3, [r7, #4]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <mem_cmp+0x40>
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d0eb      	beq.n	80086de <mem_cmp+0x18>

	return r;
 8008706:	697b      	ldr	r3, [r7, #20]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3724      	adds	r7, #36	; 0x24
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800871e:	e002      	b.n	8008726 <chk_chr+0x12>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	3301      	adds	r3, #1
 8008724:	607b      	str	r3, [r7, #4]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d005      	beq.n	800873a <chk_chr+0x26>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	461a      	mov	r2, r3
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	4293      	cmp	r3, r2
 8008738:	d1f2      	bne.n	8008720 <chk_chr+0xc>
	return *str;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	781b      	ldrb	r3, [r3, #0]
}
 800873e:	4618      	mov	r0, r3
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
	...

0800874c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008756:	2300      	movs	r3, #0
 8008758:	60bb      	str	r3, [r7, #8]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	60fb      	str	r3, [r7, #12]
 800875e:	e029      	b.n	80087b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008760:	4a27      	ldr	r2, [pc, #156]	; (8008800 <chk_lock+0xb4>)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	011b      	lsls	r3, r3, #4
 8008766:	4413      	add	r3, r2
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d01d      	beq.n	80087aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800876e:	4a24      	ldr	r2, [pc, #144]	; (8008800 <chk_lock+0xb4>)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	011b      	lsls	r3, r3, #4
 8008774:	4413      	add	r3, r2
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	429a      	cmp	r2, r3
 800877e:	d116      	bne.n	80087ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008780:	4a1f      	ldr	r2, [pc, #124]	; (8008800 <chk_lock+0xb4>)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	011b      	lsls	r3, r3, #4
 8008786:	4413      	add	r3, r2
 8008788:	3304      	adds	r3, #4
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008790:	429a      	cmp	r2, r3
 8008792:	d10c      	bne.n	80087ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008794:	4a1a      	ldr	r2, [pc, #104]	; (8008800 <chk_lock+0xb4>)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	011b      	lsls	r3, r3, #4
 800879a:	4413      	add	r3, r2
 800879c:	3308      	adds	r3, #8
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d102      	bne.n	80087ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80087a8:	e007      	b.n	80087ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80087aa:	2301      	movs	r3, #1
 80087ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3301      	adds	r3, #1
 80087b2:	60fb      	str	r3, [r7, #12]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d9d2      	bls.n	8008760 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d109      	bne.n	80087d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d102      	bne.n	80087cc <chk_lock+0x80>
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d101      	bne.n	80087d0 <chk_lock+0x84>
 80087cc:	2300      	movs	r3, #0
 80087ce:	e010      	b.n	80087f2 <chk_lock+0xa6>
 80087d0:	2312      	movs	r3, #18
 80087d2:	e00e      	b.n	80087f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d108      	bne.n	80087ec <chk_lock+0xa0>
 80087da:	4a09      	ldr	r2, [pc, #36]	; (8008800 <chk_lock+0xb4>)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	011b      	lsls	r3, r3, #4
 80087e0:	4413      	add	r3, r2
 80087e2:	330c      	adds	r3, #12
 80087e4:	881b      	ldrh	r3, [r3, #0]
 80087e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ea:	d101      	bne.n	80087f0 <chk_lock+0xa4>
 80087ec:	2310      	movs	r3, #16
 80087ee:	e000      	b.n	80087f2 <chk_lock+0xa6>
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	200000e8 	.word	0x200000e8

08008804 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800880a:	2300      	movs	r3, #0
 800880c:	607b      	str	r3, [r7, #4]
 800880e:	e002      	b.n	8008816 <enq_lock+0x12>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	3301      	adds	r3, #1
 8008814:	607b      	str	r3, [r7, #4]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d806      	bhi.n	800882a <enq_lock+0x26>
 800881c:	4a09      	ldr	r2, [pc, #36]	; (8008844 <enq_lock+0x40>)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	011b      	lsls	r3, r3, #4
 8008822:	4413      	add	r3, r2
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1f2      	bne.n	8008810 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b02      	cmp	r3, #2
 800882e:	bf14      	ite	ne
 8008830:	2301      	movne	r3, #1
 8008832:	2300      	moveq	r3, #0
 8008834:	b2db      	uxtb	r3, r3
}
 8008836:	4618      	mov	r0, r3
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	200000e8 	.word	0x200000e8

08008848 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008852:	2300      	movs	r3, #0
 8008854:	60fb      	str	r3, [r7, #12]
 8008856:	e01f      	b.n	8008898 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008858:	4a41      	ldr	r2, [pc, #260]	; (8008960 <inc_lock+0x118>)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	011b      	lsls	r3, r3, #4
 800885e:	4413      	add	r3, r2
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	429a      	cmp	r2, r3
 8008868:	d113      	bne.n	8008892 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800886a:	4a3d      	ldr	r2, [pc, #244]	; (8008960 <inc_lock+0x118>)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	011b      	lsls	r3, r3, #4
 8008870:	4413      	add	r3, r2
 8008872:	3304      	adds	r3, #4
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800887a:	429a      	cmp	r2, r3
 800887c:	d109      	bne.n	8008892 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800887e:	4a38      	ldr	r2, [pc, #224]	; (8008960 <inc_lock+0x118>)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	011b      	lsls	r3, r3, #4
 8008884:	4413      	add	r3, r2
 8008886:	3308      	adds	r3, #8
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800888e:	429a      	cmp	r2, r3
 8008890:	d006      	beq.n	80088a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	3301      	adds	r3, #1
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d9dc      	bls.n	8008858 <inc_lock+0x10>
 800889e:	e000      	b.n	80088a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80088a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d132      	bne.n	800890e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80088a8:	2300      	movs	r3, #0
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	e002      	b.n	80088b4 <inc_lock+0x6c>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3301      	adds	r3, #1
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d806      	bhi.n	80088c8 <inc_lock+0x80>
 80088ba:	4a29      	ldr	r2, [pc, #164]	; (8008960 <inc_lock+0x118>)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	011b      	lsls	r3, r3, #4
 80088c0:	4413      	add	r3, r2
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1f2      	bne.n	80088ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d101      	bne.n	80088d2 <inc_lock+0x8a>
 80088ce:	2300      	movs	r3, #0
 80088d0:	e040      	b.n	8008954 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	4922      	ldr	r1, [pc, #136]	; (8008960 <inc_lock+0x118>)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	011b      	lsls	r3, r3, #4
 80088dc:	440b      	add	r3, r1
 80088de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	689a      	ldr	r2, [r3, #8]
 80088e4:	491e      	ldr	r1, [pc, #120]	; (8008960 <inc_lock+0x118>)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	011b      	lsls	r3, r3, #4
 80088ea:	440b      	add	r3, r1
 80088ec:	3304      	adds	r3, #4
 80088ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	695a      	ldr	r2, [r3, #20]
 80088f4:	491a      	ldr	r1, [pc, #104]	; (8008960 <inc_lock+0x118>)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	011b      	lsls	r3, r3, #4
 80088fa:	440b      	add	r3, r1
 80088fc:	3308      	adds	r3, #8
 80088fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008900:	4a17      	ldr	r2, [pc, #92]	; (8008960 <inc_lock+0x118>)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	011b      	lsls	r3, r3, #4
 8008906:	4413      	add	r3, r2
 8008908:	330c      	adds	r3, #12
 800890a:	2200      	movs	r2, #0
 800890c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d009      	beq.n	8008928 <inc_lock+0xe0>
 8008914:	4a12      	ldr	r2, [pc, #72]	; (8008960 <inc_lock+0x118>)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	011b      	lsls	r3, r3, #4
 800891a:	4413      	add	r3, r2
 800891c:	330c      	adds	r3, #12
 800891e:	881b      	ldrh	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <inc_lock+0xe0>
 8008924:	2300      	movs	r3, #0
 8008926:	e015      	b.n	8008954 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d108      	bne.n	8008940 <inc_lock+0xf8>
 800892e:	4a0c      	ldr	r2, [pc, #48]	; (8008960 <inc_lock+0x118>)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	011b      	lsls	r3, r3, #4
 8008934:	4413      	add	r3, r2
 8008936:	330c      	adds	r3, #12
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	3301      	adds	r3, #1
 800893c:	b29a      	uxth	r2, r3
 800893e:	e001      	b.n	8008944 <inc_lock+0xfc>
 8008940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008944:	4906      	ldr	r1, [pc, #24]	; (8008960 <inc_lock+0x118>)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	011b      	lsls	r3, r3, #4
 800894a:	440b      	add	r3, r1
 800894c:	330c      	adds	r3, #12
 800894e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	3301      	adds	r3, #1
}
 8008954:	4618      	mov	r0, r3
 8008956:	3714      	adds	r7, #20
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	200000e8 	.word	0x200000e8

08008964 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	3b01      	subs	r3, #1
 8008970:	607b      	str	r3, [r7, #4]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d825      	bhi.n	80089c4 <dec_lock+0x60>
		n = Files[i].ctr;
 8008978:	4a17      	ldr	r2, [pc, #92]	; (80089d8 <dec_lock+0x74>)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	011b      	lsls	r3, r3, #4
 800897e:	4413      	add	r3, r2
 8008980:	330c      	adds	r3, #12
 8008982:	881b      	ldrh	r3, [r3, #0]
 8008984:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008986:	89fb      	ldrh	r3, [r7, #14]
 8008988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800898c:	d101      	bne.n	8008992 <dec_lock+0x2e>
 800898e:	2300      	movs	r3, #0
 8008990:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008992:	89fb      	ldrh	r3, [r7, #14]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <dec_lock+0x3a>
 8008998:	89fb      	ldrh	r3, [r7, #14]
 800899a:	3b01      	subs	r3, #1
 800899c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800899e:	4a0e      	ldr	r2, [pc, #56]	; (80089d8 <dec_lock+0x74>)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	011b      	lsls	r3, r3, #4
 80089a4:	4413      	add	r3, r2
 80089a6:	330c      	adds	r3, #12
 80089a8:	89fa      	ldrh	r2, [r7, #14]
 80089aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80089ac:	89fb      	ldrh	r3, [r7, #14]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d105      	bne.n	80089be <dec_lock+0x5a>
 80089b2:	4a09      	ldr	r2, [pc, #36]	; (80089d8 <dec_lock+0x74>)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	011b      	lsls	r3, r3, #4
 80089b8:	4413      	add	r3, r2
 80089ba:	2200      	movs	r2, #0
 80089bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80089be:	2300      	movs	r3, #0
 80089c0:	737b      	strb	r3, [r7, #13]
 80089c2:	e001      	b.n	80089c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80089c4:	2302      	movs	r3, #2
 80089c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80089c8:	7b7b      	ldrb	r3, [r7, #13]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3714      	adds	r7, #20
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	200000e8 	.word	0x200000e8

080089dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80089e4:	2300      	movs	r3, #0
 80089e6:	60fb      	str	r3, [r7, #12]
 80089e8:	e010      	b.n	8008a0c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80089ea:	4a0d      	ldr	r2, [pc, #52]	; (8008a20 <clear_lock+0x44>)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	011b      	lsls	r3, r3, #4
 80089f0:	4413      	add	r3, r2
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d105      	bne.n	8008a06 <clear_lock+0x2a>
 80089fa:	4a09      	ldr	r2, [pc, #36]	; (8008a20 <clear_lock+0x44>)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	011b      	lsls	r3, r3, #4
 8008a00:	4413      	add	r3, r2
 8008a02:	2200      	movs	r2, #0
 8008a04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	60fb      	str	r3, [r7, #12]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d9eb      	bls.n	80089ea <clear_lock+0xe>
	}
}
 8008a12:	bf00      	nop
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	200000e8 	.word	0x200000e8

08008a24 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	78db      	ldrb	r3, [r3, #3]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d034      	beq.n	8008aa2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a3c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	7858      	ldrb	r0, [r3, #1]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a48:	2301      	movs	r3, #1
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	f7ff fd40 	bl	80084d0 <disk_write>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d002      	beq.n	8008a5c <sync_window+0x38>
			res = FR_DISK_ERR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	73fb      	strb	r3, [r7, #15]
 8008a5a:	e022      	b.n	8008aa2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	1ad2      	subs	r2, r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d217      	bcs.n	8008aa2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	789b      	ldrb	r3, [r3, #2]
 8008a76:	613b      	str	r3, [r7, #16]
 8008a78:	e010      	b.n	8008a9c <sync_window+0x78>
					wsect += fs->fsize;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	4413      	add	r3, r2
 8008a82:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	7858      	ldrb	r0, [r3, #1]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a8e:	2301      	movs	r3, #1
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	f7ff fd1d 	bl	80084d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	613b      	str	r3, [r7, #16]
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d8eb      	bhi.n	8008a7a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3718      	adds	r7, #24
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d01b      	beq.n	8008afc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7ff ffad 	bl	8008a24 <sync_window>
 8008aca:	4603      	mov	r3, r0
 8008acc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d113      	bne.n	8008afc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	7858      	ldrb	r0, [r3, #1]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ade:	2301      	movs	r3, #1
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	f7ff fcd5 	bl	8008490 <disk_read>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d004      	beq.n	8008af6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008aec:	f04f 33ff 	mov.w	r3, #4294967295
 8008af0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
	...

08008b08 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7ff ff87 	bl	8008a24 <sync_window>
 8008b16:	4603      	mov	r3, r0
 8008b18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d159      	bne.n	8008bd4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	2b03      	cmp	r3, #3
 8008b26:	d149      	bne.n	8008bbc <sync_fs+0xb4>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	791b      	ldrb	r3, [r3, #4]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d145      	bne.n	8008bbc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	899b      	ldrh	r3, [r3, #12]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	f7ff fda8 	bl	8008692 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	3338      	adds	r3, #56	; 0x38
 8008b46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b4a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7ff fd37 	bl	80085c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	3338      	adds	r3, #56	; 0x38
 8008b58:	4921      	ldr	r1, [pc, #132]	; (8008be0 <sync_fs+0xd8>)
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7ff fd4c 	bl	80085f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	3338      	adds	r3, #56	; 0x38
 8008b64:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008b68:	491e      	ldr	r1, [pc, #120]	; (8008be4 <sync_fs+0xdc>)
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7ff fd44 	bl	80085f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	3338      	adds	r3, #56	; 0x38
 8008b74:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	4610      	mov	r0, r2
 8008b80:	f7ff fd3a 	bl	80085f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	3338      	adds	r3, #56	; 0x38
 8008b88:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	4619      	mov	r1, r3
 8008b92:	4610      	mov	r0, r2
 8008b94:	f7ff fd30 	bl	80085f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9c:	1c5a      	adds	r2, r3, #1
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	7858      	ldrb	r0, [r3, #1]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	f7ff fc8d 	bl	80084d0 <disk_write>
			fs->fsi_flag = 0;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	785b      	ldrb	r3, [r3, #1]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7ff fca3 	bl	8008510 <disk_ioctl>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <sync_fs+0xcc>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	41615252 	.word	0x41615252
 8008be4:	61417272 	.word	0x61417272

08008be8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	3b02      	subs	r3, #2
 8008bf6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	3b02      	subs	r3, #2
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d301      	bcc.n	8008c08 <clust2sect+0x20>
 8008c04:	2300      	movs	r3, #0
 8008c06:	e008      	b.n	8008c1a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	895b      	ldrh	r3, [r3, #10]
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	fb03 f202 	mul.w	r2, r3, r2
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c18:	4413      	add	r3, r2
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	370c      	adds	r7, #12
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b086      	sub	sp, #24
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d904      	bls.n	8008c46 <get_fat+0x20>
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	69db      	ldr	r3, [r3, #28]
 8008c40:	683a      	ldr	r2, [r7, #0]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d302      	bcc.n	8008c4c <get_fat+0x26>
		val = 1;	/* Internal error */
 8008c46:	2301      	movs	r3, #1
 8008c48:	617b      	str	r3, [r7, #20]
 8008c4a:	e0b7      	b.n	8008dbc <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c50:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d05a      	beq.n	8008d10 <get_fat+0xea>
 8008c5a:	2b03      	cmp	r3, #3
 8008c5c:	d07d      	beq.n	8008d5a <get_fat+0x134>
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	f040 80a2 	bne.w	8008da8 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	60fb      	str	r3, [r7, #12]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	085b      	lsrs	r3, r3, #1
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	4413      	add	r3, r2
 8008c70:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	899b      	ldrh	r3, [r3, #12]
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c82:	4413      	add	r3, r2
 8008c84:	4619      	mov	r1, r3
 8008c86:	6938      	ldr	r0, [r7, #16]
 8008c88:	f7ff ff10 	bl	8008aac <move_window>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f040 808d 	bne.w	8008dae <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	60fa      	str	r2, [r7, #12]
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	8992      	ldrh	r2, [r2, #12]
 8008c9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ca2:	fb02 f201 	mul.w	r2, r2, r1
 8008ca6:	1a9b      	subs	r3, r3, r2
 8008ca8:	693a      	ldr	r2, [r7, #16]
 8008caa:	4413      	add	r3, r2
 8008cac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008cb0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	899b      	ldrh	r3, [r3, #12]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8008cc2:	4413      	add	r3, r2
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6938      	ldr	r0, [r7, #16]
 8008cc8:	f7ff fef0 	bl	8008aac <move_window>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d16f      	bne.n	8008db2 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	899b      	ldrh	r3, [r3, #12]
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cde:	fb02 f201 	mul.w	r2, r2, r1
 8008ce2:	1a9b      	subs	r3, r3, r2
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008cec:	021b      	lsls	r3, r3, #8
 8008cee:	461a      	mov	r2, r3
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <get_fat+0xe0>
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	091b      	lsrs	r3, r3, #4
 8008d04:	e002      	b.n	8008d0c <get_fat+0xe6>
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d0c:	617b      	str	r3, [r7, #20]
			break;
 8008d0e:	e055      	b.n	8008dbc <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	899b      	ldrh	r3, [r3, #12]
 8008d18:	085b      	lsrs	r3, r3, #1
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d24:	4413      	add	r3, r2
 8008d26:	4619      	mov	r1, r3
 8008d28:	6938      	ldr	r0, [r7, #16]
 8008d2a:	f7ff febf 	bl	8008aac <move_window>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d140      	bne.n	8008db6 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	005b      	lsls	r3, r3, #1
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	8992      	ldrh	r2, [r2, #12]
 8008d42:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d46:	fb02 f200 	mul.w	r2, r2, r0
 8008d4a:	1a9b      	subs	r3, r3, r2
 8008d4c:	440b      	add	r3, r1
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7ff fbfc 	bl	800854c <ld_word>
 8008d54:	4603      	mov	r3, r0
 8008d56:	617b      	str	r3, [r7, #20]
			break;
 8008d58:	e030      	b.n	8008dbc <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	899b      	ldrh	r3, [r3, #12]
 8008d62:	089b      	lsrs	r3, r3, #2
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	4619      	mov	r1, r3
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d6e:	4413      	add	r3, r2
 8008d70:	4619      	mov	r1, r3
 8008d72:	6938      	ldr	r0, [r7, #16]
 8008d74:	f7ff fe9a 	bl	8008aac <move_window>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d11d      	bne.n	8008dba <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	8992      	ldrh	r2, [r2, #12]
 8008d8c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d90:	fb02 f200 	mul.w	r2, r2, r0
 8008d94:	1a9b      	subs	r3, r3, r2
 8008d96:	440b      	add	r3, r1
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7ff fbef 	bl	800857c <ld_dword>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008da4:	617b      	str	r3, [r7, #20]
			break;
 8008da6:	e009      	b.n	8008dbc <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008da8:	2301      	movs	r3, #1
 8008daa:	617b      	str	r3, [r7, #20]
 8008dac:	e006      	b.n	8008dbc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008dae:	bf00      	nop
 8008db0:	e004      	b.n	8008dbc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008db2:	bf00      	nop
 8008db4:	e002      	b.n	8008dbc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008db6:	bf00      	nop
 8008db8:	e000      	b.n	8008dbc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008dba:	bf00      	nop
		}
	}

	return val;
 8008dbc:	697b      	ldr	r3, [r7, #20]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008dc6:	b590      	push	{r4, r7, lr}
 8008dc8:	b089      	sub	sp, #36	; 0x24
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	60f8      	str	r0, [r7, #12]
 8008dce:	60b9      	str	r1, [r7, #8]
 8008dd0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	f240 8106 	bls.w	8008fea <put_fat+0x224>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	69db      	ldr	r3, [r3, #28]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	f080 8100 	bcs.w	8008fea <put_fat+0x224>
		switch (fs->fs_type) {
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	f000 8088 	beq.w	8008f04 <put_fat+0x13e>
 8008df4:	2b03      	cmp	r3, #3
 8008df6:	f000 80b0 	beq.w	8008f5a <put_fat+0x194>
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	f040 80f5 	bne.w	8008fea <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	61bb      	str	r3, [r7, #24]
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	085b      	lsrs	r3, r3, #1
 8008e08:	69ba      	ldr	r2, [r7, #24]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	899b      	ldrh	r3, [r3, #12]
 8008e16:	4619      	mov	r1, r3
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e1e:	4413      	add	r3, r2
 8008e20:	4619      	mov	r1, r3
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f7ff fe42 	bl	8008aac <move_window>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e2c:	7ffb      	ldrb	r3, [r7, #31]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f040 80d4 	bne.w	8008fdc <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	1c5a      	adds	r2, r3, #1
 8008e3e:	61ba      	str	r2, [r7, #24]
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	8992      	ldrh	r2, [r2, #12]
 8008e44:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e48:	fb02 f200 	mul.w	r2, r2, r0
 8008e4c:	1a9b      	subs	r3, r3, r2
 8008e4e:	440b      	add	r3, r1
 8008e50:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	f003 0301 	and.w	r3, r3, #1
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00d      	beq.n	8008e78 <put_fat+0xb2>
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	b25b      	sxtb	r3, r3
 8008e62:	f003 030f 	and.w	r3, r3, #15
 8008e66:	b25a      	sxtb	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	011b      	lsls	r3, r3, #4
 8008e6e:	b25b      	sxtb	r3, r3
 8008e70:	4313      	orrs	r3, r2
 8008e72:	b25b      	sxtb	r3, r3
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	e001      	b.n	8008e7c <put_fat+0xb6>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2201      	movs	r2, #1
 8008e84:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	899b      	ldrh	r3, [r3, #12]
 8008e8e:	4619      	mov	r1, r3
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e96:	4413      	add	r3, r2
 8008e98:	4619      	mov	r1, r3
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f7ff fe06 	bl	8008aac <move_window>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ea4:	7ffb      	ldrb	r3, [r7, #31]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f040 809a 	bne.w	8008fe0 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	899b      	ldrh	r3, [r3, #12]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ebe:	fb02 f200 	mul.w	r2, r2, r0
 8008ec2:	1a9b      	subs	r3, r3, r2
 8008ec4:	440b      	add	r3, r1
 8008ec6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <put_fat+0x114>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	091b      	lsrs	r3, r3, #4
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	e00e      	b.n	8008ef8 <put_fat+0x132>
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	b25b      	sxtb	r3, r3
 8008ee0:	f023 030f 	bic.w	r3, r3, #15
 8008ee4:	b25a      	sxtb	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	0a1b      	lsrs	r3, r3, #8
 8008eea:	b25b      	sxtb	r3, r3
 8008eec:	f003 030f 	and.w	r3, r3, #15
 8008ef0:	b25b      	sxtb	r3, r3
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	b25b      	sxtb	r3, r3
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2201      	movs	r2, #1
 8008f00:	70da      	strb	r2, [r3, #3]
			break;
 8008f02:	e072      	b.n	8008fea <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	899b      	ldrh	r3, [r3, #12]
 8008f0c:	085b      	lsrs	r3, r3, #1
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	4619      	mov	r1, r3
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f18:	4413      	add	r3, r2
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f7ff fdc5 	bl	8008aac <move_window>
 8008f22:	4603      	mov	r3, r0
 8008f24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f26:	7ffb      	ldrb	r3, [r7, #31]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d15b      	bne.n	8008fe4 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	005b      	lsls	r3, r3, #1
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	8992      	ldrh	r2, [r2, #12]
 8008f3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f3e:	fb02 f200 	mul.w	r2, r2, r0
 8008f42:	1a9b      	subs	r3, r3, r2
 8008f44:	440b      	add	r3, r1
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	b292      	uxth	r2, r2
 8008f4a:	4611      	mov	r1, r2
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7ff fb38 	bl	80085c2 <st_word>
			fs->wflag = 1;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2201      	movs	r2, #1
 8008f56:	70da      	strb	r2, [r3, #3]
			break;
 8008f58:	e047      	b.n	8008fea <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	899b      	ldrh	r3, [r3, #12]
 8008f62:	089b      	lsrs	r3, r3, #2
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	4619      	mov	r1, r3
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f6e:	4413      	add	r3, r2
 8008f70:	4619      	mov	r1, r3
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f7ff fd9a 	bl	8008aac <move_window>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f7c:	7ffb      	ldrb	r3, [r7, #31]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d132      	bne.n	8008fe8 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	8992      	ldrh	r2, [r2, #12]
 8008f96:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f9a:	fb02 f200 	mul.w	r2, r2, r0
 8008f9e:	1a9b      	subs	r3, r3, r2
 8008fa0:	440b      	add	r3, r1
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7ff faea 	bl	800857c <ld_dword>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008fae:	4323      	orrs	r3, r4
 8008fb0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	8992      	ldrh	r2, [r2, #12]
 8008fc0:	fbb3 f0f2 	udiv	r0, r3, r2
 8008fc4:	fb02 f200 	mul.w	r2, r2, r0
 8008fc8:	1a9b      	subs	r3, r3, r2
 8008fca:	440b      	add	r3, r1
 8008fcc:	6879      	ldr	r1, [r7, #4]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7ff fb12 	bl	80085f8 <st_dword>
			fs->wflag = 1;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	70da      	strb	r2, [r3, #3]
			break;
 8008fda:	e006      	b.n	8008fea <put_fat+0x224>
			if (res != FR_OK) break;
 8008fdc:	bf00      	nop
 8008fde:	e004      	b.n	8008fea <put_fat+0x224>
			if (res != FR_OK) break;
 8008fe0:	bf00      	nop
 8008fe2:	e002      	b.n	8008fea <put_fat+0x224>
			if (res != FR_OK) break;
 8008fe4:	bf00      	nop
 8008fe6:	e000      	b.n	8008fea <put_fat+0x224>
			if (res != FR_OK) break;
 8008fe8:	bf00      	nop
		}
	}
	return res;
 8008fea:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3724      	adds	r7, #36	; 0x24
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd90      	pop	{r4, r7, pc}

08008ff4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d904      	bls.n	800901a <remove_chain+0x26>
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	429a      	cmp	r2, r3
 8009018:	d301      	bcc.n	800901e <remove_chain+0x2a>
 800901a:	2302      	movs	r3, #2
 800901c:	e04b      	b.n	80090b6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00c      	beq.n	800903e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009024:	f04f 32ff 	mov.w	r2, #4294967295
 8009028:	6879      	ldr	r1, [r7, #4]
 800902a:	69b8      	ldr	r0, [r7, #24]
 800902c:	f7ff fecb 	bl	8008dc6 <put_fat>
 8009030:	4603      	mov	r3, r0
 8009032:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009034:	7ffb      	ldrb	r3, [r7, #31]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <remove_chain+0x4a>
 800903a:	7ffb      	ldrb	r3, [r7, #31]
 800903c:	e03b      	b.n	80090b6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800903e:	68b9      	ldr	r1, [r7, #8]
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f7ff fdf0 	bl	8008c26 <get_fat>
 8009046:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d031      	beq.n	80090b2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	2b01      	cmp	r3, #1
 8009052:	d101      	bne.n	8009058 <remove_chain+0x64>
 8009054:	2302      	movs	r3, #2
 8009056:	e02e      	b.n	80090b6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800905e:	d101      	bne.n	8009064 <remove_chain+0x70>
 8009060:	2301      	movs	r3, #1
 8009062:	e028      	b.n	80090b6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009064:	2200      	movs	r2, #0
 8009066:	68b9      	ldr	r1, [r7, #8]
 8009068:	69b8      	ldr	r0, [r7, #24]
 800906a:	f7ff feac 	bl	8008dc6 <put_fat>
 800906e:	4603      	mov	r3, r0
 8009070:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009072:	7ffb      	ldrb	r3, [r7, #31]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <remove_chain+0x88>
 8009078:	7ffb      	ldrb	r3, [r7, #31]
 800907a:	e01c      	b.n	80090b6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	699a      	ldr	r2, [r3, #24]
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	69db      	ldr	r3, [r3, #28]
 8009084:	3b02      	subs	r3, #2
 8009086:	429a      	cmp	r2, r3
 8009088:	d20b      	bcs.n	80090a2 <remove_chain+0xae>
			fs->free_clst++;
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	699b      	ldr	r3, [r3, #24]
 800908e:	1c5a      	adds	r2, r3, #1
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	791b      	ldrb	r3, [r3, #4]
 8009098:	f043 0301 	orr.w	r3, r3, #1
 800909c:	b2da      	uxtb	r2, r3
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d3c6      	bcc.n	800903e <remove_chain+0x4a>
 80090b0:	e000      	b.n	80090b4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80090b2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3720      	adds	r7, #32
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b088      	sub	sp, #32
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10d      	bne.n	80090f0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	695b      	ldr	r3, [r3, #20]
 80090d8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d004      	beq.n	80090ea <create_chain+0x2c>
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	69db      	ldr	r3, [r3, #28]
 80090e4:	69ba      	ldr	r2, [r7, #24]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d31b      	bcc.n	8009122 <create_chain+0x64>
 80090ea:	2301      	movs	r3, #1
 80090ec:	61bb      	str	r3, [r7, #24]
 80090ee:	e018      	b.n	8009122 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7ff fd97 	bl	8008c26 <get_fat>
 80090f8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d801      	bhi.n	8009104 <create_chain+0x46>
 8009100:	2301      	movs	r3, #1
 8009102:	e070      	b.n	80091e6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910a:	d101      	bne.n	8009110 <create_chain+0x52>
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	e06a      	b.n	80091e6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	69db      	ldr	r3, [r3, #28]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	429a      	cmp	r2, r3
 8009118:	d201      	bcs.n	800911e <create_chain+0x60>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	e063      	b.n	80091e6 <create_chain+0x128>
		scl = clst;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	3301      	adds	r3, #1
 800912a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	69db      	ldr	r3, [r3, #28]
 8009130:	69fa      	ldr	r2, [r7, #28]
 8009132:	429a      	cmp	r2, r3
 8009134:	d307      	bcc.n	8009146 <create_chain+0x88>
				ncl = 2;
 8009136:	2302      	movs	r3, #2
 8009138:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800913a:	69fa      	ldr	r2, [r7, #28]
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	429a      	cmp	r2, r3
 8009140:	d901      	bls.n	8009146 <create_chain+0x88>
 8009142:	2300      	movs	r3, #0
 8009144:	e04f      	b.n	80091e6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009146:	69f9      	ldr	r1, [r7, #28]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7ff fd6c 	bl	8008c26 <get_fat>
 800914e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00e      	beq.n	8009174 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d003      	beq.n	8009164 <create_chain+0xa6>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009162:	d101      	bne.n	8009168 <create_chain+0xaa>
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	e03e      	b.n	80091e6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009168:	69fa      	ldr	r2, [r7, #28]
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	429a      	cmp	r2, r3
 800916e:	d1da      	bne.n	8009126 <create_chain+0x68>
 8009170:	2300      	movs	r3, #0
 8009172:	e038      	b.n	80091e6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009174:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009176:	f04f 32ff 	mov.w	r2, #4294967295
 800917a:	69f9      	ldr	r1, [r7, #28]
 800917c:	6938      	ldr	r0, [r7, #16]
 800917e:	f7ff fe22 	bl	8008dc6 <put_fat>
 8009182:	4603      	mov	r3, r0
 8009184:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009186:	7dfb      	ldrb	r3, [r7, #23]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d109      	bne.n	80091a0 <create_chain+0xe2>
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d006      	beq.n	80091a0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009192:	69fa      	ldr	r2, [r7, #28]
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6938      	ldr	r0, [r7, #16]
 8009198:	f7ff fe15 	bl	8008dc6 <put_fat>
 800919c:	4603      	mov	r3, r0
 800919e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80091a0:	7dfb      	ldrb	r3, [r7, #23]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d116      	bne.n	80091d4 <create_chain+0x116>
		fs->last_clst = ncl;
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	69fa      	ldr	r2, [r7, #28]
 80091aa:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	699a      	ldr	r2, [r3, #24]
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	69db      	ldr	r3, [r3, #28]
 80091b4:	3b02      	subs	r3, #2
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d804      	bhi.n	80091c4 <create_chain+0x106>
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	1e5a      	subs	r2, r3, #1
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	791b      	ldrb	r3, [r3, #4]
 80091c8:	f043 0301 	orr.w	r3, r3, #1
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	711a      	strb	r2, [r3, #4]
 80091d2:	e007      	b.n	80091e4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d102      	bne.n	80091e0 <create_chain+0x122>
 80091da:	f04f 33ff 	mov.w	r3, #4294967295
 80091de:	e000      	b.n	80091e2 <create_chain+0x124>
 80091e0:	2301      	movs	r3, #1
 80091e2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80091e4:	69fb      	ldr	r3, [r7, #28]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3720      	adds	r7, #32
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b087      	sub	sp, #28
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009202:	3304      	adds	r3, #4
 8009204:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	899b      	ldrh	r3, [r3, #12]
 800920a:	461a      	mov	r2, r3
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	8952      	ldrh	r2, [r2, #10]
 8009216:	fbb3 f3f2 	udiv	r3, r3, r2
 800921a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	1d1a      	adds	r2, r3, #4
 8009220:	613a      	str	r2, [r7, #16]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d101      	bne.n	8009230 <clmt_clust+0x42>
 800922c:	2300      	movs	r3, #0
 800922e:	e010      	b.n	8009252 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	429a      	cmp	r2, r3
 8009236:	d307      	bcc.n	8009248 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009238:	697a      	ldr	r2, [r7, #20]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	617b      	str	r3, [r7, #20]
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	3304      	adds	r3, #4
 8009244:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009246:	e7e9      	b.n	800921c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009248:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	4413      	add	r3, r2
}
 8009252:	4618      	mov	r0, r3
 8009254:	371c      	adds	r7, #28
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b086      	sub	sp, #24
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009274:	d204      	bcs.n	8009280 <dir_sdi+0x22>
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	f003 031f 	and.w	r3, r3, #31
 800927c:	2b00      	cmp	r3, #0
 800927e:	d001      	beq.n	8009284 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009280:	2302      	movs	r3, #2
 8009282:	e071      	b.n	8009368 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d106      	bne.n	80092a4 <dir_sdi+0x46>
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	2b02      	cmp	r3, #2
 800929c:	d902      	bls.n	80092a4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10c      	bne.n	80092c4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	095b      	lsrs	r3, r3, #5
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	8912      	ldrh	r2, [r2, #8]
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d301      	bcc.n	80092ba <dir_sdi+0x5c>
 80092b6:	2302      	movs	r3, #2
 80092b8:	e056      	b.n	8009368 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	61da      	str	r2, [r3, #28]
 80092c2:	e02d      	b.n	8009320 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	895b      	ldrh	r3, [r3, #10]
 80092c8:	461a      	mov	r2, r3
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	899b      	ldrh	r3, [r3, #12]
 80092ce:	fb03 f302 	mul.w	r3, r3, r2
 80092d2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80092d4:	e019      	b.n	800930a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6979      	ldr	r1, [r7, #20]
 80092da:	4618      	mov	r0, r3
 80092dc:	f7ff fca3 	bl	8008c26 <get_fat>
 80092e0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e8:	d101      	bne.n	80092ee <dir_sdi+0x90>
 80092ea:	2301      	movs	r3, #1
 80092ec:	e03c      	b.n	8009368 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d904      	bls.n	80092fe <dir_sdi+0xa0>
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	69db      	ldr	r3, [r3, #28]
 80092f8:	697a      	ldr	r2, [r7, #20]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d301      	bcc.n	8009302 <dir_sdi+0xa4>
 80092fe:	2302      	movs	r3, #2
 8009300:	e032      	b.n	8009368 <dir_sdi+0x10a>
			ofs -= csz;
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800930a:	683a      	ldr	r2, [r7, #0]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	429a      	cmp	r2, r3
 8009310:	d2e1      	bcs.n	80092d6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009312:	6979      	ldr	r1, [r7, #20]
 8009314:	6938      	ldr	r0, [r7, #16]
 8009316:	f7ff fc67 	bl	8008be8 <clust2sect>
 800931a:	4602      	mov	r2, r0
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d101      	bne.n	8009332 <dir_sdi+0xd4>
 800932e:	2302      	movs	r3, #2
 8009330:	e01a      	b.n	8009368 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	69da      	ldr	r2, [r3, #28]
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	899b      	ldrh	r3, [r3, #12]
 800933a:	4619      	mov	r1, r3
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009342:	441a      	add	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	899b      	ldrh	r3, [r3, #12]
 8009352:	461a      	mov	r2, r3
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	fbb3 f0f2 	udiv	r0, r3, r2
 800935a:	fb02 f200 	mul.w	r2, r2, r0
 800935e:	1a9b      	subs	r3, r3, r2
 8009360:	18ca      	adds	r2, r1, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3718      	adds	r7, #24
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	695b      	ldr	r3, [r3, #20]
 8009384:	3320      	adds	r3, #32
 8009386:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	69db      	ldr	r3, [r3, #28]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d003      	beq.n	8009398 <dir_next+0x28>
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009396:	d301      	bcc.n	800939c <dir_next+0x2c>
 8009398:	2304      	movs	r3, #4
 800939a:	e0bb      	b.n	8009514 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	899b      	ldrh	r3, [r3, #12]
 80093a0:	461a      	mov	r2, r3
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80093a8:	fb02 f201 	mul.w	r2, r2, r1
 80093ac:	1a9b      	subs	r3, r3, r2
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f040 809d 	bne.w	80094ee <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	69db      	ldr	r3, [r3, #28]
 80093b8:	1c5a      	adds	r2, r3, #1
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10b      	bne.n	80093de <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	095b      	lsrs	r3, r3, #5
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	8912      	ldrh	r2, [r2, #8]
 80093ce:	4293      	cmp	r3, r2
 80093d0:	f0c0 808d 	bcc.w	80094ee <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	61da      	str	r2, [r3, #28]
 80093da:	2304      	movs	r3, #4
 80093dc:	e09a      	b.n	8009514 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	899b      	ldrh	r3, [r3, #12]
 80093e2:	461a      	mov	r2, r3
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	8952      	ldrh	r2, [r2, #10]
 80093ee:	3a01      	subs	r2, #1
 80093f0:	4013      	ands	r3, r2
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d17b      	bne.n	80094ee <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	4619      	mov	r1, r3
 80093fe:	4610      	mov	r0, r2
 8009400:	f7ff fc11 	bl	8008c26 <get_fat>
 8009404:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d801      	bhi.n	8009410 <dir_next+0xa0>
 800940c:	2302      	movs	r3, #2
 800940e:	e081      	b.n	8009514 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009416:	d101      	bne.n	800941c <dir_next+0xac>
 8009418:	2301      	movs	r3, #1
 800941a:	e07b      	b.n	8009514 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	69db      	ldr	r3, [r3, #28]
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	429a      	cmp	r2, r3
 8009424:	d359      	bcc.n	80094da <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d104      	bne.n	8009436 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	61da      	str	r2, [r3, #28]
 8009432:	2304      	movs	r3, #4
 8009434:	e06e      	b.n	8009514 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	699b      	ldr	r3, [r3, #24]
 800943c:	4619      	mov	r1, r3
 800943e:	4610      	mov	r0, r2
 8009440:	f7ff fe3d 	bl	80090be <create_chain>
 8009444:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d101      	bne.n	8009450 <dir_next+0xe0>
 800944c:	2307      	movs	r3, #7
 800944e:	e061      	b.n	8009514 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	2b01      	cmp	r3, #1
 8009454:	d101      	bne.n	800945a <dir_next+0xea>
 8009456:	2302      	movs	r3, #2
 8009458:	e05c      	b.n	8009514 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009460:	d101      	bne.n	8009466 <dir_next+0xf6>
 8009462:	2301      	movs	r3, #1
 8009464:	e056      	b.n	8009514 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f7ff fadc 	bl	8008a24 <sync_window>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <dir_next+0x106>
 8009472:	2301      	movs	r3, #1
 8009474:	e04e      	b.n	8009514 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	899b      	ldrh	r3, [r3, #12]
 8009480:	461a      	mov	r2, r3
 8009482:	2100      	movs	r1, #0
 8009484:	f7ff f905 	bl	8008692 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009488:	2300      	movs	r3, #0
 800948a:	613b      	str	r3, [r7, #16]
 800948c:	6979      	ldr	r1, [r7, #20]
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f7ff fbaa 	bl	8008be8 <clust2sect>
 8009494:	4602      	mov	r2, r0
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	635a      	str	r2, [r3, #52]	; 0x34
 800949a:	e012      	b.n	80094c2 <dir_next+0x152>
						fs->wflag = 1;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2201      	movs	r2, #1
 80094a0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f7ff fabe 	bl	8008a24 <sync_window>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <dir_next+0x142>
 80094ae:	2301      	movs	r3, #1
 80094b0:	e030      	b.n	8009514 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	3301      	adds	r3, #1
 80094b6:	613b      	str	r3, [r7, #16]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094bc:	1c5a      	adds	r2, r3, #1
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	635a      	str	r2, [r3, #52]	; 0x34
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	895b      	ldrh	r3, [r3, #10]
 80094c6:	461a      	mov	r2, r3
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d3e6      	bcc.n	800949c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	1ad2      	subs	r2, r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	697a      	ldr	r2, [r7, #20]
 80094de:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80094e0:	6979      	ldr	r1, [r7, #20]
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f7ff fb80 	bl	8008be8 <clust2sect>
 80094e8:	4602      	mov	r2, r0
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	899b      	ldrh	r3, [r3, #12]
 80094fe:	461a      	mov	r2, r3
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	fbb3 f0f2 	udiv	r0, r3, r2
 8009506:	fb02 f200 	mul.w	r2, r2, r0
 800950a:	1a9b      	subs	r3, r3, r2
 800950c:	18ca      	adds	r2, r1, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3718      	adds	r7, #24
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800952c:	2100      	movs	r1, #0
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f7ff fe95 	bl	800925e <dir_sdi>
 8009534:	4603      	mov	r3, r0
 8009536:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009538:	7dfb      	ldrb	r3, [r7, #23]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d12b      	bne.n	8009596 <dir_alloc+0x7a>
		n = 0;
 800953e:	2300      	movs	r3, #0
 8009540:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	69db      	ldr	r3, [r3, #28]
 8009546:	4619      	mov	r1, r3
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f7ff faaf 	bl	8008aac <move_window>
 800954e:	4603      	mov	r3, r0
 8009550:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009552:	7dfb      	ldrb	r3, [r7, #23]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d11d      	bne.n	8009594 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a1b      	ldr	r3, [r3, #32]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2be5      	cmp	r3, #229	; 0xe5
 8009560:	d004      	beq.n	800956c <dir_alloc+0x50>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a1b      	ldr	r3, [r3, #32]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d107      	bne.n	800957c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	3301      	adds	r3, #1
 8009570:	613b      	str	r3, [r7, #16]
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	429a      	cmp	r2, r3
 8009578:	d102      	bne.n	8009580 <dir_alloc+0x64>
 800957a:	e00c      	b.n	8009596 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800957c:	2300      	movs	r3, #0
 800957e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009580:	2101      	movs	r1, #1
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7ff fef4 	bl	8009370 <dir_next>
 8009588:	4603      	mov	r3, r0
 800958a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800958c:	7dfb      	ldrb	r3, [r7, #23]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d0d7      	beq.n	8009542 <dir_alloc+0x26>
 8009592:	e000      	b.n	8009596 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009594:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009596:	7dfb      	ldrb	r3, [r7, #23]
 8009598:	2b04      	cmp	r3, #4
 800959a:	d101      	bne.n	80095a0 <dir_alloc+0x84>
 800959c:	2307      	movs	r3, #7
 800959e:	75fb      	strb	r3, [r7, #23]
	return res;
 80095a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3718      	adds	r7, #24
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b084      	sub	sp, #16
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
 80095b2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	331a      	adds	r3, #26
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fe ffc7 	bl	800854c <ld_word>
 80095be:	4603      	mov	r3, r0
 80095c0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	2b03      	cmp	r3, #3
 80095c8:	d109      	bne.n	80095de <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	3314      	adds	r3, #20
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fe ffbc 	bl	800854c <ld_word>
 80095d4:	4603      	mov	r3, r0
 80095d6:	041b      	lsls	r3, r3, #16
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	4313      	orrs	r3, r2
 80095dc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80095de:	68fb      	ldr	r3, [r7, #12]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	331a      	adds	r3, #26
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	b292      	uxth	r2, r2
 80095fc:	4611      	mov	r1, r2
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fe ffdf 	bl	80085c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	2b03      	cmp	r3, #3
 800960a:	d109      	bne.n	8009620 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	f103 0214 	add.w	r2, r3, #20
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	0c1b      	lsrs	r3, r3, #16
 8009616:	b29b      	uxth	r3, r3
 8009618:	4619      	mov	r1, r3
 800961a:	4610      	mov	r0, r2
 800961c:	f7fe ffd1 	bl	80085c2 <st_word>
	}
}
 8009620:	bf00      	nop
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009628:	b590      	push	{r4, r7, lr}
 800962a:	b087      	sub	sp, #28
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	331a      	adds	r3, #26
 8009636:	4618      	mov	r0, r3
 8009638:	f7fe ff88 	bl	800854c <ld_word>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <cmp_lfn+0x1e>
 8009642:	2300      	movs	r3, #0
 8009644:	e059      	b.n	80096fa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800964e:	1e5a      	subs	r2, r3, #1
 8009650:	4613      	mov	r3, r2
 8009652:	005b      	lsls	r3, r3, #1
 8009654:	4413      	add	r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4413      	add	r3, r2
 800965a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800965c:	2301      	movs	r3, #1
 800965e:	81fb      	strh	r3, [r7, #14]
 8009660:	2300      	movs	r3, #0
 8009662:	613b      	str	r3, [r7, #16]
 8009664:	e033      	b.n	80096ce <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009666:	4a27      	ldr	r2, [pc, #156]	; (8009704 <cmp_lfn+0xdc>)
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	4413      	add	r3, r2
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	461a      	mov	r2, r3
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	4413      	add	r3, r2
 8009674:	4618      	mov	r0, r3
 8009676:	f7fe ff69 	bl	800854c <ld_word>
 800967a:	4603      	mov	r3, r0
 800967c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800967e:	89fb      	ldrh	r3, [r7, #14]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d01a      	beq.n	80096ba <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	2bfe      	cmp	r3, #254	; 0xfe
 8009688:	d812      	bhi.n	80096b0 <cmp_lfn+0x88>
 800968a:	89bb      	ldrh	r3, [r7, #12]
 800968c:	4618      	mov	r0, r3
 800968e:	f7fe fe35 	bl	80082fc <ff_wtoupper>
 8009692:	4603      	mov	r3, r0
 8009694:	461c      	mov	r4, r3
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	1c5a      	adds	r2, r3, #1
 800969a:	617a      	str	r2, [r7, #20]
 800969c:	005b      	lsls	r3, r3, #1
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	4413      	add	r3, r2
 80096a2:	881b      	ldrh	r3, [r3, #0]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7fe fe29 	bl	80082fc <ff_wtoupper>
 80096aa:	4603      	mov	r3, r0
 80096ac:	429c      	cmp	r4, r3
 80096ae:	d001      	beq.n	80096b4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80096b0:	2300      	movs	r3, #0
 80096b2:	e022      	b.n	80096fa <cmp_lfn+0xd2>
			}
			wc = uc;
 80096b4:	89bb      	ldrh	r3, [r7, #12]
 80096b6:	81fb      	strh	r3, [r7, #14]
 80096b8:	e006      	b.n	80096c8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80096ba:	89bb      	ldrh	r3, [r7, #12]
 80096bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d001      	beq.n	80096c8 <cmp_lfn+0xa0>
 80096c4:	2300      	movs	r3, #0
 80096c6:	e018      	b.n	80096fa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	3301      	adds	r3, #1
 80096cc:	613b      	str	r3, [r7, #16]
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	2b0c      	cmp	r3, #12
 80096d2:	d9c8      	bls.n	8009666 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d00b      	beq.n	80096f8 <cmp_lfn+0xd0>
 80096e0:	89fb      	ldrh	r3, [r7, #14]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d008      	beq.n	80096f8 <cmp_lfn+0xd0>
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	005b      	lsls	r3, r3, #1
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	4413      	add	r3, r2
 80096ee:	881b      	ldrh	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d001      	beq.n	80096f8 <cmp_lfn+0xd0>
 80096f4:	2300      	movs	r3, #0
 80096f6:	e000      	b.n	80096fa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80096f8:	2301      	movs	r3, #1
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	371c      	adds	r7, #28
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd90      	pop	{r4, r7, pc}
 8009702:	bf00      	nop
 8009704:	0800c814 	.word	0x0800c814

08009708 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b088      	sub	sp, #32
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	4611      	mov	r1, r2
 8009714:	461a      	mov	r2, r3
 8009716:	460b      	mov	r3, r1
 8009718:	71fb      	strb	r3, [r7, #7]
 800971a:	4613      	mov	r3, r2
 800971c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	330d      	adds	r3, #13
 8009722:	79ba      	ldrb	r2, [r7, #6]
 8009724:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	330b      	adds	r3, #11
 800972a:	220f      	movs	r2, #15
 800972c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	330c      	adds	r3, #12
 8009732:	2200      	movs	r2, #0
 8009734:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	331a      	adds	r3, #26
 800973a:	2100      	movs	r1, #0
 800973c:	4618      	mov	r0, r3
 800973e:	f7fe ff40 	bl	80085c2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009742:	79fb      	ldrb	r3, [r7, #7]
 8009744:	1e5a      	subs	r2, r3, #1
 8009746:	4613      	mov	r3, r2
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	82fb      	strh	r3, [r7, #22]
 8009756:	2300      	movs	r3, #0
 8009758:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800975a:	8afb      	ldrh	r3, [r7, #22]
 800975c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009760:	4293      	cmp	r3, r2
 8009762:	d007      	beq.n	8009774 <put_lfn+0x6c>
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	1c5a      	adds	r2, r3, #1
 8009768:	61fa      	str	r2, [r7, #28]
 800976a:	005b      	lsls	r3, r3, #1
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	4413      	add	r3, r2
 8009770:	881b      	ldrh	r3, [r3, #0]
 8009772:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009774:	4a17      	ldr	r2, [pc, #92]	; (80097d4 <put_lfn+0xcc>)
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	4413      	add	r3, r2
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	461a      	mov	r2, r3
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	4413      	add	r3, r2
 8009782:	8afa      	ldrh	r2, [r7, #22]
 8009784:	4611      	mov	r1, r2
 8009786:	4618      	mov	r0, r3
 8009788:	f7fe ff1b 	bl	80085c2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800978c:	8afb      	ldrh	r3, [r7, #22]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d102      	bne.n	8009798 <put_lfn+0x90>
 8009792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009796:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	3301      	adds	r3, #1
 800979c:	61bb      	str	r3, [r7, #24]
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	2b0c      	cmp	r3, #12
 80097a2:	d9da      	bls.n	800975a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80097a4:	8afb      	ldrh	r3, [r7, #22]
 80097a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d006      	beq.n	80097bc <put_lfn+0xb4>
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	005b      	lsls	r3, r3, #1
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	4413      	add	r3, r2
 80097b6:	881b      	ldrh	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d103      	bne.n	80097c4 <put_lfn+0xbc>
 80097bc:	79fb      	ldrb	r3, [r7, #7]
 80097be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097c2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	79fa      	ldrb	r2, [r7, #7]
 80097c8:	701a      	strb	r2, [r3, #0]
}
 80097ca:	bf00      	nop
 80097cc:	3720      	adds	r7, #32
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	0800c814 	.word	0x0800c814

080097d8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b08c      	sub	sp, #48	; 0x30
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	607a      	str	r2, [r7, #4]
 80097e4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80097e6:	220b      	movs	r2, #11
 80097e8:	68b9      	ldr	r1, [r7, #8]
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	f7fe ff30 	bl	8008650 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	2b05      	cmp	r3, #5
 80097f4:	d92b      	bls.n	800984e <gen_numname+0x76>
		sr = seq;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80097fa:	e022      	b.n	8009842 <gen_numname+0x6a>
			wc = *lfn++;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	1c9a      	adds	r2, r3, #2
 8009800:	607a      	str	r2, [r7, #4]
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009806:	2300      	movs	r3, #0
 8009808:	62bb      	str	r3, [r7, #40]	; 0x28
 800980a:	e017      	b.n	800983c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	005a      	lsls	r2, r3, #1
 8009810:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009812:	f003 0301 	and.w	r3, r3, #1
 8009816:	4413      	add	r3, r2
 8009818:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800981a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800981c:	085b      	lsrs	r3, r3, #1
 800981e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009826:	2b00      	cmp	r3, #0
 8009828:	d005      	beq.n	8009836 <gen_numname+0x5e>
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009830:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009834:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009838:	3301      	adds	r3, #1
 800983a:	62bb      	str	r3, [r7, #40]	; 0x28
 800983c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983e:	2b0f      	cmp	r3, #15
 8009840:	d9e4      	bls.n	800980c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	881b      	ldrh	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1d8      	bne.n	80097fc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800984e:	2307      	movs	r3, #7
 8009850:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	b2db      	uxtb	r3, r3
 8009856:	f003 030f 	and.w	r3, r3, #15
 800985a:	b2db      	uxtb	r3, r3
 800985c:	3330      	adds	r3, #48	; 0x30
 800985e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009866:	2b39      	cmp	r3, #57	; 0x39
 8009868:	d904      	bls.n	8009874 <gen_numname+0x9c>
 800986a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800986e:	3307      	adds	r3, #7
 8009870:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009876:	1e5a      	subs	r2, r3, #1
 8009878:	62ba      	str	r2, [r7, #40]	; 0x28
 800987a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800987e:	4413      	add	r3, r2
 8009880:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009884:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	091b      	lsrs	r3, r3, #4
 800988c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1de      	bne.n	8009852 <gen_numname+0x7a>
	ns[i] = '~';
 8009894:	f107 0214 	add.w	r2, r7, #20
 8009898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989a:	4413      	add	r3, r2
 800989c:	227e      	movs	r2, #126	; 0x7e
 800989e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80098a0:	2300      	movs	r3, #0
 80098a2:	627b      	str	r3, [r7, #36]	; 0x24
 80098a4:	e002      	b.n	80098ac <gen_numname+0xd4>
 80098a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a8:	3301      	adds	r3, #1
 80098aa:	627b      	str	r3, [r7, #36]	; 0x24
 80098ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d205      	bcs.n	80098c0 <gen_numname+0xe8>
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b8:	4413      	add	r3, r2
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	2b20      	cmp	r3, #32
 80098be:	d1f2      	bne.n	80098a6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80098c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c2:	2b07      	cmp	r3, #7
 80098c4:	d808      	bhi.n	80098d8 <gen_numname+0x100>
 80098c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c8:	1c5a      	adds	r2, r3, #1
 80098ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80098cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80098d0:	4413      	add	r3, r2
 80098d2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80098d6:	e000      	b.n	80098da <gen_numname+0x102>
 80098d8:	2120      	movs	r1, #32
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	1c5a      	adds	r2, r3, #1
 80098de:	627a      	str	r2, [r7, #36]	; 0x24
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	4413      	add	r3, r2
 80098e4:	460a      	mov	r2, r1
 80098e6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80098e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ea:	2b07      	cmp	r3, #7
 80098ec:	d9e8      	bls.n	80098c0 <gen_numname+0xe8>
}
 80098ee:	bf00      	nop
 80098f0:	3730      	adds	r7, #48	; 0x30
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80098f6:	b480      	push	{r7}
 80098f8:	b085      	sub	sp, #20
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80098fe:	2300      	movs	r3, #0
 8009900:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009902:	230b      	movs	r3, #11
 8009904:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009906:	7bfb      	ldrb	r3, [r7, #15]
 8009908:	b2da      	uxtb	r2, r3
 800990a:	0852      	lsrs	r2, r2, #1
 800990c:	01db      	lsls	r3, r3, #7
 800990e:	4313      	orrs	r3, r2
 8009910:	b2da      	uxtb	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	1c59      	adds	r1, r3, #1
 8009916:	6079      	str	r1, [r7, #4]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	4413      	add	r3, r2
 800991c:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	3b01      	subs	r3, #1
 8009922:	60bb      	str	r3, [r7, #8]
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1ed      	bne.n	8009906 <sum_sfn+0x10>
	return sum;
 800992a:	7bfb      	ldrb	r3, [r7, #15]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3714      	adds	r7, #20
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b086      	sub	sp, #24
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009946:	2100      	movs	r1, #0
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7ff fc88 	bl	800925e <dir_sdi>
 800994e:	4603      	mov	r3, r0
 8009950:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009952:	7dfb      	ldrb	r3, [r7, #23]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d001      	beq.n	800995c <dir_find+0x24>
 8009958:	7dfb      	ldrb	r3, [r7, #23]
 800995a:	e0a9      	b.n	8009ab0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800995c:	23ff      	movs	r3, #255	; 0xff
 800995e:	753b      	strb	r3, [r7, #20]
 8009960:	7d3b      	ldrb	r3, [r7, #20]
 8009962:	757b      	strb	r3, [r7, #21]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f04f 32ff 	mov.w	r2, #4294967295
 800996a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	69db      	ldr	r3, [r3, #28]
 8009970:	4619      	mov	r1, r3
 8009972:	6938      	ldr	r0, [r7, #16]
 8009974:	f7ff f89a 	bl	8008aac <move_window>
 8009978:	4603      	mov	r3, r0
 800997a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800997c:	7dfb      	ldrb	r3, [r7, #23]
 800997e:	2b00      	cmp	r3, #0
 8009980:	f040 8090 	bne.w	8009aa4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a1b      	ldr	r3, [r3, #32]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800998c:	7dbb      	ldrb	r3, [r7, #22]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d102      	bne.n	8009998 <dir_find+0x60>
 8009992:	2304      	movs	r3, #4
 8009994:	75fb      	strb	r3, [r7, #23]
 8009996:	e08a      	b.n	8009aae <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a1b      	ldr	r3, [r3, #32]
 800999c:	330b      	adds	r3, #11
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099a4:	73fb      	strb	r3, [r7, #15]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	7bfa      	ldrb	r2, [r7, #15]
 80099aa:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80099ac:	7dbb      	ldrb	r3, [r7, #22]
 80099ae:	2be5      	cmp	r3, #229	; 0xe5
 80099b0:	d007      	beq.n	80099c2 <dir_find+0x8a>
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
 80099b4:	f003 0308 	and.w	r3, r3, #8
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d009      	beq.n	80099d0 <dir_find+0x98>
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
 80099be:	2b0f      	cmp	r3, #15
 80099c0:	d006      	beq.n	80099d0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80099c2:	23ff      	movs	r3, #255	; 0xff
 80099c4:	757b      	strb	r3, [r7, #21]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f04f 32ff 	mov.w	r2, #4294967295
 80099cc:	631a      	str	r2, [r3, #48]	; 0x30
 80099ce:	e05e      	b.n	8009a8e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
 80099d2:	2b0f      	cmp	r3, #15
 80099d4:	d136      	bne.n	8009a44 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80099dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d154      	bne.n	8009a8e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80099e4:	7dbb      	ldrb	r3, [r7, #22]
 80099e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00d      	beq.n	8009a0a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	7b5b      	ldrb	r3, [r3, #13]
 80099f4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80099f6:	7dbb      	ldrb	r3, [r7, #22]
 80099f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099fc:	75bb      	strb	r3, [r7, #22]
 80099fe:	7dbb      	ldrb	r3, [r7, #22]
 8009a00:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	695a      	ldr	r2, [r3, #20]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009a0a:	7dba      	ldrb	r2, [r7, #22]
 8009a0c:	7d7b      	ldrb	r3, [r7, #21]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d115      	bne.n	8009a3e <dir_find+0x106>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	330d      	adds	r3, #13
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	7d3a      	ldrb	r2, [r7, #20]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d10e      	bne.n	8009a3e <dir_find+0x106>
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	691a      	ldr	r2, [r3, #16]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a1b      	ldr	r3, [r3, #32]
 8009a28:	4619      	mov	r1, r3
 8009a2a:	4610      	mov	r0, r2
 8009a2c:	f7ff fdfc 	bl	8009628 <cmp_lfn>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d003      	beq.n	8009a3e <dir_find+0x106>
 8009a36:	7d7b      	ldrb	r3, [r7, #21]
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	e000      	b.n	8009a40 <dir_find+0x108>
 8009a3e:	23ff      	movs	r3, #255	; 0xff
 8009a40:	757b      	strb	r3, [r7, #21]
 8009a42:	e024      	b.n	8009a8e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009a44:	7d7b      	ldrb	r3, [r7, #21]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d109      	bne.n	8009a5e <dir_find+0x126>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7ff ff51 	bl	80098f6 <sum_sfn>
 8009a54:	4603      	mov	r3, r0
 8009a56:	461a      	mov	r2, r3
 8009a58:	7d3b      	ldrb	r3, [r7, #20]
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d024      	beq.n	8009aa8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009a64:	f003 0301 	and.w	r3, r3, #1
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10a      	bne.n	8009a82 <dir_find+0x14a>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a18      	ldr	r0, [r3, #32]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	3324      	adds	r3, #36	; 0x24
 8009a74:	220b      	movs	r2, #11
 8009a76:	4619      	mov	r1, r3
 8009a78:	f7fe fe25 	bl	80086c6 <mem_cmp>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d014      	beq.n	8009aac <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009a82:	23ff      	movs	r3, #255	; 0xff
 8009a84:	757b      	strb	r3, [r7, #21]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f04f 32ff 	mov.w	r2, #4294967295
 8009a8c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009a8e:	2100      	movs	r1, #0
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f7ff fc6d 	bl	8009370 <dir_next>
 8009a96:	4603      	mov	r3, r0
 8009a98:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f43f af65 	beq.w	800996c <dir_find+0x34>
 8009aa2:	e004      	b.n	8009aae <dir_find+0x176>
		if (res != FR_OK) break;
 8009aa4:	bf00      	nop
 8009aa6:	e002      	b.n	8009aae <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009aa8:	bf00      	nop
 8009aaa:	e000      	b.n	8009aae <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009aac:	bf00      	nop

	return res;
 8009aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3718      	adds	r7, #24
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b08c      	sub	sp, #48	; 0x30
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009acc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d001      	beq.n	8009ad8 <dir_register+0x20>
 8009ad4:	2306      	movs	r3, #6
 8009ad6:	e0e0      	b.n	8009c9a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009ad8:	2300      	movs	r3, #0
 8009ada:	627b      	str	r3, [r7, #36]	; 0x24
 8009adc:	e002      	b.n	8009ae4 <dir_register+0x2c>
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	691a      	ldr	r2, [r3, #16]
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aea:	005b      	lsls	r3, r3, #1
 8009aec:	4413      	add	r3, r2
 8009aee:	881b      	ldrh	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1f4      	bne.n	8009ade <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009afa:	f107 030c 	add.w	r3, r7, #12
 8009afe:	220c      	movs	r2, #12
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7fe fda5 	bl	8008650 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009b06:	7dfb      	ldrb	r3, [r7, #23]
 8009b08:	f003 0301 	and.w	r3, r3, #1
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d032      	beq.n	8009b76 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2240      	movs	r2, #64	; 0x40
 8009b14:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009b18:	2301      	movs	r3, #1
 8009b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b1c:	e016      	b.n	8009b4c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	691a      	ldr	r2, [r3, #16]
 8009b28:	f107 010c 	add.w	r1, r7, #12
 8009b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2e:	f7ff fe53 	bl	80097d8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7ff ff00 	bl	8009938 <dir_find>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d106      	bne.n	8009b54 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b48:	3301      	adds	r3, #1
 8009b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4e:	2b63      	cmp	r3, #99	; 0x63
 8009b50:	d9e5      	bls.n	8009b1e <dir_register+0x66>
 8009b52:	e000      	b.n	8009b56 <dir_register+0x9e>
			if (res != FR_OK) break;
 8009b54:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b58:	2b64      	cmp	r3, #100	; 0x64
 8009b5a:	d101      	bne.n	8009b60 <dir_register+0xa8>
 8009b5c:	2307      	movs	r3, #7
 8009b5e:	e09c      	b.n	8009c9a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009b60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b64:	2b04      	cmp	r3, #4
 8009b66:	d002      	beq.n	8009b6e <dir_register+0xb6>
 8009b68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b6c:	e095      	b.n	8009c9a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009b6e:	7dfa      	ldrb	r2, [r7, #23]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009b76:	7dfb      	ldrb	r3, [r7, #23]
 8009b78:	f003 0302 	and.w	r3, r3, #2
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d007      	beq.n	8009b90 <dir_register+0xd8>
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	330c      	adds	r3, #12
 8009b84:	4a47      	ldr	r2, [pc, #284]	; (8009ca4 <dir_register+0x1ec>)
 8009b86:	fba2 2303 	umull	r2, r3, r2, r3
 8009b8a:	089b      	lsrs	r3, r3, #2
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	e000      	b.n	8009b92 <dir_register+0xda>
 8009b90:	2301      	movs	r3, #1
 8009b92:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009b94:	6a39      	ldr	r1, [r7, #32]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f7ff fcc0 	bl	800951c <dir_alloc>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009ba2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d148      	bne.n	8009c3c <dir_register+0x184>
 8009baa:	6a3b      	ldr	r3, [r7, #32]
 8009bac:	3b01      	subs	r3, #1
 8009bae:	623b      	str	r3, [r7, #32]
 8009bb0:	6a3b      	ldr	r3, [r7, #32]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d042      	beq.n	8009c3c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	695a      	ldr	r2, [r3, #20]
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	015b      	lsls	r3, r3, #5
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7ff fb4b 	bl	800925e <dir_sdi>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009bce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d132      	bne.n	8009c3c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	3324      	adds	r3, #36	; 0x24
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7ff fe8b 	bl	80098f6 <sum_sfn>
 8009be0:	4603      	mov	r3, r0
 8009be2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	69db      	ldr	r3, [r3, #28]
 8009be8:	4619      	mov	r1, r3
 8009bea:	69f8      	ldr	r0, [r7, #28]
 8009bec:	f7fe ff5e 	bl	8008aac <move_window>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009bf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d11d      	bne.n	8009c3a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	6918      	ldr	r0, [r3, #16]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a19      	ldr	r1, [r3, #32]
 8009c06:	6a3b      	ldr	r3, [r7, #32]
 8009c08:	b2da      	uxtb	r2, r3
 8009c0a:	7efb      	ldrb	r3, [r7, #27]
 8009c0c:	f7ff fd7c 	bl	8009708 <put_lfn>
				fs->wflag = 1;
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	2201      	movs	r2, #1
 8009c14:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009c16:	2100      	movs	r1, #0
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f7ff fba9 	bl	8009370 <dir_next>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009c24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d107      	bne.n	8009c3c <dir_register+0x184>
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	623b      	str	r3, [r7, #32]
 8009c32:	6a3b      	ldr	r3, [r7, #32]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1d5      	bne.n	8009be4 <dir_register+0x12c>
 8009c38:	e000      	b.n	8009c3c <dir_register+0x184>
				if (res != FR_OK) break;
 8009c3a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009c3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d128      	bne.n	8009c96 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	4619      	mov	r1, r3
 8009c4a:	69f8      	ldr	r0, [r7, #28]
 8009c4c:	f7fe ff2e 	bl	8008aac <move_window>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009c56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d11b      	bne.n	8009c96 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	2220      	movs	r2, #32
 8009c64:	2100      	movs	r1, #0
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7fe fd13 	bl	8008692 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a18      	ldr	r0, [r3, #32]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	3324      	adds	r3, #36	; 0x24
 8009c74:	220b      	movs	r2, #11
 8009c76:	4619      	mov	r1, r3
 8009c78:	f7fe fcea 	bl	8008650 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	330c      	adds	r3, #12
 8009c88:	f002 0218 	and.w	r2, r2, #24
 8009c8c:	b2d2      	uxtb	r2, r2
 8009c8e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	2201      	movs	r2, #1
 8009c94:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009c96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3730      	adds	r7, #48	; 0x30
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	4ec4ec4f 	.word	0x4ec4ec4f

08009ca8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b08a      	sub	sp, #40	; 0x28
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	613b      	str	r3, [r7, #16]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	60fb      	str	r3, [r7, #12]
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	617b      	str	r3, [r7, #20]
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	1c5a      	adds	r2, r3, #1
 8009ccc:	61ba      	str	r2, [r7, #24]
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009cd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cd8:	2b1f      	cmp	r3, #31
 8009cda:	d940      	bls.n	8009d5e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009cdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cde:	2b2f      	cmp	r3, #47	; 0x2f
 8009ce0:	d006      	beq.n	8009cf0 <create_name+0x48>
 8009ce2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ce4:	2b5c      	cmp	r3, #92	; 0x5c
 8009ce6:	d110      	bne.n	8009d0a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009ce8:	e002      	b.n	8009cf0 <create_name+0x48>
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	3301      	adds	r3, #1
 8009cee:	61bb      	str	r3, [r7, #24]
 8009cf0:	693a      	ldr	r2, [r7, #16]
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	2b2f      	cmp	r3, #47	; 0x2f
 8009cfa:	d0f6      	beq.n	8009cea <create_name+0x42>
 8009cfc:	693a      	ldr	r2, [r7, #16]
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	4413      	add	r3, r2
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	2b5c      	cmp	r3, #92	; 0x5c
 8009d06:	d0f0      	beq.n	8009cea <create_name+0x42>
			break;
 8009d08:	e02a      	b.n	8009d60 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	2bfe      	cmp	r3, #254	; 0xfe
 8009d0e:	d901      	bls.n	8009d14 <create_name+0x6c>
 8009d10:	2306      	movs	r3, #6
 8009d12:	e177      	b.n	800a004 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009d14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009d1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d1c:	2101      	movs	r1, #1
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fe fab0 	bl	8008284 <ff_convert>
 8009d24:	4603      	mov	r3, r0
 8009d26:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009d28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d101      	bne.n	8009d32 <create_name+0x8a>
 8009d2e:	2306      	movs	r3, #6
 8009d30:	e168      	b.n	800a004 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d34:	2b7f      	cmp	r3, #127	; 0x7f
 8009d36:	d809      	bhi.n	8009d4c <create_name+0xa4>
 8009d38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	48b3      	ldr	r0, [pc, #716]	; (800a00c <create_name+0x364>)
 8009d3e:	f7fe fce9 	bl	8008714 <chk_chr>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d001      	beq.n	8009d4c <create_name+0xa4>
 8009d48:	2306      	movs	r3, #6
 8009d4a:	e15b      	b.n	800a004 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	1c5a      	adds	r2, r3, #1
 8009d50:	617a      	str	r2, [r7, #20]
 8009d52:	005b      	lsls	r3, r3, #1
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	4413      	add	r3, r2
 8009d58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009d5a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009d5c:	e7b4      	b.n	8009cc8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009d5e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009d60:	693a      	ldr	r2, [r7, #16]
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	441a      	add	r2, r3
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009d6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d6c:	2b1f      	cmp	r3, #31
 8009d6e:	d801      	bhi.n	8009d74 <create_name+0xcc>
 8009d70:	2304      	movs	r3, #4
 8009d72:	e000      	b.n	8009d76 <create_name+0xce>
 8009d74:	2300      	movs	r3, #0
 8009d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009d7a:	e011      	b.n	8009da0 <create_name+0xf8>
		w = lfn[di - 1];
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009d82:	3b01      	subs	r3, #1
 8009d84:	005b      	lsls	r3, r3, #1
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	4413      	add	r3, r2
 8009d8a:	881b      	ldrh	r3, [r3, #0]
 8009d8c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009d8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d90:	2b20      	cmp	r3, #32
 8009d92:	d002      	beq.n	8009d9a <create_name+0xf2>
 8009d94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d96:	2b2e      	cmp	r3, #46	; 0x2e
 8009d98:	d106      	bne.n	8009da8 <create_name+0x100>
		di--;
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1ea      	bne.n	8009d7c <create_name+0xd4>
 8009da6:	e000      	b.n	8009daa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009da8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	005b      	lsls	r3, r3, #1
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	4413      	add	r3, r2
 8009db2:	2200      	movs	r2, #0
 8009db4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d101      	bne.n	8009dc0 <create_name+0x118>
 8009dbc:	2306      	movs	r3, #6
 8009dbe:	e121      	b.n	800a004 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	3324      	adds	r3, #36	; 0x24
 8009dc4:	220b      	movs	r2, #11
 8009dc6:	2120      	movs	r1, #32
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7fe fc62 	bl	8008692 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009dce:	2300      	movs	r3, #0
 8009dd0:	61bb      	str	r3, [r7, #24]
 8009dd2:	e002      	b.n	8009dda <create_name+0x132>
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	61bb      	str	r3, [r7, #24]
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	005b      	lsls	r3, r3, #1
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	4413      	add	r3, r2
 8009de2:	881b      	ldrh	r3, [r3, #0]
 8009de4:	2b20      	cmp	r3, #32
 8009de6:	d0f5      	beq.n	8009dd4 <create_name+0x12c>
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	005b      	lsls	r3, r3, #1
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	4413      	add	r3, r2
 8009df0:	881b      	ldrh	r3, [r3, #0]
 8009df2:	2b2e      	cmp	r3, #46	; 0x2e
 8009df4:	d0ee      	beq.n	8009dd4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d009      	beq.n	8009e10 <create_name+0x168>
 8009dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e00:	f043 0303 	orr.w	r3, r3, #3
 8009e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009e08:	e002      	b.n	8009e10 <create_name+0x168>
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	617b      	str	r3, [r7, #20]
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d009      	beq.n	8009e2a <create_name+0x182>
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	005b      	lsls	r3, r3, #1
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	4413      	add	r3, r2
 8009e24:	881b      	ldrh	r3, [r3, #0]
 8009e26:	2b2e      	cmp	r3, #46	; 0x2e
 8009e28:	d1ef      	bne.n	8009e0a <create_name+0x162>

	i = b = 0; ni = 8;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009e30:	2300      	movs	r3, #0
 8009e32:	623b      	str	r3, [r7, #32]
 8009e34:	2308      	movs	r3, #8
 8009e36:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	1c5a      	adds	r2, r3, #1
 8009e3c:	61ba      	str	r2, [r7, #24]
 8009e3e:	005b      	lsls	r3, r3, #1
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	4413      	add	r3, r2
 8009e44:	881b      	ldrh	r3, [r3, #0]
 8009e46:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009e48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	f000 8090 	beq.w	8009f70 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009e50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e52:	2b20      	cmp	r3, #32
 8009e54:	d006      	beq.n	8009e64 <create_name+0x1bc>
 8009e56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e58:	2b2e      	cmp	r3, #46	; 0x2e
 8009e5a:	d10a      	bne.n	8009e72 <create_name+0x1ca>
 8009e5c:	69ba      	ldr	r2, [r7, #24]
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d006      	beq.n	8009e72 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e68:	f043 0303 	orr.w	r3, r3, #3
 8009e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e70:	e07d      	b.n	8009f6e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009e72:	6a3a      	ldr	r2, [r7, #32]
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d203      	bcs.n	8009e82 <create_name+0x1da>
 8009e7a:	69ba      	ldr	r2, [r7, #24]
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d123      	bne.n	8009eca <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	2b0b      	cmp	r3, #11
 8009e86:	d106      	bne.n	8009e96 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e8c:	f043 0303 	orr.w	r3, r3, #3
 8009e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e94:	e06f      	b.n	8009f76 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009e96:	69ba      	ldr	r2, [r7, #24]
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d005      	beq.n	8009eaa <create_name+0x202>
 8009e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ea2:	f043 0303 	orr.w	r3, r3, #3
 8009ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009eaa:	69ba      	ldr	r2, [r7, #24]
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d860      	bhi.n	8009f74 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	61bb      	str	r3, [r7, #24]
 8009eb6:	2308      	movs	r3, #8
 8009eb8:	623b      	str	r3, [r7, #32]
 8009eba:	230b      	movs	r3, #11
 8009ebc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009ebe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009ec8:	e051      	b.n	8009f6e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009eca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ecc:	2b7f      	cmp	r3, #127	; 0x7f
 8009ece:	d914      	bls.n	8009efa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009ed0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7fe f9d5 	bl	8008284 <ff_convert>
 8009eda:	4603      	mov	r3, r0
 8009edc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009ede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d004      	beq.n	8009eee <create_name+0x246>
 8009ee4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ee6:	3b80      	subs	r3, #128	; 0x80
 8009ee8:	4a49      	ldr	r2, [pc, #292]	; (800a010 <create_name+0x368>)
 8009eea:	5cd3      	ldrb	r3, [r2, r3]
 8009eec:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009eee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ef2:	f043 0302 	orr.w	r3, r3, #2
 8009ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009efa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d007      	beq.n	8009f10 <create_name+0x268>
 8009f00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f02:	4619      	mov	r1, r3
 8009f04:	4843      	ldr	r0, [pc, #268]	; (800a014 <create_name+0x36c>)
 8009f06:	f7fe fc05 	bl	8008714 <chk_chr>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d008      	beq.n	8009f22 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009f10:	235f      	movs	r3, #95	; 0x5f
 8009f12:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f18:	f043 0303 	orr.w	r3, r3, #3
 8009f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f20:	e01b      	b.n	8009f5a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009f22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f24:	2b40      	cmp	r3, #64	; 0x40
 8009f26:	d909      	bls.n	8009f3c <create_name+0x294>
 8009f28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f2a:	2b5a      	cmp	r3, #90	; 0x5a
 8009f2c:	d806      	bhi.n	8009f3c <create_name+0x294>
					b |= 2;
 8009f2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f32:	f043 0302 	orr.w	r3, r3, #2
 8009f36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009f3a:	e00e      	b.n	8009f5a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009f3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f3e:	2b60      	cmp	r3, #96	; 0x60
 8009f40:	d90b      	bls.n	8009f5a <create_name+0x2b2>
 8009f42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f44:	2b7a      	cmp	r3, #122	; 0x7a
 8009f46:	d808      	bhi.n	8009f5a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009f48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f4c:	f043 0301 	orr.w	r3, r3, #1
 8009f50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009f54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f56:	3b20      	subs	r3, #32
 8009f58:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	1c5a      	adds	r2, r3, #1
 8009f5e:	623a      	str	r2, [r7, #32]
 8009f60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009f62:	b2d1      	uxtb	r1, r2
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	4413      	add	r3, r2
 8009f68:	460a      	mov	r2, r1
 8009f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009f6e:	e763      	b.n	8009e38 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009f70:	bf00      	nop
 8009f72:	e000      	b.n	8009f76 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8009f74:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009f7c:	2be5      	cmp	r3, #229	; 0xe5
 8009f7e:	d103      	bne.n	8009f88 <create_name+0x2e0>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2205      	movs	r2, #5
 8009f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	2b08      	cmp	r3, #8
 8009f8c:	d104      	bne.n	8009f98 <create_name+0x2f0>
 8009f8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009f98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f9c:	f003 030c 	and.w	r3, r3, #12
 8009fa0:	2b0c      	cmp	r3, #12
 8009fa2:	d005      	beq.n	8009fb0 <create_name+0x308>
 8009fa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fa8:	f003 0303 	and.w	r3, r3, #3
 8009fac:	2b03      	cmp	r3, #3
 8009fae:	d105      	bne.n	8009fbc <create_name+0x314>
 8009fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fb4:	f043 0302 	orr.w	r3, r3, #2
 8009fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fc0:	f003 0302 	and.w	r3, r3, #2
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d117      	bne.n	8009ff8 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009fc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fcc:	f003 0303 	and.w	r3, r3, #3
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d105      	bne.n	8009fe0 <create_name+0x338>
 8009fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fd8:	f043 0310 	orr.w	r3, r3, #16
 8009fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009fe0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fe4:	f003 030c 	and.w	r3, r3, #12
 8009fe8:	2b04      	cmp	r3, #4
 8009fea:	d105      	bne.n	8009ff8 <create_name+0x350>
 8009fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ff0:	f043 0308 	orr.w	r3, r3, #8
 8009ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009ffe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800a002:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a004:	4618      	mov	r0, r3
 800a006:	3728      	adds	r7, #40	; 0x28
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	0800c368 	.word	0x0800c368
 800a010:	0800c794 	.word	0x0800c794
 800a014:	0800c374 	.word	0x0800c374

0800a018 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b086      	sub	sp, #24
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a02c:	e002      	b.n	800a034 <follow_path+0x1c>
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	3301      	adds	r3, #1
 800a032:	603b      	str	r3, [r7, #0]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	2b2f      	cmp	r3, #47	; 0x2f
 800a03a:	d0f8      	beq.n	800a02e <follow_path+0x16>
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	2b5c      	cmp	r3, #92	; 0x5c
 800a042:	d0f4      	beq.n	800a02e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	2200      	movs	r2, #0
 800a048:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	2b1f      	cmp	r3, #31
 800a050:	d80a      	bhi.n	800a068 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2280      	movs	r2, #128	; 0x80
 800a056:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a05a:	2100      	movs	r1, #0
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7ff f8fe 	bl	800925e <dir_sdi>
 800a062:	4603      	mov	r3, r0
 800a064:	75fb      	strb	r3, [r7, #23]
 800a066:	e048      	b.n	800a0fa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a068:	463b      	mov	r3, r7
 800a06a:	4619      	mov	r1, r3
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f7ff fe1b 	bl	8009ca8 <create_name>
 800a072:	4603      	mov	r3, r0
 800a074:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a076:	7dfb      	ldrb	r3, [r7, #23]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d139      	bne.n	800a0f0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f7ff fc5b 	bl	8009938 <dir_find>
 800a082:	4603      	mov	r3, r0
 800a084:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a08c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a08e:	7dfb      	ldrb	r3, [r7, #23]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00a      	beq.n	800a0aa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a094:	7dfb      	ldrb	r3, [r7, #23]
 800a096:	2b04      	cmp	r3, #4
 800a098:	d12c      	bne.n	800a0f4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a09a:	7afb      	ldrb	r3, [r7, #11]
 800a09c:	f003 0304 	and.w	r3, r3, #4
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d127      	bne.n	800a0f4 <follow_path+0xdc>
 800a0a4:	2305      	movs	r3, #5
 800a0a6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a0a8:	e024      	b.n	800a0f4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a0aa:	7afb      	ldrb	r3, [r7, #11]
 800a0ac:	f003 0304 	and.w	r3, r3, #4
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d121      	bne.n	800a0f8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	799b      	ldrb	r3, [r3, #6]
 800a0b8:	f003 0310 	and.w	r3, r3, #16
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d102      	bne.n	800a0c6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a0c0:	2305      	movs	r3, #5
 800a0c2:	75fb      	strb	r3, [r7, #23]
 800a0c4:	e019      	b.n	800a0fa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	695b      	ldr	r3, [r3, #20]
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	8992      	ldrh	r2, [r2, #12]
 800a0d4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a0d8:	fb02 f200 	mul.w	r2, r2, r0
 800a0dc:	1a9b      	subs	r3, r3, r2
 800a0de:	440b      	add	r3, r1
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f7ff fa61 	bl	80095aa <ld_clust>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a0ee:	e7bb      	b.n	800a068 <follow_path+0x50>
			if (res != FR_OK) break;
 800a0f0:	bf00      	nop
 800a0f2:	e002      	b.n	800a0fa <follow_path+0xe2>
				break;
 800a0f4:	bf00      	nop
 800a0f6:	e000      	b.n	800a0fa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a0f8:	bf00      	nop
			}
		}
	}

	return res;
 800a0fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3718      	adds	r7, #24
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a104:	b480      	push	{r7}
 800a106:	b087      	sub	sp, #28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a10c:	f04f 33ff 	mov.w	r3, #4294967295
 800a110:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d031      	beq.n	800a17e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	617b      	str	r3, [r7, #20]
 800a120:	e002      	b.n	800a128 <get_ldnumber+0x24>
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	3301      	adds	r3, #1
 800a126:	617b      	str	r3, [r7, #20]
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	2b1f      	cmp	r3, #31
 800a12e:	d903      	bls.n	800a138 <get_ldnumber+0x34>
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	2b3a      	cmp	r3, #58	; 0x3a
 800a136:	d1f4      	bne.n	800a122 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	2b3a      	cmp	r3, #58	; 0x3a
 800a13e:	d11c      	bne.n	800a17a <get_ldnumber+0x76>
			tp = *path;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	1c5a      	adds	r2, r3, #1
 800a14a:	60fa      	str	r2, [r7, #12]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	3b30      	subs	r3, #48	; 0x30
 800a150:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	2b09      	cmp	r3, #9
 800a156:	d80e      	bhi.n	800a176 <get_ldnumber+0x72>
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d10a      	bne.n	800a176 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d107      	bne.n	800a176 <get_ldnumber+0x72>
					vol = (int)i;
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	3301      	adds	r3, #1
 800a16e:	617b      	str	r3, [r7, #20]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	e002      	b.n	800a180 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a17a:	2300      	movs	r3, #0
 800a17c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a17e:	693b      	ldr	r3, [r7, #16]
}
 800a180:	4618      	mov	r0, r3
 800a182:	371c      	adds	r7, #28
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	70da      	strb	r2, [r3, #3]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a1a4:	6839      	ldr	r1, [r7, #0]
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7fe fc80 	bl	8008aac <move_window>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <check_fs+0x2a>
 800a1b2:	2304      	movs	r3, #4
 800a1b4:	e038      	b.n	800a228 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	3338      	adds	r3, #56	; 0x38
 800a1ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7fe f9c4 	bl	800854c <ld_word>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d001      	beq.n	800a1d4 <check_fs+0x48>
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	e029      	b.n	800a228 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a1da:	2be9      	cmp	r3, #233	; 0xe9
 800a1dc:	d009      	beq.n	800a1f2 <check_fs+0x66>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a1e4:	2beb      	cmp	r3, #235	; 0xeb
 800a1e6:	d11e      	bne.n	800a226 <check_fs+0x9a>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a1ee:	2b90      	cmp	r3, #144	; 0x90
 800a1f0:	d119      	bne.n	800a226 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	3338      	adds	r3, #56	; 0x38
 800a1f6:	3336      	adds	r3, #54	; 0x36
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7fe f9bf 	bl	800857c <ld_dword>
 800a1fe:	4603      	mov	r3, r0
 800a200:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a204:	4a0a      	ldr	r2, [pc, #40]	; (800a230 <check_fs+0xa4>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d101      	bne.n	800a20e <check_fs+0x82>
 800a20a:	2300      	movs	r3, #0
 800a20c:	e00c      	b.n	800a228 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	3338      	adds	r3, #56	; 0x38
 800a212:	3352      	adds	r3, #82	; 0x52
 800a214:	4618      	mov	r0, r3
 800a216:	f7fe f9b1 	bl	800857c <ld_dword>
 800a21a:	4602      	mov	r2, r0
 800a21c:	4b05      	ldr	r3, [pc, #20]	; (800a234 <check_fs+0xa8>)
 800a21e:	429a      	cmp	r2, r3
 800a220:	d101      	bne.n	800a226 <check_fs+0x9a>
 800a222:	2300      	movs	r3, #0
 800a224:	e000      	b.n	800a228 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a226:	2302      	movs	r3, #2
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	00544146 	.word	0x00544146
 800a234:	33544146 	.word	0x33544146

0800a238 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b096      	sub	sp, #88	; 0x58
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	4613      	mov	r3, r2
 800a244:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	2200      	movs	r2, #0
 800a24a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f7ff ff59 	bl	800a104 <get_ldnumber>
 800a252:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a256:	2b00      	cmp	r3, #0
 800a258:	da01      	bge.n	800a25e <find_volume+0x26>
 800a25a:	230b      	movs	r3, #11
 800a25c:	e268      	b.n	800a730 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a25e:	4ab0      	ldr	r2, [pc, #704]	; (800a520 <find_volume+0x2e8>)
 800a260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a266:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <find_volume+0x3a>
 800a26e:	230c      	movs	r3, #12
 800a270:	e25e      	b.n	800a730 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a276:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a278:	79fb      	ldrb	r3, [r7, #7]
 800a27a:	f023 0301 	bic.w	r3, r3, #1
 800a27e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d01a      	beq.n	800a2be <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28a:	785b      	ldrb	r3, [r3, #1]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7fe f8bf 	bl	8008410 <disk_status>
 800a292:	4603      	mov	r3, r0
 800a294:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a298:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a29c:	f003 0301 	and.w	r3, r3, #1
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10c      	bne.n	800a2be <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a2a4:	79fb      	ldrb	r3, [r7, #7]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d007      	beq.n	800a2ba <find_volume+0x82>
 800a2aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2ae:	f003 0304 	and.w	r3, r3, #4
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d001      	beq.n	800a2ba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a2b6:	230a      	movs	r3, #10
 800a2b8:	e23a      	b.n	800a730 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	e238      	b.n	800a730 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2c6:	b2da      	uxtb	r2, r3
 800a2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ce:	785b      	ldrb	r3, [r3, #1]
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7fe f8b7 	bl	8008444 <disk_initialize>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a2dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2e0:	f003 0301 	and.w	r3, r3, #1
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d001      	beq.n	800a2ec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	e221      	b.n	800a730 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a2ec:	79fb      	ldrb	r3, [r7, #7]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d007      	beq.n	800a302 <find_volume+0xca>
 800a2f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2f6:	f003 0304 	and.w	r3, r3, #4
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a2fe:	230a      	movs	r3, #10
 800a300:	e216      	b.n	800a730 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a304:	7858      	ldrb	r0, [r3, #1]
 800a306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a308:	330c      	adds	r3, #12
 800a30a:	461a      	mov	r2, r3
 800a30c:	2102      	movs	r1, #2
 800a30e:	f7fe f8ff 	bl	8008510 <disk_ioctl>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d001      	beq.n	800a31c <find_volume+0xe4>
 800a318:	2301      	movs	r3, #1
 800a31a:	e209      	b.n	800a730 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31e:	899b      	ldrh	r3, [r3, #12]
 800a320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a324:	d80d      	bhi.n	800a342 <find_volume+0x10a>
 800a326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a328:	899b      	ldrh	r3, [r3, #12]
 800a32a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a32e:	d308      	bcc.n	800a342 <find_volume+0x10a>
 800a330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a332:	899b      	ldrh	r3, [r3, #12]
 800a334:	461a      	mov	r2, r3
 800a336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a338:	899b      	ldrh	r3, [r3, #12]
 800a33a:	3b01      	subs	r3, #1
 800a33c:	4013      	ands	r3, r2
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d001      	beq.n	800a346 <find_volume+0x10e>
 800a342:	2301      	movs	r3, #1
 800a344:	e1f4      	b.n	800a730 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a346:	2300      	movs	r3, #0
 800a348:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a34a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a34c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a34e:	f7ff ff1d 	bl	800a18c <check_fs>
 800a352:	4603      	mov	r3, r0
 800a354:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a358:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d14b      	bne.n	800a3f8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a360:	2300      	movs	r3, #0
 800a362:	643b      	str	r3, [r7, #64]	; 0x40
 800a364:	e01f      	b.n	800a3a6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a368:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a36c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a36e:	011b      	lsls	r3, r3, #4
 800a370:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a374:	4413      	add	r3, r2
 800a376:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37a:	3304      	adds	r3, #4
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d006      	beq.n	800a390 <find_volume+0x158>
 800a382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a384:	3308      	adds	r3, #8
 800a386:	4618      	mov	r0, r3
 800a388:	f7fe f8f8 	bl	800857c <ld_dword>
 800a38c:	4602      	mov	r2, r0
 800a38e:	e000      	b.n	800a392 <find_volume+0x15a>
 800a390:	2200      	movs	r2, #0
 800a392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a39a:	440b      	add	r3, r1
 800a39c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a3a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	643b      	str	r3, [r7, #64]	; 0x40
 800a3a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3a8:	2b03      	cmp	r3, #3
 800a3aa:	d9dc      	bls.n	800a366 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a3b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d002      	beq.n	800a3bc <find_volume+0x184>
 800a3b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a3bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a3c4:	4413      	add	r3, r2
 800a3c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a3ca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a3cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d005      	beq.n	800a3de <find_volume+0x1a6>
 800a3d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a3d6:	f7ff fed9 	bl	800a18c <check_fs>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	e000      	b.n	800a3e0 <find_volume+0x1a8>
 800a3de:	2303      	movs	r3, #3
 800a3e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a3e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d905      	bls.n	800a3f8 <find_volume+0x1c0>
 800a3ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	643b      	str	r3, [r7, #64]	; 0x40
 800a3f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3f4:	2b03      	cmp	r3, #3
 800a3f6:	d9e1      	bls.n	800a3bc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a3f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	d101      	bne.n	800a404 <find_volume+0x1cc>
 800a400:	2301      	movs	r3, #1
 800a402:	e195      	b.n	800a730 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a404:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d901      	bls.n	800a410 <find_volume+0x1d8>
 800a40c:	230d      	movs	r3, #13
 800a40e:	e18f      	b.n	800a730 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a412:	3338      	adds	r3, #56	; 0x38
 800a414:	330b      	adds	r3, #11
 800a416:	4618      	mov	r0, r3
 800a418:	f7fe f898 	bl	800854c <ld_word>
 800a41c:	4603      	mov	r3, r0
 800a41e:	461a      	mov	r2, r3
 800a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a422:	899b      	ldrh	r3, [r3, #12]
 800a424:	429a      	cmp	r2, r3
 800a426:	d001      	beq.n	800a42c <find_volume+0x1f4>
 800a428:	230d      	movs	r3, #13
 800a42a:	e181      	b.n	800a730 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42e:	3338      	adds	r3, #56	; 0x38
 800a430:	3316      	adds	r3, #22
 800a432:	4618      	mov	r0, r3
 800a434:	f7fe f88a 	bl	800854c <ld_word>
 800a438:	4603      	mov	r3, r0
 800a43a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a43c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d106      	bne.n	800a450 <find_volume+0x218>
 800a442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a444:	3338      	adds	r3, #56	; 0x38
 800a446:	3324      	adds	r3, #36	; 0x24
 800a448:	4618      	mov	r0, r3
 800a44a:	f7fe f897 	bl	800857c <ld_dword>
 800a44e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a452:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a454:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a458:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a462:	789b      	ldrb	r3, [r3, #2]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d005      	beq.n	800a474 <find_volume+0x23c>
 800a468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46a:	789b      	ldrb	r3, [r3, #2]
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d001      	beq.n	800a474 <find_volume+0x23c>
 800a470:	230d      	movs	r3, #13
 800a472:	e15d      	b.n	800a730 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a476:	789b      	ldrb	r3, [r3, #2]
 800a478:	461a      	mov	r2, r3
 800a47a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a47c:	fb02 f303 	mul.w	r3, r2, r3
 800a480:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a484:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a488:	b29a      	uxth	r2, r3
 800a48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a490:	895b      	ldrh	r3, [r3, #10]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d008      	beq.n	800a4a8 <find_volume+0x270>
 800a496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a498:	895b      	ldrh	r3, [r3, #10]
 800a49a:	461a      	mov	r2, r3
 800a49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49e:	895b      	ldrh	r3, [r3, #10]
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	4013      	ands	r3, r2
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d001      	beq.n	800a4ac <find_volume+0x274>
 800a4a8:	230d      	movs	r3, #13
 800a4aa:	e141      	b.n	800a730 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ae:	3338      	adds	r3, #56	; 0x38
 800a4b0:	3311      	adds	r3, #17
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fe f84a 	bl	800854c <ld_word>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c2:	891b      	ldrh	r3, [r3, #8]
 800a4c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4c6:	8992      	ldrh	r2, [r2, #12]
 800a4c8:	0952      	lsrs	r2, r2, #5
 800a4ca:	b292      	uxth	r2, r2
 800a4cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4d0:	fb02 f201 	mul.w	r2, r2, r1
 800a4d4:	1a9b      	subs	r3, r3, r2
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d001      	beq.n	800a4e0 <find_volume+0x2a8>
 800a4dc:	230d      	movs	r3, #13
 800a4de:	e127      	b.n	800a730 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e2:	3338      	adds	r3, #56	; 0x38
 800a4e4:	3313      	adds	r3, #19
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fe f830 	bl	800854c <ld_word>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a4f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d106      	bne.n	800a504 <find_volume+0x2cc>
 800a4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f8:	3338      	adds	r3, #56	; 0x38
 800a4fa:	3320      	adds	r3, #32
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fe f83d 	bl	800857c <ld_dword>
 800a502:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a506:	3338      	adds	r3, #56	; 0x38
 800a508:	330e      	adds	r3, #14
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fe f81e 	bl	800854c <ld_word>
 800a510:	4603      	mov	r3, r0
 800a512:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a514:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a516:	2b00      	cmp	r3, #0
 800a518:	d104      	bne.n	800a524 <find_volume+0x2ec>
 800a51a:	230d      	movs	r3, #13
 800a51c:	e108      	b.n	800a730 <find_volume+0x4f8>
 800a51e:	bf00      	nop
 800a520:	200000e0 	.word	0x200000e0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a524:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a528:	4413      	add	r3, r2
 800a52a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a52c:	8911      	ldrh	r1, [r2, #8]
 800a52e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a530:	8992      	ldrh	r2, [r2, #12]
 800a532:	0952      	lsrs	r2, r2, #5
 800a534:	b292      	uxth	r2, r2
 800a536:	fbb1 f2f2 	udiv	r2, r1, r2
 800a53a:	b292      	uxth	r2, r2
 800a53c:	4413      	add	r3, r2
 800a53e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a540:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a544:	429a      	cmp	r2, r3
 800a546:	d201      	bcs.n	800a54c <find_volume+0x314>
 800a548:	230d      	movs	r3, #13
 800a54a:	e0f1      	b.n	800a730 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a54c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a554:	8952      	ldrh	r2, [r2, #10]
 800a556:	fbb3 f3f2 	udiv	r3, r3, r2
 800a55a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d101      	bne.n	800a566 <find_volume+0x32e>
 800a562:	230d      	movs	r3, #13
 800a564:	e0e4      	b.n	800a730 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800a566:	2303      	movs	r3, #3
 800a568:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a572:	4293      	cmp	r3, r2
 800a574:	d802      	bhi.n	800a57c <find_volume+0x344>
 800a576:	2302      	movs	r3, #2
 800a578:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a582:	4293      	cmp	r3, r2
 800a584:	d802      	bhi.n	800a58c <find_volume+0x354>
 800a586:	2301      	movs	r3, #1
 800a588:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58e:	1c9a      	adds	r2, r3, #2
 800a590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a592:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a596:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a598:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a59a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a59c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a59e:	441a      	add	r2, r3
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a5a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a8:	441a      	add	r2, r3
 800a5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ac:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a5ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5b2:	2b03      	cmp	r3, #3
 800a5b4:	d11e      	bne.n	800a5f4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b8:	3338      	adds	r3, #56	; 0x38
 800a5ba:	332a      	adds	r3, #42	; 0x2a
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fd ffc5 	bl	800854c <ld_word>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d001      	beq.n	800a5cc <find_volume+0x394>
 800a5c8:	230d      	movs	r3, #13
 800a5ca:	e0b1      	b.n	800a730 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ce:	891b      	ldrh	r3, [r3, #8]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d001      	beq.n	800a5d8 <find_volume+0x3a0>
 800a5d4:	230d      	movs	r3, #13
 800a5d6:	e0ab      	b.n	800a730 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5da:	3338      	adds	r3, #56	; 0x38
 800a5dc:	332c      	adds	r3, #44	; 0x2c
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fd ffcc 	bl	800857c <ld_dword>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ec:	69db      	ldr	r3, [r3, #28]
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	647b      	str	r3, [r7, #68]	; 0x44
 800a5f2:	e01f      	b.n	800a634 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f6:	891b      	ldrh	r3, [r3, #8]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d101      	bne.n	800a600 <find_volume+0x3c8>
 800a5fc:	230d      	movs	r3, #13
 800a5fe:	e097      	b.n	800a730 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a606:	441a      	add	r2, r3
 800a608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a60c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a610:	2b02      	cmp	r3, #2
 800a612:	d103      	bne.n	800a61c <find_volume+0x3e4>
 800a614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a616:	69db      	ldr	r3, [r3, #28]
 800a618:	005b      	lsls	r3, r3, #1
 800a61a:	e00a      	b.n	800a632 <find_volume+0x3fa>
 800a61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61e:	69da      	ldr	r2, [r3, #28]
 800a620:	4613      	mov	r3, r2
 800a622:	005b      	lsls	r3, r3, #1
 800a624:	4413      	add	r3, r2
 800a626:	085a      	lsrs	r2, r3, #1
 800a628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62a:	69db      	ldr	r3, [r3, #28]
 800a62c:	f003 0301 	and.w	r3, r3, #1
 800a630:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a632:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a636:	6a1a      	ldr	r2, [r3, #32]
 800a638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63a:	899b      	ldrh	r3, [r3, #12]
 800a63c:	4619      	mov	r1, r3
 800a63e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a640:	440b      	add	r3, r1
 800a642:	3b01      	subs	r3, #1
 800a644:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a646:	8989      	ldrh	r1, [r1, #12]
 800a648:	fbb3 f3f1 	udiv	r3, r3, r1
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d201      	bcs.n	800a654 <find_volume+0x41c>
 800a650:	230d      	movs	r3, #13
 800a652:	e06d      	b.n	800a730 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a656:	f04f 32ff 	mov.w	r2, #4294967295
 800a65a:	619a      	str	r2, [r3, #24]
 800a65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65e:	699a      	ldr	r2, [r3, #24]
 800a660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a662:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a666:	2280      	movs	r2, #128	; 0x80
 800a668:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a66a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d149      	bne.n	800a706 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a674:	3338      	adds	r3, #56	; 0x38
 800a676:	3330      	adds	r3, #48	; 0x30
 800a678:	4618      	mov	r0, r3
 800a67a:	f7fd ff67 	bl	800854c <ld_word>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b01      	cmp	r3, #1
 800a682:	d140      	bne.n	800a706 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a686:	3301      	adds	r3, #1
 800a688:	4619      	mov	r1, r3
 800a68a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a68c:	f7fe fa0e 	bl	8008aac <move_window>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d137      	bne.n	800a706 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800a696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a698:	2200      	movs	r2, #0
 800a69a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69e:	3338      	adds	r3, #56	; 0x38
 800a6a0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7fd ff51 	bl	800854c <ld_word>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d127      	bne.n	800a706 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b8:	3338      	adds	r3, #56	; 0x38
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7fd ff5e 	bl	800857c <ld_dword>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	4b1d      	ldr	r3, [pc, #116]	; (800a738 <find_volume+0x500>)
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d11e      	bne.n	800a706 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ca:	3338      	adds	r3, #56	; 0x38
 800a6cc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fd ff53 	bl	800857c <ld_dword>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	4b18      	ldr	r3, [pc, #96]	; (800a73c <find_volume+0x504>)
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d113      	bne.n	800a706 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e0:	3338      	adds	r3, #56	; 0x38
 800a6e2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fd ff48 	bl	800857c <ld_dword>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f0:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f4:	3338      	adds	r3, #56	; 0x38
 800a6f6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fd ff3e 	bl	800857c <ld_dword>
 800a700:	4602      	mov	r2, r0
 800a702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a704:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a708:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a70c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a70e:	4b0c      	ldr	r3, [pc, #48]	; (800a740 <find_volume+0x508>)
 800a710:	881b      	ldrh	r3, [r3, #0]
 800a712:	3301      	adds	r3, #1
 800a714:	b29a      	uxth	r2, r3
 800a716:	4b0a      	ldr	r3, [pc, #40]	; (800a740 <find_volume+0x508>)
 800a718:	801a      	strh	r2, [r3, #0]
 800a71a:	4b09      	ldr	r3, [pc, #36]	; (800a740 <find_volume+0x508>)
 800a71c:	881a      	ldrh	r2, [r3, #0]
 800a71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a720:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a724:	4a07      	ldr	r2, [pc, #28]	; (800a744 <find_volume+0x50c>)
 800a726:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a728:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a72a:	f7fe f957 	bl	80089dc <clear_lock>
#endif
	return FR_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3758      	adds	r7, #88	; 0x58
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	41615252 	.word	0x41615252
 800a73c:	61417272 	.word	0x61417272
 800a740:	200000e4 	.word	0x200000e4
 800a744:	20000108 	.word	0x20000108

0800a748 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a752:	2309      	movs	r3, #9
 800a754:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d01c      	beq.n	800a796 <validate+0x4e>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d018      	beq.n	800a796 <validate+0x4e>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d013      	beq.n	800a796 <validate+0x4e>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	889a      	ldrh	r2, [r3, #4]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	88db      	ldrh	r3, [r3, #6]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d10c      	bne.n	800a796 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	785b      	ldrb	r3, [r3, #1]
 800a782:	4618      	mov	r0, r3
 800a784:	f7fd fe44 	bl	8008410 <disk_status>
 800a788:	4603      	mov	r3, r0
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d101      	bne.n	800a796 <validate+0x4e>
			res = FR_OK;
 800a792:	2300      	movs	r3, #0
 800a794:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a796:	7bfb      	ldrb	r3, [r7, #15]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d102      	bne.n	800a7a2 <validate+0x5a>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	e000      	b.n	800a7a4 <validate+0x5c>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	683a      	ldr	r2, [r7, #0]
 800a7a6:	6013      	str	r3, [r2, #0]
	return res;
 800a7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
	...

0800a7b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b088      	sub	sp, #32
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	4613      	mov	r3, r2
 800a7c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a7c6:	f107 0310 	add.w	r3, r7, #16
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7ff fc9a 	bl	800a104 <get_ldnumber>
 800a7d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	da01      	bge.n	800a7dc <f_mount+0x28>
 800a7d8:	230b      	movs	r3, #11
 800a7da:	e02b      	b.n	800a834 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a7dc:	4a17      	ldr	r2, [pc, #92]	; (800a83c <f_mount+0x88>)
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d005      	beq.n	800a7f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a7ec:	69b8      	ldr	r0, [r7, #24]
 800a7ee:	f7fe f8f5 	bl	80089dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d002      	beq.n	800a804 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2200      	movs	r2, #0
 800a802:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	490d      	ldr	r1, [pc, #52]	; (800a83c <f_mount+0x88>)
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d002      	beq.n	800a81a <f_mount+0x66>
 800a814:	79fb      	ldrb	r3, [r7, #7]
 800a816:	2b01      	cmp	r3, #1
 800a818:	d001      	beq.n	800a81e <f_mount+0x6a>
 800a81a:	2300      	movs	r3, #0
 800a81c:	e00a      	b.n	800a834 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a81e:	f107 010c 	add.w	r1, r7, #12
 800a822:	f107 0308 	add.w	r3, r7, #8
 800a826:	2200      	movs	r2, #0
 800a828:	4618      	mov	r0, r3
 800a82a:	f7ff fd05 	bl	800a238 <find_volume>
 800a82e:	4603      	mov	r3, r0
 800a830:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a832:	7dfb      	ldrb	r3, [r7, #23]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3720      	adds	r7, #32
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	200000e0 	.word	0x200000e0

0800a840 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b09a      	sub	sp, #104	; 0x68
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	4613      	mov	r3, r2
 800a84c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <f_open+0x18>
 800a854:	2309      	movs	r3, #9
 800a856:	e1bb      	b.n	800abd0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a858:	79fb      	ldrb	r3, [r7, #7]
 800a85a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a85e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a860:	79fa      	ldrb	r2, [r7, #7]
 800a862:	f107 0114 	add.w	r1, r7, #20
 800a866:	f107 0308 	add.w	r3, r7, #8
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7ff fce4 	bl	800a238 <find_volume>
 800a870:	4603      	mov	r3, r0
 800a872:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a876:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f040 819f 	bne.w	800abbe <f_open+0x37e>
		dj.obj.fs = fs;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a884:	68ba      	ldr	r2, [r7, #8]
 800a886:	f107 0318 	add.w	r3, r7, #24
 800a88a:	4611      	mov	r1, r2
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7ff fbc3 	bl	800a018 <follow_path>
 800a892:	4603      	mov	r3, r0
 800a894:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a898:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d11a      	bne.n	800a8d6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a8a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a8a4:	b25b      	sxtb	r3, r3
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	da03      	bge.n	800a8b2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a8aa:	2306      	movs	r3, #6
 800a8ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a8b0:	e011      	b.n	800a8d6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a8b2:	79fb      	ldrb	r3, [r7, #7]
 800a8b4:	f023 0301 	bic.w	r3, r3, #1
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	bf14      	ite	ne
 800a8bc:	2301      	movne	r3, #1
 800a8be:	2300      	moveq	r3, #0
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	f107 0318 	add.w	r3, r7, #24
 800a8c8:	4611      	mov	r1, r2
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7fd ff3e 	bl	800874c <chk_lock>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a8d6:	79fb      	ldrb	r3, [r7, #7]
 800a8d8:	f003 031c 	and.w	r3, r3, #28
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d07f      	beq.n	800a9e0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a8e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d017      	beq.n	800a918 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a8e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a8ec:	2b04      	cmp	r3, #4
 800a8ee:	d10e      	bne.n	800a90e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a8f0:	f7fd ff88 	bl	8008804 <enq_lock>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d006      	beq.n	800a908 <f_open+0xc8>
 800a8fa:	f107 0318 	add.w	r3, r7, #24
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7ff f8da 	bl	8009ab8 <dir_register>
 800a904:	4603      	mov	r3, r0
 800a906:	e000      	b.n	800a90a <f_open+0xca>
 800a908:	2312      	movs	r3, #18
 800a90a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a90e:	79fb      	ldrb	r3, [r7, #7]
 800a910:	f043 0308 	orr.w	r3, r3, #8
 800a914:	71fb      	strb	r3, [r7, #7]
 800a916:	e010      	b.n	800a93a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a918:	7fbb      	ldrb	r3, [r7, #30]
 800a91a:	f003 0311 	and.w	r3, r3, #17
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d003      	beq.n	800a92a <f_open+0xea>
					res = FR_DENIED;
 800a922:	2307      	movs	r3, #7
 800a924:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a928:	e007      	b.n	800a93a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a92a:	79fb      	ldrb	r3, [r7, #7]
 800a92c:	f003 0304 	and.w	r3, r3, #4
 800a930:	2b00      	cmp	r3, #0
 800a932:	d002      	beq.n	800a93a <f_open+0xfa>
 800a934:	2308      	movs	r3, #8
 800a936:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a93a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d168      	bne.n	800aa14 <f_open+0x1d4>
 800a942:	79fb      	ldrb	r3, [r7, #7]
 800a944:	f003 0308 	and.w	r3, r3, #8
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d063      	beq.n	800aa14 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a94c:	f7fd fb14 	bl	8007f78 <get_fattime>
 800a950:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a954:	330e      	adds	r3, #14
 800a956:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a958:	4618      	mov	r0, r3
 800a95a:	f7fd fe4d 	bl	80085f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a960:	3316      	adds	r3, #22
 800a962:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a964:	4618      	mov	r0, r3
 800a966:	f7fd fe47 	bl	80085f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96c:	330b      	adds	r3, #11
 800a96e:	2220      	movs	r2, #32
 800a970:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a976:	4611      	mov	r1, r2
 800a978:	4618      	mov	r0, r3
 800a97a:	f7fe fe16 	bl	80095aa <ld_clust>
 800a97e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a984:	2200      	movs	r2, #0
 800a986:	4618      	mov	r0, r3
 800a988:	f7fe fe2e 	bl	80095e8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98e:	331c      	adds	r3, #28
 800a990:	2100      	movs	r1, #0
 800a992:	4618      	mov	r0, r3
 800a994:	f7fd fe30 	bl	80085f8 <st_dword>
					fs->wflag = 1;
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	2201      	movs	r2, #1
 800a99c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a99e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d037      	beq.n	800aa14 <f_open+0x1d4>
						dw = fs->winsect;
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9a8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a9aa:	f107 0318 	add.w	r3, r7, #24
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7fe fb1e 	bl	8008ff4 <remove_chain>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a9be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d126      	bne.n	800aa14 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fe f86e 	bl	8008aac <move_window>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a9da:	3a01      	subs	r2, #1
 800a9dc:	615a      	str	r2, [r3, #20]
 800a9de:	e019      	b.n	800aa14 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a9e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d115      	bne.n	800aa14 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a9e8:	7fbb      	ldrb	r3, [r7, #30]
 800a9ea:	f003 0310 	and.w	r3, r3, #16
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d003      	beq.n	800a9fa <f_open+0x1ba>
					res = FR_NO_FILE;
 800a9f2:	2304      	movs	r3, #4
 800a9f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a9f8:	e00c      	b.n	800aa14 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a9fa:	79fb      	ldrb	r3, [r7, #7]
 800a9fc:	f003 0302 	and.w	r3, r3, #2
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d007      	beq.n	800aa14 <f_open+0x1d4>
 800aa04:	7fbb      	ldrb	r3, [r7, #30]
 800aa06:	f003 0301 	and.w	r3, r3, #1
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d002      	beq.n	800aa14 <f_open+0x1d4>
						res = FR_DENIED;
 800aa0e:	2307      	movs	r3, #7
 800aa10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800aa14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d128      	bne.n	800aa6e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800aa1c:	79fb      	ldrb	r3, [r7, #7]
 800aa1e:	f003 0308 	and.w	r3, r3, #8
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d003      	beq.n	800aa2e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800aa26:	79fb      	ldrb	r3, [r7, #7]
 800aa28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa2c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800aa36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aa3c:	79fb      	ldrb	r3, [r7, #7]
 800aa3e:	f023 0301 	bic.w	r3, r3, #1
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	bf14      	ite	ne
 800aa46:	2301      	movne	r3, #1
 800aa48:	2300      	moveq	r3, #0
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	f107 0318 	add.w	r3, r7, #24
 800aa52:	4611      	mov	r1, r2
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7fd fef7 	bl	8008848 <inc_lock>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d102      	bne.n	800aa6e <f_open+0x22e>
 800aa68:	2302      	movs	r3, #2
 800aa6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800aa6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	f040 80a3 	bne.w	800abbe <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa7c:	4611      	mov	r1, r2
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7fe fd93 	bl	80095aa <ld_clust>
 800aa84:	4602      	mov	r2, r0
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aa8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8c:	331c      	adds	r3, #28
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fd fd74 	bl	800857c <ld_dword>
 800aa94:	4602      	mov	r2, r0
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800aaa0:	697a      	ldr	r2, [r7, #20]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	88da      	ldrh	r2, [r3, #6]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	79fa      	ldrb	r2, [r7, #7]
 800aab2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2200      	movs	r2, #0
 800aabe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	3330      	adds	r3, #48	; 0x30
 800aaca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aace:	2100      	movs	r1, #0
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7fd fdde 	bl	8008692 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800aad6:	79fb      	ldrb	r3, [r7, #7]
 800aad8:	f003 0320 	and.w	r3, r3, #32
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d06e      	beq.n	800abbe <f_open+0x37e>
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	68db      	ldr	r3, [r3, #12]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d06a      	beq.n	800abbe <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	68da      	ldr	r2, [r3, #12]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	895b      	ldrh	r3, [r3, #10]
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	899b      	ldrh	r3, [r3, #12]
 800aafa:	fb03 f302 	mul.w	r3, r3, r2
 800aafe:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab0c:	e016      	b.n	800ab3c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fe f887 	bl	8008c26 <get_fat>
 800ab18:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ab1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d802      	bhi.n	800ab26 <f_open+0x2e6>
 800ab20:	2302      	movs	r3, #2
 800ab22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ab26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab2c:	d102      	bne.n	800ab34 <f_open+0x2f4>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ab34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab38:	1ad3      	subs	r3, r2, r3
 800ab3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d103      	bne.n	800ab4c <f_open+0x30c>
 800ab44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d8e0      	bhi.n	800ab0e <f_open+0x2ce>
				}
				fp->clust = clst;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab50:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ab52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d131      	bne.n	800abbe <f_open+0x37e>
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	899b      	ldrh	r3, [r3, #12]
 800ab5e:	461a      	mov	r2, r3
 800ab60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab62:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab66:	fb02 f201 	mul.w	r2, r2, r1
 800ab6a:	1a9b      	subs	r3, r3, r2
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d026      	beq.n	800abbe <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7fe f837 	bl	8008be8 <clust2sect>
 800ab7a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ab7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d103      	bne.n	800ab8a <f_open+0x34a>
						res = FR_INT_ERR;
 800ab82:	2302      	movs	r3, #2
 800ab84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ab88:	e019      	b.n	800abbe <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	899b      	ldrh	r3, [r3, #12]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab92:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab98:	441a      	add	r2, r3
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	7858      	ldrb	r0, [r3, #1]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6a1a      	ldr	r2, [r3, #32]
 800abac:	2301      	movs	r3, #1
 800abae:	f7fd fc6f 	bl	8008490 <disk_read>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d002      	beq.n	800abbe <f_open+0x37e>
 800abb8:	2301      	movs	r3, #1
 800abba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800abbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d002      	beq.n	800abcc <f_open+0x38c>
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2200      	movs	r2, #0
 800abca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800abcc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3768      	adds	r7, #104	; 0x68
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b08e      	sub	sp, #56	; 0x38
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
 800abe4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2200      	movs	r2, #0
 800abee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f107 0214 	add.w	r2, r7, #20
 800abf6:	4611      	mov	r1, r2
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7ff fda5 	bl	800a748 <validate>
 800abfe:	4603      	mov	r3, r0
 800ac00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ac04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d107      	bne.n	800ac1c <f_read+0x44>
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	7d5b      	ldrb	r3, [r3, #21]
 800ac10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ac14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <f_read+0x4a>
 800ac1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac20:	e135      	b.n	800ae8e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	7d1b      	ldrb	r3, [r3, #20]
 800ac26:	f003 0301 	and.w	r3, r3, #1
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d101      	bne.n	800ac32 <f_read+0x5a>
 800ac2e:	2307      	movs	r3, #7
 800ac30:	e12d      	b.n	800ae8e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	68da      	ldr	r2, [r3, #12]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	1ad3      	subs	r3, r2, r3
 800ac3c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	6a3b      	ldr	r3, [r7, #32]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	f240 811e 	bls.w	800ae84 <f_read+0x2ac>
 800ac48:	6a3b      	ldr	r3, [r7, #32]
 800ac4a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ac4c:	e11a      	b.n	800ae84 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	697a      	ldr	r2, [r7, #20]
 800ac54:	8992      	ldrh	r2, [r2, #12]
 800ac56:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac5a:	fb02 f201 	mul.w	r2, r2, r1
 800ac5e:	1a9b      	subs	r3, r3, r2
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f040 80d5 	bne.w	800ae10 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	8992      	ldrh	r2, [r2, #12]
 800ac6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac72:	697a      	ldr	r2, [r7, #20]
 800ac74:	8952      	ldrh	r2, [r2, #10]
 800ac76:	3a01      	subs	r2, #1
 800ac78:	4013      	ands	r3, r2
 800ac7a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d12f      	bne.n	800ace2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	699b      	ldr	r3, [r3, #24]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d103      	bne.n	800ac92 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	689b      	ldr	r3, [r3, #8]
 800ac8e:	633b      	str	r3, [r7, #48]	; 0x30
 800ac90:	e013      	b.n	800acba <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d007      	beq.n	800acaa <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	699b      	ldr	r3, [r3, #24]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f7fe faa4 	bl	80091ee <clmt_clust>
 800aca6:	6338      	str	r0, [r7, #48]	; 0x30
 800aca8:	e007      	b.n	800acba <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	69db      	ldr	r3, [r3, #28]
 800acb0:	4619      	mov	r1, r3
 800acb2:	4610      	mov	r0, r2
 800acb4:	f7fd ffb7 	bl	8008c26 <get_fat>
 800acb8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800acba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d804      	bhi.n	800acca <f_read+0xf2>
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2202      	movs	r2, #2
 800acc4:	755a      	strb	r2, [r3, #21]
 800acc6:	2302      	movs	r3, #2
 800acc8:	e0e1      	b.n	800ae8e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800acca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800accc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd0:	d104      	bne.n	800acdc <f_read+0x104>
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2201      	movs	r2, #1
 800acd6:	755a      	strb	r2, [r3, #21]
 800acd8:	2301      	movs	r3, #1
 800acda:	e0d8      	b.n	800ae8e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ace0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ace2:	697a      	ldr	r2, [r7, #20]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	69db      	ldr	r3, [r3, #28]
 800ace8:	4619      	mov	r1, r3
 800acea:	4610      	mov	r0, r2
 800acec:	f7fd ff7c 	bl	8008be8 <clust2sect>
 800acf0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d104      	bne.n	800ad02 <f_read+0x12a>
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2202      	movs	r2, #2
 800acfc:	755a      	strb	r2, [r3, #21]
 800acfe:	2302      	movs	r3, #2
 800ad00:	e0c5      	b.n	800ae8e <f_read+0x2b6>
			sect += csect;
 800ad02:	69ba      	ldr	r2, [r7, #24]
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	4413      	add	r3, r2
 800ad08:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	899b      	ldrh	r3, [r3, #12]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad16:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ad18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d041      	beq.n	800ada2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ad1e:	69fa      	ldr	r2, [r7, #28]
 800ad20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad22:	4413      	add	r3, r2
 800ad24:	697a      	ldr	r2, [r7, #20]
 800ad26:	8952      	ldrh	r2, [r2, #10]
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d905      	bls.n	800ad38 <f_read+0x160>
					cc = fs->csize - csect;
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	895b      	ldrh	r3, [r3, #10]
 800ad30:	461a      	mov	r2, r3
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	1ad3      	subs	r3, r2, r3
 800ad36:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	7858      	ldrb	r0, [r3, #1]
 800ad3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3e:	69ba      	ldr	r2, [r7, #24]
 800ad40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad42:	f7fd fba5 	bl	8008490 <disk_read>
 800ad46:	4603      	mov	r3, r0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d004      	beq.n	800ad56 <f_read+0x17e>
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	755a      	strb	r2, [r3, #21]
 800ad52:	2301      	movs	r3, #1
 800ad54:	e09b      	b.n	800ae8e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	7d1b      	ldrb	r3, [r3, #20]
 800ad5a:	b25b      	sxtb	r3, r3
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	da18      	bge.n	800ad92 <f_read+0x1ba>
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6a1a      	ldr	r2, [r3, #32]
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	1ad3      	subs	r3, r2, r3
 800ad68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d911      	bls.n	800ad92 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6a1a      	ldr	r2, [r3, #32]
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	697a      	ldr	r2, [r7, #20]
 800ad78:	8992      	ldrh	r2, [r2, #12]
 800ad7a:	fb02 f303 	mul.w	r3, r2, r3
 800ad7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad80:	18d0      	adds	r0, r2, r3
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	899b      	ldrh	r3, [r3, #12]
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	f7fd fc5f 	bl	8008650 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	899b      	ldrh	r3, [r3, #12]
 800ad96:	461a      	mov	r2, r3
 800ad98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9a:	fb02 f303 	mul.w	r3, r2, r3
 800ad9e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ada0:	e05c      	b.n	800ae5c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6a1b      	ldr	r3, [r3, #32]
 800ada6:	69ba      	ldr	r2, [r7, #24]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d02e      	beq.n	800ae0a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	7d1b      	ldrb	r3, [r3, #20]
 800adb0:	b25b      	sxtb	r3, r3
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	da18      	bge.n	800ade8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	7858      	ldrb	r0, [r3, #1]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6a1a      	ldr	r2, [r3, #32]
 800adc4:	2301      	movs	r3, #1
 800adc6:	f7fd fb83 	bl	80084d0 <disk_write>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d004      	beq.n	800adda <f_read+0x202>
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2201      	movs	r2, #1
 800add4:	755a      	strb	r2, [r3, #21]
 800add6:	2301      	movs	r3, #1
 800add8:	e059      	b.n	800ae8e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	7d1b      	ldrb	r3, [r3, #20]
 800adde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ade2:	b2da      	uxtb	r2, r3
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	7858      	ldrb	r0, [r3, #1]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800adf2:	2301      	movs	r3, #1
 800adf4:	69ba      	ldr	r2, [r7, #24]
 800adf6:	f7fd fb4b 	bl	8008490 <disk_read>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d004      	beq.n	800ae0a <f_read+0x232>
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2201      	movs	r2, #1
 800ae04:	755a      	strb	r2, [r3, #21]
 800ae06:	2301      	movs	r3, #1
 800ae08:	e041      	b.n	800ae8e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	69ba      	ldr	r2, [r7, #24]
 800ae0e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	899b      	ldrh	r3, [r3, #12]
 800ae14:	4618      	mov	r0, r3
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	699b      	ldr	r3, [r3, #24]
 800ae1a:	697a      	ldr	r2, [r7, #20]
 800ae1c:	8992      	ldrh	r2, [r2, #12]
 800ae1e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae22:	fb02 f201 	mul.w	r2, r2, r1
 800ae26:	1a9b      	subs	r3, r3, r2
 800ae28:	1ac3      	subs	r3, r0, r3
 800ae2a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ae2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d901      	bls.n	800ae38 <f_read+0x260>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	699b      	ldr	r3, [r3, #24]
 800ae42:	697a      	ldr	r2, [r7, #20]
 800ae44:	8992      	ldrh	r2, [r2, #12]
 800ae46:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae4a:	fb02 f200 	mul.w	r2, r2, r0
 800ae4e:	1a9b      	subs	r3, r3, r2
 800ae50:	440b      	add	r3, r1
 800ae52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae54:	4619      	mov	r1, r3
 800ae56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae58:	f7fd fbfa 	bl	8008650 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ae5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae60:	4413      	add	r3, r2
 800ae62:	627b      	str	r3, [r7, #36]	; 0x24
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	699a      	ldr	r2, [r3, #24]
 800ae68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6a:	441a      	add	r2, r3
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	619a      	str	r2, [r3, #24]
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae76:	441a      	add	r2, r3
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	601a      	str	r2, [r3, #0]
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f47f aee1 	bne.w	800ac4e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3738      	adds	r7, #56	; 0x38
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b08c      	sub	sp, #48	; 0x30
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	60f8      	str	r0, [r7, #12]
 800ae9e:	60b9      	str	r1, [r7, #8]
 800aea0:	607a      	str	r2, [r7, #4]
 800aea2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f107 0210 	add.w	r2, r7, #16
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7ff fc46 	bl	800a748 <validate>
 800aebc:	4603      	mov	r3, r0
 800aebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aec2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d107      	bne.n	800aeda <f_write+0x44>
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	7d5b      	ldrb	r3, [r3, #21]
 800aece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aed2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d002      	beq.n	800aee0 <f_write+0x4a>
 800aeda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aede:	e16a      	b.n	800b1b6 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	7d1b      	ldrb	r3, [r3, #20]
 800aee4:	f003 0302 	and.w	r3, r3, #2
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d101      	bne.n	800aef0 <f_write+0x5a>
 800aeec:	2307      	movs	r3, #7
 800aeee:	e162      	b.n	800b1b6 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	699a      	ldr	r2, [r3, #24]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	441a      	add	r2, r3
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	699b      	ldr	r3, [r3, #24]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	f080 814c 	bcs.w	800b19a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	699b      	ldr	r3, [r3, #24]
 800af06:	43db      	mvns	r3, r3
 800af08:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800af0a:	e146      	b.n	800b19a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	699b      	ldr	r3, [r3, #24]
 800af10:	693a      	ldr	r2, [r7, #16]
 800af12:	8992      	ldrh	r2, [r2, #12]
 800af14:	fbb3 f1f2 	udiv	r1, r3, r2
 800af18:	fb02 f201 	mul.w	r2, r2, r1
 800af1c:	1a9b      	subs	r3, r3, r2
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f040 80f1 	bne.w	800b106 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	699b      	ldr	r3, [r3, #24]
 800af28:	693a      	ldr	r2, [r7, #16]
 800af2a:	8992      	ldrh	r2, [r2, #12]
 800af2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	8952      	ldrh	r2, [r2, #10]
 800af34:	3a01      	subs	r2, #1
 800af36:	4013      	ands	r3, r2
 800af38:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d143      	bne.n	800afc8 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d10c      	bne.n	800af62 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800af4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af50:	2b00      	cmp	r3, #0
 800af52:	d11a      	bne.n	800af8a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2100      	movs	r1, #0
 800af58:	4618      	mov	r0, r3
 800af5a:	f7fe f8b0 	bl	80090be <create_chain>
 800af5e:	62b8      	str	r0, [r7, #40]	; 0x28
 800af60:	e013      	b.n	800af8a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af66:	2b00      	cmp	r3, #0
 800af68:	d007      	beq.n	800af7a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	699b      	ldr	r3, [r3, #24]
 800af6e:	4619      	mov	r1, r3
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	f7fe f93c 	bl	80091ee <clmt_clust>
 800af76:	62b8      	str	r0, [r7, #40]	; 0x28
 800af78:	e007      	b.n	800af8a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800af7a:	68fa      	ldr	r2, [r7, #12]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	69db      	ldr	r3, [r3, #28]
 800af80:	4619      	mov	r1, r3
 800af82:	4610      	mov	r0, r2
 800af84:	f7fe f89b 	bl	80090be <create_chain>
 800af88:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800af8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f000 8109 	beq.w	800b1a4 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800af92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af94:	2b01      	cmp	r3, #1
 800af96:	d104      	bne.n	800afa2 <f_write+0x10c>
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2202      	movs	r2, #2
 800af9c:	755a      	strb	r2, [r3, #21]
 800af9e:	2302      	movs	r3, #2
 800afa0:	e109      	b.n	800b1b6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800afa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa8:	d104      	bne.n	800afb4 <f_write+0x11e>
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2201      	movs	r2, #1
 800afae:	755a      	strb	r2, [r3, #21]
 800afb0:	2301      	movs	r3, #1
 800afb2:	e100      	b.n	800b1b6 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afb8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d102      	bne.n	800afc8 <f_write+0x132>
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afc6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	7d1b      	ldrb	r3, [r3, #20]
 800afcc:	b25b      	sxtb	r3, r3
 800afce:	2b00      	cmp	r3, #0
 800afd0:	da18      	bge.n	800b004 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	7858      	ldrb	r0, [r3, #1]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6a1a      	ldr	r2, [r3, #32]
 800afe0:	2301      	movs	r3, #1
 800afe2:	f7fd fa75 	bl	80084d0 <disk_write>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d004      	beq.n	800aff6 <f_write+0x160>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2201      	movs	r2, #1
 800aff0:	755a      	strb	r2, [r3, #21]
 800aff2:	2301      	movs	r3, #1
 800aff4:	e0df      	b.n	800b1b6 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	7d1b      	ldrb	r3, [r3, #20]
 800affa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800affe:	b2da      	uxtb	r2, r3
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b004:	693a      	ldr	r2, [r7, #16]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	69db      	ldr	r3, [r3, #28]
 800b00a:	4619      	mov	r1, r3
 800b00c:	4610      	mov	r0, r2
 800b00e:	f7fd fdeb 	bl	8008be8 <clust2sect>
 800b012:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d104      	bne.n	800b024 <f_write+0x18e>
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2202      	movs	r2, #2
 800b01e:	755a      	strb	r2, [r3, #21]
 800b020:	2302      	movs	r3, #2
 800b022:	e0c8      	b.n	800b1b6 <f_write+0x320>
			sect += csect;
 800b024:	697a      	ldr	r2, [r7, #20]
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	4413      	add	r3, r2
 800b02a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	899b      	ldrh	r3, [r3, #12]
 800b030:	461a      	mov	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	fbb3 f3f2 	udiv	r3, r3, r2
 800b038:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d043      	beq.n	800b0c8 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b040:	69ba      	ldr	r2, [r7, #24]
 800b042:	6a3b      	ldr	r3, [r7, #32]
 800b044:	4413      	add	r3, r2
 800b046:	693a      	ldr	r2, [r7, #16]
 800b048:	8952      	ldrh	r2, [r2, #10]
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d905      	bls.n	800b05a <f_write+0x1c4>
					cc = fs->csize - csect;
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	895b      	ldrh	r3, [r3, #10]
 800b052:	461a      	mov	r2, r3
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	1ad3      	subs	r3, r2, r3
 800b058:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	7858      	ldrb	r0, [r3, #1]
 800b05e:	6a3b      	ldr	r3, [r7, #32]
 800b060:	697a      	ldr	r2, [r7, #20]
 800b062:	69f9      	ldr	r1, [r7, #28]
 800b064:	f7fd fa34 	bl	80084d0 <disk_write>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d004      	beq.n	800b078 <f_write+0x1e2>
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2201      	movs	r2, #1
 800b072:	755a      	strb	r2, [r3, #21]
 800b074:	2301      	movs	r3, #1
 800b076:	e09e      	b.n	800b1b6 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6a1a      	ldr	r2, [r3, #32]
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	1ad3      	subs	r3, r2, r3
 800b080:	6a3a      	ldr	r2, [r7, #32]
 800b082:	429a      	cmp	r2, r3
 800b084:	d918      	bls.n	800b0b8 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6a1a      	ldr	r2, [r3, #32]
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	1ad3      	subs	r3, r2, r3
 800b094:	693a      	ldr	r2, [r7, #16]
 800b096:	8992      	ldrh	r2, [r2, #12]
 800b098:	fb02 f303 	mul.w	r3, r2, r3
 800b09c:	69fa      	ldr	r2, [r7, #28]
 800b09e:	18d1      	adds	r1, r2, r3
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	899b      	ldrh	r3, [r3, #12]
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	f7fd fad3 	bl	8008650 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	7d1b      	ldrb	r3, [r3, #20]
 800b0ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0b2:	b2da      	uxtb	r2, r3
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	899b      	ldrh	r3, [r3, #12]
 800b0bc:	461a      	mov	r2, r3
 800b0be:	6a3b      	ldr	r3, [r7, #32]
 800b0c0:	fb02 f303 	mul.w	r3, r2, r3
 800b0c4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b0c6:	e04b      	b.n	800b160 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6a1b      	ldr	r3, [r3, #32]
 800b0cc:	697a      	ldr	r2, [r7, #20]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d016      	beq.n	800b100 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	699a      	ldr	r2, [r3, #24]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d210      	bcs.n	800b100 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	7858      	ldrb	r0, [r3, #1]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	f7fd f9d0 	bl	8008490 <disk_read>
 800b0f0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d004      	beq.n	800b100 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	755a      	strb	r2, [r3, #21]
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e05a      	b.n	800b1b6 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	697a      	ldr	r2, [r7, #20]
 800b104:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	899b      	ldrh	r3, [r3, #12]
 800b10a:	4618      	mov	r0, r3
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	693a      	ldr	r2, [r7, #16]
 800b112:	8992      	ldrh	r2, [r2, #12]
 800b114:	fbb3 f1f2 	udiv	r1, r3, r2
 800b118:	fb02 f201 	mul.w	r2, r2, r1
 800b11c:	1a9b      	subs	r3, r3, r2
 800b11e:	1ac3      	subs	r3, r0, r3
 800b120:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	429a      	cmp	r2, r3
 800b128:	d901      	bls.n	800b12e <f_write+0x298>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	699b      	ldr	r3, [r3, #24]
 800b138:	693a      	ldr	r2, [r7, #16]
 800b13a:	8992      	ldrh	r2, [r2, #12]
 800b13c:	fbb3 f0f2 	udiv	r0, r3, r2
 800b140:	fb02 f200 	mul.w	r2, r2, r0
 800b144:	1a9b      	subs	r3, r3, r2
 800b146:	440b      	add	r3, r1
 800b148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b14a:	69f9      	ldr	r1, [r7, #28]
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7fd fa7f 	bl	8008650 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	7d1b      	ldrb	r3, [r3, #20]
 800b156:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b15a:	b2da      	uxtb	r2, r3
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b160:	69fa      	ldr	r2, [r7, #28]
 800b162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b164:	4413      	add	r3, r2
 800b166:	61fb      	str	r3, [r7, #28]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	699a      	ldr	r2, [r3, #24]
 800b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16e:	441a      	add	r2, r3
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	619a      	str	r2, [r3, #24]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	68da      	ldr	r2, [r3, #12]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	699b      	ldr	r3, [r3, #24]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	bf38      	it	cc
 800b180:	461a      	movcc	r2, r3
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	60da      	str	r2, [r3, #12]
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18c:	441a      	add	r2, r3
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	601a      	str	r2, [r3, #0]
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b196:	1ad3      	subs	r3, r2, r3
 800b198:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	f47f aeb5 	bne.w	800af0c <f_write+0x76>
 800b1a2:	e000      	b.n	800b1a6 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b1a4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	7d1b      	ldrb	r3, [r3, #20]
 800b1aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1ae:	b2da      	uxtb	r2, r3
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b1b4:	2300      	movs	r3, #0
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3730      	adds	r7, #48	; 0x30
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b086      	sub	sp, #24
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f107 0208 	add.w	r2, r7, #8
 800b1cc:	4611      	mov	r1, r2
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7ff faba 	bl	800a748 <validate>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b1d8:	7dfb      	ldrb	r3, [r7, #23]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d168      	bne.n	800b2b0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	7d1b      	ldrb	r3, [r3, #20]
 800b1e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d062      	beq.n	800b2b0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	7d1b      	ldrb	r3, [r3, #20]
 800b1ee:	b25b      	sxtb	r3, r3
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	da15      	bge.n	800b220 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	7858      	ldrb	r0, [r3, #1]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a1a      	ldr	r2, [r3, #32]
 800b202:	2301      	movs	r3, #1
 800b204:	f7fd f964 	bl	80084d0 <disk_write>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d001      	beq.n	800b212 <f_sync+0x54>
 800b20e:	2301      	movs	r3, #1
 800b210:	e04f      	b.n	800b2b2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	7d1b      	ldrb	r3, [r3, #20]
 800b216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b21a:	b2da      	uxtb	r2, r3
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b220:	f7fc feaa 	bl	8007f78 <get_fattime>
 800b224:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b226:	68ba      	ldr	r2, [r7, #8]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22c:	4619      	mov	r1, r3
 800b22e:	4610      	mov	r0, r2
 800b230:	f7fd fc3c 	bl	8008aac <move_window>
 800b234:	4603      	mov	r3, r0
 800b236:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b238:	7dfb      	ldrb	r3, [r7, #23]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d138      	bne.n	800b2b0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b242:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	330b      	adds	r3, #11
 800b248:	781a      	ldrb	r2, [r3, #0]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	330b      	adds	r3, #11
 800b24e:	f042 0220 	orr.w	r2, r2, #32
 800b252:	b2d2      	uxtb	r2, r2
 800b254:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6818      	ldr	r0, [r3, #0]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	461a      	mov	r2, r3
 800b260:	68f9      	ldr	r1, [r7, #12]
 800b262:	f7fe f9c1 	bl	80095e8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f103 021c 	add.w	r2, r3, #28
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	4619      	mov	r1, r3
 800b272:	4610      	mov	r0, r2
 800b274:	f7fd f9c0 	bl	80085f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	3316      	adds	r3, #22
 800b27c:	6939      	ldr	r1, [r7, #16]
 800b27e:	4618      	mov	r0, r3
 800b280:	f7fd f9ba 	bl	80085f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	3312      	adds	r3, #18
 800b288:	2100      	movs	r1, #0
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7fd f999 	bl	80085c2 <st_word>
					fs->wflag = 1;
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	2201      	movs	r2, #1
 800b294:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	4618      	mov	r0, r3
 800b29a:	f7fd fc35 	bl	8008b08 <sync_fs>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	7d1b      	ldrb	r3, [r3, #20]
 800b2a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2aa:	b2da      	uxtb	r2, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b2b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3718      	adds	r7, #24
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b084      	sub	sp, #16
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f7ff ff7b 	bl	800b1be <f_sync>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b2cc:	7bfb      	ldrb	r3, [r7, #15]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d118      	bne.n	800b304 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f107 0208 	add.w	r2, r7, #8
 800b2d8:	4611      	mov	r1, r2
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7ff fa34 	bl	800a748 <validate>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b2e4:	7bfb      	ldrb	r3, [r7, #15]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d10c      	bne.n	800b304 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	691b      	ldr	r3, [r3, #16]
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fd fb38 	bl	8008964 <dec_lock>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b2f8:	7bfb      	ldrb	r3, [r7, #15]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d102      	bne.n	800b304 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b304:	7bfb      	ldrb	r3, [r7, #15]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
	...

0800b310 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b310:	b480      	push	{r7}
 800b312:	b087      	sub	sp, #28
 800b314:	af00      	add	r7, sp, #0
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	4613      	mov	r3, r2
 800b31c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b31e:	2301      	movs	r3, #1
 800b320:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b322:	2300      	movs	r3, #0
 800b324:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b326:	4b1f      	ldr	r3, [pc, #124]	; (800b3a4 <FATFS_LinkDriverEx+0x94>)
 800b328:	7a5b      	ldrb	r3, [r3, #9]
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d131      	bne.n	800b394 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b330:	4b1c      	ldr	r3, [pc, #112]	; (800b3a4 <FATFS_LinkDriverEx+0x94>)
 800b332:	7a5b      	ldrb	r3, [r3, #9]
 800b334:	b2db      	uxtb	r3, r3
 800b336:	461a      	mov	r2, r3
 800b338:	4b1a      	ldr	r3, [pc, #104]	; (800b3a4 <FATFS_LinkDriverEx+0x94>)
 800b33a:	2100      	movs	r1, #0
 800b33c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b33e:	4b19      	ldr	r3, [pc, #100]	; (800b3a4 <FATFS_LinkDriverEx+0x94>)
 800b340:	7a5b      	ldrb	r3, [r3, #9]
 800b342:	b2db      	uxtb	r3, r3
 800b344:	4a17      	ldr	r2, [pc, #92]	; (800b3a4 <FATFS_LinkDriverEx+0x94>)
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	4413      	add	r3, r2
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b34e:	4b15      	ldr	r3, [pc, #84]	; (800b3a4 <FATFS_LinkDriverEx+0x94>)
 800b350:	7a5b      	ldrb	r3, [r3, #9]
 800b352:	b2db      	uxtb	r3, r3
 800b354:	461a      	mov	r2, r3
 800b356:	4b13      	ldr	r3, [pc, #76]	; (800b3a4 <FATFS_LinkDriverEx+0x94>)
 800b358:	4413      	add	r3, r2
 800b35a:	79fa      	ldrb	r2, [r7, #7]
 800b35c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b35e:	4b11      	ldr	r3, [pc, #68]	; (800b3a4 <FATFS_LinkDriverEx+0x94>)
 800b360:	7a5b      	ldrb	r3, [r3, #9]
 800b362:	b2db      	uxtb	r3, r3
 800b364:	1c5a      	adds	r2, r3, #1
 800b366:	b2d1      	uxtb	r1, r2
 800b368:	4a0e      	ldr	r2, [pc, #56]	; (800b3a4 <FATFS_LinkDriverEx+0x94>)
 800b36a:	7251      	strb	r1, [r2, #9]
 800b36c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b36e:	7dbb      	ldrb	r3, [r7, #22]
 800b370:	3330      	adds	r3, #48	; 0x30
 800b372:	b2da      	uxtb	r2, r3
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	3301      	adds	r3, #1
 800b37c:	223a      	movs	r2, #58	; 0x3a
 800b37e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	3302      	adds	r3, #2
 800b384:	222f      	movs	r2, #47	; 0x2f
 800b386:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	3303      	adds	r3, #3
 800b38c:	2200      	movs	r2, #0
 800b38e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b390:	2300      	movs	r3, #0
 800b392:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b394:	7dfb      	ldrb	r3, [r7, #23]
}
 800b396:	4618      	mov	r0, r3
 800b398:	371c      	adds	r7, #28
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop
 800b3a4:	20000308 	.word	0x20000308

0800b3a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	6839      	ldr	r1, [r7, #0]
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7ff ffaa 	bl	800b310 <FATFS_LinkDriverEx>
 800b3bc:	4603      	mov	r3, r0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
	...

0800b3c8 <__errno>:
 800b3c8:	4b01      	ldr	r3, [pc, #4]	; (800b3d0 <__errno+0x8>)
 800b3ca:	6818      	ldr	r0, [r3, #0]
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	2000000c 	.word	0x2000000c

0800b3d4 <__libc_init_array>:
 800b3d4:	b570      	push	{r4, r5, r6, lr}
 800b3d6:	4e0d      	ldr	r6, [pc, #52]	; (800b40c <__libc_init_array+0x38>)
 800b3d8:	4c0d      	ldr	r4, [pc, #52]	; (800b410 <__libc_init_array+0x3c>)
 800b3da:	1ba4      	subs	r4, r4, r6
 800b3dc:	10a4      	asrs	r4, r4, #2
 800b3de:	2500      	movs	r5, #0
 800b3e0:	42a5      	cmp	r5, r4
 800b3e2:	d109      	bne.n	800b3f8 <__libc_init_array+0x24>
 800b3e4:	4e0b      	ldr	r6, [pc, #44]	; (800b414 <__libc_init_array+0x40>)
 800b3e6:	4c0c      	ldr	r4, [pc, #48]	; (800b418 <__libc_init_array+0x44>)
 800b3e8:	f000 ff68 	bl	800c2bc <_init>
 800b3ec:	1ba4      	subs	r4, r4, r6
 800b3ee:	10a4      	asrs	r4, r4, #2
 800b3f0:	2500      	movs	r5, #0
 800b3f2:	42a5      	cmp	r5, r4
 800b3f4:	d105      	bne.n	800b402 <__libc_init_array+0x2e>
 800b3f6:	bd70      	pop	{r4, r5, r6, pc}
 800b3f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b3fc:	4798      	blx	r3
 800b3fe:	3501      	adds	r5, #1
 800b400:	e7ee      	b.n	800b3e0 <__libc_init_array+0xc>
 800b402:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b406:	4798      	blx	r3
 800b408:	3501      	adds	r5, #1
 800b40a:	e7f2      	b.n	800b3f2 <__libc_init_array+0x1e>
 800b40c:	0800c8c4 	.word	0x0800c8c4
 800b410:	0800c8c4 	.word	0x0800c8c4
 800b414:	0800c8c4 	.word	0x0800c8c4
 800b418:	0800c8c8 	.word	0x0800c8c8

0800b41c <memset>:
 800b41c:	4402      	add	r2, r0
 800b41e:	4603      	mov	r3, r0
 800b420:	4293      	cmp	r3, r2
 800b422:	d100      	bne.n	800b426 <memset+0xa>
 800b424:	4770      	bx	lr
 800b426:	f803 1b01 	strb.w	r1, [r3], #1
 800b42a:	e7f9      	b.n	800b420 <memset+0x4>

0800b42c <_free_r>:
 800b42c:	b538      	push	{r3, r4, r5, lr}
 800b42e:	4605      	mov	r5, r0
 800b430:	2900      	cmp	r1, #0
 800b432:	d045      	beq.n	800b4c0 <_free_r+0x94>
 800b434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b438:	1f0c      	subs	r4, r1, #4
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	bfb8      	it	lt
 800b43e:	18e4      	addlt	r4, r4, r3
 800b440:	f000 fbc6 	bl	800bbd0 <__malloc_lock>
 800b444:	4a1f      	ldr	r2, [pc, #124]	; (800b4c4 <_free_r+0x98>)
 800b446:	6813      	ldr	r3, [r2, #0]
 800b448:	4610      	mov	r0, r2
 800b44a:	b933      	cbnz	r3, 800b45a <_free_r+0x2e>
 800b44c:	6063      	str	r3, [r4, #4]
 800b44e:	6014      	str	r4, [r2, #0]
 800b450:	4628      	mov	r0, r5
 800b452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b456:	f000 bbbc 	b.w	800bbd2 <__malloc_unlock>
 800b45a:	42a3      	cmp	r3, r4
 800b45c:	d90c      	bls.n	800b478 <_free_r+0x4c>
 800b45e:	6821      	ldr	r1, [r4, #0]
 800b460:	1862      	adds	r2, r4, r1
 800b462:	4293      	cmp	r3, r2
 800b464:	bf04      	itt	eq
 800b466:	681a      	ldreq	r2, [r3, #0]
 800b468:	685b      	ldreq	r3, [r3, #4]
 800b46a:	6063      	str	r3, [r4, #4]
 800b46c:	bf04      	itt	eq
 800b46e:	1852      	addeq	r2, r2, r1
 800b470:	6022      	streq	r2, [r4, #0]
 800b472:	6004      	str	r4, [r0, #0]
 800b474:	e7ec      	b.n	800b450 <_free_r+0x24>
 800b476:	4613      	mov	r3, r2
 800b478:	685a      	ldr	r2, [r3, #4]
 800b47a:	b10a      	cbz	r2, 800b480 <_free_r+0x54>
 800b47c:	42a2      	cmp	r2, r4
 800b47e:	d9fa      	bls.n	800b476 <_free_r+0x4a>
 800b480:	6819      	ldr	r1, [r3, #0]
 800b482:	1858      	adds	r0, r3, r1
 800b484:	42a0      	cmp	r0, r4
 800b486:	d10b      	bne.n	800b4a0 <_free_r+0x74>
 800b488:	6820      	ldr	r0, [r4, #0]
 800b48a:	4401      	add	r1, r0
 800b48c:	1858      	adds	r0, r3, r1
 800b48e:	4282      	cmp	r2, r0
 800b490:	6019      	str	r1, [r3, #0]
 800b492:	d1dd      	bne.n	800b450 <_free_r+0x24>
 800b494:	6810      	ldr	r0, [r2, #0]
 800b496:	6852      	ldr	r2, [r2, #4]
 800b498:	605a      	str	r2, [r3, #4]
 800b49a:	4401      	add	r1, r0
 800b49c:	6019      	str	r1, [r3, #0]
 800b49e:	e7d7      	b.n	800b450 <_free_r+0x24>
 800b4a0:	d902      	bls.n	800b4a8 <_free_r+0x7c>
 800b4a2:	230c      	movs	r3, #12
 800b4a4:	602b      	str	r3, [r5, #0]
 800b4a6:	e7d3      	b.n	800b450 <_free_r+0x24>
 800b4a8:	6820      	ldr	r0, [r4, #0]
 800b4aa:	1821      	adds	r1, r4, r0
 800b4ac:	428a      	cmp	r2, r1
 800b4ae:	bf04      	itt	eq
 800b4b0:	6811      	ldreq	r1, [r2, #0]
 800b4b2:	6852      	ldreq	r2, [r2, #4]
 800b4b4:	6062      	str	r2, [r4, #4]
 800b4b6:	bf04      	itt	eq
 800b4b8:	1809      	addeq	r1, r1, r0
 800b4ba:	6021      	streq	r1, [r4, #0]
 800b4bc:	605c      	str	r4, [r3, #4]
 800b4be:	e7c7      	b.n	800b450 <_free_r+0x24>
 800b4c0:	bd38      	pop	{r3, r4, r5, pc}
 800b4c2:	bf00      	nop
 800b4c4:	20000314 	.word	0x20000314

0800b4c8 <_malloc_r>:
 800b4c8:	b570      	push	{r4, r5, r6, lr}
 800b4ca:	1ccd      	adds	r5, r1, #3
 800b4cc:	f025 0503 	bic.w	r5, r5, #3
 800b4d0:	3508      	adds	r5, #8
 800b4d2:	2d0c      	cmp	r5, #12
 800b4d4:	bf38      	it	cc
 800b4d6:	250c      	movcc	r5, #12
 800b4d8:	2d00      	cmp	r5, #0
 800b4da:	4606      	mov	r6, r0
 800b4dc:	db01      	blt.n	800b4e2 <_malloc_r+0x1a>
 800b4de:	42a9      	cmp	r1, r5
 800b4e0:	d903      	bls.n	800b4ea <_malloc_r+0x22>
 800b4e2:	230c      	movs	r3, #12
 800b4e4:	6033      	str	r3, [r6, #0]
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ea:	f000 fb71 	bl	800bbd0 <__malloc_lock>
 800b4ee:	4a21      	ldr	r2, [pc, #132]	; (800b574 <_malloc_r+0xac>)
 800b4f0:	6814      	ldr	r4, [r2, #0]
 800b4f2:	4621      	mov	r1, r4
 800b4f4:	b991      	cbnz	r1, 800b51c <_malloc_r+0x54>
 800b4f6:	4c20      	ldr	r4, [pc, #128]	; (800b578 <_malloc_r+0xb0>)
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	b91b      	cbnz	r3, 800b504 <_malloc_r+0x3c>
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	f000 f8b9 	bl	800b674 <_sbrk_r>
 800b502:	6020      	str	r0, [r4, #0]
 800b504:	4629      	mov	r1, r5
 800b506:	4630      	mov	r0, r6
 800b508:	f000 f8b4 	bl	800b674 <_sbrk_r>
 800b50c:	1c43      	adds	r3, r0, #1
 800b50e:	d124      	bne.n	800b55a <_malloc_r+0x92>
 800b510:	230c      	movs	r3, #12
 800b512:	6033      	str	r3, [r6, #0]
 800b514:	4630      	mov	r0, r6
 800b516:	f000 fb5c 	bl	800bbd2 <__malloc_unlock>
 800b51a:	e7e4      	b.n	800b4e6 <_malloc_r+0x1e>
 800b51c:	680b      	ldr	r3, [r1, #0]
 800b51e:	1b5b      	subs	r3, r3, r5
 800b520:	d418      	bmi.n	800b554 <_malloc_r+0x8c>
 800b522:	2b0b      	cmp	r3, #11
 800b524:	d90f      	bls.n	800b546 <_malloc_r+0x7e>
 800b526:	600b      	str	r3, [r1, #0]
 800b528:	50cd      	str	r5, [r1, r3]
 800b52a:	18cc      	adds	r4, r1, r3
 800b52c:	4630      	mov	r0, r6
 800b52e:	f000 fb50 	bl	800bbd2 <__malloc_unlock>
 800b532:	f104 000b 	add.w	r0, r4, #11
 800b536:	1d23      	adds	r3, r4, #4
 800b538:	f020 0007 	bic.w	r0, r0, #7
 800b53c:	1ac3      	subs	r3, r0, r3
 800b53e:	d0d3      	beq.n	800b4e8 <_malloc_r+0x20>
 800b540:	425a      	negs	r2, r3
 800b542:	50e2      	str	r2, [r4, r3]
 800b544:	e7d0      	b.n	800b4e8 <_malloc_r+0x20>
 800b546:	428c      	cmp	r4, r1
 800b548:	684b      	ldr	r3, [r1, #4]
 800b54a:	bf16      	itet	ne
 800b54c:	6063      	strne	r3, [r4, #4]
 800b54e:	6013      	streq	r3, [r2, #0]
 800b550:	460c      	movne	r4, r1
 800b552:	e7eb      	b.n	800b52c <_malloc_r+0x64>
 800b554:	460c      	mov	r4, r1
 800b556:	6849      	ldr	r1, [r1, #4]
 800b558:	e7cc      	b.n	800b4f4 <_malloc_r+0x2c>
 800b55a:	1cc4      	adds	r4, r0, #3
 800b55c:	f024 0403 	bic.w	r4, r4, #3
 800b560:	42a0      	cmp	r0, r4
 800b562:	d005      	beq.n	800b570 <_malloc_r+0xa8>
 800b564:	1a21      	subs	r1, r4, r0
 800b566:	4630      	mov	r0, r6
 800b568:	f000 f884 	bl	800b674 <_sbrk_r>
 800b56c:	3001      	adds	r0, #1
 800b56e:	d0cf      	beq.n	800b510 <_malloc_r+0x48>
 800b570:	6025      	str	r5, [r4, #0]
 800b572:	e7db      	b.n	800b52c <_malloc_r+0x64>
 800b574:	20000314 	.word	0x20000314
 800b578:	20000318 	.word	0x20000318

0800b57c <iprintf>:
 800b57c:	b40f      	push	{r0, r1, r2, r3}
 800b57e:	4b0a      	ldr	r3, [pc, #40]	; (800b5a8 <iprintf+0x2c>)
 800b580:	b513      	push	{r0, r1, r4, lr}
 800b582:	681c      	ldr	r4, [r3, #0]
 800b584:	b124      	cbz	r4, 800b590 <iprintf+0x14>
 800b586:	69a3      	ldr	r3, [r4, #24]
 800b588:	b913      	cbnz	r3, 800b590 <iprintf+0x14>
 800b58a:	4620      	mov	r0, r4
 800b58c:	f000 fa32 	bl	800b9f4 <__sinit>
 800b590:	ab05      	add	r3, sp, #20
 800b592:	9a04      	ldr	r2, [sp, #16]
 800b594:	68a1      	ldr	r1, [r4, #8]
 800b596:	9301      	str	r3, [sp, #4]
 800b598:	4620      	mov	r0, r4
 800b59a:	f000 fb45 	bl	800bc28 <_vfiprintf_r>
 800b59e:	b002      	add	sp, #8
 800b5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5a4:	b004      	add	sp, #16
 800b5a6:	4770      	bx	lr
 800b5a8:	2000000c 	.word	0x2000000c

0800b5ac <_puts_r>:
 800b5ac:	b570      	push	{r4, r5, r6, lr}
 800b5ae:	460e      	mov	r6, r1
 800b5b0:	4605      	mov	r5, r0
 800b5b2:	b118      	cbz	r0, 800b5bc <_puts_r+0x10>
 800b5b4:	6983      	ldr	r3, [r0, #24]
 800b5b6:	b90b      	cbnz	r3, 800b5bc <_puts_r+0x10>
 800b5b8:	f000 fa1c 	bl	800b9f4 <__sinit>
 800b5bc:	69ab      	ldr	r3, [r5, #24]
 800b5be:	68ac      	ldr	r4, [r5, #8]
 800b5c0:	b913      	cbnz	r3, 800b5c8 <_puts_r+0x1c>
 800b5c2:	4628      	mov	r0, r5
 800b5c4:	f000 fa16 	bl	800b9f4 <__sinit>
 800b5c8:	4b23      	ldr	r3, [pc, #140]	; (800b658 <_puts_r+0xac>)
 800b5ca:	429c      	cmp	r4, r3
 800b5cc:	d117      	bne.n	800b5fe <_puts_r+0x52>
 800b5ce:	686c      	ldr	r4, [r5, #4]
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	071b      	lsls	r3, r3, #28
 800b5d4:	d51d      	bpl.n	800b612 <_puts_r+0x66>
 800b5d6:	6923      	ldr	r3, [r4, #16]
 800b5d8:	b1db      	cbz	r3, 800b612 <_puts_r+0x66>
 800b5da:	3e01      	subs	r6, #1
 800b5dc:	68a3      	ldr	r3, [r4, #8]
 800b5de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b5e2:	3b01      	subs	r3, #1
 800b5e4:	60a3      	str	r3, [r4, #8]
 800b5e6:	b9e9      	cbnz	r1, 800b624 <_puts_r+0x78>
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	da2e      	bge.n	800b64a <_puts_r+0x9e>
 800b5ec:	4622      	mov	r2, r4
 800b5ee:	210a      	movs	r1, #10
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	f000 f84f 	bl	800b694 <__swbuf_r>
 800b5f6:	3001      	adds	r0, #1
 800b5f8:	d011      	beq.n	800b61e <_puts_r+0x72>
 800b5fa:	200a      	movs	r0, #10
 800b5fc:	e011      	b.n	800b622 <_puts_r+0x76>
 800b5fe:	4b17      	ldr	r3, [pc, #92]	; (800b65c <_puts_r+0xb0>)
 800b600:	429c      	cmp	r4, r3
 800b602:	d101      	bne.n	800b608 <_puts_r+0x5c>
 800b604:	68ac      	ldr	r4, [r5, #8]
 800b606:	e7e3      	b.n	800b5d0 <_puts_r+0x24>
 800b608:	4b15      	ldr	r3, [pc, #84]	; (800b660 <_puts_r+0xb4>)
 800b60a:	429c      	cmp	r4, r3
 800b60c:	bf08      	it	eq
 800b60e:	68ec      	ldreq	r4, [r5, #12]
 800b610:	e7de      	b.n	800b5d0 <_puts_r+0x24>
 800b612:	4621      	mov	r1, r4
 800b614:	4628      	mov	r0, r5
 800b616:	f000 f88f 	bl	800b738 <__swsetup_r>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	d0dd      	beq.n	800b5da <_puts_r+0x2e>
 800b61e:	f04f 30ff 	mov.w	r0, #4294967295
 800b622:	bd70      	pop	{r4, r5, r6, pc}
 800b624:	2b00      	cmp	r3, #0
 800b626:	da04      	bge.n	800b632 <_puts_r+0x86>
 800b628:	69a2      	ldr	r2, [r4, #24]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	dc06      	bgt.n	800b63c <_puts_r+0x90>
 800b62e:	290a      	cmp	r1, #10
 800b630:	d004      	beq.n	800b63c <_puts_r+0x90>
 800b632:	6823      	ldr	r3, [r4, #0]
 800b634:	1c5a      	adds	r2, r3, #1
 800b636:	6022      	str	r2, [r4, #0]
 800b638:	7019      	strb	r1, [r3, #0]
 800b63a:	e7cf      	b.n	800b5dc <_puts_r+0x30>
 800b63c:	4622      	mov	r2, r4
 800b63e:	4628      	mov	r0, r5
 800b640:	f000 f828 	bl	800b694 <__swbuf_r>
 800b644:	3001      	adds	r0, #1
 800b646:	d1c9      	bne.n	800b5dc <_puts_r+0x30>
 800b648:	e7e9      	b.n	800b61e <_puts_r+0x72>
 800b64a:	6823      	ldr	r3, [r4, #0]
 800b64c:	200a      	movs	r0, #10
 800b64e:	1c5a      	adds	r2, r3, #1
 800b650:	6022      	str	r2, [r4, #0]
 800b652:	7018      	strb	r0, [r3, #0]
 800b654:	e7e5      	b.n	800b622 <_puts_r+0x76>
 800b656:	bf00      	nop
 800b658:	0800c848 	.word	0x0800c848
 800b65c:	0800c868 	.word	0x0800c868
 800b660:	0800c828 	.word	0x0800c828

0800b664 <puts>:
 800b664:	4b02      	ldr	r3, [pc, #8]	; (800b670 <puts+0xc>)
 800b666:	4601      	mov	r1, r0
 800b668:	6818      	ldr	r0, [r3, #0]
 800b66a:	f7ff bf9f 	b.w	800b5ac <_puts_r>
 800b66e:	bf00      	nop
 800b670:	2000000c 	.word	0x2000000c

0800b674 <_sbrk_r>:
 800b674:	b538      	push	{r3, r4, r5, lr}
 800b676:	4c06      	ldr	r4, [pc, #24]	; (800b690 <_sbrk_r+0x1c>)
 800b678:	2300      	movs	r3, #0
 800b67a:	4605      	mov	r5, r0
 800b67c:	4608      	mov	r0, r1
 800b67e:	6023      	str	r3, [r4, #0]
 800b680:	f7f6 fe6a 	bl	8002358 <_sbrk>
 800b684:	1c43      	adds	r3, r0, #1
 800b686:	d102      	bne.n	800b68e <_sbrk_r+0x1a>
 800b688:	6823      	ldr	r3, [r4, #0]
 800b68a:	b103      	cbz	r3, 800b68e <_sbrk_r+0x1a>
 800b68c:	602b      	str	r3, [r5, #0]
 800b68e:	bd38      	pop	{r3, r4, r5, pc}
 800b690:	20006848 	.word	0x20006848

0800b694 <__swbuf_r>:
 800b694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b696:	460e      	mov	r6, r1
 800b698:	4614      	mov	r4, r2
 800b69a:	4605      	mov	r5, r0
 800b69c:	b118      	cbz	r0, 800b6a6 <__swbuf_r+0x12>
 800b69e:	6983      	ldr	r3, [r0, #24]
 800b6a0:	b90b      	cbnz	r3, 800b6a6 <__swbuf_r+0x12>
 800b6a2:	f000 f9a7 	bl	800b9f4 <__sinit>
 800b6a6:	4b21      	ldr	r3, [pc, #132]	; (800b72c <__swbuf_r+0x98>)
 800b6a8:	429c      	cmp	r4, r3
 800b6aa:	d12a      	bne.n	800b702 <__swbuf_r+0x6e>
 800b6ac:	686c      	ldr	r4, [r5, #4]
 800b6ae:	69a3      	ldr	r3, [r4, #24]
 800b6b0:	60a3      	str	r3, [r4, #8]
 800b6b2:	89a3      	ldrh	r3, [r4, #12]
 800b6b4:	071a      	lsls	r2, r3, #28
 800b6b6:	d52e      	bpl.n	800b716 <__swbuf_r+0x82>
 800b6b8:	6923      	ldr	r3, [r4, #16]
 800b6ba:	b363      	cbz	r3, 800b716 <__swbuf_r+0x82>
 800b6bc:	6923      	ldr	r3, [r4, #16]
 800b6be:	6820      	ldr	r0, [r4, #0]
 800b6c0:	1ac0      	subs	r0, r0, r3
 800b6c2:	6963      	ldr	r3, [r4, #20]
 800b6c4:	b2f6      	uxtb	r6, r6
 800b6c6:	4283      	cmp	r3, r0
 800b6c8:	4637      	mov	r7, r6
 800b6ca:	dc04      	bgt.n	800b6d6 <__swbuf_r+0x42>
 800b6cc:	4621      	mov	r1, r4
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	f000 f926 	bl	800b920 <_fflush_r>
 800b6d4:	bb28      	cbnz	r0, 800b722 <__swbuf_r+0x8e>
 800b6d6:	68a3      	ldr	r3, [r4, #8]
 800b6d8:	3b01      	subs	r3, #1
 800b6da:	60a3      	str	r3, [r4, #8]
 800b6dc:	6823      	ldr	r3, [r4, #0]
 800b6de:	1c5a      	adds	r2, r3, #1
 800b6e0:	6022      	str	r2, [r4, #0]
 800b6e2:	701e      	strb	r6, [r3, #0]
 800b6e4:	6963      	ldr	r3, [r4, #20]
 800b6e6:	3001      	adds	r0, #1
 800b6e8:	4283      	cmp	r3, r0
 800b6ea:	d004      	beq.n	800b6f6 <__swbuf_r+0x62>
 800b6ec:	89a3      	ldrh	r3, [r4, #12]
 800b6ee:	07db      	lsls	r3, r3, #31
 800b6f0:	d519      	bpl.n	800b726 <__swbuf_r+0x92>
 800b6f2:	2e0a      	cmp	r6, #10
 800b6f4:	d117      	bne.n	800b726 <__swbuf_r+0x92>
 800b6f6:	4621      	mov	r1, r4
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	f000 f911 	bl	800b920 <_fflush_r>
 800b6fe:	b190      	cbz	r0, 800b726 <__swbuf_r+0x92>
 800b700:	e00f      	b.n	800b722 <__swbuf_r+0x8e>
 800b702:	4b0b      	ldr	r3, [pc, #44]	; (800b730 <__swbuf_r+0x9c>)
 800b704:	429c      	cmp	r4, r3
 800b706:	d101      	bne.n	800b70c <__swbuf_r+0x78>
 800b708:	68ac      	ldr	r4, [r5, #8]
 800b70a:	e7d0      	b.n	800b6ae <__swbuf_r+0x1a>
 800b70c:	4b09      	ldr	r3, [pc, #36]	; (800b734 <__swbuf_r+0xa0>)
 800b70e:	429c      	cmp	r4, r3
 800b710:	bf08      	it	eq
 800b712:	68ec      	ldreq	r4, [r5, #12]
 800b714:	e7cb      	b.n	800b6ae <__swbuf_r+0x1a>
 800b716:	4621      	mov	r1, r4
 800b718:	4628      	mov	r0, r5
 800b71a:	f000 f80d 	bl	800b738 <__swsetup_r>
 800b71e:	2800      	cmp	r0, #0
 800b720:	d0cc      	beq.n	800b6bc <__swbuf_r+0x28>
 800b722:	f04f 37ff 	mov.w	r7, #4294967295
 800b726:	4638      	mov	r0, r7
 800b728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b72a:	bf00      	nop
 800b72c:	0800c848 	.word	0x0800c848
 800b730:	0800c868 	.word	0x0800c868
 800b734:	0800c828 	.word	0x0800c828

0800b738 <__swsetup_r>:
 800b738:	4b32      	ldr	r3, [pc, #200]	; (800b804 <__swsetup_r+0xcc>)
 800b73a:	b570      	push	{r4, r5, r6, lr}
 800b73c:	681d      	ldr	r5, [r3, #0]
 800b73e:	4606      	mov	r6, r0
 800b740:	460c      	mov	r4, r1
 800b742:	b125      	cbz	r5, 800b74e <__swsetup_r+0x16>
 800b744:	69ab      	ldr	r3, [r5, #24]
 800b746:	b913      	cbnz	r3, 800b74e <__swsetup_r+0x16>
 800b748:	4628      	mov	r0, r5
 800b74a:	f000 f953 	bl	800b9f4 <__sinit>
 800b74e:	4b2e      	ldr	r3, [pc, #184]	; (800b808 <__swsetup_r+0xd0>)
 800b750:	429c      	cmp	r4, r3
 800b752:	d10f      	bne.n	800b774 <__swsetup_r+0x3c>
 800b754:	686c      	ldr	r4, [r5, #4]
 800b756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	0715      	lsls	r5, r2, #28
 800b75e:	d42c      	bmi.n	800b7ba <__swsetup_r+0x82>
 800b760:	06d0      	lsls	r0, r2, #27
 800b762:	d411      	bmi.n	800b788 <__swsetup_r+0x50>
 800b764:	2209      	movs	r2, #9
 800b766:	6032      	str	r2, [r6, #0]
 800b768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b76c:	81a3      	strh	r3, [r4, #12]
 800b76e:	f04f 30ff 	mov.w	r0, #4294967295
 800b772:	e03e      	b.n	800b7f2 <__swsetup_r+0xba>
 800b774:	4b25      	ldr	r3, [pc, #148]	; (800b80c <__swsetup_r+0xd4>)
 800b776:	429c      	cmp	r4, r3
 800b778:	d101      	bne.n	800b77e <__swsetup_r+0x46>
 800b77a:	68ac      	ldr	r4, [r5, #8]
 800b77c:	e7eb      	b.n	800b756 <__swsetup_r+0x1e>
 800b77e:	4b24      	ldr	r3, [pc, #144]	; (800b810 <__swsetup_r+0xd8>)
 800b780:	429c      	cmp	r4, r3
 800b782:	bf08      	it	eq
 800b784:	68ec      	ldreq	r4, [r5, #12]
 800b786:	e7e6      	b.n	800b756 <__swsetup_r+0x1e>
 800b788:	0751      	lsls	r1, r2, #29
 800b78a:	d512      	bpl.n	800b7b2 <__swsetup_r+0x7a>
 800b78c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b78e:	b141      	cbz	r1, 800b7a2 <__swsetup_r+0x6a>
 800b790:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b794:	4299      	cmp	r1, r3
 800b796:	d002      	beq.n	800b79e <__swsetup_r+0x66>
 800b798:	4630      	mov	r0, r6
 800b79a:	f7ff fe47 	bl	800b42c <_free_r>
 800b79e:	2300      	movs	r3, #0
 800b7a0:	6363      	str	r3, [r4, #52]	; 0x34
 800b7a2:	89a3      	ldrh	r3, [r4, #12]
 800b7a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7a8:	81a3      	strh	r3, [r4, #12]
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	6063      	str	r3, [r4, #4]
 800b7ae:	6923      	ldr	r3, [r4, #16]
 800b7b0:	6023      	str	r3, [r4, #0]
 800b7b2:	89a3      	ldrh	r3, [r4, #12]
 800b7b4:	f043 0308 	orr.w	r3, r3, #8
 800b7b8:	81a3      	strh	r3, [r4, #12]
 800b7ba:	6923      	ldr	r3, [r4, #16]
 800b7bc:	b94b      	cbnz	r3, 800b7d2 <__swsetup_r+0x9a>
 800b7be:	89a3      	ldrh	r3, [r4, #12]
 800b7c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7c8:	d003      	beq.n	800b7d2 <__swsetup_r+0x9a>
 800b7ca:	4621      	mov	r1, r4
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	f000 f9bf 	bl	800bb50 <__smakebuf_r>
 800b7d2:	89a2      	ldrh	r2, [r4, #12]
 800b7d4:	f012 0301 	ands.w	r3, r2, #1
 800b7d8:	d00c      	beq.n	800b7f4 <__swsetup_r+0xbc>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	60a3      	str	r3, [r4, #8]
 800b7de:	6963      	ldr	r3, [r4, #20]
 800b7e0:	425b      	negs	r3, r3
 800b7e2:	61a3      	str	r3, [r4, #24]
 800b7e4:	6923      	ldr	r3, [r4, #16]
 800b7e6:	b953      	cbnz	r3, 800b7fe <__swsetup_r+0xc6>
 800b7e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b7f0:	d1ba      	bne.n	800b768 <__swsetup_r+0x30>
 800b7f2:	bd70      	pop	{r4, r5, r6, pc}
 800b7f4:	0792      	lsls	r2, r2, #30
 800b7f6:	bf58      	it	pl
 800b7f8:	6963      	ldrpl	r3, [r4, #20]
 800b7fa:	60a3      	str	r3, [r4, #8]
 800b7fc:	e7f2      	b.n	800b7e4 <__swsetup_r+0xac>
 800b7fe:	2000      	movs	r0, #0
 800b800:	e7f7      	b.n	800b7f2 <__swsetup_r+0xba>
 800b802:	bf00      	nop
 800b804:	2000000c 	.word	0x2000000c
 800b808:	0800c848 	.word	0x0800c848
 800b80c:	0800c868 	.word	0x0800c868
 800b810:	0800c828 	.word	0x0800c828

0800b814 <__sflush_r>:
 800b814:	898a      	ldrh	r2, [r1, #12]
 800b816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b81a:	4605      	mov	r5, r0
 800b81c:	0710      	lsls	r0, r2, #28
 800b81e:	460c      	mov	r4, r1
 800b820:	d458      	bmi.n	800b8d4 <__sflush_r+0xc0>
 800b822:	684b      	ldr	r3, [r1, #4]
 800b824:	2b00      	cmp	r3, #0
 800b826:	dc05      	bgt.n	800b834 <__sflush_r+0x20>
 800b828:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	dc02      	bgt.n	800b834 <__sflush_r+0x20>
 800b82e:	2000      	movs	r0, #0
 800b830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b836:	2e00      	cmp	r6, #0
 800b838:	d0f9      	beq.n	800b82e <__sflush_r+0x1a>
 800b83a:	2300      	movs	r3, #0
 800b83c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b840:	682f      	ldr	r7, [r5, #0]
 800b842:	6a21      	ldr	r1, [r4, #32]
 800b844:	602b      	str	r3, [r5, #0]
 800b846:	d032      	beq.n	800b8ae <__sflush_r+0x9a>
 800b848:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b84a:	89a3      	ldrh	r3, [r4, #12]
 800b84c:	075a      	lsls	r2, r3, #29
 800b84e:	d505      	bpl.n	800b85c <__sflush_r+0x48>
 800b850:	6863      	ldr	r3, [r4, #4]
 800b852:	1ac0      	subs	r0, r0, r3
 800b854:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b856:	b10b      	cbz	r3, 800b85c <__sflush_r+0x48>
 800b858:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b85a:	1ac0      	subs	r0, r0, r3
 800b85c:	2300      	movs	r3, #0
 800b85e:	4602      	mov	r2, r0
 800b860:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b862:	6a21      	ldr	r1, [r4, #32]
 800b864:	4628      	mov	r0, r5
 800b866:	47b0      	blx	r6
 800b868:	1c43      	adds	r3, r0, #1
 800b86a:	89a3      	ldrh	r3, [r4, #12]
 800b86c:	d106      	bne.n	800b87c <__sflush_r+0x68>
 800b86e:	6829      	ldr	r1, [r5, #0]
 800b870:	291d      	cmp	r1, #29
 800b872:	d848      	bhi.n	800b906 <__sflush_r+0xf2>
 800b874:	4a29      	ldr	r2, [pc, #164]	; (800b91c <__sflush_r+0x108>)
 800b876:	40ca      	lsrs	r2, r1
 800b878:	07d6      	lsls	r6, r2, #31
 800b87a:	d544      	bpl.n	800b906 <__sflush_r+0xf2>
 800b87c:	2200      	movs	r2, #0
 800b87e:	6062      	str	r2, [r4, #4]
 800b880:	04d9      	lsls	r1, r3, #19
 800b882:	6922      	ldr	r2, [r4, #16]
 800b884:	6022      	str	r2, [r4, #0]
 800b886:	d504      	bpl.n	800b892 <__sflush_r+0x7e>
 800b888:	1c42      	adds	r2, r0, #1
 800b88a:	d101      	bne.n	800b890 <__sflush_r+0x7c>
 800b88c:	682b      	ldr	r3, [r5, #0]
 800b88e:	b903      	cbnz	r3, 800b892 <__sflush_r+0x7e>
 800b890:	6560      	str	r0, [r4, #84]	; 0x54
 800b892:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b894:	602f      	str	r7, [r5, #0]
 800b896:	2900      	cmp	r1, #0
 800b898:	d0c9      	beq.n	800b82e <__sflush_r+0x1a>
 800b89a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b89e:	4299      	cmp	r1, r3
 800b8a0:	d002      	beq.n	800b8a8 <__sflush_r+0x94>
 800b8a2:	4628      	mov	r0, r5
 800b8a4:	f7ff fdc2 	bl	800b42c <_free_r>
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	6360      	str	r0, [r4, #52]	; 0x34
 800b8ac:	e7c0      	b.n	800b830 <__sflush_r+0x1c>
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	4628      	mov	r0, r5
 800b8b2:	47b0      	blx	r6
 800b8b4:	1c41      	adds	r1, r0, #1
 800b8b6:	d1c8      	bne.n	800b84a <__sflush_r+0x36>
 800b8b8:	682b      	ldr	r3, [r5, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d0c5      	beq.n	800b84a <__sflush_r+0x36>
 800b8be:	2b1d      	cmp	r3, #29
 800b8c0:	d001      	beq.n	800b8c6 <__sflush_r+0xb2>
 800b8c2:	2b16      	cmp	r3, #22
 800b8c4:	d101      	bne.n	800b8ca <__sflush_r+0xb6>
 800b8c6:	602f      	str	r7, [r5, #0]
 800b8c8:	e7b1      	b.n	800b82e <__sflush_r+0x1a>
 800b8ca:	89a3      	ldrh	r3, [r4, #12]
 800b8cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8d0:	81a3      	strh	r3, [r4, #12]
 800b8d2:	e7ad      	b.n	800b830 <__sflush_r+0x1c>
 800b8d4:	690f      	ldr	r7, [r1, #16]
 800b8d6:	2f00      	cmp	r7, #0
 800b8d8:	d0a9      	beq.n	800b82e <__sflush_r+0x1a>
 800b8da:	0793      	lsls	r3, r2, #30
 800b8dc:	680e      	ldr	r6, [r1, #0]
 800b8de:	bf08      	it	eq
 800b8e0:	694b      	ldreq	r3, [r1, #20]
 800b8e2:	600f      	str	r7, [r1, #0]
 800b8e4:	bf18      	it	ne
 800b8e6:	2300      	movne	r3, #0
 800b8e8:	eba6 0807 	sub.w	r8, r6, r7
 800b8ec:	608b      	str	r3, [r1, #8]
 800b8ee:	f1b8 0f00 	cmp.w	r8, #0
 800b8f2:	dd9c      	ble.n	800b82e <__sflush_r+0x1a>
 800b8f4:	4643      	mov	r3, r8
 800b8f6:	463a      	mov	r2, r7
 800b8f8:	6a21      	ldr	r1, [r4, #32]
 800b8fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	47b0      	blx	r6
 800b900:	2800      	cmp	r0, #0
 800b902:	dc06      	bgt.n	800b912 <__sflush_r+0xfe>
 800b904:	89a3      	ldrh	r3, [r4, #12]
 800b906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b90a:	81a3      	strh	r3, [r4, #12]
 800b90c:	f04f 30ff 	mov.w	r0, #4294967295
 800b910:	e78e      	b.n	800b830 <__sflush_r+0x1c>
 800b912:	4407      	add	r7, r0
 800b914:	eba8 0800 	sub.w	r8, r8, r0
 800b918:	e7e9      	b.n	800b8ee <__sflush_r+0xda>
 800b91a:	bf00      	nop
 800b91c:	20400001 	.word	0x20400001

0800b920 <_fflush_r>:
 800b920:	b538      	push	{r3, r4, r5, lr}
 800b922:	690b      	ldr	r3, [r1, #16]
 800b924:	4605      	mov	r5, r0
 800b926:	460c      	mov	r4, r1
 800b928:	b1db      	cbz	r3, 800b962 <_fflush_r+0x42>
 800b92a:	b118      	cbz	r0, 800b934 <_fflush_r+0x14>
 800b92c:	6983      	ldr	r3, [r0, #24]
 800b92e:	b90b      	cbnz	r3, 800b934 <_fflush_r+0x14>
 800b930:	f000 f860 	bl	800b9f4 <__sinit>
 800b934:	4b0c      	ldr	r3, [pc, #48]	; (800b968 <_fflush_r+0x48>)
 800b936:	429c      	cmp	r4, r3
 800b938:	d109      	bne.n	800b94e <_fflush_r+0x2e>
 800b93a:	686c      	ldr	r4, [r5, #4]
 800b93c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b940:	b17b      	cbz	r3, 800b962 <_fflush_r+0x42>
 800b942:	4621      	mov	r1, r4
 800b944:	4628      	mov	r0, r5
 800b946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b94a:	f7ff bf63 	b.w	800b814 <__sflush_r>
 800b94e:	4b07      	ldr	r3, [pc, #28]	; (800b96c <_fflush_r+0x4c>)
 800b950:	429c      	cmp	r4, r3
 800b952:	d101      	bne.n	800b958 <_fflush_r+0x38>
 800b954:	68ac      	ldr	r4, [r5, #8]
 800b956:	e7f1      	b.n	800b93c <_fflush_r+0x1c>
 800b958:	4b05      	ldr	r3, [pc, #20]	; (800b970 <_fflush_r+0x50>)
 800b95a:	429c      	cmp	r4, r3
 800b95c:	bf08      	it	eq
 800b95e:	68ec      	ldreq	r4, [r5, #12]
 800b960:	e7ec      	b.n	800b93c <_fflush_r+0x1c>
 800b962:	2000      	movs	r0, #0
 800b964:	bd38      	pop	{r3, r4, r5, pc}
 800b966:	bf00      	nop
 800b968:	0800c848 	.word	0x0800c848
 800b96c:	0800c868 	.word	0x0800c868
 800b970:	0800c828 	.word	0x0800c828

0800b974 <std>:
 800b974:	2300      	movs	r3, #0
 800b976:	b510      	push	{r4, lr}
 800b978:	4604      	mov	r4, r0
 800b97a:	e9c0 3300 	strd	r3, r3, [r0]
 800b97e:	6083      	str	r3, [r0, #8]
 800b980:	8181      	strh	r1, [r0, #12]
 800b982:	6643      	str	r3, [r0, #100]	; 0x64
 800b984:	81c2      	strh	r2, [r0, #14]
 800b986:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b98a:	6183      	str	r3, [r0, #24]
 800b98c:	4619      	mov	r1, r3
 800b98e:	2208      	movs	r2, #8
 800b990:	305c      	adds	r0, #92	; 0x5c
 800b992:	f7ff fd43 	bl	800b41c <memset>
 800b996:	4b05      	ldr	r3, [pc, #20]	; (800b9ac <std+0x38>)
 800b998:	6263      	str	r3, [r4, #36]	; 0x24
 800b99a:	4b05      	ldr	r3, [pc, #20]	; (800b9b0 <std+0x3c>)
 800b99c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b99e:	4b05      	ldr	r3, [pc, #20]	; (800b9b4 <std+0x40>)
 800b9a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b9a2:	4b05      	ldr	r3, [pc, #20]	; (800b9b8 <std+0x44>)
 800b9a4:	6224      	str	r4, [r4, #32]
 800b9a6:	6323      	str	r3, [r4, #48]	; 0x30
 800b9a8:	bd10      	pop	{r4, pc}
 800b9aa:	bf00      	nop
 800b9ac:	0800c165 	.word	0x0800c165
 800b9b0:	0800c187 	.word	0x0800c187
 800b9b4:	0800c1bf 	.word	0x0800c1bf
 800b9b8:	0800c1e3 	.word	0x0800c1e3

0800b9bc <_cleanup_r>:
 800b9bc:	4901      	ldr	r1, [pc, #4]	; (800b9c4 <_cleanup_r+0x8>)
 800b9be:	f000 b885 	b.w	800bacc <_fwalk_reent>
 800b9c2:	bf00      	nop
 800b9c4:	0800b921 	.word	0x0800b921

0800b9c8 <__sfmoreglue>:
 800b9c8:	b570      	push	{r4, r5, r6, lr}
 800b9ca:	1e4a      	subs	r2, r1, #1
 800b9cc:	2568      	movs	r5, #104	; 0x68
 800b9ce:	4355      	muls	r5, r2
 800b9d0:	460e      	mov	r6, r1
 800b9d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b9d6:	f7ff fd77 	bl	800b4c8 <_malloc_r>
 800b9da:	4604      	mov	r4, r0
 800b9dc:	b140      	cbz	r0, 800b9f0 <__sfmoreglue+0x28>
 800b9de:	2100      	movs	r1, #0
 800b9e0:	e9c0 1600 	strd	r1, r6, [r0]
 800b9e4:	300c      	adds	r0, #12
 800b9e6:	60a0      	str	r0, [r4, #8]
 800b9e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b9ec:	f7ff fd16 	bl	800b41c <memset>
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	bd70      	pop	{r4, r5, r6, pc}

0800b9f4 <__sinit>:
 800b9f4:	6983      	ldr	r3, [r0, #24]
 800b9f6:	b510      	push	{r4, lr}
 800b9f8:	4604      	mov	r4, r0
 800b9fa:	bb33      	cbnz	r3, 800ba4a <__sinit+0x56>
 800b9fc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ba00:	6503      	str	r3, [r0, #80]	; 0x50
 800ba02:	4b12      	ldr	r3, [pc, #72]	; (800ba4c <__sinit+0x58>)
 800ba04:	4a12      	ldr	r2, [pc, #72]	; (800ba50 <__sinit+0x5c>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	6282      	str	r2, [r0, #40]	; 0x28
 800ba0a:	4298      	cmp	r0, r3
 800ba0c:	bf04      	itt	eq
 800ba0e:	2301      	moveq	r3, #1
 800ba10:	6183      	streq	r3, [r0, #24]
 800ba12:	f000 f81f 	bl	800ba54 <__sfp>
 800ba16:	6060      	str	r0, [r4, #4]
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f000 f81b 	bl	800ba54 <__sfp>
 800ba1e:	60a0      	str	r0, [r4, #8]
 800ba20:	4620      	mov	r0, r4
 800ba22:	f000 f817 	bl	800ba54 <__sfp>
 800ba26:	2200      	movs	r2, #0
 800ba28:	60e0      	str	r0, [r4, #12]
 800ba2a:	2104      	movs	r1, #4
 800ba2c:	6860      	ldr	r0, [r4, #4]
 800ba2e:	f7ff ffa1 	bl	800b974 <std>
 800ba32:	2201      	movs	r2, #1
 800ba34:	2109      	movs	r1, #9
 800ba36:	68a0      	ldr	r0, [r4, #8]
 800ba38:	f7ff ff9c 	bl	800b974 <std>
 800ba3c:	2202      	movs	r2, #2
 800ba3e:	2112      	movs	r1, #18
 800ba40:	68e0      	ldr	r0, [r4, #12]
 800ba42:	f7ff ff97 	bl	800b974 <std>
 800ba46:	2301      	movs	r3, #1
 800ba48:	61a3      	str	r3, [r4, #24]
 800ba4a:	bd10      	pop	{r4, pc}
 800ba4c:	0800c824 	.word	0x0800c824
 800ba50:	0800b9bd 	.word	0x0800b9bd

0800ba54 <__sfp>:
 800ba54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba56:	4b1b      	ldr	r3, [pc, #108]	; (800bac4 <__sfp+0x70>)
 800ba58:	681e      	ldr	r6, [r3, #0]
 800ba5a:	69b3      	ldr	r3, [r6, #24]
 800ba5c:	4607      	mov	r7, r0
 800ba5e:	b913      	cbnz	r3, 800ba66 <__sfp+0x12>
 800ba60:	4630      	mov	r0, r6
 800ba62:	f7ff ffc7 	bl	800b9f4 <__sinit>
 800ba66:	3648      	adds	r6, #72	; 0x48
 800ba68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	d503      	bpl.n	800ba78 <__sfp+0x24>
 800ba70:	6833      	ldr	r3, [r6, #0]
 800ba72:	b133      	cbz	r3, 800ba82 <__sfp+0x2e>
 800ba74:	6836      	ldr	r6, [r6, #0]
 800ba76:	e7f7      	b.n	800ba68 <__sfp+0x14>
 800ba78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba7c:	b16d      	cbz	r5, 800ba9a <__sfp+0x46>
 800ba7e:	3468      	adds	r4, #104	; 0x68
 800ba80:	e7f4      	b.n	800ba6c <__sfp+0x18>
 800ba82:	2104      	movs	r1, #4
 800ba84:	4638      	mov	r0, r7
 800ba86:	f7ff ff9f 	bl	800b9c8 <__sfmoreglue>
 800ba8a:	6030      	str	r0, [r6, #0]
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	d1f1      	bne.n	800ba74 <__sfp+0x20>
 800ba90:	230c      	movs	r3, #12
 800ba92:	603b      	str	r3, [r7, #0]
 800ba94:	4604      	mov	r4, r0
 800ba96:	4620      	mov	r0, r4
 800ba98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba9a:	4b0b      	ldr	r3, [pc, #44]	; (800bac8 <__sfp+0x74>)
 800ba9c:	6665      	str	r5, [r4, #100]	; 0x64
 800ba9e:	e9c4 5500 	strd	r5, r5, [r4]
 800baa2:	60a5      	str	r5, [r4, #8]
 800baa4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800baa8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800baac:	2208      	movs	r2, #8
 800baae:	4629      	mov	r1, r5
 800bab0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bab4:	f7ff fcb2 	bl	800b41c <memset>
 800bab8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800babc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bac0:	e7e9      	b.n	800ba96 <__sfp+0x42>
 800bac2:	bf00      	nop
 800bac4:	0800c824 	.word	0x0800c824
 800bac8:	ffff0001 	.word	0xffff0001

0800bacc <_fwalk_reent>:
 800bacc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bad0:	4680      	mov	r8, r0
 800bad2:	4689      	mov	r9, r1
 800bad4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bad8:	2600      	movs	r6, #0
 800bada:	b914      	cbnz	r4, 800bae2 <_fwalk_reent+0x16>
 800badc:	4630      	mov	r0, r6
 800bade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bae2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800bae6:	3f01      	subs	r7, #1
 800bae8:	d501      	bpl.n	800baee <_fwalk_reent+0x22>
 800baea:	6824      	ldr	r4, [r4, #0]
 800baec:	e7f5      	b.n	800bada <_fwalk_reent+0xe>
 800baee:	89ab      	ldrh	r3, [r5, #12]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d907      	bls.n	800bb04 <_fwalk_reent+0x38>
 800baf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800baf8:	3301      	adds	r3, #1
 800bafa:	d003      	beq.n	800bb04 <_fwalk_reent+0x38>
 800bafc:	4629      	mov	r1, r5
 800bafe:	4640      	mov	r0, r8
 800bb00:	47c8      	blx	r9
 800bb02:	4306      	orrs	r6, r0
 800bb04:	3568      	adds	r5, #104	; 0x68
 800bb06:	e7ee      	b.n	800bae6 <_fwalk_reent+0x1a>

0800bb08 <__swhatbuf_r>:
 800bb08:	b570      	push	{r4, r5, r6, lr}
 800bb0a:	460e      	mov	r6, r1
 800bb0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb10:	2900      	cmp	r1, #0
 800bb12:	b096      	sub	sp, #88	; 0x58
 800bb14:	4614      	mov	r4, r2
 800bb16:	461d      	mov	r5, r3
 800bb18:	da07      	bge.n	800bb2a <__swhatbuf_r+0x22>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	602b      	str	r3, [r5, #0]
 800bb1e:	89b3      	ldrh	r3, [r6, #12]
 800bb20:	061a      	lsls	r2, r3, #24
 800bb22:	d410      	bmi.n	800bb46 <__swhatbuf_r+0x3e>
 800bb24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb28:	e00e      	b.n	800bb48 <__swhatbuf_r+0x40>
 800bb2a:	466a      	mov	r2, sp
 800bb2c:	f000 fb80 	bl	800c230 <_fstat_r>
 800bb30:	2800      	cmp	r0, #0
 800bb32:	dbf2      	blt.n	800bb1a <__swhatbuf_r+0x12>
 800bb34:	9a01      	ldr	r2, [sp, #4]
 800bb36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb3e:	425a      	negs	r2, r3
 800bb40:	415a      	adcs	r2, r3
 800bb42:	602a      	str	r2, [r5, #0]
 800bb44:	e7ee      	b.n	800bb24 <__swhatbuf_r+0x1c>
 800bb46:	2340      	movs	r3, #64	; 0x40
 800bb48:	2000      	movs	r0, #0
 800bb4a:	6023      	str	r3, [r4, #0]
 800bb4c:	b016      	add	sp, #88	; 0x58
 800bb4e:	bd70      	pop	{r4, r5, r6, pc}

0800bb50 <__smakebuf_r>:
 800bb50:	898b      	ldrh	r3, [r1, #12]
 800bb52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb54:	079d      	lsls	r5, r3, #30
 800bb56:	4606      	mov	r6, r0
 800bb58:	460c      	mov	r4, r1
 800bb5a:	d507      	bpl.n	800bb6c <__smakebuf_r+0x1c>
 800bb5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb60:	6023      	str	r3, [r4, #0]
 800bb62:	6123      	str	r3, [r4, #16]
 800bb64:	2301      	movs	r3, #1
 800bb66:	6163      	str	r3, [r4, #20]
 800bb68:	b002      	add	sp, #8
 800bb6a:	bd70      	pop	{r4, r5, r6, pc}
 800bb6c:	ab01      	add	r3, sp, #4
 800bb6e:	466a      	mov	r2, sp
 800bb70:	f7ff ffca 	bl	800bb08 <__swhatbuf_r>
 800bb74:	9900      	ldr	r1, [sp, #0]
 800bb76:	4605      	mov	r5, r0
 800bb78:	4630      	mov	r0, r6
 800bb7a:	f7ff fca5 	bl	800b4c8 <_malloc_r>
 800bb7e:	b948      	cbnz	r0, 800bb94 <__smakebuf_r+0x44>
 800bb80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb84:	059a      	lsls	r2, r3, #22
 800bb86:	d4ef      	bmi.n	800bb68 <__smakebuf_r+0x18>
 800bb88:	f023 0303 	bic.w	r3, r3, #3
 800bb8c:	f043 0302 	orr.w	r3, r3, #2
 800bb90:	81a3      	strh	r3, [r4, #12]
 800bb92:	e7e3      	b.n	800bb5c <__smakebuf_r+0xc>
 800bb94:	4b0d      	ldr	r3, [pc, #52]	; (800bbcc <__smakebuf_r+0x7c>)
 800bb96:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb98:	89a3      	ldrh	r3, [r4, #12]
 800bb9a:	6020      	str	r0, [r4, #0]
 800bb9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bba0:	81a3      	strh	r3, [r4, #12]
 800bba2:	9b00      	ldr	r3, [sp, #0]
 800bba4:	6163      	str	r3, [r4, #20]
 800bba6:	9b01      	ldr	r3, [sp, #4]
 800bba8:	6120      	str	r0, [r4, #16]
 800bbaa:	b15b      	cbz	r3, 800bbc4 <__smakebuf_r+0x74>
 800bbac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	f000 fb4f 	bl	800c254 <_isatty_r>
 800bbb6:	b128      	cbz	r0, 800bbc4 <__smakebuf_r+0x74>
 800bbb8:	89a3      	ldrh	r3, [r4, #12]
 800bbba:	f023 0303 	bic.w	r3, r3, #3
 800bbbe:	f043 0301 	orr.w	r3, r3, #1
 800bbc2:	81a3      	strh	r3, [r4, #12]
 800bbc4:	89a3      	ldrh	r3, [r4, #12]
 800bbc6:	431d      	orrs	r5, r3
 800bbc8:	81a5      	strh	r5, [r4, #12]
 800bbca:	e7cd      	b.n	800bb68 <__smakebuf_r+0x18>
 800bbcc:	0800b9bd 	.word	0x0800b9bd

0800bbd0 <__malloc_lock>:
 800bbd0:	4770      	bx	lr

0800bbd2 <__malloc_unlock>:
 800bbd2:	4770      	bx	lr

0800bbd4 <__sfputc_r>:
 800bbd4:	6893      	ldr	r3, [r2, #8]
 800bbd6:	3b01      	subs	r3, #1
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	b410      	push	{r4}
 800bbdc:	6093      	str	r3, [r2, #8]
 800bbde:	da08      	bge.n	800bbf2 <__sfputc_r+0x1e>
 800bbe0:	6994      	ldr	r4, [r2, #24]
 800bbe2:	42a3      	cmp	r3, r4
 800bbe4:	db01      	blt.n	800bbea <__sfputc_r+0x16>
 800bbe6:	290a      	cmp	r1, #10
 800bbe8:	d103      	bne.n	800bbf2 <__sfputc_r+0x1e>
 800bbea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbee:	f7ff bd51 	b.w	800b694 <__swbuf_r>
 800bbf2:	6813      	ldr	r3, [r2, #0]
 800bbf4:	1c58      	adds	r0, r3, #1
 800bbf6:	6010      	str	r0, [r2, #0]
 800bbf8:	7019      	strb	r1, [r3, #0]
 800bbfa:	4608      	mov	r0, r1
 800bbfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc00:	4770      	bx	lr

0800bc02 <__sfputs_r>:
 800bc02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc04:	4606      	mov	r6, r0
 800bc06:	460f      	mov	r7, r1
 800bc08:	4614      	mov	r4, r2
 800bc0a:	18d5      	adds	r5, r2, r3
 800bc0c:	42ac      	cmp	r4, r5
 800bc0e:	d101      	bne.n	800bc14 <__sfputs_r+0x12>
 800bc10:	2000      	movs	r0, #0
 800bc12:	e007      	b.n	800bc24 <__sfputs_r+0x22>
 800bc14:	463a      	mov	r2, r7
 800bc16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	f7ff ffda 	bl	800bbd4 <__sfputc_r>
 800bc20:	1c43      	adds	r3, r0, #1
 800bc22:	d1f3      	bne.n	800bc0c <__sfputs_r+0xa>
 800bc24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc28 <_vfiprintf_r>:
 800bc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc2c:	460c      	mov	r4, r1
 800bc2e:	b09d      	sub	sp, #116	; 0x74
 800bc30:	4617      	mov	r7, r2
 800bc32:	461d      	mov	r5, r3
 800bc34:	4606      	mov	r6, r0
 800bc36:	b118      	cbz	r0, 800bc40 <_vfiprintf_r+0x18>
 800bc38:	6983      	ldr	r3, [r0, #24]
 800bc3a:	b90b      	cbnz	r3, 800bc40 <_vfiprintf_r+0x18>
 800bc3c:	f7ff feda 	bl	800b9f4 <__sinit>
 800bc40:	4b7c      	ldr	r3, [pc, #496]	; (800be34 <_vfiprintf_r+0x20c>)
 800bc42:	429c      	cmp	r4, r3
 800bc44:	d158      	bne.n	800bcf8 <_vfiprintf_r+0xd0>
 800bc46:	6874      	ldr	r4, [r6, #4]
 800bc48:	89a3      	ldrh	r3, [r4, #12]
 800bc4a:	0718      	lsls	r0, r3, #28
 800bc4c:	d55e      	bpl.n	800bd0c <_vfiprintf_r+0xe4>
 800bc4e:	6923      	ldr	r3, [r4, #16]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d05b      	beq.n	800bd0c <_vfiprintf_r+0xe4>
 800bc54:	2300      	movs	r3, #0
 800bc56:	9309      	str	r3, [sp, #36]	; 0x24
 800bc58:	2320      	movs	r3, #32
 800bc5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc5e:	2330      	movs	r3, #48	; 0x30
 800bc60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc64:	9503      	str	r5, [sp, #12]
 800bc66:	f04f 0b01 	mov.w	fp, #1
 800bc6a:	46b8      	mov	r8, r7
 800bc6c:	4645      	mov	r5, r8
 800bc6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bc72:	b10b      	cbz	r3, 800bc78 <_vfiprintf_r+0x50>
 800bc74:	2b25      	cmp	r3, #37	; 0x25
 800bc76:	d154      	bne.n	800bd22 <_vfiprintf_r+0xfa>
 800bc78:	ebb8 0a07 	subs.w	sl, r8, r7
 800bc7c:	d00b      	beq.n	800bc96 <_vfiprintf_r+0x6e>
 800bc7e:	4653      	mov	r3, sl
 800bc80:	463a      	mov	r2, r7
 800bc82:	4621      	mov	r1, r4
 800bc84:	4630      	mov	r0, r6
 800bc86:	f7ff ffbc 	bl	800bc02 <__sfputs_r>
 800bc8a:	3001      	adds	r0, #1
 800bc8c:	f000 80c2 	beq.w	800be14 <_vfiprintf_r+0x1ec>
 800bc90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc92:	4453      	add	r3, sl
 800bc94:	9309      	str	r3, [sp, #36]	; 0x24
 800bc96:	f898 3000 	ldrb.w	r3, [r8]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f000 80ba 	beq.w	800be14 <_vfiprintf_r+0x1ec>
 800bca0:	2300      	movs	r3, #0
 800bca2:	f04f 32ff 	mov.w	r2, #4294967295
 800bca6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcaa:	9304      	str	r3, [sp, #16]
 800bcac:	9307      	str	r3, [sp, #28]
 800bcae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcb2:	931a      	str	r3, [sp, #104]	; 0x68
 800bcb4:	46a8      	mov	r8, r5
 800bcb6:	2205      	movs	r2, #5
 800bcb8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800bcbc:	485e      	ldr	r0, [pc, #376]	; (800be38 <_vfiprintf_r+0x210>)
 800bcbe:	f7f4 faaf 	bl	8000220 <memchr>
 800bcc2:	9b04      	ldr	r3, [sp, #16]
 800bcc4:	bb78      	cbnz	r0, 800bd26 <_vfiprintf_r+0xfe>
 800bcc6:	06d9      	lsls	r1, r3, #27
 800bcc8:	bf44      	itt	mi
 800bcca:	2220      	movmi	r2, #32
 800bccc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bcd0:	071a      	lsls	r2, r3, #28
 800bcd2:	bf44      	itt	mi
 800bcd4:	222b      	movmi	r2, #43	; 0x2b
 800bcd6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bcda:	782a      	ldrb	r2, [r5, #0]
 800bcdc:	2a2a      	cmp	r2, #42	; 0x2a
 800bcde:	d02a      	beq.n	800bd36 <_vfiprintf_r+0x10e>
 800bce0:	9a07      	ldr	r2, [sp, #28]
 800bce2:	46a8      	mov	r8, r5
 800bce4:	2000      	movs	r0, #0
 800bce6:	250a      	movs	r5, #10
 800bce8:	4641      	mov	r1, r8
 800bcea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcee:	3b30      	subs	r3, #48	; 0x30
 800bcf0:	2b09      	cmp	r3, #9
 800bcf2:	d969      	bls.n	800bdc8 <_vfiprintf_r+0x1a0>
 800bcf4:	b360      	cbz	r0, 800bd50 <_vfiprintf_r+0x128>
 800bcf6:	e024      	b.n	800bd42 <_vfiprintf_r+0x11a>
 800bcf8:	4b50      	ldr	r3, [pc, #320]	; (800be3c <_vfiprintf_r+0x214>)
 800bcfa:	429c      	cmp	r4, r3
 800bcfc:	d101      	bne.n	800bd02 <_vfiprintf_r+0xda>
 800bcfe:	68b4      	ldr	r4, [r6, #8]
 800bd00:	e7a2      	b.n	800bc48 <_vfiprintf_r+0x20>
 800bd02:	4b4f      	ldr	r3, [pc, #316]	; (800be40 <_vfiprintf_r+0x218>)
 800bd04:	429c      	cmp	r4, r3
 800bd06:	bf08      	it	eq
 800bd08:	68f4      	ldreq	r4, [r6, #12]
 800bd0a:	e79d      	b.n	800bc48 <_vfiprintf_r+0x20>
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	4630      	mov	r0, r6
 800bd10:	f7ff fd12 	bl	800b738 <__swsetup_r>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	d09d      	beq.n	800bc54 <_vfiprintf_r+0x2c>
 800bd18:	f04f 30ff 	mov.w	r0, #4294967295
 800bd1c:	b01d      	add	sp, #116	; 0x74
 800bd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd22:	46a8      	mov	r8, r5
 800bd24:	e7a2      	b.n	800bc6c <_vfiprintf_r+0x44>
 800bd26:	4a44      	ldr	r2, [pc, #272]	; (800be38 <_vfiprintf_r+0x210>)
 800bd28:	1a80      	subs	r0, r0, r2
 800bd2a:	fa0b f000 	lsl.w	r0, fp, r0
 800bd2e:	4318      	orrs	r0, r3
 800bd30:	9004      	str	r0, [sp, #16]
 800bd32:	4645      	mov	r5, r8
 800bd34:	e7be      	b.n	800bcb4 <_vfiprintf_r+0x8c>
 800bd36:	9a03      	ldr	r2, [sp, #12]
 800bd38:	1d11      	adds	r1, r2, #4
 800bd3a:	6812      	ldr	r2, [r2, #0]
 800bd3c:	9103      	str	r1, [sp, #12]
 800bd3e:	2a00      	cmp	r2, #0
 800bd40:	db01      	blt.n	800bd46 <_vfiprintf_r+0x11e>
 800bd42:	9207      	str	r2, [sp, #28]
 800bd44:	e004      	b.n	800bd50 <_vfiprintf_r+0x128>
 800bd46:	4252      	negs	r2, r2
 800bd48:	f043 0302 	orr.w	r3, r3, #2
 800bd4c:	9207      	str	r2, [sp, #28]
 800bd4e:	9304      	str	r3, [sp, #16]
 800bd50:	f898 3000 	ldrb.w	r3, [r8]
 800bd54:	2b2e      	cmp	r3, #46	; 0x2e
 800bd56:	d10e      	bne.n	800bd76 <_vfiprintf_r+0x14e>
 800bd58:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bd5c:	2b2a      	cmp	r3, #42	; 0x2a
 800bd5e:	d138      	bne.n	800bdd2 <_vfiprintf_r+0x1aa>
 800bd60:	9b03      	ldr	r3, [sp, #12]
 800bd62:	1d1a      	adds	r2, r3, #4
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	9203      	str	r2, [sp, #12]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	bfb8      	it	lt
 800bd6c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd70:	f108 0802 	add.w	r8, r8, #2
 800bd74:	9305      	str	r3, [sp, #20]
 800bd76:	4d33      	ldr	r5, [pc, #204]	; (800be44 <_vfiprintf_r+0x21c>)
 800bd78:	f898 1000 	ldrb.w	r1, [r8]
 800bd7c:	2203      	movs	r2, #3
 800bd7e:	4628      	mov	r0, r5
 800bd80:	f7f4 fa4e 	bl	8000220 <memchr>
 800bd84:	b140      	cbz	r0, 800bd98 <_vfiprintf_r+0x170>
 800bd86:	2340      	movs	r3, #64	; 0x40
 800bd88:	1b40      	subs	r0, r0, r5
 800bd8a:	fa03 f000 	lsl.w	r0, r3, r0
 800bd8e:	9b04      	ldr	r3, [sp, #16]
 800bd90:	4303      	orrs	r3, r0
 800bd92:	f108 0801 	add.w	r8, r8, #1
 800bd96:	9304      	str	r3, [sp, #16]
 800bd98:	f898 1000 	ldrb.w	r1, [r8]
 800bd9c:	482a      	ldr	r0, [pc, #168]	; (800be48 <_vfiprintf_r+0x220>)
 800bd9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bda2:	2206      	movs	r2, #6
 800bda4:	f108 0701 	add.w	r7, r8, #1
 800bda8:	f7f4 fa3a 	bl	8000220 <memchr>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d037      	beq.n	800be20 <_vfiprintf_r+0x1f8>
 800bdb0:	4b26      	ldr	r3, [pc, #152]	; (800be4c <_vfiprintf_r+0x224>)
 800bdb2:	bb1b      	cbnz	r3, 800bdfc <_vfiprintf_r+0x1d4>
 800bdb4:	9b03      	ldr	r3, [sp, #12]
 800bdb6:	3307      	adds	r3, #7
 800bdb8:	f023 0307 	bic.w	r3, r3, #7
 800bdbc:	3308      	adds	r3, #8
 800bdbe:	9303      	str	r3, [sp, #12]
 800bdc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdc2:	444b      	add	r3, r9
 800bdc4:	9309      	str	r3, [sp, #36]	; 0x24
 800bdc6:	e750      	b.n	800bc6a <_vfiprintf_r+0x42>
 800bdc8:	fb05 3202 	mla	r2, r5, r2, r3
 800bdcc:	2001      	movs	r0, #1
 800bdce:	4688      	mov	r8, r1
 800bdd0:	e78a      	b.n	800bce8 <_vfiprintf_r+0xc0>
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	f108 0801 	add.w	r8, r8, #1
 800bdd8:	9305      	str	r3, [sp, #20]
 800bdda:	4619      	mov	r1, r3
 800bddc:	250a      	movs	r5, #10
 800bdde:	4640      	mov	r0, r8
 800bde0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bde4:	3a30      	subs	r2, #48	; 0x30
 800bde6:	2a09      	cmp	r2, #9
 800bde8:	d903      	bls.n	800bdf2 <_vfiprintf_r+0x1ca>
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d0c3      	beq.n	800bd76 <_vfiprintf_r+0x14e>
 800bdee:	9105      	str	r1, [sp, #20]
 800bdf0:	e7c1      	b.n	800bd76 <_vfiprintf_r+0x14e>
 800bdf2:	fb05 2101 	mla	r1, r5, r1, r2
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	4680      	mov	r8, r0
 800bdfa:	e7f0      	b.n	800bdde <_vfiprintf_r+0x1b6>
 800bdfc:	ab03      	add	r3, sp, #12
 800bdfe:	9300      	str	r3, [sp, #0]
 800be00:	4622      	mov	r2, r4
 800be02:	4b13      	ldr	r3, [pc, #76]	; (800be50 <_vfiprintf_r+0x228>)
 800be04:	a904      	add	r1, sp, #16
 800be06:	4630      	mov	r0, r6
 800be08:	f3af 8000 	nop.w
 800be0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800be10:	4681      	mov	r9, r0
 800be12:	d1d5      	bne.n	800bdc0 <_vfiprintf_r+0x198>
 800be14:	89a3      	ldrh	r3, [r4, #12]
 800be16:	065b      	lsls	r3, r3, #25
 800be18:	f53f af7e 	bmi.w	800bd18 <_vfiprintf_r+0xf0>
 800be1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be1e:	e77d      	b.n	800bd1c <_vfiprintf_r+0xf4>
 800be20:	ab03      	add	r3, sp, #12
 800be22:	9300      	str	r3, [sp, #0]
 800be24:	4622      	mov	r2, r4
 800be26:	4b0a      	ldr	r3, [pc, #40]	; (800be50 <_vfiprintf_r+0x228>)
 800be28:	a904      	add	r1, sp, #16
 800be2a:	4630      	mov	r0, r6
 800be2c:	f000 f888 	bl	800bf40 <_printf_i>
 800be30:	e7ec      	b.n	800be0c <_vfiprintf_r+0x1e4>
 800be32:	bf00      	nop
 800be34:	0800c848 	.word	0x0800c848
 800be38:	0800c888 	.word	0x0800c888
 800be3c:	0800c868 	.word	0x0800c868
 800be40:	0800c828 	.word	0x0800c828
 800be44:	0800c88e 	.word	0x0800c88e
 800be48:	0800c892 	.word	0x0800c892
 800be4c:	00000000 	.word	0x00000000
 800be50:	0800bc03 	.word	0x0800bc03

0800be54 <_printf_common>:
 800be54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be58:	4691      	mov	r9, r2
 800be5a:	461f      	mov	r7, r3
 800be5c:	688a      	ldr	r2, [r1, #8]
 800be5e:	690b      	ldr	r3, [r1, #16]
 800be60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be64:	4293      	cmp	r3, r2
 800be66:	bfb8      	it	lt
 800be68:	4613      	movlt	r3, r2
 800be6a:	f8c9 3000 	str.w	r3, [r9]
 800be6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be72:	4606      	mov	r6, r0
 800be74:	460c      	mov	r4, r1
 800be76:	b112      	cbz	r2, 800be7e <_printf_common+0x2a>
 800be78:	3301      	adds	r3, #1
 800be7a:	f8c9 3000 	str.w	r3, [r9]
 800be7e:	6823      	ldr	r3, [r4, #0]
 800be80:	0699      	lsls	r1, r3, #26
 800be82:	bf42      	ittt	mi
 800be84:	f8d9 3000 	ldrmi.w	r3, [r9]
 800be88:	3302      	addmi	r3, #2
 800be8a:	f8c9 3000 	strmi.w	r3, [r9]
 800be8e:	6825      	ldr	r5, [r4, #0]
 800be90:	f015 0506 	ands.w	r5, r5, #6
 800be94:	d107      	bne.n	800bea6 <_printf_common+0x52>
 800be96:	f104 0a19 	add.w	sl, r4, #25
 800be9a:	68e3      	ldr	r3, [r4, #12]
 800be9c:	f8d9 2000 	ldr.w	r2, [r9]
 800bea0:	1a9b      	subs	r3, r3, r2
 800bea2:	42ab      	cmp	r3, r5
 800bea4:	dc28      	bgt.n	800bef8 <_printf_common+0xa4>
 800bea6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800beaa:	6822      	ldr	r2, [r4, #0]
 800beac:	3300      	adds	r3, #0
 800beae:	bf18      	it	ne
 800beb0:	2301      	movne	r3, #1
 800beb2:	0692      	lsls	r2, r2, #26
 800beb4:	d42d      	bmi.n	800bf12 <_printf_common+0xbe>
 800beb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800beba:	4639      	mov	r1, r7
 800bebc:	4630      	mov	r0, r6
 800bebe:	47c0      	blx	r8
 800bec0:	3001      	adds	r0, #1
 800bec2:	d020      	beq.n	800bf06 <_printf_common+0xb2>
 800bec4:	6823      	ldr	r3, [r4, #0]
 800bec6:	68e5      	ldr	r5, [r4, #12]
 800bec8:	f8d9 2000 	ldr.w	r2, [r9]
 800becc:	f003 0306 	and.w	r3, r3, #6
 800bed0:	2b04      	cmp	r3, #4
 800bed2:	bf08      	it	eq
 800bed4:	1aad      	subeq	r5, r5, r2
 800bed6:	68a3      	ldr	r3, [r4, #8]
 800bed8:	6922      	ldr	r2, [r4, #16]
 800beda:	bf0c      	ite	eq
 800bedc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bee0:	2500      	movne	r5, #0
 800bee2:	4293      	cmp	r3, r2
 800bee4:	bfc4      	itt	gt
 800bee6:	1a9b      	subgt	r3, r3, r2
 800bee8:	18ed      	addgt	r5, r5, r3
 800beea:	f04f 0900 	mov.w	r9, #0
 800beee:	341a      	adds	r4, #26
 800bef0:	454d      	cmp	r5, r9
 800bef2:	d11a      	bne.n	800bf2a <_printf_common+0xd6>
 800bef4:	2000      	movs	r0, #0
 800bef6:	e008      	b.n	800bf0a <_printf_common+0xb6>
 800bef8:	2301      	movs	r3, #1
 800befa:	4652      	mov	r2, sl
 800befc:	4639      	mov	r1, r7
 800befe:	4630      	mov	r0, r6
 800bf00:	47c0      	blx	r8
 800bf02:	3001      	adds	r0, #1
 800bf04:	d103      	bne.n	800bf0e <_printf_common+0xba>
 800bf06:	f04f 30ff 	mov.w	r0, #4294967295
 800bf0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf0e:	3501      	adds	r5, #1
 800bf10:	e7c3      	b.n	800be9a <_printf_common+0x46>
 800bf12:	18e1      	adds	r1, r4, r3
 800bf14:	1c5a      	adds	r2, r3, #1
 800bf16:	2030      	movs	r0, #48	; 0x30
 800bf18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf1c:	4422      	add	r2, r4
 800bf1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf26:	3302      	adds	r3, #2
 800bf28:	e7c5      	b.n	800beb6 <_printf_common+0x62>
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	4622      	mov	r2, r4
 800bf2e:	4639      	mov	r1, r7
 800bf30:	4630      	mov	r0, r6
 800bf32:	47c0      	blx	r8
 800bf34:	3001      	adds	r0, #1
 800bf36:	d0e6      	beq.n	800bf06 <_printf_common+0xb2>
 800bf38:	f109 0901 	add.w	r9, r9, #1
 800bf3c:	e7d8      	b.n	800bef0 <_printf_common+0x9c>
	...

0800bf40 <_printf_i>:
 800bf40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf44:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bf48:	460c      	mov	r4, r1
 800bf4a:	7e09      	ldrb	r1, [r1, #24]
 800bf4c:	b085      	sub	sp, #20
 800bf4e:	296e      	cmp	r1, #110	; 0x6e
 800bf50:	4617      	mov	r7, r2
 800bf52:	4606      	mov	r6, r0
 800bf54:	4698      	mov	r8, r3
 800bf56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf58:	f000 80b3 	beq.w	800c0c2 <_printf_i+0x182>
 800bf5c:	d822      	bhi.n	800bfa4 <_printf_i+0x64>
 800bf5e:	2963      	cmp	r1, #99	; 0x63
 800bf60:	d036      	beq.n	800bfd0 <_printf_i+0x90>
 800bf62:	d80a      	bhi.n	800bf7a <_printf_i+0x3a>
 800bf64:	2900      	cmp	r1, #0
 800bf66:	f000 80b9 	beq.w	800c0dc <_printf_i+0x19c>
 800bf6a:	2958      	cmp	r1, #88	; 0x58
 800bf6c:	f000 8083 	beq.w	800c076 <_printf_i+0x136>
 800bf70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf74:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bf78:	e032      	b.n	800bfe0 <_printf_i+0xa0>
 800bf7a:	2964      	cmp	r1, #100	; 0x64
 800bf7c:	d001      	beq.n	800bf82 <_printf_i+0x42>
 800bf7e:	2969      	cmp	r1, #105	; 0x69
 800bf80:	d1f6      	bne.n	800bf70 <_printf_i+0x30>
 800bf82:	6820      	ldr	r0, [r4, #0]
 800bf84:	6813      	ldr	r3, [r2, #0]
 800bf86:	0605      	lsls	r5, r0, #24
 800bf88:	f103 0104 	add.w	r1, r3, #4
 800bf8c:	d52a      	bpl.n	800bfe4 <_printf_i+0xa4>
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	6011      	str	r1, [r2, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	da03      	bge.n	800bf9e <_printf_i+0x5e>
 800bf96:	222d      	movs	r2, #45	; 0x2d
 800bf98:	425b      	negs	r3, r3
 800bf9a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bf9e:	486f      	ldr	r0, [pc, #444]	; (800c15c <_printf_i+0x21c>)
 800bfa0:	220a      	movs	r2, #10
 800bfa2:	e039      	b.n	800c018 <_printf_i+0xd8>
 800bfa4:	2973      	cmp	r1, #115	; 0x73
 800bfa6:	f000 809d 	beq.w	800c0e4 <_printf_i+0x1a4>
 800bfaa:	d808      	bhi.n	800bfbe <_printf_i+0x7e>
 800bfac:	296f      	cmp	r1, #111	; 0x6f
 800bfae:	d020      	beq.n	800bff2 <_printf_i+0xb2>
 800bfb0:	2970      	cmp	r1, #112	; 0x70
 800bfb2:	d1dd      	bne.n	800bf70 <_printf_i+0x30>
 800bfb4:	6823      	ldr	r3, [r4, #0]
 800bfb6:	f043 0320 	orr.w	r3, r3, #32
 800bfba:	6023      	str	r3, [r4, #0]
 800bfbc:	e003      	b.n	800bfc6 <_printf_i+0x86>
 800bfbe:	2975      	cmp	r1, #117	; 0x75
 800bfc0:	d017      	beq.n	800bff2 <_printf_i+0xb2>
 800bfc2:	2978      	cmp	r1, #120	; 0x78
 800bfc4:	d1d4      	bne.n	800bf70 <_printf_i+0x30>
 800bfc6:	2378      	movs	r3, #120	; 0x78
 800bfc8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bfcc:	4864      	ldr	r0, [pc, #400]	; (800c160 <_printf_i+0x220>)
 800bfce:	e055      	b.n	800c07c <_printf_i+0x13c>
 800bfd0:	6813      	ldr	r3, [r2, #0]
 800bfd2:	1d19      	adds	r1, r3, #4
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	6011      	str	r1, [r2, #0]
 800bfd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e08c      	b.n	800c0fe <_printf_i+0x1be>
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	6011      	str	r1, [r2, #0]
 800bfe8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bfec:	bf18      	it	ne
 800bfee:	b21b      	sxthne	r3, r3
 800bff0:	e7cf      	b.n	800bf92 <_printf_i+0x52>
 800bff2:	6813      	ldr	r3, [r2, #0]
 800bff4:	6825      	ldr	r5, [r4, #0]
 800bff6:	1d18      	adds	r0, r3, #4
 800bff8:	6010      	str	r0, [r2, #0]
 800bffa:	0628      	lsls	r0, r5, #24
 800bffc:	d501      	bpl.n	800c002 <_printf_i+0xc2>
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	e002      	b.n	800c008 <_printf_i+0xc8>
 800c002:	0668      	lsls	r0, r5, #25
 800c004:	d5fb      	bpl.n	800bffe <_printf_i+0xbe>
 800c006:	881b      	ldrh	r3, [r3, #0]
 800c008:	4854      	ldr	r0, [pc, #336]	; (800c15c <_printf_i+0x21c>)
 800c00a:	296f      	cmp	r1, #111	; 0x6f
 800c00c:	bf14      	ite	ne
 800c00e:	220a      	movne	r2, #10
 800c010:	2208      	moveq	r2, #8
 800c012:	2100      	movs	r1, #0
 800c014:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c018:	6865      	ldr	r5, [r4, #4]
 800c01a:	60a5      	str	r5, [r4, #8]
 800c01c:	2d00      	cmp	r5, #0
 800c01e:	f2c0 8095 	blt.w	800c14c <_printf_i+0x20c>
 800c022:	6821      	ldr	r1, [r4, #0]
 800c024:	f021 0104 	bic.w	r1, r1, #4
 800c028:	6021      	str	r1, [r4, #0]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d13d      	bne.n	800c0aa <_printf_i+0x16a>
 800c02e:	2d00      	cmp	r5, #0
 800c030:	f040 808e 	bne.w	800c150 <_printf_i+0x210>
 800c034:	4665      	mov	r5, ip
 800c036:	2a08      	cmp	r2, #8
 800c038:	d10b      	bne.n	800c052 <_printf_i+0x112>
 800c03a:	6823      	ldr	r3, [r4, #0]
 800c03c:	07db      	lsls	r3, r3, #31
 800c03e:	d508      	bpl.n	800c052 <_printf_i+0x112>
 800c040:	6923      	ldr	r3, [r4, #16]
 800c042:	6862      	ldr	r2, [r4, #4]
 800c044:	429a      	cmp	r2, r3
 800c046:	bfde      	ittt	le
 800c048:	2330      	movle	r3, #48	; 0x30
 800c04a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c04e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c052:	ebac 0305 	sub.w	r3, ip, r5
 800c056:	6123      	str	r3, [r4, #16]
 800c058:	f8cd 8000 	str.w	r8, [sp]
 800c05c:	463b      	mov	r3, r7
 800c05e:	aa03      	add	r2, sp, #12
 800c060:	4621      	mov	r1, r4
 800c062:	4630      	mov	r0, r6
 800c064:	f7ff fef6 	bl	800be54 <_printf_common>
 800c068:	3001      	adds	r0, #1
 800c06a:	d14d      	bne.n	800c108 <_printf_i+0x1c8>
 800c06c:	f04f 30ff 	mov.w	r0, #4294967295
 800c070:	b005      	add	sp, #20
 800c072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c076:	4839      	ldr	r0, [pc, #228]	; (800c15c <_printf_i+0x21c>)
 800c078:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c07c:	6813      	ldr	r3, [r2, #0]
 800c07e:	6821      	ldr	r1, [r4, #0]
 800c080:	1d1d      	adds	r5, r3, #4
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	6015      	str	r5, [r2, #0]
 800c086:	060a      	lsls	r2, r1, #24
 800c088:	d50b      	bpl.n	800c0a2 <_printf_i+0x162>
 800c08a:	07ca      	lsls	r2, r1, #31
 800c08c:	bf44      	itt	mi
 800c08e:	f041 0120 	orrmi.w	r1, r1, #32
 800c092:	6021      	strmi	r1, [r4, #0]
 800c094:	b91b      	cbnz	r3, 800c09e <_printf_i+0x15e>
 800c096:	6822      	ldr	r2, [r4, #0]
 800c098:	f022 0220 	bic.w	r2, r2, #32
 800c09c:	6022      	str	r2, [r4, #0]
 800c09e:	2210      	movs	r2, #16
 800c0a0:	e7b7      	b.n	800c012 <_printf_i+0xd2>
 800c0a2:	064d      	lsls	r5, r1, #25
 800c0a4:	bf48      	it	mi
 800c0a6:	b29b      	uxthmi	r3, r3
 800c0a8:	e7ef      	b.n	800c08a <_printf_i+0x14a>
 800c0aa:	4665      	mov	r5, ip
 800c0ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800c0b0:	fb02 3311 	mls	r3, r2, r1, r3
 800c0b4:	5cc3      	ldrb	r3, [r0, r3]
 800c0b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	2900      	cmp	r1, #0
 800c0be:	d1f5      	bne.n	800c0ac <_printf_i+0x16c>
 800c0c0:	e7b9      	b.n	800c036 <_printf_i+0xf6>
 800c0c2:	6813      	ldr	r3, [r2, #0]
 800c0c4:	6825      	ldr	r5, [r4, #0]
 800c0c6:	6961      	ldr	r1, [r4, #20]
 800c0c8:	1d18      	adds	r0, r3, #4
 800c0ca:	6010      	str	r0, [r2, #0]
 800c0cc:	0628      	lsls	r0, r5, #24
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	d501      	bpl.n	800c0d6 <_printf_i+0x196>
 800c0d2:	6019      	str	r1, [r3, #0]
 800c0d4:	e002      	b.n	800c0dc <_printf_i+0x19c>
 800c0d6:	066a      	lsls	r2, r5, #25
 800c0d8:	d5fb      	bpl.n	800c0d2 <_printf_i+0x192>
 800c0da:	8019      	strh	r1, [r3, #0]
 800c0dc:	2300      	movs	r3, #0
 800c0de:	6123      	str	r3, [r4, #16]
 800c0e0:	4665      	mov	r5, ip
 800c0e2:	e7b9      	b.n	800c058 <_printf_i+0x118>
 800c0e4:	6813      	ldr	r3, [r2, #0]
 800c0e6:	1d19      	adds	r1, r3, #4
 800c0e8:	6011      	str	r1, [r2, #0]
 800c0ea:	681d      	ldr	r5, [r3, #0]
 800c0ec:	6862      	ldr	r2, [r4, #4]
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	f7f4 f895 	bl	8000220 <memchr>
 800c0f6:	b108      	cbz	r0, 800c0fc <_printf_i+0x1bc>
 800c0f8:	1b40      	subs	r0, r0, r5
 800c0fa:	6060      	str	r0, [r4, #4]
 800c0fc:	6863      	ldr	r3, [r4, #4]
 800c0fe:	6123      	str	r3, [r4, #16]
 800c100:	2300      	movs	r3, #0
 800c102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c106:	e7a7      	b.n	800c058 <_printf_i+0x118>
 800c108:	6923      	ldr	r3, [r4, #16]
 800c10a:	462a      	mov	r2, r5
 800c10c:	4639      	mov	r1, r7
 800c10e:	4630      	mov	r0, r6
 800c110:	47c0      	blx	r8
 800c112:	3001      	adds	r0, #1
 800c114:	d0aa      	beq.n	800c06c <_printf_i+0x12c>
 800c116:	6823      	ldr	r3, [r4, #0]
 800c118:	079b      	lsls	r3, r3, #30
 800c11a:	d413      	bmi.n	800c144 <_printf_i+0x204>
 800c11c:	68e0      	ldr	r0, [r4, #12]
 800c11e:	9b03      	ldr	r3, [sp, #12]
 800c120:	4298      	cmp	r0, r3
 800c122:	bfb8      	it	lt
 800c124:	4618      	movlt	r0, r3
 800c126:	e7a3      	b.n	800c070 <_printf_i+0x130>
 800c128:	2301      	movs	r3, #1
 800c12a:	464a      	mov	r2, r9
 800c12c:	4639      	mov	r1, r7
 800c12e:	4630      	mov	r0, r6
 800c130:	47c0      	blx	r8
 800c132:	3001      	adds	r0, #1
 800c134:	d09a      	beq.n	800c06c <_printf_i+0x12c>
 800c136:	3501      	adds	r5, #1
 800c138:	68e3      	ldr	r3, [r4, #12]
 800c13a:	9a03      	ldr	r2, [sp, #12]
 800c13c:	1a9b      	subs	r3, r3, r2
 800c13e:	42ab      	cmp	r3, r5
 800c140:	dcf2      	bgt.n	800c128 <_printf_i+0x1e8>
 800c142:	e7eb      	b.n	800c11c <_printf_i+0x1dc>
 800c144:	2500      	movs	r5, #0
 800c146:	f104 0919 	add.w	r9, r4, #25
 800c14a:	e7f5      	b.n	800c138 <_printf_i+0x1f8>
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d1ac      	bne.n	800c0aa <_printf_i+0x16a>
 800c150:	7803      	ldrb	r3, [r0, #0]
 800c152:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c156:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c15a:	e76c      	b.n	800c036 <_printf_i+0xf6>
 800c15c:	0800c899 	.word	0x0800c899
 800c160:	0800c8aa 	.word	0x0800c8aa

0800c164 <__sread>:
 800c164:	b510      	push	{r4, lr}
 800c166:	460c      	mov	r4, r1
 800c168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c16c:	f000 f894 	bl	800c298 <_read_r>
 800c170:	2800      	cmp	r0, #0
 800c172:	bfab      	itete	ge
 800c174:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c176:	89a3      	ldrhlt	r3, [r4, #12]
 800c178:	181b      	addge	r3, r3, r0
 800c17a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c17e:	bfac      	ite	ge
 800c180:	6563      	strge	r3, [r4, #84]	; 0x54
 800c182:	81a3      	strhlt	r3, [r4, #12]
 800c184:	bd10      	pop	{r4, pc}

0800c186 <__swrite>:
 800c186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c18a:	461f      	mov	r7, r3
 800c18c:	898b      	ldrh	r3, [r1, #12]
 800c18e:	05db      	lsls	r3, r3, #23
 800c190:	4605      	mov	r5, r0
 800c192:	460c      	mov	r4, r1
 800c194:	4616      	mov	r6, r2
 800c196:	d505      	bpl.n	800c1a4 <__swrite+0x1e>
 800c198:	2302      	movs	r3, #2
 800c19a:	2200      	movs	r2, #0
 800c19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1a0:	f000 f868 	bl	800c274 <_lseek_r>
 800c1a4:	89a3      	ldrh	r3, [r4, #12]
 800c1a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1ae:	81a3      	strh	r3, [r4, #12]
 800c1b0:	4632      	mov	r2, r6
 800c1b2:	463b      	mov	r3, r7
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ba:	f000 b817 	b.w	800c1ec <_write_r>

0800c1be <__sseek>:
 800c1be:	b510      	push	{r4, lr}
 800c1c0:	460c      	mov	r4, r1
 800c1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1c6:	f000 f855 	bl	800c274 <_lseek_r>
 800c1ca:	1c43      	adds	r3, r0, #1
 800c1cc:	89a3      	ldrh	r3, [r4, #12]
 800c1ce:	bf15      	itete	ne
 800c1d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c1d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c1d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c1da:	81a3      	strheq	r3, [r4, #12]
 800c1dc:	bf18      	it	ne
 800c1de:	81a3      	strhne	r3, [r4, #12]
 800c1e0:	bd10      	pop	{r4, pc}

0800c1e2 <__sclose>:
 800c1e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1e6:	f000 b813 	b.w	800c210 <_close_r>
	...

0800c1ec <_write_r>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4c07      	ldr	r4, [pc, #28]	; (800c20c <_write_r+0x20>)
 800c1f0:	4605      	mov	r5, r0
 800c1f2:	4608      	mov	r0, r1
 800c1f4:	4611      	mov	r1, r2
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	6022      	str	r2, [r4, #0]
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	f7f6 f85b 	bl	80022b6 <_write>
 800c200:	1c43      	adds	r3, r0, #1
 800c202:	d102      	bne.n	800c20a <_write_r+0x1e>
 800c204:	6823      	ldr	r3, [r4, #0]
 800c206:	b103      	cbz	r3, 800c20a <_write_r+0x1e>
 800c208:	602b      	str	r3, [r5, #0]
 800c20a:	bd38      	pop	{r3, r4, r5, pc}
 800c20c:	20006848 	.word	0x20006848

0800c210 <_close_r>:
 800c210:	b538      	push	{r3, r4, r5, lr}
 800c212:	4c06      	ldr	r4, [pc, #24]	; (800c22c <_close_r+0x1c>)
 800c214:	2300      	movs	r3, #0
 800c216:	4605      	mov	r5, r0
 800c218:	4608      	mov	r0, r1
 800c21a:	6023      	str	r3, [r4, #0]
 800c21c:	f7f6 f867 	bl	80022ee <_close>
 800c220:	1c43      	adds	r3, r0, #1
 800c222:	d102      	bne.n	800c22a <_close_r+0x1a>
 800c224:	6823      	ldr	r3, [r4, #0]
 800c226:	b103      	cbz	r3, 800c22a <_close_r+0x1a>
 800c228:	602b      	str	r3, [r5, #0]
 800c22a:	bd38      	pop	{r3, r4, r5, pc}
 800c22c:	20006848 	.word	0x20006848

0800c230 <_fstat_r>:
 800c230:	b538      	push	{r3, r4, r5, lr}
 800c232:	4c07      	ldr	r4, [pc, #28]	; (800c250 <_fstat_r+0x20>)
 800c234:	2300      	movs	r3, #0
 800c236:	4605      	mov	r5, r0
 800c238:	4608      	mov	r0, r1
 800c23a:	4611      	mov	r1, r2
 800c23c:	6023      	str	r3, [r4, #0]
 800c23e:	f7f6 f862 	bl	8002306 <_fstat>
 800c242:	1c43      	adds	r3, r0, #1
 800c244:	d102      	bne.n	800c24c <_fstat_r+0x1c>
 800c246:	6823      	ldr	r3, [r4, #0]
 800c248:	b103      	cbz	r3, 800c24c <_fstat_r+0x1c>
 800c24a:	602b      	str	r3, [r5, #0]
 800c24c:	bd38      	pop	{r3, r4, r5, pc}
 800c24e:	bf00      	nop
 800c250:	20006848 	.word	0x20006848

0800c254 <_isatty_r>:
 800c254:	b538      	push	{r3, r4, r5, lr}
 800c256:	4c06      	ldr	r4, [pc, #24]	; (800c270 <_isatty_r+0x1c>)
 800c258:	2300      	movs	r3, #0
 800c25a:	4605      	mov	r5, r0
 800c25c:	4608      	mov	r0, r1
 800c25e:	6023      	str	r3, [r4, #0]
 800c260:	f7f6 f861 	bl	8002326 <_isatty>
 800c264:	1c43      	adds	r3, r0, #1
 800c266:	d102      	bne.n	800c26e <_isatty_r+0x1a>
 800c268:	6823      	ldr	r3, [r4, #0]
 800c26a:	b103      	cbz	r3, 800c26e <_isatty_r+0x1a>
 800c26c:	602b      	str	r3, [r5, #0]
 800c26e:	bd38      	pop	{r3, r4, r5, pc}
 800c270:	20006848 	.word	0x20006848

0800c274 <_lseek_r>:
 800c274:	b538      	push	{r3, r4, r5, lr}
 800c276:	4c07      	ldr	r4, [pc, #28]	; (800c294 <_lseek_r+0x20>)
 800c278:	4605      	mov	r5, r0
 800c27a:	4608      	mov	r0, r1
 800c27c:	4611      	mov	r1, r2
 800c27e:	2200      	movs	r2, #0
 800c280:	6022      	str	r2, [r4, #0]
 800c282:	461a      	mov	r2, r3
 800c284:	f7f6 f85a 	bl	800233c <_lseek>
 800c288:	1c43      	adds	r3, r0, #1
 800c28a:	d102      	bne.n	800c292 <_lseek_r+0x1e>
 800c28c:	6823      	ldr	r3, [r4, #0]
 800c28e:	b103      	cbz	r3, 800c292 <_lseek_r+0x1e>
 800c290:	602b      	str	r3, [r5, #0]
 800c292:	bd38      	pop	{r3, r4, r5, pc}
 800c294:	20006848 	.word	0x20006848

0800c298 <_read_r>:
 800c298:	b538      	push	{r3, r4, r5, lr}
 800c29a:	4c07      	ldr	r4, [pc, #28]	; (800c2b8 <_read_r+0x20>)
 800c29c:	4605      	mov	r5, r0
 800c29e:	4608      	mov	r0, r1
 800c2a0:	4611      	mov	r1, r2
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	6022      	str	r2, [r4, #0]
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	f7f5 ffe8 	bl	800227c <_read>
 800c2ac:	1c43      	adds	r3, r0, #1
 800c2ae:	d102      	bne.n	800c2b6 <_read_r+0x1e>
 800c2b0:	6823      	ldr	r3, [r4, #0]
 800c2b2:	b103      	cbz	r3, 800c2b6 <_read_r+0x1e>
 800c2b4:	602b      	str	r3, [r5, #0]
 800c2b6:	bd38      	pop	{r3, r4, r5, pc}
 800c2b8:	20006848 	.word	0x20006848

0800c2bc <_init>:
 800c2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2be:	bf00      	nop
 800c2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2c2:	bc08      	pop	{r3}
 800c2c4:	469e      	mov	lr, r3
 800c2c6:	4770      	bx	lr

0800c2c8 <_fini>:
 800c2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ca:	bf00      	nop
 800c2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ce:	bc08      	pop	{r3}
 800c2d0:	469e      	mov	lr, r3
 800c2d2:	4770      	bx	lr
