
413_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b94  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08008d74  08008d74  00018d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090bc  080090bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080090bc  080090bc  000190bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090c4  080090c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090c4  080090c4  000190c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090c8  080090c8  000190c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080090cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000760c  20000070  0800913c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000767c  0800913c  0002767c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dace  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003db7  00000000  00000000  0003db6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001968  00000000  00000000  00041928  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001798  00000000  00000000  00043290  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000067ba  00000000  00000000  00044a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001840a  00000000  00000000  0004b1e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e2e19  00000000  00000000  000635ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00146405  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073c4  00000000  00000000  00146480  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008d5c 	.word	0x08008d5c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08008d5c 	.word	0x08008d5c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b972 	b.w	80005cc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	4688      	mov	r8, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14b      	bne.n	80003a6 <__udivmoddi4+0xa6>
 800030e:	428a      	cmp	r2, r1
 8000310:	4615      	mov	r5, r2
 8000312:	d967      	bls.n	80003e4 <__udivmoddi4+0xe4>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0720 	rsb	r7, r2, #32
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	fa20 f707 	lsr.w	r7, r0, r7
 8000326:	4095      	lsls	r5, r2
 8000328:	ea47 0803 	orr.w	r8, r7, r3
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbb8 f7fe 	udiv	r7, r8, lr
 8000338:	fa1f fc85 	uxth.w	ip, r5
 800033c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000340:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000344:	fb07 f10c 	mul.w	r1, r7, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000352:	f080 811b 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8118 	bls.w	800058c <__udivmoddi4+0x28c>
 800035c:	3f02      	subs	r7, #2
 800035e:	442b      	add	r3, r5
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0fe 	udiv	r0, r3, lr
 8000368:	fb0e 3310 	mls	r3, lr, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fc0c 	mul.w	ip, r0, ip
 8000374:	45a4      	cmp	ip, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	192c      	adds	r4, r5, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	f080 8107 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000382:	45a4      	cmp	ip, r4
 8000384:	f240 8104 	bls.w	8000590 <__udivmoddi4+0x290>
 8000388:	3802      	subs	r0, #2
 800038a:	442c      	add	r4, r5
 800038c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	2700      	movs	r7, #0
 8000396:	b11e      	cbz	r6, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c6 4300 	strd	r4, r3, [r6]
 80003a0:	4639      	mov	r1, r7
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d909      	bls.n	80003be <__udivmoddi4+0xbe>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80eb 	beq.w	8000586 <__udivmoddi4+0x286>
 80003b0:	2700      	movs	r7, #0
 80003b2:	e9c6 0100 	strd	r0, r1, [r6]
 80003b6:	4638      	mov	r0, r7
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	fab3 f783 	clz	r7, r3
 80003c2:	2f00      	cmp	r7, #0
 80003c4:	d147      	bne.n	8000456 <__udivmoddi4+0x156>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xd0>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 80fa 	bhi.w	80005c4 <__udivmoddi4+0x2c4>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb61 0303 	sbc.w	r3, r1, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4698      	mov	r8, r3
 80003da:	2e00      	cmp	r6, #0
 80003dc:	d0e0      	beq.n	80003a0 <__udivmoddi4+0xa0>
 80003de:	e9c6 4800 	strd	r4, r8, [r6]
 80003e2:	e7dd      	b.n	80003a0 <__udivmoddi4+0xa0>
 80003e4:	b902      	cbnz	r2, 80003e8 <__udivmoddi4+0xe8>
 80003e6:	deff      	udf	#255	; 0xff
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f040 808f 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f2:	1b49      	subs	r1, r1, r5
 80003f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f8:	fa1f f885 	uxth.w	r8, r5
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fb0e 111c 	mls	r1, lr, ip, r1
 8000408:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800040c:	fb08 f10c 	mul.w	r1, r8, ip
 8000410:	4299      	cmp	r1, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x124>
 8000414:	18eb      	adds	r3, r5, r3
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4299      	cmp	r1, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 8000422:	4684      	mov	ip, r0
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000430:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x14c>
 800043c:	192c      	adds	r4, r5, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x14a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80b6 	bhi.w	80005b6 <__udivmoddi4+0x2b6>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e79f      	b.n	8000396 <__udivmoddi4+0x96>
 8000456:	f1c7 0c20 	rsb	ip, r7, #32
 800045a:	40bb      	lsls	r3, r7
 800045c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000460:	ea4e 0e03 	orr.w	lr, lr, r3
 8000464:	fa01 f407 	lsl.w	r4, r1, r7
 8000468:	fa20 f50c 	lsr.w	r5, r0, ip
 800046c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000470:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000474:	4325      	orrs	r5, r4
 8000476:	fbb3 f9f8 	udiv	r9, r3, r8
 800047a:	0c2c      	lsrs	r4, r5, #16
 800047c:	fb08 3319 	mls	r3, r8, r9, r3
 8000480:	fa1f fa8e 	uxth.w	sl, lr
 8000484:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000488:	fb09 f40a 	mul.w	r4, r9, sl
 800048c:	429c      	cmp	r4, r3
 800048e:	fa02 f207 	lsl.w	r2, r2, r7
 8000492:	fa00 f107 	lsl.w	r1, r0, r7
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1e 0303 	adds.w	r3, lr, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	f080 8087 	bcs.w	80005b2 <__udivmoddi4+0x2b2>
 80004a4:	429c      	cmp	r4, r3
 80004a6:	f240 8084 	bls.w	80005b2 <__udivmoddi4+0x2b2>
 80004aa:	f1a9 0902 	sub.w	r9, r9, #2
 80004ae:	4473      	add	r3, lr
 80004b0:	1b1b      	subs	r3, r3, r4
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b8:	fb08 3310 	mls	r3, r8, r0, r3
 80004bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004c4:	45a2      	cmp	sl, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1e 0404 	adds.w	r4, lr, r4
 80004cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d0:	d26b      	bcs.n	80005aa <__udivmoddi4+0x2aa>
 80004d2:	45a2      	cmp	sl, r4
 80004d4:	d969      	bls.n	80005aa <__udivmoddi4+0x2aa>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4474      	add	r4, lr
 80004da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	eba4 040a 	sub.w	r4, r4, sl
 80004e6:	454c      	cmp	r4, r9
 80004e8:	46c2      	mov	sl, r8
 80004ea:	464b      	mov	r3, r9
 80004ec:	d354      	bcc.n	8000598 <__udivmoddi4+0x298>
 80004ee:	d051      	beq.n	8000594 <__udivmoddi4+0x294>
 80004f0:	2e00      	cmp	r6, #0
 80004f2:	d069      	beq.n	80005c8 <__udivmoddi4+0x2c8>
 80004f4:	ebb1 050a 	subs.w	r5, r1, sl
 80004f8:	eb64 0403 	sbc.w	r4, r4, r3
 80004fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000500:	40fd      	lsrs	r5, r7
 8000502:	40fc      	lsrs	r4, r7
 8000504:	ea4c 0505 	orr.w	r5, ip, r5
 8000508:	e9c6 5400 	strd	r5, r4, [r6]
 800050c:	2700      	movs	r7, #0
 800050e:	e747      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000510:	f1c2 0320 	rsb	r3, r2, #32
 8000514:	fa20 f703 	lsr.w	r7, r0, r3
 8000518:	4095      	lsls	r5, r2
 800051a:	fa01 f002 	lsl.w	r0, r1, r2
 800051e:	fa21 f303 	lsr.w	r3, r1, r3
 8000522:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000526:	4338      	orrs	r0, r7
 8000528:	0c01      	lsrs	r1, r0, #16
 800052a:	fbb3 f7fe 	udiv	r7, r3, lr
 800052e:	fa1f f885 	uxth.w	r8, r5
 8000532:	fb0e 3317 	mls	r3, lr, r7, r3
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb07 f308 	mul.w	r3, r7, r8
 800053e:	428b      	cmp	r3, r1
 8000540:	fa04 f402 	lsl.w	r4, r4, r2
 8000544:	d907      	bls.n	8000556 <__udivmoddi4+0x256>
 8000546:	1869      	adds	r1, r5, r1
 8000548:	f107 3cff 	add.w	ip, r7, #4294967295
 800054c:	d22f      	bcs.n	80005ae <__udivmoddi4+0x2ae>
 800054e:	428b      	cmp	r3, r1
 8000550:	d92d      	bls.n	80005ae <__udivmoddi4+0x2ae>
 8000552:	3f02      	subs	r7, #2
 8000554:	4429      	add	r1, r5
 8000556:	1acb      	subs	r3, r1, r3
 8000558:	b281      	uxth	r1, r0
 800055a:	fbb3 f0fe 	udiv	r0, r3, lr
 800055e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000562:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000566:	fb00 f308 	mul.w	r3, r0, r8
 800056a:	428b      	cmp	r3, r1
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x27e>
 800056e:	1869      	adds	r1, r5, r1
 8000570:	f100 3cff 	add.w	ip, r0, #4294967295
 8000574:	d217      	bcs.n	80005a6 <__udivmoddi4+0x2a6>
 8000576:	428b      	cmp	r3, r1
 8000578:	d915      	bls.n	80005a6 <__udivmoddi4+0x2a6>
 800057a:	3802      	subs	r0, #2
 800057c:	4429      	add	r1, r5
 800057e:	1ac9      	subs	r1, r1, r3
 8000580:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000584:	e73b      	b.n	80003fe <__udivmoddi4+0xfe>
 8000586:	4637      	mov	r7, r6
 8000588:	4630      	mov	r0, r6
 800058a:	e709      	b.n	80003a0 <__udivmoddi4+0xa0>
 800058c:	4607      	mov	r7, r0
 800058e:	e6e7      	b.n	8000360 <__udivmoddi4+0x60>
 8000590:	4618      	mov	r0, r3
 8000592:	e6fb      	b.n	800038c <__udivmoddi4+0x8c>
 8000594:	4541      	cmp	r1, r8
 8000596:	d2ab      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 8000598:	ebb8 0a02 	subs.w	sl, r8, r2
 800059c:	eb69 020e 	sbc.w	r2, r9, lr
 80005a0:	3801      	subs	r0, #1
 80005a2:	4613      	mov	r3, r2
 80005a4:	e7a4      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a6:	4660      	mov	r0, ip
 80005a8:	e7e9      	b.n	800057e <__udivmoddi4+0x27e>
 80005aa:	4618      	mov	r0, r3
 80005ac:	e795      	b.n	80004da <__udivmoddi4+0x1da>
 80005ae:	4667      	mov	r7, ip
 80005b0:	e7d1      	b.n	8000556 <__udivmoddi4+0x256>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e77c      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b6:	3802      	subs	r0, #2
 80005b8:	442c      	add	r4, r5
 80005ba:	e747      	b.n	800044c <__udivmoddi4+0x14c>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	442b      	add	r3, r5
 80005c2:	e72f      	b.n	8000424 <__udivmoddi4+0x124>
 80005c4:	4638      	mov	r0, r7
 80005c6:	e708      	b.n	80003da <__udivmoddi4+0xda>
 80005c8:	4637      	mov	r7, r6
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0xa0>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f002 f854 	bl	8002680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f824 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 fa98 	bl	8000b10 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e0:	f000 fa76 	bl	8000ad0 <MX_DMA_Init>
  MX_ADC1_Init();
 80005e4:	f000 f8ae 	bl	8000744 <MX_ADC1_Init>
  MX_DAC_Init();
 80005e8:	f000 f8fe 	bl	80007e8 <MX_DAC_Init>
  MX_DFSDM1_Init();
 80005ec:	f000 f926 	bl	800083c <MX_DFSDM1_Init>
  MX_FMPI2C1_Init();
 80005f0:	f000 f98a 	bl	8000908 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 80005f4:	f000 fcb8 	bl	8000f68 <MX_FSMC_Init>
  MX_QUADSPI_Init();
 80005f8:	f000 f9bc 	bl	8000974 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 80005fc:	f000 f9e6 	bl	80009cc <MX_SDIO_SD_Init>
  MX_USART6_UART_Init();
 8000600:	f000 fa3c 	bl	8000a7c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000604:	f007 f8c8 	bl	8007798 <MX_FATFS_Init>
  MX_SPI3_Init();
 8000608:	f000 fa00 	bl	8000a0c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2120      	movs	r1, #32
 8000610:	4803      	ldr	r0, [pc, #12]	; (8000620 <main+0x50>)
 8000612:	f003 fcad 	bl	8003f70 <HAL_GPIO_WritePin>
  InitWifi();
 8000616:	f000 fd59 	bl	80010cc <InitWifi>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TCPServer();
 800061a:	f000 fd63 	bl	80010e4 <TCPServer>
  {
 800061e:	e7fc      	b.n	800061a <main+0x4a>
 8000620:	40020800 	.word	0x40020800

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b0aa      	sub	sp, #168	; 0xa8
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800062e:	2234      	movs	r2, #52	; 0x34
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f007 fad1 	bl	8007bda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	2258      	movs	r2, #88	; 0x58
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f007 fac2 	bl	8007bda <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b38      	ldr	r3, [pc, #224]	; (800073c <SystemClock_Config+0x118>)
 800065c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065e:	4a37      	ldr	r2, [pc, #220]	; (800073c <SystemClock_Config+0x118>)
 8000660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000664:	6413      	str	r3, [r2, #64]	; 0x40
 8000666:	4b35      	ldr	r3, [pc, #212]	; (800073c <SystemClock_Config+0x118>)
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	4b32      	ldr	r3, [pc, #200]	; (8000740 <SystemClock_Config+0x11c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a31      	ldr	r2, [pc, #196]	; (8000740 <SystemClock_Config+0x11c>)
 800067c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000680:	6013      	str	r3, [r2, #0]
 8000682:	4b2f      	ldr	r3, [pc, #188]	; (8000740 <SystemClock_Config+0x11c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068e:	2302      	movs	r3, #2
 8000690:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000692:	2301      	movs	r3, #1
 8000694:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006aa:	2308      	movs	r3, #8
 80006ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006b0:	2360      	movs	r3, #96	; 0x60
 80006b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80006cc:	4618      	mov	r0, r3
 80006ce:	f004 f983 	bl	80049d8 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80006d8:	f000 fd1a 	bl	8001110 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006f6:	2103      	movs	r1, #3
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 fd15 	bl	8004128 <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000704:	f000 fd04 	bl	8001110 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_SDIO
 8000708:	f44f 73b8 	mov.w	r3, #368	; 0x170
 800070c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800070e:	2300      	movs	r3, #0
 8000710:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8000712:	2300      	movs	r3, #0
 8000714:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000716:	2300      	movs	r3, #0
 8000718:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 800071a:	2300      	movs	r3, #0
 800071c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	4618      	mov	r0, r3
 8000724:	f003 fecc 	bl	80044c0 <HAL_RCCEx_PeriphCLKConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800072e:	f000 fcef 	bl	8001110 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	37a8      	adds	r7, #168	; 0xa8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800074a:	463b      	mov	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000756:	4b21      	ldr	r3, [pc, #132]	; (80007dc <MX_ADC1_Init+0x98>)
 8000758:	4a21      	ldr	r2, [pc, #132]	; (80007e0 <MX_ADC1_Init+0x9c>)
 800075a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_ADC1_Init+0x98>)
 800075e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000762:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000764:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <MX_ADC1_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_ADC1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000770:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_ADC1_Init+0x98>)
 8000772:	2200      	movs	r2, #0
 8000774:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_ADC1_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_ADC1_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_ADC1_Init+0x98>)
 8000786:	4a17      	ldr	r2, [pc, #92]	; (80007e4 <MX_ADC1_Init+0xa0>)
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_ADC1_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_ADC1_Init+0x98>)
 8000792:	2201      	movs	r2, #1
 8000794:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_ADC1_Init+0x98>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_ADC1_Init+0x98>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <MX_ADC1_Init+0x98>)
 80007a6:	f001 ffff 	bl	80027a8 <HAL_ADC_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007b0:	f000 fcae 	bl	8001110 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007b4:	230a      	movs	r3, #10
 80007b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c0:	463b      	mov	r3, r7
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_ADC1_Init+0x98>)
 80007c6:	f002 f833 	bl	8002830 <HAL_ADC_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007d0:	f000 fc9e 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000325c 	.word	0x2000325c
 80007e0:	40012000 	.word	0x40012000
 80007e4:	0f000001 	.word	0x0f000001

080007e8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007ee:	463b      	mov	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_DAC_Init+0x4c>)
 80007f8:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <MX_DAC_Init+0x50>)
 80007fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <MX_DAC_Init+0x4c>)
 80007fe:	f002 fb56 	bl	8002eae <HAL_DAC_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000808:	f000 fc82 	bl	8001110 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800080c:	2300      	movs	r3, #0
 800080e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	4619      	mov	r1, r3
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <MX_DAC_Init+0x4c>)
 800081c:	f002 fb69 	bl	8002ef2 <HAL_DAC_ConfigChannel>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000826:	f000 fc73 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20003304 	.word	0x20003304
 8000838:	40007400 	.word	0x40007400

0800083c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000840:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <MX_DFSDM1_Init+0xb8>)
 8000842:	4a2d      	ldr	r2, [pc, #180]	; (80008f8 <MX_DFSDM1_Init+0xbc>)
 8000844:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000846:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <MX_DFSDM1_Init+0xb8>)
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800084c:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <MX_DFSDM1_Init+0xb8>)
 800084e:	2201      	movs	r2, #1
 8000850:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000852:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <MX_DFSDM1_Init+0xb8>)
 8000854:	2201      	movs	r2, #1
 8000856:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000858:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <MX_DFSDM1_Init+0xb8>)
 800085a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800085e:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 50;
 8000860:	4b24      	ldr	r3, [pc, #144]	; (80008f4 <MX_DFSDM1_Init+0xb8>)
 8000862:	2232      	movs	r2, #50	; 0x32
 8000864:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000866:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <MX_DFSDM1_Init+0xb8>)
 8000868:	2201      	movs	r2, #1
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 800086c:	4821      	ldr	r0, [pc, #132]	; (80008f4 <MX_DFSDM1_Init+0xb8>)
 800086e:	f002 fc7d 	bl	800316c <HAL_DFSDM_FilterInit>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000878:	f000 fc4a 	bl	8001110 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <MX_DFSDM1_Init+0xc0>)
 800087e:	4a20      	ldr	r2, [pc, #128]	; (8000900 <MX_DFSDM1_Init+0xc4>)
 8000880:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <MX_DFSDM1_Init+0xc0>)
 8000884:	2201      	movs	r2, #1
 8000886:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_DFSDM1_Init+0xc0>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 40;
 800088e:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_DFSDM1_Init+0xc0>)
 8000890:	2228      	movs	r2, #40	; 0x28
 8000892:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <MX_DFSDM1_Init+0xc0>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_DFSDM1_Init+0xc0>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008a0:	4b16      	ldr	r3, [pc, #88]	; (80008fc <MX_DFSDM1_Init+0xc0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_DFSDM1_Init+0xc0>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <MX_DFSDM1_Init+0xc0>)
 80008ae:	2204      	movs	r2, #4
 80008b0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_DFSDM1_Init+0xc0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80008b8:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_DFSDM1_Init+0xc0>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_DFSDM1_Init+0xc0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x0;
 80008c4:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <MX_DFSDM1_Init+0xc0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008ca:	480c      	ldr	r0, [pc, #48]	; (80008fc <MX_DFSDM1_Init+0xc0>)
 80008cc:	f002 fb5e 	bl	8002f8c <HAL_DFSDM_ChannelInit>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 80008d6:	f000 fc1b 	bl	8001110 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80008da:	2201      	movs	r2, #1
 80008dc:	4909      	ldr	r1, [pc, #36]	; (8000904 <MX_DFSDM1_Init+0xc8>)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_DFSDM1_Init+0xb8>)
 80008e0:	f002 fd30 	bl	8003344 <HAL_DFSDM_FilterConfigRegChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 80008ea:	f000 fc11 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000315c 	.word	0x2000315c
 80008f8:	40016100 	.word	0x40016100
 80008fc:	200000f4 	.word	0x200000f4
 8000900:	40016020 	.word	0x40016020
 8000904:	00010002 	.word	0x00010002

08000908 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_FMPI2C1_Init+0x60>)
 800090e:	4a17      	ldr	r2, [pc, #92]	; (800096c <MX_FMPI2C1_Init+0x64>)
 8000910:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x20303E5D;
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_FMPI2C1_Init+0x60>)
 8000914:	4a16      	ldr	r2, [pc, #88]	; (8000970 <MX_FMPI2C1_Init+0x68>)
 8000916:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_FMPI2C1_Init+0x60>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_FMPI2C1_Init+0x60>)
 8000920:	2201      	movs	r2, #1
 8000922:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_FMPI2C1_Init+0x60>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_FMPI2C1_Init+0x60>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000930:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <MX_FMPI2C1_Init+0x60>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_FMPI2C1_Init+0x60>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_FMPI2C1_Init+0x60>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000942:	4809      	ldr	r0, [pc, #36]	; (8000968 <MX_FMPI2C1_Init+0x60>)
 8000944:	f003 f890 	bl	8003a68 <HAL_FMPI2C_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 800094e:	f000 fbdf 	bl	8001110 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000952:	2100      	movs	r1, #0
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_FMPI2C1_Init+0x60>)
 8000956:	f003 f916 	bl	8003b86 <HAL_FMPI2CEx_ConfigAnalogFilter>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000960:	f000 fbd6 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20003318 	.word	0x20003318
 800096c:	40006000 	.word	0x40006000
 8000970:	20303e5d 	.word	0x20303e5d

08000974 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_QUADSPI_Init+0x50>)
 800097a:	4a13      	ldr	r2, [pc, #76]	; (80009c8 <MX_QUADSPI_Init+0x54>)
 800097c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_QUADSPI_Init+0x50>)
 8000980:	22ff      	movs	r2, #255	; 0xff
 8000982:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_QUADSPI_Init+0x50>)
 8000986:	2201      	movs	r2, #1
 8000988:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_QUADSPI_Init+0x50>)
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_QUADSPI_Init+0x50>)
 8000992:	2201      	movs	r2, #1
 8000994:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_QUADSPI_Init+0x50>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_QUADSPI_Init+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_QUADSPI_Init+0x50>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_QUADSPI_Init+0x50>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_QUADSPI_Init+0x50>)
 80009b0:	f003 faf8 	bl	8003fa4 <HAL_QSPI_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80009ba:	f000 fba9 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20004cb0 	.word	0x20004cb0
 80009c8:	a0001000 	.word	0xa0001000

080009cc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_SDIO_SD_Init+0x38>)
 80009d2:	4a0d      	ldr	r2, [pc, #52]	; (8000a08 <MX_SDIO_SD_Init+0x3c>)
 80009d4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_SDIO_SD_Init+0x38>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_SDIO_SD_Init+0x38>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_SDIO_SD_Init+0x38>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_SDIO_SD_Init+0x38>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <MX_SDIO_SD_Init+0x38>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <MX_SDIO_SD_Init+0x38>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	200033b4 	.word	0x200033b4
 8000a08:	40012c00 	.word	0x40012c00

08000a0c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_SPI3_Init+0x68>)
 8000a12:	4a19      	ldr	r2, [pc, #100]	; (8000a78 <MX_SPI3_Init+0x6c>)
 8000a14:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_SPI3_Init+0x68>)
 8000a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a1c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_SPI3_Init+0x68>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_SPI3_Init+0x68>)
 8000a26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a2a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_SPI3_Init+0x68>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <MX_SPI3_Init+0x68>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_SPI3_Init+0x68>)
 8000a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_SPI3_Init+0x68>)
 8000a42:	2220      	movs	r2, #32
 8000a44:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_SPI3_Init+0x68>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_SPI3_Init+0x68>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <MX_SPI3_Init+0x68>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_SPI3_Init+0x68>)
 8000a5a:	220a      	movs	r2, #10
 8000a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_SPI3_Init+0x68>)
 8000a60:	f005 f998 	bl	8005d94 <HAL_SPI_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8000a6a:	f000 fb51 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20003204 	.word	0x20003204
 8000a78:	40003c00 	.word	0x40003c00

08000a7c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_USART6_UART_Init+0x4c>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <MX_USART6_UART_Init+0x50>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <MX_USART6_UART_Init+0x4c>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_USART6_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_USART6_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_USART6_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_USART6_UART_Init+0x4c>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_USART6_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_USART6_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_USART6_UART_Init+0x4c>)
 8000ab4:	f005 fc64 	bl	8006380 <HAL_UART_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000abe:	f000 fb27 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20003438 	.word	0x20003438
 8000acc:	40011400 	.word	0x40011400

08000ad0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_DMA_Init+0x3c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <MX_DMA_Init+0x3c>)
 8000ae0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_DMA_Init+0x3c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	2038      	movs	r0, #56	; 0x38
 8000af8:	f002 f9a3 	bl	8002e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000afc:	2038      	movs	r0, #56	; 0x38
 8000afe:	f002 f9bc 	bl	8002e7a <HAL_NVIC_EnableIRQ>

}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08e      	sub	sp, #56	; 0x38
 8000b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
 8000b2a:	4bb0      	ldr	r3, [pc, #704]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4aaf      	ldr	r2, [pc, #700]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000b30:	f043 0310 	orr.w	r3, r3, #16
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4bad      	ldr	r3, [pc, #692]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0310 	and.w	r3, r3, #16
 8000b3e:	623b      	str	r3, [r7, #32]
 8000b40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
 8000b46:	4ba9      	ldr	r3, [pc, #676]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4aa8      	ldr	r2, [pc, #672]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4ba6      	ldr	r3, [pc, #664]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	61fb      	str	r3, [r7, #28]
 8000b5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
 8000b62:	4ba2      	ldr	r3, [pc, #648]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4aa1      	ldr	r2, [pc, #644]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000b68:	f043 0320 	orr.w	r3, r3, #32
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b9f      	ldr	r3, [pc, #636]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0320 	and.w	r3, r3, #32
 8000b76:	61bb      	str	r3, [r7, #24]
 8000b78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	4b9b      	ldr	r3, [pc, #620]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a9a      	ldr	r2, [pc, #616]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b98      	ldr	r3, [pc, #608]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b94      	ldr	r3, [pc, #592]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a93      	ldr	r2, [pc, #588]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b91      	ldr	r3, [pc, #580]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b8d      	ldr	r3, [pc, #564]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a8c      	ldr	r2, [pc, #560]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b8a      	ldr	r3, [pc, #552]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	4b86      	ldr	r3, [pc, #536]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a85      	ldr	r2, [pc, #532]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b83      	ldr	r3, [pc, #524]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b7f      	ldr	r3, [pc, #508]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a7e      	ldr	r2, [pc, #504]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b7c      	ldr	r3, [pc, #496]	; (8000dec <MX_GPIO_Init+0x2dc>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2138      	movs	r1, #56	; 0x38
 8000c0a:	4879      	ldr	r0, [pc, #484]	; (8000df0 <MX_GPIO_Init+0x2e0>)
 8000c0c:	f003 f9b0 	bl	8003f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2120      	movs	r1, #32
 8000c14:	4877      	ldr	r0, [pc, #476]	; (8000df4 <MX_GPIO_Init+0x2e4>)
 8000c16:	f003 f9ab 	bl	8003f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000c20:	4875      	ldr	r0, [pc, #468]	; (8000df8 <MX_GPIO_Init+0x2e8>)
 8000c22:	f003 f9a5 	bl	8003f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|WIFI_SPI_CSN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 5124 	mov.w	r1, #10496	; 0x2900
 8000c2c:	4873      	ldr	r0, [pc, #460]	; (8000dfc <MX_GPIO_Init+0x2ec>)
 8000c2e:	f003 f99f 	bl	8003f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000c32:	2338      	movs	r3, #56	; 0x38
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	4869      	ldr	r0, [pc, #420]	; (8000df0 <MX_GPIO_Init+0x2e0>)
 8000c4a:	f002 ffe7 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000c4e:	2340      	movs	r3, #64	; 0x40
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	4861      	ldr	r0, [pc, #388]	; (8000df0 <MX_GPIO_Init+0x2e0>)
 8000c6a:	f002 ffd7 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c80:	2302      	movs	r3, #2
 8000c82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	485d      	ldr	r0, [pc, #372]	; (8000e00 <MX_GPIO_Init+0x2f0>)
 8000c8c:	f002 ffc6 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000c90:	2302      	movs	r3, #2
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c94:	4b5b      	ldr	r3, [pc, #364]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4854      	ldr	r0, [pc, #336]	; (8000df4 <MX_GPIO_Init+0x2e4>)
 8000ca4:	f002 ffba 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_ext_SD_Pin */
  GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8000cb8:	2306      	movs	r3, #6
 8000cba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	484c      	ldr	r0, [pc, #304]	; (8000df4 <MX_GPIO_Init+0x2e4>)
 8000cc4:	f002 ffaa 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_SD_Pin */
  GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8000cc8:	2308      	movs	r3, #8
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd8:	2305      	movs	r3, #5
 8000cda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4844      	ldr	r0, [pc, #272]	; (8000df4 <MX_GPIO_Init+0x2e4>)
 8000ce4:	f002 ff9a 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cec:	4b45      	ldr	r3, [pc, #276]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4843      	ldr	r0, [pc, #268]	; (8000e08 <MX_GPIO_Init+0x2f8>)
 8000cfc:	f002 ff8e 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_MCK_Pin */
  GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8000d00:	2308      	movs	r3, #8
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d10:	2305      	movs	r3, #5
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	483b      	ldr	r0, [pc, #236]	; (8000e08 <MX_GPIO_Init+0x2f8>)
 8000d1c:	f002 ff7e 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_DATIN1_Pin */
  GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8000d30:	2307      	movs	r3, #7
 8000d32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4833      	ldr	r0, [pc, #204]	; (8000e08 <MX_GPIO_Init+0x2f8>)
 8000d3c:	f002 ff6e 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000d40:	2320      	movs	r3, #32
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d54:	4619      	mov	r1, r3
 8000d56:	4827      	ldr	r0, [pc, #156]	; (8000df4 <MX_GPIO_Init+0x2e4>)
 8000d58:	f002 ff60 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d74:	4619      	mov	r1, r3
 8000d76:	4820      	ldr	r0, [pc, #128]	; (8000df8 <MX_GPIO_Init+0x2e8>)
 8000d78:	f002 ff50 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000d7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8e:	4619      	mov	r1, r3
 8000d90:	481b      	ldr	r0, [pc, #108]	; (8000e00 <MX_GPIO_Init+0x2f0>)
 8000d92:	f002 ff43 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000d96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9c:	2312      	movs	r3, #18
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000da8:	2304      	movs	r3, #4
 8000daa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db0:	4619      	mov	r1, r3
 8000db2:	4811      	ldr	r0, [pc, #68]	; (8000df8 <MX_GPIO_Init+0x2e8>)
 8000db4:	f002 ff32 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8000db8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4809      	ldr	r0, [pc, #36]	; (8000df8 <MX_GPIO_Init+0x2e8>)
 8000dd2:	f002 ff23 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8000dd6:	f248 0380 	movw	r3, #32896	; 0x8080
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de8:	4619      	mov	r1, r3
 8000dea:	e00f      	b.n	8000e0c <MX_GPIO_Init+0x2fc>
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40020800 	.word	0x40020800
 8000df8:	40020400 	.word	0x40020400
 8000dfc:	40021800 	.word	0x40021800
 8000e00:	40021400 	.word	0x40021400
 8000e04:	10110000 	.word	0x10110000
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	4851      	ldr	r0, [pc, #324]	; (8000f54 <MX_GPIO_Init+0x444>)
 8000e0e:	f002 ff05 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin WIFI_SPI_CSN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|WIFI_SPI_CSN_Pin|ARD_D2_Pin;
 8000e12:	f44f 5324 	mov.w	r3, #10496	; 0x2900
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	484a      	ldr	r0, [pc, #296]	; (8000f54 <MX_GPIO_Init+0x444>)
 8000e2c:	f002 fef6 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000e30:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e42:	230a      	movs	r3, #10
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4842      	ldr	r0, [pc, #264]	; (8000f58 <MX_GPIO_Init+0x448>)
 8000e4e:	f002 fee5 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8000e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e64:	2301      	movs	r3, #1
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	483a      	ldr	r0, [pc, #232]	; (8000f58 <MX_GPIO_Init+0x448>)
 8000e70:	f002 fed4 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8000e74:	2304      	movs	r3, #4
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8000e84:	2303      	movs	r3, #3
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4833      	ldr	r0, [pc, #204]	; (8000f5c <MX_GPIO_Init+0x44c>)
 8000e90:	f002 fec4 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_CK_Pin */
  GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8000e94:	2308      	movs	r3, #8
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ea4:	2305      	movs	r3, #5
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eac:	4619      	mov	r1, r3
 8000eae:	482b      	ldr	r0, [pc, #172]	; (8000f5c <MX_GPIO_Init+0x44c>)
 8000eb0:	f002 feb4 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_DRDY_Pin */
  GPIO_InitStruct.Pin = WIFI_DRDY_Pin;
 8000eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(WIFI_DRDY_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4822      	ldr	r0, [pc, #136]	; (8000f54 <MX_GPIO_Init+0x444>)
 8000eca:	f002 fea7 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000ece:	2340      	movs	r3, #64	; 0x40
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ed2:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <MX_GPIO_Init+0x450>)
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4820      	ldr	r0, [pc, #128]	; (8000f64 <MX_GPIO_Init+0x454>)
 8000ee2:	f002 fe9b 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_DATIN7_Pin */
  GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8000ef6:	2306      	movs	r3, #6
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efe:	4619      	mov	r1, r3
 8000f00:	4818      	ldr	r0, [pc, #96]	; (8000f64 <MX_GPIO_Init+0x454>)
 8000f02:	f002 fe8b 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000f06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f20:	4619      	mov	r1, r3
 8000f22:	4810      	ldr	r0, [pc, #64]	; (8000f64 <MX_GPIO_Init+0x454>)
 8000f24:	f002 fe7a 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_WS_Pin */
  GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8000f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f42:	4619      	mov	r1, r3
 8000f44:	4807      	ldr	r0, [pc, #28]	; (8000f64 <MX_GPIO_Init+0x454>)
 8000f46:	f002 fe69 	bl	8003c1c <HAL_GPIO_Init>

}
 8000f4a:	bf00      	nop
 8000f4c:	3738      	adds	r7, #56	; 0x38
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40021800 	.word	0x40021800
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	40020c00 	.word	0x40020c00
 8000f60:	10110000 	.word	0x10110000
 8000f64:	40020400 	.word	0x40020400

08000f68 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
 8000f7c:	615a      	str	r2, [r3, #20]
 8000f7e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000f80:	4b4f      	ldr	r3, [pc, #316]	; (80010c0 <MX_FSMC_Init+0x158>)
 8000f82:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000f86:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000f88:	4b4d      	ldr	r3, [pc, #308]	; (80010c0 <MX_FSMC_Init+0x158>)
 8000f8a:	4a4e      	ldr	r2, [pc, #312]	; (80010c4 <MX_FSMC_Init+0x15c>)
 8000f8c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000f8e:	4b4c      	ldr	r3, [pc, #304]	; (80010c0 <MX_FSMC_Init+0x158>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000f94:	4b4a      	ldr	r3, [pc, #296]	; (80010c0 <MX_FSMC_Init+0x158>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000f9a:	4b49      	ldr	r3, [pc, #292]	; (80010c0 <MX_FSMC_Init+0x158>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000fa0:	4b47      	ldr	r3, [pc, #284]	; (80010c0 <MX_FSMC_Init+0x158>)
 8000fa2:	2210      	movs	r2, #16
 8000fa4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000fa6:	4b46      	ldr	r3, [pc, #280]	; (80010c0 <MX_FSMC_Init+0x158>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000fac:	4b44      	ldr	r3, [pc, #272]	; (80010c0 <MX_FSMC_Init+0x158>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000fb2:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <MX_FSMC_Init+0x158>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8000fb8:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <MX_FSMC_Init+0x158>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000fbe:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <MX_FSMC_Init+0x158>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000fc4:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <MX_FSMC_Init+0x158>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000fca:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <MX_FSMC_Init+0x158>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000fd0:	4b3b      	ldr	r3, [pc, #236]	; (80010c0 <MX_FSMC_Init+0x158>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000fd6:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <MX_FSMC_Init+0x158>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000fdc:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <MX_FSMC_Init+0x158>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000fe2:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <MX_FSMC_Init+0x158>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000fe8:	230f      	movs	r3, #15
 8000fea:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000fec:	230f      	movs	r3, #15
 8000fee:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000ff0:	23ff      	movs	r3, #255	; 0xff
 8000ff2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000ff8:	2310      	movs	r3, #16
 8000ffa:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000ffc:	2311      	movs	r3, #17
 8000ffe:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2200      	movs	r2, #0
 8001008:	4619      	mov	r1, r3
 800100a:	482d      	ldr	r0, [pc, #180]	; (80010c0 <MX_FSMC_Init+0x158>)
 800100c:	f005 f974 	bl	80062f8 <HAL_SRAM_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 8001016:	f000 f87b 	bl	8001110 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 800101a:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <MX_FSMC_Init+0x160>)
 800101c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001020:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001022:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <MX_FSMC_Init+0x160>)
 8001024:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <MX_FSMC_Init+0x15c>)
 8001026:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8001028:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <MX_FSMC_Init+0x160>)
 800102a:	2204      	movs	r2, #4
 800102c:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800102e:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <MX_FSMC_Init+0x160>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001034:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <MX_FSMC_Init+0x160>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800103a:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <MX_FSMC_Init+0x160>)
 800103c:	2210      	movs	r2, #16
 800103e:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <MX_FSMC_Init+0x160>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001046:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <MX_FSMC_Init+0x160>)
 8001048:	2200      	movs	r2, #0
 800104a:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800104c:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <MX_FSMC_Init+0x160>)
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001052:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <MX_FSMC_Init+0x160>)
 8001054:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001058:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <MX_FSMC_Init+0x160>)
 800105c:	2200      	movs	r2, #0
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <MX_FSMC_Init+0x160>)
 8001062:	2200      	movs	r2, #0
 8001064:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <MX_FSMC_Init+0x160>)
 8001068:	2200      	movs	r2, #0
 800106a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <MX_FSMC_Init+0x160>)
 800106e:	2200      	movs	r2, #0
 8001070:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_FSMC_Init+0x160>)
 8001074:	2200      	movs	r2, #0
 8001076:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <MX_FSMC_Init+0x160>)
 800107a:	2200      	movs	r2, #0
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_FSMC_Init+0x160>)
 8001080:	2200      	movs	r2, #0
 8001082:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001084:	230f      	movs	r3, #15
 8001086:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001088:	230f      	movs	r3, #15
 800108a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800108c:	23ff      	movs	r3, #255	; 0xff
 800108e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001090:	230f      	movs	r3, #15
 8001092:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001094:	2310      	movs	r3, #16
 8001096:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001098:	2311      	movs	r3, #17
 800109a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2200      	movs	r2, #0
 80010a4:	4619      	mov	r1, r3
 80010a6:	4808      	ldr	r0, [pc, #32]	; (80010c8 <MX_FSMC_Init+0x160>)
 80010a8:	f005 f926 	bl	80062f8 <HAL_SRAM_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_FSMC_Init+0x14e>
  {
    Error_Handler( );
 80010b2:	f000 f82d 	bl	8001110 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80010b6:	bf00      	nop
 80010b8:	3720      	adds	r7, #32
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200031b4 	.word	0x200031b4
 80010c4:	a0000104 	.word	0xa0000104
 80010c8:	20003364 	.word	0x20003364

080010cc <InitWifi>:
	pass++;

}

void InitWifi()
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	ConnectWifi(&hspi3);
 80010d0:	4803      	ldr	r0, [pc, #12]	; (80010e0 <InitWifi+0x14>)
 80010d2:	f000 fe1b 	bl	8001d0c <ConnectWifi>
	Wifi_Init();
 80010d6:	f000 fe67 	bl	8001da8 <Wifi_Init>


//	SetSSID();
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20003204 	.word	0x20003204

080010e4 <TCPServer>:

void TCPServer()
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
	int sockets = 2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < sockets; i++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	e005      	b.n	8001100 <TCPServer+0x1c>
	{
		ProcessSocket(i);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f001 fa6b 	bl	80025d0 <ProcessSocket>
	for(int i = 0; i < sockets; i++)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3301      	adds	r3, #1
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	dbf5      	blt.n	80010f4 <TCPServer+0x10>
	}
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <HAL_MspInit+0x4c>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	4a0f      	ldr	r2, [pc, #60]	; (800116c <HAL_MspInit+0x4c>)
 8001130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001134:	6453      	str	r3, [r2, #68]	; 0x44
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <HAL_MspInit+0x4c>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_MspInit+0x4c>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <HAL_MspInit+0x4c>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001150:	6413      	str	r3, [r2, #64]	; 0x40
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_MspInit+0x4c>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800

08001170 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a31      	ldr	r2, [pc, #196]	; (8001254 <HAL_ADC_MspInit+0xe4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d15b      	bne.n	800124a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
 8001196:	4b30      	ldr	r3, [pc, #192]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	4a2f      	ldr	r2, [pc, #188]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 800119c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a0:	6453      	str	r3, [r2, #68]	; 0x44
 80011a2:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011aa:	61bb      	str	r3, [r7, #24]
 80011ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	4b29      	ldr	r3, [pc, #164]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a28      	ldr	r2, [pc, #160]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b22      	ldr	r3, [pc, #136]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a21      	ldr	r2, [pc, #132]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a1a      	ldr	r2, [pc, #104]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_ADC_MspInit+0xe8>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 8001202:	2311      	movs	r3, #17
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001206:	2303      	movs	r3, #3
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	4811      	ldr	r0, [pc, #68]	; (800125c <HAL_ADC_MspInit+0xec>)
 8001216:	f002 fd01 	bl	8003c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 800121a:	2326      	movs	r3, #38	; 0x26
 800121c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121e:	2303      	movs	r3, #3
 8001220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	4619      	mov	r1, r3
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <HAL_ADC_MspInit+0xf0>)
 800122e:	f002 fcf5 	bl	8003c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 8001232:	2302      	movs	r3, #2
 8001234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001236:	2303      	movs	r3, #3
 8001238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	4619      	mov	r1, r3
 8001244:	4807      	ldr	r0, [pc, #28]	; (8001264 <HAL_ADC_MspInit+0xf4>)
 8001246:	f002 fce9 	bl	8003c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800124a:	bf00      	nop
 800124c:	3730      	adds	r7, #48	; 0x30
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40012000 	.word	0x40012000
 8001258:	40023800 	.word	0x40023800
 800125c:	40020800 	.word	0x40020800
 8001260:	40020000 	.word	0x40020000
 8001264:	40020400 	.word	0x40020400

08001268 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a17      	ldr	r2, [pc, #92]	; (80012e4 <HAL_DAC_MspInit+0x7c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d127      	bne.n	80012da <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <HAL_DAC_MspInit+0x80>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a15      	ldr	r2, [pc, #84]	; (80012e8 <HAL_DAC_MspInit+0x80>)
 8001294:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_DAC_MspInit+0x80>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_DAC_MspInit+0x80>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <HAL_DAC_MspInit+0x80>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_DAC_MspInit+0x80>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 80012c2:	2310      	movs	r3, #16
 80012c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c6:	2303      	movs	r3, #3
 80012c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	4805      	ldr	r0, [pc, #20]	; (80012ec <HAL_DAC_MspInit+0x84>)
 80012d6:	f002 fca1 	bl	8003c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	; 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40007400 	.word	0x40007400
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020000 	.word	0x40020000

080012f0 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_FILTER_INSTANCE(hdfsdm_filter->Instance))&&(DFSDM1_Init == 0))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a52      	ldr	r2, [pc, #328]	; (8001458 <HAL_DFSDM_FilterMspInit+0x168>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d004      	beq.n	800131c <HAL_DFSDM_FilterMspInit+0x2c>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a51      	ldr	r2, [pc, #324]	; (800145c <HAL_DFSDM_FilterMspInit+0x16c>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d15c      	bne.n	80013d6 <HAL_DFSDM_FilterMspInit+0xe6>
 800131c:	4b50      	ldr	r3, [pc, #320]	; (8001460 <HAL_DFSDM_FilterMspInit+0x170>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d158      	bne.n	80013d6 <HAL_DFSDM_FilterMspInit+0xe6>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001324:	4b4f      	ldr	r3, [pc, #316]	; (8001464 <HAL_DFSDM_FilterMspInit+0x174>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3301      	adds	r3, #1
 800132a:	4a4e      	ldr	r2, [pc, #312]	; (8001464 <HAL_DFSDM_FilterMspInit+0x174>)
 800132c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800132e:	4b4d      	ldr	r3, [pc, #308]	; (8001464 <HAL_DFSDM_FilterMspInit+0x174>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d10d      	bne.n	8001352 <HAL_DFSDM_FilterMspInit+0x62>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b4b      	ldr	r3, [pc, #300]	; (8001468 <HAL_DFSDM_FilterMspInit+0x178>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	4a4a      	ldr	r2, [pc, #296]	; (8001468 <HAL_DFSDM_FilterMspInit+0x178>)
 8001340:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001344:	6453      	str	r3, [r2, #68]	; 0x44
 8001346:	4b48      	ldr	r3, [pc, #288]	; (8001468 <HAL_DFSDM_FilterMspInit+0x178>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b44      	ldr	r3, [pc, #272]	; (8001468 <HAL_DFSDM_FilterMspInit+0x178>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a43      	ldr	r2, [pc, #268]	; (8001468 <HAL_DFSDM_FilterMspInit+0x178>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b41      	ldr	r3, [pc, #260]	; (8001468 <HAL_DFSDM_FilterMspInit+0x178>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	4b3d      	ldr	r3, [pc, #244]	; (8001468 <HAL_DFSDM_FilterMspInit+0x178>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a3c      	ldr	r2, [pc, #240]	; (8001468 <HAL_DFSDM_FilterMspInit+0x178>)
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <HAL_DFSDM_FilterMspInit+0x178>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 800138a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800138e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800139c:	2306      	movs	r3, #6
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4831      	ldr	r0, [pc, #196]	; (800146c <HAL_DFSDM_FilterMspInit+0x17c>)
 80013a8:	f002 fc38 	bl	8003c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 80013ac:	2340      	movs	r3, #64	; 0x40
 80013ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80013bc:	2306      	movs	r3, #6
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	482a      	ldr	r0, [pc, #168]	; (8001470 <HAL_DFSDM_FilterMspInit+0x180>)
 80013c8:	f002 fc28 	bl	8003c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80013cc:	4b24      	ldr	r3, [pc, #144]	; (8001460 <HAL_DFSDM_FilterMspInit+0x170>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	3301      	adds	r3, #1
 80013d2:	4a23      	ldr	r2, [pc, #140]	; (8001460 <HAL_DFSDM_FilterMspInit+0x170>)
 80013d4:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a1f      	ldr	r2, [pc, #124]	; (8001458 <HAL_DFSDM_FilterMspInit+0x168>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d137      	bne.n	8001450 <HAL_DFSDM_FilterMspInit+0x160>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_DFSDM_FilterMspInit+0x184>)
 80013e2:	4a25      	ldr	r2, [pc, #148]	; (8001478 <HAL_DFSDM_FilterMspInit+0x188>)
 80013e4:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_7;
 80013e6:	4b23      	ldr	r3, [pc, #140]	; (8001474 <HAL_DFSDM_FilterMspInit+0x184>)
 80013e8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80013ec:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <HAL_DFSDM_FilterMspInit+0x184>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f4:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <HAL_DFSDM_FilterMspInit+0x184>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <HAL_DFSDM_FilterMspInit+0x184>)
 80013fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001400:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <HAL_DFSDM_FilterMspInit+0x184>)
 8001404:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001408:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <HAL_DFSDM_FilterMspInit+0x184>)
 800140c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001410:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001412:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_DFSDM_FilterMspInit+0x184>)
 8001414:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001418:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_DFSDM_FilterMspInit+0x184>)
 800141c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001420:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_DFSDM_FilterMspInit+0x184>)
 8001424:	2200      	movs	r2, #0
 8001426:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001428:	4812      	ldr	r0, [pc, #72]	; (8001474 <HAL_DFSDM_FilterMspInit+0x184>)
 800142a:	f002 f835 	bl	8003498 <HAL_DMA_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_DFSDM_FilterMspInit+0x148>
    {
      Error_Handler();
 8001434:	f7ff fe6c 	bl	8001110 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <HAL_DFSDM_FilterMspInit+0x184>)
 800143c:	62da      	str	r2, [r3, #44]	; 0x2c
 800143e:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <HAL_DFSDM_FilterMspInit+0x184>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <HAL_DFSDM_FilterMspInit+0x184>)
 8001448:	629a      	str	r2, [r3, #40]	; 0x28
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <HAL_DFSDM_FilterMspInit+0x184>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8001450:	bf00      	nop
 8001452:	3728      	adds	r7, #40	; 0x28
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40016100 	.word	0x40016100
 800145c:	40016180 	.word	0x40016180
 8001460:	20000090 	.word	0x20000090
 8001464:	2000008c 	.word	0x2000008c
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000
 8001470:	40020c00 	.word	0x40020c00
 8001474:	200032a4 	.word	0x200032a4
 8001478:	40026410 	.word	0x40026410

0800147c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a39      	ldr	r2, [pc, #228]	; (8001580 <HAL_DFSDM_ChannelMspInit+0x104>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d00e      	beq.n	80014bc <HAL_DFSDM_ChannelMspInit+0x40>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a38      	ldr	r2, [pc, #224]	; (8001584 <HAL_DFSDM_ChannelMspInit+0x108>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d009      	beq.n	80014bc <HAL_DFSDM_ChannelMspInit+0x40>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a36      	ldr	r2, [pc, #216]	; (8001588 <HAL_DFSDM_ChannelMspInit+0x10c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d004      	beq.n	80014bc <HAL_DFSDM_ChannelMspInit+0x40>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a35      	ldr	r2, [pc, #212]	; (800158c <HAL_DFSDM_ChannelMspInit+0x110>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d15c      	bne.n	8001576 <HAL_DFSDM_ChannelMspInit+0xfa>
 80014bc:	4b34      	ldr	r3, [pc, #208]	; (8001590 <HAL_DFSDM_ChannelMspInit+0x114>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d158      	bne.n	8001576 <HAL_DFSDM_ChannelMspInit+0xfa>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80014c4:	4b33      	ldr	r3, [pc, #204]	; (8001594 <HAL_DFSDM_ChannelMspInit+0x118>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	4a32      	ldr	r2, [pc, #200]	; (8001594 <HAL_DFSDM_ChannelMspInit+0x118>)
 80014cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80014ce:	4b31      	ldr	r3, [pc, #196]	; (8001594 <HAL_DFSDM_ChannelMspInit+0x118>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d10d      	bne.n	80014f2 <HAL_DFSDM_ChannelMspInit+0x76>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <HAL_DFSDM_ChannelMspInit+0x11c>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	4a2e      	ldr	r2, [pc, #184]	; (8001598 <HAL_DFSDM_ChannelMspInit+0x11c>)
 80014e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014e4:	6453      	str	r3, [r2, #68]	; 0x44
 80014e6:	4b2c      	ldr	r3, [pc, #176]	; (8001598 <HAL_DFSDM_ChannelMspInit+0x11c>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b28      	ldr	r3, [pc, #160]	; (8001598 <HAL_DFSDM_ChannelMspInit+0x11c>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a27      	ldr	r2, [pc, #156]	; (8001598 <HAL_DFSDM_ChannelMspInit+0x11c>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b25      	ldr	r3, [pc, #148]	; (8001598 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	4b21      	ldr	r3, [pc, #132]	; (8001598 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a20      	ldr	r2, [pc, #128]	; (8001598 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 800152a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800153c:	2306      	movs	r3, #6
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	4815      	ldr	r0, [pc, #84]	; (800159c <HAL_DFSDM_ChannelMspInit+0x120>)
 8001548:	f002 fb68 	bl	8003c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 800154c:	2340      	movs	r3, #64	; 0x40
 800154e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800155c:	2306      	movs	r3, #6
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	480e      	ldr	r0, [pc, #56]	; (80015a0 <HAL_DFSDM_ChannelMspInit+0x124>)
 8001568:	f002 fb58 	bl	8003c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <HAL_DFSDM_ChannelMspInit+0x114>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	4a07      	ldr	r2, [pc, #28]	; (8001590 <HAL_DFSDM_ChannelMspInit+0x114>)
 8001574:	6013      	str	r3, [r2, #0]
  }

}
 8001576:	bf00      	nop
 8001578:	3728      	adds	r7, #40	; 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40016000 	.word	0x40016000
 8001584:	40016020 	.word	0x40016020
 8001588:	40016040 	.word	0x40016040
 800158c:	40016060 	.word	0x40016060
 8001590:	20000090 	.word	0x20000090
 8001594:	2000008c 	.word	0x2000008c
 8001598:	40023800 	.word	0x40023800
 800159c:	40020000 	.word	0x40020000
 80015a0:	40020c00 	.word	0x40020c00

080015a4 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a19      	ldr	r2, [pc, #100]	; (8001628 <HAL_FMPI2C_MspInit+0x84>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d12b      	bne.n	800161e <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <HAL_FMPI2C_MspInit+0x88>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a17      	ldr	r2, [pc, #92]	; (800162c <HAL_FMPI2C_MspInit+0x88>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_FMPI2C_MspInit+0x88>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 80015e2:	23c0      	movs	r3, #192	; 0xc0
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e6:	2312      	movs	r3, #18
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 80015f2:	2304      	movs	r3, #4
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	480c      	ldr	r0, [pc, #48]	; (8001630 <HAL_FMPI2C_MspInit+0x8c>)
 80015fe:	f002 fb0d 	bl	8003c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_FMPI2C_MspInit+0x88>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a08      	ldr	r2, [pc, #32]	; (800162c <HAL_FMPI2C_MspInit+0x88>)
 800160c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_FMPI2C_MspInit+0x88>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40006000 	.word	0x40006000
 800162c:	40023800 	.word	0x40023800
 8001630:	40020800 	.word	0x40020800

08001634 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08e      	sub	sp, #56	; 0x38
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a56      	ldr	r2, [pc, #344]	; (80017ac <HAL_QSPI_MspInit+0x178>)
 8001652:	4293      	cmp	r3, r2
 8001654:	f040 80a6 	bne.w	80017a4 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
 800165c:	4b54      	ldr	r3, [pc, #336]	; (80017b0 <HAL_QSPI_MspInit+0x17c>)
 800165e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001660:	4a53      	ldr	r2, [pc, #332]	; (80017b0 <HAL_QSPI_MspInit+0x17c>)
 8001662:	f043 0302 	orr.w	r3, r3, #2
 8001666:	6393      	str	r3, [r2, #56]	; 0x38
 8001668:	4b51      	ldr	r3, [pc, #324]	; (80017b0 <HAL_QSPI_MspInit+0x17c>)
 800166a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	623b      	str	r3, [r7, #32]
 8001672:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
 8001678:	4b4d      	ldr	r3, [pc, #308]	; (80017b0 <HAL_QSPI_MspInit+0x17c>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	4a4c      	ldr	r2, [pc, #304]	; (80017b0 <HAL_QSPI_MspInit+0x17c>)
 800167e:	f043 0310 	orr.w	r3, r3, #16
 8001682:	6313      	str	r3, [r2, #48]	; 0x30
 8001684:	4b4a      	ldr	r3, [pc, #296]	; (80017b0 <HAL_QSPI_MspInit+0x17c>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
 8001694:	4b46      	ldr	r3, [pc, #280]	; (80017b0 <HAL_QSPI_MspInit+0x17c>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a45      	ldr	r2, [pc, #276]	; (80017b0 <HAL_QSPI_MspInit+0x17c>)
 800169a:	f043 0320 	orr.w	r3, r3, #32
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	4b43      	ldr	r3, [pc, #268]	; (80017b0 <HAL_QSPI_MspInit+0x17c>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0320 	and.w	r3, r3, #32
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	4b3f      	ldr	r3, [pc, #252]	; (80017b0 <HAL_QSPI_MspInit+0x17c>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	4a3e      	ldr	r2, [pc, #248]	; (80017b0 <HAL_QSPI_MspInit+0x17c>)
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	6313      	str	r3, [r2, #48]	; 0x30
 80016bc:	4b3c      	ldr	r3, [pc, #240]	; (80017b0 <HAL_QSPI_MspInit+0x17c>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	4b38      	ldr	r3, [pc, #224]	; (80017b0 <HAL_QSPI_MspInit+0x17c>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	4a37      	ldr	r2, [pc, #220]	; (80017b0 <HAL_QSPI_MspInit+0x17c>)
 80016d2:	f043 0308 	orr.w	r3, r3, #8
 80016d6:	6313      	str	r3, [r2, #48]	; 0x30
 80016d8:	4b35      	ldr	r3, [pc, #212]	; (80017b0 <HAL_QSPI_MspInit+0x17c>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <HAL_QSPI_MspInit+0x17c>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	4a30      	ldr	r2, [pc, #192]	; (80017b0 <HAL_QSPI_MspInit+0x17c>)
 80016ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f2:	6313      	str	r3, [r2, #48]	; 0x30
 80016f4:	4b2e      	ldr	r3, [pc, #184]	; (80017b0 <HAL_QSPI_MspInit+0x17c>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001700:	2304      	movs	r3, #4
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001710:	2309      	movs	r3, #9
 8001712:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001718:	4619      	mov	r1, r3
 800171a:	4826      	ldr	r0, [pc, #152]	; (80017b4 <HAL_QSPI_MspInit+0x180>)
 800171c:	f002 fa7e 	bl	8003c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001720:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001732:	230a      	movs	r3, #10
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173a:	4619      	mov	r1, r3
 800173c:	481e      	ldr	r0, [pc, #120]	; (80017b8 <HAL_QSPI_MspInit+0x184>)
 800173e:	f002 fa6d 	bl	8003c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001742:	2304      	movs	r3, #4
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001752:	2309      	movs	r3, #9
 8001754:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175a:	4619      	mov	r1, r3
 800175c:	4817      	ldr	r0, [pc, #92]	; (80017bc <HAL_QSPI_MspInit+0x188>)
 800175e:	f002 fa5d 	bl	8003c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001774:	2309      	movs	r3, #9
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177c:	4619      	mov	r1, r3
 800177e:	4810      	ldr	r0, [pc, #64]	; (80017c0 <HAL_QSPI_MspInit+0x18c>)
 8001780:	f002 fa4c 	bl	8003c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001784:	2340      	movs	r3, #64	; 0x40
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001794:	230a      	movs	r3, #10
 8001796:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179c:	4619      	mov	r1, r3
 800179e:	4809      	ldr	r0, [pc, #36]	; (80017c4 <HAL_QSPI_MspInit+0x190>)
 80017a0:	f002 fa3c 	bl	8003c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80017a4:	bf00      	nop
 80017a6:	3738      	adds	r7, #56	; 0x38
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	a0001000 	.word	0xa0001000
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40021400 	.word	0x40021400
 80017bc:	40020400 	.word	0x40020400
 80017c0:	40020c00 	.word	0x40020c00
 80017c4:	40021800 	.word	0x40021800

080017c8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a31      	ldr	r2, [pc, #196]	; (80018ac <HAL_SD_MspInit+0xe4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d15b      	bne.n	80018a2 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <HAL_SD_MspInit+0xe8>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a2f      	ldr	r2, [pc, #188]	; (80018b0 <HAL_SD_MspInit+0xe8>)
 80017f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <HAL_SD_MspInit+0xe8>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <HAL_SD_MspInit+0xe8>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a28      	ldr	r2, [pc, #160]	; (80018b0 <HAL_SD_MspInit+0xe8>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <HAL_SD_MspInit+0xe8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <HAL_SD_MspInit+0xe8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a21      	ldr	r2, [pc, #132]	; (80018b0 <HAL_SD_MspInit+0xe8>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <HAL_SD_MspInit+0xe8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 800183e:	2340      	movs	r3, #64	; 0x40
 8001840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184a:	2303      	movs	r3, #3
 800184c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800184e:	230c      	movs	r3, #12
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4619      	mov	r1, r3
 8001858:	4816      	ldr	r0, [pc, #88]	; (80018b4 <HAL_SD_MspInit+0xec>)
 800185a:	f002 f9df 	bl	8003c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin;
 800185e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001870:	230c      	movs	r3, #12
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	480f      	ldr	r0, [pc, #60]	; (80018b8 <HAL_SD_MspInit+0xf0>)
 800187c:	f002 f9ce 	bl	8003c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_CLK_Pin;
 8001880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188a:	2301      	movs	r3, #1
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001892:	230c      	movs	r3, #12
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CLK_GPIO_Port, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	4806      	ldr	r0, [pc, #24]	; (80018b8 <HAL_SD_MspInit+0xf0>)
 800189e:	f002 f9bd 	bl	8003c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80018a2:	bf00      	nop
 80018a4:	3728      	adds	r7, #40	; 0x28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40012c00 	.word	0x40012c00
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020000 	.word	0x40020000
 80018b8:	40020800 	.word	0x40020800

080018bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a21      	ldr	r2, [pc, #132]	; (8001960 <HAL_SPI_MspInit+0xa4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d13c      	bne.n	8001958 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_SPI_MspInit+0xa8>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a1f      	ldr	r2, [pc, #124]	; (8001964 <HAL_SPI_MspInit+0xa8>)
 80018e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <HAL_SPI_MspInit+0xa8>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <HAL_SPI_MspInit+0xa8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a18      	ldr	r2, [pc, #96]	; (8001964 <HAL_SPI_MspInit+0xa8>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <HAL_SPI_MspInit+0xa8>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB12     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin;
 8001916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800191a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001928:	2307      	movs	r3, #7
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <HAL_SPI_MspInit+0xac>)
 8001934:	f002 f972 	bl	8003c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001938:	2330      	movs	r3, #48	; 0x30
 800193a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001948:	2306      	movs	r3, #6
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <HAL_SPI_MspInit+0xac>)
 8001954:	f002 f962 	bl	8003c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001958:	bf00      	nop
 800195a:	3728      	adds	r7, #40	; 0x28
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40003c00 	.word	0x40003c00
 8001964:	40023800 	.word	0x40023800
 8001968:	40020400 	.word	0x40020400

0800196c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a19      	ldr	r2, [pc, #100]	; (80019f0 <HAL_UART_MspInit+0x84>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d12c      	bne.n	80019e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_UART_MspInit+0x88>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <HAL_UART_MspInit+0x88>)
 8001998:	f043 0320 	orr.w	r3, r3, #32
 800199c:	6453      	str	r3, [r2, #68]	; 0x44
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_UART_MspInit+0x88>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_UART_MspInit+0x88>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a10      	ldr	r2, [pc, #64]	; (80019f4 <HAL_UART_MspInit+0x88>)
 80019b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_UART_MspInit+0x88>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80019c6:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80019ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019cc:	2302      	movs	r3, #2
 80019ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d4:	2303      	movs	r3, #3
 80019d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80019d8:	2308      	movs	r3, #8
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	4619      	mov	r1, r3
 80019e2:	4805      	ldr	r0, [pc, #20]	; (80019f8 <HAL_UART_MspInit+0x8c>)
 80019e4:	f002 f91a 	bl	8003c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80019e8:	bf00      	nop
 80019ea:	3728      	adds	r7, #40	; 0x28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40011400 	.word	0x40011400
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40021800 	.word	0x40021800

080019fc <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001a10:	4b2c      	ldr	r3, [pc, #176]	; (8001ac4 <HAL_FSMC_MspInit+0xc8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d151      	bne.n	8001abc <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001a18:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <HAL_FSMC_MspInit+0xc8>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <HAL_FSMC_MspInit+0xcc>)
 8001a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a26:	4a28      	ldr	r2, [pc, #160]	; (8001ac8 <HAL_FSMC_MspInit+0xcc>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6393      	str	r3, [r2, #56]	; 0x38
 8001a2e:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <HAL_FSMC_MspInit+0xcc>)
 8001a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8001a3a:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001a3e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a4c:	230c      	movs	r3, #12
 8001a4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	4619      	mov	r1, r3
 8001a54:	481d      	ldr	r0, [pc, #116]	; (8001acc <HAL_FSMC_MspInit+0xd0>)
 8001a56:	f002 f8e1 	bl	8003c1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8001a5a:	f240 433f 	movw	r3, #1087	; 0x43f
 8001a5e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	4619      	mov	r1, r3
 8001a74:	4816      	ldr	r0, [pc, #88]	; (8001ad0 <HAL_FSMC_MspInit+0xd4>)
 8001a76:	f002 f8d1 	bl	8003c1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8001a7a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001a7e:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a8c:	230c      	movs	r3, #12
 8001a8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	4619      	mov	r1, r3
 8001a94:	480f      	ldr	r0, [pc, #60]	; (8001ad4 <HAL_FSMC_MspInit+0xd8>)
 8001a96:	f002 f8c1 	bl	8003c1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8001a9a:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001a9e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001aac:	230c      	movs	r3, #12
 8001aae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4808      	ldr	r0, [pc, #32]	; (8001ad8 <HAL_FSMC_MspInit+0xdc>)
 8001ab6:	f002 f8b1 	bl	8003c1c <HAL_GPIO_Init>
 8001aba:	e000      	b.n	8001abe <HAL_FSMC_MspInit+0xc2>
    return;
 8001abc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000094 	.word	0x20000094
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40021400 	.word	0x40021400
 8001ad0:	40021800 	.word	0x40021800
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40020c00 	.word	0x40020c00

08001adc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001ae4:	f7ff ff8a 	bl	80019fc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <HardFault_Handler+0x4>

08001b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <MemManage_Handler+0x4>

08001b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0e:	e7fe      	b.n	8001b0e <BusFault_Handler+0x4>

08001b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <UsageFault_Handler+0x4>

08001b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b44:	f000 fdee 	bl	8002724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <DMA2_Stream0_IRQHandler+0x10>)
 8001b52:	f001 fd4f 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200032a4 	.word	0x200032a4

08001b60 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001b68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b6c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d013      	beq.n	8001ba0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001b78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b7c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001b80:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00b      	beq.n	8001ba0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001b88:	e000      	b.n	8001b8c <ITM_SendChar+0x2c>
    {
      __NOP();
 8001b8a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001b8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f9      	beq.n	8001b8a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001b96:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001ba0:	687b      	ldr	r3, [r7, #4]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e00a      	b.n	8001bd6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bc0:	f3af 8000 	nop.w
 8001bc4:	4601      	mov	r1, r0
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	60ba      	str	r2, [r7, #8]
 8001bcc:	b2ca      	uxtb	r2, r1
 8001bce:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	dbf0      	blt.n	8001bc0 <_read+0x12>
	}

return len;
 8001bde:	687b      	ldr	r3, [r7, #4]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
		for(int i = 0; i < len; i++){
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e009      	b.n	8001c0e <_write+0x26>
			ITM_SendChar(*ptr++);
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	60ba      	str	r2, [r7, #8]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ffac 	bl	8001b60 <ITM_SendChar>
		for(int i = 0; i < len; i++){
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	dbf1      	blt.n	8001bfa <_write+0x12>
		}
		return len;
 8001c16:	687b      	ldr	r3, [r7, #4]

	//	errno = ENOSYS;
	//	return -1;
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_close>:

int _close(int file)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	return -1;
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c48:	605a      	str	r2, [r3, #4]
	return 0;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_isatty>:

int _isatty(int file)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	return 1;
 8001c60:	2301      	movs	r3, #1
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
	return 0;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <_sbrk+0x50>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d102      	bne.n	8001c9e <_sbrk+0x16>
		heap_end = &end;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <_sbrk+0x50>)
 8001c9a:	4a10      	ldr	r2, [pc, #64]	; (8001cdc <_sbrk+0x54>)
 8001c9c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <_sbrk+0x50>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <_sbrk+0x50>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4413      	add	r3, r2
 8001cac:	466a      	mov	r2, sp
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d907      	bls.n	8001cc2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001cb2:	f005 ff5d 	bl	8007b70 <__errno>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	230c      	movs	r3, #12
 8001cba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc0:	e006      	b.n	8001cd0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001cc2:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <_sbrk+0x50>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	4a03      	ldr	r2, [pc, #12]	; (8001cd8 <_sbrk+0x50>)
 8001ccc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001cce:	68fb      	ldr	r3, [r7, #12]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000098 	.word	0x20000098
 8001cdc:	20007680 	.word	0x20007680

08001ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <SystemInit+0x28>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cea:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <SystemInit+0x28>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <SystemInit+0x28>)
 8001cf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cfa:	609a      	str	r2, [r3, #8]
#endif
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <ConnectWifi>:
char *NL = "\n";
int status = WL_IDLE_STATUS;
int sockState[2] = {SOCKET_FREE, SOCKET_FREE};

void ConnectWifi(SPI_HandleTypeDef *spidef)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	wifi_spi = *spidef;
 8001d14:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <ConnectWifi+0x20>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	2358      	movs	r3, #88	; 0x58
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f005 ff50 	bl	8007bc4 <memcpy>
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	200055ac 	.word	0x200055ac

08001d30 <Wifi_ChipDeselect>:

//WiFi SPI ChipDeselect
void Wifi_ChipDeselect(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIFI_SPI_CSN_GPIO_Port, WIFI_SPI_CSN_Pin, GPIO_PIN_SET);
 8001d34:	2201      	movs	r2, #1
 8001d36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d3a:	4802      	ldr	r0, [pc, #8]	; (8001d44 <Wifi_ChipDeselect+0x14>)
 8001d3c:	f002 f918 	bl	8003f70 <HAL_GPIO_WritePin>
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40021800 	.word	0x40021800

08001d48 <Wifi_ChipSelect>:

//WiFi SPI ChipSelect
void Wifi_ChipSelect(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIFI_SPI_CSN_GPIO_Port, WIFI_SPI_CSN_Pin, GPIO_PIN_RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d52:	4802      	ldr	r0, [pc, #8]	; (8001d5c <Wifi_ChipSelect+0x14>)
 8001d54:	f002 f90c 	bl	8003f70 <HAL_GPIO_WritePin>
}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40021800 	.word	0x40021800

08001d60 <GetCmdDataReady>:

uint8_t GetCmdDataReady()
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
	return (uint8_t)HAL_GPIO_ReadPin(WIFI_DRDY_GPIO_Port, WIFI_DRDY_Pin);
 8001d64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <GetCmdDataReady+0x14>)
 8001d6a:	f002 f8e9 	bl	8003f40 <HAL_GPIO_ReadPin>
 8001d6e:	4603      	mov	r3, r0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021800 	.word	0x40021800

08001d78 <IsCommandPhaseReady>:

bool IsCommandPhaseReady()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	if(GetCmdDataReady() != 0)
 8001d7c:	f7ff fff0 	bl	8001d60 <GetCmdDataReady>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <IsCommandPhaseReady+0x12>
	{
		return true;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <IsCommandPhaseReady+0x14>
	}
	return false;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <IsDataPhaseReady>:

bool IsDataPhaseReady()
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	if(GetCmdDataReady() != 0)
 8001d94:	f7ff ffe4 	bl	8001d60 <GetCmdDataReady>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <IsDataPhaseReady+0x12>
	{
		return true;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <IsDataPhaseReady+0x14>
	}
	return false;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <Wifi_Init>:

void Wifi_Init()
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
	WifiStartup();
 8001dac:	f000 f9c2 	bl	8002134 <WifiStartup>
	if(StartJoinNetwork("DevinsHotWifi", "RickAndMorty123") == ES_WIFI_STATUS_OK)
 8001db0:	4909      	ldr	r1, [pc, #36]	; (8001dd8 <Wifi_Init+0x30>)
 8001db2:	480a      	ldr	r0, [pc, #40]	; (8001ddc <Wifi_Init+0x34>)
 8001db4:	f000 fafa 	bl	80023ac <StartJoinNetwork>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d103      	bne.n	8001dc6 <Wifi_Init+0x1e>
	{
		status = WL_CONNECTED;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <Wifi_Init+0x38>)
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	e001      	b.n	8001dca <Wifi_Init+0x22>
	}
	else
	{
		Disconnect();
 8001dc6:	f000 fa07 	bl	80021d8 <Disconnect>
	}
	StartTCP(5025);
 8001dca:	f241 30a1 	movw	r0, #5025	; 0x13a1
 8001dce:	f000 fc0b 	bl	80025e8 <StartTCP>
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	08008d78 	.word	0x08008d78
 8001ddc:	08008d88 	.word	0x08008d88
 8001de0:	2000009c 	.word	0x2000009c

08001de4 <GetSPIResponse>:

int GetSPIResponse(char *rbuf)
{
 8001de4:	b5b0      	push	{r4, r5, r7, lr}
 8001de6:	b08c      	sub	sp, #48	; 0x30
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	6078      	str	r0, [r7, #4]
	uint8_t checkReady = GetCmdDataReady();
 8001dec:	f7ff ffb8 	bl	8001d60 <GetCmdDataReady>
 8001df0:	4603      	mov	r3, r0
 8001df2:	77fb      	strb	r3, [r7, #31]
	while(!IsDataPhaseReady())
 8001df4:	e003      	b.n	8001dfe <GetSPIResponse+0x1a>
	{
		checkReady = GetCmdDataReady();
 8001df6:	f7ff ffb3 	bl	8001d60 <GetCmdDataReady>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	77fb      	strb	r3, [r7, #31]
	while(!IsDataPhaseReady())
 8001dfe:	f7ff ffc7 	bl	8001d90 <IsDataPhaseReady>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f083 0301 	eor.w	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f3      	bne.n	8001df6 <GetSPIResponse+0x12>
//		printf("Wait for CMD/DATARDY to be high again [%d]\r\n", checkReady);

	}
	int length = 1;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	61bb      	str	r3, [r7, #24]
	uint16_t wb2[] = { 0x0A0A };
 8001e12:	f640 230a 	movw	r3, #2570	; 0xa0a
 8001e16:	81bb      	strh	r3, [r7, #12]
	uint16_t rb2[length];
 8001e18:	69b8      	ldr	r0, [r7, #24]
 8001e1a:	466b      	mov	r3, sp
 8001e1c:	461d      	mov	r5, r3
 8001e1e:	1e43      	subs	r3, r0, #1
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	4603      	mov	r3, r0
 8001e24:	4619      	mov	r1, r3
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	f04f 0400 	mov.w	r4, #0
 8001e32:	0114      	lsls	r4, r2, #4
 8001e34:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001e38:	010b      	lsls	r3, r1, #4
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	f04f 0400 	mov.w	r4, #0
 8001e4a:	0114      	lsls	r4, r2, #4
 8001e4c:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001e50:	010b      	lsls	r3, r1, #4
 8001e52:	4603      	mov	r3, r0
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	3301      	adds	r3, #1
 8001e58:	3307      	adds	r3, #7
 8001e5a:	08db      	lsrs	r3, r3, #3
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	ebad 0d03 	sub.w	sp, sp, r3
 8001e62:	ab02      	add	r3, sp, #8
 8001e64:	3301      	adds	r3, #1
 8001e66:	085b      	lsrs	r3, r3, #1
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	613b      	str	r3, [r7, #16]

//	checkReady = GetCmdDataReady();
//	printf("Starting read data phase, checkReady = [%d]\r\n", checkReady);
	Wifi_ChipSelect();
 8001e6c:	f7ff ff6c 	bl	8001d48 <Wifi_ChipSelect>

	int i = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
	int index = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
	while(IsDataPhaseReady())
 8001e78:	e02f      	b.n	8001eda <GetSPIResponse+0xf6>
	{
		HAL_Delay(20);
 8001e7a:	2014      	movs	r0, #20
 8001e7c:	f000 fc72 	bl	8002764 <HAL_Delay>
		HAL_SPI_TransmitReceive(&wifi_spi, &wb2, &rb2, length, HAL_MAX_DELAY);
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	b298      	uxth	r0, r3
 8001e86:	f107 010c 	add.w	r1, r7, #12
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	4603      	mov	r3, r0
 8001e92:	481a      	ldr	r0, [pc, #104]	; (8001efc <GetSPIResponse+0x118>)
 8001e94:	f003 ffe2 	bl	8005e5c <HAL_SPI_TransmitReceive>
		checkReady = GetCmdDataReady();
 8001e98:	f7ff ff62 	bl	8001d60 <GetCmdDataReady>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	77fb      	strb	r3, [r7, #31]

//		printf("i = %d, value = %0x\r\n", i, rb2[0]);
		char first = rb2[0] & 0xff;
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	73fb      	strb	r3, [r7, #15]
		char second = rb2[0] >> 8;
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	0a1b      	lsrs	r3, r3, #8
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	73bb      	strb	r3, [r7, #14]

		if(first != 0x15)
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	2b15      	cmp	r3, #21
 8001eb4:	d005      	beq.n	8001ec2 <GetSPIResponse+0xde>
		{
			spi_response[index++] = first;
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	627a      	str	r2, [r7, #36]	; 0x24
 8001ebc:	4910      	ldr	r1, [pc, #64]	; (8001f00 <GetSPIResponse+0x11c>)
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	54ca      	strb	r2, [r1, r3]
		}
		if(second != 0x15)
 8001ec2:	7bbb      	ldrb	r3, [r7, #14]
 8001ec4:	2b15      	cmp	r3, #21
 8001ec6:	d005      	beq.n	8001ed4 <GetSPIResponse+0xf0>
		{
			spi_response[index++] = (char)second;
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	627a      	str	r2, [r7, #36]	; 0x24
 8001ece:	490c      	ldr	r1, [pc, #48]	; (8001f00 <GetSPIResponse+0x11c>)
 8001ed0:	7bba      	ldrb	r2, [r7, #14]
 8001ed2:	54ca      	strb	r2, [r1, r3]
		}

		i++;
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	623b      	str	r3, [r7, #32]
	while(IsDataPhaseReady())
 8001eda:	f7ff ff59 	bl	8001d90 <IsDataPhaseReady>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1ca      	bne.n	8001e7a <GetSPIResponse+0x96>
	}

	printf("%s\r\n", spi_response);
 8001ee4:	4906      	ldr	r1, [pc, #24]	; (8001f00 <GetSPIResponse+0x11c>)
 8001ee6:	4807      	ldr	r0, [pc, #28]	; (8001f04 <GetSPIResponse+0x120>)
 8001ee8:	f005 ff28 	bl	8007d3c <iprintf>
	Wifi_ChipDeselect();
 8001eec:	f7ff ff20 	bl	8001d30 <Wifi_ChipDeselect>
	return index;
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	46ad      	mov	sp, r5
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3728      	adds	r7, #40	; 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bdb0      	pop	{r4, r5, r7, pc}
 8001efc:	200055ac 	.word	0x200055ac
 8001f00:	200050fc 	.word	0x200050fc
 8001f04:	08008d98 	.word	0x08008d98

08001f08 <ReceiveSPICommand>:

ES_WIFI_Status_t ReceiveSPICommand(char *pdata)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	int recv_len = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
	recv_len = GetSPIResponse(pdata);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff65 	bl	8001de4 <GetSPIResponse>
 8001f1a:	60f8      	str	r0, [r7, #12]

	if ((recv_len > 0) && (recv_len < BUFFER_SIZE))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	dd21      	ble.n	8001f66 <ReceiveSPICommand+0x5e>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001f28:	da1d      	bge.n	8001f66 <ReceiveSPICommand+0x5e>
	{
	    *(pdata + recv_len) = 0;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
	    if (strstr((char *)pdata, AT_OK_STRING))
 8001f34:	490e      	ldr	r1, [pc, #56]	; (8001f70 <ReceiveSPICommand+0x68>)
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f005 ff48 	bl	8007dcc <strstr>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <ReceiveSPICommand+0x3e>
	    {
	    	return ES_WIFI_STATUS_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e010      	b.n	8001f68 <ReceiveSPICommand+0x60>
	    }
	    else
	    {
	    	if (strstr((char *)pdata, AT_ERROR_STRING))
 8001f46:	490b      	ldr	r1, [pc, #44]	; (8001f74 <ReceiveSPICommand+0x6c>)
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f005 ff3f 	bl	8007dcc <strstr>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <ReceiveSPICommand+0x50>
	    	{
	    		return ES_WIFI_STATUS_ERROR;
 8001f54:	2302      	movs	r3, #2
 8001f56:	e007      	b.n	8001f68 <ReceiveSPICommand+0x60>
	    	}
	    	else
	    	{
	    		/* Some data still to get. Typically with AP list */
	    		if (recv_len == (int16_t)(BUFFER_SIZE - AT_OK_STRING_LEN - 2))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f240 42a6 	movw	r2, #1190	; 0x4a6
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <ReceiveSPICommand+0x5e>
	    		{
	    			return ES_WIFI_STATUS_REQ_DATA_STAGE;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <ReceiveSPICommand+0x60>
	    		}
	    	}
		}
	}
	return ES_WIFI_STATUS_IO_ERROR;
 8001f66:	2304      	movs	r3, #4
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	08008da0 	.word	0x08008da0
 8001f74:	08008dac 	.word	0x08008dac

08001f78 <SendSPICommand>:

ES_WIFI_Status_t SendSPICommand()//char *command)
{
 8001f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f7a:	b08d      	sub	sp, #52	; 0x34
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	466b      	mov	r3, sp
 8001f80:	461d      	mov	r5, r3
	uint8_t checkReady;
	printf("send spi command %s\r\n", full_command);
 8001f82:	4968      	ldr	r1, [pc, #416]	; (8002124 <SendSPICommand+0x1ac>)
 8001f84:	4868      	ldr	r0, [pc, #416]	; (8002128 <SendSPICommand+0x1b0>)
 8001f86:	f005 fed9 	bl	8007d3c <iprintf>
	int full_length = strlen(full_command);
 8001f8a:	4866      	ldr	r0, [pc, #408]	; (8002124 <SendSPICommand+0x1ac>)
 8001f8c:	f7fe f948 	bl	8000220 <strlen>
 8001f90:	4603      	mov	r3, r0
 8001f92:	617b      	str	r3, [r7, #20]
	int send_length = strlen(full_command)/2;
 8001f94:	4863      	ldr	r0, [pc, #396]	; (8002124 <SendSPICommand+0x1ac>)
 8001f96:	f7fe f943 	bl	8000220 <strlen>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	085b      	lsrs	r3, r3, #1
 8001f9e:	61bb      	str	r3, [r7, #24]
	memset(spi_response, 0, BUFFER_SIZE);
 8001fa0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4861      	ldr	r0, [pc, #388]	; (800212c <SendSPICommand+0x1b4>)
 8001fa8:	f005 fe17 	bl	8007bda <memset>
	bool odd = false;
 8001fac:	2300      	movs	r3, #0
 8001fae:	77fb      	strb	r3, [r7, #31]
	if(full_length % 2 == 1)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	bfb8      	it	lt
 8001fba:	425b      	neglt	r3, r3
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d104      	bne.n	8001fca <SendSPICommand+0x52>
	{
		send_length++;
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	61bb      	str	r3, [r7, #24]
		odd = true;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	77fb      	strb	r3, [r7, #31]
	}
	uint16_t wb[send_length];
 8001fca:	69b8      	ldr	r0, [r7, #24]
 8001fcc:	1e43      	subs	r3, r0, #1
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	f04f 0400 	mov.w	r4, #0
 8001fe0:	0114      	lsls	r4, r2, #4
 8001fe2:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001fe6:	010b      	lsls	r3, r1, #4
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4619      	mov	r1, r3
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	f04f 0400 	mov.w	r4, #0
 8001ff8:	0114      	lsls	r4, r2, #4
 8001ffa:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001ffe:	010b      	lsls	r3, r1, #4
 8002000:	4603      	mov	r3, r0
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	3301      	adds	r3, #1
 8002006:	3307      	adds	r3, #7
 8002008:	08db      	lsrs	r3, r3, #3
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	ebad 0d03 	sub.w	sp, sp, r3
 8002010:	ab02      	add	r3, sp, #8
 8002012:	3301      	adds	r3, #1
 8002014:	085b      	lsrs	r3, r3, #1
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	60fb      	str	r3, [r7, #12]
	memset(wb, 0, send_length);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f005 fdda 	bl	8007bda <memset>

	for(int i = 0; i < send_length; i++)
 8002026:	2300      	movs	r3, #0
 8002028:	623b      	str	r3, [r7, #32]
 800202a:	e025      	b.n	8002078 <SendSPICommand+0x100>
	{
		uint16_t lo = full_command[i*2];
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4a3c      	ldr	r2, [pc, #240]	; (8002124 <SendSPICommand+0x1ac>)
 8002032:	5cd3      	ldrb	r3, [r2, r3]
 8002034:	807b      	strh	r3, [r7, #2]
		uint16_t hi = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(i == send_length - 1 && odd)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	3b01      	subs	r3, #1
 800203e:	6a3a      	ldr	r2, [r7, #32]
 8002040:	429a      	cmp	r2, r3
 8002042:	d106      	bne.n	8002052 <SendSPICommand+0xda>
 8002044:	7ffb      	ldrb	r3, [r7, #31]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <SendSPICommand+0xda>
		{
			hi = 0x0A << 8;
 800204a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800204e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002050:	e007      	b.n	8002062 <SendSPICommand+0xea>
		}
		else
		{
			hi = full_command[i*2+1] << 8;
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	3301      	adds	r3, #1
 8002058:	4a32      	ldr	r2, [pc, #200]	; (8002124 <SendSPICommand+0x1ac>)
 800205a:	5cd3      	ldrb	r3, [r2, r3]
 800205c:	b29b      	uxth	r3, r3
 800205e:	021b      	lsls	r3, r3, #8
 8002060:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
		wb[i] = lo | hi;
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002066:	4313      	orrs	r3, r2
 8002068:	b299      	uxth	r1, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6a3a      	ldr	r2, [r7, #32]
 800206e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < send_length; i++)
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	3301      	adds	r3, #1
 8002076:	623b      	str	r3, [r7, #32]
 8002078:	6a3a      	ldr	r2, [r7, #32]
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	429a      	cmp	r2, r3
 800207e:	dbd5      	blt.n	800202c <SendSPICommand+0xb4>

//		printf("wb[i] = %0x\r\n", wb[i]);
	}
	uint16_t rb[send_length];
 8002080:	69b8      	ldr	r0, [r7, #24]
 8002082:	466b      	mov	r3, sp
 8002084:	461e      	mov	r6, r3
 8002086:	1e43      	subs	r3, r0, #1
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	4603      	mov	r3, r0
 800208c:	4619      	mov	r1, r3
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	f04f 0400 	mov.w	r4, #0
 800209a:	0114      	lsls	r4, r2, #4
 800209c:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80020a0:	010b      	lsls	r3, r1, #4
 80020a2:	4603      	mov	r3, r0
 80020a4:	4619      	mov	r1, r3
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	f04f 0400 	mov.w	r4, #0
 80020b2:	0114      	lsls	r4, r2, #4
 80020b4:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80020b8:	010b      	lsls	r3, r1, #4
 80020ba:	4603      	mov	r3, r0
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	3301      	adds	r3, #1
 80020c0:	3307      	adds	r3, #7
 80020c2:	08db      	lsrs	r3, r3, #3
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	ebad 0d03 	sub.w	sp, sp, r3
 80020ca:	ab02      	add	r3, sp, #8
 80020cc:	3301      	adds	r3, #1
 80020ce:	085b      	lsrs	r3, r3, #1
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	607b      	str	r3, [r7, #4]

	//Wait for chip to be ready for command
//	printf("waiting for chip to be ready to send spi command\r\n");
	while(!IsCommandPhaseReady())
 80020d4:	bf00      	nop
 80020d6:	f7ff fe4f 	bl	8001d78 <IsCommandPhaseReady>
 80020da:	4603      	mov	r3, r0
 80020dc:	f083 0301 	eor.w	r3, r3, #1
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f7      	bne.n	80020d6 <SendSPICommand+0x15e>
	{

	}

	Wifi_ChipSelect();
 80020e6:	f7ff fe2f 	bl	8001d48 <Wifi_ChipSelect>
	HAL_SPI_TransmitReceive(&wifi_spi, &wb, &rb, send_length, HAL_MAX_DELAY);
 80020ea:	68f9      	ldr	r1, [r7, #12]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	b298      	uxth	r0, r3
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	4603      	mov	r3, r0
 80020fa:	480d      	ldr	r0, [pc, #52]	; (8002130 <SendSPICommand+0x1b8>)
 80020fc:	f003 feae 	bl	8005e5c <HAL_SPI_TransmitReceive>
	Wifi_ChipDeselect();
 8002100:	f7ff fe16 	bl	8001d30 <Wifi_ChipDeselect>

	while(IsCommandPhaseReady())
 8002104:	bf00      	nop
 8002106:	f7ff fe37 	bl	8001d78 <IsCommandPhaseReady>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1fa      	bne.n	8002106 <SendSPICommand+0x18e>
	{

	}

	return ReceiveSPICommand(spi_response);
 8002110:	4806      	ldr	r0, [pc, #24]	; (800212c <SendSPICommand+0x1b4>)
 8002112:	f7ff fef9 	bl	8001f08 <ReceiveSPICommand>
 8002116:	4603      	mov	r3, r0
 8002118:	46b5      	mov	sp, r6
 800211a:	46ad      	mov	sp, r5


}
 800211c:	4618      	mov	r0, r3
 800211e:	372c      	adds	r7, #44	; 0x2c
 8002120:	46bd      	mov	sp, r7
 8002122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002124:	20004cfc 	.word	0x20004cfc
 8002128:	08008db4 	.word	0x08008db4
 800212c:	200050fc 	.word	0x200050fc
 8002130:	200055ac 	.word	0x200055ac

08002134 <WifiStartup>:
	Wifi_ChipDeselect();
}


void WifiStartup()
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af02      	add	r7, sp, #8
	int length = 1;
 800213a:	2301      	movs	r3, #1
 800213c:	60fb      	str	r3, [r7, #12]
//	uint8_t wb[] = {0x0a, 0x0a};
//	uint8_t rb[2];
	uint16_t wb[] = {0x0a0a};
 800213e:	f640 230a 	movw	r3, #2570	; 0xa0a
 8002142:	813b      	strh	r3, [r7, #8]
	uint16_t rb[1];
	Wifi_ChipSelect();
 8002144:	f7ff fe00 	bl	8001d48 <Wifi_ChipSelect>

	while(IsDataPhaseReady())
 8002148:	e012      	b.n	8002170 <WifiStartup+0x3c>
	{
		HAL_SPI_TransmitReceive(&wifi_spi, &wb, &rb, length, HAL_MAX_DELAY);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	b298      	uxth	r0, r3
 800214e:	1d3a      	adds	r2, r7, #4
 8002150:	f107 0108 	add.w	r1, r7, #8
 8002154:	f04f 33ff 	mov.w	r3, #4294967295
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	4603      	mov	r3, r0
 800215c:	480a      	ldr	r0, [pc, #40]	; (8002188 <WifiStartup+0x54>)
 800215e:	f003 fe7d 	bl	8005e5c <HAL_SPI_TransmitReceive>
		printf("in first data phase, rb = 0x%0x, 0x%0x\r\n", rb[1], rb[0]);
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	4619      	mov	r1, r3
 8002166:	88bb      	ldrh	r3, [r7, #4]
 8002168:	461a      	mov	r2, r3
 800216a:	4808      	ldr	r0, [pc, #32]	; (800218c <WifiStartup+0x58>)
 800216c:	f005 fde6 	bl	8007d3c <iprintf>
	while(IsDataPhaseReady())
 8002170:	f7ff fe0e 	bl	8001d90 <IsDataPhaseReady>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1e7      	bne.n	800214a <WifiStartup+0x16>
//	for(int i = 0; i < 4; i++)
//	{
//		printf("i = %d, value = %0x\r\n", i, rb2[i]);
//	}

	Wifi_ChipDeselect();
 800217a:	f7ff fdd9 	bl	8001d30 <Wifi_ChipDeselect>
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200055ac 	.word	0x200055ac
 800218c:	08008dd0 	.word	0x08008dd0

08002190 <SetProductName>:
	Wifi_ChipDeselect();
	printf("ChipDeselect == [%d]\r\n", checkReady);
}

void SetProductName(char *name)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
//	}
//	totalLength = strlen(full_command);
////	printf("total length after = %d", totalLength);
//
//	SendSPICommand(full_command);
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <SetAPSSID>:

void SetAPSSID(char *ssid)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	6078      	str	r0, [r7, #4]
//	{
//		strcat(full_command, NL);
//	}
//	totalLength = strlen(full_command);
//	printf("total length after = %d", totalLength);
	sprintf((char *)full_command, "%s=%s%s", AT_NET_SET_SSID, ssid, CMD_SUFFIX);
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <SetAPSSID+0x24>)
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a06      	ldr	r2, [pc, #24]	; (80021cc <SetAPSSID+0x28>)
 80021b4:	4906      	ldr	r1, [pc, #24]	; (80021d0 <SetAPSSID+0x2c>)
 80021b6:	4807      	ldr	r0, [pc, #28]	; (80021d4 <SetAPSSID+0x30>)
 80021b8:	f005 fde8 	bl	8007d8c <siprintf>
	SendSPICommand();//full_command);
 80021bc:	f7ff fedc 	bl	8001f78 <SendSPICommand>
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	08008f34 	.word	0x08008f34
 80021cc:	08008f28 	.word	0x08008f28
 80021d0:	08008f2c 	.word	0x08008f2c
 80021d4:	20004cfc 	.word	0x20004cfc

080021d8 <Disconnect>:

void Disconnect()
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
//	{
//		strcat(full_command, NL);
//	}
//	totalLength = strlen(full_command);
//
	sprintf((char *)full_command, "%s%s", AT_NET_DISCONNECT, CMD_SUFFIX);
 80021dc:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <Disconnect+0x18>)
 80021de:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <Disconnect+0x1c>)
 80021e0:	4905      	ldr	r1, [pc, #20]	; (80021f8 <Disconnect+0x20>)
 80021e2:	4806      	ldr	r0, [pc, #24]	; (80021fc <Disconnect+0x24>)
 80021e4:	f005 fdd2 	bl	8007d8c <siprintf>
	SendSPICommand();//full_command);
 80021e8:	f7ff fec6 	bl	8001f78 <SendSPICommand>
}
 80021ec:	bf00      	nop
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	08008f34 	.word	0x08008f34
 80021f4:	08008f38 	.word	0x08008f38
 80021f8:	08008f3c 	.word	0x08008f3c
 80021fc:	20004cfc 	.word	0x20004cfc

08002200 <SetAPPassword>:

void SetAPPassword(char *pass)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af02      	add	r7, sp, #8
 8002206:	6078      	str	r0, [r7, #4]
//	}
//	totalLength = strlen(full_command);
////	printf("total length after = %d", totalLength);
//
//	SendSPICommand(full_command);
	sprintf((char *)full_command, "%s=%s%s", AT_NET_SET_PASSPHRASE, pass, CMD_SUFFIX);
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <SetAPPassword+0x24>)
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a06      	ldr	r2, [pc, #24]	; (8002228 <SetAPPassword+0x28>)
 8002210:	4906      	ldr	r1, [pc, #24]	; (800222c <SetAPPassword+0x2c>)
 8002212:	4807      	ldr	r0, [pc, #28]	; (8002230 <SetAPPassword+0x30>)
 8002214:	f005 fdba 	bl	8007d8c <siprintf>
	SendSPICommand();//full_command);
 8002218:	f7ff feae 	bl	8001f78 <SendSPICommand>
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	08008f34 	.word	0x08008f34
 8002228:	08008f44 	.word	0x08008f44
 800222c:	08008f2c 	.word	0x08008f2c
 8002230:	20004cfc 	.word	0x20004cfc

08002234 <SetAPSecurityMode>:

void SetAPSecurityMode(ES_WIFI_SecurityType_t mode)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af02      	add	r7, sp, #8
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
//	}
//	totalLength = strlen(full_command);
////	printf("total length after = %d", totalLength);
//
//	SendSPICommand(full_command);
	sprintf((char *)full_command, "%s=%d%s", AT_NET_SET_SECURITY_TYPE, mode, CMD_SUFFIX);
 800223e:	79fa      	ldrb	r2, [r7, #7]
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <SetAPSecurityMode+0x28>)
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	4a06      	ldr	r2, [pc, #24]	; (8002260 <SetAPSecurityMode+0x2c>)
 8002248:	4906      	ldr	r1, [pc, #24]	; (8002264 <SetAPSecurityMode+0x30>)
 800224a:	4807      	ldr	r0, [pc, #28]	; (8002268 <SetAPSecurityMode+0x34>)
 800224c:	f005 fd9e 	bl	8007d8c <siprintf>
	SendSPICommand();
 8002250:	f7ff fe92 	bl	8001f78 <SendSPICommand>
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	08008f34 	.word	0x08008f34
 8002260:	08008f48 	.word	0x08008f48
 8002264:	08008f4c 	.word	0x08008f4c
 8002268:	20004cfc 	.word	0x20004cfc

0800226c <SetDHCPSetting>:

void SetDHCPSetting(ES_WIFI_IPType_t dhcp)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af02      	add	r7, sp, #8
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
//	}
//	totalLength = strlen(full_command);
////	printf("total length after = %d", totalLength);
//
//	SendSPICommand(full_command);
	sprintf((char *)full_command, "%s=%d%s", AT_NET_SET_DHCP, dhcp, CMD_SUFFIX);
 8002276:	79fa      	ldrb	r2, [r7, #7]
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <SetDHCPSetting+0x28>)
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	4613      	mov	r3, r2
 800227e:	4a06      	ldr	r2, [pc, #24]	; (8002298 <SetDHCPSetting+0x2c>)
 8002280:	4906      	ldr	r1, [pc, #24]	; (800229c <SetDHCPSetting+0x30>)
 8002282:	4807      	ldr	r0, [pc, #28]	; (80022a0 <SetDHCPSetting+0x34>)
 8002284:	f005 fd82 	bl	8007d8c <siprintf>
	SendSPICommand();
 8002288:	f7ff fe76 	bl	8001f78 <SendSPICommand>
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	08008f34 	.word	0x08008f34
 8002298:	08008f54 	.word	0x08008f54
 800229c:	08008f4c 	.word	0x08008f4c
 80022a0:	20004cfc 	.word	0x20004cfc

080022a4 <JoinNetwork>:



ES_WIFI_Status_t JoinNetwork()
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
//	}
//	totalLength = strlen(full_command);
////	printf("total length after = %d", totalLength);
//
//	return SendSPICommand(full_command);
	sprintf((char *)full_command, "%s%s", AT_NET_JOIN, CMD_SUFFIX);
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <JoinNetwork+0x1c>)
 80022aa:	4a06      	ldr	r2, [pc, #24]	; (80022c4 <JoinNetwork+0x20>)
 80022ac:	4906      	ldr	r1, [pc, #24]	; (80022c8 <JoinNetwork+0x24>)
 80022ae:	4807      	ldr	r0, [pc, #28]	; (80022cc <JoinNetwork+0x28>)
 80022b0:	f005 fd6c 	bl	8007d8c <siprintf>
	SendSPICommand();
 80022b4:	f7ff fe60 	bl	8001f78 <SendSPICommand>
}
 80022b8:	bf00      	nop
 80022ba:	4618      	mov	r0, r3
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	08008f34 	.word	0x08008f34
 80022c4:	08008f58 	.word	0x08008f58
 80022c8:	08008f3c 	.word	0x08008f3c
 80022cc:	20004cfc 	.word	0x20004cfc

080022d0 <SetSocket>:

void SetSocket(int socket)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	6078      	str	r0, [r7, #4]
//	}
//	totalLength = strlen(full_command);
////	printf("total length after = %d", totalLength);
//
//	SendSPICommand(full_command);
	sprintf((char *)full_command, "%s=%d%s", AT_TR_SET_SOCKET, socket, CMD_SUFFIX);
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <SetSocket+0x24>)
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a06      	ldr	r2, [pc, #24]	; (80022f8 <SetSocket+0x28>)
 80022e0:	4906      	ldr	r1, [pc, #24]	; (80022fc <SetSocket+0x2c>)
 80022e2:	4807      	ldr	r0, [pc, #28]	; (8002300 <SetSocket+0x30>)
 80022e4:	f005 fd52 	bl	8007d8c <siprintf>
	SendSPICommand();
 80022e8:	f7ff fe46 	bl	8001f78 <SendSPICommand>
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	08008f34 	.word	0x08008f34
 80022f8:	08008f5c 	.word	0x08008f5c
 80022fc:	08008f4c 	.word	0x08008f4c
 8002300:	20004cfc 	.word	0x20004cfc

08002304 <SetProtocol>:

void SetProtocol(ES_WIFI_ConnType_t protocol)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af02      	add	r7, sp, #8
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
//	}
//	totalLength = strlen(full_command);
////	printf("total length after = %d", totalLength);
//
//	SendSPICommand(full_command);
	sprintf((char *)full_command, "%s=%d%s", AT_TR_SET_PROTOCOL, protocol, CMD_SUFFIX);
 800230e:	79fa      	ldrb	r2, [r7, #7]
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <SetProtocol+0x28>)
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	4613      	mov	r3, r2
 8002316:	4a06      	ldr	r2, [pc, #24]	; (8002330 <SetProtocol+0x2c>)
 8002318:	4906      	ldr	r1, [pc, #24]	; (8002334 <SetProtocol+0x30>)
 800231a:	4807      	ldr	r0, [pc, #28]	; (8002338 <SetProtocol+0x34>)
 800231c:	f005 fd36 	bl	8007d8c <siprintf>
	SendSPICommand();
 8002320:	f7ff fe2a 	bl	8001f78 <SendSPICommand>
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	08008f34 	.word	0x08008f34
 8002330:	08008f60 	.word	0x08008f60
 8002334:	08008f4c 	.word	0x08008f4c
 8002338:	20004cfc 	.word	0x20004cfc

0800233c <SetPort>:

void SetPort(int port)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af02      	add	r7, sp, #8
 8002342:	6078      	str	r0, [r7, #4]
//	}
//	totalLength = strlen(full_command);
////	printf("total length after = %d", totalLength);
//
//	SendSPICommand(full_command);
	sprintf((char *)full_command, "%s=%d%s", AT_TR_SET_LOCAL_PORT_NUMBER, port, CMD_SUFFIX);
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <SetPort+0x24>)
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a06      	ldr	r2, [pc, #24]	; (8002364 <SetPort+0x28>)
 800234c:	4906      	ldr	r1, [pc, #24]	; (8002368 <SetPort+0x2c>)
 800234e:	4807      	ldr	r0, [pc, #28]	; (800236c <SetPort+0x30>)
 8002350:	f005 fd1c 	bl	8007d8c <siprintf>
	SendSPICommand();
 8002354:	f7ff fe10 	bl	8001f78 <SendSPICommand>
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	08008f34 	.word	0x08008f34
 8002364:	08008f64 	.word	0x08008f64
 8002368:	08008f4c 	.word	0x08008f4c
 800236c:	20004cfc 	.word	0x20004cfc

08002370 <StartTCPComm>:

void StartTCPComm(int socket_id)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
//	}
//	totalLength = strlen(full_command);
////	printf("total length after = %d", totalLength);
//
//	SendSPICommand(full_command);
	SetSocket(socket_id);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ffa9 	bl	80022d0 <SetSocket>
	sprintf((char *)full_command, "%s=1%s", AT_TR_SERVER, CMD_SUFFIX);
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <StartTCPComm+0x2c>)
 8002380:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <StartTCPComm+0x30>)
 8002382:	4908      	ldr	r1, [pc, #32]	; (80023a4 <StartTCPComm+0x34>)
 8002384:	4808      	ldr	r0, [pc, #32]	; (80023a8 <StartTCPComm+0x38>)
 8002386:	f005 fd01 	bl	8007d8c <siprintf>
	SendSPICommand();
 800238a:	f7ff fdf5 	bl	8001f78 <SendSPICommand>

	WaitForSocketConnection(socket_id);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f908 	bl	80025a4 <WaitForSocketConnection>
//	CheckSocketConnection(socket_id);
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	08008f34 	.word	0x08008f34
 80023a0:	08008f68 	.word	0x08008f68
 80023a4:	08008f6c 	.word	0x08008f6c
 80023a8:	20004cfc 	.word	0x20004cfc

080023ac <StartJoinNetwork>:
//	SendSPICommand();
//}


ES_WIFI_Status_t StartJoinNetwork(char *ssid, char *pw)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
	SetProductName("devin_test_simple");
 80023b6:	480b      	ldr	r0, [pc, #44]	; (80023e4 <StartJoinNetwork+0x38>)
 80023b8:	f7ff feea 	bl	8002190 <SetProductName>
	SetAPSSID(ssid);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff fef1 	bl	80021a4 <SetAPSSID>
	SetAPPassword(pw);
 80023c2:	6838      	ldr	r0, [r7, #0]
 80023c4:	f7ff ff1c 	bl	8002200 <SetAPPassword>
	SetAPSecurityMode(ES_WIFI_SEC_WPA2);
 80023c8:	2003      	movs	r0, #3
 80023ca:	f7ff ff33 	bl	8002234 <SetAPSecurityMode>
	SetDHCPSetting(ES_WIFI_DHCP);
 80023ce:	2001      	movs	r0, #1
 80023d0:	f7ff ff4c 	bl	800226c <SetDHCPSetting>
	return JoinNetwork();
 80023d4:	f7ff ff66 	bl	80022a4 <JoinNetwork>
 80023d8:	4603      	mov	r3, r0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	08008f7c 	.word	0x08008f7c

080023e8 <GetData>:
////	//	}
//
//}

void GetData(int socket_id)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
//	//	while(true)
//	//	{
//	//		GetSPIResponse();
//	//	}

	sprintf((char *)full_command, AT_READ_DATA);
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <GetData+0x50>)
 80023f2:	4a12      	ldr	r2, [pc, #72]	; (800243c <GetData+0x54>)
 80023f4:	6810      	ldr	r0, [r2, #0]
 80023f6:	6018      	str	r0, [r3, #0]
 80023f8:	7912      	ldrb	r2, [r2, #4]
 80023fa:	711a      	strb	r2, [r3, #4]
	SendSPICommand();
 80023fc:	f7ff fdbc 	bl	8001f78 <SendSPICommand>

	if(strstr(spi_response, "-1"))
 8002400:	490f      	ldr	r1, [pc, #60]	; (8002440 <GetData+0x58>)
 8002402:	4810      	ldr	r0, [pc, #64]	; (8002444 <GetData+0x5c>)
 8002404:	f005 fce2 	bl	8007dcc <strstr>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00d      	beq.n	800242a <GetData+0x42>
	{
		sprintf((char *)full_command, "%s=0%s", AT_TR_SERVER, CMD_SUFFIX);
 800240e:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <GetData+0x60>)
 8002410:	4a0e      	ldr	r2, [pc, #56]	; (800244c <GetData+0x64>)
 8002412:	490f      	ldr	r1, [pc, #60]	; (8002450 <GetData+0x68>)
 8002414:	4808      	ldr	r0, [pc, #32]	; (8002438 <GetData+0x50>)
 8002416:	f005 fcb9 	bl	8007d8c <siprintf>

		SendSPICommand();
 800241a:	f7ff fdad 	bl	8001f78 <SendSPICommand>
		sockState[socket_id] = SOCKET_FREE;
 800241e:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <GetData+0x6c>)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2100      	movs	r1, #0
 8002424:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		SendResponse("yes please");

	}


}
 8002428:	e002      	b.n	8002430 <GetData+0x48>
		SendResponse("yes please");
 800242a:	480b      	ldr	r0, [pc, #44]	; (8002458 <GetData+0x70>)
 800242c:	f000 f816 	bl	800245c <SendResponse>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20004cfc 	.word	0x20004cfc
 800243c:	08008f90 	.word	0x08008f90
 8002440:	08008f98 	.word	0x08008f98
 8002444:	200050fc 	.word	0x200050fc
 8002448:	08008f34 	.word	0x08008f34
 800244c:	08008f68 	.word	0x08008f68
 8002450:	08008f9c 	.word	0x08008f9c
 8002454:	200000a0 	.word	0x200000a0
 8002458:	08008fa4 	.word	0x08008fa4

0800245c <SendResponse>:

void SendResponse(char *msg)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af02      	add	r7, sp, #8
 8002462:	6078      	str	r0, [r7, #4]
//
//	//	while(true)
//	//	{
//	//		GetSPIResponse();
//	//	}
	int msgLen = strlen(msg);// + 3;
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7fd fedb 	bl	8000220 <strlen>
 800246a:	4603      	mov	r3, r0
 800246c:	60fb      	str	r3, [r7, #12]
	printf("msg sent = %d\r\n", msgLen);
 800246e:	68f9      	ldr	r1, [r7, #12]
 8002470:	480d      	ldr	r0, [pc, #52]	; (80024a8 <SendResponse+0x4c>)
 8002472:	f005 fc63 	bl	8007d3c <iprintf>
	sprintf((char *)full_command, "%s=%u%s", AT_WRITE_SET_PACKET_SIZE, msgLen, CMD_SUFFIX);
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <SendResponse+0x50>)
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4a0c      	ldr	r2, [pc, #48]	; (80024b0 <SendResponse+0x54>)
 800247e:	490d      	ldr	r1, [pc, #52]	; (80024b4 <SendResponse+0x58>)
 8002480:	480d      	ldr	r0, [pc, #52]	; (80024b8 <SendResponse+0x5c>)
 8002482:	f005 fc83 	bl	8007d8c <siprintf>
	SendSPICommand();
 8002486:	f7ff fd77 	bl	8001f78 <SendSPICommand>

	sprintf((char *)full_command, "%s=%s%s", AT_WRITE_DATA, CMD_SUFFIX, msg);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	4b07      	ldr	r3, [pc, #28]	; (80024ac <SendResponse+0x50>)
 8002490:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <SendResponse+0x60>)
 8002492:	490b      	ldr	r1, [pc, #44]	; (80024c0 <SendResponse+0x64>)
 8002494:	4808      	ldr	r0, [pc, #32]	; (80024b8 <SendResponse+0x5c>)
 8002496:	f005 fc79 	bl	8007d8c <siprintf>
	SendSPICommand();
 800249a:	f7ff fd6d 	bl	8001f78 <SendSPICommand>
}
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	08008fb0 	.word	0x08008fb0
 80024ac:	08008f34 	.word	0x08008f34
 80024b0:	08008fc0 	.word	0x08008fc0
 80024b4:	08008fc4 	.word	0x08008fc4
 80024b8:	20004cfc 	.word	0x20004cfc
 80024bc:	08008fcc 	.word	0x08008fcc
 80024c0:	08008f2c 	.word	0x08008f2c

080024c4 <GetFreeSocket>:
//
//	PollForData();
//}

int GetFreeSocket()
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2; i++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	e00a      	b.n	80024e6 <GetFreeSocket+0x22>
	{
		if (sockState[i] == SOCKET_FREE)
 80024d0:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <GetFreeSocket+0x38>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <GetFreeSocket+0x1c>
		{
		  return i;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	e007      	b.n	80024f0 <GetFreeSocket+0x2c>
	for(int i = 0; i < 2; i++)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3301      	adds	r3, #1
 80024e4:	607b      	str	r3, [r7, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	ddf1      	ble.n	80024d0 <GetFreeSocket+0xc>
		}
	}
	return -1;
 80024ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	200000a0 	.word	0x200000a0

08002500 <CheckSocketConnection>:


ES_WIFI_Status_t CheckSocketConnection(int socket_id)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
//	char *ptr;
	ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002508:	2302      	movs	r3, #2
 800250a:	73fb      	strb	r3, [r7, #15]

//	do
//	{
		sprintf((char *)full_command, "%s%s", AT_MESSAGE_READ, CMD_SUFFIX);
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <CheckSocketConnection+0x7c>)
 800250e:	4a1c      	ldr	r2, [pc, #112]	; (8002580 <CheckSocketConnection+0x80>)
 8002510:	491c      	ldr	r1, [pc, #112]	; (8002584 <CheckSocketConnection+0x84>)
 8002512:	481d      	ldr	r0, [pc, #116]	; (8002588 <CheckSocketConnection+0x88>)
 8002514:	f005 fc3a 	bl	8007d8c <siprintf>

		if(SendSPICommand() == ES_WIFI_STATUS_OK)
 8002518:	f7ff fd2e 	bl	8001f78 <SendSPICommand>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d120      	bne.n	8002564 <CheckSocketConnection+0x64>
		{

			if ((strstr((char *)spi_response , "[SOMA]")) && (strstr((char *)spi_response, "[EOMA]")))
 8002522:	491a      	ldr	r1, [pc, #104]	; (800258c <CheckSocketConnection+0x8c>)
 8002524:	481a      	ldr	r0, [pc, #104]	; (8002590 <CheckSocketConnection+0x90>)
 8002526:	f005 fc51 	bl	8007dcc <strstr>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d01b      	beq.n	8002568 <CheckSocketConnection+0x68>
 8002530:	4918      	ldr	r1, [pc, #96]	; (8002594 <CheckSocketConnection+0x94>)
 8002532:	4817      	ldr	r0, [pc, #92]	; (8002590 <CheckSocketConnection+0x90>)
 8002534:	f005 fc4a 	bl	8007dcc <strstr>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d014      	beq.n	8002568 <CheckSocketConnection+0x68>
			{
				if (strstr((char *)spi_response, "Accepted"))
 800253e:	4916      	ldr	r1, [pc, #88]	; (8002598 <CheckSocketConnection+0x98>)
 8002540:	4813      	ldr	r0, [pc, #76]	; (8002590 <CheckSocketConnection+0x90>)
 8002542:	f005 fc43 	bl	8007dcc <strstr>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00d      	beq.n	8002568 <CheckSocketConnection+0x68>
				{
					printf("%s\r\n", spi_response);
 800254c:	4910      	ldr	r1, [pc, #64]	; (8002590 <CheckSocketConnection+0x90>)
 800254e:	4813      	ldr	r0, [pc, #76]	; (800259c <CheckSocketConnection+0x9c>)
 8002550:	f005 fbf4 	bl	8007d3c <iprintf>
	//				ptr = strtok((char *)spi_response + 2, " ");
	//				ptr = strtok(NULL, " ");
	//				ptr = strtok(NULL, " ");
	//				ptr = strtok(NULL, ":");
					ret = ES_WIFI_STATUS_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]
					sockState[socket_id] = SOCKET_CONNECTED;
 8002558:	4a11      	ldr	r2, [pc, #68]	; (80025a0 <CheckSocketConnection+0xa0>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2102      	movs	r1, #2
 800255e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002562:	e001      	b.n	8002568 <CheckSocketConnection+0x68>
				}
			}
		}
		else
		{
			ret = ES_WIFI_STATUS_ERROR;
 8002564:	2302      	movs	r3, #2
 8002566:	73fb      	strb	r3, [r7, #15]
		}
		HAL_Delay(1000);
 8002568:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800256c:	f000 f8fa 	bl	8002764 <HAL_Delay>
//	}
//
//	while(1);


	return ret;
 8002570:	7bfb      	ldrb	r3, [r7, #15]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	08008f34 	.word	0x08008f34
 8002580:	08008fd0 	.word	0x08008fd0
 8002584:	08008f3c 	.word	0x08008f3c
 8002588:	20004cfc 	.word	0x20004cfc
 800258c:	08008fd4 	.word	0x08008fd4
 8002590:	200050fc 	.word	0x200050fc
 8002594:	08008fdc 	.word	0x08008fdc
 8002598:	08008fe4 	.word	0x08008fe4
 800259c:	08008d98 	.word	0x08008d98
 80025a0:	200000a0 	.word	0x200000a0

080025a4 <WaitForSocketConnection>:

ES_WIFI_Status_t WaitForSocketConnection(int socket_id)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	while(sockState[socket_id] != SOCKET_CONNECTED)
 80025ac:	e002      	b.n	80025b4 <WaitForSocketConnection+0x10>
	{
		CheckSocketConnection(socket_id);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ffa6 	bl	8002500 <CheckSocketConnection>
	while(sockState[socket_id] != SOCKET_CONNECTED)
 80025b4:	4a05      	ldr	r2, [pc, #20]	; (80025cc <WaitForSocketConnection+0x28>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d1f6      	bne.n	80025ae <WaitForSocketConnection+0xa>
	}
}
 80025c0:	bf00      	nop
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	200000a0 	.word	0x200000a0

080025d0 <ProcessSocket>:


void ProcessSocket(int socket_id)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
//	if(sockState[socket_id] == SOCKET_CONNECTED)
//	{
		GetData(socket_id);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff ff05 	bl	80023e8 <GetData>
//	}
//	else
//	{

//	}
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <StartTCP>:


void StartTCP(int port)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
	int sockNum = GetFreeSocket();
 80025f0:	f7ff ff68 	bl	80024c4 <GetFreeSocket>
 80025f4:	60f8      	str	r0, [r7, #12]
	if(sockNum != -1)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d010      	beq.n	8002620 <StartTCP+0x38>
	{
		sockState[sockNum] = SOCKET_BUSY;
 80025fe:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <StartTCP+0x40>)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2101      	movs	r1, #1
 8002604:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		SetSocket(sockNum);
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f7ff fe61 	bl	80022d0 <SetSocket>
		SetProtocol(ES_WIFI_TCP_CONNECTION);
 800260e:	2000      	movs	r0, #0
 8002610:	f7ff fe78 	bl	8002304 <SetProtocol>
		SetPort(port);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff fe91 	bl	800233c <SetPort>
		StartTCPComm(sockNum);
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f7ff fea8 	bl	8002370 <StartTCPComm>
//		PollForData();
		//	SetSocketToReopen();
	}

}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	200000a0 	.word	0x200000a0

0800262c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800262c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002664 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002630:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002632:	e003      	b.n	800263c <LoopCopyDataInit>

08002634 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002636:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002638:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800263a:	3104      	adds	r1, #4

0800263c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800263c:	480b      	ldr	r0, [pc, #44]	; (800266c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800263e:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002640:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002642:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002644:	d3f6      	bcc.n	8002634 <CopyDataInit>
  ldr  r2, =_sbss
 8002646:	4a0b      	ldr	r2, [pc, #44]	; (8002674 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002648:	e002      	b.n	8002650 <LoopFillZerobss>

0800264a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800264a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800264c:	f842 3b04 	str.w	r3, [r2], #4

08002650 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002652:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002654:	d3f9      	bcc.n	800264a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002656:	f7ff fb43 	bl	8001ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800265a:	f005 fa8f 	bl	8007b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800265e:	f7fd ffb7 	bl	80005d0 <main>
  bx  lr    
 8002662:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002664:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002668:	080090cc 	.word	0x080090cc
  ldr  r0, =_sdata
 800266c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002670:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002674:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002678:	2000767c 	.word	0x2000767c

0800267c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800267c:	e7fe      	b.n	800267c <ADC_IRQHandler>
	...

08002680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002684:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <HAL_Init+0x40>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0d      	ldr	r2, [pc, #52]	; (80026c0 <HAL_Init+0x40>)
 800268a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800268e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_Init+0x40>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <HAL_Init+0x40>)
 8002696:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800269a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800269c:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_Init+0x40>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <HAL_Init+0x40>)
 80026a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a8:	2003      	movs	r0, #3
 80026aa:	f000 fbbf 	bl	8002e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ae:	2000      	movs	r0, #0
 80026b0:	f000 f808 	bl	80026c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026b4:	f7fe fd34 	bl	8001120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40023c00 	.word	0x40023c00

080026c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_InitTick+0x54>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <HAL_InitTick+0x58>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	4619      	mov	r1, r3
 80026d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026da:	fbb3 f3f1 	udiv	r3, r3, r1
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 fbd7 	bl	8002e96 <HAL_SYSTICK_Config>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e00e      	b.n	8002710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b0f      	cmp	r3, #15
 80026f6:	d80a      	bhi.n	800270e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f8:	2200      	movs	r2, #0
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002700:	f000 fb9f 	bl	8002e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002704:	4a06      	ldr	r2, [pc, #24]	; (8002720 <HAL_InitTick+0x5c>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	e000      	b.n	8002710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
}
 8002710:	4618      	mov	r0, r3
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20000000 	.word	0x20000000
 800271c:	20000008 	.word	0x20000008
 8002720:	20000004 	.word	0x20000004

08002724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_IncTick+0x20>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	461a      	mov	r2, r3
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_IncTick+0x24>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4413      	add	r3, r2
 8002734:	4a04      	ldr	r2, [pc, #16]	; (8002748 <HAL_IncTick+0x24>)
 8002736:	6013      	str	r3, [r2, #0]
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000008 	.word	0x20000008
 8002748:	20005604 	.word	0x20005604

0800274c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return uwTick;
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <HAL_GetTick+0x14>)
 8002752:	681b      	ldr	r3, [r3, #0]
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20005604 	.word	0x20005604

08002764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800276c:	f7ff ffee 	bl	800274c <HAL_GetTick>
 8002770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277c:	d005      	beq.n	800278a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_Delay+0x40>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4413      	add	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800278a:	bf00      	nop
 800278c:	f7ff ffde 	bl	800274c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	429a      	cmp	r2, r3
 800279a:	d8f7      	bhi.n	800278c <HAL_Delay+0x28>
  {
  }
}
 800279c:	bf00      	nop
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000008 	.word	0x20000008

080027a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e033      	b.n	8002826 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe fcd2 	bl	8001170 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d118      	bne.n	8002818 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027ee:	f023 0302 	bic.w	r3, r3, #2
 80027f2:	f043 0202 	orr.w	r2, r3, #2
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f94a 	bl	8002a94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f023 0303 	bic.w	r3, r3, #3
 800280e:	f043 0201 	orr.w	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	641a      	str	r2, [r3, #64]	; 0x40
 8002816:	e001      	b.n	800281c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002824:	7bfb      	ldrb	r3, [r7, #15]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_ADC_ConfigChannel+0x1c>
 8002848:	2302      	movs	r3, #2
 800284a:	e113      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x244>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b09      	cmp	r3, #9
 800285a:	d925      	bls.n	80028a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68d9      	ldr	r1, [r3, #12]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	b29b      	uxth	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	4613      	mov	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	3b1e      	subs	r3, #30
 8002872:	2207      	movs	r2, #7
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43da      	mvns	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	400a      	ands	r2, r1
 8002880:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68d9      	ldr	r1, [r3, #12]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	b29b      	uxth	r3, r3
 8002892:	4618      	mov	r0, r3
 8002894:	4603      	mov	r3, r0
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4403      	add	r3, r0
 800289a:	3b1e      	subs	r3, #30
 800289c:	409a      	lsls	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	e022      	b.n	80028ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6919      	ldr	r1, [r3, #16]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	4613      	mov	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	2207      	movs	r2, #7
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43da      	mvns	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	400a      	ands	r2, r1
 80028ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6919      	ldr	r1, [r3, #16]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	4618      	mov	r0, r3
 80028de:	4603      	mov	r3, r0
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4403      	add	r3, r0
 80028e4:	409a      	lsls	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b06      	cmp	r3, #6
 80028f4:	d824      	bhi.n	8002940 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	3b05      	subs	r3, #5
 8002908:	221f      	movs	r2, #31
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43da      	mvns	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	400a      	ands	r2, r1
 8002916:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	4618      	mov	r0, r3
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	3b05      	subs	r3, #5
 8002932:	fa00 f203 	lsl.w	r2, r0, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	635a      	str	r2, [r3, #52]	; 0x34
 800293e:	e04c      	b.n	80029da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b0c      	cmp	r3, #12
 8002946:	d824      	bhi.n	8002992 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	3b23      	subs	r3, #35	; 0x23
 800295a:	221f      	movs	r2, #31
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43da      	mvns	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	400a      	ands	r2, r1
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	b29b      	uxth	r3, r3
 8002976:	4618      	mov	r0, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	3b23      	subs	r3, #35	; 0x23
 8002984:	fa00 f203 	lsl.w	r2, r0, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
 8002990:	e023      	b.n	80029da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	3b41      	subs	r3, #65	; 0x41
 80029a4:	221f      	movs	r2, #31
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43da      	mvns	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	400a      	ands	r2, r1
 80029b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	4618      	mov	r0, r3
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	3b41      	subs	r3, #65	; 0x41
 80029ce:	fa00 f203 	lsl.w	r2, r0, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029da:	4b29      	ldr	r3, [pc, #164]	; (8002a80 <HAL_ADC_ConfigChannel+0x250>)
 80029dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a28      	ldr	r2, [pc, #160]	; (8002a84 <HAL_ADC_ConfigChannel+0x254>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d10f      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x1d8>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b12      	cmp	r3, #18
 80029ee:	d10b      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1d      	ldr	r2, [pc, #116]	; (8002a84 <HAL_ADC_ConfigChannel+0x254>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d12b      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x23a>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a1c      	ldr	r2, [pc, #112]	; (8002a88 <HAL_ADC_ConfigChannel+0x258>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d003      	beq.n	8002a24 <HAL_ADC_ConfigChannel+0x1f4>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b11      	cmp	r3, #17
 8002a22:	d122      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a11      	ldr	r2, [pc, #68]	; (8002a88 <HAL_ADC_ConfigChannel+0x258>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d111      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a46:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <HAL_ADC_ConfigChannel+0x25c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a11      	ldr	r2, [pc, #68]	; (8002a90 <HAL_ADC_ConfigChannel+0x260>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	0c9a      	lsrs	r2, r3, #18
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a5c:	e002      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	3b01      	subs	r3, #1
 8002a62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f9      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	40012300 	.word	0x40012300
 8002a84:	40012000 	.word	0x40012000
 8002a88:	10000012 	.word	0x10000012
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	431bde83 	.word	0x431bde83

08002a94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a9c:	4b79      	ldr	r3, [pc, #484]	; (8002c84 <ADC_Init+0x1f0>)
 8002a9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ac8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	021a      	lsls	r2, r3, #8
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002aec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6859      	ldr	r1, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6899      	ldr	r1, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	4a58      	ldr	r2, [pc, #352]	; (8002c88 <ADC_Init+0x1f4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d022      	beq.n	8002b72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6899      	ldr	r1, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6899      	ldr	r1, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	e00f      	b.n	8002b92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0202 	bic.w	r2, r2, #2
 8002ba0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6899      	ldr	r1, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7e1b      	ldrb	r3, [r3, #24]
 8002bac:	005a      	lsls	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d01b      	beq.n	8002bf8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002bde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6859      	ldr	r1, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	3b01      	subs	r3, #1
 8002bec:	035a      	lsls	r2, r3, #13
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	e007      	b.n	8002c08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	051a      	lsls	r2, r3, #20
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6899      	ldr	r1, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c4a:	025a      	lsls	r2, r3, #9
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6899      	ldr	r1, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	029a      	lsls	r2, r3, #10
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	609a      	str	r2, [r3, #8]
}
 8002c78:	bf00      	nop
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	40012300 	.word	0x40012300
 8002c88:	0f000001 	.word	0x0f000001

08002c8c <__NVIC_SetPriorityGrouping>:
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cbe:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	60d3      	str	r3, [r2, #12]
}
 8002cc4:	bf00      	nop
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <__NVIC_GetPriorityGrouping>:
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd8:	4b04      	ldr	r3, [pc, #16]	; (8002cec <__NVIC_GetPriorityGrouping+0x18>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	0a1b      	lsrs	r3, r3, #8
 8002cde:	f003 0307 	and.w	r3, r3, #7
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <__NVIC_EnableIRQ>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	db0b      	blt.n	8002d1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	f003 021f 	and.w	r2, r3, #31
 8002d08:	4907      	ldr	r1, [pc, #28]	; (8002d28 <__NVIC_EnableIRQ+0x38>)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	2001      	movs	r0, #1
 8002d12:	fa00 f202 	lsl.w	r2, r0, r2
 8002d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000e100 	.word	0xe000e100

08002d2c <__NVIC_SetPriority>:
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	6039      	str	r1, [r7, #0]
 8002d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	db0a      	blt.n	8002d56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	490c      	ldr	r1, [pc, #48]	; (8002d78 <__NVIC_SetPriority+0x4c>)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	0112      	lsls	r2, r2, #4
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d54:	e00a      	b.n	8002d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	4908      	ldr	r1, [pc, #32]	; (8002d7c <__NVIC_SetPriority+0x50>)
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	3b04      	subs	r3, #4
 8002d64:	0112      	lsls	r2, r2, #4
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	440b      	add	r3, r1
 8002d6a:	761a      	strb	r2, [r3, #24]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000e100 	.word	0xe000e100
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <NVIC_EncodePriority>:
{
 8002d80:	b480      	push	{r7}
 8002d82:	b089      	sub	sp, #36	; 0x24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f1c3 0307 	rsb	r3, r3, #7
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	bf28      	it	cs
 8002d9e:	2304      	movcs	r3, #4
 8002da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3304      	adds	r3, #4
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d902      	bls.n	8002db0 <NVIC_EncodePriority+0x30>
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3b03      	subs	r3, #3
 8002dae:	e000      	b.n	8002db2 <NVIC_EncodePriority+0x32>
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	f04f 32ff 	mov.w	r2, #4294967295
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd2:	43d9      	mvns	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd8:	4313      	orrs	r3, r2
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3724      	adds	r7, #36	; 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <SysTick_Config>:
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002df8:	d301      	bcc.n	8002dfe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e00f      	b.n	8002e1e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dfe:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <SysTick_Config+0x40>)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e06:	210f      	movs	r1, #15
 8002e08:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0c:	f7ff ff8e 	bl	8002d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <SysTick_Config+0x40>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e16:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <SysTick_Config+0x40>)
 8002e18:	2207      	movs	r2, #7
 8002e1a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	e000e010 	.word	0xe000e010

08002e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff ff29 	bl	8002c8c <__NVIC_SetPriorityGrouping>
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b086      	sub	sp, #24
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	4603      	mov	r3, r0
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e54:	f7ff ff3e 	bl	8002cd4 <__NVIC_GetPriorityGrouping>
 8002e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	6978      	ldr	r0, [r7, #20]
 8002e60:	f7ff ff8e 	bl	8002d80 <NVIC_EncodePriority>
 8002e64:	4602      	mov	r2, r0
 8002e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff5d 	bl	8002d2c <__NVIC_SetPriority>
}
 8002e72:	bf00      	nop
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff ff31 	bl	8002cf0 <__NVIC_EnableIRQ>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff ffa2 	bl	8002de8 <SysTick_Config>
 8002ea4:	4603      	mov	r3, r0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e014      	b.n	8002eea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	791b      	ldrb	r3, [r3, #4]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d105      	bne.n	8002ed6 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7fe f9c9 	bl	8001268 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b087      	sub	sp, #28
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	795b      	ldrb	r3, [r3, #5]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_DAC_ConfigChannel+0x20>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e036      	b.n	8002f80 <HAL_DAC_ConfigChannel+0x8e>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002f26:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4013      	ands	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6819      	ldr	r1, [r3, #0]
 8002f60:	22c0      	movs	r2, #192	; 0xc0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43da      	mvns	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	400a      	ands	r2, r1
 8002f70:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e0cf      	b.n	800313e <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a69      	ldr	r2, [pc, #420]	; (8003148 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00e      	beq.n	8002fc6 <HAL_DFSDM_ChannelInit+0x3a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a67      	ldr	r2, [pc, #412]	; (800314c <HAL_DFSDM_ChannelInit+0x1c0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d009      	beq.n	8002fc6 <HAL_DFSDM_ChannelInit+0x3a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a66      	ldr	r2, [pc, #408]	; (8003150 <HAL_DFSDM_ChannelInit+0x1c4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d004      	beq.n	8002fc6 <HAL_DFSDM_ChannelInit+0x3a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a64      	ldr	r2, [pc, #400]	; (8003154 <HAL_DFSDM_ChannelInit+0x1c8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d106      	bne.n	8002fd4 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8002fc6:	4b64      	ldr	r3, [pc, #400]	; (8003158 <HAL_DFSDM_ChannelInit+0x1cc>)
 8002fc8:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8002fca:	4b64      	ldr	r3, [pc, #400]	; (800315c <HAL_DFSDM_ChannelInit+0x1d0>)
 8002fcc:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8002fce:	4b5e      	ldr	r3, [pc, #376]	; (8003148 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	e005      	b.n	8002fe0 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8002fd4:	4b62      	ldr	r3, [pc, #392]	; (8003160 <HAL_DFSDM_ChannelInit+0x1d4>)
 8002fd6:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8002fd8:	4b62      	ldr	r3, [pc, #392]	; (8003164 <HAL_DFSDM_ChannelInit+0x1d8>)
 8002fda:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8002fdc:	4b62      	ldr	r3, [pc, #392]	; (8003168 <HAL_DFSDM_ChannelInit+0x1dc>)
 8002fde:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 f9f3 	bl	80033d0 <DFSDM_GetChannelFromInstance>
 8002fea:	4603      	mov	r3, r0
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0a0      	b.n	800313e <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7fe fa3d 	bl	800147c <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d125      	bne.n	8003060 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	431a      	orrs	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	791b      	ldrb	r3, [r3, #4]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d108      	bne.n	8003054 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	3b01      	subs	r3, #1
 800304c:	041b      	lsls	r3, r3, #16
 800304e:	431a      	orrs	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800306e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6819      	ldr	r1, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800307e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8003084:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 020f 	bic.w	r2, r2, #15
 800309c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80030c4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6899      	ldr	r1, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	3b01      	subs	r3, #1
 80030d6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f002 0207 	and.w	r2, r2, #7
 80030f0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6859      	ldr	r1, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003104:	431a      	orrs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800311c:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 f950 	bl	80033d0 <DFSDM_GetChannelFromInstance>
 8003130:	4603      	mov	r3, r0
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4413      	add	r3, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40016000 	.word	0x40016000
 800314c:	40016020 	.word	0x40016020
 8003150:	40016040 	.word	0x40016040
 8003154:	40016060 	.word	0x40016060
 8003158:	200000a8 	.word	0x200000a8
 800315c:	200000ac 	.word	0x200000ac
 8003160:	200000bc 	.word	0x200000bc
 8003164:	200000c0 	.word	0x200000c0
 8003168:	40016400 	.word	0x40016400

0800316c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e0d9      	b.n	8003332 <HAL_DFSDM_FilterInit+0x1c6>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a6e      	ldr	r2, [pc, #440]	; (800333c <HAL_DFSDM_FilterInit+0x1d0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d109      	bne.n	800319c <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 800318c:	2b01      	cmp	r3, #1
 800318e:	d003      	beq.n	8003198 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0ca      	b.n	8003332 <HAL_DFSDM_FilterInit+0x1c6>
  }
#if defined (DFSDM2_Channel0)  
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a67      	ldr	r2, [pc, #412]	; (8003340 <HAL_DFSDM_FilterInit+0x1d4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d109      	bne.n	80031ba <HAL_DFSDM_FilterInit+0x4e>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d003      	beq.n	80031b6 <HAL_DFSDM_FilterInit+0x4a>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_DFSDM_FilterInit+0x4e>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e0bb      	b.n	8003332 <HAL_DFSDM_FilterInit+0x1c6>
  }  
#endif /* DFSDM2_Channel0 */
       
  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1U;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1U;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fe f88c 	bl	80012f0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80031e6:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	7a1b      	ldrb	r3, [r3, #8]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d108      	bne.n	8003202 <HAL_DFSDM_FilterInit+0x96>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	e007      	b.n	8003212 <HAL_DFSDM_FilterInit+0xa6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003210:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	7a5b      	ldrb	r3, [r3, #9]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d108      	bne.n	800322c <HAL_DFSDM_FilterInit+0xc0>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e007      	b.n	800323c <HAL_DFSDM_FilterInit+0xd0>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800323a:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 800324a:	f023 0308 	bic.w	r3, r3, #8
 800324e:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d108      	bne.n	800326a <HAL_DFSDM_FilterInit+0xfe>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6819      	ldr	r1, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	7c1b      	ldrb	r3, [r3, #16]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d108      	bne.n	8003284 <HAL_DFSDM_FilterInit+0x118>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 0210 	orr.w	r2, r2, #16
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	e007      	b.n	8003294 <HAL_DFSDM_FilterInit+0x128>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0210 	bic.w	r2, r2, #16
 8003292:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	7c5b      	ldrb	r3, [r3, #17]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d108      	bne.n	80032ae <HAL_DFSDM_FilterInit+0x142>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0220 	orr.w	r2, r2, #32
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	e007      	b.n	80032be <HAL_DFSDM_FilterInit+0x152>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0220 	bic.w	r2, r2, #32
 80032bc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80032cc:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80032d0:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6959      	ldr	r1, [r3, #20]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80032e4:	431a      	orrs	r2, r3
                                     (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80032ec:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	7c1a      	ldrb	r2, [r3, #16]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40016100 	.word	0x40016100
 8003340:	40016500 	.word	0x40016500

08003344 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d02e      	beq.n	80033bc <HAL_DFSDM_FilterConfigRegChannel+0x78>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8003364:	2bff      	cmp	r3, #255	; 0xff
 8003366:	d029      	beq.n	80033bc <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	6812      	ldr	r2, [r2, #0]
 8003372:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800337a:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d10d      	bne.n	800339e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	021b      	lsls	r3, r3, #8
 800338c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003390:	431a      	orrs	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	e00a      	b.n	80033b4 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6819      	ldr	r1, [r3, #0]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	631a      	str	r2, [r3, #48]	; 0x30
 80033ba:	e001      	b.n	80033c0 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }  
  else
  {
    status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
	...

080033d0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a24      	ldr	r2, [pc, #144]	; (800346c <DFSDM_GetChannelFromInstance+0x9c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d003      	beq.n	80033e8 <DFSDM_GetChannelFromInstance+0x18>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a23      	ldr	r2, [pc, #140]	; (8003470 <DFSDM_GetChannelFromInstance+0xa0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d102      	bne.n	80033ee <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	e037      	b.n	800345e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a20      	ldr	r2, [pc, #128]	; (8003474 <DFSDM_GetChannelFromInstance+0xa4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d003      	beq.n	80033fe <DFSDM_GetChannelFromInstance+0x2e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a1f      	ldr	r2, [pc, #124]	; (8003478 <DFSDM_GetChannelFromInstance+0xa8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d102      	bne.n	8003404 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 80033fe:	2301      	movs	r3, #1
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	e02c      	b.n	800345e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a1d      	ldr	r2, [pc, #116]	; (800347c <DFSDM_GetChannelFromInstance+0xac>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d003      	beq.n	8003414 <DFSDM_GetChannelFromInstance+0x44>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a1c      	ldr	r2, [pc, #112]	; (8003480 <DFSDM_GetChannelFromInstance+0xb0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d102      	bne.n	800341a <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8003414:	2302      	movs	r3, #2
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e021      	b.n	800345e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a19      	ldr	r2, [pc, #100]	; (8003484 <DFSDM_GetChannelFromInstance+0xb4>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d003      	beq.n	800342a <DFSDM_GetChannelFromInstance+0x5a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a18      	ldr	r2, [pc, #96]	; (8003488 <DFSDM_GetChannelFromInstance+0xb8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d102      	bne.n	8003430 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 800342a:	2303      	movs	r3, #3
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	e016      	b.n	800345e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a16      	ldr	r2, [pc, #88]	; (800348c <DFSDM_GetChannelFromInstance+0xbc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d102      	bne.n	800343e <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8003438:	2304      	movs	r3, #4
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	e00f      	b.n	800345e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a13      	ldr	r2, [pc, #76]	; (8003490 <DFSDM_GetChannelFromInstance+0xc0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d102      	bne.n	800344c <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8003446:	2305      	movs	r3, #5
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	e008      	b.n	800345e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a11      	ldr	r2, [pc, #68]	; (8003494 <DFSDM_GetChannelFromInstance+0xc4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d102      	bne.n	800345a <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8003454:	2306      	movs	r3, #6
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e001      	b.n	800345e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 800345a:	2307      	movs	r3, #7
 800345c:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 800345e:	68fb      	ldr	r3, [r7, #12]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	40016000 	.word	0x40016000
 8003470:	40016400 	.word	0x40016400
 8003474:	40016020 	.word	0x40016020
 8003478:	40016420 	.word	0x40016420
 800347c:	40016040 	.word	0x40016040
 8003480:	40016440 	.word	0x40016440
 8003484:	40016060 	.word	0x40016060
 8003488:	40016460 	.word	0x40016460
 800348c:	40016480 	.word	0x40016480
 8003490:	400164a0 	.word	0x400164a0
 8003494:	400164c0 	.word	0x400164c0

08003498 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034a4:	f7ff f952 	bl	800274c <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e099      	b.n	80035e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034d4:	e00f      	b.n	80034f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034d6:	f7ff f939 	bl	800274c <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b05      	cmp	r3, #5
 80034e2:	d908      	bls.n	80034f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2203      	movs	r2, #3
 80034ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e078      	b.n	80035e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1e8      	bne.n	80034d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	4b38      	ldr	r3, [pc, #224]	; (80035f0 <HAL_DMA_Init+0x158>)
 8003510:	4013      	ands	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003522:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800352e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800353a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	2b04      	cmp	r3, #4
 800354e:	d107      	bne.n	8003560 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	4313      	orrs	r3, r2
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f023 0307 	bic.w	r3, r3, #7
 8003576:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	2b04      	cmp	r3, #4
 8003588:	d117      	bne.n	80035ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00e      	beq.n	80035ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f9e9 	bl	8003974 <DMA_CheckFifoParam>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2240      	movs	r2, #64	; 0x40
 80035ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035b6:	2301      	movs	r3, #1
 80035b8:	e016      	b.n	80035e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f9a0 	bl	8003908 <DMA_CalcBaseAndBitshift>
 80035c8:	4603      	mov	r3, r0
 80035ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	223f      	movs	r2, #63	; 0x3f
 80035d2:	409a      	lsls	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	e010803f 	.word	0xe010803f

080035f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003600:	4b92      	ldr	r3, [pc, #584]	; (800384c <HAL_DMA_IRQHandler+0x258>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a92      	ldr	r2, [pc, #584]	; (8003850 <HAL_DMA_IRQHandler+0x25c>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	0a9b      	lsrs	r3, r3, #10
 800360c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003612:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361e:	2208      	movs	r2, #8
 8003620:	409a      	lsls	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d01a      	beq.n	8003660 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0204 	bic.w	r2, r2, #4
 8003646:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364c:	2208      	movs	r2, #8
 800364e:	409a      	lsls	r2, r3
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003658:	f043 0201 	orr.w	r2, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003664:	2201      	movs	r2, #1
 8003666:	409a      	lsls	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d012      	beq.n	8003696 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003682:	2201      	movs	r2, #1
 8003684:	409a      	lsls	r2, r3
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	f043 0202 	orr.w	r2, r3, #2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369a:	2204      	movs	r2, #4
 800369c:	409a      	lsls	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d012      	beq.n	80036cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00b      	beq.n	80036cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b8:	2204      	movs	r2, #4
 80036ba:	409a      	lsls	r2, r3
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c4:	f043 0204 	orr.w	r2, r3, #4
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d0:	2210      	movs	r2, #16
 80036d2:	409a      	lsls	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d043      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d03c      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ee:	2210      	movs	r2, #16
 80036f0:	409a      	lsls	r2, r3
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d018      	beq.n	8003736 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d108      	bne.n	8003724 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d024      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	4798      	blx	r3
 8003722:	e01f      	b.n	8003764 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01b      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
 8003734:	e016      	b.n	8003764 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d107      	bne.n	8003754 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0208 	bic.w	r2, r2, #8
 8003752:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003768:	2220      	movs	r2, #32
 800376a:	409a      	lsls	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 808e 	beq.w	8003892 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8086 	beq.w	8003892 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378a:	2220      	movs	r2, #32
 800378c:	409a      	lsls	r2, r3
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b05      	cmp	r3, #5
 800379c:	d136      	bne.n	800380c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0216 	bic.w	r2, r2, #22
 80037ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d103      	bne.n	80037ce <HAL_DMA_IRQHandler+0x1da>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0208 	bic.w	r2, r2, #8
 80037dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e2:	223f      	movs	r2, #63	; 0x3f
 80037e4:	409a      	lsls	r2, r3
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d07d      	beq.n	80038fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	4798      	blx	r3
        }
        return;
 800380a:	e078      	b.n	80038fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01c      	beq.n	8003854 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d108      	bne.n	800383a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382c:	2b00      	cmp	r3, #0
 800382e:	d030      	beq.n	8003892 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4798      	blx	r3
 8003838:	e02b      	b.n	8003892 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	2b00      	cmp	r3, #0
 8003840:	d027      	beq.n	8003892 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	4798      	blx	r3
 800384a:	e022      	b.n	8003892 <HAL_DMA_IRQHandler+0x29e>
 800384c:	20000000 	.word	0x20000000
 8003850:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10f      	bne.n	8003882 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0210 	bic.w	r2, r2, #16
 8003870:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	2b00      	cmp	r3, #0
 8003898:	d032      	beq.n	8003900 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d022      	beq.n	80038ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2205      	movs	r2, #5
 80038aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	3301      	adds	r3, #1
 80038c2:	60bb      	str	r3, [r7, #8]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d307      	bcc.n	80038da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1f2      	bne.n	80038be <HAL_DMA_IRQHandler+0x2ca>
 80038d8:	e000      	b.n	80038dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80038da:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4798      	blx	r3
 80038fc:	e000      	b.n	8003900 <HAL_DMA_IRQHandler+0x30c>
        return;
 80038fe:	bf00      	nop
    }
  }
}
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop

08003908 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	3b10      	subs	r3, #16
 8003918:	4a14      	ldr	r2, [pc, #80]	; (800396c <DMA_CalcBaseAndBitshift+0x64>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003922:	4a13      	ldr	r2, [pc, #76]	; (8003970 <DMA_CalcBaseAndBitshift+0x68>)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4413      	add	r3, r2
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2b03      	cmp	r3, #3
 8003934:	d909      	bls.n	800394a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800393e:	f023 0303 	bic.w	r3, r3, #3
 8003942:	1d1a      	adds	r2, r3, #4
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	659a      	str	r2, [r3, #88]	; 0x58
 8003948:	e007      	b.n	800395a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003952:	f023 0303 	bic.w	r3, r3, #3
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	aaaaaaab 	.word	0xaaaaaaab
 8003970:	08009008 	.word	0x08009008

08003974 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003984:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d11f      	bne.n	80039ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b03      	cmp	r3, #3
 8003992:	d855      	bhi.n	8003a40 <DMA_CheckFifoParam+0xcc>
 8003994:	a201      	add	r2, pc, #4	; (adr r2, 800399c <DMA_CheckFifoParam+0x28>)
 8003996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399a:	bf00      	nop
 800399c:	080039ad 	.word	0x080039ad
 80039a0:	080039bf 	.word	0x080039bf
 80039a4:	080039ad 	.word	0x080039ad
 80039a8:	08003a41 	.word	0x08003a41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d045      	beq.n	8003a44 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039bc:	e042      	b.n	8003a44 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039c6:	d13f      	bne.n	8003a48 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039cc:	e03c      	b.n	8003a48 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d6:	d121      	bne.n	8003a1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d836      	bhi.n	8003a4c <DMA_CheckFifoParam+0xd8>
 80039de:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <DMA_CheckFifoParam+0x70>)
 80039e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e4:	080039f5 	.word	0x080039f5
 80039e8:	080039fb 	.word	0x080039fb
 80039ec:	080039f5 	.word	0x080039f5
 80039f0:	08003a0d 	.word	0x08003a0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
      break;
 80039f8:	e02f      	b.n	8003a5a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d024      	beq.n	8003a50 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a0a:	e021      	b.n	8003a50 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a14:	d11e      	bne.n	8003a54 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a1a:	e01b      	b.n	8003a54 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d902      	bls.n	8003a28 <DMA_CheckFifoParam+0xb4>
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d003      	beq.n	8003a2e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a26:	e018      	b.n	8003a5a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a2c:	e015      	b.n	8003a5a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00e      	beq.n	8003a58 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8003a3e:	e00b      	b.n	8003a58 <DMA_CheckFifoParam+0xe4>
      break;
 8003a40:	bf00      	nop
 8003a42:	e00a      	b.n	8003a5a <DMA_CheckFifoParam+0xe6>
      break;
 8003a44:	bf00      	nop
 8003a46:	e008      	b.n	8003a5a <DMA_CheckFifoParam+0xe6>
      break;
 8003a48:	bf00      	nop
 8003a4a:	e006      	b.n	8003a5a <DMA_CheckFifoParam+0xe6>
      break;
 8003a4c:	bf00      	nop
 8003a4e:	e004      	b.n	8003a5a <DMA_CheckFifoParam+0xe6>
      break;
 8003a50:	bf00      	nop
 8003a52:	e002      	b.n	8003a5a <DMA_CheckFifoParam+0xe6>
      break;   
 8003a54:	bf00      	nop
 8003a56:	e000      	b.n	8003a5a <DMA_CheckFifoParam+0xe6>
      break;
 8003a58:	bf00      	nop
    }
  } 
  
  return status; 
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e081      	b.n	8003b7e <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fd fd88 	bl	80015a4 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2224      	movs	r2, #36	; 0x24
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ab8:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ac8:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d107      	bne.n	8003ae2 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	e006      	b.n	8003af0 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003aee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d104      	bne.n	8003b02 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b14:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b24:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	ea42 0103 	orr.w	r1, r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	021a      	lsls	r2, r3, #8
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	69d9      	ldr	r1, [r3, #28]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1a      	ldr	r2, [r3, #32]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b20      	cmp	r3, #32
 8003b9a:	d138      	bne.n	8003c0e <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e032      	b.n	8003c10 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2224      	movs	r2, #36	; 0x24
 8003bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0201 	bic.w	r2, r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bd8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6819      	ldr	r1, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0201 	orr.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e000      	b.n	8003c10 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c0e:	2302      	movs	r3, #2
  }
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b089      	sub	sp, #36	; 0x24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	e165      	b.n	8003f04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c38:	2201      	movs	r2, #1
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	f040 8154 	bne.w	8003efe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d00b      	beq.n	8003c76 <HAL_GPIO_Init+0x5a>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d007      	beq.n	8003c76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c6a:	2b11      	cmp	r3, #17
 8003c6c:	d003      	beq.n	8003c76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b12      	cmp	r3, #18
 8003c74:	d130      	bne.n	8003cd8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	2203      	movs	r2, #3
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cac:	2201      	movs	r2, #1
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	091b      	lsrs	r3, r3, #4
 8003cc2:	f003 0201 	and.w	r2, r3, #1
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d003      	beq.n	8003d18 <HAL_GPIO_Init+0xfc>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b12      	cmp	r3, #18
 8003d16:	d123      	bne.n	8003d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	08da      	lsrs	r2, r3, #3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3208      	adds	r2, #8
 8003d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	220f      	movs	r2, #15
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	08da      	lsrs	r2, r3, #3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3208      	adds	r2, #8
 8003d5a:	69b9      	ldr	r1, [r7, #24]
 8003d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 0203 	and.w	r2, r3, #3
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 80ae 	beq.w	8003efe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	4b5c      	ldr	r3, [pc, #368]	; (8003f18 <HAL_GPIO_Init+0x2fc>)
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	4a5b      	ldr	r2, [pc, #364]	; (8003f18 <HAL_GPIO_Init+0x2fc>)
 8003dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003db0:	6453      	str	r3, [r2, #68]	; 0x44
 8003db2:	4b59      	ldr	r3, [pc, #356]	; (8003f18 <HAL_GPIO_Init+0x2fc>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dbe:	4a57      	ldr	r2, [pc, #348]	; (8003f1c <HAL_GPIO_Init+0x300>)
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	089b      	lsrs	r3, r3, #2
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	220f      	movs	r2, #15
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a4e      	ldr	r2, [pc, #312]	; (8003f20 <HAL_GPIO_Init+0x304>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d025      	beq.n	8003e36 <HAL_GPIO_Init+0x21a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a4d      	ldr	r2, [pc, #308]	; (8003f24 <HAL_GPIO_Init+0x308>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d01f      	beq.n	8003e32 <HAL_GPIO_Init+0x216>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a4c      	ldr	r2, [pc, #304]	; (8003f28 <HAL_GPIO_Init+0x30c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d019      	beq.n	8003e2e <HAL_GPIO_Init+0x212>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a4b      	ldr	r2, [pc, #300]	; (8003f2c <HAL_GPIO_Init+0x310>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d013      	beq.n	8003e2a <HAL_GPIO_Init+0x20e>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a4a      	ldr	r2, [pc, #296]	; (8003f30 <HAL_GPIO_Init+0x314>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00d      	beq.n	8003e26 <HAL_GPIO_Init+0x20a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a49      	ldr	r2, [pc, #292]	; (8003f34 <HAL_GPIO_Init+0x318>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d007      	beq.n	8003e22 <HAL_GPIO_Init+0x206>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a48      	ldr	r2, [pc, #288]	; (8003f38 <HAL_GPIO_Init+0x31c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d101      	bne.n	8003e1e <HAL_GPIO_Init+0x202>
 8003e1a:	2306      	movs	r3, #6
 8003e1c:	e00c      	b.n	8003e38 <HAL_GPIO_Init+0x21c>
 8003e1e:	2307      	movs	r3, #7
 8003e20:	e00a      	b.n	8003e38 <HAL_GPIO_Init+0x21c>
 8003e22:	2305      	movs	r3, #5
 8003e24:	e008      	b.n	8003e38 <HAL_GPIO_Init+0x21c>
 8003e26:	2304      	movs	r3, #4
 8003e28:	e006      	b.n	8003e38 <HAL_GPIO_Init+0x21c>
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e004      	b.n	8003e38 <HAL_GPIO_Init+0x21c>
 8003e2e:	2302      	movs	r3, #2
 8003e30:	e002      	b.n	8003e38 <HAL_GPIO_Init+0x21c>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <HAL_GPIO_Init+0x21c>
 8003e36:	2300      	movs	r3, #0
 8003e38:	69fa      	ldr	r2, [r7, #28]
 8003e3a:	f002 0203 	and.w	r2, r2, #3
 8003e3e:	0092      	lsls	r2, r2, #2
 8003e40:	4093      	lsls	r3, r2
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e48:	4934      	ldr	r1, [pc, #208]	; (8003f1c <HAL_GPIO_Init+0x300>)
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	089b      	lsrs	r3, r3, #2
 8003e4e:	3302      	adds	r3, #2
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e56:	4b39      	ldr	r3, [pc, #228]	; (8003f3c <HAL_GPIO_Init+0x320>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4013      	ands	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e7a:	4a30      	ldr	r2, [pc, #192]	; (8003f3c <HAL_GPIO_Init+0x320>)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e80:	4b2e      	ldr	r3, [pc, #184]	; (8003f3c <HAL_GPIO_Init+0x320>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ea4:	4a25      	ldr	r2, [pc, #148]	; (8003f3c <HAL_GPIO_Init+0x320>)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eaa:	4b24      	ldr	r3, [pc, #144]	; (8003f3c <HAL_GPIO_Init+0x320>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ece:	4a1b      	ldr	r2, [pc, #108]	; (8003f3c <HAL_GPIO_Init+0x320>)
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ed4:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <HAL_GPIO_Init+0x320>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	43db      	mvns	r3, r3
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ef8:	4a10      	ldr	r2, [pc, #64]	; (8003f3c <HAL_GPIO_Init+0x320>)
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	3301      	adds	r3, #1
 8003f02:	61fb      	str	r3, [r7, #28]
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	2b0f      	cmp	r3, #15
 8003f08:	f67f ae96 	bls.w	8003c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	3724      	adds	r7, #36	; 0x24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	40013800 	.word	0x40013800
 8003f20:	40020000 	.word	0x40020000
 8003f24:	40020400 	.word	0x40020400
 8003f28:	40020800 	.word	0x40020800
 8003f2c:	40020c00 	.word	0x40020c00
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40021400 	.word	0x40021400
 8003f38:	40021800 	.word	0x40021800
 8003f3c:	40013c00 	.word	0x40013c00

08003f40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	887b      	ldrh	r3, [r7, #2]
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
 8003f5c:	e001      	b.n	8003f62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	807b      	strh	r3, [r7, #2]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f80:	787b      	ldrb	r3, [r7, #1]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f86:	887a      	ldrh	r2, [r7, #2]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f8c:	e003      	b.n	8003f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f8e:	887b      	ldrh	r3, [r7, #2]
 8003f90:	041a      	lsls	r2, r3, #16
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	619a      	str	r2, [r3, #24]
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003fac:	f7fe fbce 	bl	800274c <HAL_GetTick>
 8003fb0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e069      	b.n	8004090 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10b      	bne.n	8003fe0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7fd fb2f 	bl	8001634 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003fd6:	f241 3188 	movw	r1, #5000	; 0x1388
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f85e 	bl	800409c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	021a      	lsls	r2, r3, #8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	2120      	movs	r1, #32
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f856 	bl	80040b8 <QSPI_WaitFlagStateUntilTimeout>
 800400c:	4603      	mov	r3, r0
 800400e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004010:	7afb      	ldrb	r3, [r7, #11]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d137      	bne.n	8004086 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004020:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6852      	ldr	r2, [r2, #4]
 8004028:	0611      	lsls	r1, r2, #24
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	68d2      	ldr	r2, [r2, #12]
 800402e:	4311      	orrs	r1, r2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	69d2      	ldr	r2, [r2, #28]
 8004034:	4311      	orrs	r1, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6a12      	ldr	r2, [r2, #32]
 800403a:	4311      	orrs	r1, r2
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	430b      	orrs	r3, r1
 8004042:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	4b13      	ldr	r3, [pc, #76]	; (8004098 <HAL_QSPI_Init+0xf4>)
 800404c:	4013      	ands	r3, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6912      	ldr	r2, [r2, #16]
 8004052:	0411      	lsls	r1, r2, #16
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6952      	ldr	r2, [r2, #20]
 8004058:	4311      	orrs	r1, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6992      	ldr	r2, [r2, #24]
 800405e:	4311      	orrs	r1, r2
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	430b      	orrs	r3, r1
 8004066:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800408e:	7afb      	ldrb	r3, [r7, #11]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	ffe0f8fe 	.word	0xffe0f8fe

0800409c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	649a      	str	r2, [r3, #72]	; 0x48
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	4613      	mov	r3, r2
 80040c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80040c8:	e01a      	b.n	8004100 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d0:	d016      	beq.n	8004100 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d2:	f7fe fb3b 	bl	800274c <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d302      	bcc.n	80040e8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2204      	movs	r2, #4
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f4:	f043 0201 	orr.w	r2, r3, #1
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e00e      	b.n	800411e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	4013      	ands	r3, r2
 800410a:	2b00      	cmp	r3, #0
 800410c:	bf14      	ite	ne
 800410e:	2301      	movne	r3, #1
 8004110:	2300      	moveq	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	79fb      	ldrb	r3, [r7, #7]
 8004118:	429a      	cmp	r2, r3
 800411a:	d1d6      	bne.n	80040ca <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0cc      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800413c:	4b68      	ldr	r3, [pc, #416]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d90c      	bls.n	8004164 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414a:	4b65      	ldr	r3, [pc, #404]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004152:	4b63      	ldr	r3, [pc, #396]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0b8      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d020      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800417c:	4b59      	ldr	r3, [pc, #356]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	4a58      	ldr	r2, [pc, #352]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004186:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004194:	4b53      	ldr	r3, [pc, #332]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4a52      	ldr	r2, [pc, #328]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800419e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a0:	4b50      	ldr	r3, [pc, #320]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	494d      	ldr	r1, [pc, #308]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d044      	beq.n	8004248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d107      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c6:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d119      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e07f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d003      	beq.n	80041e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d107      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e6:	4b3f      	ldr	r3, [pc, #252]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e06f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f6:	4b3b      	ldr	r3, [pc, #236]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e067      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004206:	4b37      	ldr	r3, [pc, #220]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f023 0203 	bic.w	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4934      	ldr	r1, [pc, #208]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	4313      	orrs	r3, r2
 8004216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004218:	f7fe fa98 	bl	800274c <HAL_GetTick>
 800421c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421e:	e00a      	b.n	8004236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004220:	f7fe fa94 	bl	800274c <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	f241 3288 	movw	r2, #5000	; 0x1388
 800422e:	4293      	cmp	r3, r2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e04f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004236:	4b2b      	ldr	r3, [pc, #172]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 020c 	and.w	r2, r3, #12
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	429a      	cmp	r2, r3
 8004246:	d1eb      	bne.n	8004220 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004248:	4b25      	ldr	r3, [pc, #148]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d20c      	bcs.n	8004270 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e032      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800427c:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4916      	ldr	r1, [pc, #88]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	4313      	orrs	r3, r2
 800428c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d009      	beq.n	80042ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800429a:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	490e      	ldr	r1, [pc, #56]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042ae:	f000 f821 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 80042b2:	4601      	mov	r1, r0
 80042b4:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	4a0a      	ldr	r2, [pc, #40]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 80042c0:	5cd3      	ldrb	r3, [r2, r3]
 80042c2:	fa21 f303 	lsr.w	r3, r1, r3
 80042c6:	4a09      	ldr	r2, [pc, #36]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80042c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fe f9f8 	bl	80026c4 <HAL_InitTick>

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40023c00 	.word	0x40023c00
 80042e4:	40023800 	.word	0x40023800
 80042e8:	08008ff0 	.word	0x08008ff0
 80042ec:	20000000 	.word	0x20000000
 80042f0:	20000004 	.word	0x20000004

080042f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	607b      	str	r3, [r7, #4]
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	2300      	movs	r3, #0
 8004304:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800430a:	4b50      	ldr	r3, [pc, #320]	; (800444c <HAL_RCC_GetSysClockFreq+0x158>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 030c 	and.w	r3, r3, #12
 8004312:	2b04      	cmp	r3, #4
 8004314:	d007      	beq.n	8004326 <HAL_RCC_GetSysClockFreq+0x32>
 8004316:	2b08      	cmp	r3, #8
 8004318:	d008      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x38>
 800431a:	2b00      	cmp	r3, #0
 800431c:	f040 808d 	bne.w	800443a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004320:	4b4b      	ldr	r3, [pc, #300]	; (8004450 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004322:	60bb      	str	r3, [r7, #8]
       break;
 8004324:	e08c      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004326:	4b4b      	ldr	r3, [pc, #300]	; (8004454 <HAL_RCC_GetSysClockFreq+0x160>)
 8004328:	60bb      	str	r3, [r7, #8]
      break;
 800432a:	e089      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800432c:	4b47      	ldr	r3, [pc, #284]	; (800444c <HAL_RCC_GetSysClockFreq+0x158>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004334:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004336:	4b45      	ldr	r3, [pc, #276]	; (800444c <HAL_RCC_GetSysClockFreq+0x158>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d023      	beq.n	800438a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004342:	4b42      	ldr	r3, [pc, #264]	; (800444c <HAL_RCC_GetSysClockFreq+0x158>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	099b      	lsrs	r3, r3, #6
 8004348:	f04f 0400 	mov.w	r4, #0
 800434c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	ea03 0501 	and.w	r5, r3, r1
 8004358:	ea04 0602 	and.w	r6, r4, r2
 800435c:	4a3d      	ldr	r2, [pc, #244]	; (8004454 <HAL_RCC_GetSysClockFreq+0x160>)
 800435e:	fb02 f106 	mul.w	r1, r2, r6
 8004362:	2200      	movs	r2, #0
 8004364:	fb02 f205 	mul.w	r2, r2, r5
 8004368:	440a      	add	r2, r1
 800436a:	493a      	ldr	r1, [pc, #232]	; (8004454 <HAL_RCC_GetSysClockFreq+0x160>)
 800436c:	fba5 0101 	umull	r0, r1, r5, r1
 8004370:	1853      	adds	r3, r2, r1
 8004372:	4619      	mov	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f04f 0400 	mov.w	r4, #0
 800437a:	461a      	mov	r2, r3
 800437c:	4623      	mov	r3, r4
 800437e:	f7fb ffa7 	bl	80002d0 <__aeabi_uldivmod>
 8004382:	4603      	mov	r3, r0
 8004384:	460c      	mov	r4, r1
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	e049      	b.n	800441e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438a:	4b30      	ldr	r3, [pc, #192]	; (800444c <HAL_RCC_GetSysClockFreq+0x158>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	099b      	lsrs	r3, r3, #6
 8004390:	f04f 0400 	mov.w	r4, #0
 8004394:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	ea03 0501 	and.w	r5, r3, r1
 80043a0:	ea04 0602 	and.w	r6, r4, r2
 80043a4:	4629      	mov	r1, r5
 80043a6:	4632      	mov	r2, r6
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	f04f 0400 	mov.w	r4, #0
 80043b0:	0154      	lsls	r4, r2, #5
 80043b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043b6:	014b      	lsls	r3, r1, #5
 80043b8:	4619      	mov	r1, r3
 80043ba:	4622      	mov	r2, r4
 80043bc:	1b49      	subs	r1, r1, r5
 80043be:	eb62 0206 	sbc.w	r2, r2, r6
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	f04f 0400 	mov.w	r4, #0
 80043ca:	0194      	lsls	r4, r2, #6
 80043cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043d0:	018b      	lsls	r3, r1, #6
 80043d2:	1a5b      	subs	r3, r3, r1
 80043d4:	eb64 0402 	sbc.w	r4, r4, r2
 80043d8:	f04f 0100 	mov.w	r1, #0
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	00e2      	lsls	r2, r4, #3
 80043e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043e6:	00d9      	lsls	r1, r3, #3
 80043e8:	460b      	mov	r3, r1
 80043ea:	4614      	mov	r4, r2
 80043ec:	195b      	adds	r3, r3, r5
 80043ee:	eb44 0406 	adc.w	r4, r4, r6
 80043f2:	f04f 0100 	mov.w	r1, #0
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	02a2      	lsls	r2, r4, #10
 80043fc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004400:	0299      	lsls	r1, r3, #10
 8004402:	460b      	mov	r3, r1
 8004404:	4614      	mov	r4, r2
 8004406:	4618      	mov	r0, r3
 8004408:	4621      	mov	r1, r4
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f04f 0400 	mov.w	r4, #0
 8004410:	461a      	mov	r2, r3
 8004412:	4623      	mov	r3, r4
 8004414:	f7fb ff5c 	bl	80002d0 <__aeabi_uldivmod>
 8004418:	4603      	mov	r3, r0
 800441a:	460c      	mov	r4, r1
 800441c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800441e:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCC_GetSysClockFreq+0x158>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	0c1b      	lsrs	r3, r3, #16
 8004424:	f003 0303 	and.w	r3, r3, #3
 8004428:	3301      	adds	r3, #1
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	fbb2 f3f3 	udiv	r3, r2, r3
 8004436:	60bb      	str	r3, [r7, #8]
      break;
 8004438:	e002      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_RCC_GetSysClockFreq+0x15c>)
 800443c:	60bb      	str	r3, [r7, #8]
      break;
 800443e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004440:	68bb      	ldr	r3, [r7, #8]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800
 8004450:	00f42400 	.word	0x00f42400
 8004454:	017d7840 	.word	0x017d7840

08004458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800445c:	4b03      	ldr	r3, [pc, #12]	; (800446c <HAL_RCC_GetHCLKFreq+0x14>)
 800445e:	681b      	ldr	r3, [r3, #0]
}
 8004460:	4618      	mov	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	20000000 	.word	0x20000000

08004470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004474:	f7ff fff0 	bl	8004458 <HAL_RCC_GetHCLKFreq>
 8004478:	4601      	mov	r1, r0
 800447a:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	0a9b      	lsrs	r3, r3, #10
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	4a03      	ldr	r2, [pc, #12]	; (8004494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004486:	5cd3      	ldrb	r3, [r2, r3]
 8004488:	fa21 f303 	lsr.w	r3, r1, r3
}
 800448c:	4618      	mov	r0, r3
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40023800 	.word	0x40023800
 8004494:	08009000 	.word	0x08009000

08004498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800449c:	f7ff ffdc 	bl	8004458 <HAL_RCC_GetHCLKFreq>
 80044a0:	4601      	mov	r1, r0
 80044a2:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	0b5b      	lsrs	r3, r3, #13
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	4a03      	ldr	r2, [pc, #12]	; (80044bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ae:	5cd3      	ldrb	r3, [r2, r3]
 80044b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40023800 	.word	0x40023800
 80044bc:	08009000 	.word	0x08009000

080044c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d010      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80044e4:	4b7a      	ldr	r3, [pc, #488]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80044e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ea:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	4977      	ldr	r1, [pc, #476]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8004502:	2301      	movs	r3, #1
 8004504:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d010      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004512:	4b6f      	ldr	r3, [pc, #444]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004518:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	496b      	ldr	r1, [pc, #428]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8004530:	2301      	movs	r3, #1
 8004532:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d022      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8004540:	4b63      	ldr	r3, [pc, #396]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004546:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800454e:	4960      	ldr	r1, [pc, #384]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 800455e:	2301      	movs	r3, #1
 8004560:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004566:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800456a:	d10c      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800456c:	4b58      	ldr	r3, [pc, #352]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800456e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004572:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	3b01      	subs	r3, #1
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	4954      	ldr	r1, [pc, #336]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d022      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8004592:	4b4f      	ldr	r3, [pc, #316]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004598:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a0:	494b      	ldr	r1, [pc, #300]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80045b0:	2301      	movs	r3, #1
 80045b2:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045bc:	d10c      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80045be:	4b44      	ldr	r3, [pc, #272]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80045c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	493f      	ldr	r1, [pc, #252]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 808a 	beq.w	80046fa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	4b39      	ldr	r3, [pc, #228]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	4a38      	ldr	r2, [pc, #224]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80045f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f4:	6413      	str	r3, [r2, #64]	; 0x40
 80045f6:	4b36      	ldr	r3, [pc, #216]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004602:	4b34      	ldr	r3, [pc, #208]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a33      	ldr	r2, [pc, #204]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800460e:	f7fe f89d 	bl	800274c <HAL_GetTick>
 8004612:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004614:	e008      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004616:	f7fe f899 	bl	800274c <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e1d1      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004628:	4b2a      	ldr	r3, [pc, #168]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004634:	4b26      	ldr	r3, [pc, #152]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463c:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d02f      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	429a      	cmp	r2, r3
 8004650:	d028      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004652:	4b1f      	ldr	r3, [pc, #124]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800465c:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800465e:	2201      	movs	r2, #1
 8004660:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004662:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004668:	4a19      	ldr	r2, [pc, #100]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800466e:	4b18      	ldr	r3, [pc, #96]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b01      	cmp	r3, #1
 8004678:	d114      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800467a:	f7fe f867 	bl	800274c <HAL_GetTick>
 800467e:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004680:	e00a      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004682:	f7fe f863 	bl	800274c <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004690:	4293      	cmp	r3, r2
 8004692:	d901      	bls.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e199      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004698:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800469a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0ee      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046b0:	d114      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80046b2:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80046c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c6:	4902      	ldr	r1, [pc, #8]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	608b      	str	r3, [r1, #8]
 80046cc:	e00c      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80046ce:	bf00      	nop
 80046d0:	40023800 	.word	0x40023800
 80046d4:	40007000 	.word	0x40007000
 80046d8:	42470e40 	.word	0x42470e40
 80046dc:	4b89      	ldr	r3, [pc, #548]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	4a88      	ldr	r2, [pc, #544]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80046e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046e6:	6093      	str	r3, [r2, #8]
 80046e8:	4b86      	ldr	r3, [pc, #536]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80046ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f4:	4983      	ldr	r1, [pc, #524]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	d004      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800470c:	4b7e      	ldr	r3, [pc, #504]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800470e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00a      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800471c:	4b79      	ldr	r3, [pc, #484]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800471e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004722:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	4976      	ldr	r1, [pc, #472]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	2b00      	cmp	r3, #0
 800473c:	d011      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800473e:	4b71      	ldr	r3, [pc, #452]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004744:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474c:	496d      	ldr	r1, [pc, #436]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800475c:	d101      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 800475e:	2301      	movs	r3, #1
 8004760:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800476e:	4b65      	ldr	r3, [pc, #404]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004774:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477c:	4961      	ldr	r1, [pc, #388]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d004      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b80      	cmp	r3, #128	; 0x80
 8004790:	f040 80c6 	bne.w	8004920 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004794:	4b5d      	ldr	r3, [pc, #372]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800479a:	f7fd ffd7 	bl	800274c <HAL_GetTick>
 800479e:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047a0:	e008      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047a2:	f7fd ffd3 	bl	800274c <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e10b      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047b4:	4b53      	ldr	r3, [pc, #332]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1f0      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80047c0:	4a53      	ldr	r2, [pc, #332]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c6:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d023      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d019      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d004      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004804:	d00e      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800480e:	2b00      	cmp	r3, #0
 8004810:	d019      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004816:	2b00      	cmp	r3, #0
 8004818:	d115      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004822:	d110      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	019b      	lsls	r3, r3, #6
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	061b      	lsls	r3, r3, #24
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	071b      	lsls	r3, r3, #28
 800483e:	4931      	ldr	r1, [pc, #196]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004840:	4313      	orrs	r3, r2
 8004842:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004856:	2b00      	cmp	r3, #0
 8004858:	d009      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004862:	2b00      	cmp	r3, #0
 8004864:	d026      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486a:	2b00      	cmp	r3, #0
 800486c:	d122      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800486e:	4b25      	ldr	r3, [pc, #148]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004874:	0e1b      	lsrs	r3, r3, #24
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	019b      	lsls	r3, r3, #6
 8004886:	431a      	orrs	r2, r3
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	061b      	lsls	r3, r3, #24
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	071b      	lsls	r3, r3, #28
 8004894:	491b      	ldr	r1, [pc, #108]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 800489c:	4b19      	ldr	r3, [pc, #100]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800489e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a2:	f023 021f 	bic.w	r2, r3, #31
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	4915      	ldr	r1, [pc, #84]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d010      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	019b      	lsls	r3, r3, #6
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	061b      	lsls	r3, r3, #24
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	071b      	lsls	r3, r3, #28
 80048da:	490a      	ldr	r1, [pc, #40]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048e2:	4b0a      	ldr	r3, [pc, #40]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048e8:	f7fd ff30 	bl	800274c <HAL_GetTick>
 80048ec:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048ee:	e011      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048f0:	f7fd ff2c 	bl	800274c <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d90a      	bls.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e064      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004902:	bf00      	nop
 8004904:	40023800 	.word	0x40023800
 8004908:	424711e0 	.word	0x424711e0
 800490c:	42470068 	.word	0x42470068
 8004910:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004914:	4b2f      	ldr	r3, [pc, #188]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0e7      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800492c:	4b29      	ldr	r3, [pc, #164]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800492e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004932:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493a:	4926      	ldr	r1, [pc, #152]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800494e:	4b21      	ldr	r3, [pc, #132]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004954:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495c:	491d      	ldr	r1, [pc, #116]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004970:	4b18      	ldr	r3, [pc, #96]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004976:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497e:	4915      	ldr	r1, [pc, #84]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8004992:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004998:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	490c      	ldr	r1, [pc, #48]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049b4:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80049b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ba:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	4904      	ldr	r1, [pc, #16]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3720      	adds	r7, #32
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40023800 	.word	0x40023800

080049d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d075      	beq.n	8004adc <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049f0:	4ba2      	ldr	r3, [pc, #648]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 030c 	and.w	r3, r3, #12
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d00c      	beq.n	8004a16 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049fc:	4b9f      	ldr	r3, [pc, #636]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d112      	bne.n	8004a2e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a08:	4b9c      	ldr	r3, [pc, #624]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a14:	d10b      	bne.n	8004a2e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a16:	4b99      	ldr	r3, [pc, #612]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d05b      	beq.n	8004ada <HAL_RCC_OscConfig+0x102>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d157      	bne.n	8004ada <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e20b      	b.n	8004e46 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a36:	d106      	bne.n	8004a46 <HAL_RCC_OscConfig+0x6e>
 8004a38:	4b90      	ldr	r3, [pc, #576]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a8f      	ldr	r2, [pc, #572]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	e01d      	b.n	8004a82 <HAL_RCC_OscConfig+0xaa>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a4e:	d10c      	bne.n	8004a6a <HAL_RCC_OscConfig+0x92>
 8004a50:	4b8a      	ldr	r3, [pc, #552]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a89      	ldr	r2, [pc, #548]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004a56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	4b87      	ldr	r3, [pc, #540]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a86      	ldr	r2, [pc, #536]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	e00b      	b.n	8004a82 <HAL_RCC_OscConfig+0xaa>
 8004a6a:	4b84      	ldr	r3, [pc, #528]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a83      	ldr	r2, [pc, #524]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	4b81      	ldr	r3, [pc, #516]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a80      	ldr	r2, [pc, #512]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004a7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a80:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d013      	beq.n	8004ab2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8a:	f7fd fe5f 	bl	800274c <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a92:	f7fd fe5b 	bl	800274c <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b64      	cmp	r3, #100	; 0x64
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e1d0      	b.n	8004e46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa4:	4b75      	ldr	r3, [pc, #468]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0f0      	beq.n	8004a92 <HAL_RCC_OscConfig+0xba>
 8004ab0:	e014      	b.n	8004adc <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab2:	f7fd fe4b 	bl	800274c <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aba:	f7fd fe47 	bl	800274c <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b64      	cmp	r3, #100	; 0x64
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e1bc      	b.n	8004e46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004acc:	4b6b      	ldr	r3, [pc, #428]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1f0      	bne.n	8004aba <HAL_RCC_OscConfig+0xe2>
 8004ad8:	e000      	b.n	8004adc <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ada:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d063      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ae8:	4b64      	ldr	r3, [pc, #400]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 030c 	and.w	r3, r3, #12
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00b      	beq.n	8004b0c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004af4:	4b61      	ldr	r3, [pc, #388]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d11c      	bne.n	8004b3a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b00:	4b5e      	ldr	r3, [pc, #376]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d116      	bne.n	8004b3a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b0c:	4b5b      	ldr	r3, [pc, #364]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <HAL_RCC_OscConfig+0x14c>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e190      	b.n	8004e46 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b24:	4b55      	ldr	r3, [pc, #340]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4952      	ldr	r1, [pc, #328]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b38:	e03a      	b.n	8004bb0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d020      	beq.n	8004b84 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b42:	4b4f      	ldr	r3, [pc, #316]	; (8004c80 <HAL_RCC_OscConfig+0x2a8>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fd fe00 	bl	800274c <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b50:	f7fd fdfc 	bl	800274c <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e171      	b.n	8004e46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b62:	4b46      	ldr	r3, [pc, #280]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0f0      	beq.n	8004b50 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6e:	4b43      	ldr	r3, [pc, #268]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	493f      	ldr	r1, [pc, #252]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	600b      	str	r3, [r1, #0]
 8004b82:	e015      	b.n	8004bb0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b84:	4b3e      	ldr	r3, [pc, #248]	; (8004c80 <HAL_RCC_OscConfig+0x2a8>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8a:	f7fd fddf 	bl	800274c <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b92:	f7fd fddb 	bl	800274c <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e150      	b.n	8004e46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba4:	4b35      	ldr	r3, [pc, #212]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1f0      	bne.n	8004b92 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d030      	beq.n	8004c1e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d016      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bc4:	4b2f      	ldr	r3, [pc, #188]	; (8004c84 <HAL_RCC_OscConfig+0x2ac>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bca:	f7fd fdbf 	bl	800274c <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bd2:	f7fd fdbb 	bl	800274c <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e130      	b.n	8004e46 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be4:	4b25      	ldr	r3, [pc, #148]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0f0      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x1fa>
 8004bf0:	e015      	b.n	8004c1e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bf2:	4b24      	ldr	r3, [pc, #144]	; (8004c84 <HAL_RCC_OscConfig+0x2ac>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf8:	f7fd fda8 	bl	800274c <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c00:	f7fd fda4 	bl	800274c <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e119      	b.n	8004e46 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c12:	4b1a      	ldr	r3, [pc, #104]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 809f 	beq.w	8004d6a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c30:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10f      	bne.n	8004c5c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	4b0e      	ldr	r3, [pc, #56]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	4a0d      	ldr	r2, [pc, #52]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <HAL_RCC_OscConfig+0x2a4>)
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <HAL_RCC_OscConfig+0x2b0>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d120      	bne.n	8004caa <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c68:	4b07      	ldr	r3, [pc, #28]	; (8004c88 <HAL_RCC_OscConfig+0x2b0>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a06      	ldr	r2, [pc, #24]	; (8004c88 <HAL_RCC_OscConfig+0x2b0>)
 8004c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c74:	f7fd fd6a 	bl	800274c <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7a:	e010      	b.n	8004c9e <HAL_RCC_OscConfig+0x2c6>
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	42470000 	.word	0x42470000
 8004c84:	42470e80 	.word	0x42470e80
 8004c88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c8c:	f7fd fd5e 	bl	800274c <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e0d3      	b.n	8004e46 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9e:	4b6c      	ldr	r3, [pc, #432]	; (8004e50 <HAL_RCC_OscConfig+0x478>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f0      	beq.n	8004c8c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d106      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x2e8>
 8004cb2:	4b68      	ldr	r3, [pc, #416]	; (8004e54 <HAL_RCC_OscConfig+0x47c>)
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb6:	4a67      	ldr	r2, [pc, #412]	; (8004e54 <HAL_RCC_OscConfig+0x47c>)
 8004cb8:	f043 0301 	orr.w	r3, r3, #1
 8004cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8004cbe:	e01c      	b.n	8004cfa <HAL_RCC_OscConfig+0x322>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2b05      	cmp	r3, #5
 8004cc6:	d10c      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x30a>
 8004cc8:	4b62      	ldr	r3, [pc, #392]	; (8004e54 <HAL_RCC_OscConfig+0x47c>)
 8004cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ccc:	4a61      	ldr	r2, [pc, #388]	; (8004e54 <HAL_RCC_OscConfig+0x47c>)
 8004cce:	f043 0304 	orr.w	r3, r3, #4
 8004cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd4:	4b5f      	ldr	r3, [pc, #380]	; (8004e54 <HAL_RCC_OscConfig+0x47c>)
 8004cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd8:	4a5e      	ldr	r2, [pc, #376]	; (8004e54 <HAL_RCC_OscConfig+0x47c>)
 8004cda:	f043 0301 	orr.w	r3, r3, #1
 8004cde:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce0:	e00b      	b.n	8004cfa <HAL_RCC_OscConfig+0x322>
 8004ce2:	4b5c      	ldr	r3, [pc, #368]	; (8004e54 <HAL_RCC_OscConfig+0x47c>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce6:	4a5b      	ldr	r2, [pc, #364]	; (8004e54 <HAL_RCC_OscConfig+0x47c>)
 8004ce8:	f023 0301 	bic.w	r3, r3, #1
 8004cec:	6713      	str	r3, [r2, #112]	; 0x70
 8004cee:	4b59      	ldr	r3, [pc, #356]	; (8004e54 <HAL_RCC_OscConfig+0x47c>)
 8004cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf2:	4a58      	ldr	r2, [pc, #352]	; (8004e54 <HAL_RCC_OscConfig+0x47c>)
 8004cf4:	f023 0304 	bic.w	r3, r3, #4
 8004cf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d015      	beq.n	8004d2e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d02:	f7fd fd23 	bl	800274c <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d08:	e00a      	b.n	8004d20 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d0a:	f7fd fd1f 	bl	800274c <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e092      	b.n	8004e46 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d20:	4b4c      	ldr	r3, [pc, #304]	; (8004e54 <HAL_RCC_OscConfig+0x47c>)
 8004d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0ee      	beq.n	8004d0a <HAL_RCC_OscConfig+0x332>
 8004d2c:	e014      	b.n	8004d58 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2e:	f7fd fd0d 	bl	800274c <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d34:	e00a      	b.n	8004d4c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d36:	f7fd fd09 	bl	800274c <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e07c      	b.n	8004e46 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d4c:	4b41      	ldr	r3, [pc, #260]	; (8004e54 <HAL_RCC_OscConfig+0x47c>)
 8004d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1ee      	bne.n	8004d36 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d58:	7dfb      	ldrb	r3, [r7, #23]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d105      	bne.n	8004d6a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d5e:	4b3d      	ldr	r3, [pc, #244]	; (8004e54 <HAL_RCC_OscConfig+0x47c>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	4a3c      	ldr	r2, [pc, #240]	; (8004e54 <HAL_RCC_OscConfig+0x47c>)
 8004d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d068      	beq.n	8004e44 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d72:	4b38      	ldr	r3, [pc, #224]	; (8004e54 <HAL_RCC_OscConfig+0x47c>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 030c 	and.w	r3, r3, #12
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d060      	beq.n	8004e40 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d145      	bne.n	8004e12 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d86:	4b34      	ldr	r3, [pc, #208]	; (8004e58 <HAL_RCC_OscConfig+0x480>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fd fcde 	bl	800274c <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d94:	f7fd fcda 	bl	800274c <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e04f      	b.n	8004e46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da6:	4b2b      	ldr	r3, [pc, #172]	; (8004e54 <HAL_RCC_OscConfig+0x47c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69da      	ldr	r2, [r3, #28]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	019b      	lsls	r3, r3, #6
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	041b      	lsls	r3, r3, #16
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	061b      	lsls	r3, r3, #24
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ddc:	071b      	lsls	r3, r3, #28
 8004dde:	491d      	ldr	r1, [pc, #116]	; (8004e54 <HAL_RCC_OscConfig+0x47c>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004de4:	4b1c      	ldr	r3, [pc, #112]	; (8004e58 <HAL_RCC_OscConfig+0x480>)
 8004de6:	2201      	movs	r2, #1
 8004de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dea:	f7fd fcaf 	bl	800274c <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df2:	f7fd fcab 	bl	800274c <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e020      	b.n	8004e46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e04:	4b13      	ldr	r3, [pc, #76]	; (8004e54 <HAL_RCC_OscConfig+0x47c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0f0      	beq.n	8004df2 <HAL_RCC_OscConfig+0x41a>
 8004e10:	e018      	b.n	8004e44 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e12:	4b11      	ldr	r3, [pc, #68]	; (8004e58 <HAL_RCC_OscConfig+0x480>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7fd fc98 	bl	800274c <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e20:	f7fd fc94 	bl	800274c <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e009      	b.n	8004e46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e32:	4b08      	ldr	r3, [pc, #32]	; (8004e54 <HAL_RCC_OscConfig+0x47c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f0      	bne.n	8004e20 <HAL_RCC_OscConfig+0x448>
 8004e3e:	e001      	b.n	8004e44 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e000      	b.n	8004e46 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40007000 	.word	0x40007000
 8004e54:	40023800 	.word	0x40023800
 8004e58:	42470060 	.word	0x42470060

08004e5c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e022      	b.n	8004eb4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d105      	bne.n	8004e86 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7fc fca1 	bl	80017c8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2203      	movs	r2, #3
 8004e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f814 	bl	8004ebc <HAL_SD_InitCard>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e00a      	b.n	8004eb4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004ebc:	b5b0      	push	{r4, r5, r7, lr}
 8004ebe:	b08e      	sub	sp, #56	; 0x38
 8004ec0:	af04      	add	r7, sp, #16
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004ed8:	2376      	movs	r3, #118	; 0x76
 8004eda:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681d      	ldr	r5, [r3, #0]
 8004ee0:	466c      	mov	r4, sp
 8004ee2:	f107 0314 	add.w	r3, r7, #20
 8004ee6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004eea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004eee:	f107 0308 	add.w	r3, r7, #8
 8004ef2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	f001 ff2d 	bl	8006d54 <SDIO_Init>
 8004efa:	4603      	mov	r3, r0
 8004efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e031      	b.n	8004f70 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004f0c:	4b1a      	ldr	r3, [pc, #104]	; (8004f78 <HAL_SD_InitCard+0xbc>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f001 ff65 	bl	8006de6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004f1c:	4b16      	ldr	r3, [pc, #88]	; (8004f78 <HAL_SD_InitCard+0xbc>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fe80 	bl	8005c28 <SD_PowerON>
 8004f28:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00b      	beq.n	8004f48 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e013      	b.n	8004f70 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fd9f 	bl	8005a8c <SD_InitCard>
 8004f4e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f50:	6a3b      	ldr	r3, [r7, #32]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00b      	beq.n	8004f6e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e000      	b.n	8004f70 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3728      	adds	r7, #40	; 0x28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bdb0      	pop	{r4, r5, r7, pc}
 8004f78:	422580a0 	.word	0x422580a0

08004f7c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b092      	sub	sp, #72	; 0x48
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004f8a:	f7fd fbdf 	bl	800274c <HAL_GetTick>
 8004f8e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d107      	bne.n	8004fae <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e1d7      	b.n	800535e <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	f040 81ca 	bne.w	8005350 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004fc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	441a      	add	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d907      	bls.n	8004fe0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e1be      	b.n	800535e <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2203      	movs	r2, #3
 8004fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2200      	movs	r2, #0
 8004fee:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d002      	beq.n	8004ffe <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffa:	025b      	lsls	r3, r3, #9
 8004ffc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005006:	4618      	mov	r0, r3
 8005008:	f001 ff80 	bl	8006f0c <SDMMC_CmdBlockLength>
 800500c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800500e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00f      	beq.n	8005034 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a9a      	ldr	r2, [pc, #616]	; (8005284 <HAL_SD_ReadBlocks+0x308>)
 800501a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005022:	431a      	orrs	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e194      	b.n	800535e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005034:	f04f 33ff 	mov.w	r3, #4294967295
 8005038:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	025b      	lsls	r3, r3, #9
 800503e:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005040:	2390      	movs	r3, #144	; 0x90
 8005042:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005044:	2302      	movs	r3, #2
 8005046:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005048:	2300      	movs	r3, #0
 800504a:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800504c:	2301      	movs	r3, #1
 800504e:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f107 0214 	add.w	r2, r7, #20
 8005058:	4611      	mov	r1, r2
 800505a:	4618      	mov	r0, r3
 800505c:	f001 ff2a 	bl	8006eb4 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d90a      	bls.n	800507c <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2202      	movs	r2, #2
 800506a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005072:	4618      	mov	r0, r3
 8005074:	f001 ff8e 	bl	8006f94 <SDMMC_CmdReadMultiBlock>
 8005078:	6478      	str	r0, [r7, #68]	; 0x44
 800507a:	e009      	b.n	8005090 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2201      	movs	r2, #1
 8005080:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005088:	4618      	mov	r0, r3
 800508a:	f001 ff61 	bl	8006f50 <SDMMC_CmdReadSingleBlock>
 800508e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005092:	2b00      	cmp	r3, #0
 8005094:	d012      	beq.n	80050bc <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a7a      	ldr	r2, [pc, #488]	; (8005284 <HAL_SD_ReadBlocks+0x308>)
 800509c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a4:	431a      	orrs	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e150      	b.n	800535e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80050c0:	e061      	b.n	8005186 <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d03c      	beq.n	800514a <HAL_SD_ReadBlocks+0x1ce>
 80050d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d039      	beq.n	800514a <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80050d6:	2300      	movs	r3, #0
 80050d8:	643b      	str	r3, [r7, #64]	; 0x40
 80050da:	e033      	b.n	8005144 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f001 fe62 	bl	8006daa <SDIO_ReadFIFO>
 80050e6:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80050e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ee:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80050f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f2:	3301      	adds	r3, #1
 80050f4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80050f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f8:	3b01      	subs	r3, #1
 80050fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80050fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fe:	0a1b      	lsrs	r3, r3, #8
 8005100:	b2da      	uxtb	r2, r3
 8005102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005104:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005108:	3301      	adds	r3, #1
 800510a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800510c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800510e:	3b01      	subs	r3, #1
 8005110:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005114:	0c1b      	lsrs	r3, r3, #16
 8005116:	b2da      	uxtb	r2, r3
 8005118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800511c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511e:	3301      	adds	r3, #1
 8005120:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005124:	3b01      	subs	r3, #1
 8005126:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512a:	0e1b      	lsrs	r3, r3, #24
 800512c:	b2da      	uxtb	r2, r3
 800512e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005130:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005134:	3301      	adds	r3, #1
 8005136:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800513a:	3b01      	subs	r3, #1
 800513c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800513e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005140:	3301      	adds	r3, #1
 8005142:	643b      	str	r3, [r7, #64]	; 0x40
 8005144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005146:	2b07      	cmp	r3, #7
 8005148:	d9c8      	bls.n	80050dc <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800514a:	f7fd faff 	bl	800274c <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005156:	429a      	cmp	r2, r3
 8005158:	d902      	bls.n	8005160 <HAL_SD_ReadBlocks+0x1e4>
 800515a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800515c:	2b00      	cmp	r3, #0
 800515e:	d112      	bne.n	8005186 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a47      	ldr	r2, [pc, #284]	; (8005284 <HAL_SD_ReadBlocks+0x308>)
 8005166:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e0eb      	b.n	800535e <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005190:	2b00      	cmp	r3, #0
 8005192:	d096      	beq.n	80050c2 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d022      	beq.n	80051e8 <HAL_SD_ReadBlocks+0x26c>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d91f      	bls.n	80051e8 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d01b      	beq.n	80051e8 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f001 ff53 	bl	8007060 <SDMMC_CmdStopTransfer>
 80051ba:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80051bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d012      	beq.n	80051e8 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a2f      	ldr	r2, [pc, #188]	; (8005284 <HAL_SD_ReadBlocks+0x308>)
 80051c8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051d0:	431a      	orrs	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e0ba      	b.n	800535e <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d012      	beq.n	800521c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a22      	ldr	r2, [pc, #136]	; (8005284 <HAL_SD_ReadBlocks+0x308>)
 80051fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005202:	f043 0208 	orr.w	r2, r3, #8
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e0a0      	b.n	800535e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d012      	beq.n	8005250 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a15      	ldr	r2, [pc, #84]	; (8005284 <HAL_SD_ReadBlocks+0x308>)
 8005230:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005236:	f043 0202 	orr.w	r2, r3, #2
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e086      	b.n	800535e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b00      	cmp	r3, #0
 800525c:	d063      	beq.n	8005326 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a08      	ldr	r2, [pc, #32]	; (8005284 <HAL_SD_ReadBlocks+0x308>)
 8005264:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526a:	f043 0220 	orr.w	r2, r3, #32
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e06c      	b.n	800535e <HAL_SD_ReadBlocks+0x3e2>
 8005284:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4618      	mov	r0, r3
 800528e:	f001 fd8c 	bl	8006daa <SDIO_ReadFIFO>
 8005292:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005296:	b2da      	uxtb	r2, r3
 8005298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800529c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529e:	3301      	adds	r3, #1
 80052a0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80052a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a4:	3b01      	subs	r3, #1
 80052a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80052a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052aa:	0a1b      	lsrs	r3, r3, #8
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80052b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b4:	3301      	adds	r3, #1
 80052b6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80052b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ba:	3b01      	subs	r3, #1
 80052bc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80052be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c0:	0c1b      	lsrs	r3, r3, #16
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80052c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ca:	3301      	adds	r3, #1
 80052cc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80052ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d0:	3b01      	subs	r3, #1
 80052d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80052d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d6:	0e1b      	lsrs	r3, r3, #24
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052dc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80052de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e0:	3301      	adds	r3, #1
 80052e2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80052e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e6:	3b01      	subs	r3, #1
 80052e8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80052ea:	f7fd fa2f 	bl	800274c <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d902      	bls.n	8005300 <HAL_SD_ReadBlocks+0x384>
 80052fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d112      	bne.n	8005326 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a18      	ldr	r2, [pc, #96]	; (8005368 <HAL_SD_ReadBlocks+0x3ec>)
 8005306:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e01b      	b.n	800535e <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <HAL_SD_ReadBlocks+0x3be>
 8005334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1a6      	bne.n	8005288 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005342:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800534c:	2300      	movs	r3, #0
 800534e:	e006      	b.n	800535e <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
  }
}
 800535e:	4618      	mov	r0, r3
 8005360:	3748      	adds	r7, #72	; 0x48
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	004005ff 	.word	0x004005ff

0800536c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b092      	sub	sp, #72	; 0x48
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800537a:	f7fd f9e7 	bl	800274c <HAL_GetTick>
 800537e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d107      	bne.n	800539e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e182      	b.n	80056a4 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	f040 8175 	bne.w	8005696 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80053b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	441a      	add	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053bc:	429a      	cmp	r2, r3
 80053be:	d907      	bls.n	80053d0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e169      	b.n	80056a4 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2203      	movs	r2, #3
 80053d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2200      	movs	r2, #0
 80053de:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d002      	beq.n	80053ee <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80053e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ea:	025b      	lsls	r3, r3, #9
 80053ec:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053f6:	4618      	mov	r0, r3
 80053f8:	f001 fd88 	bl	8006f0c <SDMMC_CmdBlockLength>
 80053fc:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80053fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00f      	beq.n	8005424 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a9c      	ldr	r2, [pc, #624]	; (800567c <HAL_SD_WriteBlocks+0x310>)
 800540a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005412:	431a      	orrs	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e13f      	b.n	80056a4 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005424:	f04f 33ff 	mov.w	r3, #4294967295
 8005428:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	025b      	lsls	r3, r3, #9
 800542e:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005430:	2390      	movs	r3, #144	; 0x90
 8005432:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005434:	2300      	movs	r3, #0
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005438:	2300      	movs	r3, #0
 800543a:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800543c:	2301      	movs	r3, #1
 800543e:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f107 0218 	add.w	r2, r7, #24
 8005448:	4611      	mov	r1, r2
 800544a:	4618      	mov	r0, r3
 800544c:	f001 fd32 	bl	8006eb4 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d90a      	bls.n	800546c <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2220      	movs	r2, #32
 800545a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005462:	4618      	mov	r0, r3
 8005464:	f001 fdda 	bl	800701c <SDMMC_CmdWriteMultiBlock>
 8005468:	6478      	str	r0, [r7, #68]	; 0x44
 800546a:	e009      	b.n	8005480 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2210      	movs	r2, #16
 8005470:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005478:	4618      	mov	r0, r3
 800547a:	f001 fdad 	bl	8006fd8 <SDMMC_CmdWriteSingleBlock>
 800547e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005482:	2b00      	cmp	r3, #0
 8005484:	d012      	beq.n	80054ac <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a7c      	ldr	r2, [pc, #496]	; (800567c <HAL_SD_WriteBlocks+0x310>)
 800548c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005494:	431a      	orrs	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e0fb      	b.n	80056a4 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80054b0:	e065      	b.n	800557e <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d040      	beq.n	8005542 <HAL_SD_WriteBlocks+0x1d6>
 80054c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d03d      	beq.n	8005542 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80054c6:	2300      	movs	r3, #0
 80054c8:	643b      	str	r3, [r7, #64]	; 0x40
 80054ca:	e037      	b.n	800553c <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 80054cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80054d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d4:	3301      	adds	r3, #1
 80054d6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80054d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054da:	3b01      	subs	r3, #1
 80054dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80054de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	021a      	lsls	r2, r3, #8
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80054ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ec:	3301      	adds	r3, #1
 80054ee:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80054f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054f2:	3b01      	subs	r3, #1
 80054f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80054f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	041a      	lsls	r2, r3, #16
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005504:	3301      	adds	r3, #1
 8005506:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800550a:	3b01      	subs	r3, #1
 800550c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800550e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	061a      	lsls	r2, r3, #24
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800551a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551c:	3301      	adds	r3, #1
 800551e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005522:	3b01      	subs	r3, #1
 8005524:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f107 0214 	add.w	r2, r7, #20
 800552e:	4611      	mov	r1, r2
 8005530:	4618      	mov	r0, r3
 8005532:	f001 fc47 	bl	8006dc4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005538:	3301      	adds	r3, #1
 800553a:	643b      	str	r3, [r7, #64]	; 0x40
 800553c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800553e:	2b07      	cmp	r3, #7
 8005540:	d9c4      	bls.n	80054cc <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005542:	f7fd f903 	bl	800274c <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800554e:	429a      	cmp	r2, r3
 8005550:	d902      	bls.n	8005558 <HAL_SD_WriteBlocks+0x1ec>
 8005552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005554:	2b00      	cmp	r3, #0
 8005556:	d112      	bne.n	800557e <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a47      	ldr	r2, [pc, #284]	; (800567c <HAL_SD_WriteBlocks+0x310>)
 800555e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005566:	431a      	orrs	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e092      	b.n	80056a4 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005584:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005588:	2b00      	cmp	r3, #0
 800558a:	d092      	beq.n	80054b2 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005596:	2b00      	cmp	r3, #0
 8005598:	d022      	beq.n	80055e0 <HAL_SD_WriteBlocks+0x274>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d91f      	bls.n	80055e0 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d01b      	beq.n	80055e0 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f001 fd57 	bl	8007060 <SDMMC_CmdStopTransfer>
 80055b2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80055b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d012      	beq.n	80055e0 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a2f      	ldr	r2, [pc, #188]	; (800567c <HAL_SD_WriteBlocks+0x310>)
 80055c0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c8:	431a      	orrs	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e061      	b.n	80056a4 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d012      	beq.n	8005614 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a22      	ldr	r2, [pc, #136]	; (800567c <HAL_SD_WriteBlocks+0x310>)
 80055f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	f043 0208 	orr.w	r2, r3, #8
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e047      	b.n	80056a4 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d012      	beq.n	8005648 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a15      	ldr	r2, [pc, #84]	; (800567c <HAL_SD_WriteBlocks+0x310>)
 8005628:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562e:	f043 0202 	orr.w	r2, r3, #2
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e02d      	b.n	80056a4 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564e:	f003 0310 	and.w	r3, r3, #16
 8005652:	2b00      	cmp	r3, #0
 8005654:	d014      	beq.n	8005680 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a08      	ldr	r2, [pc, #32]	; (800567c <HAL_SD_WriteBlocks+0x310>)
 800565c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005662:	f043 0210 	orr.w	r2, r3, #16
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e013      	b.n	80056a4 <HAL_SD_WriteBlocks+0x338>
 800567c:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f240 523a 	movw	r2, #1338	; 0x53a
 8005688:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	e006      	b.n	80056a4 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
  }
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3748      	adds	r7, #72	; 0x48
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056ba:	0f9b      	lsrs	r3, r3, #30
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056c6:	0e9b      	lsrs	r3, r3, #26
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056d8:	0e1b      	lsrs	r3, r3, #24
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	f003 0303 	and.w	r3, r3, #3
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056ea:	0c1b      	lsrs	r3, r3, #16
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056f6:	0a1b      	lsrs	r3, r3, #8
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005702:	b2da      	uxtb	r2, r3
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800570c:	0d1b      	lsrs	r3, r3, #20
 800570e:	b29a      	uxth	r2, r3
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005718:	0c1b      	lsrs	r3, r3, #16
 800571a:	b2db      	uxtb	r3, r3
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	b2da      	uxtb	r2, r3
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800572a:	0bdb      	lsrs	r3, r3, #15
 800572c:	b2db      	uxtb	r3, r3
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	b2da      	uxtb	r2, r3
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800573c:	0b9b      	lsrs	r3, r3, #14
 800573e:	b2db      	uxtb	r3, r3
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	b2da      	uxtb	r2, r3
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800574e:	0b5b      	lsrs	r3, r3, #13
 8005750:	b2db      	uxtb	r3, r3
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	b2da      	uxtb	r2, r3
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005760:	0b1b      	lsrs	r3, r3, #12
 8005762:	b2db      	uxtb	r3, r3
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	b2da      	uxtb	r2, r3
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2200      	movs	r2, #0
 8005772:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005778:	2b00      	cmp	r3, #0
 800577a:	d163      	bne.n	8005844 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005780:	009a      	lsls	r2, r3, #2
 8005782:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005786:	4013      	ands	r3, r2
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800578c:	0f92      	lsrs	r2, r2, #30
 800578e:	431a      	orrs	r2, r3
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005798:	0edb      	lsrs	r3, r3, #27
 800579a:	b2db      	uxtb	r3, r3
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057aa:	0e1b      	lsrs	r3, r3, #24
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f003 0307 	and.w	r3, r3, #7
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057bc:	0d5b      	lsrs	r3, r3, #21
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ce:	0c9b      	lsrs	r3, r3, #18
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057e0:	0bdb      	lsrs	r3, r3, #15
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	7e1b      	ldrb	r3, [r3, #24]
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f003 0307 	and.w	r3, r3, #7
 8005802:	3302      	adds	r3, #2
 8005804:	2201      	movs	r2, #1
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800580e:	fb02 f203 	mul.w	r2, r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	7a1b      	ldrb	r3, [r3, #8]
 800581a:	b2db      	uxtb	r3, r3
 800581c:	f003 030f 	and.w	r3, r3, #15
 8005820:	2201      	movs	r2, #1
 8005822:	409a      	lsls	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005830:	0a52      	lsrs	r2, r2, #9
 8005832:	fb02 f203 	mul.w	r2, r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005840:	661a      	str	r2, [r3, #96]	; 0x60
 8005842:	e031      	b.n	80058a8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005848:	2b01      	cmp	r3, #1
 800584a:	d11d      	bne.n	8005888 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005850:	041b      	lsls	r3, r3, #16
 8005852:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800585a:	0c1b      	lsrs	r3, r3, #16
 800585c:	431a      	orrs	r2, r3
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	3301      	adds	r3, #1
 8005868:	029a      	lsls	r2, r3, #10
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800587c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	661a      	str	r2, [r3, #96]	; 0x60
 8005886:	e00f      	b.n	80058a8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a58      	ldr	r2, [pc, #352]	; (80059f0 <HAL_SD_GetCardCSD+0x344>)
 800588e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005894:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e09d      	b.n	80059e4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058ac:	0b9b      	lsrs	r3, r3, #14
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058be:	09db      	lsrs	r3, r3, #7
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e0:	0fdb      	lsrs	r3, r3, #31
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ec:	0f5b      	lsrs	r3, r3, #29
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	f003 0303 	and.w	r3, r3, #3
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fe:	0e9b      	lsrs	r3, r3, #26
 8005900:	b2db      	uxtb	r3, r3
 8005902:	f003 0307 	and.w	r3, r3, #7
 8005906:	b2da      	uxtb	r2, r3
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005910:	0d9b      	lsrs	r3, r3, #22
 8005912:	b2db      	uxtb	r3, r3
 8005914:	f003 030f 	and.w	r3, r3, #15
 8005918:	b2da      	uxtb	r2, r3
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005922:	0d5b      	lsrs	r3, r3, #21
 8005924:	b2db      	uxtb	r3, r3
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	b2da      	uxtb	r2, r3
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593e:	0c1b      	lsrs	r3, r3, #16
 8005940:	b2db      	uxtb	r3, r3
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	b2da      	uxtb	r2, r3
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005952:	0bdb      	lsrs	r3, r3, #15
 8005954:	b2db      	uxtb	r3, r3
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	b2da      	uxtb	r2, r3
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005966:	0b9b      	lsrs	r3, r3, #14
 8005968:	b2db      	uxtb	r3, r3
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	b2da      	uxtb	r2, r3
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597a:	0b5b      	lsrs	r3, r3, #13
 800597c:	b2db      	uxtb	r3, r3
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	b2da      	uxtb	r2, r3
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	0b1b      	lsrs	r3, r3, #12
 8005990:	b2db      	uxtb	r3, r3
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	b2da      	uxtb	r2, r3
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a2:	0a9b      	lsrs	r3, r3, #10
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b6:	0a1b      	lsrs	r3, r3, #8
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ca:	085b      	lsrs	r3, r3, #1
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	004005ff 	.word	0x004005ff

080059f4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005a58:	f107 030c 	add.w	r3, r7, #12
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f970 	bl	8005d44 <SD_SendStatus>
 8005a64:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d005      	beq.n	8005a78 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	0a5b      	lsrs	r3, r3, #9
 8005a7c:	f003 030f 	and.w	r3, r3, #15
 8005a80:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005a82:	693b      	ldr	r3, [r7, #16]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005a8c:	b5b0      	push	{r4, r5, r7, lr}
 8005a8e:	b094      	sub	sp, #80	; 0x50
 8005a90:	af04      	add	r7, sp, #16
 8005a92:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005a94:	2301      	movs	r3, #1
 8005a96:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f001 f9b1 	bl	8006e04 <SDIO_GetPowerState>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d102      	bne.n	8005aae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005aa8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005aac:	e0b7      	b.n	8005c1e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d02f      	beq.n	8005b16 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f001 fb97 	bl	80071ee <SDMMC_CmdSendCID>
 8005ac0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <SD_InitCard+0x40>
    {
      return errorstate;
 8005ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aca:	e0a8      	b.n	8005c1e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f001 f9db 	bl	8006e8e <SDIO_GetResponse>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2104      	movs	r1, #4
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f001 f9d2 	bl	8006e8e <SDIO_GetResponse>
 8005aea:	4602      	mov	r2, r0
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2108      	movs	r1, #8
 8005af6:	4618      	mov	r0, r3
 8005af8:	f001 f9c9 	bl	8006e8e <SDIO_GetResponse>
 8005afc:	4602      	mov	r2, r0
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	210c      	movs	r1, #12
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f001 f9c0 	bl	8006e8e <SDIO_GetResponse>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d00d      	beq.n	8005b3a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f107 020e 	add.w	r2, r7, #14
 8005b26:	4611      	mov	r1, r2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f001 fb9d 	bl	8007268 <SDMMC_CmdSetRelAdd>
 8005b2e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <SD_InitCard+0xae>
    {
      return errorstate;
 8005b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b38:	e071      	b.n	8005c1e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d036      	beq.n	8005bb0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005b42:	89fb      	ldrh	r3, [r7, #14]
 8005b44:	461a      	mov	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b52:	041b      	lsls	r3, r3, #16
 8005b54:	4619      	mov	r1, r3
 8005b56:	4610      	mov	r0, r2
 8005b58:	f001 fb67 	bl	800722a <SDMMC_CmdSendCSD>
 8005b5c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b66:	e05a      	b.n	8005c1e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f001 f98d 	bl	8006e8e <SDIO_GetResponse>
 8005b74:	4602      	mov	r2, r0
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2104      	movs	r1, #4
 8005b80:	4618      	mov	r0, r3
 8005b82:	f001 f984 	bl	8006e8e <SDIO_GetResponse>
 8005b86:	4602      	mov	r2, r0
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2108      	movs	r1, #8
 8005b92:	4618      	mov	r0, r3
 8005b94:	f001 f97b 	bl	8006e8e <SDIO_GetResponse>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	210c      	movs	r1, #12
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f001 f972 	bl	8006e8e <SDIO_GetResponse>
 8005baa:	4602      	mov	r2, r0
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2104      	movs	r1, #4
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f001 f969 	bl	8006e8e <SDIO_GetResponse>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	0d1a      	lsrs	r2, r3, #20
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005bc4:	f107 0310 	add.w	r3, r7, #16
 8005bc8:	4619      	mov	r1, r3
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7ff fd6e 	bl	80056ac <HAL_SD_GetCardCSD>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d002      	beq.n	8005bdc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005bd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005bda:	e020      	b.n	8005c1e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6819      	ldr	r1, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be4:	041b      	lsls	r3, r3, #16
 8005be6:	f04f 0400 	mov.w	r4, #0
 8005bea:	461a      	mov	r2, r3
 8005bec:	4623      	mov	r3, r4
 8005bee:	4608      	mov	r0, r1
 8005bf0:	f001 fa58 	bl	80070a4 <SDMMC_CmdSelDesel>
 8005bf4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <SD_InitCard+0x174>
  {
    return errorstate;
 8005bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bfe:	e00e      	b.n	8005c1e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681d      	ldr	r5, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	466c      	mov	r4, sp
 8005c08:	f103 0210 	add.w	r2, r3, #16
 8005c0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005c12:	3304      	adds	r3, #4
 8005c14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c16:	4628      	mov	r0, r5
 8005c18:	f001 f89c 	bl	8006d54 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3740      	adds	r7, #64	; 0x40
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005c28 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	2300      	movs	r3, #0
 8005c3a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f001 fa52 	bl	80070ea <SDMMC_CmdGoIdleState>
 8005c46:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	e072      	b.n	8005d38 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 fa65 	bl	8007126 <SDMMC_CmdOperCond>
 8005c5c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00d      	beq.n	8005c80 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f001 fa3b 	bl	80070ea <SDMMC_CmdGoIdleState>
 8005c74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d004      	beq.n	8005c86 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	e05b      	b.n	8005d38 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d137      	bne.n	8005cfe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2100      	movs	r1, #0
 8005c94:	4618      	mov	r0, r3
 8005c96:	f001 fa65 	bl	8007164 <SDMMC_CmdAppCommand>
 8005c9a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d02d      	beq.n	8005cfe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ca2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ca6:	e047      	b.n	8005d38 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2100      	movs	r1, #0
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f001 fa58 	bl	8007164 <SDMMC_CmdAppCommand>
 8005cb4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <SD_PowerON+0x98>
    {
      return errorstate;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	e03b      	b.n	8005d38 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	491e      	ldr	r1, [pc, #120]	; (8005d40 <SD_PowerON+0x118>)
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f001 fa6e 	bl	80071a8 <SDMMC_CmdAppOperCommand>
 8005ccc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005cd8:	e02e      	b.n	8005d38 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2100      	movs	r1, #0
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f001 f8d4 	bl	8006e8e <SDIO_GetResponse>
 8005ce6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	0fdb      	lsrs	r3, r3, #31
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <SD_PowerON+0xcc>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e000      	b.n	8005cf6 <SD_PowerON+0xce>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	613b      	str	r3, [r7, #16]

    count++;
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d802      	bhi.n	8005d0e <SD_PowerON+0xe6>
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0cc      	beq.n	8005ca8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d902      	bls.n	8005d1e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005d18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d1c:	e00c      	b.n	8005d38 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	645a      	str	r2, [r3, #68]	; 0x44
 8005d2e:	e002      	b.n	8005d36 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	c1100000 	.word	0xc1100000

08005d44 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d102      	bne.n	8005d5a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005d54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d58:	e018      	b.n	8005d8c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d62:	041b      	lsls	r3, r3, #16
 8005d64:	4619      	mov	r1, r3
 8005d66:	4610      	mov	r0, r2
 8005d68:	f001 fa9f 	bl	80072aa <SDMMC_CmdSendStatus>
 8005d6c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	e009      	b.n	8005d8c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f001 f885 	bl	8006e8e <SDIO_GetResponse>
 8005d84:	4602      	mov	r2, r0
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e056      	b.n	8005e54 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d106      	bne.n	8005dc6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7fb fd7b 	bl	80018bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2202      	movs	r2, #2
 8005dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ddc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	431a      	orrs	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	ea42 0103 	orr.w	r1, r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	0c1b      	lsrs	r3, r3, #16
 8005e24:	f003 0104 	and.w	r1, r3, #4
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	69da      	ldr	r2, [r3, #28]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08c      	sub	sp, #48	; 0x30
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
 8005e68:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <HAL_SPI_TransmitReceive+0x26>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	e18a      	b.n	8006198 <HAL_SPI_TransmitReceive+0x33c>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e8a:	f7fc fc5f 	bl	800274c <HAL_GetTick>
 8005e8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005ea0:	887b      	ldrh	r3, [r7, #2]
 8005ea2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d00f      	beq.n	8005ecc <HAL_SPI_TransmitReceive+0x70>
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eb2:	d107      	bne.n	8005ec4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d103      	bne.n	8005ec4 <HAL_SPI_TransmitReceive+0x68>
 8005ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d003      	beq.n	8005ecc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005eca:	e15b      	b.n	8006184 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d005      	beq.n	8005ede <HAL_SPI_TransmitReceive+0x82>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <HAL_SPI_TransmitReceive+0x82>
 8005ed8:	887b      	ldrh	r3, [r7, #2]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d103      	bne.n	8005ee6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ee4:	e14e      	b.n	8006184 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d003      	beq.n	8005efa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2205      	movs	r2, #5
 8005ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	887a      	ldrh	r2, [r7, #2]
 8005f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	887a      	ldrh	r2, [r7, #2]
 8005f10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	887a      	ldrh	r2, [r7, #2]
 8005f1c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	887a      	ldrh	r2, [r7, #2]
 8005f22:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3a:	2b40      	cmp	r3, #64	; 0x40
 8005f3c:	d007      	beq.n	8005f4e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f56:	d178      	bne.n	800604a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <HAL_SPI_TransmitReceive+0x10a>
 8005f60:	8b7b      	ldrh	r3, [r7, #26]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d166      	bne.n	8006034 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6a:	881a      	ldrh	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f76:	1c9a      	adds	r2, r3, #2
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f8a:	e053      	b.n	8006034 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d11b      	bne.n	8005fd2 <HAL_SPI_TransmitReceive+0x176>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d016      	beq.n	8005fd2 <HAL_SPI_TransmitReceive+0x176>
 8005fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d113      	bne.n	8005fd2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	881a      	ldrh	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fba:	1c9a      	adds	r2, r3, #2
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d119      	bne.n	8006014 <HAL_SPI_TransmitReceive+0x1b8>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d014      	beq.n	8006014 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68da      	ldr	r2, [r3, #12]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff4:	b292      	uxth	r2, r2
 8005ff6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	1c9a      	adds	r2, r3, #2
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006006:	b29b      	uxth	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006010:	2301      	movs	r3, #1
 8006012:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006014:	f7fc fb9a 	bl	800274c <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006020:	429a      	cmp	r2, r3
 8006022:	d807      	bhi.n	8006034 <HAL_SPI_TransmitReceive+0x1d8>
 8006024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602a:	d003      	beq.n	8006034 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006032:	e0a7      	b.n	8006184 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1a6      	bne.n	8005f8c <HAL_SPI_TransmitReceive+0x130>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1a1      	bne.n	8005f8c <HAL_SPI_TransmitReceive+0x130>
 8006048:	e07c      	b.n	8006144 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <HAL_SPI_TransmitReceive+0x1fc>
 8006052:	8b7b      	ldrh	r3, [r7, #26]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d16b      	bne.n	8006130 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	330c      	adds	r3, #12
 8006062:	7812      	ldrb	r2, [r2, #0]
 8006064:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800607e:	e057      	b.n	8006130 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b02      	cmp	r3, #2
 800608c:	d11c      	bne.n	80060c8 <HAL_SPI_TransmitReceive+0x26c>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006092:	b29b      	uxth	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d017      	beq.n	80060c8 <HAL_SPI_TransmitReceive+0x26c>
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	2b01      	cmp	r3, #1
 800609c:	d114      	bne.n	80060c8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	330c      	adds	r3, #12
 80060a8:	7812      	ldrb	r2, [r2, #0]
 80060aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d119      	bne.n	800610a <HAL_SPI_TransmitReceive+0x2ae>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d014      	beq.n	800610a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	3b01      	subs	r3, #1
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006106:	2301      	movs	r3, #1
 8006108:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800610a:	f7fc fb1f 	bl	800274c <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006116:	429a      	cmp	r2, r3
 8006118:	d803      	bhi.n	8006122 <HAL_SPI_TransmitReceive+0x2c6>
 800611a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006120:	d102      	bne.n	8006128 <HAL_SPI_TransmitReceive+0x2cc>
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	2b00      	cmp	r3, #0
 8006126:	d103      	bne.n	8006130 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800612e:	e029      	b.n	8006184 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1a2      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x224>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613e:	b29b      	uxth	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d19d      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006146:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 f893 	bl	8006274 <SPI_EndRxTxTransaction>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d006      	beq.n	8006162 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2220      	movs	r2, #32
 800615e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006160:	e010      	b.n	8006184 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10b      	bne.n	8006182 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	617b      	str	r3, [r7, #20]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	e000      	b.n	8006184 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006182:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006194:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006198:	4618      	mov	r0, r3
 800619a:	3730      	adds	r7, #48	; 0x30
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	603b      	str	r3, [r7, #0]
 80061ac:	4613      	mov	r3, r2
 80061ae:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061b0:	e04c      	b.n	800624c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b8:	d048      	beq.n	800624c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80061ba:	f7fc fac7 	bl	800274c <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d902      	bls.n	80061d0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d13d      	bne.n	800624c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061e8:	d111      	bne.n	800620e <SPI_WaitFlagStateUntilTimeout+0x6e>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f2:	d004      	beq.n	80061fe <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061fc:	d107      	bne.n	800620e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800620c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006216:	d10f      	bne.n	8006238 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006236:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e00f      	b.n	800626c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4013      	ands	r3, r2
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	429a      	cmp	r2, r3
 800625a:	bf0c      	ite	eq
 800625c:	2301      	moveq	r3, #1
 800625e:	2300      	movne	r3, #0
 8006260:	b2db      	uxtb	r3, r3
 8006262:	461a      	mov	r2, r3
 8006264:	79fb      	ldrb	r3, [r7, #7]
 8006266:	429a      	cmp	r2, r3
 8006268:	d1a3      	bne.n	80061b2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af02      	add	r7, sp, #8
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006280:	4b1b      	ldr	r3, [pc, #108]	; (80062f0 <SPI_EndRxTxTransaction+0x7c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a1b      	ldr	r2, [pc, #108]	; (80062f4 <SPI_EndRxTxTransaction+0x80>)
 8006286:	fba2 2303 	umull	r2, r3, r2, r3
 800628a:	0d5b      	lsrs	r3, r3, #21
 800628c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006290:	fb02 f303 	mul.w	r3, r2, r3
 8006294:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800629e:	d112      	bne.n	80062c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2200      	movs	r2, #0
 80062a8:	2180      	movs	r1, #128	; 0x80
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f7ff ff78 	bl	80061a0 <SPI_WaitFlagStateUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d016      	beq.n	80062e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ba:	f043 0220 	orr.w	r2, r3, #32
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e00f      	b.n	80062e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062dc:	2b80      	cmp	r3, #128	; 0x80
 80062de:	d0f2      	beq.n	80062c6 <SPI_EndRxTxTransaction+0x52>
 80062e0:	e000      	b.n	80062e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80062e2:	bf00      	nop
  }

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20000000 	.word	0x20000000
 80062f4:	165e9f81 	.word	0x165e9f81

080062f8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e034      	b.n	8006378 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d106      	bne.n	8006328 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f7fb fbda 	bl	8001adc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3308      	adds	r3, #8
 8006330:	4619      	mov	r1, r3
 8006332:	4610      	mov	r0, r2
 8006334:	f000 fc0a 	bl	8006b4c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	461a      	mov	r2, r3
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	f000 fc72 	bl	8006c2c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6858      	ldr	r0, [r3, #4]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	689a      	ldr	r2, [r3, #8]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	f000 fcbd 	bl	8006cd4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	6892      	ldr	r2, [r2, #8]
 8006362:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	6892      	ldr	r2, [r2, #8]
 800636e:	f041 0101 	orr.w	r1, r1, #1
 8006372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e03f      	b.n	8006412 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d106      	bne.n	80063ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7fb fae0 	bl	800196c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2224      	movs	r2, #36	; 0x24
 80063b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f829 	bl	800641c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	691a      	ldr	r2, [r3, #16]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	695a      	ldr	r2, [r3, #20]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68da      	ldr	r2, [r3, #12]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2220      	movs	r2, #32
 8006404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800641c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006420:	b085      	sub	sp, #20
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68da      	ldr	r2, [r3, #12]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	431a      	orrs	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	431a      	orrs	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800645e:	f023 030c 	bic.w	r3, r3, #12
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6812      	ldr	r2, [r2, #0]
 8006466:	68f9      	ldr	r1, [r7, #12]
 8006468:	430b      	orrs	r3, r1
 800646a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800648a:	f040 8199 	bne.w	80067c0 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4ac6      	ldr	r2, [pc, #792]	; (80067ac <UART_SetConfig+0x390>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00f      	beq.n	80064b8 <UART_SetConfig+0x9c>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4ac4      	ldr	r2, [pc, #784]	; (80067b0 <UART_SetConfig+0x394>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d00a      	beq.n	80064b8 <UART_SetConfig+0x9c>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4ac3      	ldr	r2, [pc, #780]	; (80067b4 <UART_SetConfig+0x398>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d005      	beq.n	80064b8 <UART_SetConfig+0x9c>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4ac1      	ldr	r2, [pc, #772]	; (80067b8 <UART_SetConfig+0x39c>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	f040 80bd 	bne.w	8006632 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064b8:	f7fd ffee 	bl	8004498 <HAL_RCC_GetPCLK2Freq>
 80064bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	461d      	mov	r5, r3
 80064c2:	f04f 0600 	mov.w	r6, #0
 80064c6:	46a8      	mov	r8, r5
 80064c8:	46b1      	mov	r9, r6
 80064ca:	eb18 0308 	adds.w	r3, r8, r8
 80064ce:	eb49 0409 	adc.w	r4, r9, r9
 80064d2:	4698      	mov	r8, r3
 80064d4:	46a1      	mov	r9, r4
 80064d6:	eb18 0805 	adds.w	r8, r8, r5
 80064da:	eb49 0906 	adc.w	r9, r9, r6
 80064de:	f04f 0100 	mov.w	r1, #0
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80064ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80064ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80064f2:	4688      	mov	r8, r1
 80064f4:	4691      	mov	r9, r2
 80064f6:	eb18 0005 	adds.w	r0, r8, r5
 80064fa:	eb49 0106 	adc.w	r1, r9, r6
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	461d      	mov	r5, r3
 8006504:	f04f 0600 	mov.w	r6, #0
 8006508:	196b      	adds	r3, r5, r5
 800650a:	eb46 0406 	adc.w	r4, r6, r6
 800650e:	461a      	mov	r2, r3
 8006510:	4623      	mov	r3, r4
 8006512:	f7f9 fedd 	bl	80002d0 <__aeabi_uldivmod>
 8006516:	4603      	mov	r3, r0
 8006518:	460c      	mov	r4, r1
 800651a:	461a      	mov	r2, r3
 800651c:	4ba7      	ldr	r3, [pc, #668]	; (80067bc <UART_SetConfig+0x3a0>)
 800651e:	fba3 2302 	umull	r2, r3, r3, r2
 8006522:	095b      	lsrs	r3, r3, #5
 8006524:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	461d      	mov	r5, r3
 800652c:	f04f 0600 	mov.w	r6, #0
 8006530:	46a9      	mov	r9, r5
 8006532:	46b2      	mov	sl, r6
 8006534:	eb19 0309 	adds.w	r3, r9, r9
 8006538:	eb4a 040a 	adc.w	r4, sl, sl
 800653c:	4699      	mov	r9, r3
 800653e:	46a2      	mov	sl, r4
 8006540:	eb19 0905 	adds.w	r9, r9, r5
 8006544:	eb4a 0a06 	adc.w	sl, sl, r6
 8006548:	f04f 0100 	mov.w	r1, #0
 800654c:	f04f 0200 	mov.w	r2, #0
 8006550:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006554:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006558:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800655c:	4689      	mov	r9, r1
 800655e:	4692      	mov	sl, r2
 8006560:	eb19 0005 	adds.w	r0, r9, r5
 8006564:	eb4a 0106 	adc.w	r1, sl, r6
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	461d      	mov	r5, r3
 800656e:	f04f 0600 	mov.w	r6, #0
 8006572:	196b      	adds	r3, r5, r5
 8006574:	eb46 0406 	adc.w	r4, r6, r6
 8006578:	461a      	mov	r2, r3
 800657a:	4623      	mov	r3, r4
 800657c:	f7f9 fea8 	bl	80002d0 <__aeabi_uldivmod>
 8006580:	4603      	mov	r3, r0
 8006582:	460c      	mov	r4, r1
 8006584:	461a      	mov	r2, r3
 8006586:	4b8d      	ldr	r3, [pc, #564]	; (80067bc <UART_SetConfig+0x3a0>)
 8006588:	fba3 1302 	umull	r1, r3, r3, r2
 800658c:	095b      	lsrs	r3, r3, #5
 800658e:	2164      	movs	r1, #100	; 0x64
 8006590:	fb01 f303 	mul.w	r3, r1, r3
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	3332      	adds	r3, #50	; 0x32
 800659a:	4a88      	ldr	r2, [pc, #544]	; (80067bc <UART_SetConfig+0x3a0>)
 800659c:	fba2 2303 	umull	r2, r3, r2, r3
 80065a0:	095b      	lsrs	r3, r3, #5
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065a8:	4498      	add	r8, r3
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	461d      	mov	r5, r3
 80065ae:	f04f 0600 	mov.w	r6, #0
 80065b2:	46a9      	mov	r9, r5
 80065b4:	46b2      	mov	sl, r6
 80065b6:	eb19 0309 	adds.w	r3, r9, r9
 80065ba:	eb4a 040a 	adc.w	r4, sl, sl
 80065be:	4699      	mov	r9, r3
 80065c0:	46a2      	mov	sl, r4
 80065c2:	eb19 0905 	adds.w	r9, r9, r5
 80065c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80065ca:	f04f 0100 	mov.w	r1, #0
 80065ce:	f04f 0200 	mov.w	r2, #0
 80065d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065de:	4689      	mov	r9, r1
 80065e0:	4692      	mov	sl, r2
 80065e2:	eb19 0005 	adds.w	r0, r9, r5
 80065e6:	eb4a 0106 	adc.w	r1, sl, r6
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	461d      	mov	r5, r3
 80065f0:	f04f 0600 	mov.w	r6, #0
 80065f4:	196b      	adds	r3, r5, r5
 80065f6:	eb46 0406 	adc.w	r4, r6, r6
 80065fa:	461a      	mov	r2, r3
 80065fc:	4623      	mov	r3, r4
 80065fe:	f7f9 fe67 	bl	80002d0 <__aeabi_uldivmod>
 8006602:	4603      	mov	r3, r0
 8006604:	460c      	mov	r4, r1
 8006606:	461a      	mov	r2, r3
 8006608:	4b6c      	ldr	r3, [pc, #432]	; (80067bc <UART_SetConfig+0x3a0>)
 800660a:	fba3 1302 	umull	r1, r3, r3, r2
 800660e:	095b      	lsrs	r3, r3, #5
 8006610:	2164      	movs	r1, #100	; 0x64
 8006612:	fb01 f303 	mul.w	r3, r1, r3
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	00db      	lsls	r3, r3, #3
 800661a:	3332      	adds	r3, #50	; 0x32
 800661c:	4a67      	ldr	r2, [pc, #412]	; (80067bc <UART_SetConfig+0x3a0>)
 800661e:	fba2 2303 	umull	r2, r3, r2, r3
 8006622:	095b      	lsrs	r3, r3, #5
 8006624:	f003 0207 	and.w	r2, r3, #7
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4442      	add	r2, r8
 800662e:	609a      	str	r2, [r3, #8]
 8006630:	e27d      	b.n	8006b2e <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006632:	f7fd ff1d 	bl	8004470 <HAL_RCC_GetPCLK1Freq>
 8006636:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	461d      	mov	r5, r3
 800663c:	f04f 0600 	mov.w	r6, #0
 8006640:	46a8      	mov	r8, r5
 8006642:	46b1      	mov	r9, r6
 8006644:	eb18 0308 	adds.w	r3, r8, r8
 8006648:	eb49 0409 	adc.w	r4, r9, r9
 800664c:	4698      	mov	r8, r3
 800664e:	46a1      	mov	r9, r4
 8006650:	eb18 0805 	adds.w	r8, r8, r5
 8006654:	eb49 0906 	adc.w	r9, r9, r6
 8006658:	f04f 0100 	mov.w	r1, #0
 800665c:	f04f 0200 	mov.w	r2, #0
 8006660:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006664:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006668:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800666c:	4688      	mov	r8, r1
 800666e:	4691      	mov	r9, r2
 8006670:	eb18 0005 	adds.w	r0, r8, r5
 8006674:	eb49 0106 	adc.w	r1, r9, r6
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	461d      	mov	r5, r3
 800667e:	f04f 0600 	mov.w	r6, #0
 8006682:	196b      	adds	r3, r5, r5
 8006684:	eb46 0406 	adc.w	r4, r6, r6
 8006688:	461a      	mov	r2, r3
 800668a:	4623      	mov	r3, r4
 800668c:	f7f9 fe20 	bl	80002d0 <__aeabi_uldivmod>
 8006690:	4603      	mov	r3, r0
 8006692:	460c      	mov	r4, r1
 8006694:	461a      	mov	r2, r3
 8006696:	4b49      	ldr	r3, [pc, #292]	; (80067bc <UART_SetConfig+0x3a0>)
 8006698:	fba3 2302 	umull	r2, r3, r3, r2
 800669c:	095b      	lsrs	r3, r3, #5
 800669e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	461d      	mov	r5, r3
 80066a6:	f04f 0600 	mov.w	r6, #0
 80066aa:	46a9      	mov	r9, r5
 80066ac:	46b2      	mov	sl, r6
 80066ae:	eb19 0309 	adds.w	r3, r9, r9
 80066b2:	eb4a 040a 	adc.w	r4, sl, sl
 80066b6:	4699      	mov	r9, r3
 80066b8:	46a2      	mov	sl, r4
 80066ba:	eb19 0905 	adds.w	r9, r9, r5
 80066be:	eb4a 0a06 	adc.w	sl, sl, r6
 80066c2:	f04f 0100 	mov.w	r1, #0
 80066c6:	f04f 0200 	mov.w	r2, #0
 80066ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066d6:	4689      	mov	r9, r1
 80066d8:	4692      	mov	sl, r2
 80066da:	eb19 0005 	adds.w	r0, r9, r5
 80066de:	eb4a 0106 	adc.w	r1, sl, r6
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	461d      	mov	r5, r3
 80066e8:	f04f 0600 	mov.w	r6, #0
 80066ec:	196b      	adds	r3, r5, r5
 80066ee:	eb46 0406 	adc.w	r4, r6, r6
 80066f2:	461a      	mov	r2, r3
 80066f4:	4623      	mov	r3, r4
 80066f6:	f7f9 fdeb 	bl	80002d0 <__aeabi_uldivmod>
 80066fa:	4603      	mov	r3, r0
 80066fc:	460c      	mov	r4, r1
 80066fe:	461a      	mov	r2, r3
 8006700:	4b2e      	ldr	r3, [pc, #184]	; (80067bc <UART_SetConfig+0x3a0>)
 8006702:	fba3 1302 	umull	r1, r3, r3, r2
 8006706:	095b      	lsrs	r3, r3, #5
 8006708:	2164      	movs	r1, #100	; 0x64
 800670a:	fb01 f303 	mul.w	r3, r1, r3
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	00db      	lsls	r3, r3, #3
 8006712:	3332      	adds	r3, #50	; 0x32
 8006714:	4a29      	ldr	r2, [pc, #164]	; (80067bc <UART_SetConfig+0x3a0>)
 8006716:	fba2 2303 	umull	r2, r3, r2, r3
 800671a:	095b      	lsrs	r3, r3, #5
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006722:	4498      	add	r8, r3
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	461d      	mov	r5, r3
 8006728:	f04f 0600 	mov.w	r6, #0
 800672c:	46a9      	mov	r9, r5
 800672e:	46b2      	mov	sl, r6
 8006730:	eb19 0309 	adds.w	r3, r9, r9
 8006734:	eb4a 040a 	adc.w	r4, sl, sl
 8006738:	4699      	mov	r9, r3
 800673a:	46a2      	mov	sl, r4
 800673c:	eb19 0905 	adds.w	r9, r9, r5
 8006740:	eb4a 0a06 	adc.w	sl, sl, r6
 8006744:	f04f 0100 	mov.w	r1, #0
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006750:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006754:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006758:	4689      	mov	r9, r1
 800675a:	4692      	mov	sl, r2
 800675c:	eb19 0005 	adds.w	r0, r9, r5
 8006760:	eb4a 0106 	adc.w	r1, sl, r6
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	461d      	mov	r5, r3
 800676a:	f04f 0600 	mov.w	r6, #0
 800676e:	196b      	adds	r3, r5, r5
 8006770:	eb46 0406 	adc.w	r4, r6, r6
 8006774:	461a      	mov	r2, r3
 8006776:	4623      	mov	r3, r4
 8006778:	f7f9 fdaa 	bl	80002d0 <__aeabi_uldivmod>
 800677c:	4603      	mov	r3, r0
 800677e:	460c      	mov	r4, r1
 8006780:	461a      	mov	r2, r3
 8006782:	4b0e      	ldr	r3, [pc, #56]	; (80067bc <UART_SetConfig+0x3a0>)
 8006784:	fba3 1302 	umull	r1, r3, r3, r2
 8006788:	095b      	lsrs	r3, r3, #5
 800678a:	2164      	movs	r1, #100	; 0x64
 800678c:	fb01 f303 	mul.w	r3, r1, r3
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	3332      	adds	r3, #50	; 0x32
 8006796:	4a09      	ldr	r2, [pc, #36]	; (80067bc <UART_SetConfig+0x3a0>)
 8006798:	fba2 2303 	umull	r2, r3, r2, r3
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	f003 0207 	and.w	r2, r3, #7
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4442      	add	r2, r8
 80067a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80067aa:	e1c0      	b.n	8006b2e <UART_SetConfig+0x712>
 80067ac:	40011000 	.word	0x40011000
 80067b0:	40011400 	.word	0x40011400
 80067b4:	40011800 	.word	0x40011800
 80067b8:	40011c00 	.word	0x40011c00
 80067bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4adc      	ldr	r2, [pc, #880]	; (8006b38 <UART_SetConfig+0x71c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d00f      	beq.n	80067ea <UART_SetConfig+0x3ce>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4adb      	ldr	r2, [pc, #876]	; (8006b3c <UART_SetConfig+0x720>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d00a      	beq.n	80067ea <UART_SetConfig+0x3ce>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4ad9      	ldr	r2, [pc, #868]	; (8006b40 <UART_SetConfig+0x724>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d005      	beq.n	80067ea <UART_SetConfig+0x3ce>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4ad8      	ldr	r2, [pc, #864]	; (8006b44 <UART_SetConfig+0x728>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	f040 80d1 	bne.w	800698c <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 80067ea:	f7fd fe55 	bl	8004498 <HAL_RCC_GetPCLK2Freq>
 80067ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	469a      	mov	sl, r3
 80067f4:	f04f 0b00 	mov.w	fp, #0
 80067f8:	46d0      	mov	r8, sl
 80067fa:	46d9      	mov	r9, fp
 80067fc:	eb18 0308 	adds.w	r3, r8, r8
 8006800:	eb49 0409 	adc.w	r4, r9, r9
 8006804:	4698      	mov	r8, r3
 8006806:	46a1      	mov	r9, r4
 8006808:	eb18 080a 	adds.w	r8, r8, sl
 800680c:	eb49 090b 	adc.w	r9, r9, fp
 8006810:	f04f 0100 	mov.w	r1, #0
 8006814:	f04f 0200 	mov.w	r2, #0
 8006818:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800681c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006820:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006824:	4688      	mov	r8, r1
 8006826:	4691      	mov	r9, r2
 8006828:	eb1a 0508 	adds.w	r5, sl, r8
 800682c:	eb4b 0609 	adc.w	r6, fp, r9
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	4619      	mov	r1, r3
 8006836:	f04f 0200 	mov.w	r2, #0
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	f04f 0400 	mov.w	r4, #0
 8006842:	0094      	lsls	r4, r2, #2
 8006844:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006848:	008b      	lsls	r3, r1, #2
 800684a:	461a      	mov	r2, r3
 800684c:	4623      	mov	r3, r4
 800684e:	4628      	mov	r0, r5
 8006850:	4631      	mov	r1, r6
 8006852:	f7f9 fd3d 	bl	80002d0 <__aeabi_uldivmod>
 8006856:	4603      	mov	r3, r0
 8006858:	460c      	mov	r4, r1
 800685a:	461a      	mov	r2, r3
 800685c:	4bba      	ldr	r3, [pc, #744]	; (8006b48 <UART_SetConfig+0x72c>)
 800685e:	fba3 2302 	umull	r2, r3, r3, r2
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	469b      	mov	fp, r3
 800686c:	f04f 0c00 	mov.w	ip, #0
 8006870:	46d9      	mov	r9, fp
 8006872:	46e2      	mov	sl, ip
 8006874:	eb19 0309 	adds.w	r3, r9, r9
 8006878:	eb4a 040a 	adc.w	r4, sl, sl
 800687c:	4699      	mov	r9, r3
 800687e:	46a2      	mov	sl, r4
 8006880:	eb19 090b 	adds.w	r9, r9, fp
 8006884:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006888:	f04f 0100 	mov.w	r1, #0
 800688c:	f04f 0200 	mov.w	r2, #0
 8006890:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006894:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006898:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800689c:	4689      	mov	r9, r1
 800689e:	4692      	mov	sl, r2
 80068a0:	eb1b 0509 	adds.w	r5, fp, r9
 80068a4:	eb4c 060a 	adc.w	r6, ip, sl
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	4619      	mov	r1, r3
 80068ae:	f04f 0200 	mov.w	r2, #0
 80068b2:	f04f 0300 	mov.w	r3, #0
 80068b6:	f04f 0400 	mov.w	r4, #0
 80068ba:	0094      	lsls	r4, r2, #2
 80068bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068c0:	008b      	lsls	r3, r1, #2
 80068c2:	461a      	mov	r2, r3
 80068c4:	4623      	mov	r3, r4
 80068c6:	4628      	mov	r0, r5
 80068c8:	4631      	mov	r1, r6
 80068ca:	f7f9 fd01 	bl	80002d0 <__aeabi_uldivmod>
 80068ce:	4603      	mov	r3, r0
 80068d0:	460c      	mov	r4, r1
 80068d2:	461a      	mov	r2, r3
 80068d4:	4b9c      	ldr	r3, [pc, #624]	; (8006b48 <UART_SetConfig+0x72c>)
 80068d6:	fba3 1302 	umull	r1, r3, r3, r2
 80068da:	095b      	lsrs	r3, r3, #5
 80068dc:	2164      	movs	r1, #100	; 0x64
 80068de:	fb01 f303 	mul.w	r3, r1, r3
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	011b      	lsls	r3, r3, #4
 80068e6:	3332      	adds	r3, #50	; 0x32
 80068e8:	4a97      	ldr	r2, [pc, #604]	; (8006b48 <UART_SetConfig+0x72c>)
 80068ea:	fba2 2303 	umull	r2, r3, r2, r3
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068f4:	4498      	add	r8, r3
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	469b      	mov	fp, r3
 80068fa:	f04f 0c00 	mov.w	ip, #0
 80068fe:	46d9      	mov	r9, fp
 8006900:	46e2      	mov	sl, ip
 8006902:	eb19 0309 	adds.w	r3, r9, r9
 8006906:	eb4a 040a 	adc.w	r4, sl, sl
 800690a:	4699      	mov	r9, r3
 800690c:	46a2      	mov	sl, r4
 800690e:	eb19 090b 	adds.w	r9, r9, fp
 8006912:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006916:	f04f 0100 	mov.w	r1, #0
 800691a:	f04f 0200 	mov.w	r2, #0
 800691e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006922:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006926:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800692a:	4689      	mov	r9, r1
 800692c:	4692      	mov	sl, r2
 800692e:	eb1b 0509 	adds.w	r5, fp, r9
 8006932:	eb4c 060a 	adc.w	r6, ip, sl
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	4619      	mov	r1, r3
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	f04f 0400 	mov.w	r4, #0
 8006948:	0094      	lsls	r4, r2, #2
 800694a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800694e:	008b      	lsls	r3, r1, #2
 8006950:	461a      	mov	r2, r3
 8006952:	4623      	mov	r3, r4
 8006954:	4628      	mov	r0, r5
 8006956:	4631      	mov	r1, r6
 8006958:	f7f9 fcba 	bl	80002d0 <__aeabi_uldivmod>
 800695c:	4603      	mov	r3, r0
 800695e:	460c      	mov	r4, r1
 8006960:	461a      	mov	r2, r3
 8006962:	4b79      	ldr	r3, [pc, #484]	; (8006b48 <UART_SetConfig+0x72c>)
 8006964:	fba3 1302 	umull	r1, r3, r3, r2
 8006968:	095b      	lsrs	r3, r3, #5
 800696a:	2164      	movs	r1, #100	; 0x64
 800696c:	fb01 f303 	mul.w	r3, r1, r3
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	011b      	lsls	r3, r3, #4
 8006974:	3332      	adds	r3, #50	; 0x32
 8006976:	4a74      	ldr	r2, [pc, #464]	; (8006b48 <UART_SetConfig+0x72c>)
 8006978:	fba2 2303 	umull	r2, r3, r2, r3
 800697c:	095b      	lsrs	r3, r3, #5
 800697e:	f003 020f 	and.w	r2, r3, #15
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4442      	add	r2, r8
 8006988:	609a      	str	r2, [r3, #8]
 800698a:	e0d0      	b.n	8006b2e <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 800698c:	f7fd fd70 	bl	8004470 <HAL_RCC_GetPCLK1Freq>
 8006990:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	469a      	mov	sl, r3
 8006996:	f04f 0b00 	mov.w	fp, #0
 800699a:	46d0      	mov	r8, sl
 800699c:	46d9      	mov	r9, fp
 800699e:	eb18 0308 	adds.w	r3, r8, r8
 80069a2:	eb49 0409 	adc.w	r4, r9, r9
 80069a6:	4698      	mov	r8, r3
 80069a8:	46a1      	mov	r9, r4
 80069aa:	eb18 080a 	adds.w	r8, r8, sl
 80069ae:	eb49 090b 	adc.w	r9, r9, fp
 80069b2:	f04f 0100 	mov.w	r1, #0
 80069b6:	f04f 0200 	mov.w	r2, #0
 80069ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80069be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80069c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80069c6:	4688      	mov	r8, r1
 80069c8:	4691      	mov	r9, r2
 80069ca:	eb1a 0508 	adds.w	r5, sl, r8
 80069ce:	eb4b 0609 	adc.w	r6, fp, r9
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	4619      	mov	r1, r3
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	f04f 0300 	mov.w	r3, #0
 80069e0:	f04f 0400 	mov.w	r4, #0
 80069e4:	0094      	lsls	r4, r2, #2
 80069e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069ea:	008b      	lsls	r3, r1, #2
 80069ec:	461a      	mov	r2, r3
 80069ee:	4623      	mov	r3, r4
 80069f0:	4628      	mov	r0, r5
 80069f2:	4631      	mov	r1, r6
 80069f4:	f7f9 fc6c 	bl	80002d0 <__aeabi_uldivmod>
 80069f8:	4603      	mov	r3, r0
 80069fa:	460c      	mov	r4, r1
 80069fc:	461a      	mov	r2, r3
 80069fe:	4b52      	ldr	r3, [pc, #328]	; (8006b48 <UART_SetConfig+0x72c>)
 8006a00:	fba3 2302 	umull	r2, r3, r3, r2
 8006a04:	095b      	lsrs	r3, r3, #5
 8006a06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	469b      	mov	fp, r3
 8006a0e:	f04f 0c00 	mov.w	ip, #0
 8006a12:	46d9      	mov	r9, fp
 8006a14:	46e2      	mov	sl, ip
 8006a16:	eb19 0309 	adds.w	r3, r9, r9
 8006a1a:	eb4a 040a 	adc.w	r4, sl, sl
 8006a1e:	4699      	mov	r9, r3
 8006a20:	46a2      	mov	sl, r4
 8006a22:	eb19 090b 	adds.w	r9, r9, fp
 8006a26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a2a:	f04f 0100 	mov.w	r1, #0
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a3e:	4689      	mov	r9, r1
 8006a40:	4692      	mov	sl, r2
 8006a42:	eb1b 0509 	adds.w	r5, fp, r9
 8006a46:	eb4c 060a 	adc.w	r6, ip, sl
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	f04f 0300 	mov.w	r3, #0
 8006a58:	f04f 0400 	mov.w	r4, #0
 8006a5c:	0094      	lsls	r4, r2, #2
 8006a5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a62:	008b      	lsls	r3, r1, #2
 8006a64:	461a      	mov	r2, r3
 8006a66:	4623      	mov	r3, r4
 8006a68:	4628      	mov	r0, r5
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	f7f9 fc30 	bl	80002d0 <__aeabi_uldivmod>
 8006a70:	4603      	mov	r3, r0
 8006a72:	460c      	mov	r4, r1
 8006a74:	461a      	mov	r2, r3
 8006a76:	4b34      	ldr	r3, [pc, #208]	; (8006b48 <UART_SetConfig+0x72c>)
 8006a78:	fba3 1302 	umull	r1, r3, r3, r2
 8006a7c:	095b      	lsrs	r3, r3, #5
 8006a7e:	2164      	movs	r1, #100	; 0x64
 8006a80:	fb01 f303 	mul.w	r3, r1, r3
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	3332      	adds	r3, #50	; 0x32
 8006a8a:	4a2f      	ldr	r2, [pc, #188]	; (8006b48 <UART_SetConfig+0x72c>)
 8006a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a90:	095b      	lsrs	r3, r3, #5
 8006a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a96:	4498      	add	r8, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	469b      	mov	fp, r3
 8006a9c:	f04f 0c00 	mov.w	ip, #0
 8006aa0:	46d9      	mov	r9, fp
 8006aa2:	46e2      	mov	sl, ip
 8006aa4:	eb19 0309 	adds.w	r3, r9, r9
 8006aa8:	eb4a 040a 	adc.w	r4, sl, sl
 8006aac:	4699      	mov	r9, r3
 8006aae:	46a2      	mov	sl, r4
 8006ab0:	eb19 090b 	adds.w	r9, r9, fp
 8006ab4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ab8:	f04f 0100 	mov.w	r1, #0
 8006abc:	f04f 0200 	mov.w	r2, #0
 8006ac0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ac4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ac8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006acc:	4689      	mov	r9, r1
 8006ace:	4692      	mov	sl, r2
 8006ad0:	eb1b 0509 	adds.w	r5, fp, r9
 8006ad4:	eb4c 060a 	adc.w	r6, ip, sl
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	4619      	mov	r1, r3
 8006ade:	f04f 0200 	mov.w	r2, #0
 8006ae2:	f04f 0300 	mov.w	r3, #0
 8006ae6:	f04f 0400 	mov.w	r4, #0
 8006aea:	0094      	lsls	r4, r2, #2
 8006aec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006af0:	008b      	lsls	r3, r1, #2
 8006af2:	461a      	mov	r2, r3
 8006af4:	4623      	mov	r3, r4
 8006af6:	4628      	mov	r0, r5
 8006af8:	4631      	mov	r1, r6
 8006afa:	f7f9 fbe9 	bl	80002d0 <__aeabi_uldivmod>
 8006afe:	4603      	mov	r3, r0
 8006b00:	460c      	mov	r4, r1
 8006b02:	461a      	mov	r2, r3
 8006b04:	4b10      	ldr	r3, [pc, #64]	; (8006b48 <UART_SetConfig+0x72c>)
 8006b06:	fba3 1302 	umull	r1, r3, r3, r2
 8006b0a:	095b      	lsrs	r3, r3, #5
 8006b0c:	2164      	movs	r1, #100	; 0x64
 8006b0e:	fb01 f303 	mul.w	r3, r1, r3
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	011b      	lsls	r3, r3, #4
 8006b16:	3332      	adds	r3, #50	; 0x32
 8006b18:	4a0b      	ldr	r2, [pc, #44]	; (8006b48 <UART_SetConfig+0x72c>)
 8006b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1e:	095b      	lsrs	r3, r3, #5
 8006b20:	f003 020f 	and.w	r2, r3, #15
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4442      	add	r2, r8
 8006b2a:	609a      	str	r2, [r3, #8]
}
 8006b2c:	e7ff      	b.n	8006b2e <UART_SetConfig+0x712>
 8006b2e:	bf00      	nop
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b38:	40011000 	.word	0x40011000
 8006b3c:	40011400 	.word	0x40011400
 8006b40:	40011800 	.word	0x40011800
 8006b44:	40011c00 	.word	0x40011c00
 8006b48:	51eb851f 	.word	0x51eb851f

08006b4c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b64:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	4b2f      	ldr	r3, [pc, #188]	; (8006c28 <FSMC_NORSRAM_Init+0xdc>)
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006b76:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006b7c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006b82:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006b88:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8006b8e:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006b94:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006b9a:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006ba0:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006ba6:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8006bac:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8006bb2:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8006bb8:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8006bbe:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	2b08      	cmp	r3, #8
 8006bcc:	d103      	bne.n	8006bd6 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bd4:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68f9      	ldr	r1, [r7, #12]
 8006bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bea:	d10a      	bne.n	8006c02 <FSMC_NORSRAM_Init+0xb6>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d006      	beq.n	8006c02 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d006      	beq.n	8006c18 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	ffc00480 	.word	0xffc00480

08006c2c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c46:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006c4e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006c5a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006c62:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006c6a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006c74:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	3b02      	subs	r3, #2
 8006c7c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006c7e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006c84:	4313      	orrs	r3, r2
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6979      	ldr	r1, [r7, #20]
 8006c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ca0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ca4:	d10e      	bne.n	8006cc4 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006cae:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	051b      	lsls	r3, r3, #20
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	371c      	adds	r7, #28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
	...

08006cd4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cec:	d122      	bne.n	8006d34 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	4b15      	ldr	r3, [pc, #84]	; (8006d50 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006d0a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006d12:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006d1a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006d20:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	6979      	ldr	r1, [r7, #20]
 8006d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006d32:	e005      	b.n	8006d40 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	371c      	adds	r7, #28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	cff00000 	.word	0xcff00000

08006d54 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006d54:	b084      	sub	sp, #16
 8006d56:	b480      	push	{r7}
 8006d58:	b085      	sub	sp, #20
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	f107 001c 	add.w	r0, r7, #28
 8006d62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006d6a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006d6e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006d72:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006d76:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006d7a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006d7e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006d8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	431a      	orrs	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	b004      	add	sp, #16
 8006da8:	4770      	bx	lr

08006daa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2203      	movs	r2, #3
 8006df2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006df4:	2002      	movs	r0, #2
 8006df6:	f7fb fcb5 	bl	8002764 <HAL_Delay>
  
  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0303 	and.w	r3, r3, #3
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006e3e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006e44:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006e4a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006e5a:	f023 030f 	bic.w	r3, r3, #15
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	431a      	orrs	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	b2db      	uxtb	r3, r3
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b085      	sub	sp, #20
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	3314      	adds	r3, #20
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
}  
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006eda:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006ee0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006ee6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0

}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006f1a:	2310      	movs	r3, #16
 8006f1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f1e:	2340      	movs	r3, #64	; 0x40
 8006f20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f22:	2300      	movs	r3, #0
 8006f24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f2c:	f107 0308 	add.w	r3, r7, #8
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7ff ff74 	bl	8006e20 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f3c:	2110      	movs	r1, #16
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f9fe 	bl	8007340 <SDMMC_GetCmdResp1>
 8006f44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f46:	69fb      	ldr	r3, [r7, #28]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3720      	adds	r7, #32
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b088      	sub	sp, #32
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006f5e:	2311      	movs	r3, #17
 8006f60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f62:	2340      	movs	r3, #64	; 0x40
 8006f64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f66:	2300      	movs	r3, #0
 8006f68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f70:	f107 0308 	add.w	r3, r7, #8
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7ff ff52 	bl	8006e20 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f80:	2111      	movs	r1, #17
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f9dc 	bl	8007340 <SDMMC_GetCmdResp1>
 8006f88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f8a:	69fb      	ldr	r3, [r7, #28]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3720      	adds	r7, #32
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006fa2:	2312      	movs	r3, #18
 8006fa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006fa6:	2340      	movs	r3, #64	; 0x40
 8006fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fb4:	f107 0308 	add.w	r3, r7, #8
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff ff30 	bl	8006e20 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fc4:	2112      	movs	r1, #18
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f9ba 	bl	8007340 <SDMMC_GetCmdResp1>
 8006fcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fce:	69fb      	ldr	r3, [r7, #28]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3720      	adds	r7, #32
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006fe6:	2318      	movs	r3, #24
 8006fe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006fea:	2340      	movs	r3, #64	; 0x40
 8006fec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ff6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ff8:	f107 0308 	add.w	r3, r7, #8
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff ff0e 	bl	8006e20 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007004:	f241 3288 	movw	r2, #5000	; 0x1388
 8007008:	2118      	movs	r1, #24
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f998 	bl	8007340 <SDMMC_GetCmdResp1>
 8007010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007012:	69fb      	ldr	r3, [r7, #28]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3720      	adds	r7, #32
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b088      	sub	sp, #32
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800702a:	2319      	movs	r3, #25
 800702c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800702e:	2340      	movs	r3, #64	; 0x40
 8007030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007032:	2300      	movs	r3, #0
 8007034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800703a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800703c:	f107 0308 	add.w	r3, r7, #8
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7ff feec 	bl	8006e20 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007048:	f241 3288 	movw	r2, #5000	; 0x1388
 800704c:	2119      	movs	r1, #25
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f976 	bl	8007340 <SDMMC_GetCmdResp1>
 8007054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007056:	69fb      	ldr	r3, [r7, #28]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3720      	adds	r7, #32
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800706c:	230c      	movs	r3, #12
 800706e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007070:	2340      	movs	r3, #64	; 0x40
 8007072:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007074:	2300      	movs	r3, #0
 8007076:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800707c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800707e:	f107 0308 	add.w	r3, r7, #8
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7ff fecb 	bl	8006e20 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800708a:	4a05      	ldr	r2, [pc, #20]	; (80070a0 <SDMMC_CmdStopTransfer+0x40>)
 800708c:	210c      	movs	r1, #12
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f956 	bl	8007340 <SDMMC_GetCmdResp1>
 8007094:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007096:	69fb      	ldr	r3, [r7, #28]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3720      	adds	r7, #32
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	05f5e100 	.word	0x05f5e100

080070a4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b08a      	sub	sp, #40	; 0x28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80070b4:	2307      	movs	r3, #7
 80070b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070b8:	2340      	movs	r3, #64	; 0x40
 80070ba:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070bc:	2300      	movs	r3, #0
 80070be:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070c4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070c6:	f107 0310 	add.w	r3, r7, #16
 80070ca:	4619      	mov	r1, r3
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f7ff fea7 	bl	8006e20 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80070d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d6:	2107      	movs	r1, #7
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 f931 	bl	8007340 <SDMMC_GetCmdResp1>
 80070de:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3728      	adds	r7, #40	; 0x28
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b088      	sub	sp, #32
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80070f6:	2300      	movs	r3, #0
 80070f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80070fa:	2300      	movs	r3, #0
 80070fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070fe:	2300      	movs	r3, #0
 8007100:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007106:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007108:	f107 0308 	add.w	r3, r7, #8
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7ff fe86 	bl	8006e20 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 f8eb 	bl	80072f0 <SDMMC_GetCmdError>
 800711a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800711c:	69fb      	ldr	r3, [r7, #28]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3720      	adds	r7, #32
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b088      	sub	sp, #32
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800712e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007132:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007134:	2308      	movs	r3, #8
 8007136:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007138:	2340      	movs	r3, #64	; 0x40
 800713a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800713c:	2300      	movs	r3, #0
 800713e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007144:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007146:	f107 0308 	add.w	r3, r7, #8
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7ff fe67 	bl	8006e20 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fad4 	bl	8007700 <SDMMC_GetCmdResp7>
 8007158:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800715a:	69fb      	ldr	r3, [r7, #28]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3720      	adds	r7, #32
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b088      	sub	sp, #32
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007172:	2337      	movs	r3, #55	; 0x37
 8007174:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007176:	2340      	movs	r3, #64	; 0x40
 8007178:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800717a:	2300      	movs	r3, #0
 800717c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800717e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007182:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007184:	f107 0308 	add.w	r3, r7, #8
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7ff fe48 	bl	8006e20 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007190:	f241 3288 	movw	r2, #5000	; 0x1388
 8007194:	2137      	movs	r1, #55	; 0x37
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f8d2 	bl	8007340 <SDMMC_GetCmdResp1>
 800719c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800719e:	69fb      	ldr	r3, [r7, #28]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3720      	adds	r7, #32
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b088      	sub	sp, #32
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80071be:	2329      	movs	r3, #41	; 0x29
 80071c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071c2:	2340      	movs	r3, #64	; 0x40
 80071c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071c6:	2300      	movs	r3, #0
 80071c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071d0:	f107 0308 	add.w	r3, r7, #8
 80071d4:	4619      	mov	r1, r3
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7ff fe22 	bl	8006e20 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f9e1 	bl	80075a4 <SDMMC_GetCmdResp3>
 80071e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071e4:	69fb      	ldr	r3, [r7, #28]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3720      	adds	r7, #32
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b088      	sub	sp, #32
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80071fa:	2302      	movs	r3, #2
 80071fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80071fe:	23c0      	movs	r3, #192	; 0xc0
 8007200:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007202:	2300      	movs	r3, #0
 8007204:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800720a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800720c:	f107 0308 	add.w	r3, r7, #8
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7ff fe04 	bl	8006e20 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f97d 	bl	8007518 <SDMMC_GetCmdResp2>
 800721e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007220:	69fb      	ldr	r3, [r7, #28]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3720      	adds	r7, #32
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b088      	sub	sp, #32
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007238:	2309      	movs	r3, #9
 800723a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800723c:	23c0      	movs	r3, #192	; 0xc0
 800723e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007240:	2300      	movs	r3, #0
 8007242:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007248:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800724a:	f107 0308 	add.w	r3, r7, #8
 800724e:	4619      	mov	r1, r3
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7ff fde5 	bl	8006e20 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f95e 	bl	8007518 <SDMMC_GetCmdResp2>
 800725c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800725e:	69fb      	ldr	r3, [r7, #28]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3720      	adds	r7, #32
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b088      	sub	sp, #32
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007272:	2300      	movs	r3, #0
 8007274:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007276:	2303      	movs	r3, #3
 8007278:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800727a:	2340      	movs	r3, #64	; 0x40
 800727c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800727e:	2300      	movs	r3, #0
 8007280:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007286:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007288:	f107 0308 	add.w	r3, r7, #8
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7ff fdc6 	bl	8006e20 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	2103      	movs	r1, #3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f9bd 	bl	8007618 <SDMMC_GetCmdResp6>
 800729e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072a0:	69fb      	ldr	r3, [r7, #28]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3720      	adds	r7, #32
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b088      	sub	sp, #32
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
 80072b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80072b8:	230d      	movs	r3, #13
 80072ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072bc:	2340      	movs	r3, #64	; 0x40
 80072be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072c0:	2300      	movs	r3, #0
 80072c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072ca:	f107 0308 	add.w	r3, r7, #8
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7ff fda5 	bl	8006e20 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80072d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80072da:	210d      	movs	r1, #13
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f82f 	bl	8007340 <SDMMC_GetCmdResp1>
 80072e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072e4:	69fb      	ldr	r3, [r7, #28]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3720      	adds	r7, #32
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
	...

080072f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80072f0:	b490      	push	{r4, r7}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80072f8:	4b0f      	ldr	r3, [pc, #60]	; (8007338 <SDMMC_GetCmdError+0x48>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a0f      	ldr	r2, [pc, #60]	; (800733c <SDMMC_GetCmdError+0x4c>)
 80072fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007302:	0a5b      	lsrs	r3, r3, #9
 8007304:	f241 3288 	movw	r2, #5000	; 0x1388
 8007308:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800730c:	4623      	mov	r3, r4
 800730e:	1e5c      	subs	r4, r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	d102      	bne.n	800731a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007314:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007318:	e009      	b.n	800732e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007322:	2b00      	cmp	r3, #0
 8007324:	d0f2      	beq.n	800730c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	22c5      	movs	r2, #197	; 0xc5
 800732a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bc90      	pop	{r4, r7}
 8007336:	4770      	bx	lr
 8007338:	20000000 	.word	0x20000000
 800733c:	10624dd3 	.word	0x10624dd3

08007340 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007340:	b590      	push	{r4, r7, lr}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	460b      	mov	r3, r1
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800734e:	4b6f      	ldr	r3, [pc, #444]	; (800750c <SDMMC_GetCmdResp1+0x1cc>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a6f      	ldr	r2, [pc, #444]	; (8007510 <SDMMC_GetCmdResp1+0x1d0>)
 8007354:	fba2 2303 	umull	r2, r3, r2, r3
 8007358:	0a5b      	lsrs	r3, r3, #9
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007360:	4623      	mov	r3, r4
 8007362:	1e5c      	subs	r4, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d102      	bne.n	800736e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007368:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800736c:	e0c9      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007372:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0f0      	beq.n	8007360 <SDMMC_GetCmdResp1+0x20>
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1eb      	bne.n	8007360 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b00      	cmp	r3, #0
 8007392:	d004      	beq.n	800739e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2204      	movs	r2, #4
 8007398:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800739a:	2304      	movs	r3, #4
 800739c:	e0b1      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d004      	beq.n	80073b4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2201      	movs	r2, #1
 80073ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e0a6      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	22c5      	movs	r2, #197	; 0xc5
 80073b8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f7ff fd5a 	bl	8006e74 <SDIO_GetCommandResponse>
 80073c0:	4603      	mov	r3, r0
 80073c2:	461a      	mov	r2, r3
 80073c4:	7afb      	ldrb	r3, [r7, #11]
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d001      	beq.n	80073ce <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e099      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80073ce:	2100      	movs	r1, #0
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f7ff fd5c 	bl	8006e8e <SDIO_GetResponse>
 80073d6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	4b4e      	ldr	r3, [pc, #312]	; (8007514 <SDMMC_GetCmdResp1+0x1d4>)
 80073dc:	4013      	ands	r3, r2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80073e2:	2300      	movs	r3, #0
 80073e4:	e08d      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	da02      	bge.n	80073f2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80073ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073f0:	e087      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d001      	beq.n	8007400 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80073fc:	2340      	movs	r3, #64	; 0x40
 80073fe:	e080      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800740a:	2380      	movs	r3, #128	; 0x80
 800740c:	e079      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800741c:	e071      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d002      	beq.n	800742e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800742c:	e069      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800743c:	e061      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d002      	beq.n	800744e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007448:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800744c:	e059      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800745c:	e051      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800746c:	e049      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007478:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800747c:	e041      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d002      	beq.n	800748e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8007488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800748c:	e039      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800749c:	e031      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d002      	beq.n	80074ae <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80074a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80074ac:	e029      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80074b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80074bc:	e021      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80074c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80074cc:	e019      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80074d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80074dc:	e011      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80074e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80074ec:	e009      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f003 0308 	and.w	r3, r3, #8
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80074f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80074fc:	e001      	b.n	8007502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80074fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007502:	4618      	mov	r0, r3
 8007504:	371c      	adds	r7, #28
 8007506:	46bd      	mov	sp, r7
 8007508:	bd90      	pop	{r4, r7, pc}
 800750a:	bf00      	nop
 800750c:	20000000 	.word	0x20000000
 8007510:	10624dd3 	.word	0x10624dd3
 8007514:	fdffe008 	.word	0xfdffe008

08007518 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007518:	b490      	push	{r4, r7}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007520:	4b1e      	ldr	r3, [pc, #120]	; (800759c <SDMMC_GetCmdResp2+0x84>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a1e      	ldr	r2, [pc, #120]	; (80075a0 <SDMMC_GetCmdResp2+0x88>)
 8007526:	fba2 2303 	umull	r2, r3, r2, r3
 800752a:	0a5b      	lsrs	r3, r3, #9
 800752c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007530:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007534:	4623      	mov	r3, r4
 8007536:	1e5c      	subs	r4, r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	d102      	bne.n	8007542 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800753c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007540:	e026      	b.n	8007590 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007546:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800754e:	2b00      	cmp	r3, #0
 8007550:	d0f0      	beq.n	8007534 <SDMMC_GetCmdResp2+0x1c>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1eb      	bne.n	8007534 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b00      	cmp	r3, #0
 8007566:	d004      	beq.n	8007572 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2204      	movs	r2, #4
 800756c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800756e:	2304      	movs	r3, #4
 8007570:	e00e      	b.n	8007590 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d004      	beq.n	8007588 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007584:	2301      	movs	r3, #1
 8007586:	e003      	b.n	8007590 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	22c5      	movs	r2, #197	; 0xc5
 800758c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bc90      	pop	{r4, r7}
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	20000000 	.word	0x20000000
 80075a0:	10624dd3 	.word	0x10624dd3

080075a4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80075a4:	b490      	push	{r4, r7}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80075ac:	4b18      	ldr	r3, [pc, #96]	; (8007610 <SDMMC_GetCmdResp3+0x6c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a18      	ldr	r2, [pc, #96]	; (8007614 <SDMMC_GetCmdResp3+0x70>)
 80075b2:	fba2 2303 	umull	r2, r3, r2, r3
 80075b6:	0a5b      	lsrs	r3, r3, #9
 80075b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80075bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80075c0:	4623      	mov	r3, r4
 80075c2:	1e5c      	subs	r4, r3, #1
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d102      	bne.n	80075ce <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80075c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075cc:	e01b      	b.n	8007606 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d0f0      	beq.n	80075c0 <SDMMC_GetCmdResp3+0x1c>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1eb      	bne.n	80075c0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d004      	beq.n	80075fe <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2204      	movs	r2, #4
 80075f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80075fa:	2304      	movs	r3, #4
 80075fc:	e003      	b.n	8007606 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	22c5      	movs	r2, #197	; 0xc5
 8007602:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bc90      	pop	{r4, r7}
 800760e:	4770      	bx	lr
 8007610:	20000000 	.word	0x20000000
 8007614:	10624dd3 	.word	0x10624dd3

08007618 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007618:	b590      	push	{r4, r7, lr}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	460b      	mov	r3, r1
 8007622:	607a      	str	r2, [r7, #4]
 8007624:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007626:	4b34      	ldr	r3, [pc, #208]	; (80076f8 <SDMMC_GetCmdResp6+0xe0>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a34      	ldr	r2, [pc, #208]	; (80076fc <SDMMC_GetCmdResp6+0xe4>)
 800762c:	fba2 2303 	umull	r2, r3, r2, r3
 8007630:	0a5b      	lsrs	r3, r3, #9
 8007632:	f241 3288 	movw	r2, #5000	; 0x1388
 8007636:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800763a:	4623      	mov	r3, r4
 800763c:	1e5c      	subs	r4, r3, #1
 800763e:	2b00      	cmp	r3, #0
 8007640:	d102      	bne.n	8007648 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007642:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007646:	e052      	b.n	80076ee <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800764c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007654:	2b00      	cmp	r3, #0
 8007656:	d0f0      	beq.n	800763a <SDMMC_GetCmdResp6+0x22>
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1eb      	bne.n	800763a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007666:	f003 0304 	and.w	r3, r3, #4
 800766a:	2b00      	cmp	r3, #0
 800766c:	d004      	beq.n	8007678 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2204      	movs	r2, #4
 8007672:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007674:	2304      	movs	r3, #4
 8007676:	e03a      	b.n	80076ee <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	2b00      	cmp	r3, #0
 8007682:	d004      	beq.n	800768e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2201      	movs	r2, #1
 8007688:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800768a:	2301      	movs	r3, #1
 800768c:	e02f      	b.n	80076ee <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f7ff fbf0 	bl	8006e74 <SDIO_GetCommandResponse>
 8007694:	4603      	mov	r3, r0
 8007696:	461a      	mov	r2, r3
 8007698:	7afb      	ldrb	r3, [r7, #11]
 800769a:	4293      	cmp	r3, r2
 800769c:	d001      	beq.n	80076a2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800769e:	2301      	movs	r3, #1
 80076a0:	e025      	b.n	80076ee <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	22c5      	movs	r2, #197	; 0xc5
 80076a6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80076a8:	2100      	movs	r1, #0
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f7ff fbef 	bl	8006e8e <SDIO_GetResponse>
 80076b0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d106      	bne.n	80076ca <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	0c1b      	lsrs	r3, r3, #16
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80076c6:	2300      	movs	r3, #0
 80076c8:	e011      	b.n	80076ee <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80076d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076d8:	e009      	b.n	80076ee <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d002      	beq.n	80076ea <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80076e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076e8:	e001      	b.n	80076ee <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80076ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	371c      	adds	r7, #28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd90      	pop	{r4, r7, pc}
 80076f6:	bf00      	nop
 80076f8:	20000000 	.word	0x20000000
 80076fc:	10624dd3 	.word	0x10624dd3

08007700 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007700:	b490      	push	{r4, r7}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007708:	4b21      	ldr	r3, [pc, #132]	; (8007790 <SDMMC_GetCmdResp7+0x90>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a21      	ldr	r2, [pc, #132]	; (8007794 <SDMMC_GetCmdResp7+0x94>)
 800770e:	fba2 2303 	umull	r2, r3, r2, r3
 8007712:	0a5b      	lsrs	r3, r3, #9
 8007714:	f241 3288 	movw	r2, #5000	; 0x1388
 8007718:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800771c:	4623      	mov	r3, r4
 800771e:	1e5c      	subs	r4, r3, #1
 8007720:	2b00      	cmp	r3, #0
 8007722:	d102      	bne.n	800772a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007724:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007728:	e02c      	b.n	8007784 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800772e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0f0      	beq.n	800771c <SDMMC_GetCmdResp7+0x1c>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1eb      	bne.n	800771c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b00      	cmp	r3, #0
 800774e:	d004      	beq.n	800775a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2204      	movs	r2, #4
 8007754:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007756:	2304      	movs	r3, #4
 8007758:	e014      	b.n	8007784 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	d004      	beq.n	8007770 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800776c:	2301      	movs	r3, #1
 800776e:	e009      	b.n	8007784 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2240      	movs	r2, #64	; 0x40
 8007780:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007782:	2300      	movs	r3, #0
  
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bc90      	pop	{r4, r7}
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	20000000 	.word	0x20000000
 8007794:	10624dd3 	.word	0x10624dd3

08007798 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800779c:	4904      	ldr	r1, [pc, #16]	; (80077b0 <MX_FATFS_Init+0x18>)
 800779e:	4805      	ldr	r0, [pc, #20]	; (80077b4 <MX_FATFS_Init+0x1c>)
 80077a0:	f000 f9d6 	bl	8007b50 <FATFS_LinkDriver>
 80077a4:	4603      	mov	r3, r0
 80077a6:	461a      	mov	r2, r3
 80077a8:	4b03      	ldr	r3, [pc, #12]	; (80077b8 <MX_FATFS_Init+0x20>)
 80077aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80077ac:	bf00      	nop
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	2000560c 	.word	0x2000560c
 80077b4:	08009010 	.word	0x08009010
 80077b8:	20005608 	.word	0x20005608

080077bc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80077c6:	f000 f86b 	bl	80078a0 <BSP_SD_IsDetected>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d001      	beq.n	80077d4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e005      	b.n	80077e0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80077d4:	4804      	ldr	r0, [pc, #16]	; (80077e8 <BSP_SD_Init+0x2c>)
 80077d6:	f7fd fb41 	bl	8004e5c <HAL_SD_Init>
 80077da:	4603      	mov	r3, r0
 80077dc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80077de:	79fb      	ldrb	r3, [r7, #7]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	200033b4 	.word	0x200033b4

080077ec <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
 80077f8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	68f9      	ldr	r1, [r7, #12]
 8007808:	4806      	ldr	r0, [pc, #24]	; (8007824 <BSP_SD_ReadBlocks+0x38>)
 800780a:	f7fd fbb7 	bl	8004f7c <HAL_SD_ReadBlocks>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007818:	7dfb      	ldrb	r3, [r7, #23]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	200033b4 	.word	0x200033b4

08007828 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b088      	sub	sp, #32
 800782c:	af02      	add	r7, sp, #8
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
 8007834:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	68f9      	ldr	r1, [r7, #12]
 8007844:	4806      	ldr	r0, [pc, #24]	; (8007860 <BSP_SD_WriteBlocks+0x38>)
 8007846:	f7fd fd91 	bl	800536c <HAL_SD_WriteBlocks>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d001      	beq.n	8007854 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007854:	7dfb      	ldrb	r3, [r7, #23]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3718      	adds	r7, #24
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	200033b4 	.word	0x200033b4

08007864 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007868:	4805      	ldr	r0, [pc, #20]	; (8007880 <BSP_SD_GetCardState+0x1c>)
 800786a:	f7fe f8ef 	bl	8005a4c <HAL_SD_GetCardState>
 800786e:	4603      	mov	r3, r0
 8007870:	2b04      	cmp	r3, #4
 8007872:	bf14      	ite	ne
 8007874:	2301      	movne	r3, #1
 8007876:	2300      	moveq	r3, #0
 8007878:	b2db      	uxtb	r3, r3
}
 800787a:	4618      	mov	r0, r3
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	200033b4 	.word	0x200033b4

08007884 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800788c:	6879      	ldr	r1, [r7, #4]
 800788e:	4803      	ldr	r0, [pc, #12]	; (800789c <BSP_SD_GetCardInfo+0x18>)
 8007890:	f7fe f8b0 	bl	80059f4 <HAL_SD_GetCardInfo>
}
 8007894:	bf00      	nop
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	200033b4 	.word	0x200033b4

080078a0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80078a6:	2301      	movs	r3, #1
 80078a8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80078aa:	f000 f80b 	bl	80078c4 <BSP_PlatformIsDetected>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80078b4:	2300      	movs	r3, #0
 80078b6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80078b8:	79fb      	ldrb	r3, [r7, #7]
 80078ba:	b2db      	uxtb	r3, r3
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80078ca:	2301      	movs	r3, #1
 80078cc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80078ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80078d2:	4806      	ldr	r0, [pc, #24]	; (80078ec <BSP_PlatformIsDetected+0x28>)
 80078d4:	f7fc fb34 	bl	8003f40 <HAL_GPIO_ReadPin>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80078de:	2300      	movs	r3, #0
 80078e0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80078e2:	79fb      	ldrb	r3, [r7, #7]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	40021400 	.word	0x40021400

080078f0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	4603      	mov	r3, r0
 80078f8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80078fa:	4b0b      	ldr	r3, [pc, #44]	; (8007928 <SD_CheckStatus+0x38>)
 80078fc:	2201      	movs	r2, #1
 80078fe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007900:	f7ff ffb0 	bl	8007864 <BSP_SD_GetCardState>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d107      	bne.n	800791a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800790a:	4b07      	ldr	r3, [pc, #28]	; (8007928 <SD_CheckStatus+0x38>)
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	b2db      	uxtb	r3, r3
 8007910:	f023 0301 	bic.w	r3, r3, #1
 8007914:	b2da      	uxtb	r2, r3
 8007916:	4b04      	ldr	r3, [pc, #16]	; (8007928 <SD_CheckStatus+0x38>)
 8007918:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800791a:	4b03      	ldr	r3, [pc, #12]	; (8007928 <SD_CheckStatus+0x38>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	b2db      	uxtb	r3, r3
}
 8007920:	4618      	mov	r0, r3
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	20000009 	.word	0x20000009

0800792c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	4603      	mov	r3, r0
 8007934:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007936:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <SD_initialize+0x38>)
 8007938:	2201      	movs	r2, #1
 800793a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800793c:	f7ff ff3e 	bl	80077bc <BSP_SD_Init>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d107      	bne.n	8007956 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007946:	79fb      	ldrb	r3, [r7, #7]
 8007948:	4618      	mov	r0, r3
 800794a:	f7ff ffd1 	bl	80078f0 <SD_CheckStatus>
 800794e:	4603      	mov	r3, r0
 8007950:	461a      	mov	r2, r3
 8007952:	4b04      	ldr	r3, [pc, #16]	; (8007964 <SD_initialize+0x38>)
 8007954:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007956:	4b03      	ldr	r3, [pc, #12]	; (8007964 <SD_initialize+0x38>)
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	b2db      	uxtb	r3, r3
}
 800795c:	4618      	mov	r0, r3
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	20000009 	.word	0x20000009

08007968 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	4603      	mov	r3, r0
 8007970:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007972:	79fb      	ldrb	r3, [r7, #7]
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff ffbb 	bl	80078f0 <SD_CheckStatus>
 800797a:	4603      	mov	r3, r0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	607a      	str	r2, [r7, #4]
 800798e:	603b      	str	r3, [r7, #0]
 8007990:	4603      	mov	r3, r0
 8007992:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007998:	f04f 33ff 	mov.w	r3, #4294967295
 800799c:	683a      	ldr	r2, [r7, #0]
 800799e:	6879      	ldr	r1, [r7, #4]
 80079a0:	68b8      	ldr	r0, [r7, #8]
 80079a2:	f7ff ff23 	bl	80077ec <BSP_SD_ReadBlocks>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d107      	bne.n	80079bc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80079ac:	bf00      	nop
 80079ae:	f7ff ff59 	bl	8007864 <BSP_SD_GetCardState>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1fa      	bne.n	80079ae <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80079bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b086      	sub	sp, #24
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
 80079d0:	603b      	str	r3, [r7, #0]
 80079d2:	4603      	mov	r3, r0
 80079d4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80079da:	f04f 33ff 	mov.w	r3, #4294967295
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	6879      	ldr	r1, [r7, #4]
 80079e2:	68b8      	ldr	r0, [r7, #8]
 80079e4:	f7ff ff20 	bl	8007828 <BSP_SD_WriteBlocks>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d107      	bne.n	80079fe <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80079ee:	bf00      	nop
 80079f0:	f7ff ff38 	bl	8007864 <BSP_SD_GetCardState>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1fa      	bne.n	80079f0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08c      	sub	sp, #48	; 0x30
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	603a      	str	r2, [r7, #0]
 8007a12:	71fb      	strb	r3, [r7, #7]
 8007a14:	460b      	mov	r3, r1
 8007a16:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007a1e:	4b25      	ldr	r3, [pc, #148]	; (8007ab4 <SD_ioctl+0xac>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d001      	beq.n	8007a30 <SD_ioctl+0x28>
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e03c      	b.n	8007aaa <SD_ioctl+0xa2>

  switch (cmd)
 8007a30:	79bb      	ldrb	r3, [r7, #6]
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d834      	bhi.n	8007aa0 <SD_ioctl+0x98>
 8007a36:	a201      	add	r2, pc, #4	; (adr r2, 8007a3c <SD_ioctl+0x34>)
 8007a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3c:	08007a4d 	.word	0x08007a4d
 8007a40:	08007a55 	.word	0x08007a55
 8007a44:	08007a6d 	.word	0x08007a6d
 8007a48:	08007a87 	.word	0x08007a87
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007a52:	e028      	b.n	8007aa6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007a54:	f107 030c 	add.w	r3, r7, #12
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7ff ff13 	bl	8007884 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007a6a:	e01c      	b.n	8007aa6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007a6c:	f107 030c 	add.w	r3, r7, #12
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7ff ff07 	bl	8007884 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007a84:	e00f      	b.n	8007aa6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007a86:	f107 030c 	add.w	r3, r7, #12
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7ff fefa 	bl	8007884 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a92:	0a5a      	lsrs	r2, r3, #9
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007a9e:	e002      	b.n	8007aa6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007aa0:	2304      	movs	r3, #4
 8007aa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3730      	adds	r7, #48	; 0x30
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20000009 	.word	0x20000009

08007ab8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007aca:	2300      	movs	r3, #0
 8007acc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007ace:	4b1f      	ldr	r3, [pc, #124]	; (8007b4c <FATFS_LinkDriverEx+0x94>)
 8007ad0:	7a5b      	ldrb	r3, [r3, #9]
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d131      	bne.n	8007b3c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007ad8:	4b1c      	ldr	r3, [pc, #112]	; (8007b4c <FATFS_LinkDriverEx+0x94>)
 8007ada:	7a5b      	ldrb	r3, [r3, #9]
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	461a      	mov	r2, r3
 8007ae0:	4b1a      	ldr	r3, [pc, #104]	; (8007b4c <FATFS_LinkDriverEx+0x94>)
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007ae6:	4b19      	ldr	r3, [pc, #100]	; (8007b4c <FATFS_LinkDriverEx+0x94>)
 8007ae8:	7a5b      	ldrb	r3, [r3, #9]
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	4a17      	ldr	r2, [pc, #92]	; (8007b4c <FATFS_LinkDriverEx+0x94>)
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007af6:	4b15      	ldr	r3, [pc, #84]	; (8007b4c <FATFS_LinkDriverEx+0x94>)
 8007af8:	7a5b      	ldrb	r3, [r3, #9]
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	461a      	mov	r2, r3
 8007afe:	4b13      	ldr	r3, [pc, #76]	; (8007b4c <FATFS_LinkDriverEx+0x94>)
 8007b00:	4413      	add	r3, r2
 8007b02:	79fa      	ldrb	r2, [r7, #7]
 8007b04:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007b06:	4b11      	ldr	r3, [pc, #68]	; (8007b4c <FATFS_LinkDriverEx+0x94>)
 8007b08:	7a5b      	ldrb	r3, [r3, #9]
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	1c5a      	adds	r2, r3, #1
 8007b0e:	b2d1      	uxtb	r1, r2
 8007b10:	4a0e      	ldr	r2, [pc, #56]	; (8007b4c <FATFS_LinkDriverEx+0x94>)
 8007b12:	7251      	strb	r1, [r2, #9]
 8007b14:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007b16:	7dbb      	ldrb	r3, [r7, #22]
 8007b18:	3330      	adds	r3, #48	; 0x30
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	3301      	adds	r3, #1
 8007b24:	223a      	movs	r2, #58	; 0x3a
 8007b26:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	3302      	adds	r3, #2
 8007b2c:	222f      	movs	r2, #47	; 0x2f
 8007b2e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	3303      	adds	r3, #3
 8007b34:	2200      	movs	r2, #0
 8007b36:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	371c      	adds	r7, #28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	200000e0 	.word	0x200000e0

08007b50 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7ff ffaa 	bl	8007ab8 <FATFS_LinkDriverEx>
 8007b64:	4603      	mov	r3, r0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <__errno>:
 8007b70:	4b01      	ldr	r3, [pc, #4]	; (8007b78 <__errno+0x8>)
 8007b72:	6818      	ldr	r0, [r3, #0]
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	2000000c 	.word	0x2000000c

08007b7c <__libc_init_array>:
 8007b7c:	b570      	push	{r4, r5, r6, lr}
 8007b7e:	4e0d      	ldr	r6, [pc, #52]	; (8007bb4 <__libc_init_array+0x38>)
 8007b80:	4c0d      	ldr	r4, [pc, #52]	; (8007bb8 <__libc_init_array+0x3c>)
 8007b82:	1ba4      	subs	r4, r4, r6
 8007b84:	10a4      	asrs	r4, r4, #2
 8007b86:	2500      	movs	r5, #0
 8007b88:	42a5      	cmp	r5, r4
 8007b8a:	d109      	bne.n	8007ba0 <__libc_init_array+0x24>
 8007b8c:	4e0b      	ldr	r6, [pc, #44]	; (8007bbc <__libc_init_array+0x40>)
 8007b8e:	4c0c      	ldr	r4, [pc, #48]	; (8007bc0 <__libc_init_array+0x44>)
 8007b90:	f001 f8e4 	bl	8008d5c <_init>
 8007b94:	1ba4      	subs	r4, r4, r6
 8007b96:	10a4      	asrs	r4, r4, #2
 8007b98:	2500      	movs	r5, #0
 8007b9a:	42a5      	cmp	r5, r4
 8007b9c:	d105      	bne.n	8007baa <__libc_init_array+0x2e>
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ba0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ba4:	4798      	blx	r3
 8007ba6:	3501      	adds	r5, #1
 8007ba8:	e7ee      	b.n	8007b88 <__libc_init_array+0xc>
 8007baa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bae:	4798      	blx	r3
 8007bb0:	3501      	adds	r5, #1
 8007bb2:	e7f2      	b.n	8007b9a <__libc_init_array+0x1e>
 8007bb4:	080090c4 	.word	0x080090c4
 8007bb8:	080090c4 	.word	0x080090c4
 8007bbc:	080090c4 	.word	0x080090c4
 8007bc0:	080090c8 	.word	0x080090c8

08007bc4 <memcpy>:
 8007bc4:	b510      	push	{r4, lr}
 8007bc6:	1e43      	subs	r3, r0, #1
 8007bc8:	440a      	add	r2, r1
 8007bca:	4291      	cmp	r1, r2
 8007bcc:	d100      	bne.n	8007bd0 <memcpy+0xc>
 8007bce:	bd10      	pop	{r4, pc}
 8007bd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bd8:	e7f7      	b.n	8007bca <memcpy+0x6>

08007bda <memset>:
 8007bda:	4402      	add	r2, r0
 8007bdc:	4603      	mov	r3, r0
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d100      	bne.n	8007be4 <memset+0xa>
 8007be2:	4770      	bx	lr
 8007be4:	f803 1b01 	strb.w	r1, [r3], #1
 8007be8:	e7f9      	b.n	8007bde <memset+0x4>
	...

08007bec <_free_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	4605      	mov	r5, r0
 8007bf0:	2900      	cmp	r1, #0
 8007bf2:	d045      	beq.n	8007c80 <_free_r+0x94>
 8007bf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bf8:	1f0c      	subs	r4, r1, #4
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	bfb8      	it	lt
 8007bfe:	18e4      	addlt	r4, r4, r3
 8007c00:	f000 fb9c 	bl	800833c <__malloc_lock>
 8007c04:	4a1f      	ldr	r2, [pc, #124]	; (8007c84 <_free_r+0x98>)
 8007c06:	6813      	ldr	r3, [r2, #0]
 8007c08:	4610      	mov	r0, r2
 8007c0a:	b933      	cbnz	r3, 8007c1a <_free_r+0x2e>
 8007c0c:	6063      	str	r3, [r4, #4]
 8007c0e:	6014      	str	r4, [r2, #0]
 8007c10:	4628      	mov	r0, r5
 8007c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c16:	f000 bb92 	b.w	800833e <__malloc_unlock>
 8007c1a:	42a3      	cmp	r3, r4
 8007c1c:	d90c      	bls.n	8007c38 <_free_r+0x4c>
 8007c1e:	6821      	ldr	r1, [r4, #0]
 8007c20:	1862      	adds	r2, r4, r1
 8007c22:	4293      	cmp	r3, r2
 8007c24:	bf04      	itt	eq
 8007c26:	681a      	ldreq	r2, [r3, #0]
 8007c28:	685b      	ldreq	r3, [r3, #4]
 8007c2a:	6063      	str	r3, [r4, #4]
 8007c2c:	bf04      	itt	eq
 8007c2e:	1852      	addeq	r2, r2, r1
 8007c30:	6022      	streq	r2, [r4, #0]
 8007c32:	6004      	str	r4, [r0, #0]
 8007c34:	e7ec      	b.n	8007c10 <_free_r+0x24>
 8007c36:	4613      	mov	r3, r2
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	b10a      	cbz	r2, 8007c40 <_free_r+0x54>
 8007c3c:	42a2      	cmp	r2, r4
 8007c3e:	d9fa      	bls.n	8007c36 <_free_r+0x4a>
 8007c40:	6819      	ldr	r1, [r3, #0]
 8007c42:	1858      	adds	r0, r3, r1
 8007c44:	42a0      	cmp	r0, r4
 8007c46:	d10b      	bne.n	8007c60 <_free_r+0x74>
 8007c48:	6820      	ldr	r0, [r4, #0]
 8007c4a:	4401      	add	r1, r0
 8007c4c:	1858      	adds	r0, r3, r1
 8007c4e:	4282      	cmp	r2, r0
 8007c50:	6019      	str	r1, [r3, #0]
 8007c52:	d1dd      	bne.n	8007c10 <_free_r+0x24>
 8007c54:	6810      	ldr	r0, [r2, #0]
 8007c56:	6852      	ldr	r2, [r2, #4]
 8007c58:	605a      	str	r2, [r3, #4]
 8007c5a:	4401      	add	r1, r0
 8007c5c:	6019      	str	r1, [r3, #0]
 8007c5e:	e7d7      	b.n	8007c10 <_free_r+0x24>
 8007c60:	d902      	bls.n	8007c68 <_free_r+0x7c>
 8007c62:	230c      	movs	r3, #12
 8007c64:	602b      	str	r3, [r5, #0]
 8007c66:	e7d3      	b.n	8007c10 <_free_r+0x24>
 8007c68:	6820      	ldr	r0, [r4, #0]
 8007c6a:	1821      	adds	r1, r4, r0
 8007c6c:	428a      	cmp	r2, r1
 8007c6e:	bf04      	itt	eq
 8007c70:	6811      	ldreq	r1, [r2, #0]
 8007c72:	6852      	ldreq	r2, [r2, #4]
 8007c74:	6062      	str	r2, [r4, #4]
 8007c76:	bf04      	itt	eq
 8007c78:	1809      	addeq	r1, r1, r0
 8007c7a:	6021      	streq	r1, [r4, #0]
 8007c7c:	605c      	str	r4, [r3, #4]
 8007c7e:	e7c7      	b.n	8007c10 <_free_r+0x24>
 8007c80:	bd38      	pop	{r3, r4, r5, pc}
 8007c82:	bf00      	nop
 8007c84:	200000ec 	.word	0x200000ec

08007c88 <_malloc_r>:
 8007c88:	b570      	push	{r4, r5, r6, lr}
 8007c8a:	1ccd      	adds	r5, r1, #3
 8007c8c:	f025 0503 	bic.w	r5, r5, #3
 8007c90:	3508      	adds	r5, #8
 8007c92:	2d0c      	cmp	r5, #12
 8007c94:	bf38      	it	cc
 8007c96:	250c      	movcc	r5, #12
 8007c98:	2d00      	cmp	r5, #0
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	db01      	blt.n	8007ca2 <_malloc_r+0x1a>
 8007c9e:	42a9      	cmp	r1, r5
 8007ca0:	d903      	bls.n	8007caa <_malloc_r+0x22>
 8007ca2:	230c      	movs	r3, #12
 8007ca4:	6033      	str	r3, [r6, #0]
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	bd70      	pop	{r4, r5, r6, pc}
 8007caa:	f000 fb47 	bl	800833c <__malloc_lock>
 8007cae:	4a21      	ldr	r2, [pc, #132]	; (8007d34 <_malloc_r+0xac>)
 8007cb0:	6814      	ldr	r4, [r2, #0]
 8007cb2:	4621      	mov	r1, r4
 8007cb4:	b991      	cbnz	r1, 8007cdc <_malloc_r+0x54>
 8007cb6:	4c20      	ldr	r4, [pc, #128]	; (8007d38 <_malloc_r+0xb0>)
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	b91b      	cbnz	r3, 8007cc4 <_malloc_r+0x3c>
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f000 f855 	bl	8007d6c <_sbrk_r>
 8007cc2:	6020      	str	r0, [r4, #0]
 8007cc4:	4629      	mov	r1, r5
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	f000 f850 	bl	8007d6c <_sbrk_r>
 8007ccc:	1c43      	adds	r3, r0, #1
 8007cce:	d124      	bne.n	8007d1a <_malloc_r+0x92>
 8007cd0:	230c      	movs	r3, #12
 8007cd2:	6033      	str	r3, [r6, #0]
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	f000 fb32 	bl	800833e <__malloc_unlock>
 8007cda:	e7e4      	b.n	8007ca6 <_malloc_r+0x1e>
 8007cdc:	680b      	ldr	r3, [r1, #0]
 8007cde:	1b5b      	subs	r3, r3, r5
 8007ce0:	d418      	bmi.n	8007d14 <_malloc_r+0x8c>
 8007ce2:	2b0b      	cmp	r3, #11
 8007ce4:	d90f      	bls.n	8007d06 <_malloc_r+0x7e>
 8007ce6:	600b      	str	r3, [r1, #0]
 8007ce8:	50cd      	str	r5, [r1, r3]
 8007cea:	18cc      	adds	r4, r1, r3
 8007cec:	4630      	mov	r0, r6
 8007cee:	f000 fb26 	bl	800833e <__malloc_unlock>
 8007cf2:	f104 000b 	add.w	r0, r4, #11
 8007cf6:	1d23      	adds	r3, r4, #4
 8007cf8:	f020 0007 	bic.w	r0, r0, #7
 8007cfc:	1ac3      	subs	r3, r0, r3
 8007cfe:	d0d3      	beq.n	8007ca8 <_malloc_r+0x20>
 8007d00:	425a      	negs	r2, r3
 8007d02:	50e2      	str	r2, [r4, r3]
 8007d04:	e7d0      	b.n	8007ca8 <_malloc_r+0x20>
 8007d06:	428c      	cmp	r4, r1
 8007d08:	684b      	ldr	r3, [r1, #4]
 8007d0a:	bf16      	itet	ne
 8007d0c:	6063      	strne	r3, [r4, #4]
 8007d0e:	6013      	streq	r3, [r2, #0]
 8007d10:	460c      	movne	r4, r1
 8007d12:	e7eb      	b.n	8007cec <_malloc_r+0x64>
 8007d14:	460c      	mov	r4, r1
 8007d16:	6849      	ldr	r1, [r1, #4]
 8007d18:	e7cc      	b.n	8007cb4 <_malloc_r+0x2c>
 8007d1a:	1cc4      	adds	r4, r0, #3
 8007d1c:	f024 0403 	bic.w	r4, r4, #3
 8007d20:	42a0      	cmp	r0, r4
 8007d22:	d005      	beq.n	8007d30 <_malloc_r+0xa8>
 8007d24:	1a21      	subs	r1, r4, r0
 8007d26:	4630      	mov	r0, r6
 8007d28:	f000 f820 	bl	8007d6c <_sbrk_r>
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	d0cf      	beq.n	8007cd0 <_malloc_r+0x48>
 8007d30:	6025      	str	r5, [r4, #0]
 8007d32:	e7db      	b.n	8007cec <_malloc_r+0x64>
 8007d34:	200000ec 	.word	0x200000ec
 8007d38:	200000f0 	.word	0x200000f0

08007d3c <iprintf>:
 8007d3c:	b40f      	push	{r0, r1, r2, r3}
 8007d3e:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <iprintf+0x2c>)
 8007d40:	b513      	push	{r0, r1, r4, lr}
 8007d42:	681c      	ldr	r4, [r3, #0]
 8007d44:	b124      	cbz	r4, 8007d50 <iprintf+0x14>
 8007d46:	69a3      	ldr	r3, [r4, #24]
 8007d48:	b913      	cbnz	r3, 8007d50 <iprintf+0x14>
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f000 fa08 	bl	8008160 <__sinit>
 8007d50:	ab05      	add	r3, sp, #20
 8007d52:	9a04      	ldr	r2, [sp, #16]
 8007d54:	68a1      	ldr	r1, [r4, #8]
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f000 fc6d 	bl	8008638 <_vfiprintf_r>
 8007d5e:	b002      	add	sp, #8
 8007d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d64:	b004      	add	sp, #16
 8007d66:	4770      	bx	lr
 8007d68:	2000000c 	.word	0x2000000c

08007d6c <_sbrk_r>:
 8007d6c:	b538      	push	{r3, r4, r5, lr}
 8007d6e:	4c06      	ldr	r4, [pc, #24]	; (8007d88 <_sbrk_r+0x1c>)
 8007d70:	2300      	movs	r3, #0
 8007d72:	4605      	mov	r5, r0
 8007d74:	4608      	mov	r0, r1
 8007d76:	6023      	str	r3, [r4, #0]
 8007d78:	f7f9 ff86 	bl	8001c88 <_sbrk>
 8007d7c:	1c43      	adds	r3, r0, #1
 8007d7e:	d102      	bne.n	8007d86 <_sbrk_r+0x1a>
 8007d80:	6823      	ldr	r3, [r4, #0]
 8007d82:	b103      	cbz	r3, 8007d86 <_sbrk_r+0x1a>
 8007d84:	602b      	str	r3, [r5, #0]
 8007d86:	bd38      	pop	{r3, r4, r5, pc}
 8007d88:	20007678 	.word	0x20007678

08007d8c <siprintf>:
 8007d8c:	b40e      	push	{r1, r2, r3}
 8007d8e:	b500      	push	{lr}
 8007d90:	b09c      	sub	sp, #112	; 0x70
 8007d92:	ab1d      	add	r3, sp, #116	; 0x74
 8007d94:	9002      	str	r0, [sp, #8]
 8007d96:	9006      	str	r0, [sp, #24]
 8007d98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d9c:	4809      	ldr	r0, [pc, #36]	; (8007dc4 <siprintf+0x38>)
 8007d9e:	9107      	str	r1, [sp, #28]
 8007da0:	9104      	str	r1, [sp, #16]
 8007da2:	4909      	ldr	r1, [pc, #36]	; (8007dc8 <siprintf+0x3c>)
 8007da4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007da8:	9105      	str	r1, [sp, #20]
 8007daa:	6800      	ldr	r0, [r0, #0]
 8007dac:	9301      	str	r3, [sp, #4]
 8007dae:	a902      	add	r1, sp, #8
 8007db0:	f000 fb20 	bl	80083f4 <_svfiprintf_r>
 8007db4:	9b02      	ldr	r3, [sp, #8]
 8007db6:	2200      	movs	r2, #0
 8007db8:	701a      	strb	r2, [r3, #0]
 8007dba:	b01c      	add	sp, #112	; 0x70
 8007dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dc0:	b003      	add	sp, #12
 8007dc2:	4770      	bx	lr
 8007dc4:	2000000c 	.word	0x2000000c
 8007dc8:	ffff0208 	.word	0xffff0208

08007dcc <strstr>:
 8007dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dce:	7803      	ldrb	r3, [r0, #0]
 8007dd0:	b17b      	cbz	r3, 8007df2 <strstr+0x26>
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	7823      	ldrb	r3, [r4, #0]
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	1c66      	adds	r6, r4, #1
 8007dda:	b17b      	cbz	r3, 8007dfc <strstr+0x30>
 8007ddc:	1e4a      	subs	r2, r1, #1
 8007dde:	1e63      	subs	r3, r4, #1
 8007de0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8007de4:	b14d      	cbz	r5, 8007dfa <strstr+0x2e>
 8007de6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8007dea:	42af      	cmp	r7, r5
 8007dec:	4634      	mov	r4, r6
 8007dee:	d0f7      	beq.n	8007de0 <strstr+0x14>
 8007df0:	e7f0      	b.n	8007dd4 <strstr+0x8>
 8007df2:	780b      	ldrb	r3, [r1, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	bf18      	it	ne
 8007df8:	2000      	movne	r0, #0
 8007dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	e7fc      	b.n	8007dfa <strstr+0x2e>

08007e00 <__swbuf_r>:
 8007e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e02:	460e      	mov	r6, r1
 8007e04:	4614      	mov	r4, r2
 8007e06:	4605      	mov	r5, r0
 8007e08:	b118      	cbz	r0, 8007e12 <__swbuf_r+0x12>
 8007e0a:	6983      	ldr	r3, [r0, #24]
 8007e0c:	b90b      	cbnz	r3, 8007e12 <__swbuf_r+0x12>
 8007e0e:	f000 f9a7 	bl	8008160 <__sinit>
 8007e12:	4b21      	ldr	r3, [pc, #132]	; (8007e98 <__swbuf_r+0x98>)
 8007e14:	429c      	cmp	r4, r3
 8007e16:	d12a      	bne.n	8007e6e <__swbuf_r+0x6e>
 8007e18:	686c      	ldr	r4, [r5, #4]
 8007e1a:	69a3      	ldr	r3, [r4, #24]
 8007e1c:	60a3      	str	r3, [r4, #8]
 8007e1e:	89a3      	ldrh	r3, [r4, #12]
 8007e20:	071a      	lsls	r2, r3, #28
 8007e22:	d52e      	bpl.n	8007e82 <__swbuf_r+0x82>
 8007e24:	6923      	ldr	r3, [r4, #16]
 8007e26:	b363      	cbz	r3, 8007e82 <__swbuf_r+0x82>
 8007e28:	6923      	ldr	r3, [r4, #16]
 8007e2a:	6820      	ldr	r0, [r4, #0]
 8007e2c:	1ac0      	subs	r0, r0, r3
 8007e2e:	6963      	ldr	r3, [r4, #20]
 8007e30:	b2f6      	uxtb	r6, r6
 8007e32:	4283      	cmp	r3, r0
 8007e34:	4637      	mov	r7, r6
 8007e36:	dc04      	bgt.n	8007e42 <__swbuf_r+0x42>
 8007e38:	4621      	mov	r1, r4
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	f000 f926 	bl	800808c <_fflush_r>
 8007e40:	bb28      	cbnz	r0, 8007e8e <__swbuf_r+0x8e>
 8007e42:	68a3      	ldr	r3, [r4, #8]
 8007e44:	3b01      	subs	r3, #1
 8007e46:	60a3      	str	r3, [r4, #8]
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	1c5a      	adds	r2, r3, #1
 8007e4c:	6022      	str	r2, [r4, #0]
 8007e4e:	701e      	strb	r6, [r3, #0]
 8007e50:	6963      	ldr	r3, [r4, #20]
 8007e52:	3001      	adds	r0, #1
 8007e54:	4283      	cmp	r3, r0
 8007e56:	d004      	beq.n	8007e62 <__swbuf_r+0x62>
 8007e58:	89a3      	ldrh	r3, [r4, #12]
 8007e5a:	07db      	lsls	r3, r3, #31
 8007e5c:	d519      	bpl.n	8007e92 <__swbuf_r+0x92>
 8007e5e:	2e0a      	cmp	r6, #10
 8007e60:	d117      	bne.n	8007e92 <__swbuf_r+0x92>
 8007e62:	4621      	mov	r1, r4
 8007e64:	4628      	mov	r0, r5
 8007e66:	f000 f911 	bl	800808c <_fflush_r>
 8007e6a:	b190      	cbz	r0, 8007e92 <__swbuf_r+0x92>
 8007e6c:	e00f      	b.n	8007e8e <__swbuf_r+0x8e>
 8007e6e:	4b0b      	ldr	r3, [pc, #44]	; (8007e9c <__swbuf_r+0x9c>)
 8007e70:	429c      	cmp	r4, r3
 8007e72:	d101      	bne.n	8007e78 <__swbuf_r+0x78>
 8007e74:	68ac      	ldr	r4, [r5, #8]
 8007e76:	e7d0      	b.n	8007e1a <__swbuf_r+0x1a>
 8007e78:	4b09      	ldr	r3, [pc, #36]	; (8007ea0 <__swbuf_r+0xa0>)
 8007e7a:	429c      	cmp	r4, r3
 8007e7c:	bf08      	it	eq
 8007e7e:	68ec      	ldreq	r4, [r5, #12]
 8007e80:	e7cb      	b.n	8007e1a <__swbuf_r+0x1a>
 8007e82:	4621      	mov	r1, r4
 8007e84:	4628      	mov	r0, r5
 8007e86:	f000 f80d 	bl	8007ea4 <__swsetup_r>
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	d0cc      	beq.n	8007e28 <__swbuf_r+0x28>
 8007e8e:	f04f 37ff 	mov.w	r7, #4294967295
 8007e92:	4638      	mov	r0, r7
 8007e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e96:	bf00      	nop
 8007e98:	08009048 	.word	0x08009048
 8007e9c:	08009068 	.word	0x08009068
 8007ea0:	08009028 	.word	0x08009028

08007ea4 <__swsetup_r>:
 8007ea4:	4b32      	ldr	r3, [pc, #200]	; (8007f70 <__swsetup_r+0xcc>)
 8007ea6:	b570      	push	{r4, r5, r6, lr}
 8007ea8:	681d      	ldr	r5, [r3, #0]
 8007eaa:	4606      	mov	r6, r0
 8007eac:	460c      	mov	r4, r1
 8007eae:	b125      	cbz	r5, 8007eba <__swsetup_r+0x16>
 8007eb0:	69ab      	ldr	r3, [r5, #24]
 8007eb2:	b913      	cbnz	r3, 8007eba <__swsetup_r+0x16>
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	f000 f953 	bl	8008160 <__sinit>
 8007eba:	4b2e      	ldr	r3, [pc, #184]	; (8007f74 <__swsetup_r+0xd0>)
 8007ebc:	429c      	cmp	r4, r3
 8007ebe:	d10f      	bne.n	8007ee0 <__swsetup_r+0x3c>
 8007ec0:	686c      	ldr	r4, [r5, #4]
 8007ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	0715      	lsls	r5, r2, #28
 8007eca:	d42c      	bmi.n	8007f26 <__swsetup_r+0x82>
 8007ecc:	06d0      	lsls	r0, r2, #27
 8007ece:	d411      	bmi.n	8007ef4 <__swsetup_r+0x50>
 8007ed0:	2209      	movs	r2, #9
 8007ed2:	6032      	str	r2, [r6, #0]
 8007ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ed8:	81a3      	strh	r3, [r4, #12]
 8007eda:	f04f 30ff 	mov.w	r0, #4294967295
 8007ede:	e03e      	b.n	8007f5e <__swsetup_r+0xba>
 8007ee0:	4b25      	ldr	r3, [pc, #148]	; (8007f78 <__swsetup_r+0xd4>)
 8007ee2:	429c      	cmp	r4, r3
 8007ee4:	d101      	bne.n	8007eea <__swsetup_r+0x46>
 8007ee6:	68ac      	ldr	r4, [r5, #8]
 8007ee8:	e7eb      	b.n	8007ec2 <__swsetup_r+0x1e>
 8007eea:	4b24      	ldr	r3, [pc, #144]	; (8007f7c <__swsetup_r+0xd8>)
 8007eec:	429c      	cmp	r4, r3
 8007eee:	bf08      	it	eq
 8007ef0:	68ec      	ldreq	r4, [r5, #12]
 8007ef2:	e7e6      	b.n	8007ec2 <__swsetup_r+0x1e>
 8007ef4:	0751      	lsls	r1, r2, #29
 8007ef6:	d512      	bpl.n	8007f1e <__swsetup_r+0x7a>
 8007ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007efa:	b141      	cbz	r1, 8007f0e <__swsetup_r+0x6a>
 8007efc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f00:	4299      	cmp	r1, r3
 8007f02:	d002      	beq.n	8007f0a <__swsetup_r+0x66>
 8007f04:	4630      	mov	r0, r6
 8007f06:	f7ff fe71 	bl	8007bec <_free_r>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	6363      	str	r3, [r4, #52]	; 0x34
 8007f0e:	89a3      	ldrh	r3, [r4, #12]
 8007f10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f14:	81a3      	strh	r3, [r4, #12]
 8007f16:	2300      	movs	r3, #0
 8007f18:	6063      	str	r3, [r4, #4]
 8007f1a:	6923      	ldr	r3, [r4, #16]
 8007f1c:	6023      	str	r3, [r4, #0]
 8007f1e:	89a3      	ldrh	r3, [r4, #12]
 8007f20:	f043 0308 	orr.w	r3, r3, #8
 8007f24:	81a3      	strh	r3, [r4, #12]
 8007f26:	6923      	ldr	r3, [r4, #16]
 8007f28:	b94b      	cbnz	r3, 8007f3e <__swsetup_r+0x9a>
 8007f2a:	89a3      	ldrh	r3, [r4, #12]
 8007f2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f34:	d003      	beq.n	8007f3e <__swsetup_r+0x9a>
 8007f36:	4621      	mov	r1, r4
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f000 f9bf 	bl	80082bc <__smakebuf_r>
 8007f3e:	89a2      	ldrh	r2, [r4, #12]
 8007f40:	f012 0301 	ands.w	r3, r2, #1
 8007f44:	d00c      	beq.n	8007f60 <__swsetup_r+0xbc>
 8007f46:	2300      	movs	r3, #0
 8007f48:	60a3      	str	r3, [r4, #8]
 8007f4a:	6963      	ldr	r3, [r4, #20]
 8007f4c:	425b      	negs	r3, r3
 8007f4e:	61a3      	str	r3, [r4, #24]
 8007f50:	6923      	ldr	r3, [r4, #16]
 8007f52:	b953      	cbnz	r3, 8007f6a <__swsetup_r+0xc6>
 8007f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f58:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007f5c:	d1ba      	bne.n	8007ed4 <__swsetup_r+0x30>
 8007f5e:	bd70      	pop	{r4, r5, r6, pc}
 8007f60:	0792      	lsls	r2, r2, #30
 8007f62:	bf58      	it	pl
 8007f64:	6963      	ldrpl	r3, [r4, #20]
 8007f66:	60a3      	str	r3, [r4, #8]
 8007f68:	e7f2      	b.n	8007f50 <__swsetup_r+0xac>
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	e7f7      	b.n	8007f5e <__swsetup_r+0xba>
 8007f6e:	bf00      	nop
 8007f70:	2000000c 	.word	0x2000000c
 8007f74:	08009048 	.word	0x08009048
 8007f78:	08009068 	.word	0x08009068
 8007f7c:	08009028 	.word	0x08009028

08007f80 <__sflush_r>:
 8007f80:	898a      	ldrh	r2, [r1, #12]
 8007f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f86:	4605      	mov	r5, r0
 8007f88:	0710      	lsls	r0, r2, #28
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	d458      	bmi.n	8008040 <__sflush_r+0xc0>
 8007f8e:	684b      	ldr	r3, [r1, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	dc05      	bgt.n	8007fa0 <__sflush_r+0x20>
 8007f94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	dc02      	bgt.n	8007fa0 <__sflush_r+0x20>
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fa2:	2e00      	cmp	r6, #0
 8007fa4:	d0f9      	beq.n	8007f9a <__sflush_r+0x1a>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fac:	682f      	ldr	r7, [r5, #0]
 8007fae:	6a21      	ldr	r1, [r4, #32]
 8007fb0:	602b      	str	r3, [r5, #0]
 8007fb2:	d032      	beq.n	800801a <__sflush_r+0x9a>
 8007fb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fb6:	89a3      	ldrh	r3, [r4, #12]
 8007fb8:	075a      	lsls	r2, r3, #29
 8007fba:	d505      	bpl.n	8007fc8 <__sflush_r+0x48>
 8007fbc:	6863      	ldr	r3, [r4, #4]
 8007fbe:	1ac0      	subs	r0, r0, r3
 8007fc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fc2:	b10b      	cbz	r3, 8007fc8 <__sflush_r+0x48>
 8007fc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fc6:	1ac0      	subs	r0, r0, r3
 8007fc8:	2300      	movs	r3, #0
 8007fca:	4602      	mov	r2, r0
 8007fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fce:	6a21      	ldr	r1, [r4, #32]
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	47b0      	blx	r6
 8007fd4:	1c43      	adds	r3, r0, #1
 8007fd6:	89a3      	ldrh	r3, [r4, #12]
 8007fd8:	d106      	bne.n	8007fe8 <__sflush_r+0x68>
 8007fda:	6829      	ldr	r1, [r5, #0]
 8007fdc:	291d      	cmp	r1, #29
 8007fde:	d848      	bhi.n	8008072 <__sflush_r+0xf2>
 8007fe0:	4a29      	ldr	r2, [pc, #164]	; (8008088 <__sflush_r+0x108>)
 8007fe2:	40ca      	lsrs	r2, r1
 8007fe4:	07d6      	lsls	r6, r2, #31
 8007fe6:	d544      	bpl.n	8008072 <__sflush_r+0xf2>
 8007fe8:	2200      	movs	r2, #0
 8007fea:	6062      	str	r2, [r4, #4]
 8007fec:	04d9      	lsls	r1, r3, #19
 8007fee:	6922      	ldr	r2, [r4, #16]
 8007ff0:	6022      	str	r2, [r4, #0]
 8007ff2:	d504      	bpl.n	8007ffe <__sflush_r+0x7e>
 8007ff4:	1c42      	adds	r2, r0, #1
 8007ff6:	d101      	bne.n	8007ffc <__sflush_r+0x7c>
 8007ff8:	682b      	ldr	r3, [r5, #0]
 8007ffa:	b903      	cbnz	r3, 8007ffe <__sflush_r+0x7e>
 8007ffc:	6560      	str	r0, [r4, #84]	; 0x54
 8007ffe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008000:	602f      	str	r7, [r5, #0]
 8008002:	2900      	cmp	r1, #0
 8008004:	d0c9      	beq.n	8007f9a <__sflush_r+0x1a>
 8008006:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800800a:	4299      	cmp	r1, r3
 800800c:	d002      	beq.n	8008014 <__sflush_r+0x94>
 800800e:	4628      	mov	r0, r5
 8008010:	f7ff fdec 	bl	8007bec <_free_r>
 8008014:	2000      	movs	r0, #0
 8008016:	6360      	str	r0, [r4, #52]	; 0x34
 8008018:	e7c0      	b.n	8007f9c <__sflush_r+0x1c>
 800801a:	2301      	movs	r3, #1
 800801c:	4628      	mov	r0, r5
 800801e:	47b0      	blx	r6
 8008020:	1c41      	adds	r1, r0, #1
 8008022:	d1c8      	bne.n	8007fb6 <__sflush_r+0x36>
 8008024:	682b      	ldr	r3, [r5, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d0c5      	beq.n	8007fb6 <__sflush_r+0x36>
 800802a:	2b1d      	cmp	r3, #29
 800802c:	d001      	beq.n	8008032 <__sflush_r+0xb2>
 800802e:	2b16      	cmp	r3, #22
 8008030:	d101      	bne.n	8008036 <__sflush_r+0xb6>
 8008032:	602f      	str	r7, [r5, #0]
 8008034:	e7b1      	b.n	8007f9a <__sflush_r+0x1a>
 8008036:	89a3      	ldrh	r3, [r4, #12]
 8008038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800803c:	81a3      	strh	r3, [r4, #12]
 800803e:	e7ad      	b.n	8007f9c <__sflush_r+0x1c>
 8008040:	690f      	ldr	r7, [r1, #16]
 8008042:	2f00      	cmp	r7, #0
 8008044:	d0a9      	beq.n	8007f9a <__sflush_r+0x1a>
 8008046:	0793      	lsls	r3, r2, #30
 8008048:	680e      	ldr	r6, [r1, #0]
 800804a:	bf08      	it	eq
 800804c:	694b      	ldreq	r3, [r1, #20]
 800804e:	600f      	str	r7, [r1, #0]
 8008050:	bf18      	it	ne
 8008052:	2300      	movne	r3, #0
 8008054:	eba6 0807 	sub.w	r8, r6, r7
 8008058:	608b      	str	r3, [r1, #8]
 800805a:	f1b8 0f00 	cmp.w	r8, #0
 800805e:	dd9c      	ble.n	8007f9a <__sflush_r+0x1a>
 8008060:	4643      	mov	r3, r8
 8008062:	463a      	mov	r2, r7
 8008064:	6a21      	ldr	r1, [r4, #32]
 8008066:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008068:	4628      	mov	r0, r5
 800806a:	47b0      	blx	r6
 800806c:	2800      	cmp	r0, #0
 800806e:	dc06      	bgt.n	800807e <__sflush_r+0xfe>
 8008070:	89a3      	ldrh	r3, [r4, #12]
 8008072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008076:	81a3      	strh	r3, [r4, #12]
 8008078:	f04f 30ff 	mov.w	r0, #4294967295
 800807c:	e78e      	b.n	8007f9c <__sflush_r+0x1c>
 800807e:	4407      	add	r7, r0
 8008080:	eba8 0800 	sub.w	r8, r8, r0
 8008084:	e7e9      	b.n	800805a <__sflush_r+0xda>
 8008086:	bf00      	nop
 8008088:	20400001 	.word	0x20400001

0800808c <_fflush_r>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	690b      	ldr	r3, [r1, #16]
 8008090:	4605      	mov	r5, r0
 8008092:	460c      	mov	r4, r1
 8008094:	b1db      	cbz	r3, 80080ce <_fflush_r+0x42>
 8008096:	b118      	cbz	r0, 80080a0 <_fflush_r+0x14>
 8008098:	6983      	ldr	r3, [r0, #24]
 800809a:	b90b      	cbnz	r3, 80080a0 <_fflush_r+0x14>
 800809c:	f000 f860 	bl	8008160 <__sinit>
 80080a0:	4b0c      	ldr	r3, [pc, #48]	; (80080d4 <_fflush_r+0x48>)
 80080a2:	429c      	cmp	r4, r3
 80080a4:	d109      	bne.n	80080ba <_fflush_r+0x2e>
 80080a6:	686c      	ldr	r4, [r5, #4]
 80080a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ac:	b17b      	cbz	r3, 80080ce <_fflush_r+0x42>
 80080ae:	4621      	mov	r1, r4
 80080b0:	4628      	mov	r0, r5
 80080b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080b6:	f7ff bf63 	b.w	8007f80 <__sflush_r>
 80080ba:	4b07      	ldr	r3, [pc, #28]	; (80080d8 <_fflush_r+0x4c>)
 80080bc:	429c      	cmp	r4, r3
 80080be:	d101      	bne.n	80080c4 <_fflush_r+0x38>
 80080c0:	68ac      	ldr	r4, [r5, #8]
 80080c2:	e7f1      	b.n	80080a8 <_fflush_r+0x1c>
 80080c4:	4b05      	ldr	r3, [pc, #20]	; (80080dc <_fflush_r+0x50>)
 80080c6:	429c      	cmp	r4, r3
 80080c8:	bf08      	it	eq
 80080ca:	68ec      	ldreq	r4, [r5, #12]
 80080cc:	e7ec      	b.n	80080a8 <_fflush_r+0x1c>
 80080ce:	2000      	movs	r0, #0
 80080d0:	bd38      	pop	{r3, r4, r5, pc}
 80080d2:	bf00      	nop
 80080d4:	08009048 	.word	0x08009048
 80080d8:	08009068 	.word	0x08009068
 80080dc:	08009028 	.word	0x08009028

080080e0 <std>:
 80080e0:	2300      	movs	r3, #0
 80080e2:	b510      	push	{r4, lr}
 80080e4:	4604      	mov	r4, r0
 80080e6:	e9c0 3300 	strd	r3, r3, [r0]
 80080ea:	6083      	str	r3, [r0, #8]
 80080ec:	8181      	strh	r1, [r0, #12]
 80080ee:	6643      	str	r3, [r0, #100]	; 0x64
 80080f0:	81c2      	strh	r2, [r0, #14]
 80080f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080f6:	6183      	str	r3, [r0, #24]
 80080f8:	4619      	mov	r1, r3
 80080fa:	2208      	movs	r2, #8
 80080fc:	305c      	adds	r0, #92	; 0x5c
 80080fe:	f7ff fd6c 	bl	8007bda <memset>
 8008102:	4b05      	ldr	r3, [pc, #20]	; (8008118 <std+0x38>)
 8008104:	6263      	str	r3, [r4, #36]	; 0x24
 8008106:	4b05      	ldr	r3, [pc, #20]	; (800811c <std+0x3c>)
 8008108:	62a3      	str	r3, [r4, #40]	; 0x28
 800810a:	4b05      	ldr	r3, [pc, #20]	; (8008120 <std+0x40>)
 800810c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800810e:	4b05      	ldr	r3, [pc, #20]	; (8008124 <std+0x44>)
 8008110:	6224      	str	r4, [r4, #32]
 8008112:	6323      	str	r3, [r4, #48]	; 0x30
 8008114:	bd10      	pop	{r4, pc}
 8008116:	bf00      	nop
 8008118:	08008b75 	.word	0x08008b75
 800811c:	08008b97 	.word	0x08008b97
 8008120:	08008bcf 	.word	0x08008bcf
 8008124:	08008bf3 	.word	0x08008bf3

08008128 <_cleanup_r>:
 8008128:	4901      	ldr	r1, [pc, #4]	; (8008130 <_cleanup_r+0x8>)
 800812a:	f000 b885 	b.w	8008238 <_fwalk_reent>
 800812e:	bf00      	nop
 8008130:	0800808d 	.word	0x0800808d

08008134 <__sfmoreglue>:
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	1e4a      	subs	r2, r1, #1
 8008138:	2568      	movs	r5, #104	; 0x68
 800813a:	4355      	muls	r5, r2
 800813c:	460e      	mov	r6, r1
 800813e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008142:	f7ff fda1 	bl	8007c88 <_malloc_r>
 8008146:	4604      	mov	r4, r0
 8008148:	b140      	cbz	r0, 800815c <__sfmoreglue+0x28>
 800814a:	2100      	movs	r1, #0
 800814c:	e9c0 1600 	strd	r1, r6, [r0]
 8008150:	300c      	adds	r0, #12
 8008152:	60a0      	str	r0, [r4, #8]
 8008154:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008158:	f7ff fd3f 	bl	8007bda <memset>
 800815c:	4620      	mov	r0, r4
 800815e:	bd70      	pop	{r4, r5, r6, pc}

08008160 <__sinit>:
 8008160:	6983      	ldr	r3, [r0, #24]
 8008162:	b510      	push	{r4, lr}
 8008164:	4604      	mov	r4, r0
 8008166:	bb33      	cbnz	r3, 80081b6 <__sinit+0x56>
 8008168:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800816c:	6503      	str	r3, [r0, #80]	; 0x50
 800816e:	4b12      	ldr	r3, [pc, #72]	; (80081b8 <__sinit+0x58>)
 8008170:	4a12      	ldr	r2, [pc, #72]	; (80081bc <__sinit+0x5c>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6282      	str	r2, [r0, #40]	; 0x28
 8008176:	4298      	cmp	r0, r3
 8008178:	bf04      	itt	eq
 800817a:	2301      	moveq	r3, #1
 800817c:	6183      	streq	r3, [r0, #24]
 800817e:	f000 f81f 	bl	80081c0 <__sfp>
 8008182:	6060      	str	r0, [r4, #4]
 8008184:	4620      	mov	r0, r4
 8008186:	f000 f81b 	bl	80081c0 <__sfp>
 800818a:	60a0      	str	r0, [r4, #8]
 800818c:	4620      	mov	r0, r4
 800818e:	f000 f817 	bl	80081c0 <__sfp>
 8008192:	2200      	movs	r2, #0
 8008194:	60e0      	str	r0, [r4, #12]
 8008196:	2104      	movs	r1, #4
 8008198:	6860      	ldr	r0, [r4, #4]
 800819a:	f7ff ffa1 	bl	80080e0 <std>
 800819e:	2201      	movs	r2, #1
 80081a0:	2109      	movs	r1, #9
 80081a2:	68a0      	ldr	r0, [r4, #8]
 80081a4:	f7ff ff9c 	bl	80080e0 <std>
 80081a8:	2202      	movs	r2, #2
 80081aa:	2112      	movs	r1, #18
 80081ac:	68e0      	ldr	r0, [r4, #12]
 80081ae:	f7ff ff97 	bl	80080e0 <std>
 80081b2:	2301      	movs	r3, #1
 80081b4:	61a3      	str	r3, [r4, #24]
 80081b6:	bd10      	pop	{r4, pc}
 80081b8:	08009024 	.word	0x08009024
 80081bc:	08008129 	.word	0x08008129

080081c0 <__sfp>:
 80081c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c2:	4b1b      	ldr	r3, [pc, #108]	; (8008230 <__sfp+0x70>)
 80081c4:	681e      	ldr	r6, [r3, #0]
 80081c6:	69b3      	ldr	r3, [r6, #24]
 80081c8:	4607      	mov	r7, r0
 80081ca:	b913      	cbnz	r3, 80081d2 <__sfp+0x12>
 80081cc:	4630      	mov	r0, r6
 80081ce:	f7ff ffc7 	bl	8008160 <__sinit>
 80081d2:	3648      	adds	r6, #72	; 0x48
 80081d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80081d8:	3b01      	subs	r3, #1
 80081da:	d503      	bpl.n	80081e4 <__sfp+0x24>
 80081dc:	6833      	ldr	r3, [r6, #0]
 80081de:	b133      	cbz	r3, 80081ee <__sfp+0x2e>
 80081e0:	6836      	ldr	r6, [r6, #0]
 80081e2:	e7f7      	b.n	80081d4 <__sfp+0x14>
 80081e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80081e8:	b16d      	cbz	r5, 8008206 <__sfp+0x46>
 80081ea:	3468      	adds	r4, #104	; 0x68
 80081ec:	e7f4      	b.n	80081d8 <__sfp+0x18>
 80081ee:	2104      	movs	r1, #4
 80081f0:	4638      	mov	r0, r7
 80081f2:	f7ff ff9f 	bl	8008134 <__sfmoreglue>
 80081f6:	6030      	str	r0, [r6, #0]
 80081f8:	2800      	cmp	r0, #0
 80081fa:	d1f1      	bne.n	80081e0 <__sfp+0x20>
 80081fc:	230c      	movs	r3, #12
 80081fe:	603b      	str	r3, [r7, #0]
 8008200:	4604      	mov	r4, r0
 8008202:	4620      	mov	r0, r4
 8008204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008206:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <__sfp+0x74>)
 8008208:	6665      	str	r5, [r4, #100]	; 0x64
 800820a:	e9c4 5500 	strd	r5, r5, [r4]
 800820e:	60a5      	str	r5, [r4, #8]
 8008210:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008214:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008218:	2208      	movs	r2, #8
 800821a:	4629      	mov	r1, r5
 800821c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008220:	f7ff fcdb 	bl	8007bda <memset>
 8008224:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008228:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800822c:	e7e9      	b.n	8008202 <__sfp+0x42>
 800822e:	bf00      	nop
 8008230:	08009024 	.word	0x08009024
 8008234:	ffff0001 	.word	0xffff0001

08008238 <_fwalk_reent>:
 8008238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800823c:	4680      	mov	r8, r0
 800823e:	4689      	mov	r9, r1
 8008240:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008244:	2600      	movs	r6, #0
 8008246:	b914      	cbnz	r4, 800824e <_fwalk_reent+0x16>
 8008248:	4630      	mov	r0, r6
 800824a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800824e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008252:	3f01      	subs	r7, #1
 8008254:	d501      	bpl.n	800825a <_fwalk_reent+0x22>
 8008256:	6824      	ldr	r4, [r4, #0]
 8008258:	e7f5      	b.n	8008246 <_fwalk_reent+0xe>
 800825a:	89ab      	ldrh	r3, [r5, #12]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d907      	bls.n	8008270 <_fwalk_reent+0x38>
 8008260:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008264:	3301      	adds	r3, #1
 8008266:	d003      	beq.n	8008270 <_fwalk_reent+0x38>
 8008268:	4629      	mov	r1, r5
 800826a:	4640      	mov	r0, r8
 800826c:	47c8      	blx	r9
 800826e:	4306      	orrs	r6, r0
 8008270:	3568      	adds	r5, #104	; 0x68
 8008272:	e7ee      	b.n	8008252 <_fwalk_reent+0x1a>

08008274 <__swhatbuf_r>:
 8008274:	b570      	push	{r4, r5, r6, lr}
 8008276:	460e      	mov	r6, r1
 8008278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800827c:	2900      	cmp	r1, #0
 800827e:	b096      	sub	sp, #88	; 0x58
 8008280:	4614      	mov	r4, r2
 8008282:	461d      	mov	r5, r3
 8008284:	da07      	bge.n	8008296 <__swhatbuf_r+0x22>
 8008286:	2300      	movs	r3, #0
 8008288:	602b      	str	r3, [r5, #0]
 800828a:	89b3      	ldrh	r3, [r6, #12]
 800828c:	061a      	lsls	r2, r3, #24
 800828e:	d410      	bmi.n	80082b2 <__swhatbuf_r+0x3e>
 8008290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008294:	e00e      	b.n	80082b4 <__swhatbuf_r+0x40>
 8008296:	466a      	mov	r2, sp
 8008298:	f000 fcd2 	bl	8008c40 <_fstat_r>
 800829c:	2800      	cmp	r0, #0
 800829e:	dbf2      	blt.n	8008286 <__swhatbuf_r+0x12>
 80082a0:	9a01      	ldr	r2, [sp, #4]
 80082a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80082a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082aa:	425a      	negs	r2, r3
 80082ac:	415a      	adcs	r2, r3
 80082ae:	602a      	str	r2, [r5, #0]
 80082b0:	e7ee      	b.n	8008290 <__swhatbuf_r+0x1c>
 80082b2:	2340      	movs	r3, #64	; 0x40
 80082b4:	2000      	movs	r0, #0
 80082b6:	6023      	str	r3, [r4, #0]
 80082b8:	b016      	add	sp, #88	; 0x58
 80082ba:	bd70      	pop	{r4, r5, r6, pc}

080082bc <__smakebuf_r>:
 80082bc:	898b      	ldrh	r3, [r1, #12]
 80082be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082c0:	079d      	lsls	r5, r3, #30
 80082c2:	4606      	mov	r6, r0
 80082c4:	460c      	mov	r4, r1
 80082c6:	d507      	bpl.n	80082d8 <__smakebuf_r+0x1c>
 80082c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	6123      	str	r3, [r4, #16]
 80082d0:	2301      	movs	r3, #1
 80082d2:	6163      	str	r3, [r4, #20]
 80082d4:	b002      	add	sp, #8
 80082d6:	bd70      	pop	{r4, r5, r6, pc}
 80082d8:	ab01      	add	r3, sp, #4
 80082da:	466a      	mov	r2, sp
 80082dc:	f7ff ffca 	bl	8008274 <__swhatbuf_r>
 80082e0:	9900      	ldr	r1, [sp, #0]
 80082e2:	4605      	mov	r5, r0
 80082e4:	4630      	mov	r0, r6
 80082e6:	f7ff fccf 	bl	8007c88 <_malloc_r>
 80082ea:	b948      	cbnz	r0, 8008300 <__smakebuf_r+0x44>
 80082ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082f0:	059a      	lsls	r2, r3, #22
 80082f2:	d4ef      	bmi.n	80082d4 <__smakebuf_r+0x18>
 80082f4:	f023 0303 	bic.w	r3, r3, #3
 80082f8:	f043 0302 	orr.w	r3, r3, #2
 80082fc:	81a3      	strh	r3, [r4, #12]
 80082fe:	e7e3      	b.n	80082c8 <__smakebuf_r+0xc>
 8008300:	4b0d      	ldr	r3, [pc, #52]	; (8008338 <__smakebuf_r+0x7c>)
 8008302:	62b3      	str	r3, [r6, #40]	; 0x28
 8008304:	89a3      	ldrh	r3, [r4, #12]
 8008306:	6020      	str	r0, [r4, #0]
 8008308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800830c:	81a3      	strh	r3, [r4, #12]
 800830e:	9b00      	ldr	r3, [sp, #0]
 8008310:	6163      	str	r3, [r4, #20]
 8008312:	9b01      	ldr	r3, [sp, #4]
 8008314:	6120      	str	r0, [r4, #16]
 8008316:	b15b      	cbz	r3, 8008330 <__smakebuf_r+0x74>
 8008318:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800831c:	4630      	mov	r0, r6
 800831e:	f000 fca1 	bl	8008c64 <_isatty_r>
 8008322:	b128      	cbz	r0, 8008330 <__smakebuf_r+0x74>
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	f023 0303 	bic.w	r3, r3, #3
 800832a:	f043 0301 	orr.w	r3, r3, #1
 800832e:	81a3      	strh	r3, [r4, #12]
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	431d      	orrs	r5, r3
 8008334:	81a5      	strh	r5, [r4, #12]
 8008336:	e7cd      	b.n	80082d4 <__smakebuf_r+0x18>
 8008338:	08008129 	.word	0x08008129

0800833c <__malloc_lock>:
 800833c:	4770      	bx	lr

0800833e <__malloc_unlock>:
 800833e:	4770      	bx	lr

08008340 <__ssputs_r>:
 8008340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008344:	688e      	ldr	r6, [r1, #8]
 8008346:	429e      	cmp	r6, r3
 8008348:	4682      	mov	sl, r0
 800834a:	460c      	mov	r4, r1
 800834c:	4690      	mov	r8, r2
 800834e:	4699      	mov	r9, r3
 8008350:	d837      	bhi.n	80083c2 <__ssputs_r+0x82>
 8008352:	898a      	ldrh	r2, [r1, #12]
 8008354:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008358:	d031      	beq.n	80083be <__ssputs_r+0x7e>
 800835a:	6825      	ldr	r5, [r4, #0]
 800835c:	6909      	ldr	r1, [r1, #16]
 800835e:	1a6f      	subs	r7, r5, r1
 8008360:	6965      	ldr	r5, [r4, #20]
 8008362:	2302      	movs	r3, #2
 8008364:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008368:	fb95 f5f3 	sdiv	r5, r5, r3
 800836c:	f109 0301 	add.w	r3, r9, #1
 8008370:	443b      	add	r3, r7
 8008372:	429d      	cmp	r5, r3
 8008374:	bf38      	it	cc
 8008376:	461d      	movcc	r5, r3
 8008378:	0553      	lsls	r3, r2, #21
 800837a:	d530      	bpl.n	80083de <__ssputs_r+0x9e>
 800837c:	4629      	mov	r1, r5
 800837e:	f7ff fc83 	bl	8007c88 <_malloc_r>
 8008382:	4606      	mov	r6, r0
 8008384:	b950      	cbnz	r0, 800839c <__ssputs_r+0x5c>
 8008386:	230c      	movs	r3, #12
 8008388:	f8ca 3000 	str.w	r3, [sl]
 800838c:	89a3      	ldrh	r3, [r4, #12]
 800838e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008392:	81a3      	strh	r3, [r4, #12]
 8008394:	f04f 30ff 	mov.w	r0, #4294967295
 8008398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800839c:	463a      	mov	r2, r7
 800839e:	6921      	ldr	r1, [r4, #16]
 80083a0:	f7ff fc10 	bl	8007bc4 <memcpy>
 80083a4:	89a3      	ldrh	r3, [r4, #12]
 80083a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ae:	81a3      	strh	r3, [r4, #12]
 80083b0:	6126      	str	r6, [r4, #16]
 80083b2:	6165      	str	r5, [r4, #20]
 80083b4:	443e      	add	r6, r7
 80083b6:	1bed      	subs	r5, r5, r7
 80083b8:	6026      	str	r6, [r4, #0]
 80083ba:	60a5      	str	r5, [r4, #8]
 80083bc:	464e      	mov	r6, r9
 80083be:	454e      	cmp	r6, r9
 80083c0:	d900      	bls.n	80083c4 <__ssputs_r+0x84>
 80083c2:	464e      	mov	r6, r9
 80083c4:	4632      	mov	r2, r6
 80083c6:	4641      	mov	r1, r8
 80083c8:	6820      	ldr	r0, [r4, #0]
 80083ca:	f000 fc6d 	bl	8008ca8 <memmove>
 80083ce:	68a3      	ldr	r3, [r4, #8]
 80083d0:	1b9b      	subs	r3, r3, r6
 80083d2:	60a3      	str	r3, [r4, #8]
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	441e      	add	r6, r3
 80083d8:	6026      	str	r6, [r4, #0]
 80083da:	2000      	movs	r0, #0
 80083dc:	e7dc      	b.n	8008398 <__ssputs_r+0x58>
 80083de:	462a      	mov	r2, r5
 80083e0:	f000 fc7b 	bl	8008cda <_realloc_r>
 80083e4:	4606      	mov	r6, r0
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d1e2      	bne.n	80083b0 <__ssputs_r+0x70>
 80083ea:	6921      	ldr	r1, [r4, #16]
 80083ec:	4650      	mov	r0, sl
 80083ee:	f7ff fbfd 	bl	8007bec <_free_r>
 80083f2:	e7c8      	b.n	8008386 <__ssputs_r+0x46>

080083f4 <_svfiprintf_r>:
 80083f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f8:	461d      	mov	r5, r3
 80083fa:	898b      	ldrh	r3, [r1, #12]
 80083fc:	061f      	lsls	r7, r3, #24
 80083fe:	b09d      	sub	sp, #116	; 0x74
 8008400:	4680      	mov	r8, r0
 8008402:	460c      	mov	r4, r1
 8008404:	4616      	mov	r6, r2
 8008406:	d50f      	bpl.n	8008428 <_svfiprintf_r+0x34>
 8008408:	690b      	ldr	r3, [r1, #16]
 800840a:	b96b      	cbnz	r3, 8008428 <_svfiprintf_r+0x34>
 800840c:	2140      	movs	r1, #64	; 0x40
 800840e:	f7ff fc3b 	bl	8007c88 <_malloc_r>
 8008412:	6020      	str	r0, [r4, #0]
 8008414:	6120      	str	r0, [r4, #16]
 8008416:	b928      	cbnz	r0, 8008424 <_svfiprintf_r+0x30>
 8008418:	230c      	movs	r3, #12
 800841a:	f8c8 3000 	str.w	r3, [r8]
 800841e:	f04f 30ff 	mov.w	r0, #4294967295
 8008422:	e0c8      	b.n	80085b6 <_svfiprintf_r+0x1c2>
 8008424:	2340      	movs	r3, #64	; 0x40
 8008426:	6163      	str	r3, [r4, #20]
 8008428:	2300      	movs	r3, #0
 800842a:	9309      	str	r3, [sp, #36]	; 0x24
 800842c:	2320      	movs	r3, #32
 800842e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008432:	2330      	movs	r3, #48	; 0x30
 8008434:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008438:	9503      	str	r5, [sp, #12]
 800843a:	f04f 0b01 	mov.w	fp, #1
 800843e:	4637      	mov	r7, r6
 8008440:	463d      	mov	r5, r7
 8008442:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008446:	b10b      	cbz	r3, 800844c <_svfiprintf_r+0x58>
 8008448:	2b25      	cmp	r3, #37	; 0x25
 800844a:	d13e      	bne.n	80084ca <_svfiprintf_r+0xd6>
 800844c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008450:	d00b      	beq.n	800846a <_svfiprintf_r+0x76>
 8008452:	4653      	mov	r3, sl
 8008454:	4632      	mov	r2, r6
 8008456:	4621      	mov	r1, r4
 8008458:	4640      	mov	r0, r8
 800845a:	f7ff ff71 	bl	8008340 <__ssputs_r>
 800845e:	3001      	adds	r0, #1
 8008460:	f000 80a4 	beq.w	80085ac <_svfiprintf_r+0x1b8>
 8008464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008466:	4453      	add	r3, sl
 8008468:	9309      	str	r3, [sp, #36]	; 0x24
 800846a:	783b      	ldrb	r3, [r7, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 809d 	beq.w	80085ac <_svfiprintf_r+0x1b8>
 8008472:	2300      	movs	r3, #0
 8008474:	f04f 32ff 	mov.w	r2, #4294967295
 8008478:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800847c:	9304      	str	r3, [sp, #16]
 800847e:	9307      	str	r3, [sp, #28]
 8008480:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008484:	931a      	str	r3, [sp, #104]	; 0x68
 8008486:	462f      	mov	r7, r5
 8008488:	2205      	movs	r2, #5
 800848a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800848e:	4850      	ldr	r0, [pc, #320]	; (80085d0 <_svfiprintf_r+0x1dc>)
 8008490:	f7f7 fece 	bl	8000230 <memchr>
 8008494:	9b04      	ldr	r3, [sp, #16]
 8008496:	b9d0      	cbnz	r0, 80084ce <_svfiprintf_r+0xda>
 8008498:	06d9      	lsls	r1, r3, #27
 800849a:	bf44      	itt	mi
 800849c:	2220      	movmi	r2, #32
 800849e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80084a2:	071a      	lsls	r2, r3, #28
 80084a4:	bf44      	itt	mi
 80084a6:	222b      	movmi	r2, #43	; 0x2b
 80084a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80084ac:	782a      	ldrb	r2, [r5, #0]
 80084ae:	2a2a      	cmp	r2, #42	; 0x2a
 80084b0:	d015      	beq.n	80084de <_svfiprintf_r+0xea>
 80084b2:	9a07      	ldr	r2, [sp, #28]
 80084b4:	462f      	mov	r7, r5
 80084b6:	2000      	movs	r0, #0
 80084b8:	250a      	movs	r5, #10
 80084ba:	4639      	mov	r1, r7
 80084bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084c0:	3b30      	subs	r3, #48	; 0x30
 80084c2:	2b09      	cmp	r3, #9
 80084c4:	d94d      	bls.n	8008562 <_svfiprintf_r+0x16e>
 80084c6:	b1b8      	cbz	r0, 80084f8 <_svfiprintf_r+0x104>
 80084c8:	e00f      	b.n	80084ea <_svfiprintf_r+0xf6>
 80084ca:	462f      	mov	r7, r5
 80084cc:	e7b8      	b.n	8008440 <_svfiprintf_r+0x4c>
 80084ce:	4a40      	ldr	r2, [pc, #256]	; (80085d0 <_svfiprintf_r+0x1dc>)
 80084d0:	1a80      	subs	r0, r0, r2
 80084d2:	fa0b f000 	lsl.w	r0, fp, r0
 80084d6:	4318      	orrs	r0, r3
 80084d8:	9004      	str	r0, [sp, #16]
 80084da:	463d      	mov	r5, r7
 80084dc:	e7d3      	b.n	8008486 <_svfiprintf_r+0x92>
 80084de:	9a03      	ldr	r2, [sp, #12]
 80084e0:	1d11      	adds	r1, r2, #4
 80084e2:	6812      	ldr	r2, [r2, #0]
 80084e4:	9103      	str	r1, [sp, #12]
 80084e6:	2a00      	cmp	r2, #0
 80084e8:	db01      	blt.n	80084ee <_svfiprintf_r+0xfa>
 80084ea:	9207      	str	r2, [sp, #28]
 80084ec:	e004      	b.n	80084f8 <_svfiprintf_r+0x104>
 80084ee:	4252      	negs	r2, r2
 80084f0:	f043 0302 	orr.w	r3, r3, #2
 80084f4:	9207      	str	r2, [sp, #28]
 80084f6:	9304      	str	r3, [sp, #16]
 80084f8:	783b      	ldrb	r3, [r7, #0]
 80084fa:	2b2e      	cmp	r3, #46	; 0x2e
 80084fc:	d10c      	bne.n	8008518 <_svfiprintf_r+0x124>
 80084fe:	787b      	ldrb	r3, [r7, #1]
 8008500:	2b2a      	cmp	r3, #42	; 0x2a
 8008502:	d133      	bne.n	800856c <_svfiprintf_r+0x178>
 8008504:	9b03      	ldr	r3, [sp, #12]
 8008506:	1d1a      	adds	r2, r3, #4
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	9203      	str	r2, [sp, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	bfb8      	it	lt
 8008510:	f04f 33ff 	movlt.w	r3, #4294967295
 8008514:	3702      	adds	r7, #2
 8008516:	9305      	str	r3, [sp, #20]
 8008518:	4d2e      	ldr	r5, [pc, #184]	; (80085d4 <_svfiprintf_r+0x1e0>)
 800851a:	7839      	ldrb	r1, [r7, #0]
 800851c:	2203      	movs	r2, #3
 800851e:	4628      	mov	r0, r5
 8008520:	f7f7 fe86 	bl	8000230 <memchr>
 8008524:	b138      	cbz	r0, 8008536 <_svfiprintf_r+0x142>
 8008526:	2340      	movs	r3, #64	; 0x40
 8008528:	1b40      	subs	r0, r0, r5
 800852a:	fa03 f000 	lsl.w	r0, r3, r0
 800852e:	9b04      	ldr	r3, [sp, #16]
 8008530:	4303      	orrs	r3, r0
 8008532:	3701      	adds	r7, #1
 8008534:	9304      	str	r3, [sp, #16]
 8008536:	7839      	ldrb	r1, [r7, #0]
 8008538:	4827      	ldr	r0, [pc, #156]	; (80085d8 <_svfiprintf_r+0x1e4>)
 800853a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800853e:	2206      	movs	r2, #6
 8008540:	1c7e      	adds	r6, r7, #1
 8008542:	f7f7 fe75 	bl	8000230 <memchr>
 8008546:	2800      	cmp	r0, #0
 8008548:	d038      	beq.n	80085bc <_svfiprintf_r+0x1c8>
 800854a:	4b24      	ldr	r3, [pc, #144]	; (80085dc <_svfiprintf_r+0x1e8>)
 800854c:	bb13      	cbnz	r3, 8008594 <_svfiprintf_r+0x1a0>
 800854e:	9b03      	ldr	r3, [sp, #12]
 8008550:	3307      	adds	r3, #7
 8008552:	f023 0307 	bic.w	r3, r3, #7
 8008556:	3308      	adds	r3, #8
 8008558:	9303      	str	r3, [sp, #12]
 800855a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800855c:	444b      	add	r3, r9
 800855e:	9309      	str	r3, [sp, #36]	; 0x24
 8008560:	e76d      	b.n	800843e <_svfiprintf_r+0x4a>
 8008562:	fb05 3202 	mla	r2, r5, r2, r3
 8008566:	2001      	movs	r0, #1
 8008568:	460f      	mov	r7, r1
 800856a:	e7a6      	b.n	80084ba <_svfiprintf_r+0xc6>
 800856c:	2300      	movs	r3, #0
 800856e:	3701      	adds	r7, #1
 8008570:	9305      	str	r3, [sp, #20]
 8008572:	4619      	mov	r1, r3
 8008574:	250a      	movs	r5, #10
 8008576:	4638      	mov	r0, r7
 8008578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800857c:	3a30      	subs	r2, #48	; 0x30
 800857e:	2a09      	cmp	r2, #9
 8008580:	d903      	bls.n	800858a <_svfiprintf_r+0x196>
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0c8      	beq.n	8008518 <_svfiprintf_r+0x124>
 8008586:	9105      	str	r1, [sp, #20]
 8008588:	e7c6      	b.n	8008518 <_svfiprintf_r+0x124>
 800858a:	fb05 2101 	mla	r1, r5, r1, r2
 800858e:	2301      	movs	r3, #1
 8008590:	4607      	mov	r7, r0
 8008592:	e7f0      	b.n	8008576 <_svfiprintf_r+0x182>
 8008594:	ab03      	add	r3, sp, #12
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	4622      	mov	r2, r4
 800859a:	4b11      	ldr	r3, [pc, #68]	; (80085e0 <_svfiprintf_r+0x1ec>)
 800859c:	a904      	add	r1, sp, #16
 800859e:	4640      	mov	r0, r8
 80085a0:	f3af 8000 	nop.w
 80085a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80085a8:	4681      	mov	r9, r0
 80085aa:	d1d6      	bne.n	800855a <_svfiprintf_r+0x166>
 80085ac:	89a3      	ldrh	r3, [r4, #12]
 80085ae:	065b      	lsls	r3, r3, #25
 80085b0:	f53f af35 	bmi.w	800841e <_svfiprintf_r+0x2a>
 80085b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085b6:	b01d      	add	sp, #116	; 0x74
 80085b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085bc:	ab03      	add	r3, sp, #12
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	4622      	mov	r2, r4
 80085c2:	4b07      	ldr	r3, [pc, #28]	; (80085e0 <_svfiprintf_r+0x1ec>)
 80085c4:	a904      	add	r1, sp, #16
 80085c6:	4640      	mov	r0, r8
 80085c8:	f000 f9c2 	bl	8008950 <_printf_i>
 80085cc:	e7ea      	b.n	80085a4 <_svfiprintf_r+0x1b0>
 80085ce:	bf00      	nop
 80085d0:	08009088 	.word	0x08009088
 80085d4:	0800908e 	.word	0x0800908e
 80085d8:	08009092 	.word	0x08009092
 80085dc:	00000000 	.word	0x00000000
 80085e0:	08008341 	.word	0x08008341

080085e4 <__sfputc_r>:
 80085e4:	6893      	ldr	r3, [r2, #8]
 80085e6:	3b01      	subs	r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	b410      	push	{r4}
 80085ec:	6093      	str	r3, [r2, #8]
 80085ee:	da08      	bge.n	8008602 <__sfputc_r+0x1e>
 80085f0:	6994      	ldr	r4, [r2, #24]
 80085f2:	42a3      	cmp	r3, r4
 80085f4:	db01      	blt.n	80085fa <__sfputc_r+0x16>
 80085f6:	290a      	cmp	r1, #10
 80085f8:	d103      	bne.n	8008602 <__sfputc_r+0x1e>
 80085fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085fe:	f7ff bbff 	b.w	8007e00 <__swbuf_r>
 8008602:	6813      	ldr	r3, [r2, #0]
 8008604:	1c58      	adds	r0, r3, #1
 8008606:	6010      	str	r0, [r2, #0]
 8008608:	7019      	strb	r1, [r3, #0]
 800860a:	4608      	mov	r0, r1
 800860c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008610:	4770      	bx	lr

08008612 <__sfputs_r>:
 8008612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008614:	4606      	mov	r6, r0
 8008616:	460f      	mov	r7, r1
 8008618:	4614      	mov	r4, r2
 800861a:	18d5      	adds	r5, r2, r3
 800861c:	42ac      	cmp	r4, r5
 800861e:	d101      	bne.n	8008624 <__sfputs_r+0x12>
 8008620:	2000      	movs	r0, #0
 8008622:	e007      	b.n	8008634 <__sfputs_r+0x22>
 8008624:	463a      	mov	r2, r7
 8008626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800862a:	4630      	mov	r0, r6
 800862c:	f7ff ffda 	bl	80085e4 <__sfputc_r>
 8008630:	1c43      	adds	r3, r0, #1
 8008632:	d1f3      	bne.n	800861c <__sfputs_r+0xa>
 8008634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008638 <_vfiprintf_r>:
 8008638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863c:	460c      	mov	r4, r1
 800863e:	b09d      	sub	sp, #116	; 0x74
 8008640:	4617      	mov	r7, r2
 8008642:	461d      	mov	r5, r3
 8008644:	4606      	mov	r6, r0
 8008646:	b118      	cbz	r0, 8008650 <_vfiprintf_r+0x18>
 8008648:	6983      	ldr	r3, [r0, #24]
 800864a:	b90b      	cbnz	r3, 8008650 <_vfiprintf_r+0x18>
 800864c:	f7ff fd88 	bl	8008160 <__sinit>
 8008650:	4b7c      	ldr	r3, [pc, #496]	; (8008844 <_vfiprintf_r+0x20c>)
 8008652:	429c      	cmp	r4, r3
 8008654:	d158      	bne.n	8008708 <_vfiprintf_r+0xd0>
 8008656:	6874      	ldr	r4, [r6, #4]
 8008658:	89a3      	ldrh	r3, [r4, #12]
 800865a:	0718      	lsls	r0, r3, #28
 800865c:	d55e      	bpl.n	800871c <_vfiprintf_r+0xe4>
 800865e:	6923      	ldr	r3, [r4, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d05b      	beq.n	800871c <_vfiprintf_r+0xe4>
 8008664:	2300      	movs	r3, #0
 8008666:	9309      	str	r3, [sp, #36]	; 0x24
 8008668:	2320      	movs	r3, #32
 800866a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800866e:	2330      	movs	r3, #48	; 0x30
 8008670:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008674:	9503      	str	r5, [sp, #12]
 8008676:	f04f 0b01 	mov.w	fp, #1
 800867a:	46b8      	mov	r8, r7
 800867c:	4645      	mov	r5, r8
 800867e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008682:	b10b      	cbz	r3, 8008688 <_vfiprintf_r+0x50>
 8008684:	2b25      	cmp	r3, #37	; 0x25
 8008686:	d154      	bne.n	8008732 <_vfiprintf_r+0xfa>
 8008688:	ebb8 0a07 	subs.w	sl, r8, r7
 800868c:	d00b      	beq.n	80086a6 <_vfiprintf_r+0x6e>
 800868e:	4653      	mov	r3, sl
 8008690:	463a      	mov	r2, r7
 8008692:	4621      	mov	r1, r4
 8008694:	4630      	mov	r0, r6
 8008696:	f7ff ffbc 	bl	8008612 <__sfputs_r>
 800869a:	3001      	adds	r0, #1
 800869c:	f000 80c2 	beq.w	8008824 <_vfiprintf_r+0x1ec>
 80086a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086a2:	4453      	add	r3, sl
 80086a4:	9309      	str	r3, [sp, #36]	; 0x24
 80086a6:	f898 3000 	ldrb.w	r3, [r8]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f000 80ba 	beq.w	8008824 <_vfiprintf_r+0x1ec>
 80086b0:	2300      	movs	r3, #0
 80086b2:	f04f 32ff 	mov.w	r2, #4294967295
 80086b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086ba:	9304      	str	r3, [sp, #16]
 80086bc:	9307      	str	r3, [sp, #28]
 80086be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086c2:	931a      	str	r3, [sp, #104]	; 0x68
 80086c4:	46a8      	mov	r8, r5
 80086c6:	2205      	movs	r2, #5
 80086c8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80086cc:	485e      	ldr	r0, [pc, #376]	; (8008848 <_vfiprintf_r+0x210>)
 80086ce:	f7f7 fdaf 	bl	8000230 <memchr>
 80086d2:	9b04      	ldr	r3, [sp, #16]
 80086d4:	bb78      	cbnz	r0, 8008736 <_vfiprintf_r+0xfe>
 80086d6:	06d9      	lsls	r1, r3, #27
 80086d8:	bf44      	itt	mi
 80086da:	2220      	movmi	r2, #32
 80086dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80086e0:	071a      	lsls	r2, r3, #28
 80086e2:	bf44      	itt	mi
 80086e4:	222b      	movmi	r2, #43	; 0x2b
 80086e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80086ea:	782a      	ldrb	r2, [r5, #0]
 80086ec:	2a2a      	cmp	r2, #42	; 0x2a
 80086ee:	d02a      	beq.n	8008746 <_vfiprintf_r+0x10e>
 80086f0:	9a07      	ldr	r2, [sp, #28]
 80086f2:	46a8      	mov	r8, r5
 80086f4:	2000      	movs	r0, #0
 80086f6:	250a      	movs	r5, #10
 80086f8:	4641      	mov	r1, r8
 80086fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086fe:	3b30      	subs	r3, #48	; 0x30
 8008700:	2b09      	cmp	r3, #9
 8008702:	d969      	bls.n	80087d8 <_vfiprintf_r+0x1a0>
 8008704:	b360      	cbz	r0, 8008760 <_vfiprintf_r+0x128>
 8008706:	e024      	b.n	8008752 <_vfiprintf_r+0x11a>
 8008708:	4b50      	ldr	r3, [pc, #320]	; (800884c <_vfiprintf_r+0x214>)
 800870a:	429c      	cmp	r4, r3
 800870c:	d101      	bne.n	8008712 <_vfiprintf_r+0xda>
 800870e:	68b4      	ldr	r4, [r6, #8]
 8008710:	e7a2      	b.n	8008658 <_vfiprintf_r+0x20>
 8008712:	4b4f      	ldr	r3, [pc, #316]	; (8008850 <_vfiprintf_r+0x218>)
 8008714:	429c      	cmp	r4, r3
 8008716:	bf08      	it	eq
 8008718:	68f4      	ldreq	r4, [r6, #12]
 800871a:	e79d      	b.n	8008658 <_vfiprintf_r+0x20>
 800871c:	4621      	mov	r1, r4
 800871e:	4630      	mov	r0, r6
 8008720:	f7ff fbc0 	bl	8007ea4 <__swsetup_r>
 8008724:	2800      	cmp	r0, #0
 8008726:	d09d      	beq.n	8008664 <_vfiprintf_r+0x2c>
 8008728:	f04f 30ff 	mov.w	r0, #4294967295
 800872c:	b01d      	add	sp, #116	; 0x74
 800872e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008732:	46a8      	mov	r8, r5
 8008734:	e7a2      	b.n	800867c <_vfiprintf_r+0x44>
 8008736:	4a44      	ldr	r2, [pc, #272]	; (8008848 <_vfiprintf_r+0x210>)
 8008738:	1a80      	subs	r0, r0, r2
 800873a:	fa0b f000 	lsl.w	r0, fp, r0
 800873e:	4318      	orrs	r0, r3
 8008740:	9004      	str	r0, [sp, #16]
 8008742:	4645      	mov	r5, r8
 8008744:	e7be      	b.n	80086c4 <_vfiprintf_r+0x8c>
 8008746:	9a03      	ldr	r2, [sp, #12]
 8008748:	1d11      	adds	r1, r2, #4
 800874a:	6812      	ldr	r2, [r2, #0]
 800874c:	9103      	str	r1, [sp, #12]
 800874e:	2a00      	cmp	r2, #0
 8008750:	db01      	blt.n	8008756 <_vfiprintf_r+0x11e>
 8008752:	9207      	str	r2, [sp, #28]
 8008754:	e004      	b.n	8008760 <_vfiprintf_r+0x128>
 8008756:	4252      	negs	r2, r2
 8008758:	f043 0302 	orr.w	r3, r3, #2
 800875c:	9207      	str	r2, [sp, #28]
 800875e:	9304      	str	r3, [sp, #16]
 8008760:	f898 3000 	ldrb.w	r3, [r8]
 8008764:	2b2e      	cmp	r3, #46	; 0x2e
 8008766:	d10e      	bne.n	8008786 <_vfiprintf_r+0x14e>
 8008768:	f898 3001 	ldrb.w	r3, [r8, #1]
 800876c:	2b2a      	cmp	r3, #42	; 0x2a
 800876e:	d138      	bne.n	80087e2 <_vfiprintf_r+0x1aa>
 8008770:	9b03      	ldr	r3, [sp, #12]
 8008772:	1d1a      	adds	r2, r3, #4
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	9203      	str	r2, [sp, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	bfb8      	it	lt
 800877c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008780:	f108 0802 	add.w	r8, r8, #2
 8008784:	9305      	str	r3, [sp, #20]
 8008786:	4d33      	ldr	r5, [pc, #204]	; (8008854 <_vfiprintf_r+0x21c>)
 8008788:	f898 1000 	ldrb.w	r1, [r8]
 800878c:	2203      	movs	r2, #3
 800878e:	4628      	mov	r0, r5
 8008790:	f7f7 fd4e 	bl	8000230 <memchr>
 8008794:	b140      	cbz	r0, 80087a8 <_vfiprintf_r+0x170>
 8008796:	2340      	movs	r3, #64	; 0x40
 8008798:	1b40      	subs	r0, r0, r5
 800879a:	fa03 f000 	lsl.w	r0, r3, r0
 800879e:	9b04      	ldr	r3, [sp, #16]
 80087a0:	4303      	orrs	r3, r0
 80087a2:	f108 0801 	add.w	r8, r8, #1
 80087a6:	9304      	str	r3, [sp, #16]
 80087a8:	f898 1000 	ldrb.w	r1, [r8]
 80087ac:	482a      	ldr	r0, [pc, #168]	; (8008858 <_vfiprintf_r+0x220>)
 80087ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087b2:	2206      	movs	r2, #6
 80087b4:	f108 0701 	add.w	r7, r8, #1
 80087b8:	f7f7 fd3a 	bl	8000230 <memchr>
 80087bc:	2800      	cmp	r0, #0
 80087be:	d037      	beq.n	8008830 <_vfiprintf_r+0x1f8>
 80087c0:	4b26      	ldr	r3, [pc, #152]	; (800885c <_vfiprintf_r+0x224>)
 80087c2:	bb1b      	cbnz	r3, 800880c <_vfiprintf_r+0x1d4>
 80087c4:	9b03      	ldr	r3, [sp, #12]
 80087c6:	3307      	adds	r3, #7
 80087c8:	f023 0307 	bic.w	r3, r3, #7
 80087cc:	3308      	adds	r3, #8
 80087ce:	9303      	str	r3, [sp, #12]
 80087d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d2:	444b      	add	r3, r9
 80087d4:	9309      	str	r3, [sp, #36]	; 0x24
 80087d6:	e750      	b.n	800867a <_vfiprintf_r+0x42>
 80087d8:	fb05 3202 	mla	r2, r5, r2, r3
 80087dc:	2001      	movs	r0, #1
 80087de:	4688      	mov	r8, r1
 80087e0:	e78a      	b.n	80086f8 <_vfiprintf_r+0xc0>
 80087e2:	2300      	movs	r3, #0
 80087e4:	f108 0801 	add.w	r8, r8, #1
 80087e8:	9305      	str	r3, [sp, #20]
 80087ea:	4619      	mov	r1, r3
 80087ec:	250a      	movs	r5, #10
 80087ee:	4640      	mov	r0, r8
 80087f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087f4:	3a30      	subs	r2, #48	; 0x30
 80087f6:	2a09      	cmp	r2, #9
 80087f8:	d903      	bls.n	8008802 <_vfiprintf_r+0x1ca>
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d0c3      	beq.n	8008786 <_vfiprintf_r+0x14e>
 80087fe:	9105      	str	r1, [sp, #20]
 8008800:	e7c1      	b.n	8008786 <_vfiprintf_r+0x14e>
 8008802:	fb05 2101 	mla	r1, r5, r1, r2
 8008806:	2301      	movs	r3, #1
 8008808:	4680      	mov	r8, r0
 800880a:	e7f0      	b.n	80087ee <_vfiprintf_r+0x1b6>
 800880c:	ab03      	add	r3, sp, #12
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	4622      	mov	r2, r4
 8008812:	4b13      	ldr	r3, [pc, #76]	; (8008860 <_vfiprintf_r+0x228>)
 8008814:	a904      	add	r1, sp, #16
 8008816:	4630      	mov	r0, r6
 8008818:	f3af 8000 	nop.w
 800881c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008820:	4681      	mov	r9, r0
 8008822:	d1d5      	bne.n	80087d0 <_vfiprintf_r+0x198>
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	065b      	lsls	r3, r3, #25
 8008828:	f53f af7e 	bmi.w	8008728 <_vfiprintf_r+0xf0>
 800882c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800882e:	e77d      	b.n	800872c <_vfiprintf_r+0xf4>
 8008830:	ab03      	add	r3, sp, #12
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	4622      	mov	r2, r4
 8008836:	4b0a      	ldr	r3, [pc, #40]	; (8008860 <_vfiprintf_r+0x228>)
 8008838:	a904      	add	r1, sp, #16
 800883a:	4630      	mov	r0, r6
 800883c:	f000 f888 	bl	8008950 <_printf_i>
 8008840:	e7ec      	b.n	800881c <_vfiprintf_r+0x1e4>
 8008842:	bf00      	nop
 8008844:	08009048 	.word	0x08009048
 8008848:	08009088 	.word	0x08009088
 800884c:	08009068 	.word	0x08009068
 8008850:	08009028 	.word	0x08009028
 8008854:	0800908e 	.word	0x0800908e
 8008858:	08009092 	.word	0x08009092
 800885c:	00000000 	.word	0x00000000
 8008860:	08008613 	.word	0x08008613

08008864 <_printf_common>:
 8008864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008868:	4691      	mov	r9, r2
 800886a:	461f      	mov	r7, r3
 800886c:	688a      	ldr	r2, [r1, #8]
 800886e:	690b      	ldr	r3, [r1, #16]
 8008870:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008874:	4293      	cmp	r3, r2
 8008876:	bfb8      	it	lt
 8008878:	4613      	movlt	r3, r2
 800887a:	f8c9 3000 	str.w	r3, [r9]
 800887e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008882:	4606      	mov	r6, r0
 8008884:	460c      	mov	r4, r1
 8008886:	b112      	cbz	r2, 800888e <_printf_common+0x2a>
 8008888:	3301      	adds	r3, #1
 800888a:	f8c9 3000 	str.w	r3, [r9]
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	0699      	lsls	r1, r3, #26
 8008892:	bf42      	ittt	mi
 8008894:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008898:	3302      	addmi	r3, #2
 800889a:	f8c9 3000 	strmi.w	r3, [r9]
 800889e:	6825      	ldr	r5, [r4, #0]
 80088a0:	f015 0506 	ands.w	r5, r5, #6
 80088a4:	d107      	bne.n	80088b6 <_printf_common+0x52>
 80088a6:	f104 0a19 	add.w	sl, r4, #25
 80088aa:	68e3      	ldr	r3, [r4, #12]
 80088ac:	f8d9 2000 	ldr.w	r2, [r9]
 80088b0:	1a9b      	subs	r3, r3, r2
 80088b2:	42ab      	cmp	r3, r5
 80088b4:	dc28      	bgt.n	8008908 <_printf_common+0xa4>
 80088b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80088ba:	6822      	ldr	r2, [r4, #0]
 80088bc:	3300      	adds	r3, #0
 80088be:	bf18      	it	ne
 80088c0:	2301      	movne	r3, #1
 80088c2:	0692      	lsls	r2, r2, #26
 80088c4:	d42d      	bmi.n	8008922 <_printf_common+0xbe>
 80088c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088ca:	4639      	mov	r1, r7
 80088cc:	4630      	mov	r0, r6
 80088ce:	47c0      	blx	r8
 80088d0:	3001      	adds	r0, #1
 80088d2:	d020      	beq.n	8008916 <_printf_common+0xb2>
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	68e5      	ldr	r5, [r4, #12]
 80088d8:	f8d9 2000 	ldr.w	r2, [r9]
 80088dc:	f003 0306 	and.w	r3, r3, #6
 80088e0:	2b04      	cmp	r3, #4
 80088e2:	bf08      	it	eq
 80088e4:	1aad      	subeq	r5, r5, r2
 80088e6:	68a3      	ldr	r3, [r4, #8]
 80088e8:	6922      	ldr	r2, [r4, #16]
 80088ea:	bf0c      	ite	eq
 80088ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088f0:	2500      	movne	r5, #0
 80088f2:	4293      	cmp	r3, r2
 80088f4:	bfc4      	itt	gt
 80088f6:	1a9b      	subgt	r3, r3, r2
 80088f8:	18ed      	addgt	r5, r5, r3
 80088fa:	f04f 0900 	mov.w	r9, #0
 80088fe:	341a      	adds	r4, #26
 8008900:	454d      	cmp	r5, r9
 8008902:	d11a      	bne.n	800893a <_printf_common+0xd6>
 8008904:	2000      	movs	r0, #0
 8008906:	e008      	b.n	800891a <_printf_common+0xb6>
 8008908:	2301      	movs	r3, #1
 800890a:	4652      	mov	r2, sl
 800890c:	4639      	mov	r1, r7
 800890e:	4630      	mov	r0, r6
 8008910:	47c0      	blx	r8
 8008912:	3001      	adds	r0, #1
 8008914:	d103      	bne.n	800891e <_printf_common+0xba>
 8008916:	f04f 30ff 	mov.w	r0, #4294967295
 800891a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800891e:	3501      	adds	r5, #1
 8008920:	e7c3      	b.n	80088aa <_printf_common+0x46>
 8008922:	18e1      	adds	r1, r4, r3
 8008924:	1c5a      	adds	r2, r3, #1
 8008926:	2030      	movs	r0, #48	; 0x30
 8008928:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800892c:	4422      	add	r2, r4
 800892e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008932:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008936:	3302      	adds	r3, #2
 8008938:	e7c5      	b.n	80088c6 <_printf_common+0x62>
 800893a:	2301      	movs	r3, #1
 800893c:	4622      	mov	r2, r4
 800893e:	4639      	mov	r1, r7
 8008940:	4630      	mov	r0, r6
 8008942:	47c0      	blx	r8
 8008944:	3001      	adds	r0, #1
 8008946:	d0e6      	beq.n	8008916 <_printf_common+0xb2>
 8008948:	f109 0901 	add.w	r9, r9, #1
 800894c:	e7d8      	b.n	8008900 <_printf_common+0x9c>
	...

08008950 <_printf_i>:
 8008950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008954:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008958:	460c      	mov	r4, r1
 800895a:	7e09      	ldrb	r1, [r1, #24]
 800895c:	b085      	sub	sp, #20
 800895e:	296e      	cmp	r1, #110	; 0x6e
 8008960:	4617      	mov	r7, r2
 8008962:	4606      	mov	r6, r0
 8008964:	4698      	mov	r8, r3
 8008966:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008968:	f000 80b3 	beq.w	8008ad2 <_printf_i+0x182>
 800896c:	d822      	bhi.n	80089b4 <_printf_i+0x64>
 800896e:	2963      	cmp	r1, #99	; 0x63
 8008970:	d036      	beq.n	80089e0 <_printf_i+0x90>
 8008972:	d80a      	bhi.n	800898a <_printf_i+0x3a>
 8008974:	2900      	cmp	r1, #0
 8008976:	f000 80b9 	beq.w	8008aec <_printf_i+0x19c>
 800897a:	2958      	cmp	r1, #88	; 0x58
 800897c:	f000 8083 	beq.w	8008a86 <_printf_i+0x136>
 8008980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008984:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008988:	e032      	b.n	80089f0 <_printf_i+0xa0>
 800898a:	2964      	cmp	r1, #100	; 0x64
 800898c:	d001      	beq.n	8008992 <_printf_i+0x42>
 800898e:	2969      	cmp	r1, #105	; 0x69
 8008990:	d1f6      	bne.n	8008980 <_printf_i+0x30>
 8008992:	6820      	ldr	r0, [r4, #0]
 8008994:	6813      	ldr	r3, [r2, #0]
 8008996:	0605      	lsls	r5, r0, #24
 8008998:	f103 0104 	add.w	r1, r3, #4
 800899c:	d52a      	bpl.n	80089f4 <_printf_i+0xa4>
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6011      	str	r1, [r2, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	da03      	bge.n	80089ae <_printf_i+0x5e>
 80089a6:	222d      	movs	r2, #45	; 0x2d
 80089a8:	425b      	negs	r3, r3
 80089aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80089ae:	486f      	ldr	r0, [pc, #444]	; (8008b6c <_printf_i+0x21c>)
 80089b0:	220a      	movs	r2, #10
 80089b2:	e039      	b.n	8008a28 <_printf_i+0xd8>
 80089b4:	2973      	cmp	r1, #115	; 0x73
 80089b6:	f000 809d 	beq.w	8008af4 <_printf_i+0x1a4>
 80089ba:	d808      	bhi.n	80089ce <_printf_i+0x7e>
 80089bc:	296f      	cmp	r1, #111	; 0x6f
 80089be:	d020      	beq.n	8008a02 <_printf_i+0xb2>
 80089c0:	2970      	cmp	r1, #112	; 0x70
 80089c2:	d1dd      	bne.n	8008980 <_printf_i+0x30>
 80089c4:	6823      	ldr	r3, [r4, #0]
 80089c6:	f043 0320 	orr.w	r3, r3, #32
 80089ca:	6023      	str	r3, [r4, #0]
 80089cc:	e003      	b.n	80089d6 <_printf_i+0x86>
 80089ce:	2975      	cmp	r1, #117	; 0x75
 80089d0:	d017      	beq.n	8008a02 <_printf_i+0xb2>
 80089d2:	2978      	cmp	r1, #120	; 0x78
 80089d4:	d1d4      	bne.n	8008980 <_printf_i+0x30>
 80089d6:	2378      	movs	r3, #120	; 0x78
 80089d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089dc:	4864      	ldr	r0, [pc, #400]	; (8008b70 <_printf_i+0x220>)
 80089de:	e055      	b.n	8008a8c <_printf_i+0x13c>
 80089e0:	6813      	ldr	r3, [r2, #0]
 80089e2:	1d19      	adds	r1, r3, #4
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6011      	str	r1, [r2, #0]
 80089e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089f0:	2301      	movs	r3, #1
 80089f2:	e08c      	b.n	8008b0e <_printf_i+0x1be>
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6011      	str	r1, [r2, #0]
 80089f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089fc:	bf18      	it	ne
 80089fe:	b21b      	sxthne	r3, r3
 8008a00:	e7cf      	b.n	80089a2 <_printf_i+0x52>
 8008a02:	6813      	ldr	r3, [r2, #0]
 8008a04:	6825      	ldr	r5, [r4, #0]
 8008a06:	1d18      	adds	r0, r3, #4
 8008a08:	6010      	str	r0, [r2, #0]
 8008a0a:	0628      	lsls	r0, r5, #24
 8008a0c:	d501      	bpl.n	8008a12 <_printf_i+0xc2>
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	e002      	b.n	8008a18 <_printf_i+0xc8>
 8008a12:	0668      	lsls	r0, r5, #25
 8008a14:	d5fb      	bpl.n	8008a0e <_printf_i+0xbe>
 8008a16:	881b      	ldrh	r3, [r3, #0]
 8008a18:	4854      	ldr	r0, [pc, #336]	; (8008b6c <_printf_i+0x21c>)
 8008a1a:	296f      	cmp	r1, #111	; 0x6f
 8008a1c:	bf14      	ite	ne
 8008a1e:	220a      	movne	r2, #10
 8008a20:	2208      	moveq	r2, #8
 8008a22:	2100      	movs	r1, #0
 8008a24:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a28:	6865      	ldr	r5, [r4, #4]
 8008a2a:	60a5      	str	r5, [r4, #8]
 8008a2c:	2d00      	cmp	r5, #0
 8008a2e:	f2c0 8095 	blt.w	8008b5c <_printf_i+0x20c>
 8008a32:	6821      	ldr	r1, [r4, #0]
 8008a34:	f021 0104 	bic.w	r1, r1, #4
 8008a38:	6021      	str	r1, [r4, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d13d      	bne.n	8008aba <_printf_i+0x16a>
 8008a3e:	2d00      	cmp	r5, #0
 8008a40:	f040 808e 	bne.w	8008b60 <_printf_i+0x210>
 8008a44:	4665      	mov	r5, ip
 8008a46:	2a08      	cmp	r2, #8
 8008a48:	d10b      	bne.n	8008a62 <_printf_i+0x112>
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	07db      	lsls	r3, r3, #31
 8008a4e:	d508      	bpl.n	8008a62 <_printf_i+0x112>
 8008a50:	6923      	ldr	r3, [r4, #16]
 8008a52:	6862      	ldr	r2, [r4, #4]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	bfde      	ittt	le
 8008a58:	2330      	movle	r3, #48	; 0x30
 8008a5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a62:	ebac 0305 	sub.w	r3, ip, r5
 8008a66:	6123      	str	r3, [r4, #16]
 8008a68:	f8cd 8000 	str.w	r8, [sp]
 8008a6c:	463b      	mov	r3, r7
 8008a6e:	aa03      	add	r2, sp, #12
 8008a70:	4621      	mov	r1, r4
 8008a72:	4630      	mov	r0, r6
 8008a74:	f7ff fef6 	bl	8008864 <_printf_common>
 8008a78:	3001      	adds	r0, #1
 8008a7a:	d14d      	bne.n	8008b18 <_printf_i+0x1c8>
 8008a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a80:	b005      	add	sp, #20
 8008a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a86:	4839      	ldr	r0, [pc, #228]	; (8008b6c <_printf_i+0x21c>)
 8008a88:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008a8c:	6813      	ldr	r3, [r2, #0]
 8008a8e:	6821      	ldr	r1, [r4, #0]
 8008a90:	1d1d      	adds	r5, r3, #4
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	6015      	str	r5, [r2, #0]
 8008a96:	060a      	lsls	r2, r1, #24
 8008a98:	d50b      	bpl.n	8008ab2 <_printf_i+0x162>
 8008a9a:	07ca      	lsls	r2, r1, #31
 8008a9c:	bf44      	itt	mi
 8008a9e:	f041 0120 	orrmi.w	r1, r1, #32
 8008aa2:	6021      	strmi	r1, [r4, #0]
 8008aa4:	b91b      	cbnz	r3, 8008aae <_printf_i+0x15e>
 8008aa6:	6822      	ldr	r2, [r4, #0]
 8008aa8:	f022 0220 	bic.w	r2, r2, #32
 8008aac:	6022      	str	r2, [r4, #0]
 8008aae:	2210      	movs	r2, #16
 8008ab0:	e7b7      	b.n	8008a22 <_printf_i+0xd2>
 8008ab2:	064d      	lsls	r5, r1, #25
 8008ab4:	bf48      	it	mi
 8008ab6:	b29b      	uxthmi	r3, r3
 8008ab8:	e7ef      	b.n	8008a9a <_printf_i+0x14a>
 8008aba:	4665      	mov	r5, ip
 8008abc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ac0:	fb02 3311 	mls	r3, r2, r1, r3
 8008ac4:	5cc3      	ldrb	r3, [r0, r3]
 8008ac6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008aca:	460b      	mov	r3, r1
 8008acc:	2900      	cmp	r1, #0
 8008ace:	d1f5      	bne.n	8008abc <_printf_i+0x16c>
 8008ad0:	e7b9      	b.n	8008a46 <_printf_i+0xf6>
 8008ad2:	6813      	ldr	r3, [r2, #0]
 8008ad4:	6825      	ldr	r5, [r4, #0]
 8008ad6:	6961      	ldr	r1, [r4, #20]
 8008ad8:	1d18      	adds	r0, r3, #4
 8008ada:	6010      	str	r0, [r2, #0]
 8008adc:	0628      	lsls	r0, r5, #24
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	d501      	bpl.n	8008ae6 <_printf_i+0x196>
 8008ae2:	6019      	str	r1, [r3, #0]
 8008ae4:	e002      	b.n	8008aec <_printf_i+0x19c>
 8008ae6:	066a      	lsls	r2, r5, #25
 8008ae8:	d5fb      	bpl.n	8008ae2 <_printf_i+0x192>
 8008aea:	8019      	strh	r1, [r3, #0]
 8008aec:	2300      	movs	r3, #0
 8008aee:	6123      	str	r3, [r4, #16]
 8008af0:	4665      	mov	r5, ip
 8008af2:	e7b9      	b.n	8008a68 <_printf_i+0x118>
 8008af4:	6813      	ldr	r3, [r2, #0]
 8008af6:	1d19      	adds	r1, r3, #4
 8008af8:	6011      	str	r1, [r2, #0]
 8008afa:	681d      	ldr	r5, [r3, #0]
 8008afc:	6862      	ldr	r2, [r4, #4]
 8008afe:	2100      	movs	r1, #0
 8008b00:	4628      	mov	r0, r5
 8008b02:	f7f7 fb95 	bl	8000230 <memchr>
 8008b06:	b108      	cbz	r0, 8008b0c <_printf_i+0x1bc>
 8008b08:	1b40      	subs	r0, r0, r5
 8008b0a:	6060      	str	r0, [r4, #4]
 8008b0c:	6863      	ldr	r3, [r4, #4]
 8008b0e:	6123      	str	r3, [r4, #16]
 8008b10:	2300      	movs	r3, #0
 8008b12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b16:	e7a7      	b.n	8008a68 <_printf_i+0x118>
 8008b18:	6923      	ldr	r3, [r4, #16]
 8008b1a:	462a      	mov	r2, r5
 8008b1c:	4639      	mov	r1, r7
 8008b1e:	4630      	mov	r0, r6
 8008b20:	47c0      	blx	r8
 8008b22:	3001      	adds	r0, #1
 8008b24:	d0aa      	beq.n	8008a7c <_printf_i+0x12c>
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	079b      	lsls	r3, r3, #30
 8008b2a:	d413      	bmi.n	8008b54 <_printf_i+0x204>
 8008b2c:	68e0      	ldr	r0, [r4, #12]
 8008b2e:	9b03      	ldr	r3, [sp, #12]
 8008b30:	4298      	cmp	r0, r3
 8008b32:	bfb8      	it	lt
 8008b34:	4618      	movlt	r0, r3
 8008b36:	e7a3      	b.n	8008a80 <_printf_i+0x130>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	464a      	mov	r2, r9
 8008b3c:	4639      	mov	r1, r7
 8008b3e:	4630      	mov	r0, r6
 8008b40:	47c0      	blx	r8
 8008b42:	3001      	adds	r0, #1
 8008b44:	d09a      	beq.n	8008a7c <_printf_i+0x12c>
 8008b46:	3501      	adds	r5, #1
 8008b48:	68e3      	ldr	r3, [r4, #12]
 8008b4a:	9a03      	ldr	r2, [sp, #12]
 8008b4c:	1a9b      	subs	r3, r3, r2
 8008b4e:	42ab      	cmp	r3, r5
 8008b50:	dcf2      	bgt.n	8008b38 <_printf_i+0x1e8>
 8008b52:	e7eb      	b.n	8008b2c <_printf_i+0x1dc>
 8008b54:	2500      	movs	r5, #0
 8008b56:	f104 0919 	add.w	r9, r4, #25
 8008b5a:	e7f5      	b.n	8008b48 <_printf_i+0x1f8>
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1ac      	bne.n	8008aba <_printf_i+0x16a>
 8008b60:	7803      	ldrb	r3, [r0, #0]
 8008b62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b66:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b6a:	e76c      	b.n	8008a46 <_printf_i+0xf6>
 8008b6c:	08009099 	.word	0x08009099
 8008b70:	080090aa 	.word	0x080090aa

08008b74 <__sread>:
 8008b74:	b510      	push	{r4, lr}
 8008b76:	460c      	mov	r4, r1
 8008b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b7c:	f000 f8d4 	bl	8008d28 <_read_r>
 8008b80:	2800      	cmp	r0, #0
 8008b82:	bfab      	itete	ge
 8008b84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b86:	89a3      	ldrhlt	r3, [r4, #12]
 8008b88:	181b      	addge	r3, r3, r0
 8008b8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b8e:	bfac      	ite	ge
 8008b90:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b92:	81a3      	strhlt	r3, [r4, #12]
 8008b94:	bd10      	pop	{r4, pc}

08008b96 <__swrite>:
 8008b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b9a:	461f      	mov	r7, r3
 8008b9c:	898b      	ldrh	r3, [r1, #12]
 8008b9e:	05db      	lsls	r3, r3, #23
 8008ba0:	4605      	mov	r5, r0
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	4616      	mov	r6, r2
 8008ba6:	d505      	bpl.n	8008bb4 <__swrite+0x1e>
 8008ba8:	2302      	movs	r3, #2
 8008baa:	2200      	movs	r2, #0
 8008bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb0:	f000 f868 	bl	8008c84 <_lseek_r>
 8008bb4:	89a3      	ldrh	r3, [r4, #12]
 8008bb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bbe:	81a3      	strh	r3, [r4, #12]
 8008bc0:	4632      	mov	r2, r6
 8008bc2:	463b      	mov	r3, r7
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bca:	f000 b817 	b.w	8008bfc <_write_r>

08008bce <__sseek>:
 8008bce:	b510      	push	{r4, lr}
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bd6:	f000 f855 	bl	8008c84 <_lseek_r>
 8008bda:	1c43      	adds	r3, r0, #1
 8008bdc:	89a3      	ldrh	r3, [r4, #12]
 8008bde:	bf15      	itete	ne
 8008be0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008be2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008be6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bea:	81a3      	strheq	r3, [r4, #12]
 8008bec:	bf18      	it	ne
 8008bee:	81a3      	strhne	r3, [r4, #12]
 8008bf0:	bd10      	pop	{r4, pc}

08008bf2 <__sclose>:
 8008bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bf6:	f000 b813 	b.w	8008c20 <_close_r>
	...

08008bfc <_write_r>:
 8008bfc:	b538      	push	{r3, r4, r5, lr}
 8008bfe:	4c07      	ldr	r4, [pc, #28]	; (8008c1c <_write_r+0x20>)
 8008c00:	4605      	mov	r5, r0
 8008c02:	4608      	mov	r0, r1
 8008c04:	4611      	mov	r1, r2
 8008c06:	2200      	movs	r2, #0
 8008c08:	6022      	str	r2, [r4, #0]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	f7f8 ffec 	bl	8001be8 <_write>
 8008c10:	1c43      	adds	r3, r0, #1
 8008c12:	d102      	bne.n	8008c1a <_write_r+0x1e>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	b103      	cbz	r3, 8008c1a <_write_r+0x1e>
 8008c18:	602b      	str	r3, [r5, #0]
 8008c1a:	bd38      	pop	{r3, r4, r5, pc}
 8008c1c:	20007678 	.word	0x20007678

08008c20 <_close_r>:
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	4c06      	ldr	r4, [pc, #24]	; (8008c3c <_close_r+0x1c>)
 8008c24:	2300      	movs	r3, #0
 8008c26:	4605      	mov	r5, r0
 8008c28:	4608      	mov	r0, r1
 8008c2a:	6023      	str	r3, [r4, #0]
 8008c2c:	f7f8 fff8 	bl	8001c20 <_close>
 8008c30:	1c43      	adds	r3, r0, #1
 8008c32:	d102      	bne.n	8008c3a <_close_r+0x1a>
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	b103      	cbz	r3, 8008c3a <_close_r+0x1a>
 8008c38:	602b      	str	r3, [r5, #0]
 8008c3a:	bd38      	pop	{r3, r4, r5, pc}
 8008c3c:	20007678 	.word	0x20007678

08008c40 <_fstat_r>:
 8008c40:	b538      	push	{r3, r4, r5, lr}
 8008c42:	4c07      	ldr	r4, [pc, #28]	; (8008c60 <_fstat_r+0x20>)
 8008c44:	2300      	movs	r3, #0
 8008c46:	4605      	mov	r5, r0
 8008c48:	4608      	mov	r0, r1
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	6023      	str	r3, [r4, #0]
 8008c4e:	f7f8 fff3 	bl	8001c38 <_fstat>
 8008c52:	1c43      	adds	r3, r0, #1
 8008c54:	d102      	bne.n	8008c5c <_fstat_r+0x1c>
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	b103      	cbz	r3, 8008c5c <_fstat_r+0x1c>
 8008c5a:	602b      	str	r3, [r5, #0]
 8008c5c:	bd38      	pop	{r3, r4, r5, pc}
 8008c5e:	bf00      	nop
 8008c60:	20007678 	.word	0x20007678

08008c64 <_isatty_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	4c06      	ldr	r4, [pc, #24]	; (8008c80 <_isatty_r+0x1c>)
 8008c68:	2300      	movs	r3, #0
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	4608      	mov	r0, r1
 8008c6e:	6023      	str	r3, [r4, #0]
 8008c70:	f7f8 fff2 	bl	8001c58 <_isatty>
 8008c74:	1c43      	adds	r3, r0, #1
 8008c76:	d102      	bne.n	8008c7e <_isatty_r+0x1a>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	b103      	cbz	r3, 8008c7e <_isatty_r+0x1a>
 8008c7c:	602b      	str	r3, [r5, #0]
 8008c7e:	bd38      	pop	{r3, r4, r5, pc}
 8008c80:	20007678 	.word	0x20007678

08008c84 <_lseek_r>:
 8008c84:	b538      	push	{r3, r4, r5, lr}
 8008c86:	4c07      	ldr	r4, [pc, #28]	; (8008ca4 <_lseek_r+0x20>)
 8008c88:	4605      	mov	r5, r0
 8008c8a:	4608      	mov	r0, r1
 8008c8c:	4611      	mov	r1, r2
 8008c8e:	2200      	movs	r2, #0
 8008c90:	6022      	str	r2, [r4, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	f7f8 ffeb 	bl	8001c6e <_lseek>
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	d102      	bne.n	8008ca2 <_lseek_r+0x1e>
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	b103      	cbz	r3, 8008ca2 <_lseek_r+0x1e>
 8008ca0:	602b      	str	r3, [r5, #0]
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
 8008ca4:	20007678 	.word	0x20007678

08008ca8 <memmove>:
 8008ca8:	4288      	cmp	r0, r1
 8008caa:	b510      	push	{r4, lr}
 8008cac:	eb01 0302 	add.w	r3, r1, r2
 8008cb0:	d807      	bhi.n	8008cc2 <memmove+0x1a>
 8008cb2:	1e42      	subs	r2, r0, #1
 8008cb4:	4299      	cmp	r1, r3
 8008cb6:	d00a      	beq.n	8008cce <memmove+0x26>
 8008cb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cbc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008cc0:	e7f8      	b.n	8008cb4 <memmove+0xc>
 8008cc2:	4283      	cmp	r3, r0
 8008cc4:	d9f5      	bls.n	8008cb2 <memmove+0xa>
 8008cc6:	1881      	adds	r1, r0, r2
 8008cc8:	1ad2      	subs	r2, r2, r3
 8008cca:	42d3      	cmn	r3, r2
 8008ccc:	d100      	bne.n	8008cd0 <memmove+0x28>
 8008cce:	bd10      	pop	{r4, pc}
 8008cd0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cd4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008cd8:	e7f7      	b.n	8008cca <memmove+0x22>

08008cda <_realloc_r>:
 8008cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cdc:	4607      	mov	r7, r0
 8008cde:	4614      	mov	r4, r2
 8008ce0:	460e      	mov	r6, r1
 8008ce2:	b921      	cbnz	r1, 8008cee <_realloc_r+0x14>
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008cea:	f7fe bfcd 	b.w	8007c88 <_malloc_r>
 8008cee:	b922      	cbnz	r2, 8008cfa <_realloc_r+0x20>
 8008cf0:	f7fe ff7c 	bl	8007bec <_free_r>
 8008cf4:	4625      	mov	r5, r4
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cfa:	f000 f827 	bl	8008d4c <_malloc_usable_size_r>
 8008cfe:	42a0      	cmp	r0, r4
 8008d00:	d20f      	bcs.n	8008d22 <_realloc_r+0x48>
 8008d02:	4621      	mov	r1, r4
 8008d04:	4638      	mov	r0, r7
 8008d06:	f7fe ffbf 	bl	8007c88 <_malloc_r>
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	d0f2      	beq.n	8008cf6 <_realloc_r+0x1c>
 8008d10:	4631      	mov	r1, r6
 8008d12:	4622      	mov	r2, r4
 8008d14:	f7fe ff56 	bl	8007bc4 <memcpy>
 8008d18:	4631      	mov	r1, r6
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	f7fe ff66 	bl	8007bec <_free_r>
 8008d20:	e7e9      	b.n	8008cf6 <_realloc_r+0x1c>
 8008d22:	4635      	mov	r5, r6
 8008d24:	e7e7      	b.n	8008cf6 <_realloc_r+0x1c>
	...

08008d28 <_read_r>:
 8008d28:	b538      	push	{r3, r4, r5, lr}
 8008d2a:	4c07      	ldr	r4, [pc, #28]	; (8008d48 <_read_r+0x20>)
 8008d2c:	4605      	mov	r5, r0
 8008d2e:	4608      	mov	r0, r1
 8008d30:	4611      	mov	r1, r2
 8008d32:	2200      	movs	r2, #0
 8008d34:	6022      	str	r2, [r4, #0]
 8008d36:	461a      	mov	r2, r3
 8008d38:	f7f8 ff39 	bl	8001bae <_read>
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	d102      	bne.n	8008d46 <_read_r+0x1e>
 8008d40:	6823      	ldr	r3, [r4, #0]
 8008d42:	b103      	cbz	r3, 8008d46 <_read_r+0x1e>
 8008d44:	602b      	str	r3, [r5, #0]
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	20007678 	.word	0x20007678

08008d4c <_malloc_usable_size_r>:
 8008d4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d50:	1f18      	subs	r0, r3, #4
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	bfbc      	itt	lt
 8008d56:	580b      	ldrlt	r3, [r1, r0]
 8008d58:	18c0      	addlt	r0, r0, r3
 8008d5a:	4770      	bx	lr

08008d5c <_init>:
 8008d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5e:	bf00      	nop
 8008d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d62:	bc08      	pop	{r3}
 8008d64:	469e      	mov	lr, r3
 8008d66:	4770      	bx	lr

08008d68 <_fini>:
 8008d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6a:	bf00      	nop
 8008d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6e:	bc08      	pop	{r3}
 8008d70:	469e      	mov	lr, r3
 8008d72:	4770      	bx	lr
