
413_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b960  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000854  0800bb40  0800bb40  0001bb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c394  0800c394  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c394  0800c394  0001c394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c39c  0800c39c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c39c  0800c39c  0001c39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3a0  0800c3a0  0001c3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800c3a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006fa0  2000008c  0800c430  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000702c  0800c430  0002702c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002276b  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000044c6  00000000  00000000  00042827  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b68  00000000  00000000  00046cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001940  00000000  00000000  00048858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000292e4  00000000  00000000  0004a198  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c5f7  00000000  00000000  0007347c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e2f87  00000000  00000000  0008fa73  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001729fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a90  00000000  00000000  00172a78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bb28 	.word	0x0800bb28

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000090 	.word	0x20000090
 800021c:	0800bb28 	.word	0x0800bb28

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <write_PCM16_stereo_header>:
#include "fatfs.h"


/*Return 0 on success and -1 on failure*/
int write_PCM16_stereo_header(FILE* file_p, int32_t SampleRate, int32_t FrameCount)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
    int32_t subchunk2_size;
    int32_t chunk_size;

    size_t write_count;

    subchunk2_size  = FrameCount * NUM_CHANNELS * BITS_PER_SAMPLE/8;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	011b      	lsls	r3, r3, #4
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	da00      	bge.n	80005d6 <write_PCM16_stereo_header+0x16>
 80005d4:	3307      	adds	r3, #7
 80005d6:	10db      	asrs	r3, r3, #3
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    chunk_size      = 4 + (8 + SUBCHUNK1SIZE) + (8 + subchunk2_size);
 80005da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005dc:	3324      	adds	r3, #36	; 0x24
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48

    wav_header.ChunkID[0] = 'R';
 80005e0:	2352      	movs	r3, #82	; 0x52
 80005e2:	763b      	strb	r3, [r7, #24]
    wav_header.ChunkID[1] = 'I';
 80005e4:	2349      	movs	r3, #73	; 0x49
 80005e6:	767b      	strb	r3, [r7, #25]
    wav_header.ChunkID[2] = 'F';
 80005e8:	2346      	movs	r3, #70	; 0x46
 80005ea:	76bb      	strb	r3, [r7, #26]
    wav_header.ChunkID[3] = 'F';
 80005ec:	2346      	movs	r3, #70	; 0x46
 80005ee:	76fb      	strb	r3, [r7, #27]

    wav_header.ChunkSize = chunk_size;
 80005f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005f2:	61fb      	str	r3, [r7, #28]

    wav_header.Format[0] = 'W';
 80005f4:	2357      	movs	r3, #87	; 0x57
 80005f6:	f887 3020 	strb.w	r3, [r7, #32]
    wav_header.Format[1] = 'A';
 80005fa:	2341      	movs	r3, #65	; 0x41
 80005fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    wav_header.Format[2] = 'V';
 8000600:	2356      	movs	r3, #86	; 0x56
 8000602:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    wav_header.Format[3] = 'E';
 8000606:	2345      	movs	r3, #69	; 0x45
 8000608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    wav_header.Subchunk1ID[0] = 'f';
 800060c:	2366      	movs	r3, #102	; 0x66
 800060e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    wav_header.Subchunk1ID[1] = 'm';
 8000612:	236d      	movs	r3, #109	; 0x6d
 8000614:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    wav_header.Subchunk1ID[2] = 't';
 8000618:	2374      	movs	r3, #116	; 0x74
 800061a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    wav_header.Subchunk1ID[3] = ' ';
 800061e:	2320      	movs	r3, #32
 8000620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    wav_header.Subchunk1Size = SUBCHUNK1SIZE;
 8000624:	2310      	movs	r3, #16
 8000626:	62bb      	str	r3, [r7, #40]	; 0x28
    wav_header.AudioFormat = AUDIO_FORMAT;
 8000628:	2301      	movs	r3, #1
 800062a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    wav_header.NumChannels = NUM_CHANNELS;
 800062c:	2301      	movs	r3, #1
 800062e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    wav_header.SampleRate = SampleRate;
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
    wav_header.ByteRate = BYTE_RATE;
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <write_PCM16_stereo_header+0xcc>)
 8000636:	637b      	str	r3, [r7, #52]	; 0x34
    wav_header.BlockAlign = BLOCK_ALIGN;
 8000638:	2302      	movs	r3, #2
 800063a:	873b      	strh	r3, [r7, #56]	; 0x38
    wav_header.BitsPerSample = BITS_PER_SAMPLE;
 800063c:	2310      	movs	r3, #16
 800063e:	877b      	strh	r3, [r7, #58]	; 0x3a

    wav_header.Subchunk2ID[0] = 'd';
 8000640:	2364      	movs	r3, #100	; 0x64
 8000642:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    wav_header.Subchunk2ID[1] = 'a';
 8000646:	2361      	movs	r3, #97	; 0x61
 8000648:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    wav_header.Subchunk2ID[2] = 't';
 800064c:	2374      	movs	r3, #116	; 0x74
 800064e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    wav_header.Subchunk2ID[3] = 'a';
 8000652:	2361      	movs	r3, #97	; 0x61
 8000654:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    wav_header.Subchunk2Size = subchunk2_size;
 8000658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800065a:	643b      	str	r3, [r7, #64]	; 0x40

    UINT byteCount;
	ret = f_write(file_p, &wav_header, sizeof(wavfile_header_t), &byteCount);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	f107 0118 	add.w	r1, r7, #24
 8000664:	222c      	movs	r2, #44	; 0x2c
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	f00a f840 	bl	800a6ec <f_write>
 800066c:	4603      	mov	r3, r0
 800066e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	printf("header write result = %d\r\n", ret);
 8000672:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000676:	4619      	mov	r1, r3
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <write_PCM16_stereo_header+0xd0>)
 800067a:	f00a fbb5 	bl	800ade8 <iprintf>
//	ret = f_close(file_p);
//	printf("header close result = %d\r\n", ret);
    return ret;
 800067e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000682:	4618      	mov	r0, r3
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	00017700 	.word	0x00017700
 8000690:	0800bb40 	.word	0x0800bb40

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f001 ffc1 	bl	8002620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f875 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f000 fae9 	bl	8000c78 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a6:	f000 fac7 	bl	8000c38 <MX_DMA_Init>
  MX_ADC1_Init();
 80006aa:	f000 f8ff 	bl	80008ac <MX_ADC1_Init>
  MX_DAC_Init();
 80006ae:	f000 f94f 	bl	8000950 <MX_DAC_Init>
  MX_DFSDM1_Init();
 80006b2:	f000 f977 	bl	80009a4 <MX_DFSDM1_Init>
  MX_FMPI2C1_Init();
 80006b6:	f000 f9db 	bl	8000a70 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 80006ba:	f000 fd09 	bl	80010d0 <MX_FSMC_Init>
  MX_QUADSPI_Init();
 80006be:	f000 fa0d 	bl	8000adc <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 80006c2:	f000 fa37 	bl	8000b34 <MX_SDIO_SD_Init>
  MX_USART6_UART_Init();
 80006c6:	f000 fa8d 	bl	8000be4 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80006ca:	f007 f9cd 	bl	8007a68 <MX_FATFS_Init>
  MX_SPI3_Init();
 80006ce:	f000 fa51 	bl	8000b74 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2120      	movs	r1, #32
 80006d6:	4820      	ldr	r0, [pc, #128]	; (8000758 <main+0xc4>)
 80006d8:	f003 fdb2 	bl	8004240 <HAL_GPIO_WritePin>

  ConnectWifi(&hspi3);
 80006dc:	481f      	ldr	r0, [pc, #124]	; (800075c <main+0xc8>)
 80006de:	f001 fd5b 	bl	8002198 <ConnectWifi>
  WifiStartup();
 80006e2:	f001 fda7 	bl	8002234 <WifiStartup>

  SetSSID();
 80006e6:	f001 fdd3 	bl	8002290 <SetSSID>
//  GetWifiConnectionStatus();
//  SendHelpCommand();
//  GetHelpCommand();


	printf("path: '%s'\r\n", SDPath);
 80006ea:	491d      	ldr	r1, [pc, #116]	; (8000760 <main+0xcc>)
 80006ec:	481d      	ldr	r0, [pc, #116]	; (8000764 <main+0xd0>)
 80006ee:	f00a fb7b 	bl	800ade8 <iprintf>
//	double duration = 10; /*seconds*/


	fRet = f_mount(&myFAT, SDPath, 1);
 80006f2:	2201      	movs	r2, #1
 80006f4:	491a      	ldr	r1, [pc, #104]	; (8000760 <main+0xcc>)
 80006f6:	481c      	ldr	r0, [pc, #112]	; (8000768 <main+0xd4>)
 80006f8:	f009 fde6 	bl	800a2c8 <f_mount>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <main+0xd8>)
 8000702:	701a      	strb	r2, [r3, #0]
	printf("header write result = %d\r\n", fRet);
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <main+0xd8>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	4819      	ldr	r0, [pc, #100]	; (8000770 <main+0xdc>)
 800070c:	f00a fb6c 	bl	800ade8 <iprintf>

	f_open(&myFile, fname, FA_WRITE | FA_CREATE_ALWAYS);
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <main+0xe0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	220a      	movs	r2, #10
 8000716:	4619      	mov	r1, r3
 8000718:	4817      	ldr	r0, [pc, #92]	; (8000778 <main+0xe4>)
 800071a:	f009 fe1b 	bl	800a354 <f_open>

	write_PCM16_stereo_header(&myFile, SAMPLE_RATE, FrameCount * AUDIO_REC);
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <main+0xe8>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	029b      	lsls	r3, r3, #10
 8000724:	461a      	mov	r2, r3
 8000726:	f64b 3180 	movw	r1, #48000	; 0xbb80
 800072a:	4813      	ldr	r0, [pc, #76]	; (8000778 <main+0xe4>)
 800072c:	f7ff ff48 	bl	80005c0 <write_PCM16_stereo_header>
//	write_PCM16_stereo_header(&myFile, SAMPLE_RATE, 131072);
//	write_PCM_mono_2khz(&myFile);


  ret = HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, Rec1Buf, AUDIO_REC);
 8000730:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000734:	4912      	ldr	r1, [pc, #72]	; (8000780 <main+0xec>)
 8000736:	4813      	ldr	r0, [pc, #76]	; (8000784 <main+0xf0>)
 8000738:	f002 fe1a 	bl	8003370 <HAL_DFSDM_FilterRegularStart_DMA>
 800073c:	4603      	mov	r3, r0
 800073e:	71fb      	strb	r3, [r7, #7]
  if(ret != HAL_OK)
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d002      	beq.n	800074c <main+0xb8>
  {
	  printf("DMA on filter not started");
 8000746:	4810      	ldr	r0, [pc, #64]	; (8000788 <main+0xf4>)
 8000748:	f00a fb4e 	bl	800ade8 <iprintf>
  }
   HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2120      	movs	r1, #32
 8000750:	4801      	ldr	r0, [pc, #4]	; (8000758 <main+0xc4>)
 8000752:	f003 fd75 	bl	8004240 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000756:	e7fe      	b.n	8000756 <main+0xc2>
 8000758:	40020800 	.word	0x40020800
 800075c:	20003464 	.word	0x20003464
 8000760:	20004fbc 	.word	0x20004fbc
 8000764:	0800bb68 	.word	0x0800bb68
 8000768:	200036d8 	.word	0x200036d8
 800076c:	200000a8 	.word	0x200000a8
 8000770:	0800bb78 	.word	0x0800bb78
 8000774:	20000004 	.word	0x20000004
 8000778:	2000138c 	.word	0x2000138c
 800077c:	20000000 	.word	0x20000000
 8000780:	200023bc 	.word	0x200023bc
 8000784:	200033bc 	.word	0x200033bc
 8000788:	0800bb94 	.word	0x0800bb94

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b0aa      	sub	sp, #168	; 0xa8
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000796:	2234      	movs	r2, #52	; 0x34
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f00a fa73 	bl	800ac86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	2258      	movs	r2, #88	; 0x58
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f00a fa64 	bl	800ac86 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b38      	ldr	r3, [pc, #224]	; (80008a4 <SystemClock_Config+0x118>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	4a37      	ldr	r2, [pc, #220]	; (80008a4 <SystemClock_Config+0x118>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	6413      	str	r3, [r2, #64]	; 0x40
 80007ce:	4b35      	ldr	r3, [pc, #212]	; (80008a4 <SystemClock_Config+0x118>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b32      	ldr	r3, [pc, #200]	; (80008a8 <SystemClock_Config+0x11c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a31      	ldr	r2, [pc, #196]	; (80008a8 <SystemClock_Config+0x11c>)
 80007e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e8:	6013      	str	r3, [r2, #0]
 80007ea:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <SystemClock_Config+0x11c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f6:	2302      	movs	r3, #2
 80007f8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fa:	2301      	movs	r3, #1
 80007fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000800:	2310      	movs	r3, #16
 8000802:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000806:	2302      	movs	r3, #2
 8000808:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000812:	2308      	movs	r3, #8
 8000814:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000818:	2360      	movs	r3, #96	; 0x60
 800081a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800081e:	2302      	movs	r3, #2
 8000820:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000824:	2304      	movs	r3, #4
 8000826:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000834:	4618      	mov	r0, r3
 8000836:	f004 fa37 	bl	8004ca8 <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000840:	f000 feac 	bl	800159c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	230f      	movs	r3, #15
 8000846:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000848:	2302      	movs	r3, #2
 800084a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000854:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800085a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800085e:	2103      	movs	r1, #3
 8000860:	4618      	mov	r0, r3
 8000862:	f003 fdc9 	bl	80043f8 <HAL_RCC_ClockConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800086c:	f000 fe96 	bl	800159c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_SDIO
 8000870:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8000874:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000876:	2300      	movs	r3, #0
 8000878:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 800087a:	2300      	movs	r3, #0
 800087c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800087e:	2300      	movs	r3, #0
 8000880:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8000882:	2300      	movs	r3, #0
 8000884:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	4618      	mov	r0, r3
 800088c:	f003 ff80 	bl	8004790 <HAL_RCCEx_PeriphCLKConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8000896:	f000 fe81 	bl	800159c <Error_Handler>
  }
}
 800089a:	bf00      	nop
 800089c:	37a8      	adds	r7, #168	; 0xa8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40007000 	.word	0x40007000

080008ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008b2:	463b      	mov	r3, r7
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_ADC1_Init+0x98>)
 80008c0:	4a21      	ldr	r2, [pc, #132]	; (8000948 <MX_ADC1_Init+0x9c>)
 80008c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <MX_ADC1_Init+0x98>)
 80008c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008cc:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_ADC1_Init+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <MX_ADC1_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC1_Init+0x98>)
 80008da:	2200      	movs	r2, #0
 80008dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_ADC1_Init+0x98>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_ADC1_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_ADC1_Init+0x98>)
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <MX_ADC1_Init+0xa0>)
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_ADC1_Init+0x98>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_ADC1_Init+0x98>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_ADC1_Init+0x98>)
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_ADC1_Init+0x98>)
 8000908:	2201      	movs	r2, #1
 800090a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800090c:	480d      	ldr	r0, [pc, #52]	; (8000944 <MX_ADC1_Init+0x98>)
 800090e:	f001 ff1b 	bl	8002748 <HAL_ADC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000918:	f000 fe40 	bl	800159c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800091c:	230a      	movs	r3, #10
 800091e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000920:	2301      	movs	r3, #1
 8000922:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000928:	463b      	mov	r3, r7
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_ADC1_Init+0x98>)
 800092e:	f001 ff4f 	bl	80027d0 <HAL_ADC_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000938:	f000 fe30 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200034bc 	.word	0x200034bc
 8000948:	40012000 	.word	0x40012000
 800094c:	0f000001 	.word	0x0f000001

08000950 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000956:	463b      	mov	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_DAC_Init+0x4c>)
 8000960:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <MX_DAC_Init+0x50>)
 8000962:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <MX_DAC_Init+0x4c>)
 8000966:	f002 fa72 	bl	8002e4e <HAL_DAC_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000970:	f000 fe14 	bl	800159c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000974:	2300      	movs	r3, #0
 8000976:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	2200      	movs	r2, #0
 8000980:	4619      	mov	r1, r3
 8000982:	4806      	ldr	r0, [pc, #24]	; (800099c <MX_DAC_Init+0x4c>)
 8000984:	f002 fa85 	bl	8002e92 <HAL_DAC_ConfigChannel>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800098e:	f000 fe05 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20003564 	.word	0x20003564
 80009a0:	40007400 	.word	0x40007400

080009a4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80009a8:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <MX_DFSDM1_Init+0xb8>)
 80009aa:	4a2d      	ldr	r2, [pc, #180]	; (8000a60 <MX_DFSDM1_Init+0xbc>)
 80009ac:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80009ae:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <MX_DFSDM1_Init+0xb8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80009b4:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <MX_DFSDM1_Init+0xb8>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80009ba:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <MX_DFSDM1_Init+0xb8>)
 80009bc:	2201      	movs	r2, #1
 80009be:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80009c0:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <MX_DFSDM1_Init+0xb8>)
 80009c2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80009c6:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 50;
 80009c8:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <MX_DFSDM1_Init+0xb8>)
 80009ca:	2232      	movs	r2, #50	; 0x32
 80009cc:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80009ce:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <MX_DFSDM1_Init+0xb8>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80009d4:	4821      	ldr	r0, [pc, #132]	; (8000a5c <MX_DFSDM1_Init+0xb8>)
 80009d6:	f002 fb99 	bl	800310c <HAL_DFSDM_FilterInit>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80009e0:	f000 fddc 	bl	800159c <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80009e4:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <MX_DFSDM1_Init+0xc0>)
 80009e6:	4a20      	ldr	r2, [pc, #128]	; (8000a68 <MX_DFSDM1_Init+0xc4>)
 80009e8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_DFSDM1_Init+0xc0>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80009f0:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <MX_DFSDM1_Init+0xc0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 40;
 80009f6:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_DFSDM1_Init+0xc0>)
 80009f8:	2228      	movs	r2, #40	; 0x28
 80009fa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80009fc:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <MX_DFSDM1_Init+0xc0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_DFSDM1_Init+0xc0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_DFSDM1_Init+0xc0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_DFSDM1_Init+0xc0>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000a14:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_DFSDM1_Init+0xc0>)
 8000a16:	2204      	movs	r2, #4
 8000a18:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_DFSDM1_Init+0xc0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_DFSDM1_Init+0xc0>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_DFSDM1_Init+0xc0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x0;
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <MX_DFSDM1_Init+0xc0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000a32:	480c      	ldr	r0, [pc, #48]	; (8000a64 <MX_DFSDM1_Init+0xc0>)
 8000a34:	f002 fa7a 	bl	8002f2c <HAL_DFSDM_ChannelInit>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000a3e:	f000 fdad 	bl	800159c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000a42:	2201      	movs	r2, #1
 8000a44:	4909      	ldr	r1, [pc, #36]	; (8000a6c <MX_DFSDM1_Init+0xc8>)
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_DFSDM1_Init+0xb8>)
 8000a48:	f002 fc4c 	bl	80032e4 <HAL_DFSDM_FilterConfigRegChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000a52:	f000 fda3 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200033bc 	.word	0x200033bc
 8000a60:	40016100 	.word	0x40016100
 8000a64:	20000354 	.word	0x20000354
 8000a68:	40016020 	.word	0x40016020
 8000a6c:	00010002 	.word	0x00010002

08000a70 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <MX_FMPI2C1_Init+0x60>)
 8000a76:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <MX_FMPI2C1_Init+0x64>)
 8000a78:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x20303E5D;
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MX_FMPI2C1_Init+0x60>)
 8000a7c:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <MX_FMPI2C1_Init+0x68>)
 8000a7e:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_FMPI2C1_Init+0x60>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_FMPI2C1_Init+0x60>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000a8c:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <MX_FMPI2C1_Init+0x60>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_FMPI2C1_Init+0x60>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000a98:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <MX_FMPI2C1_Init+0x60>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_FMPI2C1_Init+0x60>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <MX_FMPI2C1_Init+0x60>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000aaa:	4809      	ldr	r0, [pc, #36]	; (8000ad0 <MX_FMPI2C1_Init+0x60>)
 8000aac:	f003 f944 	bl	8003d38 <HAL_FMPI2C_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000ab6:	f000 fd71 	bl	800159c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_FMPI2C1_Init+0x60>)
 8000abe:	f003 f9ca 	bl	8003e56 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000ac8:	f000 fd68 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20003578 	.word	0x20003578
 8000ad4:	40006000 	.word	0x40006000
 8000ad8:	20303e5d 	.word	0x20303e5d

08000adc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_QUADSPI_Init+0x50>)
 8000ae2:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <MX_QUADSPI_Init+0x54>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_QUADSPI_Init+0x50>)
 8000ae8:	22ff      	movs	r2, #255	; 0xff
 8000aea:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_QUADSPI_Init+0x50>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_QUADSPI_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_QUADSPI_Init+0x50>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_QUADSPI_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_QUADSPI_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_QUADSPI_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_QUADSPI_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_QUADSPI_Init+0x50>)
 8000b18:	f003 fbac 	bl	8004274 <HAL_QSPI_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000b22:	f000 fd3b 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20004f10 	.word	0x20004f10
 8000b30:	a0001000 	.word	0xa0001000

08000b34 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_SDIO_SD_Init+0x38>)
 8000b3a:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <MX_SDIO_SD_Init+0x3c>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_SDIO_SD_Init+0x38>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_SDIO_SD_Init+0x38>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <MX_SDIO_SD_Init+0x38>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_SDIO_SD_Init+0x38>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <MX_SDIO_SD_Init+0x38>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <MX_SDIO_SD_Init+0x38>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	20003614 	.word	0x20003614
 8000b70:	40012c00 	.word	0x40012c00

08000b74 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b78:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000b7a:	4a19      	ldr	r2, [pc, #100]	; (8000be0 <MX_SPI3_Init+0x6c>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000b80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b84:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000b8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b92:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000baa:	2220      	movs	r2, #32
 8000bac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000bc2:	220a      	movs	r2, #10
 8000bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000bc8:	f005 fa4c 	bl	8006064 <HAL_SPI_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8000bd2:	f000 fce3 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20003464 	.word	0x20003464
 8000be0:	40003c00 	.word	0x40003c00

08000be4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_USART6_UART_Init+0x4c>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <MX_USART6_UART_Init+0x50>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <MX_USART6_UART_Init+0x4c>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_USART6_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <MX_USART6_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <MX_USART6_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_USART6_UART_Init+0x4c>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <MX_USART6_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_USART6_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_USART6_UART_Init+0x4c>)
 8000c1c:	f005 fd18 	bl	8006650 <HAL_UART_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c26:	f000 fcb9 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20003698 	.word	0x20003698
 8000c34:	40011400 	.word	0x40011400

08000c38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_DMA_Init+0x3c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <MX_DMA_Init+0x3c>)
 8000c48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_DMA_Init+0x3c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2038      	movs	r0, #56	; 0x38
 8000c60:	f002 f8bf 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c64:	2038      	movs	r0, #56	; 0x38
 8000c66:	f002 f8d8 	bl	8002e1a <HAL_NVIC_EnableIRQ>

}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	; 0x38
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
 8000c92:	4bb0      	ldr	r3, [pc, #704]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4aaf      	ldr	r2, [pc, #700]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000c98:	f043 0310 	orr.w	r3, r3, #16
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4bad      	ldr	r3, [pc, #692]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0310 	and.w	r3, r3, #16
 8000ca6:	623b      	str	r3, [r7, #32]
 8000ca8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
 8000cae:	4ba9      	ldr	r3, [pc, #676]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4aa8      	ldr	r2, [pc, #672]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4ba6      	ldr	r3, [pc, #664]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	61fb      	str	r3, [r7, #28]
 8000cc4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61bb      	str	r3, [r7, #24]
 8000cca:	4ba2      	ldr	r3, [pc, #648]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4aa1      	ldr	r2, [pc, #644]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000cd0:	f043 0320 	orr.w	r3, r3, #32
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b9f      	ldr	r3, [pc, #636]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0320 	and.w	r3, r3, #32
 8000cde:	61bb      	str	r3, [r7, #24]
 8000ce0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	4b9b      	ldr	r3, [pc, #620]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a9a      	ldr	r2, [pc, #616]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b98      	ldr	r3, [pc, #608]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b94      	ldr	r3, [pc, #592]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a93      	ldr	r2, [pc, #588]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b91      	ldr	r3, [pc, #580]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b8d      	ldr	r3, [pc, #564]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a8c      	ldr	r2, [pc, #560]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b8a      	ldr	r3, [pc, #552]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	4b86      	ldr	r3, [pc, #536]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a85      	ldr	r2, [pc, #532]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b83      	ldr	r3, [pc, #524]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	4b7f      	ldr	r3, [pc, #508]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a7e      	ldr	r2, [pc, #504]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b7c      	ldr	r3, [pc, #496]	; (8000f54 <MX_GPIO_Init+0x2dc>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2138      	movs	r1, #56	; 0x38
 8000d72:	4879      	ldr	r0, [pc, #484]	; (8000f58 <MX_GPIO_Init+0x2e0>)
 8000d74:	f003 fa64 	bl	8004240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	4877      	ldr	r0, [pc, #476]	; (8000f5c <MX_GPIO_Init+0x2e4>)
 8000d7e:	f003 fa5f 	bl	8004240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000d88:	4875      	ldr	r0, [pc, #468]	; (8000f60 <MX_GPIO_Init+0x2e8>)
 8000d8a:	f003 fa59 	bl	8004240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|WIFI_SPI_CSN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 5124 	mov.w	r1, #10496	; 0x2900
 8000d94:	4873      	ldr	r0, [pc, #460]	; (8000f64 <MX_GPIO_Init+0x2ec>)
 8000d96:	f003 fa53 	bl	8004240 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000d9a:	2338      	movs	r3, #56	; 0x38
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	4869      	ldr	r0, [pc, #420]	; (8000f58 <MX_GPIO_Init+0x2e0>)
 8000db2:	f003 f89b 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000db6:	2340      	movs	r3, #64	; 0x40
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4861      	ldr	r0, [pc, #388]	; (8000f58 <MX_GPIO_Init+0x2e0>)
 8000dd2:	f003 f88b 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000de8:	2302      	movs	r3, #2
 8000dea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	485d      	ldr	r0, [pc, #372]	; (8000f68 <MX_GPIO_Init+0x2f0>)
 8000df4:	f003 f87a 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dfc:	4b5b      	ldr	r3, [pc, #364]	; (8000f6c <MX_GPIO_Init+0x2f4>)
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4854      	ldr	r0, [pc, #336]	; (8000f5c <MX_GPIO_Init+0x2e4>)
 8000e0c:	f003 f86e 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_ext_SD_Pin */
  GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8000e10:	2304      	movs	r3, #4
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8000e20:	2306      	movs	r3, #6
 8000e22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	484c      	ldr	r0, [pc, #304]	; (8000f5c <MX_GPIO_Init+0x2e4>)
 8000e2c:	f003 f85e 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_SD_Pin */
  GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8000e30:	2308      	movs	r3, #8
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e40:	2305      	movs	r3, #5
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4844      	ldr	r0, [pc, #272]	; (8000f5c <MX_GPIO_Init+0x2e4>)
 8000e4c:	f003 f84e 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000e50:	2301      	movs	r3, #1
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e54:	4b45      	ldr	r3, [pc, #276]	; (8000f6c <MX_GPIO_Init+0x2f4>)
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e60:	4619      	mov	r1, r3
 8000e62:	4843      	ldr	r0, [pc, #268]	; (8000f70 <MX_GPIO_Init+0x2f8>)
 8000e64:	f003 f842 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_MCK_Pin */
  GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8000e68:	2308      	movs	r3, #8
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e78:	2305      	movs	r3, #5
 8000e7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	4619      	mov	r1, r3
 8000e82:	483b      	ldr	r0, [pc, #236]	; (8000f70 <MX_GPIO_Init+0x2f8>)
 8000e84:	f003 f832 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_DATIN1_Pin */
  GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4833      	ldr	r0, [pc, #204]	; (8000f70 <MX_GPIO_Init+0x2f8>)
 8000ea4:	f003 f822 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000ea8:	2320      	movs	r3, #32
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4827      	ldr	r0, [pc, #156]	; (8000f5c <MX_GPIO_Init+0x2e4>)
 8000ec0:	f003 f814 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	4820      	ldr	r0, [pc, #128]	; (8000f60 <MX_GPIO_Init+0x2e8>)
 8000ee0:	f003 f804 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000ee4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	481b      	ldr	r0, [pc, #108]	; (8000f68 <MX_GPIO_Init+0x2f0>)
 8000efa:	f002 fff7 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000efe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f04:	2312      	movs	r3, #18
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f10:	2304      	movs	r3, #4
 8000f12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4811      	ldr	r0, [pc, #68]	; (8000f60 <MX_GPIO_Init+0x2e8>)
 8000f1c:	f002 ffe6 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8000f20:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f36:	4619      	mov	r1, r3
 8000f38:	4809      	ldr	r0, [pc, #36]	; (8000f60 <MX_GPIO_Init+0x2e8>)
 8000f3a:	f002 ffd7 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8000f3e:	f248 0380 	movw	r3, #32896	; 0x8080
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MX_GPIO_Init+0x2f4>)
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f50:	4619      	mov	r1, r3
 8000f52:	e00f      	b.n	8000f74 <MX_GPIO_Init+0x2fc>
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	40020400 	.word	0x40020400
 8000f64:	40021800 	.word	0x40021800
 8000f68:	40021400 	.word	0x40021400
 8000f6c:	10110000 	.word	0x10110000
 8000f70:	40020000 	.word	0x40020000
 8000f74:	4851      	ldr	r0, [pc, #324]	; (80010bc <MX_GPIO_Init+0x444>)
 8000f76:	f002 ffb9 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin WIFI_SPI_CSN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|WIFI_SPI_CSN_Pin|ARD_D2_Pin;
 8000f7a:	f44f 5324 	mov.w	r3, #10496	; 0x2900
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f90:	4619      	mov	r1, r3
 8000f92:	484a      	ldr	r0, [pc, #296]	; (80010bc <MX_GPIO_Init+0x444>)
 8000f94:	f002 ffaa 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000f98:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000faa:	230a      	movs	r3, #10
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4842      	ldr	r0, [pc, #264]	; (80010c0 <MX_GPIO_Init+0x448>)
 8000fb6:	f002 ff99 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8000fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	483a      	ldr	r0, [pc, #232]	; (80010c0 <MX_GPIO_Init+0x448>)
 8000fd8:	f002 ff88 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8000fec:	2303      	movs	r3, #3
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4833      	ldr	r0, [pc, #204]	; (80010c4 <MX_GPIO_Init+0x44c>)
 8000ff8:	f002 ff78 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_CK_Pin */
  GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800100c:	2305      	movs	r3, #5
 800100e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001014:	4619      	mov	r1, r3
 8001016:	482b      	ldr	r0, [pc, #172]	; (80010c4 <MX_GPIO_Init+0x44c>)
 8001018:	f002 ff68 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_DRDY_Pin */
  GPIO_InitStruct.Pin = WIFI_DRDY_Pin;
 800101c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001022:	2300      	movs	r3, #0
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(WIFI_DRDY_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102e:	4619      	mov	r1, r3
 8001030:	4822      	ldr	r0, [pc, #136]	; (80010bc <MX_GPIO_Init+0x444>)
 8001032:	f002 ff5b 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001036:	2340      	movs	r3, #64	; 0x40
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800103a:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <MX_GPIO_Init+0x450>)
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	4619      	mov	r1, r3
 8001048:	4820      	ldr	r0, [pc, #128]	; (80010cc <MX_GPIO_Init+0x454>)
 800104a:	f002 ff4f 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_DATIN7_Pin */
  GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 800105e:	2306      	movs	r3, #6
 8001060:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001066:	4619      	mov	r1, r3
 8001068:	4818      	ldr	r0, [pc, #96]	; (80010cc <MX_GPIO_Init+0x454>)
 800106a:	f002 ff3f 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 800106e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001080:	2302      	movs	r3, #2
 8001082:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001088:	4619      	mov	r1, r3
 800108a:	4810      	ldr	r0, [pc, #64]	; (80010cc <MX_GPIO_Init+0x454>)
 800108c:	f002 ff2e 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_WS_Pin */
  GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001090:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010a2:	2305      	movs	r3, #5
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010aa:	4619      	mov	r1, r3
 80010ac:	4807      	ldr	r0, [pc, #28]	; (80010cc <MX_GPIO_Init+0x454>)
 80010ae:	f002 ff1d 	bl	8003eec <HAL_GPIO_Init>

}
 80010b2:	bf00      	nop
 80010b4:	3738      	adds	r7, #56	; 0x38
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40021800 	.word	0x40021800
 80010c0:	40020000 	.word	0x40020000
 80010c4:	40020c00 	.word	0x40020c00
 80010c8:	10110000 	.word	0x10110000
 80010cc:	40020400 	.word	0x40020400

080010d0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
 80010e4:	615a      	str	r2, [r3, #20]
 80010e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80010e8:	4b4f      	ldr	r3, [pc, #316]	; (8001228 <MX_FSMC_Init+0x158>)
 80010ea:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80010ee:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80010f0:	4b4d      	ldr	r3, [pc, #308]	; (8001228 <MX_FSMC_Init+0x158>)
 80010f2:	4a4e      	ldr	r2, [pc, #312]	; (800122c <MX_FSMC_Init+0x15c>)
 80010f4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80010f6:	4b4c      	ldr	r3, [pc, #304]	; (8001228 <MX_FSMC_Init+0x158>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80010fc:	4b4a      	ldr	r3, [pc, #296]	; (8001228 <MX_FSMC_Init+0x158>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001102:	4b49      	ldr	r3, [pc, #292]	; (8001228 <MX_FSMC_Init+0x158>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001108:	4b47      	ldr	r3, [pc, #284]	; (8001228 <MX_FSMC_Init+0x158>)
 800110a:	2210      	movs	r2, #16
 800110c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800110e:	4b46      	ldr	r3, [pc, #280]	; (8001228 <MX_FSMC_Init+0x158>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001114:	4b44      	ldr	r3, [pc, #272]	; (8001228 <MX_FSMC_Init+0x158>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800111a:	4b43      	ldr	r3, [pc, #268]	; (8001228 <MX_FSMC_Init+0x158>)
 800111c:	2200      	movs	r2, #0
 800111e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8001120:	4b41      	ldr	r3, [pc, #260]	; (8001228 <MX_FSMC_Init+0x158>)
 8001122:	2200      	movs	r2, #0
 8001124:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001126:	4b40      	ldr	r3, [pc, #256]	; (8001228 <MX_FSMC_Init+0x158>)
 8001128:	2200      	movs	r2, #0
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800112c:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <MX_FSMC_Init+0x158>)
 800112e:	2200      	movs	r2, #0
 8001130:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001132:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <MX_FSMC_Init+0x158>)
 8001134:	2200      	movs	r2, #0
 8001136:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001138:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <MX_FSMC_Init+0x158>)
 800113a:	2200      	movs	r2, #0
 800113c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800113e:	4b3a      	ldr	r3, [pc, #232]	; (8001228 <MX_FSMC_Init+0x158>)
 8001140:	2200      	movs	r2, #0
 8001142:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001144:	4b38      	ldr	r3, [pc, #224]	; (8001228 <MX_FSMC_Init+0x158>)
 8001146:	2200      	movs	r2, #0
 8001148:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800114a:	4b37      	ldr	r3, [pc, #220]	; (8001228 <MX_FSMC_Init+0x158>)
 800114c:	2200      	movs	r2, #0
 800114e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001150:	230f      	movs	r3, #15
 8001152:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001154:	230f      	movs	r3, #15
 8001156:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001158:	23ff      	movs	r3, #255	; 0xff
 800115a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800115c:	230f      	movs	r3, #15
 800115e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001160:	2310      	movs	r3, #16
 8001162:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001164:	2311      	movs	r3, #17
 8001166:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2200      	movs	r2, #0
 8001170:	4619      	mov	r1, r3
 8001172:	482d      	ldr	r0, [pc, #180]	; (8001228 <MX_FSMC_Init+0x158>)
 8001174:	f005 fa28 	bl	80065c8 <HAL_SRAM_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 800117e:	f000 fa0d 	bl	800159c <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <MX_FSMC_Init+0x160>)
 8001184:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001188:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800118a:	4b29      	ldr	r3, [pc, #164]	; (8001230 <MX_FSMC_Init+0x160>)
 800118c:	4a27      	ldr	r2, [pc, #156]	; (800122c <MX_FSMC_Init+0x15c>)
 800118e:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <MX_FSMC_Init+0x160>)
 8001192:	2204      	movs	r2, #4
 8001194:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <MX_FSMC_Init+0x160>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <MX_FSMC_Init+0x160>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <MX_FSMC_Init+0x160>)
 80011a4:	2210      	movs	r2, #16
 80011a6:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80011a8:	4b21      	ldr	r3, [pc, #132]	; (8001230 <MX_FSMC_Init+0x160>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <MX_FSMC_Init+0x160>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80011b4:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <MX_FSMC_Init+0x160>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <MX_FSMC_Init+0x160>)
 80011bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_FSMC_Init+0x160>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <MX_FSMC_Init+0x160>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_FSMC_Init+0x160>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_FSMC_Init+0x160>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_FSMC_Init+0x160>)
 80011dc:	2200      	movs	r2, #0
 80011de:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <MX_FSMC_Init+0x160>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80011e6:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_FSMC_Init+0x160>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80011ec:	230f      	movs	r3, #15
 80011ee:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80011f0:	230f      	movs	r3, #15
 80011f2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80011f4:	23ff      	movs	r3, #255	; 0xff
 80011f6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80011f8:	230f      	movs	r3, #15
 80011fa:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80011fc:	2310      	movs	r3, #16
 80011fe:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001200:	2311      	movs	r3, #17
 8001202:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2200      	movs	r2, #0
 800120c:	4619      	mov	r1, r3
 800120e:	4808      	ldr	r0, [pc, #32]	; (8001230 <MX_FSMC_Init+0x160>)
 8001210:	f005 f9da 	bl	80065c8 <HAL_SRAM_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_FSMC_Init+0x14e>
  {
    Error_Handler( );
 800121a:	f000 f9bf 	bl	800159c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800121e:	bf00      	nop
 8001220:	3720      	adds	r7, #32
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20003414 	.word	0x20003414
 800122c:	a0000104 	.word	0xa0000104
 8001230:	200035c4 	.word	0x200035c4

08001234 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
//	DmaRecHalfBuffCplt=1;
	float lsamp, rsamp;
	float ltmp, rtmp;
	uint16_t lfinal, rfinal;

	for(int i = 0; i < AUDIO_REC/2; i++)
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	e0ab      	b.n	800139a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x166>
	{
		lsamp = (float)Rec1Buf[i];
 8001242:	4a5b      	ldr	r2, [pc, #364]	; (80013b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x17c>)
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001252:	edc7 7a06 	vstr	s15, [r7, #24]
		rsamp = (float)Rec2Buf[i];
 8001256:	4a57      	ldr	r2, [pc, #348]	; (80013b4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x180>)
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125e:	ee07 3a90 	vmov	s15, r3
 8001262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001266:	edc7 7a05 	vstr	s15, [r7, #20]
		ltmp = a0* lsamp + a1*lin_z1 + a2*lin_z2 - b1*lout_z1 - b2 * lout_z2;
 800126a:	4b53      	ldr	r3, [pc, #332]	; (80013b8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x184>)
 800126c:	ed93 7a00 	vldr	s14, [r3]
 8001270:	edd7 7a06 	vldr	s15, [r7, #24]
 8001274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001278:	4b50      	ldr	r3, [pc, #320]	; (80013bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x188>)
 800127a:	edd3 6a00 	vldr	s13, [r3]
 800127e:	4b50      	ldr	r3, [pc, #320]	; (80013c0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18c>)
 8001280:	edd3 7a00 	vldr	s15, [r3]
 8001284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001288:	ee37 7a27 	vadd.f32	s14, s14, s15
 800128c:	4b4d      	ldr	r3, [pc, #308]	; (80013c4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x190>)
 800128e:	edd3 6a00 	vldr	s13, [r3]
 8001292:	4b4d      	ldr	r3, [pc, #308]	; (80013c8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x194>)
 8001294:	edd3 7a00 	vldr	s15, [r3]
 8001298:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800129c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012a0:	4b4a      	ldr	r3, [pc, #296]	; (80013cc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x198>)
 80012a2:	edd3 6a00 	vldr	s13, [r3]
 80012a6:	4b4a      	ldr	r3, [pc, #296]	; (80013d0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19c>)
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012b4:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a0>)
 80012b6:	edd3 6a00 	vldr	s13, [r3]
 80012ba:	4b47      	ldr	r3, [pc, #284]	; (80013d8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a4>)
 80012bc:	edd3 7a00 	vldr	s15, [r3]
 80012c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c8:	edc7 7a04 	vstr	s15, [r7, #16]
		rtmp = a0* rsamp + a1*rin_z1 + a2*rin_z2 - b1*rout_z1 - b2 * rout_z2;
 80012cc:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x184>)
 80012ce:	ed93 7a00 	vldr	s14, [r3]
 80012d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80012d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012da:	4b38      	ldr	r3, [pc, #224]	; (80013bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x188>)
 80012dc:	edd3 6a00 	vldr	s13, [r3]
 80012e0:	4b3e      	ldr	r3, [pc, #248]	; (80013dc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a8>)
 80012e2:	edd3 7a00 	vldr	s15, [r3]
 80012e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ee:	4b35      	ldr	r3, [pc, #212]	; (80013c4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x190>)
 80012f0:	edd3 6a00 	vldr	s13, [r3]
 80012f4:	4b3a      	ldr	r3, [pc, #232]	; (80013e0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ac>)
 80012f6:	edd3 7a00 	vldr	s15, [r3]
 80012fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001302:	4b32      	ldr	r3, [pc, #200]	; (80013cc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x198>)
 8001304:	edd3 6a00 	vldr	s13, [r3]
 8001308:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b0>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001312:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001316:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a0>)
 8001318:	edd3 6a00 	vldr	s13, [r3]
 800131c:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b4>)
 800131e:	edd3 7a00 	vldr	s15, [r3]
 8001322:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001326:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132a:	edc7 7a03 	vstr	s15, [r7, #12]

		lin_z2 = lin_z1;
 800132e:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x194>)
 8001334:	6013      	str	r3, [r2, #0]
		rin_z2 = rin_z1;
 8001336:	4b29      	ldr	r3, [pc, #164]	; (80013dc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a29      	ldr	r2, [pc, #164]	; (80013e0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ac>)
 800133c:	6013      	str	r3, [r2, #0]
		lin_z1 = lsamp;
 800133e:	4a20      	ldr	r2, [pc, #128]	; (80013c0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18c>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6013      	str	r3, [r2, #0]
		rin_z1 = rsamp;
 8001344:	4a25      	ldr	r2, [pc, #148]	; (80013dc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a8>)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	6013      	str	r3, [r2, #0]
		lout_z2 = lout_z1;
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a4>)
 8001350:	6013      	str	r3, [r2, #0]
		rout_z2 = rout_z1;
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a24      	ldr	r2, [pc, #144]	; (80013e8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b4>)
 8001358:	6013      	str	r3, [r2, #0]
		lout_z1 = ltmp;
 800135a:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19c>)
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	6013      	str	r3, [r2, #0]
		rout_z1 = rtmp;
 8001360:	4a20      	ldr	r2, [pc, #128]	; (80013e4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b0>)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6013      	str	r3, [r2, #0]

//			Value1Buf[i] = (uint16_t)(((int32_t)tmp >> 8) & 0xffff);//(Rec1Buf[i] >> 8) & 0xffff;
		lfinal = (uint16_t)(((int32_t)ltmp >> 8) & 0xffff);//(Rec1Buf[i] >> 8) & 0xffff;
 8001366:	edd7 7a04 	vldr	s15, [r7, #16]
 800136a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136e:	ee17 3a90 	vmov	r3, s15
 8001372:	121b      	asrs	r3, r3, #8
 8001374:	817b      	strh	r3, [r7, #10]
		AudioBuf[i*NUM_CHANNELS*2 + 1] = lfinal >> 8;
 8001376:	897b      	ldrh	r3, [r7, #10]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	b29a      	uxth	r2, r3
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	3301      	adds	r3, #1
 8001382:	b2d1      	uxtb	r1, r2
 8001384:	4a19      	ldr	r2, [pc, #100]	; (80013ec <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b8>)
 8001386:	54d1      	strb	r1, [r2, r3]
		AudioBuf[i*NUM_CHANNELS*2] = lfinal & 0xff;
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	897a      	ldrh	r2, [r7, #10]
 800138e:	b2d1      	uxtb	r1, r2
 8001390:	4a16      	ldr	r2, [pc, #88]	; (80013ec <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b8>)
 8001392:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < AUDIO_REC/2; i++)
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	3301      	adds	r3, #1
 8001398:	61fb      	str	r3, [r7, #28]
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a0:	f6ff af4f 	blt.w	8001242 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xe>
//		//	  {
//		//		  simpleBuf[i*2 +1] = toneBuf[i] >> 8;
//		//		  simpleBuf[i*2] = toneBuf[i];
//		//	  }
	}
}
 80013a4:	bf00      	nop
 80013a6:	3724      	adds	r7, #36	; 0x24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	200023bc 	.word	0x200023bc
 80013b4:	2000038c 	.word	0x2000038c
 80013b8:	20000008 	.word	0x20000008
 80013bc:	2000000c 	.word	0x2000000c
 80013c0:	200000b0 	.word	0x200000b0
 80013c4:	20000010 	.word	0x20000010
 80013c8:	200000b4 	.word	0x200000b4
 80013cc:	20000014 	.word	0x20000014
 80013d0:	200000b8 	.word	0x200000b8
 80013d4:	20000018 	.word	0x20000018
 80013d8:	200000bc 	.word	0x200000bc
 80013dc:	200000c0 	.word	0x200000c0
 80013e0:	200000c4 	.word	0x200000c4
 80013e4:	200000c8 	.word	0x200000c8
 80013e8:	200000cc 	.word	0x200000cc
 80013ec:	20004710 	.word	0x20004710

080013f0 <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
//	uint16_t finaltmp;
	float lsamp, rsamp;
	float ltmp, rtmp;
	uint16_t lfinal, rfinal;

	for(int i = AUDIO_REC/2; i < AUDIO_REC; i++)
 80013f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	e062      	b.n	80014c6 <HAL_DFSDM_FilterRegConvCpltCallback+0xd6>
	{
		lsamp = (float)Rec1Buf[i];
 8001400:	4a53      	ldr	r2, [pc, #332]	; (8001550 <HAL_DFSDM_FilterRegConvCpltCallback+0x160>)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001410:	edc7 7a04 	vstr	s15, [r7, #16]
		ltmp = a0* lsamp + a1*lin_z1 + a2*lin_z2 - b1*lout_z1 - b2 * lout_z2;
 8001414:	4b4f      	ldr	r3, [pc, #316]	; (8001554 <HAL_DFSDM_FilterRegConvCpltCallback+0x164>)
 8001416:	ed93 7a00 	vldr	s14, [r3]
 800141a:	edd7 7a04 	vldr	s15, [r7, #16]
 800141e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001422:	4b4d      	ldr	r3, [pc, #308]	; (8001558 <HAL_DFSDM_FilterRegConvCpltCallback+0x168>)
 8001424:	edd3 6a00 	vldr	s13, [r3]
 8001428:	4b4c      	ldr	r3, [pc, #304]	; (800155c <HAL_DFSDM_FilterRegConvCpltCallback+0x16c>)
 800142a:	edd3 7a00 	vldr	s15, [r3]
 800142e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001432:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001436:	4b4a      	ldr	r3, [pc, #296]	; (8001560 <HAL_DFSDM_FilterRegConvCpltCallback+0x170>)
 8001438:	edd3 6a00 	vldr	s13, [r3]
 800143c:	4b49      	ldr	r3, [pc, #292]	; (8001564 <HAL_DFSDM_FilterRegConvCpltCallback+0x174>)
 800143e:	edd3 7a00 	vldr	s15, [r3]
 8001442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001446:	ee37 7a27 	vadd.f32	s14, s14, s15
 800144a:	4b47      	ldr	r3, [pc, #284]	; (8001568 <HAL_DFSDM_FilterRegConvCpltCallback+0x178>)
 800144c:	edd3 6a00 	vldr	s13, [r3]
 8001450:	4b46      	ldr	r3, [pc, #280]	; (800156c <HAL_DFSDM_FilterRegConvCpltCallback+0x17c>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800145a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800145e:	4b44      	ldr	r3, [pc, #272]	; (8001570 <HAL_DFSDM_FilterRegConvCpltCallback+0x180>)
 8001460:	edd3 6a00 	vldr	s13, [r3]
 8001464:	4b43      	ldr	r3, [pc, #268]	; (8001574 <HAL_DFSDM_FilterRegConvCpltCallback+0x184>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001472:	edc7 7a03 	vstr	s15, [r7, #12]
		lin_z2 = lin_z1;
 8001476:	4b39      	ldr	r3, [pc, #228]	; (800155c <HAL_DFSDM_FilterRegConvCpltCallback+0x16c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a3a      	ldr	r2, [pc, #232]	; (8001564 <HAL_DFSDM_FilterRegConvCpltCallback+0x174>)
 800147c:	6013      	str	r3, [r2, #0]
		lin_z1 = lsamp;
 800147e:	4a37      	ldr	r2, [pc, #220]	; (800155c <HAL_DFSDM_FilterRegConvCpltCallback+0x16c>)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	6013      	str	r3, [r2, #0]
		lout_z2 = lout_z1;
 8001484:	4b39      	ldr	r3, [pc, #228]	; (800156c <HAL_DFSDM_FilterRegConvCpltCallback+0x17c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a3a      	ldr	r2, [pc, #232]	; (8001574 <HAL_DFSDM_FilterRegConvCpltCallback+0x184>)
 800148a:	6013      	str	r3, [r2, #0]
		lout_z1 = ltmp;
 800148c:	4a37      	ldr	r2, [pc, #220]	; (800156c <HAL_DFSDM_FilterRegConvCpltCallback+0x17c>)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6013      	str	r3, [r2, #0]
//		rin_z1 = rsamp;
//		rout_z2 = rout_z1;
//		rout_z1 = rtmp;

//			Value1Buf[i] = (uint16_t)(((int32_t)tmp >> 8) & 0xffff);//(Rec1Buf[i] >> 8) & 0xffff;
		lfinal = (uint16_t)(((int32_t)ltmp >> 8) & 0xffff);//(Rec1Buf[i] >> 8) & 0xffff;
 8001492:	edd7 7a03 	vldr	s15, [r7, #12]
 8001496:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800149a:	ee17 3a90 	vmov	r3, s15
 800149e:	121b      	asrs	r3, r3, #8
 80014a0:	817b      	strh	r3, [r7, #10]
		AudioBuf[i*2 + 1] = lfinal >> 8;
 80014a2:	897b      	ldrh	r3, [r7, #10]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	3301      	adds	r3, #1
 80014ae:	b2d1      	uxtb	r1, r2
 80014b0:	4a31      	ldr	r2, [pc, #196]	; (8001578 <HAL_DFSDM_FilterRegConvCpltCallback+0x188>)
 80014b2:	54d1      	strb	r1, [r2, r3]
		AudioBuf[i*2] = lfinal & 0xff;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	897a      	ldrh	r2, [r7, #10]
 80014ba:	b2d1      	uxtb	r1, r2
 80014bc:	4a2e      	ldr	r2, [pc, #184]	; (8001578 <HAL_DFSDM_FilterRegConvCpltCallback+0x188>)
 80014be:	54d1      	strb	r1, [r2, r3]
	for(int i = AUDIO_REC/2; i < AUDIO_REC; i++)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	3301      	adds	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014cc:	db98      	blt.n	8001400 <HAL_DFSDM_FilterRegConvCpltCallback+0x10>
//		finaltmp = (uint16_t)(((int32_t)tmp >> 8) & 0xffff);//(Rec1Buf[i] >> 8) & 0xffff;
//		AudioBuf[i*2 + 1] = finaltmp >> 8;
//		AudioBuf[i*2] = finaltmp & 0xff;
	}

	if(pass > 20 && pass < FrameCount + 20)
 80014ce:	4b2b      	ldr	r3, [pc, #172]	; (800157c <HAL_DFSDM_FilterRegConvCpltCallback+0x18c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b14      	cmp	r3, #20
 80014d4:	dd18      	ble.n	8001508 <HAL_DFSDM_FilterRegConvCpltCallback+0x118>
 80014d6:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <HAL_DFSDM_FilterRegConvCpltCallback+0x190>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f103 0214 	add.w	r2, r3, #20
 80014de:	4b27      	ldr	r3, [pc, #156]	; (800157c <HAL_DFSDM_FilterRegConvCpltCallback+0x18c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dd10      	ble.n	8001508 <HAL_DFSDM_FilterRegConvCpltCallback+0x118>
	{
	//			  fRet = f_open(&myFile, fname, FA_WRITE | FA_OPEN_APPEND);// | FA_CREATE_ALWAYS);
	//			  printf("f_open error == %d\r\n", fRet);
		fRet = f_write(&myFile, AudioBuf, WRITE_LENGTH, &byteCount);
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_DFSDM_FilterRegConvCpltCallback+0x194>)
 80014e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ec:	4922      	ldr	r1, [pc, #136]	; (8001578 <HAL_DFSDM_FilterRegConvCpltCallback+0x188>)
 80014ee:	4826      	ldr	r0, [pc, #152]	; (8001588 <HAL_DFSDM_FilterRegConvCpltCallback+0x198>)
 80014f0:	f009 f8fc 	bl	800a6ec <f_write>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461a      	mov	r2, r3
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <HAL_DFSDM_FilterRegConvCpltCallback+0x19c>)
 80014fa:	701a      	strb	r2, [r3, #0]
		printf("f_write error == %d\r\n", fRet);
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <HAL_DFSDM_FilterRegConvCpltCallback+0x19c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	4823      	ldr	r0, [pc, #140]	; (8001590 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a0>)
 8001504:	f009 fc70 	bl	800ade8 <iprintf>
	//			  fRet = f_close(&myFile);
	//			  printf("f_close error == %d\r\n\n", fRet);
	}
	if(pass == FrameCount + 20)
 8001508:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_DFSDM_FilterRegConvCpltCallback+0x190>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f103 0214 	add.w	r2, r3, #20
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <HAL_DFSDM_FilterRegConvCpltCallback+0x18c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d111      	bne.n	800153c <HAL_DFSDM_FilterRegConvCpltCallback+0x14c>
	{
	  fRet = f_close(&myFile);
 8001518:	481b      	ldr	r0, [pc, #108]	; (8001588 <HAL_DFSDM_FilterRegConvCpltCallback+0x198>)
 800151a:	f009 faf9 	bl	800ab10 <f_close>
 800151e:	4603      	mov	r3, r0
 8001520:	461a      	mov	r2, r3
 8001522:	4b1a      	ldr	r3, [pc, #104]	; (800158c <HAL_DFSDM_FilterRegConvCpltCallback+0x19c>)
 8001524:	701a      	strb	r2, [r3, #0]
	  printf("f_close error == %d\r\n\n", fRet);
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_DFSDM_FilterRegConvCpltCallback+0x19c>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4619      	mov	r1, r3
 800152c:	4819      	ldr	r0, [pc, #100]	; (8001594 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a4>)
 800152e:	f009 fc5b 	bl	800ade8 <iprintf>
	  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 8001532:	2201      	movs	r2, #1
 8001534:	2120      	movs	r1, #32
 8001536:	4818      	ldr	r0, [pc, #96]	; (8001598 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a8>)
 8001538:	f002 fe82 	bl	8004240 <HAL_GPIO_WritePin>
	}

	pass++;
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_DFSDM_FilterRegConvCpltCallback+0x18c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	3301      	adds	r3, #1
 8001542:	4a0e      	ldr	r2, [pc, #56]	; (800157c <HAL_DFSDM_FilterRegConvCpltCallback+0x18c>)
 8001544:	6013      	str	r3, [r2, #0]

}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200023bc 	.word	0x200023bc
 8001554:	20000008 	.word	0x20000008
 8001558:	2000000c 	.word	0x2000000c
 800155c:	200000b0 	.word	0x200000b0
 8001560:	20000010 	.word	0x20000010
 8001564:	200000b4 	.word	0x200000b4
 8001568:	20000014 	.word	0x20000014
 800156c:	200000b8 	.word	0x200000b8
 8001570:	20000018 	.word	0x20000018
 8001574:	200000bc 	.word	0x200000bc
 8001578:	20004710 	.word	0x20004710
 800157c:	200000ac 	.word	0x200000ac
 8001580:	20000000 	.word	0x20000000
 8001584:	20003410 	.word	0x20003410
 8001588:	2000138c 	.word	0x2000138c
 800158c:	200000a8 	.word	0x200000a8
 8001590:	0800bbb0 	.word	0x0800bbb0
 8001594:	0800bbc8 	.word	0x0800bbc8
 8001598:	40020800 	.word	0x40020800

0800159c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_MspInit+0x4c>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	4a0f      	ldr	r2, [pc, #60]	; (80015f8 <HAL_MspInit+0x4c>)
 80015bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c0:	6453      	str	r3, [r2, #68]	; 0x44
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <HAL_MspInit+0x4c>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_MspInit+0x4c>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_MspInit+0x4c>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_MspInit+0x4c>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800

080015fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08c      	sub	sp, #48	; 0x30
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a31      	ldr	r2, [pc, #196]	; (80016e0 <HAL_ADC_MspInit+0xe4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d15b      	bne.n	80016d6 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a2f      	ldr	r2, [pc, #188]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	61bb      	str	r3, [r7, #24]
 8001638:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a28      	ldr	r2, [pc, #160]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a21      	ldr	r2, [pc, #132]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a1a      	ldr	r2, [pc, #104]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 800168e:	2311      	movs	r3, #17
 8001690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001692:	2303      	movs	r3, #3
 8001694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	4619      	mov	r1, r3
 80016a0:	4811      	ldr	r0, [pc, #68]	; (80016e8 <HAL_ADC_MspInit+0xec>)
 80016a2:	f002 fc23 	bl	8003eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 80016a6:	2326      	movs	r3, #38	; 0x26
 80016a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016aa:	2303      	movs	r3, #3
 80016ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	4619      	mov	r1, r3
 80016b8:	480c      	ldr	r0, [pc, #48]	; (80016ec <HAL_ADC_MspInit+0xf0>)
 80016ba:	f002 fc17 	bl	8003eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 80016be:	2302      	movs	r3, #2
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c2:	2303      	movs	r3, #3
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	4807      	ldr	r0, [pc, #28]	; (80016f0 <HAL_ADC_MspInit+0xf4>)
 80016d2:	f002 fc0b 	bl	8003eec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016d6:	bf00      	nop
 80016d8:	3730      	adds	r7, #48	; 0x30
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40012000 	.word	0x40012000
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020800 	.word	0x40020800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40020400 	.word	0x40020400

080016f4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a17      	ldr	r2, [pc, #92]	; (8001770 <HAL_DAC_MspInit+0x7c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d127      	bne.n	8001766 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_DAC_MspInit+0x80>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a15      	ldr	r2, [pc, #84]	; (8001774 <HAL_DAC_MspInit+0x80>)
 8001720:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <HAL_DAC_MspInit+0x80>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_DAC_MspInit+0x80>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_DAC_MspInit+0x80>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_DAC_MspInit+0x80>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 800174e:	2310      	movs	r3, #16
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001752:	2303      	movs	r3, #3
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	4805      	ldr	r0, [pc, #20]	; (8001778 <HAL_DAC_MspInit+0x84>)
 8001762:	f002 fbc3 	bl	8003eec <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001766:	bf00      	nop
 8001768:	3728      	adds	r7, #40	; 0x28
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40007400 	.word	0x40007400
 8001774:	40023800 	.word	0x40023800
 8001778:	40020000 	.word	0x40020000

0800177c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_FILTER_INSTANCE(hdfsdm_filter->Instance))&&(DFSDM1_Init == 0))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a52      	ldr	r2, [pc, #328]	; (80018e4 <HAL_DFSDM_FilterMspInit+0x168>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d004      	beq.n	80017a8 <HAL_DFSDM_FilterMspInit+0x2c>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a51      	ldr	r2, [pc, #324]	; (80018e8 <HAL_DFSDM_FilterMspInit+0x16c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d15c      	bne.n	8001862 <HAL_DFSDM_FilterMspInit+0xe6>
 80017a8:	4b50      	ldr	r3, [pc, #320]	; (80018ec <HAL_DFSDM_FilterMspInit+0x170>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d158      	bne.n	8001862 <HAL_DFSDM_FilterMspInit+0xe6>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80017b0:	4b4f      	ldr	r3, [pc, #316]	; (80018f0 <HAL_DFSDM_FilterMspInit+0x174>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	4a4e      	ldr	r2, [pc, #312]	; (80018f0 <HAL_DFSDM_FilterMspInit+0x174>)
 80017b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80017ba:	4b4d      	ldr	r3, [pc, #308]	; (80018f0 <HAL_DFSDM_FilterMspInit+0x174>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d10d      	bne.n	80017de <HAL_DFSDM_FilterMspInit+0x62>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	4b4b      	ldr	r3, [pc, #300]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x178>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	4a4a      	ldr	r2, [pc, #296]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x178>)
 80017cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017d0:	6453      	str	r3, [r2, #68]	; 0x44
 80017d2:	4b48      	ldr	r3, [pc, #288]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x178>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b44      	ldr	r3, [pc, #272]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x178>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a43      	ldr	r2, [pc, #268]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x178>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x178>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	4b3d      	ldr	r3, [pc, #244]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x178>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a3c      	ldr	r2, [pc, #240]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x178>)
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b3a      	ldr	r3, [pc, #232]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x178>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800181a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001828:	2306      	movs	r3, #6
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	4831      	ldr	r0, [pc, #196]	; (80018f8 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001834:	f002 fb5a 	bl	8003eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001838:	2340      	movs	r3, #64	; 0x40
 800183a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001848:	2306      	movs	r3, #6
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	482a      	ldr	r0, [pc, #168]	; (80018fc <HAL_DFSDM_FilterMspInit+0x180>)
 8001854:	f002 fb4a 	bl	8003eec <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001858:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_DFSDM_FilterMspInit+0x170>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	4a23      	ldr	r2, [pc, #140]	; (80018ec <HAL_DFSDM_FilterMspInit+0x170>)
 8001860:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a1f      	ldr	r2, [pc, #124]	; (80018e4 <HAL_DFSDM_FilterMspInit+0x168>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d137      	bne.n	80018dc <HAL_DFSDM_FilterMspInit+0x160>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 800186c:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_DFSDM_FilterMspInit+0x184>)
 800186e:	4a25      	ldr	r2, [pc, #148]	; (8001904 <HAL_DFSDM_FilterMspInit+0x188>)
 8001870:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_7;
 8001872:	4b23      	ldr	r3, [pc, #140]	; (8001900 <HAL_DFSDM_FilterMspInit+0x184>)
 8001874:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001878:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800187a:	4b21      	ldr	r3, [pc, #132]	; (8001900 <HAL_DFSDM_FilterMspInit+0x184>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001880:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <HAL_DFSDM_FilterMspInit+0x184>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001886:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <HAL_DFSDM_FilterMspInit+0x184>)
 8001888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800188c:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800188e:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <HAL_DFSDM_FilterMspInit+0x184>)
 8001890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001894:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001896:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <HAL_DFSDM_FilterMspInit+0x184>)
 8001898:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800189c:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <HAL_DFSDM_FilterMspInit+0x184>)
 80018a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a4:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <HAL_DFSDM_FilterMspInit+0x184>)
 80018a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018ac:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <HAL_DFSDM_FilterMspInit+0x184>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80018b4:	4812      	ldr	r0, [pc, #72]	; (8001900 <HAL_DFSDM_FilterMspInit+0x184>)
 80018b6:	f001 fed1 	bl	800365c <HAL_DMA_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_DFSDM_FilterMspInit+0x148>
    {
      Error_Handler();
 80018c0:	f7ff fe6c 	bl	800159c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a0e      	ldr	r2, [pc, #56]	; (8001900 <HAL_DFSDM_FilterMspInit+0x184>)
 80018c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80018ca:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <HAL_DFSDM_FilterMspInit+0x184>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <HAL_DFSDM_FilterMspInit+0x184>)
 80018d4:	629a      	str	r2, [r3, #40]	; 0x28
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <HAL_DFSDM_FilterMspInit+0x184>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 80018dc:	bf00      	nop
 80018de:	3728      	adds	r7, #40	; 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40016100 	.word	0x40016100
 80018e8:	40016180 	.word	0x40016180
 80018ec:	200000d4 	.word	0x200000d4
 80018f0:	200000d0 	.word	0x200000d0
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020000 	.word	0x40020000
 80018fc:	40020c00 	.word	0x40020c00
 8001900:	20003504 	.word	0x20003504
 8001904:	40026410 	.word	0x40026410

08001908 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a39      	ldr	r2, [pc, #228]	; (8001a0c <HAL_DFSDM_ChannelMspInit+0x104>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00e      	beq.n	8001948 <HAL_DFSDM_ChannelMspInit+0x40>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a38      	ldr	r2, [pc, #224]	; (8001a10 <HAL_DFSDM_ChannelMspInit+0x108>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d009      	beq.n	8001948 <HAL_DFSDM_ChannelMspInit+0x40>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a36      	ldr	r2, [pc, #216]	; (8001a14 <HAL_DFSDM_ChannelMspInit+0x10c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d004      	beq.n	8001948 <HAL_DFSDM_ChannelMspInit+0x40>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a35      	ldr	r2, [pc, #212]	; (8001a18 <HAL_DFSDM_ChannelMspInit+0x110>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d15c      	bne.n	8001a02 <HAL_DFSDM_ChannelMspInit+0xfa>
 8001948:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <HAL_DFSDM_ChannelMspInit+0x114>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d158      	bne.n	8001a02 <HAL_DFSDM_ChannelMspInit+0xfa>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001950:	4b33      	ldr	r3, [pc, #204]	; (8001a20 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	3301      	adds	r3, #1
 8001956:	4a32      	ldr	r2, [pc, #200]	; (8001a20 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001958:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800195a:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <HAL_DFSDM_ChannelMspInit+0x118>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d10d      	bne.n	800197e <HAL_DFSDM_ChannelMspInit+0x76>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	4b2f      	ldr	r3, [pc, #188]	; (8001a24 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	4a2e      	ldr	r2, [pc, #184]	; (8001a24 <HAL_DFSDM_ChannelMspInit+0x11c>)
 800196c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001970:	6453      	str	r3, [r2, #68]	; 0x44
 8001972:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b28      	ldr	r3, [pc, #160]	; (8001a24 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a27      	ldr	r2, [pc, #156]	; (8001a24 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_DFSDM_ChannelMspInit+0x11c>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a20      	ldr	r2, [pc, #128]	; (8001a24 <HAL_DFSDM_ChannelMspInit+0x11c>)
 80019a4:	f043 0308 	orr.w	r3, r3, #8
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <HAL_DFSDM_ChannelMspInit+0x11c>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 80019b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80019c8:	2306      	movs	r3, #6
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4619      	mov	r1, r3
 80019d2:	4815      	ldr	r0, [pc, #84]	; (8001a28 <HAL_DFSDM_ChannelMspInit+0x120>)
 80019d4:	f002 fa8a 	bl	8003eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 80019d8:	2340      	movs	r3, #64	; 0x40
 80019da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80019e8:	2306      	movs	r3, #6
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4619      	mov	r1, r3
 80019f2:	480e      	ldr	r0, [pc, #56]	; (8001a2c <HAL_DFSDM_ChannelMspInit+0x124>)
 80019f4:	f002 fa7a 	bl	8003eec <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HAL_DFSDM_ChannelMspInit+0x114>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	3301      	adds	r3, #1
 80019fe:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <HAL_DFSDM_ChannelMspInit+0x114>)
 8001a00:	6013      	str	r3, [r2, #0]
  }

}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	; 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40016000 	.word	0x40016000
 8001a10:	40016020 	.word	0x40016020
 8001a14:	40016040 	.word	0x40016040
 8001a18:	40016060 	.word	0x40016060
 8001a1c:	200000d4 	.word	0x200000d4
 8001a20:	200000d0 	.word	0x200000d0
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	40020c00 	.word	0x40020c00

08001a30 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a19      	ldr	r2, [pc, #100]	; (8001ab4 <HAL_FMPI2C_MspInit+0x84>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d12b      	bne.n	8001aaa <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_FMPI2C_MspInit+0x88>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a17      	ldr	r2, [pc, #92]	; (8001ab8 <HAL_FMPI2C_MspInit+0x88>)
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_FMPI2C_MspInit+0x88>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8001a6e:	23c0      	movs	r3, #192	; 0xc0
 8001a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a72:	2312      	movs	r3, #18
 8001a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001a7e:	2304      	movs	r3, #4
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	480c      	ldr	r0, [pc, #48]	; (8001abc <HAL_FMPI2C_MspInit+0x8c>)
 8001a8a:	f002 fa2f 	bl	8003eec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_FMPI2C_MspInit+0x88>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <HAL_FMPI2C_MspInit+0x88>)
 8001a98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_FMPI2C_MspInit+0x88>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3728      	adds	r7, #40	; 0x28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40006000 	.word	0x40006000
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020800 	.word	0x40020800

08001ac0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08e      	sub	sp, #56	; 0x38
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a56      	ldr	r2, [pc, #344]	; (8001c38 <HAL_QSPI_MspInit+0x178>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	f040 80a6 	bne.w	8001c30 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
 8001ae8:	4b54      	ldr	r3, [pc, #336]	; (8001c3c <HAL_QSPI_MspInit+0x17c>)
 8001aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aec:	4a53      	ldr	r2, [pc, #332]	; (8001c3c <HAL_QSPI_MspInit+0x17c>)
 8001aee:	f043 0302 	orr.w	r3, r3, #2
 8001af2:	6393      	str	r3, [r2, #56]	; 0x38
 8001af4:	4b51      	ldr	r3, [pc, #324]	; (8001c3c <HAL_QSPI_MspInit+0x17c>)
 8001af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	623b      	str	r3, [r7, #32]
 8001afe:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	4b4d      	ldr	r3, [pc, #308]	; (8001c3c <HAL_QSPI_MspInit+0x17c>)
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	4a4c      	ldr	r2, [pc, #304]	; (8001c3c <HAL_QSPI_MspInit+0x17c>)
 8001b0a:	f043 0310 	orr.w	r3, r3, #16
 8001b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b10:	4b4a      	ldr	r3, [pc, #296]	; (8001c3c <HAL_QSPI_MspInit+0x17c>)
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]
 8001b20:	4b46      	ldr	r3, [pc, #280]	; (8001c3c <HAL_QSPI_MspInit+0x17c>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	4a45      	ldr	r2, [pc, #276]	; (8001c3c <HAL_QSPI_MspInit+0x17c>)
 8001b26:	f043 0320 	orr.w	r3, r3, #32
 8001b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2c:	4b43      	ldr	r3, [pc, #268]	; (8001c3c <HAL_QSPI_MspInit+0x17c>)
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	f003 0320 	and.w	r3, r3, #32
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <HAL_QSPI_MspInit+0x17c>)
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	4a3e      	ldr	r2, [pc, #248]	; (8001c3c <HAL_QSPI_MspInit+0x17c>)
 8001b42:	f043 0302 	orr.w	r3, r3, #2
 8001b46:	6313      	str	r3, [r2, #48]	; 0x30
 8001b48:	4b3c      	ldr	r3, [pc, #240]	; (8001c3c <HAL_QSPI_MspInit+0x17c>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <HAL_QSPI_MspInit+0x17c>)
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	4a37      	ldr	r2, [pc, #220]	; (8001c3c <HAL_QSPI_MspInit+0x17c>)
 8001b5e:	f043 0308 	orr.w	r3, r3, #8
 8001b62:	6313      	str	r3, [r2, #48]	; 0x30
 8001b64:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <HAL_QSPI_MspInit+0x17c>)
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <HAL_QSPI_MspInit+0x17c>)
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	4a30      	ldr	r2, [pc, #192]	; (8001c3c <HAL_QSPI_MspInit+0x17c>)
 8001b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b80:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <HAL_QSPI_MspInit+0x17c>)
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001b9c:	2309      	movs	r3, #9
 8001b9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4826      	ldr	r0, [pc, #152]	; (8001c40 <HAL_QSPI_MspInit+0x180>)
 8001ba8:	f002 f9a0 	bl	8003eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001bac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	481e      	ldr	r0, [pc, #120]	; (8001c44 <HAL_QSPI_MspInit+0x184>)
 8001bca:	f002 f98f 	bl	8003eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001bce:	2304      	movs	r3, #4
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001bde:	2309      	movs	r3, #9
 8001be0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be6:	4619      	mov	r1, r3
 8001be8:	4817      	ldr	r0, [pc, #92]	; (8001c48 <HAL_QSPI_MspInit+0x188>)
 8001bea:	f002 f97f 	bl	8003eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001bee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001c00:	2309      	movs	r3, #9
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4810      	ldr	r0, [pc, #64]	; (8001c4c <HAL_QSPI_MspInit+0x18c>)
 8001c0c:	f002 f96e 	bl	8003eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001c10:	2340      	movs	r3, #64	; 0x40
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c20:	230a      	movs	r3, #10
 8001c22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4809      	ldr	r0, [pc, #36]	; (8001c50 <HAL_QSPI_MspInit+0x190>)
 8001c2c:	f002 f95e 	bl	8003eec <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001c30:	bf00      	nop
 8001c32:	3738      	adds	r7, #56	; 0x38
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	a0001000 	.word	0xa0001000
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40021400 	.word	0x40021400
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	40020c00 	.word	0x40020c00
 8001c50:	40021800 	.word	0x40021800

08001c54 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	; 0x28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a31      	ldr	r2, [pc, #196]	; (8001d38 <HAL_SD_MspInit+0xe4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d15b      	bne.n	8001d2e <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	4b30      	ldr	r3, [pc, #192]	; (8001d3c <HAL_SD_MspInit+0xe8>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	4a2f      	ldr	r2, [pc, #188]	; (8001d3c <HAL_SD_MspInit+0xe8>)
 8001c80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c84:	6453      	str	r3, [r2, #68]	; 0x44
 8001c86:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_SD_MspInit+0xe8>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <HAL_SD_MspInit+0xe8>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a28      	ldr	r2, [pc, #160]	; (8001d3c <HAL_SD_MspInit+0xe8>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <HAL_SD_MspInit+0xe8>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <HAL_SD_MspInit+0xe8>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4a21      	ldr	r2, [pc, #132]	; (8001d3c <HAL_SD_MspInit+0xe8>)
 8001cb8:	f043 0304 	orr.w	r3, r3, #4
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <HAL_SD_MspInit+0xe8>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001cca:	2340      	movs	r3, #64	; 0x40
 8001ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001cda:	230c      	movs	r3, #12
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4816      	ldr	r0, [pc, #88]	; (8001d40 <HAL_SD_MspInit+0xec>)
 8001ce6:	f002 f901 	bl	8003eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin;
 8001cea:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001cfc:	230c      	movs	r3, #12
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4619      	mov	r1, r3
 8001d06:	480f      	ldr	r0, [pc, #60]	; (8001d44 <HAL_SD_MspInit+0xf0>)
 8001d08:	f002 f8f0 	bl	8003eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_CLK_Pin;
 8001d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d16:	2301      	movs	r3, #1
 8001d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001d1e:	230c      	movs	r3, #12
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CLK_GPIO_Port, &GPIO_InitStruct);
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	4619      	mov	r1, r3
 8001d28:	4806      	ldr	r0, [pc, #24]	; (8001d44 <HAL_SD_MspInit+0xf0>)
 8001d2a:	f002 f8df 	bl	8003eec <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001d2e:	bf00      	nop
 8001d30:	3728      	adds	r7, #40	; 0x28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40012c00 	.word	0x40012c00
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40020000 	.word	0x40020000
 8001d44:	40020800 	.word	0x40020800

08001d48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a21      	ldr	r2, [pc, #132]	; (8001dec <HAL_SPI_MspInit+0xa4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d13c      	bne.n	8001de4 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <HAL_SPI_MspInit+0xa8>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a1f      	ldr	r2, [pc, #124]	; (8001df0 <HAL_SPI_MspInit+0xa8>)
 8001d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <HAL_SPI_MspInit+0xa8>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_SPI_MspInit+0xa8>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a18      	ldr	r2, [pc, #96]	; (8001df0 <HAL_SPI_MspInit+0xa8>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <HAL_SPI_MspInit+0xa8>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB12     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin;
 8001da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db0:	2303      	movs	r3, #3
 8001db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001db4:	2307      	movs	r3, #7
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480d      	ldr	r0, [pc, #52]	; (8001df4 <HAL_SPI_MspInit+0xac>)
 8001dc0:	f002 f894 	bl	8003eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001dc4:	2330      	movs	r3, #48	; 0x30
 8001dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dd4:	2306      	movs	r3, #6
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4805      	ldr	r0, [pc, #20]	; (8001df4 <HAL_SPI_MspInit+0xac>)
 8001de0:	f002 f884 	bl	8003eec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001de4:	bf00      	nop
 8001de6:	3728      	adds	r7, #40	; 0x28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40003c00 	.word	0x40003c00
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40020400 	.word	0x40020400

08001df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <HAL_UART_MspInit+0x84>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d12c      	bne.n	8001e74 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_UART_MspInit+0x88>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <HAL_UART_MspInit+0x88>)
 8001e24:	f043 0320 	orr.w	r3, r3, #32
 8001e28:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_UART_MspInit+0x88>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f003 0320 	and.w	r3, r3, #32
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_UART_MspInit+0x88>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a10      	ldr	r2, [pc, #64]	; (8001e80 <HAL_UART_MspInit+0x88>)
 8001e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HAL_UART_MspInit+0x88>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001e52:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e60:	2303      	movs	r3, #3
 8001e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e64:	2308      	movs	r3, #8
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4805      	ldr	r0, [pc, #20]	; (8001e84 <HAL_UART_MspInit+0x8c>)
 8001e70:	f002 f83c 	bl	8003eec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e74:	bf00      	nop
 8001e76:	3728      	adds	r7, #40	; 0x28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40011400 	.word	0x40011400
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40021800 	.word	0x40021800

08001e88 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001e9c:	4b2c      	ldr	r3, [pc, #176]	; (8001f50 <HAL_FSMC_MspInit+0xc8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d151      	bne.n	8001f48 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001ea4:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <HAL_FSMC_MspInit+0xc8>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <HAL_FSMC_MspInit+0xcc>)
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	4a28      	ldr	r2, [pc, #160]	; (8001f54 <HAL_FSMC_MspInit+0xcc>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6393      	str	r3, [r2, #56]	; 0x38
 8001eba:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <HAL_FSMC_MspInit+0xcc>)
 8001ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8001ec6:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001eca:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001ed8:	230c      	movs	r3, #12
 8001eda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	4619      	mov	r1, r3
 8001ee0:	481d      	ldr	r0, [pc, #116]	; (8001f58 <HAL_FSMC_MspInit+0xd0>)
 8001ee2:	f002 f803 	bl	8003eec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8001ee6:	f240 433f 	movw	r3, #1087	; 0x43f
 8001eea:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001ef8:	230c      	movs	r3, #12
 8001efa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	4619      	mov	r1, r3
 8001f00:	4816      	ldr	r0, [pc, #88]	; (8001f5c <HAL_FSMC_MspInit+0xd4>)
 8001f02:	f001 fff3 	bl	8003eec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8001f06:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001f0a:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f14:	2303      	movs	r3, #3
 8001f16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001f18:	230c      	movs	r3, #12
 8001f1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	4619      	mov	r1, r3
 8001f20:	480f      	ldr	r0, [pc, #60]	; (8001f60 <HAL_FSMC_MspInit+0xd8>)
 8001f22:	f001 ffe3 	bl	8003eec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8001f26:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001f2a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f34:	2303      	movs	r3, #3
 8001f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001f38:	230c      	movs	r3, #12
 8001f3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4808      	ldr	r0, [pc, #32]	; (8001f64 <HAL_FSMC_MspInit+0xdc>)
 8001f42:	f001 ffd3 	bl	8003eec <HAL_GPIO_Init>
 8001f46:	e000      	b.n	8001f4a <HAL_FSMC_MspInit+0xc2>
    return;
 8001f48:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200000d8 	.word	0x200000d8
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40021400 	.word	0x40021400
 8001f5c:	40021800 	.word	0x40021800
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40020c00 	.word	0x40020c00

08001f68 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001f70:	f7ff ff8a 	bl	8001e88 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f8e:	e7fe      	b.n	8001f8e <HardFault_Handler+0x4>

08001f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <MemManage_Handler+0x4>

08001f96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f9a:	e7fe      	b.n	8001f9a <BusFault_Handler+0x4>

08001f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <UsageFault_Handler+0x4>

08001fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd0:	f000 fb78 	bl	80026c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <DMA2_Stream0_IRQHandler+0x10>)
 8001fde:	f001 fc43 	bl	8003868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20003504 	.word	0x20003504

08001fec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ff4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ff8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d013      	beq.n	800202c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002004:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002008:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800200c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00b      	beq.n	800202c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002014:	e000      	b.n	8002018 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002016:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002018:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f9      	beq.n	8002016 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002022:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800202c:	687b      	ldr	r3, [r7, #4]
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b086      	sub	sp, #24
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	e00a      	b.n	8002062 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800204c:	f3af 8000 	nop.w
 8002050:	4601      	mov	r1, r0
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	60ba      	str	r2, [r7, #8]
 8002058:	b2ca      	uxtb	r2, r1
 800205a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	3301      	adds	r3, #1
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	429a      	cmp	r2, r3
 8002068:	dbf0      	blt.n	800204c <_read+0x12>
	}

return len;
 800206a:	687b      	ldr	r3, [r7, #4]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
		for(int i = 0; i < len; i++){
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	e009      	b.n	800209a <_write+0x26>
			ITM_SendChar(*ptr++);
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	60ba      	str	r2, [r7, #8]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ffac 	bl	8001fec <ITM_SendChar>
		for(int i = 0; i < len; i++){
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	3301      	adds	r3, #1
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	429a      	cmp	r2, r3
 80020a0:	dbf1      	blt.n	8002086 <_write+0x12>
		}
		return len;
 80020a2:	687b      	ldr	r3, [r7, #4]

	//	errno = ENOSYS;
	//	return -1;
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_close>:

int _close(int file)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	return -1;
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020d4:	605a      	str	r2, [r3, #4]
	return 0;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <_isatty>:

int _isatty(int file)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	return 1;
 80020ec:	2301      	movs	r3, #1
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b085      	sub	sp, #20
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
	return 0;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <_sbrk+0x50>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <_sbrk+0x16>
		heap_end = &end;
 8002124:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <_sbrk+0x50>)
 8002126:	4a10      	ldr	r2, [pc, #64]	; (8002168 <_sbrk+0x54>)
 8002128:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <_sbrk+0x50>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <_sbrk+0x50>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4413      	add	r3, r2
 8002138:	466a      	mov	r2, sp
 800213a:	4293      	cmp	r3, r2
 800213c:	d907      	bls.n	800214e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800213e:	f008 fd6d 	bl	800ac1c <__errno>
 8002142:	4602      	mov	r2, r0
 8002144:	230c      	movs	r3, #12
 8002146:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002148:	f04f 33ff 	mov.w	r3, #4294967295
 800214c:	e006      	b.n	800215c <_sbrk+0x48>
	}

	heap_end += incr;
 800214e:	4b05      	ldr	r3, [pc, #20]	; (8002164 <_sbrk+0x50>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	4a03      	ldr	r2, [pc, #12]	; (8002164 <_sbrk+0x50>)
 8002158:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	200000dc 	.word	0x200000dc
 8002168:	20007030 	.word	0x20007030

0800216c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <SystemInit+0x28>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002176:	4a07      	ldr	r2, [pc, #28]	; (8002194 <SystemInit+0x28>)
 8002178:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800217c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <SystemInit+0x28>)
 8002182:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002186:	609a      	str	r2, [r3, #8]
#endif
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <ConnectWifi>:
#include "main.h"

SPI_HandleTypeDef wifi_spi;

void ConnectWifi(SPI_HandleTypeDef *spidef)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	wifi_spi = *spidef;
 80021a0:	4a05      	ldr	r2, [pc, #20]	; (80021b8 <ConnectWifi+0x20>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	2358      	movs	r3, #88	; 0x58
 80021aa:	461a      	mov	r2, r3
 80021ac:	f008 fd60 	bl	800ac70 <memcpy>
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20004f5c 	.word	0x20004f5c

080021bc <Wifi_ChipDeselect>:

//WiFi SPI ChipDeselect
void Wifi_ChipDeselect(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIFI_SPI_CSN_GPIO_Port, WIFI_SPI_CSN_Pin, GPIO_PIN_SET);
 80021c0:	2201      	movs	r2, #1
 80021c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c6:	4802      	ldr	r0, [pc, #8]	; (80021d0 <Wifi_ChipDeselect+0x14>)
 80021c8:	f002 f83a 	bl	8004240 <HAL_GPIO_WritePin>
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021800 	.word	0x40021800

080021d4 <Wifi_ChipSelect>:

//WiFi SPI ChipSelect
void Wifi_ChipSelect(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIFI_SPI_CSN_GPIO_Port, WIFI_SPI_CSN_Pin, GPIO_PIN_RESET);
 80021d8:	2200      	movs	r2, #0
 80021da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021de:	4802      	ldr	r0, [pc, #8]	; (80021e8 <Wifi_ChipSelect+0x14>)
 80021e0:	f002 f82e 	bl	8004240 <HAL_GPIO_WritePin>
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021800 	.word	0x40021800

080021ec <GetCmdDataReady>:

uint8_t GetCmdDataReady()
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
	return (uint8_t)HAL_GPIO_ReadPin(WIFI_DRDY_GPIO_Port, WIFI_DRDY_Pin);
 80021f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021f4:	4802      	ldr	r0, [pc, #8]	; (8002200 <GetCmdDataReady+0x14>)
 80021f6:	f002 f80b 	bl	8004210 <HAL_GPIO_ReadPin>
 80021fa:	4603      	mov	r3, r0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021800 	.word	0x40021800

08002204 <IsCommandPhaseReady>:

bool IsCommandPhaseReady()
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
	if(GetCmdDataReady() != 0)
 8002208:	f7ff fff0 	bl	80021ec <GetCmdDataReady>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <IsCommandPhaseReady+0x12>
	{
		return true;
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <IsCommandPhaseReady+0x14>
	}
	return false;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	bd80      	pop	{r7, pc}

0800221c <IsDataPhaseReady>:

bool IsDataPhaseReady()
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
	if(GetCmdDataReady() != 0)
 8002220:	f7ff ffe4 	bl	80021ec <GetCmdDataReady>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <IsDataPhaseReady+0x12>
	{
		return true;
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <IsDataPhaseReady+0x14>
	}
	return false;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}

08002234 <WifiStartup>:
	Wifi_ChipDeselect();
}


void WifiStartup()
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af02      	add	r7, sp, #8
	int length = 1;
 800223a:	2301      	movs	r3, #1
 800223c:	60fb      	str	r3, [r7, #12]
//	uint8_t wb[] = {0x0a, 0x0a};
//	uint8_t rb[2];
	uint16_t wb[] = {0x0a0a};
 800223e:	f640 230a 	movw	r3, #2570	; 0xa0a
 8002242:	813b      	strh	r3, [r7, #8]
	uint16_t rb[1];
	Wifi_ChipSelect();
 8002244:	f7ff ffc6 	bl	80021d4 <Wifi_ChipSelect>

	while(IsDataPhaseReady())
 8002248:	e012      	b.n	8002270 <WifiStartup+0x3c>
	{
		HAL_SPI_TransmitReceive(&wifi_spi, &wb, &rb, length, HAL_MAX_DELAY);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	b298      	uxth	r0, r3
 800224e:	1d3a      	adds	r2, r7, #4
 8002250:	f107 0108 	add.w	r1, r7, #8
 8002254:	f04f 33ff 	mov.w	r3, #4294967295
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	4603      	mov	r3, r0
 800225c:	480a      	ldr	r0, [pc, #40]	; (8002288 <WifiStartup+0x54>)
 800225e:	f003 ff65 	bl	800612c <HAL_SPI_TransmitReceive>
		printf("in first data phase, rb = 0x%0x, 0x%0x\r\n", rb[1], rb[0]);
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	4619      	mov	r1, r3
 8002266:	88bb      	ldrh	r3, [r7, #4]
 8002268:	461a      	mov	r2, r3
 800226a:	4808      	ldr	r0, [pc, #32]	; (800228c <WifiStartup+0x58>)
 800226c:	f008 fdbc 	bl	800ade8 <iprintf>
	while(IsDataPhaseReady())
 8002270:	f7ff ffd4 	bl	800221c <IsDataPhaseReady>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1e7      	bne.n	800224a <WifiStartup+0x16>
//	for(int i = 0; i < 4; i++)
//	{
//		printf("i = %d, value = %0x\r\n", i, rb2[i]);
//	}

	Wifi_ChipDeselect();
 800227a:	f7ff ff9f 	bl	80021bc <Wifi_ChipDeselect>
}
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20004f5c 	.word	0x20004f5c
 800228c:	0800bc20 	.word	0x0800bc20

08002290 <SetSSID>:
	Wifi_ChipDeselect();
	printf("ChipDeselect == [%d]\r\n", checkReady);
}

void SetSSID()
{
 8002290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002294:	b092      	sub	sp, #72	; 0x48
 8002296:	af02      	add	r7, sp, #8
 8002298:	466b      	mov	r3, sp
 800229a:	461d      	mov	r5, r3
	uint8_t checkReady;
	int length = 2;
 800229c:	2302      	movs	r3, #2
 800229e:	63fb      	str	r3, [r7, #60]	; 0x3c
//	uint16_t wb[] = {'T', 'M', '\r', '\n'};

	char tmp[] = "MT\r\n";
 80022a0:	4aba      	ldr	r2, [pc, #744]	; (800258c <SetSSID+0x2fc>)
 80022a2:	f107 0308 	add.w	r3, r7, #8
 80022a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022aa:	6018      	str	r0, [r3, #0]
 80022ac:	3304      	adds	r3, #4
 80022ae:	7019      	strb	r1, [r3, #0]
	uint16_t wb[length];
 80022b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80022b2:	1e43      	subs	r3, r0, #1
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022b6:	4603      	mov	r3, r0
 80022b8:	4619      	mov	r1, r3
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	f04f 0400 	mov.w	r4, #0
 80022c6:	0114      	lsls	r4, r2, #4
 80022c8:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80022cc:	010b      	lsls	r3, r1, #4
 80022ce:	4603      	mov	r3, r0
 80022d0:	4619      	mov	r1, r3
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	f04f 0400 	mov.w	r4, #0
 80022de:	0114      	lsls	r4, r2, #4
 80022e0:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80022e4:	010b      	lsls	r3, r1, #4
 80022e6:	4603      	mov	r3, r0
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	3301      	adds	r3, #1
 80022ec:	3307      	adds	r3, #7
 80022ee:	08db      	lsrs	r3, r3, #3
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	ebad 0d03 	sub.w	sp, sp, r3
 80022f6:	ab02      	add	r3, sp, #8
 80022f8:	3301      	adds	r3, #1
 80022fa:	085b      	lsrs	r3, r3, #1
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
	memset(wb, 0, length);
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f008 fcbd 	bl	800ac86 <memset>

	for(int i = 0; i < length; i++)
 800230c:	2300      	movs	r3, #0
 800230e:	633b      	str	r3, [r7, #48]	; 0x30
 8002310:	e025      	b.n	800235e <SetSSID+0xce>
	{
		uint16_t lo = tmp[i*2];
 8002312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800231a:	4413      	add	r3, r2
 800231c:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002320:	827b      	strh	r3, [r7, #18]
		uint16_t hi = tmp[i*2+1] << 8;
 8002322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	3301      	adds	r3, #1
 8002328:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800232c:	4413      	add	r3, r2
 800232e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002332:	b29b      	uxth	r3, r3
 8002334:	021b      	lsls	r3, r3, #8
 8002336:	823b      	strh	r3, [r7, #16]
		wb[i] = lo | hi;
 8002338:	8a7a      	ldrh	r2, [r7, #18]
 800233a:	8a3b      	ldrh	r3, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	b299      	uxth	r1, r3
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002344:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		printf("wb[i] = %0x\r\n", wb[i]);
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800234c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002350:	4619      	mov	r1, r3
 8002352:	488f      	ldr	r0, [pc, #572]	; (8002590 <SetSSID+0x300>)
 8002354:	f008 fd48 	bl	800ade8 <iprintf>
	for(int i = 0; i < length; i++)
 8002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235a:	3301      	adds	r3, #1
 800235c:	633b      	str	r3, [r7, #48]	; 0x30
 800235e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002362:	429a      	cmp	r2, r3
 8002364:	dbd5      	blt.n	8002312 <SetSSID+0x82>
	}
	uint16_t rb[length];
 8002366:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002368:	466b      	mov	r3, sp
 800236a:	461e      	mov	r6, r3
 800236c:	1e43      	subs	r3, r0, #1
 800236e:	623b      	str	r3, [r7, #32]
 8002370:	4603      	mov	r3, r0
 8002372:	4619      	mov	r1, r3
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	f04f 0400 	mov.w	r4, #0
 8002380:	0114      	lsls	r4, r2, #4
 8002382:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8002386:	010b      	lsls	r3, r1, #4
 8002388:	4603      	mov	r3, r0
 800238a:	4619      	mov	r1, r3
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	f04f 0400 	mov.w	r4, #0
 8002398:	0114      	lsls	r4, r2, #4
 800239a:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 800239e:	010b      	lsls	r3, r1, #4
 80023a0:	4603      	mov	r3, r0
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	3301      	adds	r3, #1
 80023a6:	3307      	adds	r3, #7
 80023a8:	08db      	lsrs	r3, r3, #3
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	ebad 0d03 	sub.w	sp, sp, r3
 80023b0:	ab02      	add	r3, sp, #8
 80023b2:	3301      	adds	r3, #1
 80023b4:	085b      	lsrs	r3, r3, #1
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	61fb      	str	r3, [r7, #28]

	//Wait for chip to be ready for command
	printf("waiting for chip to be ready for first command\r\n");
 80023ba:	4876      	ldr	r0, [pc, #472]	; (8002594 <SetSSID+0x304>)
 80023bc:	f008 fd88 	bl	800aed0 <puts>
	while(!IsCommandPhaseReady())
 80023c0:	bf00      	nop
 80023c2:	f7ff ff1f 	bl	8002204 <IsCommandPhaseReady>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f083 0301 	eor.w	r3, r3, #1
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f7      	bne.n	80023c2 <SetSSID+0x132>
	{

	}

	printf("ready for first command\r\n");
 80023d2:	4871      	ldr	r0, [pc, #452]	; (8002598 <SetSSID+0x308>)
 80023d4:	f008 fd7c 	bl	800aed0 <puts>
//		printf("ChipDeselect == [%d]\r\n", checkReady);
//	}
//	while(checkReady == 0);

	//Lower NSS to start command
	Wifi_ChipSelect();
 80023d8:	f7ff fefc 	bl	80021d4 <Wifi_ChipSelect>

	//Transmit command rb should be consistently 0x15;
	HAL_SPI_TransmitReceive(&wifi_spi, &wb, &rb, length, HAL_MAX_DELAY);
 80023dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023de:	69fa      	ldr	r2, [r7, #28]
 80023e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e2:	b298      	uxth	r0, r3
 80023e4:	f04f 33ff 	mov.w	r3, #4294967295
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	4603      	mov	r3, r0
 80023ec:	486b      	ldr	r0, [pc, #428]	; (800259c <SetSSID+0x30c>)
 80023ee:	f003 fe9d 	bl	800612c <HAL_SPI_TransmitReceive>
	//
	checkReady = (uint8_t)HAL_GPIO_ReadPin(WIFI_DRDY_GPIO_Port, WIFI_DRDY_Pin);
 80023f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023f6:	486a      	ldr	r0, [pc, #424]	; (80025a0 <SetSSID+0x310>)
 80023f8:	f001 ff0a 	bl	8004210 <HAL_GPIO_ReadPin>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	printf("sending command checkReady should be high checkReady == [%d]\r\n", checkReady);
 8002402:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002406:	4619      	mov	r1, r3
 8002408:	4866      	ldr	r0, [pc, #408]	; (80025a4 <SetSSID+0x314>)
 800240a:	f008 fced 	bl	800ade8 <iprintf>

	printf("read buffer should be all 0x15\r\n");
 800240e:	4866      	ldr	r0, [pc, #408]	; (80025a8 <SetSSID+0x318>)
 8002410:	f008 fd5e 	bl	800aed0 <puts>
	for(int i = 0; i < length; i++)
 8002414:	2300      	movs	r3, #0
 8002416:	637b      	str	r3, [r7, #52]	; 0x34
 8002418:	e00b      	b.n	8002432 <SetSSID+0x1a2>
	{
		printf("i = %d, value = %0x\r\n", i, rb[i]);
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800241e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002422:	461a      	mov	r2, r3
 8002424:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002426:	4861      	ldr	r0, [pc, #388]	; (80025ac <SetSSID+0x31c>)
 8002428:	f008 fcde 	bl	800ade8 <iprintf>
	for(int i = 0; i < length; i++)
 800242c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800242e:	3301      	adds	r3, #1
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
 8002432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002436:	429a      	cmp	r2, r3
 8002438:	dbef      	blt.n	800241a <SetSSID+0x18a>
	}
	checkReady = GetCmdDataReady();
 800243a:	f7ff fed7 	bl	80021ec <GetCmdDataReady>
 800243e:	4603      	mov	r3, r0
 8002440:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	printf("before chip deselect, data_ready = [%d]\r\n\n", checkReady);
 8002444:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002448:	4619      	mov	r1, r3
 800244a:	4859      	ldr	r0, [pc, #356]	; (80025b0 <SetSSID+0x320>)
 800244c:	f008 fccc 	bl	800ade8 <iprintf>

	Wifi_ChipDeselect();
 8002450:	f7ff feb4 	bl	80021bc <Wifi_ChipDeselect>
	checkReady = GetCmdDataReady();
 8002454:	f7ff feca 	bl	80021ec <GetCmdDataReady>
 8002458:	4603      	mov	r3, r0
 800245a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	printf("post Chip Deselect = [%d]\r\n\n", checkReady);
 800245e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002462:	4619      	mov	r1, r3
 8002464:	4853      	ldr	r0, [pc, #332]	; (80025b4 <SetSSID+0x324>)
 8002466:	f008 fcbf 	bl	800ade8 <iprintf>
	//Wait for CMD/DATARDY to be high again


	HAL_Delay(1);
 800246a:	2001      	movs	r0, #1
 800246c:	f000 f94a 	bl	8002704 <HAL_Delay>
	checkReady = GetCmdDataReady();
 8002470:	f7ff febc 	bl	80021ec <GetCmdDataReady>
 8002474:	4603      	mov	r3, r0
 8002476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	printf("slight delay checkReady = [%d]\r\n\n", checkReady);
 800247a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800247e:	4619      	mov	r1, r3
 8002480:	484d      	ldr	r0, [pc, #308]	; (80025b8 <SetSSID+0x328>)
 8002482:	f008 fcb1 	bl	800ade8 <iprintf>

	while(!IsDataPhaseReady())
 8002486:	e00a      	b.n	800249e <SetSSID+0x20e>
	{
		checkReady = GetCmdDataReady();
 8002488:	f7ff feb0 	bl	80021ec <GetCmdDataReady>
 800248c:	4603      	mov	r3, r0
 800248e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		printf("Wait for CMD/DATARDY to be high again [%d]\r\n", checkReady);
 8002492:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002496:	4619      	mov	r1, r3
 8002498:	4848      	ldr	r0, [pc, #288]	; (80025bc <SetSSID+0x32c>)
 800249a:	f008 fca5 	bl	800ade8 <iprintf>
	while(!IsDataPhaseReady())
 800249e:	f7ff febd 	bl	800221c <IsDataPhaseReady>
 80024a2:	4603      	mov	r3, r0
 80024a4:	f083 0301 	eor.w	r3, r3, #1
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1ec      	bne.n	8002488 <SetSSID+0x1f8>


//	length = 2;
//	uint8_t wb2[] = {0x0A, 0x0A};
//	uint8_t rb2[length];
	length = 1;
 80024ae:	2301      	movs	r3, #1
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t wb2[] = { 0x0A0A };
 80024b2:	f640 230a 	movw	r3, #2570	; 0xa0a
 80024b6:	80bb      	strh	r3, [r7, #4]
	uint16_t rb2[length];
 80024b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80024ba:	466b      	mov	r3, sp
 80024bc:	4698      	mov	r8, r3
 80024be:	1e43      	subs	r3, r0, #1
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	4603      	mov	r3, r0
 80024c4:	4619      	mov	r1, r3
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	f04f 0400 	mov.w	r4, #0
 80024d2:	0114      	lsls	r4, r2, #4
 80024d4:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80024d8:	010b      	lsls	r3, r1, #4
 80024da:	4603      	mov	r3, r0
 80024dc:	4619      	mov	r1, r3
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	f04f 0400 	mov.w	r4, #0
 80024ea:	0114      	lsls	r4, r2, #4
 80024ec:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80024f0:	010b      	lsls	r3, r1, #4
 80024f2:	4603      	mov	r3, r0
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	3301      	adds	r3, #1
 80024f8:	3307      	adds	r3, #7
 80024fa:	08db      	lsrs	r3, r3, #3
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	ebad 0d03 	sub.w	sp, sp, r3
 8002502:	ab02      	add	r3, sp, #8
 8002504:	3301      	adds	r3, #1
 8002506:	085b      	lsrs	r3, r3, #1
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	617b      	str	r3, [r7, #20]

	checkReady = GetCmdDataReady();
 800250c:	f7ff fe6e 	bl	80021ec <GetCmdDataReady>
 8002510:	4603      	mov	r3, r0
 8002512:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	printf("Starting read data phase, checkReady = [%d]\r\n", checkReady);
 8002516:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800251a:	4619      	mov	r1, r3
 800251c:	4828      	ldr	r0, [pc, #160]	; (80025c0 <SetSSID+0x330>)
 800251e:	f008 fc63 	bl	800ade8 <iprintf>
	Wifi_ChipSelect();
 8002522:	f7ff fe57 	bl	80021d4 <Wifi_ChipSelect>

	int i = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	63bb      	str	r3, [r7, #56]	; 0x38
	while(IsDataPhaseReady())
 800252a:	e019      	b.n	8002560 <SetSSID+0x2d0>
	{
		HAL_SPI_TransmitReceive(&wifi_spi, &wb2, &rb2, length, HAL_MAX_DELAY);
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002530:	b298      	uxth	r0, r3
 8002532:	1d39      	adds	r1, r7, #4
 8002534:	f04f 33ff 	mov.w	r3, #4294967295
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	4603      	mov	r3, r0
 800253c:	4817      	ldr	r0, [pc, #92]	; (800259c <SetSSID+0x30c>)
 800253e:	f003 fdf5 	bl	800612c <HAL_SPI_TransmitReceive>
		checkReady = GetCmdDataReady();
 8002542:	f7ff fe53 	bl	80021ec <GetCmdDataReady>
 8002546:	4603      	mov	r3, r0
 8002548:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		printf("i = %d, value = %0x, %0x\r\n", i, rb2[0]);
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002554:	481b      	ldr	r0, [pc, #108]	; (80025c4 <SetSSID+0x334>)
 8002556:	f008 fc47 	bl	800ade8 <iprintf>
		i++;
 800255a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255c:	3301      	adds	r3, #1
 800255e:	63bb      	str	r3, [r7, #56]	; 0x38
	while(IsDataPhaseReady())
 8002560:	f7ff fe5c 	bl	800221c <IsDataPhaseReady>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1e0      	bne.n	800252c <SetSSID+0x29c>

	}


	Wifi_ChipDeselect();
 800256a:	f7ff fe27 	bl	80021bc <Wifi_ChipDeselect>
	printf("ChipDeselect == [%d]\r\n", checkReady);
 800256e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002572:	4619      	mov	r1, r3
 8002574:	4814      	ldr	r0, [pc, #80]	; (80025c8 <SetSSID+0x338>)
 8002576:	f008 fc37 	bl	800ade8 <iprintf>
 800257a:	46c5      	mov	sp, r8
 800257c:	46b5      	mov	sp, r6
 800257e:	46ad      	mov	sp, r5
}
 8002580:	bf00      	nop
 8002582:	3740      	adds	r7, #64	; 0x40
 8002584:	46bd      	mov	sp, r7
 8002586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800258a:	bf00      	nop
 800258c:	0800be38 	.word	0x0800be38
 8002590:	0800bd6c 	.word	0x0800bd6c
 8002594:	0800bd7c 	.word	0x0800bd7c
 8002598:	0800bdac 	.word	0x0800bdac
 800259c:	20004f5c 	.word	0x20004f5c
 80025a0:	40021800 	.word	0x40021800
 80025a4:	0800bc64 	.word	0x0800bc64
 80025a8:	0800bca4 	.word	0x0800bca4
 80025ac:	0800bcc4 	.word	0x0800bcc4
 80025b0:	0800bdc8 	.word	0x0800bdc8
 80025b4:	0800bdf4 	.word	0x0800bdf4
 80025b8:	0800be14 	.word	0x0800be14
 80025bc:	0800bcec 	.word	0x0800bcec
 80025c0:	0800bd1c 	.word	0x0800bd1c
 80025c4:	0800bd4c 	.word	0x0800bd4c
 80025c8:	0800bc4c 	.word	0x0800bc4c

080025cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80025cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002604 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80025d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025d2:	e003      	b.n	80025dc <LoopCopyDataInit>

080025d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025da:	3104      	adds	r1, #4

080025dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025dc:	480b      	ldr	r0, [pc, #44]	; (800260c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025e4:	d3f6      	bcc.n	80025d4 <CopyDataInit>
  ldr  r2, =_sbss
 80025e6:	4a0b      	ldr	r2, [pc, #44]	; (8002614 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025e8:	e002      	b.n	80025f0 <LoopFillZerobss>

080025ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80025ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025ec:	f842 3b04 	str.w	r3, [r2], #4

080025f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025f0:	4b09      	ldr	r3, [pc, #36]	; (8002618 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80025f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025f4:	d3f9      	bcc.n	80025ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025f6:	f7ff fdb9 	bl	800216c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025fa:	f008 fb15 	bl	800ac28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025fe:	f7fe f849 	bl	8000694 <main>
  bx  lr    
 8002602:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002604:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002608:	0800c3a4 	.word	0x0800c3a4
  ldr  r0, =_sdata
 800260c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002610:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8002614:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8002618:	2000702c 	.word	0x2000702c

0800261c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800261c:	e7fe      	b.n	800261c <ADC_IRQHandler>
	...

08002620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002624:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <HAL_Init+0x40>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0d      	ldr	r2, [pc, #52]	; (8002660 <HAL_Init+0x40>)
 800262a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800262e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_Init+0x40>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <HAL_Init+0x40>)
 8002636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800263a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800263c:	4b08      	ldr	r3, [pc, #32]	; (8002660 <HAL_Init+0x40>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a07      	ldr	r2, [pc, #28]	; (8002660 <HAL_Init+0x40>)
 8002642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002648:	2003      	movs	r0, #3
 800264a:	f000 fbbf 	bl	8002dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800264e:	2000      	movs	r0, #0
 8002650:	f000 f808 	bl	8002664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002654:	f7fe ffaa 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023c00 	.word	0x40023c00

08002664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_InitTick+0x54>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_InitTick+0x58>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800267a:	fbb3 f3f1 	udiv	r3, r3, r1
 800267e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fbd7 	bl	8002e36 <HAL_SYSTICK_Config>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e00e      	b.n	80026b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b0f      	cmp	r3, #15
 8002696:	d80a      	bhi.n	80026ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002698:	2200      	movs	r2, #0
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	f000 fb9f 	bl	8002de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026a4:	4a06      	ldr	r2, [pc, #24]	; (80026c0 <HAL_InitTick+0x5c>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e000      	b.n	80026b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	2000001c 	.word	0x2000001c
 80026bc:	20000024 	.word	0x20000024
 80026c0:	20000020 	.word	0x20000020

080026c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_IncTick+0x20>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_IncTick+0x24>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4413      	add	r3, r2
 80026d4:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <HAL_IncTick+0x24>)
 80026d6:	6013      	str	r3, [r2, #0]
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000024 	.word	0x20000024
 80026e8:	20004fb4 	.word	0x20004fb4

080026ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return uwTick;
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <HAL_GetTick+0x14>)
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20004fb4 	.word	0x20004fb4

08002704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800270c:	f7ff ffee 	bl	80026ec <HAL_GetTick>
 8002710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d005      	beq.n	800272a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_Delay+0x40>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4413      	add	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800272a:	bf00      	nop
 800272c:	f7ff ffde 	bl	80026ec <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	429a      	cmp	r2, r3
 800273a:	d8f7      	bhi.n	800272c <HAL_Delay+0x28>
  {
  }
}
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000024 	.word	0x20000024

08002748 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e033      	b.n	80027c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe ff48 	bl	80015fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b00      	cmp	r3, #0
 8002784:	d118      	bne.n	80027b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800278e:	f023 0302 	bic.w	r3, r3, #2
 8002792:	f043 0202 	orr.w	r2, r3, #2
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f94a 	bl	8002a34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f023 0303 	bic.w	r3, r3, #3
 80027ae:	f043 0201 	orr.w	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40
 80027b6:	e001      	b.n	80027bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x1c>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e113      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x244>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b09      	cmp	r3, #9
 80027fa:	d925      	bls.n	8002848 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68d9      	ldr	r1, [r3, #12]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	4613      	mov	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4413      	add	r3, r2
 8002810:	3b1e      	subs	r3, #30
 8002812:	2207      	movs	r2, #7
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43da      	mvns	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	400a      	ands	r2, r1
 8002820:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68d9      	ldr	r1, [r3, #12]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	b29b      	uxth	r3, r3
 8002832:	4618      	mov	r0, r3
 8002834:	4603      	mov	r3, r0
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4403      	add	r3, r0
 800283a:	3b1e      	subs	r3, #30
 800283c:	409a      	lsls	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	e022      	b.n	800288e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6919      	ldr	r1, [r3, #16]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	b29b      	uxth	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	4613      	mov	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4413      	add	r3, r2
 800285c:	2207      	movs	r2, #7
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43da      	mvns	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	400a      	ands	r2, r1
 800286a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6919      	ldr	r1, [r3, #16]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	b29b      	uxth	r3, r3
 800287c:	4618      	mov	r0, r3
 800287e:	4603      	mov	r3, r0
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4403      	add	r3, r0
 8002884:	409a      	lsls	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b06      	cmp	r3, #6
 8002894:	d824      	bhi.n	80028e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	3b05      	subs	r3, #5
 80028a8:	221f      	movs	r2, #31
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43da      	mvns	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	400a      	ands	r2, r1
 80028b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	4618      	mov	r0, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	3b05      	subs	r3, #5
 80028d2:	fa00 f203 	lsl.w	r2, r0, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	635a      	str	r2, [r3, #52]	; 0x34
 80028de:	e04c      	b.n	800297a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b0c      	cmp	r3, #12
 80028e6:	d824      	bhi.n	8002932 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	3b23      	subs	r3, #35	; 0x23
 80028fa:	221f      	movs	r2, #31
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43da      	mvns	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	400a      	ands	r2, r1
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	b29b      	uxth	r3, r3
 8002916:	4618      	mov	r0, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	3b23      	subs	r3, #35	; 0x23
 8002924:	fa00 f203 	lsl.w	r2, r0, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
 8002930:	e023      	b.n	800297a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	3b41      	subs	r3, #65	; 0x41
 8002944:	221f      	movs	r2, #31
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	400a      	ands	r2, r1
 8002952:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	4618      	mov	r0, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	3b41      	subs	r3, #65	; 0x41
 800296e:	fa00 f203 	lsl.w	r2, r0, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800297a:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <HAL_ADC_ConfigChannel+0x250>)
 800297c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a28      	ldr	r2, [pc, #160]	; (8002a24 <HAL_ADC_ConfigChannel+0x254>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d10f      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x1d8>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b12      	cmp	r3, #18
 800298e:	d10b      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1d      	ldr	r2, [pc, #116]	; (8002a24 <HAL_ADC_ConfigChannel+0x254>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d12b      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x23a>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1c      	ldr	r2, [pc, #112]	; (8002a28 <HAL_ADC_ConfigChannel+0x258>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <HAL_ADC_ConfigChannel+0x1f4>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b11      	cmp	r3, #17
 80029c2:	d122      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a11      	ldr	r2, [pc, #68]	; (8002a28 <HAL_ADC_ConfigChannel+0x258>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d111      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <HAL_ADC_ConfigChannel+0x25c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a11      	ldr	r2, [pc, #68]	; (8002a30 <HAL_ADC_ConfigChannel+0x260>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	0c9a      	lsrs	r2, r3, #18
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029fc:	e002      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f9      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	40012300 	.word	0x40012300
 8002a24:	40012000 	.word	0x40012000
 8002a28:	10000012 	.word	0x10000012
 8002a2c:	2000001c 	.word	0x2000001c
 8002a30:	431bde83 	.word	0x431bde83

08002a34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a3c:	4b79      	ldr	r3, [pc, #484]	; (8002c24 <ADC_Init+0x1f0>)
 8002a3e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	431a      	orrs	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	021a      	lsls	r2, r3, #8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6899      	ldr	r1, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	4a58      	ldr	r2, [pc, #352]	; (8002c28 <ADC_Init+0x1f4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d022      	beq.n	8002b12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ada:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6899      	ldr	r1, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002afc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6899      	ldr	r1, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	e00f      	b.n	8002b32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0202 	bic.w	r2, r2, #2
 8002b40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6899      	ldr	r1, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	7e1b      	ldrb	r3, [r3, #24]
 8002b4c:	005a      	lsls	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d01b      	beq.n	8002b98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6859      	ldr	r1, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	035a      	lsls	r2, r3, #13
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	e007      	b.n	8002ba8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ba6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	051a      	lsls	r2, r3, #20
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6899      	ldr	r1, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bea:	025a      	lsls	r2, r3, #9
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6899      	ldr	r1, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	029a      	lsls	r2, r3, #10
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	609a      	str	r2, [r3, #8]
}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	40012300 	.word	0x40012300
 8002c28:	0f000001 	.word	0x0f000001

08002c2c <__NVIC_SetPriorityGrouping>:
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5e:	4a04      	ldr	r2, [pc, #16]	; (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	60d3      	str	r3, [r2, #12]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <__NVIC_GetPriorityGrouping>:
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <__NVIC_GetPriorityGrouping+0x18>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	f003 0307 	and.w	r3, r3, #7
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <__NVIC_EnableIRQ>:
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	db0b      	blt.n	8002cba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	4907      	ldr	r1, [pc, #28]	; (8002cc8 <__NVIC_EnableIRQ+0x38>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000e100 	.word	0xe000e100

08002ccc <__NVIC_SetPriority>:
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	6039      	str	r1, [r7, #0]
 8002cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	db0a      	blt.n	8002cf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	490c      	ldr	r1, [pc, #48]	; (8002d18 <__NVIC_SetPriority+0x4c>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	440b      	add	r3, r1
 8002cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002cf4:	e00a      	b.n	8002d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4908      	ldr	r1, [pc, #32]	; (8002d1c <__NVIC_SetPriority+0x50>)
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	3b04      	subs	r3, #4
 8002d04:	0112      	lsls	r2, r2, #4
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	440b      	add	r3, r1
 8002d0a:	761a      	strb	r2, [r3, #24]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000e100 	.word	0xe000e100
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <NVIC_EncodePriority>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	; 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f1c3 0307 	rsb	r3, r3, #7
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	bf28      	it	cs
 8002d3e:	2304      	movcs	r3, #4
 8002d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2b06      	cmp	r3, #6
 8002d48:	d902      	bls.n	8002d50 <NVIC_EncodePriority+0x30>
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3b03      	subs	r3, #3
 8002d4e:	e000      	b.n	8002d52 <NVIC_EncodePriority+0x32>
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d54:	f04f 32ff 	mov.w	r2, #4294967295
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	401a      	ands	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d68:	f04f 31ff 	mov.w	r1, #4294967295
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	43d9      	mvns	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	4313      	orrs	r3, r2
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3724      	adds	r7, #36	; 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <SysTick_Config>:
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d98:	d301      	bcc.n	8002d9e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00f      	b.n	8002dbe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <SysTick_Config+0x40>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da6:	210f      	movs	r1, #15
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	f7ff ff8e 	bl	8002ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <SysTick_Config+0x40>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db6:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <SysTick_Config+0x40>)
 8002db8:	2207      	movs	r2, #7
 8002dba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	e000e010 	.word	0xe000e010

08002dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff29 	bl	8002c2c <__NVIC_SetPriorityGrouping>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b086      	sub	sp, #24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002df4:	f7ff ff3e 	bl	8002c74 <__NVIC_GetPriorityGrouping>
 8002df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	6978      	ldr	r0, [r7, #20]
 8002e00:	f7ff ff8e 	bl	8002d20 <NVIC_EncodePriority>
 8002e04:	4602      	mov	r2, r0
 8002e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff5d 	bl	8002ccc <__NVIC_SetPriority>
}
 8002e12:	bf00      	nop
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff31 	bl	8002c90 <__NVIC_EnableIRQ>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ffa2 	bl	8002d88 <SysTick_Config>
 8002e44:	4603      	mov	r3, r0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e014      	b.n	8002e8a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	791b      	ldrb	r3, [r3, #4]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d105      	bne.n	8002e76 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7fe fc3f 	bl	80016f4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b087      	sub	sp, #28
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	795b      	ldrb	r3, [r3, #5]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_DAC_ConfigChannel+0x20>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e036      	b.n	8002f20 <HAL_DAC_ConfigChannel+0x8e>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002ec6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6819      	ldr	r1, [r3, #0]
 8002f00:	22c0      	movs	r2, #192	; 0xc0
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43da      	mvns	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	400a      	ands	r2, r1
 8002f10:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	371c      	adds	r7, #28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0cf      	b.n	80030de <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a69      	ldr	r2, [pc, #420]	; (80030e8 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d00e      	beq.n	8002f66 <HAL_DFSDM_ChannelInit+0x3a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a67      	ldr	r2, [pc, #412]	; (80030ec <HAL_DFSDM_ChannelInit+0x1c0>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d009      	beq.n	8002f66 <HAL_DFSDM_ChannelInit+0x3a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a66      	ldr	r2, [pc, #408]	; (80030f0 <HAL_DFSDM_ChannelInit+0x1c4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d004      	beq.n	8002f66 <HAL_DFSDM_ChannelInit+0x3a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a64      	ldr	r2, [pc, #400]	; (80030f4 <HAL_DFSDM_ChannelInit+0x1c8>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d106      	bne.n	8002f74 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8002f66:	4b64      	ldr	r3, [pc, #400]	; (80030f8 <HAL_DFSDM_ChannelInit+0x1cc>)
 8002f68:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8002f6a:	4b64      	ldr	r3, [pc, #400]	; (80030fc <HAL_DFSDM_ChannelInit+0x1d0>)
 8002f6c:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8002f6e:	4b5e      	ldr	r3, [pc, #376]	; (80030e8 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	e005      	b.n	8002f80 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8002f74:	4b62      	ldr	r3, [pc, #392]	; (8003100 <HAL_DFSDM_ChannelInit+0x1d4>)
 8002f76:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8002f78:	4b62      	ldr	r3, [pc, #392]	; (8003104 <HAL_DFSDM_ChannelInit+0x1d8>)
 8002f7a:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8002f7c:	4b62      	ldr	r3, [pc, #392]	; (8003108 <HAL_DFSDM_ChannelInit+0x1dc>)
 8002f7e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 faaf 	bl	80034e8 <DFSDM_GetChannelFromInstance>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4413      	add	r3, r2
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0a0      	b.n	80030de <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7fe fcb3 	bl	8001908 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d125      	bne.n	8003000 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	791b      	ldrb	r3, [r3, #4]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d108      	bne.n	8002ff4 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	041b      	lsls	r3, r3, #16
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800300e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6819      	ldr	r1, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800301e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8003024:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 020f 	bic.w	r2, r2, #15
 800303c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6819      	ldr	r1, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003064:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6899      	ldr	r1, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	3b01      	subs	r3, #1
 8003076:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f002 0207 	and.w	r2, r2, #7
 8003090:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6859      	ldr	r1, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030bc:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fa0c 	bl	80034e8 <DFSDM_GetChannelFromInstance>
 80030d0:	4603      	mov	r3, r0
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4413      	add	r3, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40016000 	.word	0x40016000
 80030ec:	40016020 	.word	0x40016020
 80030f0:	40016040 	.word	0x40016040
 80030f4:	40016060 	.word	0x40016060
 80030f8:	200000e0 	.word	0x200000e0
 80030fc:	200000e4 	.word	0x200000e4
 8003100:	200000f4 	.word	0x200000f4
 8003104:	200000f8 	.word	0x200000f8
 8003108:	40016400 	.word	0x40016400

0800310c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e0d9      	b.n	80032d2 <HAL_DFSDM_FilterInit+0x1c6>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a6e      	ldr	r2, [pc, #440]	; (80032dc <HAL_DFSDM_FilterInit+0x1d0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d109      	bne.n	800313c <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 800312c:	2b01      	cmp	r3, #1
 800312e:	d003      	beq.n	8003138 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0ca      	b.n	80032d2 <HAL_DFSDM_FilterInit+0x1c6>
  }
#if defined (DFSDM2_Channel0)  
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a67      	ldr	r2, [pc, #412]	; (80032e0 <HAL_DFSDM_FilterInit+0x1d4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d109      	bne.n	800315a <HAL_DFSDM_FilterInit+0x4e>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 800314a:	2b01      	cmp	r3, #1
 800314c:	d003      	beq.n	8003156 <HAL_DFSDM_FilterInit+0x4a>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <HAL_DFSDM_FilterInit+0x4e>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e0bb      	b.n	80032d2 <HAL_DFSDM_FilterInit+0x1c6>
  }  
#endif /* DFSDM2_Channel0 */
       
  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1U;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1U;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7fe fb02 	bl	800177c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003186:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	7a1b      	ldrb	r3, [r3, #8]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d108      	bne.n	80031a2 <HAL_DFSDM_FilterInit+0x96>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	e007      	b.n	80031b2 <HAL_DFSDM_FilterInit+0xa6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80031b0:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7a5b      	ldrb	r3, [r3, #9]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d108      	bne.n	80031cc <HAL_DFSDM_FilterInit+0xc0>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	e007      	b.n	80031dc <HAL_DFSDM_FilterInit+0xd0>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80031da:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 80031ea:	f023 0308 	bic.w	r3, r3, #8
 80031ee:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d108      	bne.n	800320a <HAL_DFSDM_FilterInit+0xfe>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6819      	ldr	r1, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	7c1b      	ldrb	r3, [r3, #16]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d108      	bne.n	8003224 <HAL_DFSDM_FilterInit+0x118>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0210 	orr.w	r2, r2, #16
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	e007      	b.n	8003234 <HAL_DFSDM_FilterInit+0x128>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0210 	bic.w	r2, r2, #16
 8003232:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	7c5b      	ldrb	r3, [r3, #17]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d108      	bne.n	800324e <HAL_DFSDM_FilterInit+0x142>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0220 	orr.w	r2, r2, #32
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	e007      	b.n	800325e <HAL_DFSDM_FilterInit+0x152>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0220 	bic.w	r2, r2, #32
 800325c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800326c:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8003270:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6959      	ldr	r1, [r3, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	3b01      	subs	r3, #1
 8003282:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003284:	431a      	orrs	r2, r3
                                     (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800328c:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	7c1a      	ldrb	r2, [r3, #16]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40016100 	.word	0x40016100
 80032e0:	40016500 	.word	0x40016500

080032e4 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d02e      	beq.n	800335c <HAL_DFSDM_FilterConfigRegChannel+0x78>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8003304:	2bff      	cmp	r3, #255	; 0xff
 8003306:	d029      	beq.n	800335c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800331a:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d10d      	bne.n	800333e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003330:	431a      	orrs	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	e00a      	b.n	8003354 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6819      	ldr	r1, [r3, #0]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	631a      	str	r2, [r3, #48]	; 0x30
 800335a:	e001      	b.n	8003360 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }  
  else
  {
    status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003360:	7dfb      	ldrb	r3, [r7, #23]
}
 8003362:	4618      	mov	r0, r3
 8003364:	371c      	adds	r7, #28
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
	...

08003370 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0U))
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	75fb      	strb	r3, [r7, #23]
 8003390:	e066      	b.n	8003460 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800339c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033a0:	d002      	beq.n	80033a8 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
 80033a6:	e05b      	b.n	8003460 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10e      	bne.n	80033ce <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10a      	bne.n	80033ce <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d105      	bne.n	80033ce <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d002      	beq.n	80033ce <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1U))
  {
    status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	75fb      	strb	r3, [r7, #23]
 80033cc:	e048      	b.n	8003460 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10c      	bne.n	80033f0 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d108      	bne.n	80033f0 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80033e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e8:	d102      	bne.n	80033f0 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	75fb      	strb	r3, [r7, #23]
 80033ee:	e037      	b.n	8003460 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d004      	beq.n	8003404 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003400:	2b03      	cmp	r3, #3
 8003402:	d12b      	bne.n	800345c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003408:	4a18      	ldr	r2, [pc, #96]	; (800346c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 800340a:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003410:	4a17      	ldr	r2, [pc, #92]	; (8003470 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8003412:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 800341a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800341e:	d101      	bne.n	8003424 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8003420:	4a14      	ldr	r2, [pc, #80]	; (8003474 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8003422:	e000      	b.n	8003426 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8003424:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	331c      	adds	r3, #28
 8003436:	4619      	mov	r1, r3
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f000 f9bc 	bl	80037b8 <HAL_DMA_Start_IT>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d006      	beq.n	8003454 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	22ff      	movs	r2, #255	; 0xff
 800344a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003452:	e005      	b.n	8003460 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f8ab 	bl	80035b0 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800345a:	e001      	b.n	8003460 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003460:	7dfb      	ldrb	r3, [r7, #23]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	080034a9 	.word	0x080034a9
 8003470:	080034c5 	.word	0x080034c5
 8003474:	0800348d 	.word	0x0800348d

08003478 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdfsdm_filter);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f7fd feca 	bl	8001234 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80034a0:	bf00      	nop
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f7fd ff9a 	bl	80013f0 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80034bc:	bf00      	nop
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2203      	movs	r2, #3
 80034d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f7ff ffcd 	bl	8003478 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80034de:	bf00      	nop
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a24      	ldr	r2, [pc, #144]	; (8003584 <DFSDM_GetChannelFromInstance+0x9c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d003      	beq.n	8003500 <DFSDM_GetChannelFromInstance+0x18>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a23      	ldr	r2, [pc, #140]	; (8003588 <DFSDM_GetChannelFromInstance+0xa0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d102      	bne.n	8003506 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	e037      	b.n	8003576 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a20      	ldr	r2, [pc, #128]	; (800358c <DFSDM_GetChannelFromInstance+0xa4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d003      	beq.n	8003516 <DFSDM_GetChannelFromInstance+0x2e>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a1f      	ldr	r2, [pc, #124]	; (8003590 <DFSDM_GetChannelFromInstance+0xa8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d102      	bne.n	800351c <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8003516:	2301      	movs	r3, #1
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	e02c      	b.n	8003576 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a1d      	ldr	r2, [pc, #116]	; (8003594 <DFSDM_GetChannelFromInstance+0xac>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d003      	beq.n	800352c <DFSDM_GetChannelFromInstance+0x44>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a1c      	ldr	r2, [pc, #112]	; (8003598 <DFSDM_GetChannelFromInstance+0xb0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d102      	bne.n	8003532 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 800352c:	2302      	movs	r3, #2
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	e021      	b.n	8003576 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a19      	ldr	r2, [pc, #100]	; (800359c <DFSDM_GetChannelFromInstance+0xb4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d003      	beq.n	8003542 <DFSDM_GetChannelFromInstance+0x5a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a18      	ldr	r2, [pc, #96]	; (80035a0 <DFSDM_GetChannelFromInstance+0xb8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d102      	bne.n	8003548 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8003542:	2303      	movs	r3, #3
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	e016      	b.n	8003576 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a16      	ldr	r2, [pc, #88]	; (80035a4 <DFSDM_GetChannelFromInstance+0xbc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d102      	bne.n	8003556 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8003550:	2304      	movs	r3, #4
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	e00f      	b.n	8003576 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a13      	ldr	r2, [pc, #76]	; (80035a8 <DFSDM_GetChannelFromInstance+0xc0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d102      	bne.n	8003564 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 800355e:	2305      	movs	r3, #5
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	e008      	b.n	8003576 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a11      	ldr	r2, [pc, #68]	; (80035ac <DFSDM_GetChannelFromInstance+0xc4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d102      	bne.n	8003572 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 800356c:	2306      	movs	r3, #6
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	e001      	b.n	8003576 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8003572:	2307      	movs	r3, #7
 8003574:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8003576:	68fb      	ldr	r3, [r7, #12]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	40016000 	.word	0x40016000
 8003588:	40016400 	.word	0x40016400
 800358c:	40016020 	.word	0x40016020
 8003590:	40016420 	.word	0x40016420
 8003594:	40016040 	.word	0x40016040
 8003598:	40016440 	.word	0x40016440
 800359c:	40016060 	.word	0x40016060
 80035a0:	40016460 	.word	0x40016460
 80035a4:	40016480 	.word	0x40016480
 80035a8:	400164a0 	.word	0x400164a0
 80035ac:	400164c0 	.word	0x400164c0

080035b0 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d108      	bne.n	80035d2 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	e033      	b.n	800363a <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0201 	bic.w	r2, r2, #1
 80035e0:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80035f0:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003608:	2b03      	cmp	r3, #3
 800360a:	d116      	bne.n	800363a <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	2b00      	cmp	r3, #0
 8003612:	d107      	bne.n	8003624 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0202 	orr.w	r2, r2, #2
 8003622:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1U;
 800362a:	2b01      	cmp	r3, #1
 800362c:	d102      	bne.n	8003634 <DFSDM_RegConvStart+0x84>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	e000      	b.n	8003636 <DFSDM_RegConvStart+0x86>
 8003634:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <DFSDM_RegConvStart+0x98>
 8003644:	2202      	movs	r2, #2
 8003646:	e000      	b.n	800364a <DFSDM_RegConvStart+0x9a>
 8003648:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003668:	f7ff f840 	bl	80026ec <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e099      	b.n	80037ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0201 	bic.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003698:	e00f      	b.n	80036ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800369a:	f7ff f827 	bl	80026ec <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b05      	cmp	r3, #5
 80036a6:	d908      	bls.n	80036ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2220      	movs	r2, #32
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2203      	movs	r2, #3
 80036b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e078      	b.n	80037ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1e8      	bne.n	800369a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	4b38      	ldr	r3, [pc, #224]	; (80037b4 <HAL_DMA_Init+0x158>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4313      	orrs	r3, r2
 800370a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	2b04      	cmp	r3, #4
 8003712:	d107      	bne.n	8003724 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	4313      	orrs	r3, r2
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4313      	orrs	r3, r2
 8003722:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f023 0307 	bic.w	r3, r3, #7
 800373a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	2b04      	cmp	r3, #4
 800374c:	d117      	bne.n	800377e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00e      	beq.n	800377e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 fa6f 	bl	8003c44 <DMA_CheckFifoParam>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2240      	movs	r2, #64	; 0x40
 8003770:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800377a:	2301      	movs	r3, #1
 800377c:	e016      	b.n	80037ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fa26 	bl	8003bd8 <DMA_CalcBaseAndBitshift>
 800378c:	4603      	mov	r3, r0
 800378e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003794:	223f      	movs	r2, #63	; 0x3f
 8003796:	409a      	lsls	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	e010803f 	.word	0xe010803f

080037b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_DMA_Start_IT+0x26>
 80037da:	2302      	movs	r3, #2
 80037dc:	e040      	b.n	8003860 <HAL_DMA_Start_IT+0xa8>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d12f      	bne.n	8003852 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2202      	movs	r2, #2
 80037f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f9b8 	bl	8003b7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003810:	223f      	movs	r2, #63	; 0x3f
 8003812:	409a      	lsls	r2, r3
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0216 	orr.w	r2, r2, #22
 8003826:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	2b00      	cmp	r3, #0
 800382e:	d007      	beq.n	8003840 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0208 	orr.w	r2, r2, #8
 800383e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	e005      	b.n	800385e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800385a:	2302      	movs	r3, #2
 800385c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800385e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003874:	4b92      	ldr	r3, [pc, #584]	; (8003ac0 <HAL_DMA_IRQHandler+0x258>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a92      	ldr	r2, [pc, #584]	; (8003ac4 <HAL_DMA_IRQHandler+0x25c>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	0a9b      	lsrs	r3, r3, #10
 8003880:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003886:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003892:	2208      	movs	r2, #8
 8003894:	409a      	lsls	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4013      	ands	r3, r2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d01a      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d013      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0204 	bic.w	r2, r2, #4
 80038ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c0:	2208      	movs	r2, #8
 80038c2:	409a      	lsls	r2, r3
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038cc:	f043 0201 	orr.w	r2, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d8:	2201      	movs	r2, #1
 80038da:	409a      	lsls	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d012      	beq.n	800390a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00b      	beq.n	800390a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f6:	2201      	movs	r2, #1
 80038f8:	409a      	lsls	r2, r3
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003902:	f043 0202 	orr.w	r2, r3, #2
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390e:	2204      	movs	r2, #4
 8003910:	409a      	lsls	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4013      	ands	r3, r2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d012      	beq.n	8003940 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00b      	beq.n	8003940 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392c:	2204      	movs	r2, #4
 800392e:	409a      	lsls	r2, r3
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003938:	f043 0204 	orr.w	r2, r3, #4
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003944:	2210      	movs	r2, #16
 8003946:	409a      	lsls	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4013      	ands	r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d043      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d03c      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003962:	2210      	movs	r2, #16
 8003964:	409a      	lsls	r2, r3
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d018      	beq.n	80039aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d108      	bne.n	8003998 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d024      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	4798      	blx	r3
 8003996:	e01f      	b.n	80039d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01b      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	4798      	blx	r3
 80039a8:	e016      	b.n	80039d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d107      	bne.n	80039c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0208 	bic.w	r2, r2, #8
 80039c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039dc:	2220      	movs	r2, #32
 80039de:	409a      	lsls	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 808e 	beq.w	8003b06 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8086 	beq.w	8003b06 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fe:	2220      	movs	r2, #32
 8003a00:	409a      	lsls	r2, r3
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b05      	cmp	r3, #5
 8003a10:	d136      	bne.n	8003a80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0216 	bic.w	r2, r2, #22
 8003a20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d103      	bne.n	8003a42 <HAL_DMA_IRQHandler+0x1da>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d007      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0208 	bic.w	r2, r2, #8
 8003a50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a56:	223f      	movs	r2, #63	; 0x3f
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d07d      	beq.n	8003b72 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	4798      	blx	r3
        }
        return;
 8003a7e:	e078      	b.n	8003b72 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01c      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d108      	bne.n	8003aae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d030      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
 8003aac:	e02b      	b.n	8003b06 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d027      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	4798      	blx	r3
 8003abe:	e022      	b.n	8003b06 <HAL_DMA_IRQHandler+0x29e>
 8003ac0:	2000001c 	.word	0x2000001c
 8003ac4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10f      	bne.n	8003af6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0210 	bic.w	r2, r2, #16
 8003ae4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d032      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d022      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2205      	movs	r2, #5
 8003b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0201 	bic.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	3301      	adds	r3, #1
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d307      	bcc.n	8003b4e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f2      	bne.n	8003b32 <HAL_DMA_IRQHandler+0x2ca>
 8003b4c:	e000      	b.n	8003b50 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003b4e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	4798      	blx	r3
 8003b70:	e000      	b.n	8003b74 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003b72:	bf00      	nop
    }
  }
}
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop

08003b7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b40      	cmp	r3, #64	; 0x40
 8003ba8:	d108      	bne.n	8003bbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003bba:	e007      	b.n	8003bcc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	60da      	str	r2, [r3, #12]
}
 8003bcc:	bf00      	nop
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	3b10      	subs	r3, #16
 8003be8:	4a14      	ldr	r2, [pc, #80]	; (8003c3c <DMA_CalcBaseAndBitshift+0x64>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	091b      	lsrs	r3, r3, #4
 8003bf0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bf2:	4a13      	ldr	r2, [pc, #76]	; (8003c40 <DMA_CalcBaseAndBitshift+0x68>)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	d909      	bls.n	8003c1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c0e:	f023 0303 	bic.w	r3, r3, #3
 8003c12:	1d1a      	adds	r2, r3, #4
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	659a      	str	r2, [r3, #88]	; 0x58
 8003c18:	e007      	b.n	8003c2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c22:	f023 0303 	bic.w	r3, r3, #3
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	aaaaaaab 	.word	0xaaaaaaab
 8003c40:	0800bea0 	.word	0x0800bea0

08003c44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d11f      	bne.n	8003c9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d855      	bhi.n	8003d10 <DMA_CheckFifoParam+0xcc>
 8003c64:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <DMA_CheckFifoParam+0x28>)
 8003c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6a:	bf00      	nop
 8003c6c:	08003c7d 	.word	0x08003c7d
 8003c70:	08003c8f 	.word	0x08003c8f
 8003c74:	08003c7d 	.word	0x08003c7d
 8003c78:	08003d11 	.word	0x08003d11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d045      	beq.n	8003d14 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c8c:	e042      	b.n	8003d14 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c96:	d13f      	bne.n	8003d18 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c9c:	e03c      	b.n	8003d18 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca6:	d121      	bne.n	8003cec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d836      	bhi.n	8003d1c <DMA_CheckFifoParam+0xd8>
 8003cae:	a201      	add	r2, pc, #4	; (adr r2, 8003cb4 <DMA_CheckFifoParam+0x70>)
 8003cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb4:	08003cc5 	.word	0x08003cc5
 8003cb8:	08003ccb 	.word	0x08003ccb
 8003cbc:	08003cc5 	.word	0x08003cc5
 8003cc0:	08003cdd 	.word	0x08003cdd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cc8:	e02f      	b.n	8003d2a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d024      	beq.n	8003d20 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cda:	e021      	b.n	8003d20 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ce4:	d11e      	bne.n	8003d24 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cea:	e01b      	b.n	8003d24 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d902      	bls.n	8003cf8 <DMA_CheckFifoParam+0xb4>
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d003      	beq.n	8003cfe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003cf6:	e018      	b.n	8003d2a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8003cfc:	e015      	b.n	8003d2a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00e      	beq.n	8003d28 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d0e:	e00b      	b.n	8003d28 <DMA_CheckFifoParam+0xe4>
      break;
 8003d10:	bf00      	nop
 8003d12:	e00a      	b.n	8003d2a <DMA_CheckFifoParam+0xe6>
      break;
 8003d14:	bf00      	nop
 8003d16:	e008      	b.n	8003d2a <DMA_CheckFifoParam+0xe6>
      break;
 8003d18:	bf00      	nop
 8003d1a:	e006      	b.n	8003d2a <DMA_CheckFifoParam+0xe6>
      break;
 8003d1c:	bf00      	nop
 8003d1e:	e004      	b.n	8003d2a <DMA_CheckFifoParam+0xe6>
      break;
 8003d20:	bf00      	nop
 8003d22:	e002      	b.n	8003d2a <DMA_CheckFifoParam+0xe6>
      break;   
 8003d24:	bf00      	nop
 8003d26:	e000      	b.n	8003d2a <DMA_CheckFifoParam+0xe6>
      break;
 8003d28:	bf00      	nop
    }
  } 
  
  return status; 
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e081      	b.n	8003e4e <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d106      	bne.n	8003d64 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fd fe66 	bl	8001a30 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2224      	movs	r2, #36	; 0x24
 8003d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0201 	bic.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d88:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d98:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d107      	bne.n	8003db2 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dae:	609a      	str	r2, [r3, #8]
 8003db0:	e006      	b.n	8003dc0 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003dbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d104      	bne.n	8003dd2 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6812      	ldr	r2, [r2, #0]
 8003ddc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003de4:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003df4:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691a      	ldr	r2, [r3, #16]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	ea42 0103 	orr.w	r1, r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	021a      	lsls	r2, r3, #8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69d9      	ldr	r1, [r3, #28]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1a      	ldr	r2, [r3, #32]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d138      	bne.n	8003ede <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e032      	b.n	8003ee0 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2224      	movs	r2, #36	; 0x24
 8003e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ea8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6819      	ldr	r1, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0201 	orr.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e000      	b.n	8003ee0 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ede:	2302      	movs	r3, #2
  }
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b089      	sub	sp, #36	; 0x24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	e165      	b.n	80041d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f08:	2201      	movs	r2, #1
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	f040 8154 	bne.w	80041ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d00b      	beq.n	8003f46 <HAL_GPIO_Init+0x5a>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d007      	beq.n	8003f46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f3a:	2b11      	cmp	r3, #17
 8003f3c:	d003      	beq.n	8003f46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b12      	cmp	r3, #18
 8003f44:	d130      	bne.n	8003fa8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	2203      	movs	r2, #3
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43db      	mvns	r3, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	f003 0201 	and.w	r2, r3, #1
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d003      	beq.n	8003fe8 <HAL_GPIO_Init+0xfc>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b12      	cmp	r3, #18
 8003fe6:	d123      	bne.n	8004030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	08da      	lsrs	r2, r3, #3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3208      	adds	r2, #8
 8003ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	220f      	movs	r2, #15
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4013      	ands	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4313      	orrs	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	08da      	lsrs	r2, r3, #3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3208      	adds	r2, #8
 800402a:	69b9      	ldr	r1, [r7, #24]
 800402c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	2203      	movs	r2, #3
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	43db      	mvns	r3, r3
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4013      	ands	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 0203 	and.w	r2, r3, #3
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 80ae 	beq.w	80041ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	4b5c      	ldr	r3, [pc, #368]	; (80041e8 <HAL_GPIO_Init+0x2fc>)
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	4a5b      	ldr	r2, [pc, #364]	; (80041e8 <HAL_GPIO_Init+0x2fc>)
 800407c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004080:	6453      	str	r3, [r2, #68]	; 0x44
 8004082:	4b59      	ldr	r3, [pc, #356]	; (80041e8 <HAL_GPIO_Init+0x2fc>)
 8004084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800408e:	4a57      	ldr	r2, [pc, #348]	; (80041ec <HAL_GPIO_Init+0x300>)
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	089b      	lsrs	r3, r3, #2
 8004094:	3302      	adds	r3, #2
 8004096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800409a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	220f      	movs	r2, #15
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43db      	mvns	r3, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4013      	ands	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a4e      	ldr	r2, [pc, #312]	; (80041f0 <HAL_GPIO_Init+0x304>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d025      	beq.n	8004106 <HAL_GPIO_Init+0x21a>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a4d      	ldr	r2, [pc, #308]	; (80041f4 <HAL_GPIO_Init+0x308>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d01f      	beq.n	8004102 <HAL_GPIO_Init+0x216>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a4c      	ldr	r2, [pc, #304]	; (80041f8 <HAL_GPIO_Init+0x30c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d019      	beq.n	80040fe <HAL_GPIO_Init+0x212>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a4b      	ldr	r2, [pc, #300]	; (80041fc <HAL_GPIO_Init+0x310>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d013      	beq.n	80040fa <HAL_GPIO_Init+0x20e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a4a      	ldr	r2, [pc, #296]	; (8004200 <HAL_GPIO_Init+0x314>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00d      	beq.n	80040f6 <HAL_GPIO_Init+0x20a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a49      	ldr	r2, [pc, #292]	; (8004204 <HAL_GPIO_Init+0x318>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d007      	beq.n	80040f2 <HAL_GPIO_Init+0x206>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a48      	ldr	r2, [pc, #288]	; (8004208 <HAL_GPIO_Init+0x31c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d101      	bne.n	80040ee <HAL_GPIO_Init+0x202>
 80040ea:	2306      	movs	r3, #6
 80040ec:	e00c      	b.n	8004108 <HAL_GPIO_Init+0x21c>
 80040ee:	2307      	movs	r3, #7
 80040f0:	e00a      	b.n	8004108 <HAL_GPIO_Init+0x21c>
 80040f2:	2305      	movs	r3, #5
 80040f4:	e008      	b.n	8004108 <HAL_GPIO_Init+0x21c>
 80040f6:	2304      	movs	r3, #4
 80040f8:	e006      	b.n	8004108 <HAL_GPIO_Init+0x21c>
 80040fa:	2303      	movs	r3, #3
 80040fc:	e004      	b.n	8004108 <HAL_GPIO_Init+0x21c>
 80040fe:	2302      	movs	r3, #2
 8004100:	e002      	b.n	8004108 <HAL_GPIO_Init+0x21c>
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <HAL_GPIO_Init+0x21c>
 8004106:	2300      	movs	r3, #0
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	f002 0203 	and.w	r2, r2, #3
 800410e:	0092      	lsls	r2, r2, #2
 8004110:	4093      	lsls	r3, r2
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4313      	orrs	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004118:	4934      	ldr	r1, [pc, #208]	; (80041ec <HAL_GPIO_Init+0x300>)
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	089b      	lsrs	r3, r3, #2
 800411e:	3302      	adds	r3, #2
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004126:	4b39      	ldr	r3, [pc, #228]	; (800420c <HAL_GPIO_Init+0x320>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	43db      	mvns	r3, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4013      	ands	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800414a:	4a30      	ldr	r2, [pc, #192]	; (800420c <HAL_GPIO_Init+0x320>)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004150:	4b2e      	ldr	r3, [pc, #184]	; (800420c <HAL_GPIO_Init+0x320>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004174:	4a25      	ldr	r2, [pc, #148]	; (800420c <HAL_GPIO_Init+0x320>)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800417a:	4b24      	ldr	r3, [pc, #144]	; (800420c <HAL_GPIO_Init+0x320>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	43db      	mvns	r3, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800419e:	4a1b      	ldr	r2, [pc, #108]	; (800420c <HAL_GPIO_Init+0x320>)
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041a4:	4b19      	ldr	r3, [pc, #100]	; (800420c <HAL_GPIO_Init+0x320>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	43db      	mvns	r3, r3
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4013      	ands	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041c8:	4a10      	ldr	r2, [pc, #64]	; (800420c <HAL_GPIO_Init+0x320>)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	3301      	adds	r3, #1
 80041d2:	61fb      	str	r3, [r7, #28]
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	2b0f      	cmp	r3, #15
 80041d8:	f67f ae96 	bls.w	8003f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041dc:	bf00      	nop
 80041de:	3724      	adds	r7, #36	; 0x24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	40023800 	.word	0x40023800
 80041ec:	40013800 	.word	0x40013800
 80041f0:	40020000 	.word	0x40020000
 80041f4:	40020400 	.word	0x40020400
 80041f8:	40020800 	.word	0x40020800
 80041fc:	40020c00 	.word	0x40020c00
 8004200:	40021000 	.word	0x40021000
 8004204:	40021400 	.word	0x40021400
 8004208:	40021800 	.word	0x40021800
 800420c:	40013c00 	.word	0x40013c00

08004210 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	887b      	ldrh	r3, [r7, #2]
 8004222:	4013      	ands	r3, r2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004228:	2301      	movs	r3, #1
 800422a:	73fb      	strb	r3, [r7, #15]
 800422c:	e001      	b.n	8004232 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800422e:	2300      	movs	r3, #0
 8004230:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004232:	7bfb      	ldrb	r3, [r7, #15]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	807b      	strh	r3, [r7, #2]
 800424c:	4613      	mov	r3, r2
 800424e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004250:	787b      	ldrb	r3, [r7, #1]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004256:	887a      	ldrh	r2, [r7, #2]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800425c:	e003      	b.n	8004266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800425e:	887b      	ldrh	r3, [r7, #2]
 8004260:	041a      	lsls	r2, r3, #16
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	619a      	str	r2, [r3, #24]
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
	...

08004274 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af02      	add	r7, sp, #8
 800427a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800427c:	f7fe fa36 	bl	80026ec <HAL_GetTick>
 8004280:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e069      	b.n	8004360 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10b      	bne.n	80042b0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7fd fc0d 	bl	8001ac0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80042a6:	f241 3188 	movw	r1, #5000	; 0x1388
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f85e 	bl	800436c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	3b01      	subs	r3, #1
 80042c0:	021a      	lsls	r2, r3, #8
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	2120      	movs	r1, #32
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f856 	bl	8004388 <QSPI_WaitFlagStateUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80042e0:	7afb      	ldrb	r3, [r7, #11]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d137      	bne.n	8004356 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042f0:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6852      	ldr	r2, [r2, #4]
 80042f8:	0611      	lsls	r1, r2, #24
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68d2      	ldr	r2, [r2, #12]
 80042fe:	4311      	orrs	r1, r2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	69d2      	ldr	r2, [r2, #28]
 8004304:	4311      	orrs	r1, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6a12      	ldr	r2, [r2, #32]
 800430a:	4311      	orrs	r1, r2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	430b      	orrs	r3, r1
 8004312:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	4b13      	ldr	r3, [pc, #76]	; (8004368 <HAL_QSPI_Init+0xf4>)
 800431c:	4013      	ands	r3, r2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6912      	ldr	r2, [r2, #16]
 8004322:	0411      	lsls	r1, r2, #16
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6952      	ldr	r2, [r2, #20]
 8004328:	4311      	orrs	r1, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6992      	ldr	r2, [r2, #24]
 800432e:	4311      	orrs	r1, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	430b      	orrs	r3, r1
 8004336:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800435e:	7afb      	ldrb	r3, [r7, #11]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	ffe0f8fe 	.word	0xffe0f8fe

0800436c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	4613      	mov	r3, r2
 8004396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004398:	e01a      	b.n	80043d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d016      	beq.n	80043d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a2:	f7fe f9a3 	bl	80026ec <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d302      	bcc.n	80043b8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10b      	bne.n	80043d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2204      	movs	r2, #4
 80043bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	f043 0201 	orr.w	r2, r3, #1
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e00e      	b.n	80043ee <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	4013      	ands	r3, r2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	bf14      	ite	ne
 80043de:	2301      	movne	r3, #1
 80043e0:	2300      	moveq	r3, #0
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d1d6      	bne.n	800439a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0cc      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800440c:	4b68      	ldr	r3, [pc, #416]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d90c      	bls.n	8004434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b65      	ldr	r3, [pc, #404]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004422:	4b63      	ldr	r3, [pc, #396]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 030f 	and.w	r3, r3, #15
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0b8      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d020      	beq.n	8004482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800444c:	4b59      	ldr	r3, [pc, #356]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	4a58      	ldr	r2, [pc, #352]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004456:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004464:	4b53      	ldr	r3, [pc, #332]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	4a52      	ldr	r2, [pc, #328]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800446e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004470:	4b50      	ldr	r3, [pc, #320]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	494d      	ldr	r1, [pc, #308]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d044      	beq.n	8004518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d107      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004496:	4b47      	ldr	r3, [pc, #284]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d119      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e07f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d003      	beq.n	80044b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d107      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b6:	4b3f      	ldr	r3, [pc, #252]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e06f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c6:	4b3b      	ldr	r3, [pc, #236]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e067      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044d6:	4b37      	ldr	r3, [pc, #220]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f023 0203 	bic.w	r2, r3, #3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4934      	ldr	r1, [pc, #208]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044e8:	f7fe f900 	bl	80026ec <HAL_GetTick>
 80044ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ee:	e00a      	b.n	8004506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f0:	f7fe f8fc 	bl	80026ec <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e04f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004506:	4b2b      	ldr	r3, [pc, #172]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 020c 	and.w	r2, r3, #12
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	429a      	cmp	r2, r3
 8004516:	d1eb      	bne.n	80044f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004518:	4b25      	ldr	r3, [pc, #148]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 030f 	and.w	r3, r3, #15
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d20c      	bcs.n	8004540 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004526:	4b22      	ldr	r3, [pc, #136]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452e:	4b20      	ldr	r3, [pc, #128]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d001      	beq.n	8004540 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e032      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800454c:	4b19      	ldr	r3, [pc, #100]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4916      	ldr	r1, [pc, #88]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	4313      	orrs	r3, r2
 800455c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800456a:	4b12      	ldr	r3, [pc, #72]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	490e      	ldr	r1, [pc, #56]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	4313      	orrs	r3, r2
 800457c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800457e:	f000 f821 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 8004582:	4601      	mov	r1, r0
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	4a0a      	ldr	r2, [pc, #40]	; (80045b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004590:	5cd3      	ldrb	r3, [r2, r3]
 8004592:	fa21 f303 	lsr.w	r3, r1, r3
 8004596:	4a09      	ldr	r2, [pc, #36]	; (80045bc <HAL_RCC_ClockConfig+0x1c4>)
 8004598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800459a:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <HAL_RCC_ClockConfig+0x1c8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fe f860 	bl	8002664 <HAL_InitTick>

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40023c00 	.word	0x40023c00
 80045b4:	40023800 	.word	0x40023800
 80045b8:	0800be88 	.word	0x0800be88
 80045bc:	2000001c 	.word	0x2000001c
 80045c0:	20000020 	.word	0x20000020

080045c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	607b      	str	r3, [r7, #4]
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	2300      	movs	r3, #0
 80045d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045da:	4b50      	ldr	r3, [pc, #320]	; (800471c <HAL_RCC_GetSysClockFreq+0x158>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 030c 	and.w	r3, r3, #12
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d007      	beq.n	80045f6 <HAL_RCC_GetSysClockFreq+0x32>
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d008      	beq.n	80045fc <HAL_RCC_GetSysClockFreq+0x38>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f040 808d 	bne.w	800470a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045f0:	4b4b      	ldr	r3, [pc, #300]	; (8004720 <HAL_RCC_GetSysClockFreq+0x15c>)
 80045f2:	60bb      	str	r3, [r7, #8]
       break;
 80045f4:	e08c      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045f6:	4b4b      	ldr	r3, [pc, #300]	; (8004724 <HAL_RCC_GetSysClockFreq+0x160>)
 80045f8:	60bb      	str	r3, [r7, #8]
      break;
 80045fa:	e089      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045fc:	4b47      	ldr	r3, [pc, #284]	; (800471c <HAL_RCC_GetSysClockFreq+0x158>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004604:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004606:	4b45      	ldr	r3, [pc, #276]	; (800471c <HAL_RCC_GetSysClockFreq+0x158>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d023      	beq.n	800465a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004612:	4b42      	ldr	r3, [pc, #264]	; (800471c <HAL_RCC_GetSysClockFreq+0x158>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	099b      	lsrs	r3, r3, #6
 8004618:	f04f 0400 	mov.w	r4, #0
 800461c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	ea03 0501 	and.w	r5, r3, r1
 8004628:	ea04 0602 	and.w	r6, r4, r2
 800462c:	4a3d      	ldr	r2, [pc, #244]	; (8004724 <HAL_RCC_GetSysClockFreq+0x160>)
 800462e:	fb02 f106 	mul.w	r1, r2, r6
 8004632:	2200      	movs	r2, #0
 8004634:	fb02 f205 	mul.w	r2, r2, r5
 8004638:	440a      	add	r2, r1
 800463a:	493a      	ldr	r1, [pc, #232]	; (8004724 <HAL_RCC_GetSysClockFreq+0x160>)
 800463c:	fba5 0101 	umull	r0, r1, r5, r1
 8004640:	1853      	adds	r3, r2, r1
 8004642:	4619      	mov	r1, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f04f 0400 	mov.w	r4, #0
 800464a:	461a      	mov	r2, r3
 800464c:	4623      	mov	r3, r4
 800464e:	f7fb fe37 	bl	80002c0 <__aeabi_uldivmod>
 8004652:	4603      	mov	r3, r0
 8004654:	460c      	mov	r4, r1
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	e049      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800465a:	4b30      	ldr	r3, [pc, #192]	; (800471c <HAL_RCC_GetSysClockFreq+0x158>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	099b      	lsrs	r3, r3, #6
 8004660:	f04f 0400 	mov.w	r4, #0
 8004664:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	ea03 0501 	and.w	r5, r3, r1
 8004670:	ea04 0602 	and.w	r6, r4, r2
 8004674:	4629      	mov	r1, r5
 8004676:	4632      	mov	r2, r6
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	f04f 0400 	mov.w	r4, #0
 8004680:	0154      	lsls	r4, r2, #5
 8004682:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004686:	014b      	lsls	r3, r1, #5
 8004688:	4619      	mov	r1, r3
 800468a:	4622      	mov	r2, r4
 800468c:	1b49      	subs	r1, r1, r5
 800468e:	eb62 0206 	sbc.w	r2, r2, r6
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	f04f 0400 	mov.w	r4, #0
 800469a:	0194      	lsls	r4, r2, #6
 800469c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80046a0:	018b      	lsls	r3, r1, #6
 80046a2:	1a5b      	subs	r3, r3, r1
 80046a4:	eb64 0402 	sbc.w	r4, r4, r2
 80046a8:	f04f 0100 	mov.w	r1, #0
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	00e2      	lsls	r2, r4, #3
 80046b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046b6:	00d9      	lsls	r1, r3, #3
 80046b8:	460b      	mov	r3, r1
 80046ba:	4614      	mov	r4, r2
 80046bc:	195b      	adds	r3, r3, r5
 80046be:	eb44 0406 	adc.w	r4, r4, r6
 80046c2:	f04f 0100 	mov.w	r1, #0
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	02a2      	lsls	r2, r4, #10
 80046cc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80046d0:	0299      	lsls	r1, r3, #10
 80046d2:	460b      	mov	r3, r1
 80046d4:	4614      	mov	r4, r2
 80046d6:	4618      	mov	r0, r3
 80046d8:	4621      	mov	r1, r4
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f04f 0400 	mov.w	r4, #0
 80046e0:	461a      	mov	r2, r3
 80046e2:	4623      	mov	r3, r4
 80046e4:	f7fb fdec 	bl	80002c0 <__aeabi_uldivmod>
 80046e8:	4603      	mov	r3, r0
 80046ea:	460c      	mov	r4, r1
 80046ec:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046ee:	4b0b      	ldr	r3, [pc, #44]	; (800471c <HAL_RCC_GetSysClockFreq+0x158>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	0c1b      	lsrs	r3, r3, #16
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	3301      	adds	r3, #1
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	fbb2 f3f3 	udiv	r3, r2, r3
 8004706:	60bb      	str	r3, [r7, #8]
      break;
 8004708:	e002      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800470a:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_RCC_GetSysClockFreq+0x15c>)
 800470c:	60bb      	str	r3, [r7, #8]
      break;
 800470e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004710:	68bb      	ldr	r3, [r7, #8]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800471a:	bf00      	nop
 800471c:	40023800 	.word	0x40023800
 8004720:	00f42400 	.word	0x00f42400
 8004724:	017d7840 	.word	0x017d7840

08004728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800472c:	4b03      	ldr	r3, [pc, #12]	; (800473c <HAL_RCC_GetHCLKFreq+0x14>)
 800472e:	681b      	ldr	r3, [r3, #0]
}
 8004730:	4618      	mov	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	2000001c 	.word	0x2000001c

08004740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004744:	f7ff fff0 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004748:	4601      	mov	r1, r0
 800474a:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	0a9b      	lsrs	r3, r3, #10
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	4a03      	ldr	r2, [pc, #12]	; (8004764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004756:	5cd3      	ldrb	r3, [r2, r3]
 8004758:	fa21 f303 	lsr.w	r3, r1, r3
}
 800475c:	4618      	mov	r0, r3
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40023800 	.word	0x40023800
 8004764:	0800be98 	.word	0x0800be98

08004768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800476c:	f7ff ffdc 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004770:	4601      	mov	r1, r0
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	0b5b      	lsrs	r3, r3, #13
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	4a03      	ldr	r2, [pc, #12]	; (800478c <HAL_RCC_GetPCLK2Freq+0x24>)
 800477e:	5cd3      	ldrb	r3, [r2, r3]
 8004780:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004784:	4618      	mov	r0, r3
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40023800 	.word	0x40023800
 800478c:	0800be98 	.word	0x0800be98

08004790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d010      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80047b4:	4b7a      	ldr	r3, [pc, #488]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80047b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ba:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	4977      	ldr	r1, [pc, #476]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80047d2:	2301      	movs	r3, #1
 80047d4:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d010      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80047e2:	4b6f      	ldr	r3, [pc, #444]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80047e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047e8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	496b      	ldr	r1, [pc, #428]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8004800:	2301      	movs	r3, #1
 8004802:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d022      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8004810:	4b63      	ldr	r3, [pc, #396]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004816:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481e:	4960      	ldr	r1, [pc, #384]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 800482e:	2301      	movs	r3, #1
 8004830:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004836:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800483a:	d10c      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800483c:	4b58      	ldr	r3, [pc, #352]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800483e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004842:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	3b01      	subs	r3, #1
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	4954      	ldr	r1, [pc, #336]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d022      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8004862:	4b4f      	ldr	r3, [pc, #316]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004868:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004870:	494b      	ldr	r1, [pc, #300]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004880:	2301      	movs	r3, #1
 8004882:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004888:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800488c:	d10c      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800488e:	4b44      	ldr	r3, [pc, #272]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004894:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	3b01      	subs	r3, #1
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	493f      	ldr	r1, [pc, #252]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 808a 	beq.w	80049ca <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	4b39      	ldr	r3, [pc, #228]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	4a38      	ldr	r2, [pc, #224]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80048c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c4:	6413      	str	r3, [r2, #64]	; 0x40
 80048c6:	4b36      	ldr	r3, [pc, #216]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80048d2:	4b34      	ldr	r3, [pc, #208]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a33      	ldr	r2, [pc, #204]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80048d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048de:	f7fd ff05 	bl	80026ec <HAL_GetTick>
 80048e2:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80048e4:	e008      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80048e6:	f7fd ff01 	bl	80026ec <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e1d1      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80048f8:	4b2a      	ldr	r3, [pc, #168]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f0      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004904:	4b26      	ldr	r3, [pc, #152]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800490c:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d02f      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	429a      	cmp	r2, r3
 8004920:	d028      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004922:	4b1f      	ldr	r3, [pc, #124]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800492a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800492c:	4b1e      	ldr	r3, [pc, #120]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800492e:	2201      	movs	r2, #1
 8004930:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004932:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004938:	4a19      	ldr	r2, [pc, #100]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800493e:	4b18      	ldr	r3, [pc, #96]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b01      	cmp	r3, #1
 8004948:	d114      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800494a:	f7fd fecf 	bl	80026ec <HAL_GetTick>
 800494e:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004950:	e00a      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004952:	f7fd fecb 	bl	80026ec <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004960:	4293      	cmp	r3, r2
 8004962:	d901      	bls.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e199      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004968:	4b0d      	ldr	r3, [pc, #52]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0ee      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004980:	d114      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004982:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004996:	4902      	ldr	r1, [pc, #8]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004998:	4313      	orrs	r3, r2
 800499a:	608b      	str	r3, [r1, #8]
 800499c:	e00c      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800499e:	bf00      	nop
 80049a0:	40023800 	.word	0x40023800
 80049a4:	40007000 	.word	0x40007000
 80049a8:	42470e40 	.word	0x42470e40
 80049ac:	4b89      	ldr	r3, [pc, #548]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	4a88      	ldr	r2, [pc, #544]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80049b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80049b6:	6093      	str	r3, [r2, #8]
 80049b8:	4b86      	ldr	r3, [pc, #536]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80049ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c4:	4983      	ldr	r1, [pc, #524]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d004      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80049dc:	4b7e      	ldr	r3, [pc, #504]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80049de:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80049ec:	4b79      	ldr	r3, [pc, #484]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80049ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	4976      	ldr	r1, [pc, #472]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d011      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a0e:	4b71      	ldr	r3, [pc, #452]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a14:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1c:	496d      	ldr	r1, [pc, #436]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004a3e:	4b65      	ldr	r3, [pc, #404]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a44:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	4961      	ldr	r1, [pc, #388]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d004      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b80      	cmp	r3, #128	; 0x80
 8004a60:	f040 80c6 	bne.w	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a64:	4b5d      	ldr	r3, [pc, #372]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a6a:	f7fd fe3f 	bl	80026ec <HAL_GetTick>
 8004a6e:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a70:	e008      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a72:	f7fd fe3b 	bl	80026ec <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e10b      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a84:	4b53      	ldr	r3, [pc, #332]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1f0      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004a90:	4a53      	ldr	r2, [pc, #332]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a96:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d023      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d019      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d004      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad4:	d00e      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d019      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d115      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004af2:	d110      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	019b      	lsls	r3, r3, #6
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	061b      	lsls	r3, r3, #24
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	071b      	lsls	r3, r3, #28
 8004b0e:	4931      	ldr	r1, [pc, #196]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d026      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d122      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b3e:	4b25      	ldr	r3, [pc, #148]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b44:	0e1b      	lsrs	r3, r3, #24
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	019b      	lsls	r3, r3, #6
 8004b56:	431a      	orrs	r2, r3
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	061b      	lsls	r3, r3, #24
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	071b      	lsls	r3, r3, #28
 8004b64:	491b      	ldr	r1, [pc, #108]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8004b6c:	4b19      	ldr	r3, [pc, #100]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b72:	f023 021f 	bic.w	r2, r3, #31
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	4915      	ldr	r1, [pc, #84]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d010      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	019b      	lsls	r3, r3, #6
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	061b      	lsls	r3, r3, #24
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	071b      	lsls	r3, r3, #28
 8004baa:	490a      	ldr	r1, [pc, #40]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bb8:	f7fd fd98 	bl	80026ec <HAL_GetTick>
 8004bbc:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bbe:	e011      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bc0:	f7fd fd94 	bl	80026ec <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d90a      	bls.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e064      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004bd2:	bf00      	nop
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	424711e0 	.word	0x424711e0
 8004bdc:	42470068 	.word	0x42470068
 8004be0:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004be4:	4b2f      	ldr	r3, [pc, #188]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0e7      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bfc:	4b29      	ldr	r3, [pc, #164]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0a:	4926      	ldr	r1, [pc, #152]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c1e:	4b21      	ldr	r3, [pc, #132]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c24:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	491d      	ldr	r1, [pc, #116]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004c40:	4b18      	ldr	r3, [pc, #96]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4e:	4915      	ldr	r1, [pc, #84]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8004c62:	4b10      	ldr	r3, [pc, #64]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c68:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	490c      	ldr	r1, [pc, #48]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c84:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c8a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	4904      	ldr	r1, [pc, #16]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3720      	adds	r7, #32
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40023800 	.word	0x40023800

08004ca8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d075      	beq.n	8004dac <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004cc0:	4ba2      	ldr	r3, [pc, #648]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 030c 	and.w	r3, r3, #12
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d00c      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ccc:	4b9f      	ldr	r3, [pc, #636]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d112      	bne.n	8004cfe <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cd8:	4b9c      	ldr	r3, [pc, #624]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ce4:	d10b      	bne.n	8004cfe <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce6:	4b99      	ldr	r3, [pc, #612]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d05b      	beq.n	8004daa <HAL_RCC_OscConfig+0x102>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d157      	bne.n	8004daa <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e20b      	b.n	8005116 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d06:	d106      	bne.n	8004d16 <HAL_RCC_OscConfig+0x6e>
 8004d08:	4b90      	ldr	r3, [pc, #576]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a8f      	ldr	r2, [pc, #572]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	e01d      	b.n	8004d52 <HAL_RCC_OscConfig+0xaa>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d1e:	d10c      	bne.n	8004d3a <HAL_RCC_OscConfig+0x92>
 8004d20:	4b8a      	ldr	r3, [pc, #552]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a89      	ldr	r2, [pc, #548]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004d26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	4b87      	ldr	r3, [pc, #540]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a86      	ldr	r2, [pc, #536]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	e00b      	b.n	8004d52 <HAL_RCC_OscConfig+0xaa>
 8004d3a:	4b84      	ldr	r3, [pc, #528]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a83      	ldr	r2, [pc, #524]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	4b81      	ldr	r3, [pc, #516]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a80      	ldr	r2, [pc, #512]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d50:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d013      	beq.n	8004d82 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5a:	f7fd fcc7 	bl	80026ec <HAL_GetTick>
 8004d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d62:	f7fd fcc3 	bl	80026ec <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b64      	cmp	r3, #100	; 0x64
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e1d0      	b.n	8005116 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d74:	4b75      	ldr	r3, [pc, #468]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f0      	beq.n	8004d62 <HAL_RCC_OscConfig+0xba>
 8004d80:	e014      	b.n	8004dac <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d82:	f7fd fcb3 	bl	80026ec <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d8a:	f7fd fcaf 	bl	80026ec <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b64      	cmp	r3, #100	; 0x64
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e1bc      	b.n	8005116 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d9c:	4b6b      	ldr	r3, [pc, #428]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1f0      	bne.n	8004d8a <HAL_RCC_OscConfig+0xe2>
 8004da8:	e000      	b.n	8004dac <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004daa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d063      	beq.n	8004e80 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004db8:	4b64      	ldr	r3, [pc, #400]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 030c 	and.w	r3, r3, #12
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00b      	beq.n	8004ddc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dc4:	4b61      	ldr	r3, [pc, #388]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d11c      	bne.n	8004e0a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dd0:	4b5e      	ldr	r3, [pc, #376]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d116      	bne.n	8004e0a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ddc:	4b5b      	ldr	r3, [pc, #364]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_RCC_OscConfig+0x14c>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e190      	b.n	8005116 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df4:	4b55      	ldr	r3, [pc, #340]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	4952      	ldr	r1, [pc, #328]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e08:	e03a      	b.n	8004e80 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d020      	beq.n	8004e54 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e12:	4b4f      	ldr	r3, [pc, #316]	; (8004f50 <HAL_RCC_OscConfig+0x2a8>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7fd fc68 	bl	80026ec <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e20:	f7fd fc64 	bl	80026ec <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e171      	b.n	8005116 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e32:	4b46      	ldr	r3, [pc, #280]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0f0      	beq.n	8004e20 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e3e:	4b43      	ldr	r3, [pc, #268]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	493f      	ldr	r1, [pc, #252]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	600b      	str	r3, [r1, #0]
 8004e52:	e015      	b.n	8004e80 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e54:	4b3e      	ldr	r3, [pc, #248]	; (8004f50 <HAL_RCC_OscConfig+0x2a8>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5a:	f7fd fc47 	bl	80026ec <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e62:	f7fd fc43 	bl	80026ec <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e150      	b.n	8005116 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e74:	4b35      	ldr	r3, [pc, #212]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1f0      	bne.n	8004e62 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0308 	and.w	r3, r3, #8
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d030      	beq.n	8004eee <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d016      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e94:	4b2f      	ldr	r3, [pc, #188]	; (8004f54 <HAL_RCC_OscConfig+0x2ac>)
 8004e96:	2201      	movs	r2, #1
 8004e98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9a:	f7fd fc27 	bl	80026ec <HAL_GetTick>
 8004e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ea2:	f7fd fc23 	bl	80026ec <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e130      	b.n	8005116 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eb4:	4b25      	ldr	r3, [pc, #148]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0f0      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x1fa>
 8004ec0:	e015      	b.n	8004eee <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ec2:	4b24      	ldr	r3, [pc, #144]	; (8004f54 <HAL_RCC_OscConfig+0x2ac>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec8:	f7fd fc10 	bl	80026ec <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ed0:	f7fd fc0c 	bl	80026ec <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e119      	b.n	8005116 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee2:	4b1a      	ldr	r3, [pc, #104]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 809f 	beq.w	800503a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004efc:	2300      	movs	r3, #0
 8004efe:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f00:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10f      	bne.n	8004f2c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	4b0e      	ldr	r3, [pc, #56]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	4a0d      	ldr	r2, [pc, #52]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8004f1c:	4b0b      	ldr	r3, [pc, #44]	; (8004f4c <HAL_RCC_OscConfig+0x2a4>)
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2c:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <HAL_RCC_OscConfig+0x2b0>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d120      	bne.n	8004f7a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f38:	4b07      	ldr	r3, [pc, #28]	; (8004f58 <HAL_RCC_OscConfig+0x2b0>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a06      	ldr	r2, [pc, #24]	; (8004f58 <HAL_RCC_OscConfig+0x2b0>)
 8004f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f44:	f7fd fbd2 	bl	80026ec <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f4a:	e010      	b.n	8004f6e <HAL_RCC_OscConfig+0x2c6>
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	42470000 	.word	0x42470000
 8004f54:	42470e80 	.word	0x42470e80
 8004f58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f5c:	f7fd fbc6 	bl	80026ec <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e0d3      	b.n	8005116 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f6e:	4b6c      	ldr	r3, [pc, #432]	; (8005120 <HAL_RCC_OscConfig+0x478>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0f0      	beq.n	8004f5c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d106      	bne.n	8004f90 <HAL_RCC_OscConfig+0x2e8>
 8004f82:	4b68      	ldr	r3, [pc, #416]	; (8005124 <HAL_RCC_OscConfig+0x47c>)
 8004f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f86:	4a67      	ldr	r2, [pc, #412]	; (8005124 <HAL_RCC_OscConfig+0x47c>)
 8004f88:	f043 0301 	orr.w	r3, r3, #1
 8004f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8e:	e01c      	b.n	8004fca <HAL_RCC_OscConfig+0x322>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b05      	cmp	r3, #5
 8004f96:	d10c      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x30a>
 8004f98:	4b62      	ldr	r3, [pc, #392]	; (8005124 <HAL_RCC_OscConfig+0x47c>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	4a61      	ldr	r2, [pc, #388]	; (8005124 <HAL_RCC_OscConfig+0x47c>)
 8004f9e:	f043 0304 	orr.w	r3, r3, #4
 8004fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa4:	4b5f      	ldr	r3, [pc, #380]	; (8005124 <HAL_RCC_OscConfig+0x47c>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa8:	4a5e      	ldr	r2, [pc, #376]	; (8005124 <HAL_RCC_OscConfig+0x47c>)
 8004faa:	f043 0301 	orr.w	r3, r3, #1
 8004fae:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb0:	e00b      	b.n	8004fca <HAL_RCC_OscConfig+0x322>
 8004fb2:	4b5c      	ldr	r3, [pc, #368]	; (8005124 <HAL_RCC_OscConfig+0x47c>)
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb6:	4a5b      	ldr	r2, [pc, #364]	; (8005124 <HAL_RCC_OscConfig+0x47c>)
 8004fb8:	f023 0301 	bic.w	r3, r3, #1
 8004fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8004fbe:	4b59      	ldr	r3, [pc, #356]	; (8005124 <HAL_RCC_OscConfig+0x47c>)
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc2:	4a58      	ldr	r2, [pc, #352]	; (8005124 <HAL_RCC_OscConfig+0x47c>)
 8004fc4:	f023 0304 	bic.w	r3, r3, #4
 8004fc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d015      	beq.n	8004ffe <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd2:	f7fd fb8b 	bl	80026ec <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd8:	e00a      	b.n	8004ff0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fda:	f7fd fb87 	bl	80026ec <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e092      	b.n	8005116 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff0:	4b4c      	ldr	r3, [pc, #304]	; (8005124 <HAL_RCC_OscConfig+0x47c>)
 8004ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0ee      	beq.n	8004fda <HAL_RCC_OscConfig+0x332>
 8004ffc:	e014      	b.n	8005028 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffe:	f7fd fb75 	bl	80026ec <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005004:	e00a      	b.n	800501c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005006:	f7fd fb71 	bl	80026ec <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	f241 3288 	movw	r2, #5000	; 0x1388
 8005014:	4293      	cmp	r3, r2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e07c      	b.n	8005116 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800501c:	4b41      	ldr	r3, [pc, #260]	; (8005124 <HAL_RCC_OscConfig+0x47c>)
 800501e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1ee      	bne.n	8005006 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005028:	7dfb      	ldrb	r3, [r7, #23]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d105      	bne.n	800503a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800502e:	4b3d      	ldr	r3, [pc, #244]	; (8005124 <HAL_RCC_OscConfig+0x47c>)
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	4a3c      	ldr	r2, [pc, #240]	; (8005124 <HAL_RCC_OscConfig+0x47c>)
 8005034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005038:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d068      	beq.n	8005114 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005042:	4b38      	ldr	r3, [pc, #224]	; (8005124 <HAL_RCC_OscConfig+0x47c>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 030c 	and.w	r3, r3, #12
 800504a:	2b08      	cmp	r3, #8
 800504c:	d060      	beq.n	8005110 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d145      	bne.n	80050e2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005056:	4b34      	ldr	r3, [pc, #208]	; (8005128 <HAL_RCC_OscConfig+0x480>)
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fd fb46 	bl	80026ec <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005064:	f7fd fb42 	bl	80026ec <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e04f      	b.n	8005116 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005076:	4b2b      	ldr	r3, [pc, #172]	; (8005124 <HAL_RCC_OscConfig+0x47c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69da      	ldr	r2, [r3, #28]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	019b      	lsls	r3, r3, #6
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005098:	085b      	lsrs	r3, r3, #1
 800509a:	3b01      	subs	r3, #1
 800509c:	041b      	lsls	r3, r3, #16
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	061b      	lsls	r3, r3, #24
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ac:	071b      	lsls	r3, r3, #28
 80050ae:	491d      	ldr	r1, [pc, #116]	; (8005124 <HAL_RCC_OscConfig+0x47c>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050b4:	4b1c      	ldr	r3, [pc, #112]	; (8005128 <HAL_RCC_OscConfig+0x480>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ba:	f7fd fb17 	bl	80026ec <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050c2:	f7fd fb13 	bl	80026ec <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e020      	b.n	8005116 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d4:	4b13      	ldr	r3, [pc, #76]	; (8005124 <HAL_RCC_OscConfig+0x47c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0f0      	beq.n	80050c2 <HAL_RCC_OscConfig+0x41a>
 80050e0:	e018      	b.n	8005114 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050e2:	4b11      	ldr	r3, [pc, #68]	; (8005128 <HAL_RCC_OscConfig+0x480>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e8:	f7fd fb00 	bl	80026ec <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050f0:	f7fd fafc 	bl	80026ec <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e009      	b.n	8005116 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005102:	4b08      	ldr	r3, [pc, #32]	; (8005124 <HAL_RCC_OscConfig+0x47c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f0      	bne.n	80050f0 <HAL_RCC_OscConfig+0x448>
 800510e:	e001      	b.n	8005114 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e000      	b.n	8005116 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	40007000 	.word	0x40007000
 8005124:	40023800 	.word	0x40023800
 8005128:	42470060 	.word	0x42470060

0800512c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e022      	b.n	8005184 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d105      	bne.n	8005156 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7fc fd7f 	bl	8001c54 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2203      	movs	r2, #3
 800515a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f814 	bl	800518c <HAL_SD_InitCard>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e00a      	b.n	8005184 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800518c:	b5b0      	push	{r4, r5, r7, lr}
 800518e:	b08e      	sub	sp, #56	; 0x38
 8005190:	af04      	add	r7, sp, #16
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005194:	2300      	movs	r3, #0
 8005196:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800519c:	2300      	movs	r3, #0
 800519e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80051a8:	2376      	movs	r3, #118	; 0x76
 80051aa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681d      	ldr	r5, [r3, #0]
 80051b0:	466c      	mov	r4, sp
 80051b2:	f107 0314 	add.w	r3, r7, #20
 80051b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80051ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80051be:	f107 0308 	add.w	r3, r7, #8
 80051c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051c4:	4628      	mov	r0, r5
 80051c6:	f001 ff2d 	bl	8007024 <SDIO_Init>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80051d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e031      	b.n	8005240 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80051dc:	4b1a      	ldr	r3, [pc, #104]	; (8005248 <HAL_SD_InitCard+0xbc>)
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f001 ff65 	bl	80070b6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80051ec:	4b16      	ldr	r3, [pc, #88]	; (8005248 <HAL_SD_InitCard+0xbc>)
 80051ee:	2201      	movs	r2, #1
 80051f0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fe80 	bl	8005ef8 <SD_PowerON>
 80051f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00b      	beq.n	8005218 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e013      	b.n	8005240 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fd9f 	bl	8005d5c <SD_InitCard>
 800521e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00b      	beq.n	800523e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3728      	adds	r7, #40	; 0x28
 8005244:	46bd      	mov	sp, r7
 8005246:	bdb0      	pop	{r4, r5, r7, pc}
 8005248:	422580a0 	.word	0x422580a0

0800524c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b092      	sub	sp, #72	; 0x48
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800525a:	f7fd fa47 	bl	80026ec <HAL_GetTick>
 800525e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d107      	bne.n	800527e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e1d7      	b.n	800562e <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b01      	cmp	r3, #1
 8005288:	f040 81ca 	bne.w	8005620 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	441a      	add	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529c:	429a      	cmp	r2, r3
 800529e:	d907      	bls.n	80052b0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e1be      	b.n	800562e <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2203      	movs	r2, #3
 80052b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2200      	movs	r2, #0
 80052be:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d002      	beq.n	80052ce <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80052c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ca:	025b      	lsls	r3, r3, #9
 80052cc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052d6:	4618      	mov	r0, r3
 80052d8:	f001 ff80 	bl	80071dc <SDMMC_CmdBlockLength>
 80052dc:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80052de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00f      	beq.n	8005304 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a9a      	ldr	r2, [pc, #616]	; (8005554 <HAL_SD_ReadBlocks+0x308>)
 80052ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052f2:	431a      	orrs	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e194      	b.n	800562e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005304:	f04f 33ff 	mov.w	r3, #4294967295
 8005308:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	025b      	lsls	r3, r3, #9
 800530e:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005310:	2390      	movs	r3, #144	; 0x90
 8005312:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005314:	2302      	movs	r3, #2
 8005316:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005318:	2300      	movs	r3, #0
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800531c:	2301      	movs	r3, #1
 800531e:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f107 0214 	add.w	r2, r7, #20
 8005328:	4611      	mov	r1, r2
 800532a:	4618      	mov	r0, r3
 800532c:	f001 ff2a 	bl	8007184 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d90a      	bls.n	800534c <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2202      	movs	r2, #2
 800533a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005342:	4618      	mov	r0, r3
 8005344:	f001 ff8e 	bl	8007264 <SDMMC_CmdReadMultiBlock>
 8005348:	6478      	str	r0, [r7, #68]	; 0x44
 800534a:	e009      	b.n	8005360 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2201      	movs	r2, #1
 8005350:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005358:	4618      	mov	r0, r3
 800535a:	f001 ff61 	bl	8007220 <SDMMC_CmdReadSingleBlock>
 800535e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005362:	2b00      	cmp	r3, #0
 8005364:	d012      	beq.n	800538c <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a7a      	ldr	r2, [pc, #488]	; (8005554 <HAL_SD_ReadBlocks+0x308>)
 800536c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005374:	431a      	orrs	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e150      	b.n	800562e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005390:	e061      	b.n	8005456 <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d03c      	beq.n	800541a <HAL_SD_ReadBlocks+0x1ce>
 80053a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d039      	beq.n	800541a <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80053a6:	2300      	movs	r3, #0
 80053a8:	643b      	str	r3, [r7, #64]	; 0x40
 80053aa:	e033      	b.n	8005414 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f001 fe62 	bl	800707a <SDIO_ReadFIFO>
 80053b6:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80053b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053be:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80053c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c2:	3301      	adds	r3, #1
 80053c4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80053c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c8:	3b01      	subs	r3, #1
 80053ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80053cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ce:	0a1b      	lsrs	r3, r3, #8
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80053d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d8:	3301      	adds	r3, #1
 80053da:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80053dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053de:	3b01      	subs	r3, #1
 80053e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80053e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e4:	0c1b      	lsrs	r3, r3, #16
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ea:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80053ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ee:	3301      	adds	r3, #1
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80053f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f4:	3b01      	subs	r3, #1
 80053f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80053f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fa:	0e1b      	lsrs	r3, r3, #24
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005400:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005404:	3301      	adds	r3, #1
 8005406:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800540a:	3b01      	subs	r3, #1
 800540c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800540e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005410:	3301      	adds	r3, #1
 8005412:	643b      	str	r3, [r7, #64]	; 0x40
 8005414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005416:	2b07      	cmp	r3, #7
 8005418:	d9c8      	bls.n	80053ac <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800541a:	f7fd f967 	bl	80026ec <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005426:	429a      	cmp	r2, r3
 8005428:	d902      	bls.n	8005430 <HAL_SD_ReadBlocks+0x1e4>
 800542a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800542c:	2b00      	cmp	r3, #0
 800542e:	d112      	bne.n	8005456 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a47      	ldr	r2, [pc, #284]	; (8005554 <HAL_SD_ReadBlocks+0x308>)
 8005436:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e0eb      	b.n	800562e <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005460:	2b00      	cmp	r3, #0
 8005462:	d096      	beq.n	8005392 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546e:	2b00      	cmp	r3, #0
 8005470:	d022      	beq.n	80054b8 <HAL_SD_ReadBlocks+0x26c>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d91f      	bls.n	80054b8 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547c:	2b03      	cmp	r3, #3
 800547e:	d01b      	beq.n	80054b8 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4618      	mov	r0, r3
 8005486:	f001 ff53 	bl	8007330 <SDMMC_CmdStopTransfer>
 800548a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800548c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800548e:	2b00      	cmp	r3, #0
 8005490:	d012      	beq.n	80054b8 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a2f      	ldr	r2, [pc, #188]	; (8005554 <HAL_SD_ReadBlocks+0x308>)
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800549e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a0:	431a      	orrs	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e0ba      	b.n	800562e <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d012      	beq.n	80054ec <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a22      	ldr	r2, [pc, #136]	; (8005554 <HAL_SD_ReadBlocks+0x308>)
 80054cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d2:	f043 0208 	orr.w	r2, r3, #8
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0a0      	b.n	800562e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d012      	beq.n	8005520 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a15      	ldr	r2, [pc, #84]	; (8005554 <HAL_SD_ReadBlocks+0x308>)
 8005500:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	f043 0202 	orr.w	r2, r3, #2
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e086      	b.n	800562e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b00      	cmp	r3, #0
 800552c:	d063      	beq.n	80055f6 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a08      	ldr	r2, [pc, #32]	; (8005554 <HAL_SD_ReadBlocks+0x308>)
 8005534:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	f043 0220 	orr.w	r2, r3, #32
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e06c      	b.n	800562e <HAL_SD_ReadBlocks+0x3e2>
 8005554:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4618      	mov	r0, r3
 800555e:	f001 fd8c 	bl	800707a <SDIO_ReadFIFO>
 8005562:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005566:	b2da      	uxtb	r2, r3
 8005568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800556c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556e:	3301      	adds	r3, #1
 8005570:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005574:	3b01      	subs	r3, #1
 8005576:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557a:	0a1b      	lsrs	r3, r3, #8
 800557c:	b2da      	uxtb	r2, r3
 800557e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005580:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005584:	3301      	adds	r3, #1
 8005586:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558a:	3b01      	subs	r3, #1
 800558c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800558e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005590:	0c1b      	lsrs	r3, r3, #16
 8005592:	b2da      	uxtb	r2, r3
 8005594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005596:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559a:	3301      	adds	r3, #1
 800559c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800559e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a0:	3b01      	subs	r3, #1
 80055a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80055a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a6:	0e1b      	lsrs	r3, r3, #24
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ac:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80055ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b0:	3301      	adds	r3, #1
 80055b2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80055b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b6:	3b01      	subs	r3, #1
 80055b8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80055ba:	f7fd f897 	bl	80026ec <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d902      	bls.n	80055d0 <HAL_SD_ReadBlocks+0x384>
 80055ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d112      	bne.n	80055f6 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a18      	ldr	r2, [pc, #96]	; (8005638 <HAL_SD_ReadBlocks+0x3ec>)
 80055d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e01b      	b.n	800562e <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <HAL_SD_ReadBlocks+0x3be>
 8005604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1a6      	bne.n	8005558 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005612:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	e006      	b.n	800562e <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
  }
}
 800562e:	4618      	mov	r0, r3
 8005630:	3748      	adds	r7, #72	; 0x48
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	004005ff 	.word	0x004005ff

0800563c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b092      	sub	sp, #72	; 0x48
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
 8005648:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800564a:	f7fd f84f 	bl	80026ec <HAL_GetTick>
 800564e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d107      	bne.n	800566e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005662:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e182      	b.n	8005974 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b01      	cmp	r3, #1
 8005678:	f040 8175 	bne.w	8005966 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	441a      	add	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568c:	429a      	cmp	r2, r3
 800568e:	d907      	bls.n	80056a0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e169      	b.n	8005974 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2203      	movs	r2, #3
 80056a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2200      	movs	r2, #0
 80056ae:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d002      	beq.n	80056be <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80056b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ba:	025b      	lsls	r3, r3, #9
 80056bc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056c6:	4618      	mov	r0, r3
 80056c8:	f001 fd88 	bl	80071dc <SDMMC_CmdBlockLength>
 80056cc:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80056ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00f      	beq.n	80056f4 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a9c      	ldr	r2, [pc, #624]	; (800594c <HAL_SD_WriteBlocks+0x310>)
 80056da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056e2:	431a      	orrs	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e13f      	b.n	8005974 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80056f4:	f04f 33ff 	mov.w	r3, #4294967295
 80056f8:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	025b      	lsls	r3, r3, #9
 80056fe:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005700:	2390      	movs	r3, #144	; 0x90
 8005702:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005704:	2300      	movs	r3, #0
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005708:	2300      	movs	r3, #0
 800570a:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800570c:	2301      	movs	r3, #1
 800570e:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f107 0218 	add.w	r2, r7, #24
 8005718:	4611      	mov	r1, r2
 800571a:	4618      	mov	r0, r3
 800571c:	f001 fd32 	bl	8007184 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d90a      	bls.n	800573c <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2220      	movs	r2, #32
 800572a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005732:	4618      	mov	r0, r3
 8005734:	f001 fdda 	bl	80072ec <SDMMC_CmdWriteMultiBlock>
 8005738:	6478      	str	r0, [r7, #68]	; 0x44
 800573a:	e009      	b.n	8005750 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2210      	movs	r2, #16
 8005740:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005748:	4618      	mov	r0, r3
 800574a:	f001 fdad 	bl	80072a8 <SDMMC_CmdWriteSingleBlock>
 800574e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005752:	2b00      	cmp	r3, #0
 8005754:	d012      	beq.n	800577c <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a7c      	ldr	r2, [pc, #496]	; (800594c <HAL_SD_WriteBlocks+0x310>)
 800575c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005764:	431a      	orrs	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e0fb      	b.n	8005974 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005780:	e065      	b.n	800584e <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d040      	beq.n	8005812 <HAL_SD_WriteBlocks+0x1d6>
 8005790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005792:	2b00      	cmp	r3, #0
 8005794:	d03d      	beq.n	8005812 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005796:	2300      	movs	r3, #0
 8005798:	643b      	str	r3, [r7, #64]	; 0x40
 800579a:	e037      	b.n	800580c <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 800579c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80057a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a4:	3301      	adds	r3, #1
 80057a6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80057a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057aa:	3b01      	subs	r3, #1
 80057ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80057ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	021a      	lsls	r2, r3, #8
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80057ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057bc:	3301      	adds	r3, #1
 80057be:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80057c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c2:	3b01      	subs	r3, #1
 80057c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80057c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	041a      	lsls	r2, r3, #16
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80057d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d4:	3301      	adds	r3, #1
 80057d6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80057d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057da:	3b01      	subs	r3, #1
 80057dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80057de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	061a      	lsls	r2, r3, #24
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80057ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ec:	3301      	adds	r3, #1
 80057ee:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80057f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f2:	3b01      	subs	r3, #1
 80057f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f107 0214 	add.w	r2, r7, #20
 80057fe:	4611      	mov	r1, r2
 8005800:	4618      	mov	r0, r3
 8005802:	f001 fc47 	bl	8007094 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005808:	3301      	adds	r3, #1
 800580a:	643b      	str	r3, [r7, #64]	; 0x40
 800580c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800580e:	2b07      	cmp	r3, #7
 8005810:	d9c4      	bls.n	800579c <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005812:	f7fc ff6b 	bl	80026ec <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800581e:	429a      	cmp	r2, r3
 8005820:	d902      	bls.n	8005828 <HAL_SD_WriteBlocks+0x1ec>
 8005822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005824:	2b00      	cmp	r3, #0
 8005826:	d112      	bne.n	800584e <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a47      	ldr	r2, [pc, #284]	; (800594c <HAL_SD_WriteBlocks+0x310>)
 800582e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005836:	431a      	orrs	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e092      	b.n	8005974 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005854:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005858:	2b00      	cmp	r3, #0
 800585a:	d092      	beq.n	8005782 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005866:	2b00      	cmp	r3, #0
 8005868:	d022      	beq.n	80058b0 <HAL_SD_WriteBlocks+0x274>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d91f      	bls.n	80058b0 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005874:	2b03      	cmp	r3, #3
 8005876:	d01b      	beq.n	80058b0 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f001 fd57 	bl	8007330 <SDMMC_CmdStopTransfer>
 8005882:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005886:	2b00      	cmp	r3, #0
 8005888:	d012      	beq.n	80058b0 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a2f      	ldr	r2, [pc, #188]	; (800594c <HAL_SD_WriteBlocks+0x310>)
 8005890:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005898:	431a      	orrs	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e061      	b.n	8005974 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d012      	beq.n	80058e4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a22      	ldr	r2, [pc, #136]	; (800594c <HAL_SD_WriteBlocks+0x310>)
 80058c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ca:	f043 0208 	orr.w	r2, r3, #8
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e047      	b.n	8005974 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d012      	beq.n	8005918 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a15      	ldr	r2, [pc, #84]	; (800594c <HAL_SD_WriteBlocks+0x310>)
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	f043 0202 	orr.w	r2, r3, #2
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e02d      	b.n	8005974 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591e:	f003 0310 	and.w	r3, r3, #16
 8005922:	2b00      	cmp	r3, #0
 8005924:	d014      	beq.n	8005950 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a08      	ldr	r2, [pc, #32]	; (800594c <HAL_SD_WriteBlocks+0x310>)
 800592c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	f043 0210 	orr.w	r2, r3, #16
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e013      	b.n	8005974 <HAL_SD_WriteBlocks+0x338>
 800594c:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f240 523a 	movw	r2, #1338	; 0x53a
 8005958:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	e006      	b.n	8005974 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
  }
}
 8005974:	4618      	mov	r0, r3
 8005976:	3748      	adds	r7, #72	; 0x48
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800598a:	0f9b      	lsrs	r3, r3, #30
 800598c:	b2da      	uxtb	r2, r3
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005996:	0e9b      	lsrs	r3, r3, #26
 8005998:	b2db      	uxtb	r3, r3
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a8:	0e1b      	lsrs	r3, r3, #24
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	f003 0303 	and.w	r3, r3, #3
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059ba:	0c1b      	lsrs	r3, r3, #16
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059c6:	0a1b      	lsrs	r3, r3, #8
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059dc:	0d1b      	lsrs	r3, r3, #20
 80059de:	b29a      	uxth	r2, r3
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059e8:	0c1b      	lsrs	r3, r3, #16
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059fa:	0bdb      	lsrs	r3, r3, #15
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a0c:	0b9b      	lsrs	r3, r3, #14
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a1e:	0b5b      	lsrs	r3, r3, #13
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a30:	0b1b      	lsrs	r3, r3, #12
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2200      	movs	r2, #0
 8005a42:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d163      	bne.n	8005b14 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a50:	009a      	lsls	r2, r3, #2
 8005a52:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a56:	4013      	ands	r3, r2
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005a5c:	0f92      	lsrs	r2, r2, #30
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a68:	0edb      	lsrs	r3, r3, #27
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a7a:	0e1b      	lsrs	r3, r3, #24
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	f003 0307 	and.w	r3, r3, #7
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a8c:	0d5b      	lsrs	r3, r3, #21
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	f003 0307 	and.w	r3, r3, #7
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a9e:	0c9b      	lsrs	r3, r3, #18
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ab0:	0bdb      	lsrs	r3, r3, #15
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	7e1b      	ldrb	r3, [r3, #24]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	3302      	adds	r3, #2
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005ade:	fb02 f203 	mul.w	r2, r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	7a1b      	ldrb	r3, [r3, #8]
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	2201      	movs	r2, #1
 8005af2:	409a      	lsls	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005b00:	0a52      	lsrs	r2, r2, #9
 8005b02:	fb02 f203 	mul.w	r2, r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b10:	661a      	str	r2, [r3, #96]	; 0x60
 8005b12:	e031      	b.n	8005b78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d11d      	bne.n	8005b58 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b20:	041b      	lsls	r3, r3, #16
 8005b22:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b2a:	0c1b      	lsrs	r3, r3, #16
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	3301      	adds	r3, #1
 8005b38:	029a      	lsls	r2, r3, #10
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b4c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	661a      	str	r2, [r3, #96]	; 0x60
 8005b56:	e00f      	b.n	8005b78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a58      	ldr	r2, [pc, #352]	; (8005cc0 <HAL_SD_GetCardCSD+0x344>)
 8005b5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e09d      	b.n	8005cb4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b7c:	0b9b      	lsrs	r3, r3, #14
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b8e:	09db      	lsrs	r3, r3, #7
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb0:	0fdb      	lsrs	r3, r3, #31
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbc:	0f5b      	lsrs	r3, r3, #29
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	f003 0303 	and.w	r3, r3, #3
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bce:	0e9b      	lsrs	r3, r3, #26
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	f003 0307 	and.w	r3, r3, #7
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be0:	0d9b      	lsrs	r3, r3, #22
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	f003 030f 	and.w	r3, r3, #15
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf2:	0d5b      	lsrs	r3, r3, #21
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0e:	0c1b      	lsrs	r3, r3, #16
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c22:	0bdb      	lsrs	r3, r3, #15
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c36:	0b9b      	lsrs	r3, r3, #14
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4a:	0b5b      	lsrs	r3, r3, #13
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5e:	0b1b      	lsrs	r3, r3, #12
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c72:	0a9b      	lsrs	r3, r3, #10
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c86:	0a1b      	lsrs	r3, r3, #8
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	f003 0303 	and.w	r3, r3, #3
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9a:	085b      	lsrs	r3, r3, #1
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	004005ff 	.word	0x004005ff

08005cc4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005d28:	f107 030c 	add.w	r3, r7, #12
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f970 	bl	8006014 <SD_SendStatus>
 8005d34:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d005      	beq.n	8005d48 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	0a5b      	lsrs	r3, r3, #9
 8005d4c:	f003 030f 	and.w	r3, r3, #15
 8005d50:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005d52:	693b      	ldr	r3, [r7, #16]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005d5c:	b5b0      	push	{r4, r5, r7, lr}
 8005d5e:	b094      	sub	sp, #80	; 0x50
 8005d60:	af04      	add	r7, sp, #16
 8005d62:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005d64:	2301      	movs	r3, #1
 8005d66:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f001 f9b1 	bl	80070d4 <SDIO_GetPowerState>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d102      	bne.n	8005d7e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005d78:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005d7c:	e0b7      	b.n	8005eee <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d02f      	beq.n	8005de6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f001 fb97 	bl	80074be <SDMMC_CmdSendCID>
 8005d90:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <SD_InitCard+0x40>
    {
      return errorstate;
 8005d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d9a:	e0a8      	b.n	8005eee <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2100      	movs	r1, #0
 8005da2:	4618      	mov	r0, r3
 8005da4:	f001 f9db 	bl	800715e <SDIO_GetResponse>
 8005da8:	4602      	mov	r2, r0
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2104      	movs	r1, #4
 8005db4:	4618      	mov	r0, r3
 8005db6:	f001 f9d2 	bl	800715e <SDIO_GetResponse>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2108      	movs	r1, #8
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 f9c9 	bl	800715e <SDIO_GetResponse>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	210c      	movs	r1, #12
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f001 f9c0 	bl	800715e <SDIO_GetResponse>
 8005dde:	4602      	mov	r2, r0
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d00d      	beq.n	8005e0a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f107 020e 	add.w	r2, r7, #14
 8005df6:	4611      	mov	r1, r2
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f001 fb9d 	bl	8007538 <SDMMC_CmdSetRelAdd>
 8005dfe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <SD_InitCard+0xae>
    {
      return errorstate;
 8005e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e08:	e071      	b.n	8005eee <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d036      	beq.n	8005e80 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005e12:	89fb      	ldrh	r3, [r7, #14]
 8005e14:	461a      	mov	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e22:	041b      	lsls	r3, r3, #16
 8005e24:	4619      	mov	r1, r3
 8005e26:	4610      	mov	r0, r2
 8005e28:	f001 fb67 	bl	80074fa <SDMMC_CmdSendCSD>
 8005e2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e36:	e05a      	b.n	8005eee <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f001 f98d 	bl	800715e <SDIO_GetResponse>
 8005e44:	4602      	mov	r2, r0
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2104      	movs	r1, #4
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 f984 	bl	800715e <SDIO_GetResponse>
 8005e56:	4602      	mov	r2, r0
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2108      	movs	r1, #8
 8005e62:	4618      	mov	r0, r3
 8005e64:	f001 f97b 	bl	800715e <SDIO_GetResponse>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	210c      	movs	r1, #12
 8005e74:	4618      	mov	r0, r3
 8005e76:	f001 f972 	bl	800715e <SDIO_GetResponse>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2104      	movs	r1, #4
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 f969 	bl	800715e <SDIO_GetResponse>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	0d1a      	lsrs	r2, r3, #20
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005e94:	f107 0310 	add.w	r3, r7, #16
 8005e98:	4619      	mov	r1, r3
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7ff fd6e 	bl	800597c <HAL_SD_GetCardCSD>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ea6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005eaa:	e020      	b.n	8005eee <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6819      	ldr	r1, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb4:	041b      	lsls	r3, r3, #16
 8005eb6:	f04f 0400 	mov.w	r4, #0
 8005eba:	461a      	mov	r2, r3
 8005ebc:	4623      	mov	r3, r4
 8005ebe:	4608      	mov	r0, r1
 8005ec0:	f001 fa58 	bl	8007374 <SDMMC_CmdSelDesel>
 8005ec4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <SD_InitCard+0x174>
  {
    return errorstate;
 8005ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ece:	e00e      	b.n	8005eee <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681d      	ldr	r5, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	466c      	mov	r4, sp
 8005ed8:	f103 0210 	add.w	r2, r3, #16
 8005edc:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ede:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f001 f89c 	bl	8007024 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3740      	adds	r7, #64	; 0x40
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005ef8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	2300      	movs	r3, #0
 8005f0a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f001 fa52 	bl	80073ba <SDMMC_CmdGoIdleState>
 8005f16:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	e072      	b.n	8006008 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f001 fa65 	bl	80073f6 <SDMMC_CmdOperCond>
 8005f2c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00d      	beq.n	8005f50 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f001 fa3b 	bl	80073ba <SDMMC_CmdGoIdleState>
 8005f44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d004      	beq.n	8005f56 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	e05b      	b.n	8006008 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d137      	bne.n	8005fce <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2100      	movs	r1, #0
 8005f64:	4618      	mov	r0, r3
 8005f66:	f001 fa65 	bl	8007434 <SDMMC_CmdAppCommand>
 8005f6a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d02d      	beq.n	8005fce <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005f76:	e047      	b.n	8006008 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 fa58 	bl	8007434 <SDMMC_CmdAppCommand>
 8005f84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <SD_PowerON+0x98>
    {
      return errorstate;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	e03b      	b.n	8006008 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	491e      	ldr	r1, [pc, #120]	; (8006010 <SD_PowerON+0x118>)
 8005f96:	4618      	mov	r0, r3
 8005f98:	f001 fa6e 	bl	8007478 <SDMMC_CmdAppOperCommand>
 8005f9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005fa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005fa8:	e02e      	b.n	8006008 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2100      	movs	r1, #0
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f001 f8d4 	bl	800715e <SDIO_GetResponse>
 8005fb6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	0fdb      	lsrs	r3, r3, #31
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d101      	bne.n	8005fc4 <SD_PowerON+0xcc>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <SD_PowerON+0xce>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	613b      	str	r3, [r7, #16]

    count++;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d802      	bhi.n	8005fde <SD_PowerON+0xe6>
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0cc      	beq.n	8005f78 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d902      	bls.n	8005fee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005fe8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fec:	e00c      	b.n	8006008 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	645a      	str	r2, [r3, #68]	; 0x44
 8005ffe:	e002      	b.n	8006006 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	c1100000 	.word	0xc1100000

08006014 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d102      	bne.n	800602a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006024:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006028:	e018      	b.n	800605c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006032:	041b      	lsls	r3, r3, #16
 8006034:	4619      	mov	r1, r3
 8006036:	4610      	mov	r0, r2
 8006038:	f001 fa9f 	bl	800757a <SDMMC_CmdSendStatus>
 800603c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	e009      	b.n	800605c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2100      	movs	r1, #0
 800604e:	4618      	mov	r0, r3
 8006050:	f001 f885 	bl	800715e <SDIO_GetResponse>
 8006054:	4602      	mov	r2, r0
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e056      	b.n	8006124 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d106      	bne.n	8006096 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7fb fe59 	bl	8001d48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2202      	movs	r2, #2
 800609a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	431a      	orrs	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	431a      	orrs	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	431a      	orrs	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	ea42 0103 	orr.w	r1, r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	0c1b      	lsrs	r3, r3, #16
 80060f4:	f003 0104 	and.w	r1, r3, #4
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69da      	ldr	r2, [r3, #28]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006112:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08c      	sub	sp, #48	; 0x30
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800613a:	2301      	movs	r3, #1
 800613c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800614a:	2b01      	cmp	r3, #1
 800614c:	d101      	bne.n	8006152 <HAL_SPI_TransmitReceive+0x26>
 800614e:	2302      	movs	r3, #2
 8006150:	e18a      	b.n	8006468 <HAL_SPI_TransmitReceive+0x33c>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800615a:	f7fc fac7 	bl	80026ec <HAL_GetTick>
 800615e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006170:	887b      	ldrh	r3, [r7, #2]
 8006172:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006178:	2b01      	cmp	r3, #1
 800617a:	d00f      	beq.n	800619c <HAL_SPI_TransmitReceive+0x70>
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006182:	d107      	bne.n	8006194 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d103      	bne.n	8006194 <HAL_SPI_TransmitReceive+0x68>
 800618c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006190:	2b04      	cmp	r3, #4
 8006192:	d003      	beq.n	800619c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006194:	2302      	movs	r3, #2
 8006196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800619a:	e15b      	b.n	8006454 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d005      	beq.n	80061ae <HAL_SPI_TransmitReceive+0x82>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <HAL_SPI_TransmitReceive+0x82>
 80061a8:	887b      	ldrh	r3, [r7, #2]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d103      	bne.n	80061b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80061b4:	e14e      	b.n	8006454 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d003      	beq.n	80061ca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2205      	movs	r2, #5
 80061c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	887a      	ldrh	r2, [r7, #2]
 80061da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	887a      	ldrh	r2, [r7, #2]
 80061e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	887a      	ldrh	r2, [r7, #2]
 80061ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	887a      	ldrh	r2, [r7, #2]
 80061f2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620a:	2b40      	cmp	r3, #64	; 0x40
 800620c:	d007      	beq.n	800621e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800621c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006226:	d178      	bne.n	800631a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <HAL_SPI_TransmitReceive+0x10a>
 8006230:	8b7b      	ldrh	r3, [r7, #26]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d166      	bne.n	8006304 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623a:	881a      	ldrh	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006246:	1c9a      	adds	r2, r3, #2
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800625a:	e053      	b.n	8006304 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b02      	cmp	r3, #2
 8006268:	d11b      	bne.n	80062a2 <HAL_SPI_TransmitReceive+0x176>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800626e:	b29b      	uxth	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d016      	beq.n	80062a2 <HAL_SPI_TransmitReceive+0x176>
 8006274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006276:	2b01      	cmp	r3, #1
 8006278:	d113      	bne.n	80062a2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627e:	881a      	ldrh	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	1c9a      	adds	r2, r3, #2
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d119      	bne.n	80062e4 <HAL_SPI_TransmitReceive+0x1b8>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d014      	beq.n	80062e4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c4:	b292      	uxth	r2, r2
 80062c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	1c9a      	adds	r2, r3, #2
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062e0:	2301      	movs	r3, #1
 80062e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80062e4:	f7fc fa02 	bl	80026ec <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d807      	bhi.n	8006304 <HAL_SPI_TransmitReceive+0x1d8>
 80062f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fa:	d003      	beq.n	8006304 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006302:	e0a7      	b.n	8006454 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1a6      	bne.n	800625c <HAL_SPI_TransmitReceive+0x130>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006312:	b29b      	uxth	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1a1      	bne.n	800625c <HAL_SPI_TransmitReceive+0x130>
 8006318:	e07c      	b.n	8006414 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <HAL_SPI_TransmitReceive+0x1fc>
 8006322:	8b7b      	ldrh	r3, [r7, #26]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d16b      	bne.n	8006400 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	330c      	adds	r3, #12
 8006332:	7812      	ldrb	r2, [r2, #0]
 8006334:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006344:	b29b      	uxth	r3, r3
 8006346:	3b01      	subs	r3, #1
 8006348:	b29a      	uxth	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800634e:	e057      	b.n	8006400 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b02      	cmp	r3, #2
 800635c:	d11c      	bne.n	8006398 <HAL_SPI_TransmitReceive+0x26c>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006362:	b29b      	uxth	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	d017      	beq.n	8006398 <HAL_SPI_TransmitReceive+0x26c>
 8006368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636a:	2b01      	cmp	r3, #1
 800636c:	d114      	bne.n	8006398 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	330c      	adds	r3, #12
 8006378:	7812      	ldrb	r2, [r2, #0]
 800637a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006380:	1c5a      	adds	r2, r3, #1
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800638a:	b29b      	uxth	r3, r3
 800638c:	3b01      	subs	r3, #1
 800638e:	b29a      	uxth	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d119      	bne.n	80063da <HAL_SPI_TransmitReceive+0x2ae>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d014      	beq.n	80063da <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063d6:	2301      	movs	r3, #1
 80063d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063da:	f7fc f987 	bl	80026ec <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d803      	bhi.n	80063f2 <HAL_SPI_TransmitReceive+0x2c6>
 80063ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f0:	d102      	bne.n	80063f8 <HAL_SPI_TransmitReceive+0x2cc>
 80063f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d103      	bne.n	8006400 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80063fe:	e029      	b.n	8006454 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006404:	b29b      	uxth	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1a2      	bne.n	8006350 <HAL_SPI_TransmitReceive+0x224>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800640e:	b29b      	uxth	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d19d      	bne.n	8006350 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006416:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 f893 	bl	8006544 <SPI_EndRxTxTransaction>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d006      	beq.n	8006432 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2220      	movs	r2, #32
 800642e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006430:	e010      	b.n	8006454 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10b      	bne.n	8006452 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800643a:	2300      	movs	r3, #0
 800643c:	617b      	str	r3, [r7, #20]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	e000      	b.n	8006454 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006452:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006464:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006468:	4618      	mov	r0, r3
 800646a:	3730      	adds	r7, #48	; 0x30
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	4613      	mov	r3, r2
 800647e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006480:	e04c      	b.n	800651c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006488:	d048      	beq.n	800651c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800648a:	f7fc f92f 	bl	80026ec <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	429a      	cmp	r2, r3
 8006498:	d902      	bls.n	80064a0 <SPI_WaitFlagStateUntilTimeout+0x30>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d13d      	bne.n	800651c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064b8:	d111      	bne.n	80064de <SPI_WaitFlagStateUntilTimeout+0x6e>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c2:	d004      	beq.n	80064ce <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064cc:	d107      	bne.n	80064de <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e6:	d10f      	bne.n	8006508 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006506:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e00f      	b.n	800653c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689a      	ldr	r2, [r3, #8]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	4013      	ands	r3, r2
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	429a      	cmp	r2, r3
 800652a:	bf0c      	ite	eq
 800652c:	2301      	moveq	r3, #1
 800652e:	2300      	movne	r3, #0
 8006530:	b2db      	uxtb	r3, r3
 8006532:	461a      	mov	r2, r3
 8006534:	79fb      	ldrb	r3, [r7, #7]
 8006536:	429a      	cmp	r2, r3
 8006538:	d1a3      	bne.n	8006482 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af02      	add	r7, sp, #8
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006550:	4b1b      	ldr	r3, [pc, #108]	; (80065c0 <SPI_EndRxTxTransaction+0x7c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a1b      	ldr	r2, [pc, #108]	; (80065c4 <SPI_EndRxTxTransaction+0x80>)
 8006556:	fba2 2303 	umull	r2, r3, r2, r3
 800655a:	0d5b      	lsrs	r3, r3, #21
 800655c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006560:	fb02 f303 	mul.w	r3, r2, r3
 8006564:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800656e:	d112      	bne.n	8006596 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2200      	movs	r2, #0
 8006578:	2180      	movs	r1, #128	; 0x80
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f7ff ff78 	bl	8006470 <SPI_WaitFlagStateUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d016      	beq.n	80065b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658a:	f043 0220 	orr.w	r2, r3, #32
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e00f      	b.n	80065b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	3b01      	subs	r3, #1
 80065a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ac:	2b80      	cmp	r3, #128	; 0x80
 80065ae:	d0f2      	beq.n	8006596 <SPI_EndRxTxTransaction+0x52>
 80065b0:	e000      	b.n	80065b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80065b2:	bf00      	nop
  }

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	2000001c 	.word	0x2000001c
 80065c4:	165e9f81 	.word	0x165e9f81

080065c8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e034      	b.n	8006648 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d106      	bne.n	80065f8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f7fb fcb8 	bl	8001f68 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3308      	adds	r3, #8
 8006600:	4619      	mov	r1, r3
 8006602:	4610      	mov	r0, r2
 8006604:	f000 fc0a 	bl	8006e1c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6818      	ldr	r0, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	461a      	mov	r2, r3
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	f000 fc72 	bl	8006efc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6858      	ldr	r0, [r3, #4]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006624:	6879      	ldr	r1, [r7, #4]
 8006626:	f000 fcbd 	bl	8006fa4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	6892      	ldr	r2, [r2, #8]
 8006632:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	6892      	ldr	r2, [r2, #8]
 800663e:	f041 0101 	orr.w	r1, r1, #1
 8006642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e03f      	b.n	80066e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d106      	bne.n	800667c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7fb fbbe 	bl	8001df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2224      	movs	r2, #36	; 0x24
 8006680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68da      	ldr	r2, [r3, #12]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f829 	bl	80066ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	691a      	ldr	r2, [r3, #16]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	695a      	ldr	r2, [r3, #20]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
	...

080066ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f0:	b085      	sub	sp, #20
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	4313      	orrs	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800672e:	f023 030c 	bic.w	r3, r3, #12
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	6812      	ldr	r2, [r2, #0]
 8006736:	68f9      	ldr	r1, [r7, #12]
 8006738:	430b      	orrs	r3, r1
 800673a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699a      	ldr	r2, [r3, #24]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800675a:	f040 8199 	bne.w	8006a90 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4ac6      	ldr	r2, [pc, #792]	; (8006a7c <UART_SetConfig+0x390>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d00f      	beq.n	8006788 <UART_SetConfig+0x9c>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4ac4      	ldr	r2, [pc, #784]	; (8006a80 <UART_SetConfig+0x394>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00a      	beq.n	8006788 <UART_SetConfig+0x9c>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4ac3      	ldr	r2, [pc, #780]	; (8006a84 <UART_SetConfig+0x398>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d005      	beq.n	8006788 <UART_SetConfig+0x9c>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4ac1      	ldr	r2, [pc, #772]	; (8006a88 <UART_SetConfig+0x39c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	f040 80bd 	bne.w	8006902 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006788:	f7fd ffee 	bl	8004768 <HAL_RCC_GetPCLK2Freq>
 800678c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	461d      	mov	r5, r3
 8006792:	f04f 0600 	mov.w	r6, #0
 8006796:	46a8      	mov	r8, r5
 8006798:	46b1      	mov	r9, r6
 800679a:	eb18 0308 	adds.w	r3, r8, r8
 800679e:	eb49 0409 	adc.w	r4, r9, r9
 80067a2:	4698      	mov	r8, r3
 80067a4:	46a1      	mov	r9, r4
 80067a6:	eb18 0805 	adds.w	r8, r8, r5
 80067aa:	eb49 0906 	adc.w	r9, r9, r6
 80067ae:	f04f 0100 	mov.w	r1, #0
 80067b2:	f04f 0200 	mov.w	r2, #0
 80067b6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80067ba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80067be:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80067c2:	4688      	mov	r8, r1
 80067c4:	4691      	mov	r9, r2
 80067c6:	eb18 0005 	adds.w	r0, r8, r5
 80067ca:	eb49 0106 	adc.w	r1, r9, r6
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	461d      	mov	r5, r3
 80067d4:	f04f 0600 	mov.w	r6, #0
 80067d8:	196b      	adds	r3, r5, r5
 80067da:	eb46 0406 	adc.w	r4, r6, r6
 80067de:	461a      	mov	r2, r3
 80067e0:	4623      	mov	r3, r4
 80067e2:	f7f9 fd6d 	bl	80002c0 <__aeabi_uldivmod>
 80067e6:	4603      	mov	r3, r0
 80067e8:	460c      	mov	r4, r1
 80067ea:	461a      	mov	r2, r3
 80067ec:	4ba7      	ldr	r3, [pc, #668]	; (8006a8c <UART_SetConfig+0x3a0>)
 80067ee:	fba3 2302 	umull	r2, r3, r3, r2
 80067f2:	095b      	lsrs	r3, r3, #5
 80067f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	461d      	mov	r5, r3
 80067fc:	f04f 0600 	mov.w	r6, #0
 8006800:	46a9      	mov	r9, r5
 8006802:	46b2      	mov	sl, r6
 8006804:	eb19 0309 	adds.w	r3, r9, r9
 8006808:	eb4a 040a 	adc.w	r4, sl, sl
 800680c:	4699      	mov	r9, r3
 800680e:	46a2      	mov	sl, r4
 8006810:	eb19 0905 	adds.w	r9, r9, r5
 8006814:	eb4a 0a06 	adc.w	sl, sl, r6
 8006818:	f04f 0100 	mov.w	r1, #0
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006824:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006828:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800682c:	4689      	mov	r9, r1
 800682e:	4692      	mov	sl, r2
 8006830:	eb19 0005 	adds.w	r0, r9, r5
 8006834:	eb4a 0106 	adc.w	r1, sl, r6
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	461d      	mov	r5, r3
 800683e:	f04f 0600 	mov.w	r6, #0
 8006842:	196b      	adds	r3, r5, r5
 8006844:	eb46 0406 	adc.w	r4, r6, r6
 8006848:	461a      	mov	r2, r3
 800684a:	4623      	mov	r3, r4
 800684c:	f7f9 fd38 	bl	80002c0 <__aeabi_uldivmod>
 8006850:	4603      	mov	r3, r0
 8006852:	460c      	mov	r4, r1
 8006854:	461a      	mov	r2, r3
 8006856:	4b8d      	ldr	r3, [pc, #564]	; (8006a8c <UART_SetConfig+0x3a0>)
 8006858:	fba3 1302 	umull	r1, r3, r3, r2
 800685c:	095b      	lsrs	r3, r3, #5
 800685e:	2164      	movs	r1, #100	; 0x64
 8006860:	fb01 f303 	mul.w	r3, r1, r3
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	3332      	adds	r3, #50	; 0x32
 800686a:	4a88      	ldr	r2, [pc, #544]	; (8006a8c <UART_SetConfig+0x3a0>)
 800686c:	fba2 2303 	umull	r2, r3, r2, r3
 8006870:	095b      	lsrs	r3, r3, #5
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006878:	4498      	add	r8, r3
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	461d      	mov	r5, r3
 800687e:	f04f 0600 	mov.w	r6, #0
 8006882:	46a9      	mov	r9, r5
 8006884:	46b2      	mov	sl, r6
 8006886:	eb19 0309 	adds.w	r3, r9, r9
 800688a:	eb4a 040a 	adc.w	r4, sl, sl
 800688e:	4699      	mov	r9, r3
 8006890:	46a2      	mov	sl, r4
 8006892:	eb19 0905 	adds.w	r9, r9, r5
 8006896:	eb4a 0a06 	adc.w	sl, sl, r6
 800689a:	f04f 0100 	mov.w	r1, #0
 800689e:	f04f 0200 	mov.w	r2, #0
 80068a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068ae:	4689      	mov	r9, r1
 80068b0:	4692      	mov	sl, r2
 80068b2:	eb19 0005 	adds.w	r0, r9, r5
 80068b6:	eb4a 0106 	adc.w	r1, sl, r6
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	461d      	mov	r5, r3
 80068c0:	f04f 0600 	mov.w	r6, #0
 80068c4:	196b      	adds	r3, r5, r5
 80068c6:	eb46 0406 	adc.w	r4, r6, r6
 80068ca:	461a      	mov	r2, r3
 80068cc:	4623      	mov	r3, r4
 80068ce:	f7f9 fcf7 	bl	80002c0 <__aeabi_uldivmod>
 80068d2:	4603      	mov	r3, r0
 80068d4:	460c      	mov	r4, r1
 80068d6:	461a      	mov	r2, r3
 80068d8:	4b6c      	ldr	r3, [pc, #432]	; (8006a8c <UART_SetConfig+0x3a0>)
 80068da:	fba3 1302 	umull	r1, r3, r3, r2
 80068de:	095b      	lsrs	r3, r3, #5
 80068e0:	2164      	movs	r1, #100	; 0x64
 80068e2:	fb01 f303 	mul.w	r3, r1, r3
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	00db      	lsls	r3, r3, #3
 80068ea:	3332      	adds	r3, #50	; 0x32
 80068ec:	4a67      	ldr	r2, [pc, #412]	; (8006a8c <UART_SetConfig+0x3a0>)
 80068ee:	fba2 2303 	umull	r2, r3, r2, r3
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	f003 0207 	and.w	r2, r3, #7
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4442      	add	r2, r8
 80068fe:	609a      	str	r2, [r3, #8]
 8006900:	e27d      	b.n	8006dfe <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006902:	f7fd ff1d 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 8006906:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	461d      	mov	r5, r3
 800690c:	f04f 0600 	mov.w	r6, #0
 8006910:	46a8      	mov	r8, r5
 8006912:	46b1      	mov	r9, r6
 8006914:	eb18 0308 	adds.w	r3, r8, r8
 8006918:	eb49 0409 	adc.w	r4, r9, r9
 800691c:	4698      	mov	r8, r3
 800691e:	46a1      	mov	r9, r4
 8006920:	eb18 0805 	adds.w	r8, r8, r5
 8006924:	eb49 0906 	adc.w	r9, r9, r6
 8006928:	f04f 0100 	mov.w	r1, #0
 800692c:	f04f 0200 	mov.w	r2, #0
 8006930:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006934:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006938:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800693c:	4688      	mov	r8, r1
 800693e:	4691      	mov	r9, r2
 8006940:	eb18 0005 	adds.w	r0, r8, r5
 8006944:	eb49 0106 	adc.w	r1, r9, r6
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	461d      	mov	r5, r3
 800694e:	f04f 0600 	mov.w	r6, #0
 8006952:	196b      	adds	r3, r5, r5
 8006954:	eb46 0406 	adc.w	r4, r6, r6
 8006958:	461a      	mov	r2, r3
 800695a:	4623      	mov	r3, r4
 800695c:	f7f9 fcb0 	bl	80002c0 <__aeabi_uldivmod>
 8006960:	4603      	mov	r3, r0
 8006962:	460c      	mov	r4, r1
 8006964:	461a      	mov	r2, r3
 8006966:	4b49      	ldr	r3, [pc, #292]	; (8006a8c <UART_SetConfig+0x3a0>)
 8006968:	fba3 2302 	umull	r2, r3, r3, r2
 800696c:	095b      	lsrs	r3, r3, #5
 800696e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	461d      	mov	r5, r3
 8006976:	f04f 0600 	mov.w	r6, #0
 800697a:	46a9      	mov	r9, r5
 800697c:	46b2      	mov	sl, r6
 800697e:	eb19 0309 	adds.w	r3, r9, r9
 8006982:	eb4a 040a 	adc.w	r4, sl, sl
 8006986:	4699      	mov	r9, r3
 8006988:	46a2      	mov	sl, r4
 800698a:	eb19 0905 	adds.w	r9, r9, r5
 800698e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006992:	f04f 0100 	mov.w	r1, #0
 8006996:	f04f 0200 	mov.w	r2, #0
 800699a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800699e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069a6:	4689      	mov	r9, r1
 80069a8:	4692      	mov	sl, r2
 80069aa:	eb19 0005 	adds.w	r0, r9, r5
 80069ae:	eb4a 0106 	adc.w	r1, sl, r6
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	461d      	mov	r5, r3
 80069b8:	f04f 0600 	mov.w	r6, #0
 80069bc:	196b      	adds	r3, r5, r5
 80069be:	eb46 0406 	adc.w	r4, r6, r6
 80069c2:	461a      	mov	r2, r3
 80069c4:	4623      	mov	r3, r4
 80069c6:	f7f9 fc7b 	bl	80002c0 <__aeabi_uldivmod>
 80069ca:	4603      	mov	r3, r0
 80069cc:	460c      	mov	r4, r1
 80069ce:	461a      	mov	r2, r3
 80069d0:	4b2e      	ldr	r3, [pc, #184]	; (8006a8c <UART_SetConfig+0x3a0>)
 80069d2:	fba3 1302 	umull	r1, r3, r3, r2
 80069d6:	095b      	lsrs	r3, r3, #5
 80069d8:	2164      	movs	r1, #100	; 0x64
 80069da:	fb01 f303 	mul.w	r3, r1, r3
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	3332      	adds	r3, #50	; 0x32
 80069e4:	4a29      	ldr	r2, [pc, #164]	; (8006a8c <UART_SetConfig+0x3a0>)
 80069e6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ea:	095b      	lsrs	r3, r3, #5
 80069ec:	005b      	lsls	r3, r3, #1
 80069ee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069f2:	4498      	add	r8, r3
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	461d      	mov	r5, r3
 80069f8:	f04f 0600 	mov.w	r6, #0
 80069fc:	46a9      	mov	r9, r5
 80069fe:	46b2      	mov	sl, r6
 8006a00:	eb19 0309 	adds.w	r3, r9, r9
 8006a04:	eb4a 040a 	adc.w	r4, sl, sl
 8006a08:	4699      	mov	r9, r3
 8006a0a:	46a2      	mov	sl, r4
 8006a0c:	eb19 0905 	adds.w	r9, r9, r5
 8006a10:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a14:	f04f 0100 	mov.w	r1, #0
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a28:	4689      	mov	r9, r1
 8006a2a:	4692      	mov	sl, r2
 8006a2c:	eb19 0005 	adds.w	r0, r9, r5
 8006a30:	eb4a 0106 	adc.w	r1, sl, r6
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	461d      	mov	r5, r3
 8006a3a:	f04f 0600 	mov.w	r6, #0
 8006a3e:	196b      	adds	r3, r5, r5
 8006a40:	eb46 0406 	adc.w	r4, r6, r6
 8006a44:	461a      	mov	r2, r3
 8006a46:	4623      	mov	r3, r4
 8006a48:	f7f9 fc3a 	bl	80002c0 <__aeabi_uldivmod>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	460c      	mov	r4, r1
 8006a50:	461a      	mov	r2, r3
 8006a52:	4b0e      	ldr	r3, [pc, #56]	; (8006a8c <UART_SetConfig+0x3a0>)
 8006a54:	fba3 1302 	umull	r1, r3, r3, r2
 8006a58:	095b      	lsrs	r3, r3, #5
 8006a5a:	2164      	movs	r1, #100	; 0x64
 8006a5c:	fb01 f303 	mul.w	r3, r1, r3
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	3332      	adds	r3, #50	; 0x32
 8006a66:	4a09      	ldr	r2, [pc, #36]	; (8006a8c <UART_SetConfig+0x3a0>)
 8006a68:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6c:	095b      	lsrs	r3, r3, #5
 8006a6e:	f003 0207 	and.w	r2, r3, #7
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4442      	add	r2, r8
 8006a78:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006a7a:	e1c0      	b.n	8006dfe <UART_SetConfig+0x712>
 8006a7c:	40011000 	.word	0x40011000
 8006a80:	40011400 	.word	0x40011400
 8006a84:	40011800 	.word	0x40011800
 8006a88:	40011c00 	.word	0x40011c00
 8006a8c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4adc      	ldr	r2, [pc, #880]	; (8006e08 <UART_SetConfig+0x71c>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00f      	beq.n	8006aba <UART_SetConfig+0x3ce>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4adb      	ldr	r2, [pc, #876]	; (8006e0c <UART_SetConfig+0x720>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d00a      	beq.n	8006aba <UART_SetConfig+0x3ce>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4ad9      	ldr	r2, [pc, #868]	; (8006e10 <UART_SetConfig+0x724>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d005      	beq.n	8006aba <UART_SetConfig+0x3ce>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4ad8      	ldr	r2, [pc, #864]	; (8006e14 <UART_SetConfig+0x728>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	f040 80d1 	bne.w	8006c5c <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006aba:	f7fd fe55 	bl	8004768 <HAL_RCC_GetPCLK2Freq>
 8006abe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	469a      	mov	sl, r3
 8006ac4:	f04f 0b00 	mov.w	fp, #0
 8006ac8:	46d0      	mov	r8, sl
 8006aca:	46d9      	mov	r9, fp
 8006acc:	eb18 0308 	adds.w	r3, r8, r8
 8006ad0:	eb49 0409 	adc.w	r4, r9, r9
 8006ad4:	4698      	mov	r8, r3
 8006ad6:	46a1      	mov	r9, r4
 8006ad8:	eb18 080a 	adds.w	r8, r8, sl
 8006adc:	eb49 090b 	adc.w	r9, r9, fp
 8006ae0:	f04f 0100 	mov.w	r1, #0
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006aec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006af0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006af4:	4688      	mov	r8, r1
 8006af6:	4691      	mov	r9, r2
 8006af8:	eb1a 0508 	adds.w	r5, sl, r8
 8006afc:	eb4b 0609 	adc.w	r6, fp, r9
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	4619      	mov	r1, r3
 8006b06:	f04f 0200 	mov.w	r2, #0
 8006b0a:	f04f 0300 	mov.w	r3, #0
 8006b0e:	f04f 0400 	mov.w	r4, #0
 8006b12:	0094      	lsls	r4, r2, #2
 8006b14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b18:	008b      	lsls	r3, r1, #2
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	4623      	mov	r3, r4
 8006b1e:	4628      	mov	r0, r5
 8006b20:	4631      	mov	r1, r6
 8006b22:	f7f9 fbcd 	bl	80002c0 <__aeabi_uldivmod>
 8006b26:	4603      	mov	r3, r0
 8006b28:	460c      	mov	r4, r1
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	4bba      	ldr	r3, [pc, #744]	; (8006e18 <UART_SetConfig+0x72c>)
 8006b2e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b32:	095b      	lsrs	r3, r3, #5
 8006b34:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	469b      	mov	fp, r3
 8006b3c:	f04f 0c00 	mov.w	ip, #0
 8006b40:	46d9      	mov	r9, fp
 8006b42:	46e2      	mov	sl, ip
 8006b44:	eb19 0309 	adds.w	r3, r9, r9
 8006b48:	eb4a 040a 	adc.w	r4, sl, sl
 8006b4c:	4699      	mov	r9, r3
 8006b4e:	46a2      	mov	sl, r4
 8006b50:	eb19 090b 	adds.w	r9, r9, fp
 8006b54:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b58:	f04f 0100 	mov.w	r1, #0
 8006b5c:	f04f 0200 	mov.w	r2, #0
 8006b60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b6c:	4689      	mov	r9, r1
 8006b6e:	4692      	mov	sl, r2
 8006b70:	eb1b 0509 	adds.w	r5, fp, r9
 8006b74:	eb4c 060a 	adc.w	r6, ip, sl
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	f04f 0200 	mov.w	r2, #0
 8006b82:	f04f 0300 	mov.w	r3, #0
 8006b86:	f04f 0400 	mov.w	r4, #0
 8006b8a:	0094      	lsls	r4, r2, #2
 8006b8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b90:	008b      	lsls	r3, r1, #2
 8006b92:	461a      	mov	r2, r3
 8006b94:	4623      	mov	r3, r4
 8006b96:	4628      	mov	r0, r5
 8006b98:	4631      	mov	r1, r6
 8006b9a:	f7f9 fb91 	bl	80002c0 <__aeabi_uldivmod>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	460c      	mov	r4, r1
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	4b9c      	ldr	r3, [pc, #624]	; (8006e18 <UART_SetConfig+0x72c>)
 8006ba6:	fba3 1302 	umull	r1, r3, r3, r2
 8006baa:	095b      	lsrs	r3, r3, #5
 8006bac:	2164      	movs	r1, #100	; 0x64
 8006bae:	fb01 f303 	mul.w	r3, r1, r3
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	3332      	adds	r3, #50	; 0x32
 8006bb8:	4a97      	ldr	r2, [pc, #604]	; (8006e18 <UART_SetConfig+0x72c>)
 8006bba:	fba2 2303 	umull	r2, r3, r2, r3
 8006bbe:	095b      	lsrs	r3, r3, #5
 8006bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bc4:	4498      	add	r8, r3
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	469b      	mov	fp, r3
 8006bca:	f04f 0c00 	mov.w	ip, #0
 8006bce:	46d9      	mov	r9, fp
 8006bd0:	46e2      	mov	sl, ip
 8006bd2:	eb19 0309 	adds.w	r3, r9, r9
 8006bd6:	eb4a 040a 	adc.w	r4, sl, sl
 8006bda:	4699      	mov	r9, r3
 8006bdc:	46a2      	mov	sl, r4
 8006bde:	eb19 090b 	adds.w	r9, r9, fp
 8006be2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006be6:	f04f 0100 	mov.w	r1, #0
 8006bea:	f04f 0200 	mov.w	r2, #0
 8006bee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bf2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bf6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bfa:	4689      	mov	r9, r1
 8006bfc:	4692      	mov	sl, r2
 8006bfe:	eb1b 0509 	adds.w	r5, fp, r9
 8006c02:	eb4c 060a 	adc.w	r6, ip, sl
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	f04f 0400 	mov.w	r4, #0
 8006c18:	0094      	lsls	r4, r2, #2
 8006c1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c1e:	008b      	lsls	r3, r1, #2
 8006c20:	461a      	mov	r2, r3
 8006c22:	4623      	mov	r3, r4
 8006c24:	4628      	mov	r0, r5
 8006c26:	4631      	mov	r1, r6
 8006c28:	f7f9 fb4a 	bl	80002c0 <__aeabi_uldivmod>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	461a      	mov	r2, r3
 8006c32:	4b79      	ldr	r3, [pc, #484]	; (8006e18 <UART_SetConfig+0x72c>)
 8006c34:	fba3 1302 	umull	r1, r3, r3, r2
 8006c38:	095b      	lsrs	r3, r3, #5
 8006c3a:	2164      	movs	r1, #100	; 0x64
 8006c3c:	fb01 f303 	mul.w	r3, r1, r3
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	011b      	lsls	r3, r3, #4
 8006c44:	3332      	adds	r3, #50	; 0x32
 8006c46:	4a74      	ldr	r2, [pc, #464]	; (8006e18 <UART_SetConfig+0x72c>)
 8006c48:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4c:	095b      	lsrs	r3, r3, #5
 8006c4e:	f003 020f 	and.w	r2, r3, #15
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4442      	add	r2, r8
 8006c58:	609a      	str	r2, [r3, #8]
 8006c5a:	e0d0      	b.n	8006dfe <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c5c:	f7fd fd70 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 8006c60:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	469a      	mov	sl, r3
 8006c66:	f04f 0b00 	mov.w	fp, #0
 8006c6a:	46d0      	mov	r8, sl
 8006c6c:	46d9      	mov	r9, fp
 8006c6e:	eb18 0308 	adds.w	r3, r8, r8
 8006c72:	eb49 0409 	adc.w	r4, r9, r9
 8006c76:	4698      	mov	r8, r3
 8006c78:	46a1      	mov	r9, r4
 8006c7a:	eb18 080a 	adds.w	r8, r8, sl
 8006c7e:	eb49 090b 	adc.w	r9, r9, fp
 8006c82:	f04f 0100 	mov.w	r1, #0
 8006c86:	f04f 0200 	mov.w	r2, #0
 8006c8a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c8e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c92:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c96:	4688      	mov	r8, r1
 8006c98:	4691      	mov	r9, r2
 8006c9a:	eb1a 0508 	adds.w	r5, sl, r8
 8006c9e:	eb4b 0609 	adc.w	r6, fp, r9
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	f04f 0200 	mov.w	r2, #0
 8006cac:	f04f 0300 	mov.w	r3, #0
 8006cb0:	f04f 0400 	mov.w	r4, #0
 8006cb4:	0094      	lsls	r4, r2, #2
 8006cb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006cba:	008b      	lsls	r3, r1, #2
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	4623      	mov	r3, r4
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	4631      	mov	r1, r6
 8006cc4:	f7f9 fafc 	bl	80002c0 <__aeabi_uldivmod>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	460c      	mov	r4, r1
 8006ccc:	461a      	mov	r2, r3
 8006cce:	4b52      	ldr	r3, [pc, #328]	; (8006e18 <UART_SetConfig+0x72c>)
 8006cd0:	fba3 2302 	umull	r2, r3, r3, r2
 8006cd4:	095b      	lsrs	r3, r3, #5
 8006cd6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	469b      	mov	fp, r3
 8006cde:	f04f 0c00 	mov.w	ip, #0
 8006ce2:	46d9      	mov	r9, fp
 8006ce4:	46e2      	mov	sl, ip
 8006ce6:	eb19 0309 	adds.w	r3, r9, r9
 8006cea:	eb4a 040a 	adc.w	r4, sl, sl
 8006cee:	4699      	mov	r9, r3
 8006cf0:	46a2      	mov	sl, r4
 8006cf2:	eb19 090b 	adds.w	r9, r9, fp
 8006cf6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006cfa:	f04f 0100 	mov.w	r1, #0
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d0e:	4689      	mov	r9, r1
 8006d10:	4692      	mov	sl, r2
 8006d12:	eb1b 0509 	adds.w	r5, fp, r9
 8006d16:	eb4c 060a 	adc.w	r6, ip, sl
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	f04f 0300 	mov.w	r3, #0
 8006d28:	f04f 0400 	mov.w	r4, #0
 8006d2c:	0094      	lsls	r4, r2, #2
 8006d2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d32:	008b      	lsls	r3, r1, #2
 8006d34:	461a      	mov	r2, r3
 8006d36:	4623      	mov	r3, r4
 8006d38:	4628      	mov	r0, r5
 8006d3a:	4631      	mov	r1, r6
 8006d3c:	f7f9 fac0 	bl	80002c0 <__aeabi_uldivmod>
 8006d40:	4603      	mov	r3, r0
 8006d42:	460c      	mov	r4, r1
 8006d44:	461a      	mov	r2, r3
 8006d46:	4b34      	ldr	r3, [pc, #208]	; (8006e18 <UART_SetConfig+0x72c>)
 8006d48:	fba3 1302 	umull	r1, r3, r3, r2
 8006d4c:	095b      	lsrs	r3, r3, #5
 8006d4e:	2164      	movs	r1, #100	; 0x64
 8006d50:	fb01 f303 	mul.w	r3, r1, r3
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	011b      	lsls	r3, r3, #4
 8006d58:	3332      	adds	r3, #50	; 0x32
 8006d5a:	4a2f      	ldr	r2, [pc, #188]	; (8006e18 <UART_SetConfig+0x72c>)
 8006d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d60:	095b      	lsrs	r3, r3, #5
 8006d62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d66:	4498      	add	r8, r3
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	469b      	mov	fp, r3
 8006d6c:	f04f 0c00 	mov.w	ip, #0
 8006d70:	46d9      	mov	r9, fp
 8006d72:	46e2      	mov	sl, ip
 8006d74:	eb19 0309 	adds.w	r3, r9, r9
 8006d78:	eb4a 040a 	adc.w	r4, sl, sl
 8006d7c:	4699      	mov	r9, r3
 8006d7e:	46a2      	mov	sl, r4
 8006d80:	eb19 090b 	adds.w	r9, r9, fp
 8006d84:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d88:	f04f 0100 	mov.w	r1, #0
 8006d8c:	f04f 0200 	mov.w	r2, #0
 8006d90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d9c:	4689      	mov	r9, r1
 8006d9e:	4692      	mov	sl, r2
 8006da0:	eb1b 0509 	adds.w	r5, fp, r9
 8006da4:	eb4c 060a 	adc.w	r6, ip, sl
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	4619      	mov	r1, r3
 8006dae:	f04f 0200 	mov.w	r2, #0
 8006db2:	f04f 0300 	mov.w	r3, #0
 8006db6:	f04f 0400 	mov.w	r4, #0
 8006dba:	0094      	lsls	r4, r2, #2
 8006dbc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006dc0:	008b      	lsls	r3, r1, #2
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	4623      	mov	r3, r4
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	4631      	mov	r1, r6
 8006dca:	f7f9 fa79 	bl	80002c0 <__aeabi_uldivmod>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	4b10      	ldr	r3, [pc, #64]	; (8006e18 <UART_SetConfig+0x72c>)
 8006dd6:	fba3 1302 	umull	r1, r3, r3, r2
 8006dda:	095b      	lsrs	r3, r3, #5
 8006ddc:	2164      	movs	r1, #100	; 0x64
 8006dde:	fb01 f303 	mul.w	r3, r1, r3
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	011b      	lsls	r3, r3, #4
 8006de6:	3332      	adds	r3, #50	; 0x32
 8006de8:	4a0b      	ldr	r2, [pc, #44]	; (8006e18 <UART_SetConfig+0x72c>)
 8006dea:	fba2 2303 	umull	r2, r3, r2, r3
 8006dee:	095b      	lsrs	r3, r3, #5
 8006df0:	f003 020f 	and.w	r2, r3, #15
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4442      	add	r2, r8
 8006dfa:	609a      	str	r2, [r3, #8]
}
 8006dfc:	e7ff      	b.n	8006dfe <UART_SetConfig+0x712>
 8006dfe:	bf00      	nop
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e08:	40011000 	.word	0x40011000
 8006e0c:	40011400 	.word	0x40011400
 8006e10:	40011800 	.word	0x40011800
 8006e14:	40011c00 	.word	0x40011c00
 8006e18:	51eb851f 	.word	0x51eb851f

08006e1c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e34:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	4b2f      	ldr	r3, [pc, #188]	; (8006ef8 <FSMC_NORSRAM_Init+0xdc>)
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006e46:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006e4c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006e52:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006e58:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8006e5e:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006e64:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006e6a:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006e70:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006e76:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8006e7c:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8006e82:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8006e88:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8006e8e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	2b08      	cmp	r3, #8
 8006e9c:	d103      	bne.n	8006ea6 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ea4:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68f9      	ldr	r1, [r7, #12]
 8006eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eba:	d10a      	bne.n	8006ed2 <FSMC_NORSRAM_Init+0xb6>
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d006      	beq.n	8006ed2 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d006      	beq.n	8006ee8 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	ffc00480 	.word	0xffc00480

08006efc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f16:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006f1e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f2a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006f32:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006f3a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006f44:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	3b02      	subs	r3, #2
 8006f4c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006f4e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f54:	4313      	orrs	r3, r2
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	1c5a      	adds	r2, r3, #1
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6979      	ldr	r1, [r7, #20]
 8006f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f74:	d10e      	bne.n	8006f94 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f7e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	051b      	lsls	r3, r3, #20
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	371c      	adds	r7, #28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
	...

08006fa4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fbc:	d122      	bne.n	8007004 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	4b15      	ldr	r3, [pc, #84]	; (8007020 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006fcc:	4013      	ands	r3, r2
 8006fce:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006fda:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006fe2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006fea:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006ff0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	6979      	ldr	r1, [r7, #20]
 8006ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007002:	e005      	b.n	8007010 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800700c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	371c      	adds	r7, #28
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	cff00000 	.word	0xcff00000

08007024 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007024:	b084      	sub	sp, #16
 8007026:	b480      	push	{r7}
 8007028:	b085      	sub	sp, #20
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	f107 001c 	add.w	r0, r7, #28
 8007032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007036:	2300      	movs	r3, #0
 8007038:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800703a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800703c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800703e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007042:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007044:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007046:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800704a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800704e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	4313      	orrs	r3, r2
 8007054:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800705e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	431a      	orrs	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	b004      	add	sp, #16
 8007078:	4770      	bx	lr

0800707a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007088:	4618      	mov	r0, r3
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b082      	sub	sp, #8
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2203      	movs	r2, #3
 80070c2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80070c4:	2002      	movs	r0, #2
 80070c6:	f7fb fb1d 	bl	8002704 <HAL_Delay>
  
  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0303 	and.w	r3, r3, #3
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800710e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007114:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800711a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	4313      	orrs	r3, r2
 8007120:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800712a:	f023 030f 	bic.w	r3, r3, #15
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	431a      	orrs	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	b2db      	uxtb	r3, r3
}
 8007152:	4618      	mov	r0, r3
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800715e:	b480      	push	{r7}
 8007160:	b085      	sub	sp, #20
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	3314      	adds	r3, #20
 800716c:	461a      	mov	r2, r3
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	4413      	add	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
}  
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800718e:	2300      	movs	r3, #0
 8007190:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80071aa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80071b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80071b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	431a      	orrs	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0

}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b088      	sub	sp, #32
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80071ea:	2310      	movs	r3, #16
 80071ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071ee:	2340      	movs	r3, #64	; 0x40
 80071f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071f2:	2300      	movs	r3, #0
 80071f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071fc:	f107 0308 	add.w	r3, r7, #8
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7ff ff74 	bl	80070f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007208:	f241 3288 	movw	r2, #5000	; 0x1388
 800720c:	2110      	movs	r1, #16
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f9fe 	bl	8007610 <SDMMC_GetCmdResp1>
 8007214:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007216:	69fb      	ldr	r3, [r7, #28]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3720      	adds	r7, #32
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b088      	sub	sp, #32
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800722e:	2311      	movs	r3, #17
 8007230:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007232:	2340      	movs	r3, #64	; 0x40
 8007234:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007236:	2300      	movs	r3, #0
 8007238:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800723a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800723e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007240:	f107 0308 	add.w	r3, r7, #8
 8007244:	4619      	mov	r1, r3
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7ff ff52 	bl	80070f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800724c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007250:	2111      	movs	r1, #17
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f9dc 	bl	8007610 <SDMMC_GetCmdResp1>
 8007258:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800725a:	69fb      	ldr	r3, [r7, #28]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3720      	adds	r7, #32
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b088      	sub	sp, #32
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007272:	2312      	movs	r3, #18
 8007274:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007276:	2340      	movs	r3, #64	; 0x40
 8007278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800727a:	2300      	movs	r3, #0
 800727c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800727e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007282:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007284:	f107 0308 	add.w	r3, r7, #8
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7ff ff30 	bl	80070f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007290:	f241 3288 	movw	r2, #5000	; 0x1388
 8007294:	2112      	movs	r1, #18
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f9ba 	bl	8007610 <SDMMC_GetCmdResp1>
 800729c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800729e:	69fb      	ldr	r3, [r7, #28]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3720      	adds	r7, #32
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b088      	sub	sp, #32
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80072b6:	2318      	movs	r3, #24
 80072b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072ba:	2340      	movs	r3, #64	; 0x40
 80072bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072be:	2300      	movs	r3, #0
 80072c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072c8:	f107 0308 	add.w	r3, r7, #8
 80072cc:	4619      	mov	r1, r3
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7ff ff0e 	bl	80070f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80072d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d8:	2118      	movs	r1, #24
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f998 	bl	8007610 <SDMMC_GetCmdResp1>
 80072e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072e2:	69fb      	ldr	r3, [r7, #28]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3720      	adds	r7, #32
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b088      	sub	sp, #32
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80072fa:	2319      	movs	r3, #25
 80072fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072fe:	2340      	movs	r3, #64	; 0x40
 8007300:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007302:	2300      	movs	r3, #0
 8007304:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800730a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800730c:	f107 0308 	add.w	r3, r7, #8
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7ff feec 	bl	80070f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007318:	f241 3288 	movw	r2, #5000	; 0x1388
 800731c:	2119      	movs	r1, #25
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f976 	bl	8007610 <SDMMC_GetCmdResp1>
 8007324:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007326:	69fb      	ldr	r3, [r7, #28]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3720      	adds	r7, #32
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007338:	2300      	movs	r3, #0
 800733a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800733c:	230c      	movs	r3, #12
 800733e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007340:	2340      	movs	r3, #64	; 0x40
 8007342:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007344:	2300      	movs	r3, #0
 8007346:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800734c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800734e:	f107 0308 	add.w	r3, r7, #8
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7ff fecb 	bl	80070f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800735a:	4a05      	ldr	r2, [pc, #20]	; (8007370 <SDMMC_CmdStopTransfer+0x40>)
 800735c:	210c      	movs	r1, #12
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f956 	bl	8007610 <SDMMC_GetCmdResp1>
 8007364:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007366:	69fb      	ldr	r3, [r7, #28]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3720      	adds	r7, #32
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	05f5e100 	.word	0x05f5e100

08007374 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b08a      	sub	sp, #40	; 0x28
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007384:	2307      	movs	r3, #7
 8007386:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007388:	2340      	movs	r3, #64	; 0x40
 800738a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800738c:	2300      	movs	r3, #0
 800738e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007394:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007396:	f107 0310 	add.w	r3, r7, #16
 800739a:	4619      	mov	r1, r3
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f7ff fea7 	bl	80070f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80073a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a6:	2107      	movs	r1, #7
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f931 	bl	8007610 <SDMMC_GetCmdResp1>
 80073ae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3728      	adds	r7, #40	; 0x28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b088      	sub	sp, #32
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80073ca:	2300      	movs	r3, #0
 80073cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073d8:	f107 0308 	add.w	r3, r7, #8
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7ff fe86 	bl	80070f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f8eb 	bl	80075c0 <SDMMC_GetCmdError>
 80073ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073ec:	69fb      	ldr	r3, [r7, #28]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3720      	adds	r7, #32
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b088      	sub	sp, #32
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80073fe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007402:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007404:	2308      	movs	r3, #8
 8007406:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007408:	2340      	movs	r3, #64	; 0x40
 800740a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800740c:	2300      	movs	r3, #0
 800740e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007414:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007416:	f107 0308 	add.w	r3, r7, #8
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff fe67 	bl	80070f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fad4 	bl	80079d0 <SDMMC_GetCmdResp7>
 8007428:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800742a:	69fb      	ldr	r3, [r7, #28]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3720      	adds	r7, #32
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b088      	sub	sp, #32
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007442:	2337      	movs	r3, #55	; 0x37
 8007444:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007446:	2340      	movs	r3, #64	; 0x40
 8007448:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800744a:	2300      	movs	r3, #0
 800744c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800744e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007452:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007454:	f107 0308 	add.w	r3, r7, #8
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff fe48 	bl	80070f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007460:	f241 3288 	movw	r2, #5000	; 0x1388
 8007464:	2137      	movs	r1, #55	; 0x37
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f8d2 	bl	8007610 <SDMMC_GetCmdResp1>
 800746c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800746e:	69fb      	ldr	r3, [r7, #28]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3720      	adds	r7, #32
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b088      	sub	sp, #32
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007488:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800748c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800748e:	2329      	movs	r3, #41	; 0x29
 8007490:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007492:	2340      	movs	r3, #64	; 0x40
 8007494:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007496:	2300      	movs	r3, #0
 8007498:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800749a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800749e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074a0:	f107 0308 	add.w	r3, r7, #8
 80074a4:	4619      	mov	r1, r3
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7ff fe22 	bl	80070f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f9e1 	bl	8007874 <SDMMC_GetCmdResp3>
 80074b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074b4:	69fb      	ldr	r3, [r7, #28]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3720      	adds	r7, #32
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b088      	sub	sp, #32
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80074ca:	2302      	movs	r3, #2
 80074cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80074ce:	23c0      	movs	r3, #192	; 0xc0
 80074d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074d2:	2300      	movs	r3, #0
 80074d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074dc:	f107 0308 	add.w	r3, r7, #8
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7ff fe04 	bl	80070f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f97d 	bl	80077e8 <SDMMC_GetCmdResp2>
 80074ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074f0:	69fb      	ldr	r3, [r7, #28]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3720      	adds	r7, #32
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b088      	sub	sp, #32
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007508:	2309      	movs	r3, #9
 800750a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800750c:	23c0      	movs	r3, #192	; 0xc0
 800750e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007510:	2300      	movs	r3, #0
 8007512:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007518:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800751a:	f107 0308 	add.w	r3, r7, #8
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7ff fde5 	bl	80070f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f95e 	bl	80077e8 <SDMMC_GetCmdResp2>
 800752c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800752e:	69fb      	ldr	r3, [r7, #28]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3720      	adds	r7, #32
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b088      	sub	sp, #32
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007542:	2300      	movs	r3, #0
 8007544:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007546:	2303      	movs	r3, #3
 8007548:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800754a:	2340      	movs	r3, #64	; 0x40
 800754c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800754e:	2300      	movs	r3, #0
 8007550:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007556:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007558:	f107 0308 	add.w	r3, r7, #8
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff fdc6 	bl	80070f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	2103      	movs	r1, #3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f9bd 	bl	80078e8 <SDMMC_GetCmdResp6>
 800756e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007570:	69fb      	ldr	r3, [r7, #28]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3720      	adds	r7, #32
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b088      	sub	sp, #32
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007588:	230d      	movs	r3, #13
 800758a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800758c:	2340      	movs	r3, #64	; 0x40
 800758e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007590:	2300      	movs	r3, #0
 8007592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007598:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800759a:	f107 0308 	add.w	r3, r7, #8
 800759e:	4619      	mov	r1, r3
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7ff fda5 	bl	80070f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80075a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075aa:	210d      	movs	r1, #13
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f82f 	bl	8007610 <SDMMC_GetCmdResp1>
 80075b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075b4:	69fb      	ldr	r3, [r7, #28]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3720      	adds	r7, #32
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
	...

080075c0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80075c0:	b490      	push	{r4, r7}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80075c8:	4b0f      	ldr	r3, [pc, #60]	; (8007608 <SDMMC_GetCmdError+0x48>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a0f      	ldr	r2, [pc, #60]	; (800760c <SDMMC_GetCmdError+0x4c>)
 80075ce:	fba2 2303 	umull	r2, r3, r2, r3
 80075d2:	0a5b      	lsrs	r3, r3, #9
 80075d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80075d8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80075dc:	4623      	mov	r3, r4
 80075de:	1e5c      	subs	r4, r3, #1
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d102      	bne.n	80075ea <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80075e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075e8:	e009      	b.n	80075fe <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0f2      	beq.n	80075dc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	22c5      	movs	r2, #197	; 0xc5
 80075fa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bc90      	pop	{r4, r7}
 8007606:	4770      	bx	lr
 8007608:	2000001c 	.word	0x2000001c
 800760c:	10624dd3 	.word	0x10624dd3

08007610 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007610:	b590      	push	{r4, r7, lr}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	460b      	mov	r3, r1
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800761e:	4b6f      	ldr	r3, [pc, #444]	; (80077dc <SDMMC_GetCmdResp1+0x1cc>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a6f      	ldr	r2, [pc, #444]	; (80077e0 <SDMMC_GetCmdResp1+0x1d0>)
 8007624:	fba2 2303 	umull	r2, r3, r2, r3
 8007628:	0a5b      	lsrs	r3, r3, #9
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007630:	4623      	mov	r3, r4
 8007632:	1e5c      	subs	r4, r3, #1
 8007634:	2b00      	cmp	r3, #0
 8007636:	d102      	bne.n	800763e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007638:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800763c:	e0c9      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007642:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0f0      	beq.n	8007630 <SDMMC_GetCmdResp1+0x20>
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1eb      	bne.n	8007630 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	2b00      	cmp	r3, #0
 8007662:	d004      	beq.n	800766e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2204      	movs	r2, #4
 8007668:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800766a:	2304      	movs	r3, #4
 800766c:	e0b1      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d004      	beq.n	8007684 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2201      	movs	r2, #1
 800767e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007680:	2301      	movs	r3, #1
 8007682:	e0a6      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	22c5      	movs	r2, #197	; 0xc5
 8007688:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f7ff fd5a 	bl	8007144 <SDIO_GetCommandResponse>
 8007690:	4603      	mov	r3, r0
 8007692:	461a      	mov	r2, r3
 8007694:	7afb      	ldrb	r3, [r7, #11]
 8007696:	4293      	cmp	r3, r2
 8007698:	d001      	beq.n	800769e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800769a:	2301      	movs	r3, #1
 800769c:	e099      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800769e:	2100      	movs	r1, #0
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f7ff fd5c 	bl	800715e <SDIO_GetResponse>
 80076a6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	4b4e      	ldr	r3, [pc, #312]	; (80077e4 <SDMMC_GetCmdResp1+0x1d4>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d101      	bne.n	80076b6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80076b2:	2300      	movs	r3, #0
 80076b4:	e08d      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	da02      	bge.n	80076c2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80076bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076c0:	e087      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80076cc:	2340      	movs	r3, #64	; 0x40
 80076ce:	e080      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80076da:	2380      	movs	r3, #128	; 0x80
 80076dc:	e079      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80076e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076ec:	e071      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80076f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076fc:	e069      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800770c:	e061      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007718:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800771c:	e059      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800772c:	e051      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d002      	beq.n	800773e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800773c:	e049      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007748:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800774c:	e041      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d002      	beq.n	800775e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8007758:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800775c:	e039      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007768:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800776c:	e031      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007778:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800777c:	e029      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007788:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800778c:	e021      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007798:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800779c:	e019      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80077a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80077ac:	e011      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80077b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80077bc:	e009      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f003 0308 	and.w	r3, r3, #8
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80077c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80077cc:	e001      	b.n	80077d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80077ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	371c      	adds	r7, #28
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd90      	pop	{r4, r7, pc}
 80077da:	bf00      	nop
 80077dc:	2000001c 	.word	0x2000001c
 80077e0:	10624dd3 	.word	0x10624dd3
 80077e4:	fdffe008 	.word	0xfdffe008

080077e8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80077e8:	b490      	push	{r4, r7}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077f0:	4b1e      	ldr	r3, [pc, #120]	; (800786c <SDMMC_GetCmdResp2+0x84>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a1e      	ldr	r2, [pc, #120]	; (8007870 <SDMMC_GetCmdResp2+0x88>)
 80077f6:	fba2 2303 	umull	r2, r3, r2, r3
 80077fa:	0a5b      	lsrs	r3, r3, #9
 80077fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007800:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007804:	4623      	mov	r3, r4
 8007806:	1e5c      	subs	r4, r3, #1
 8007808:	2b00      	cmp	r3, #0
 800780a:	d102      	bne.n	8007812 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800780c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007810:	e026      	b.n	8007860 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007816:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800781e:	2b00      	cmp	r3, #0
 8007820:	d0f0      	beq.n	8007804 <SDMMC_GetCmdResp2+0x1c>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1eb      	bne.n	8007804 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007830:	f003 0304 	and.w	r3, r3, #4
 8007834:	2b00      	cmp	r3, #0
 8007836:	d004      	beq.n	8007842 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2204      	movs	r2, #4
 800783c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800783e:	2304      	movs	r3, #4
 8007840:	e00e      	b.n	8007860 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d004      	beq.n	8007858 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007854:	2301      	movs	r3, #1
 8007856:	e003      	b.n	8007860 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	22c5      	movs	r2, #197	; 0xc5
 800785c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bc90      	pop	{r4, r7}
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	2000001c 	.word	0x2000001c
 8007870:	10624dd3 	.word	0x10624dd3

08007874 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007874:	b490      	push	{r4, r7}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800787c:	4b18      	ldr	r3, [pc, #96]	; (80078e0 <SDMMC_GetCmdResp3+0x6c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a18      	ldr	r2, [pc, #96]	; (80078e4 <SDMMC_GetCmdResp3+0x70>)
 8007882:	fba2 2303 	umull	r2, r3, r2, r3
 8007886:	0a5b      	lsrs	r3, r3, #9
 8007888:	f241 3288 	movw	r2, #5000	; 0x1388
 800788c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007890:	4623      	mov	r3, r4
 8007892:	1e5c      	subs	r4, r3, #1
 8007894:	2b00      	cmp	r3, #0
 8007896:	d102      	bne.n	800789e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007898:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800789c:	e01b      	b.n	80078d6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0f0      	beq.n	8007890 <SDMMC_GetCmdResp3+0x1c>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1eb      	bne.n	8007890 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d004      	beq.n	80078ce <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2204      	movs	r2, #4
 80078c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078ca:	2304      	movs	r3, #4
 80078cc:	e003      	b.n	80078d6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	22c5      	movs	r2, #197	; 0xc5
 80078d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bc90      	pop	{r4, r7}
 80078de:	4770      	bx	lr
 80078e0:	2000001c 	.word	0x2000001c
 80078e4:	10624dd3 	.word	0x10624dd3

080078e8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80078e8:	b590      	push	{r4, r7, lr}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	460b      	mov	r3, r1
 80078f2:	607a      	str	r2, [r7, #4]
 80078f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078f6:	4b34      	ldr	r3, [pc, #208]	; (80079c8 <SDMMC_GetCmdResp6+0xe0>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a34      	ldr	r2, [pc, #208]	; (80079cc <SDMMC_GetCmdResp6+0xe4>)
 80078fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007900:	0a5b      	lsrs	r3, r3, #9
 8007902:	f241 3288 	movw	r2, #5000	; 0x1388
 8007906:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800790a:	4623      	mov	r3, r4
 800790c:	1e5c      	subs	r4, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d102      	bne.n	8007918 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007912:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007916:	e052      	b.n	80079be <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007924:	2b00      	cmp	r3, #0
 8007926:	d0f0      	beq.n	800790a <SDMMC_GetCmdResp6+0x22>
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1eb      	bne.n	800790a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007936:	f003 0304 	and.w	r3, r3, #4
 800793a:	2b00      	cmp	r3, #0
 800793c:	d004      	beq.n	8007948 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2204      	movs	r2, #4
 8007942:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007944:	2304      	movs	r3, #4
 8007946:	e03a      	b.n	80079be <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b00      	cmp	r3, #0
 8007952:	d004      	beq.n	800795e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2201      	movs	r2, #1
 8007958:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800795a:	2301      	movs	r3, #1
 800795c:	e02f      	b.n	80079be <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f7ff fbf0 	bl	8007144 <SDIO_GetCommandResponse>
 8007964:	4603      	mov	r3, r0
 8007966:	461a      	mov	r2, r3
 8007968:	7afb      	ldrb	r3, [r7, #11]
 800796a:	4293      	cmp	r3, r2
 800796c:	d001      	beq.n	8007972 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800796e:	2301      	movs	r3, #1
 8007970:	e025      	b.n	80079be <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	22c5      	movs	r2, #197	; 0xc5
 8007976:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007978:	2100      	movs	r1, #0
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f7ff fbef 	bl	800715e <SDIO_GetResponse>
 8007980:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d106      	bne.n	800799a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	0c1b      	lsrs	r3, r3, #16
 8007990:	b29a      	uxth	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007996:	2300      	movs	r3, #0
 8007998:	e011      	b.n	80079be <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80079a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80079a8:	e009      	b.n	80079be <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80079b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079b8:	e001      	b.n	80079be <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80079ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80079be:	4618      	mov	r0, r3
 80079c0:	371c      	adds	r7, #28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd90      	pop	{r4, r7, pc}
 80079c6:	bf00      	nop
 80079c8:	2000001c 	.word	0x2000001c
 80079cc:	10624dd3 	.word	0x10624dd3

080079d0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80079d0:	b490      	push	{r4, r7}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079d8:	4b21      	ldr	r3, [pc, #132]	; (8007a60 <SDMMC_GetCmdResp7+0x90>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a21      	ldr	r2, [pc, #132]	; (8007a64 <SDMMC_GetCmdResp7+0x94>)
 80079de:	fba2 2303 	umull	r2, r3, r2, r3
 80079e2:	0a5b      	lsrs	r3, r3, #9
 80079e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80079ec:	4623      	mov	r3, r4
 80079ee:	1e5c      	subs	r4, r3, #1
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d102      	bne.n	80079fa <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079f8:	e02c      	b.n	8007a54 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079fe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d0f0      	beq.n	80079ec <SDMMC_GetCmdResp7+0x1c>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1eb      	bne.n	80079ec <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a18:	f003 0304 	and.w	r3, r3, #4
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d004      	beq.n	8007a2a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2204      	movs	r2, #4
 8007a24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a26:	2304      	movs	r3, #4
 8007a28:	e014      	b.n	8007a54 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d004      	beq.n	8007a40 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e009      	b.n	8007a54 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2240      	movs	r2, #64	; 0x40
 8007a50:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007a52:	2300      	movs	r3, #0
  
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bc90      	pop	{r4, r7}
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	2000001c 	.word	0x2000001c
 8007a64:	10624dd3 	.word	0x10624dd3

08007a68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007a6c:	4904      	ldr	r1, [pc, #16]	; (8007a80 <MX_FATFS_Init+0x18>)
 8007a6e:	4805      	ldr	r0, [pc, #20]	; (8007a84 <MX_FATFS_Init+0x1c>)
 8007a70:	f003 f8c4 	bl	800abfc <FATFS_LinkDriver>
 8007a74:	4603      	mov	r3, r0
 8007a76:	461a      	mov	r2, r3
 8007a78:	4b03      	ldr	r3, [pc, #12]	; (8007a88 <MX_FATFS_Init+0x20>)
 8007a7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007a7c:	bf00      	nop
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	20004fbc 	.word	0x20004fbc
 8007a84:	0800bea8 	.word	0x0800bea8
 8007a88:	20004fb8 	.word	0x20004fb8

08007a8c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007a90:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007aa6:	f000 f86b 	bl	8007b80 <BSP_SD_IsDetected>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d001      	beq.n	8007ab4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e005      	b.n	8007ac0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007ab4:	4804      	ldr	r0, [pc, #16]	; (8007ac8 <BSP_SD_Init+0x2c>)
 8007ab6:	f7fd fb39 	bl	800512c <HAL_SD_Init>
 8007aba:	4603      	mov	r3, r0
 8007abc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8007abe:	79fb      	ldrb	r3, [r7, #7]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	20003614 	.word	0x20003614

08007acc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b088      	sub	sp, #32
 8007ad0:	af02      	add	r7, sp, #8
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
 8007ad8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	68f9      	ldr	r1, [r7, #12]
 8007ae8:	4806      	ldr	r0, [pc, #24]	; (8007b04 <BSP_SD_ReadBlocks+0x38>)
 8007aea:	f7fd fbaf 	bl	800524c <HAL_SD_ReadBlocks>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3718      	adds	r7, #24
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	20003614 	.word	0x20003614

08007b08 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af02      	add	r7, sp, #8
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
 8007b14:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	68f9      	ldr	r1, [r7, #12]
 8007b24:	4806      	ldr	r0, [pc, #24]	; (8007b40 <BSP_SD_WriteBlocks+0x38>)
 8007b26:	f7fd fd89 	bl	800563c <HAL_SD_WriteBlocks>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20003614 	.word	0x20003614

08007b44 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007b48:	4805      	ldr	r0, [pc, #20]	; (8007b60 <BSP_SD_GetCardState+0x1c>)
 8007b4a:	f7fe f8e7 	bl	8005d1c <HAL_SD_GetCardState>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	bf14      	ite	ne
 8007b54:	2301      	movne	r3, #1
 8007b56:	2300      	moveq	r3, #0
 8007b58:	b2db      	uxtb	r3, r3
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20003614 	.word	0x20003614

08007b64 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007b6c:	6879      	ldr	r1, [r7, #4]
 8007b6e:	4803      	ldr	r0, [pc, #12]	; (8007b7c <BSP_SD_GetCardInfo+0x18>)
 8007b70:	f7fe f8a8 	bl	8005cc4 <HAL_SD_GetCardInfo>
}
 8007b74:	bf00      	nop
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	20003614 	.word	0x20003614

08007b80 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007b86:	2301      	movs	r3, #1
 8007b88:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007b8a:	f000 f80b 	bl	8007ba4 <BSP_PlatformIsDetected>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d101      	bne.n	8007b98 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007b94:	2300      	movs	r3, #0
 8007b96:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007b98:	79fb      	ldrb	r3, [r7, #7]
 8007b9a:	b2db      	uxtb	r3, r3
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007baa:	2301      	movs	r3, #1
 8007bac:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007bae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bb2:	4806      	ldr	r0, [pc, #24]	; (8007bcc <BSP_PlatformIsDetected+0x28>)
 8007bb4:	f7fc fb2c 	bl	8004210 <HAL_GPIO_ReadPin>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	40021400 	.word	0x40021400

08007bd0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007bda:	4b0b      	ldr	r3, [pc, #44]	; (8007c08 <SD_CheckStatus+0x38>)
 8007bdc:	2201      	movs	r2, #1
 8007bde:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007be0:	f7ff ffb0 	bl	8007b44 <BSP_SD_GetCardState>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d107      	bne.n	8007bfa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007bea:	4b07      	ldr	r3, [pc, #28]	; (8007c08 <SD_CheckStatus+0x38>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	f023 0301 	bic.w	r3, r3, #1
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	4b04      	ldr	r3, [pc, #16]	; (8007c08 <SD_CheckStatus+0x38>)
 8007bf8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007bfa:	4b03      	ldr	r3, [pc, #12]	; (8007c08 <SD_CheckStatus+0x38>)
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	b2db      	uxtb	r3, r3
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	20000025 	.word	0x20000025

08007c0c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	4603      	mov	r3, r0
 8007c14:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007c16:	4b0b      	ldr	r3, [pc, #44]	; (8007c44 <SD_initialize+0x38>)
 8007c18:	2201      	movs	r2, #1
 8007c1a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007c1c:	f7ff ff3e 	bl	8007a9c <BSP_SD_Init>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d107      	bne.n	8007c36 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007c26:	79fb      	ldrb	r3, [r7, #7]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7ff ffd1 	bl	8007bd0 <SD_CheckStatus>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	461a      	mov	r2, r3
 8007c32:	4b04      	ldr	r3, [pc, #16]	; (8007c44 <SD_initialize+0x38>)
 8007c34:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007c36:	4b03      	ldr	r3, [pc, #12]	; (8007c44 <SD_initialize+0x38>)
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	b2db      	uxtb	r3, r3
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	20000025 	.word	0x20000025

08007c48 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	4603      	mov	r3, r0
 8007c50:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007c52:	79fb      	ldrb	r3, [r7, #7]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7ff ffbb 	bl	8007bd0 <SD_CheckStatus>
 8007c5a:	4603      	mov	r3, r0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60b9      	str	r1, [r7, #8]
 8007c6c:	607a      	str	r2, [r7, #4]
 8007c6e:	603b      	str	r3, [r7, #0]
 8007c70:	4603      	mov	r3, r0
 8007c72:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007c78:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	6879      	ldr	r1, [r7, #4]
 8007c80:	68b8      	ldr	r0, [r7, #8]
 8007c82:	f7ff ff23 	bl	8007acc <BSP_SD_ReadBlocks>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d107      	bne.n	8007c9c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007c8c:	bf00      	nop
 8007c8e:	f7ff ff59 	bl	8007b44 <BSP_SD_GetCardState>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1fa      	bne.n	8007c8e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3718      	adds	r7, #24
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b086      	sub	sp, #24
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
 8007cb0:	603b      	str	r3, [r7, #0]
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8007cba:	f04f 33ff 	mov.w	r3, #4294967295
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	6879      	ldr	r1, [r7, #4]
 8007cc2:	68b8      	ldr	r0, [r7, #8]
 8007cc4:	f7ff ff20 	bl	8007b08 <BSP_SD_WriteBlocks>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d107      	bne.n	8007cde <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8007cce:	bf00      	nop
 8007cd0:	f7ff ff38 	bl	8007b44 <BSP_SD_GetCardState>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1fa      	bne.n	8007cd0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3718      	adds	r7, #24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08c      	sub	sp, #48	; 0x30
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	4603      	mov	r3, r0
 8007cf0:	603a      	str	r2, [r7, #0]
 8007cf2:	71fb      	strb	r3, [r7, #7]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007cfe:	4b25      	ldr	r3, [pc, #148]	; (8007d94 <SD_ioctl+0xac>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <SD_ioctl+0x28>
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e03c      	b.n	8007d8a <SD_ioctl+0xa2>

  switch (cmd)
 8007d10:	79bb      	ldrb	r3, [r7, #6]
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d834      	bhi.n	8007d80 <SD_ioctl+0x98>
 8007d16:	a201      	add	r2, pc, #4	; (adr r2, 8007d1c <SD_ioctl+0x34>)
 8007d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1c:	08007d2d 	.word	0x08007d2d
 8007d20:	08007d35 	.word	0x08007d35
 8007d24:	08007d4d 	.word	0x08007d4d
 8007d28:	08007d67 	.word	0x08007d67
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d32:	e028      	b.n	8007d86 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d34:	f107 030c 	add.w	r3, r7, #12
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7ff ff13 	bl	8007b64 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d4a:	e01c      	b.n	8007d86 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d4c:	f107 030c 	add.w	r3, r7, #12
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7ff ff07 	bl	8007b64 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d64:	e00f      	b.n	8007d86 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d66:	f107 030c 	add.w	r3, r7, #12
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff fefa 	bl	8007b64 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d72:	0a5a      	lsrs	r2, r3, #9
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d7e:	e002      	b.n	8007d86 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007d80:	2304      	movs	r3, #4
 8007d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007d86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3730      	adds	r7, #48	; 0x30
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	20000025 	.word	0x20000025

08007d98 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	4603      	mov	r3, r0
 8007da0:	6039      	str	r1, [r7, #0]
 8007da2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007da4:	88fb      	ldrh	r3, [r7, #6]
 8007da6:	2b7f      	cmp	r3, #127	; 0x7f
 8007da8:	d802      	bhi.n	8007db0 <ff_convert+0x18>
		c = chr;
 8007daa:	88fb      	ldrh	r3, [r7, #6]
 8007dac:	81fb      	strh	r3, [r7, #14]
 8007dae:	e025      	b.n	8007dfc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00b      	beq.n	8007dce <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007db6:	88fb      	ldrh	r3, [r7, #6]
 8007db8:	2bff      	cmp	r3, #255	; 0xff
 8007dba:	d805      	bhi.n	8007dc8 <ff_convert+0x30>
 8007dbc:	88fb      	ldrh	r3, [r7, #6]
 8007dbe:	3b80      	subs	r3, #128	; 0x80
 8007dc0:	4a12      	ldr	r2, [pc, #72]	; (8007e0c <ff_convert+0x74>)
 8007dc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dc6:	e000      	b.n	8007dca <ff_convert+0x32>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	81fb      	strh	r3, [r7, #14]
 8007dcc:	e016      	b.n	8007dfc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007dce:	2300      	movs	r3, #0
 8007dd0:	81fb      	strh	r3, [r7, #14]
 8007dd2:	e009      	b.n	8007de8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007dd4:	89fb      	ldrh	r3, [r7, #14]
 8007dd6:	4a0d      	ldr	r2, [pc, #52]	; (8007e0c <ff_convert+0x74>)
 8007dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ddc:	88fa      	ldrh	r2, [r7, #6]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d006      	beq.n	8007df0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007de2:	89fb      	ldrh	r3, [r7, #14]
 8007de4:	3301      	adds	r3, #1
 8007de6:	81fb      	strh	r3, [r7, #14]
 8007de8:	89fb      	ldrh	r3, [r7, #14]
 8007dea:	2b7f      	cmp	r3, #127	; 0x7f
 8007dec:	d9f2      	bls.n	8007dd4 <ff_convert+0x3c>
 8007dee:	e000      	b.n	8007df2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007df0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007df2:	89fb      	ldrh	r3, [r7, #14]
 8007df4:	3380      	adds	r3, #128	; 0x80
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007dfc:	89fb      	ldrh	r3, [r7, #14]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	0800bebc 	.word	0x0800bebc

08007e10 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	4603      	mov	r3, r0
 8007e18:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007e1a:	88fb      	ldrh	r3, [r7, #6]
 8007e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e20:	d201      	bcs.n	8007e26 <ff_wtoupper+0x16>
 8007e22:	4b3e      	ldr	r3, [pc, #248]	; (8007f1c <ff_wtoupper+0x10c>)
 8007e24:	e000      	b.n	8007e28 <ff_wtoupper+0x18>
 8007e26:	4b3e      	ldr	r3, [pc, #248]	; (8007f20 <ff_wtoupper+0x110>)
 8007e28:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	1c9a      	adds	r2, r3, #2
 8007e2e:	617a      	str	r2, [r7, #20]
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007e34:	8a7b      	ldrh	r3, [r7, #18]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d068      	beq.n	8007f0c <ff_wtoupper+0xfc>
 8007e3a:	88fa      	ldrh	r2, [r7, #6]
 8007e3c:	8a7b      	ldrh	r3, [r7, #18]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d364      	bcc.n	8007f0c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	1c9a      	adds	r2, r3, #2
 8007e46:	617a      	str	r2, [r7, #20]
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	823b      	strh	r3, [r7, #16]
 8007e4c:	8a3b      	ldrh	r3, [r7, #16]
 8007e4e:	0a1b      	lsrs	r3, r3, #8
 8007e50:	81fb      	strh	r3, [r7, #14]
 8007e52:	8a3b      	ldrh	r3, [r7, #16]
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007e58:	88fa      	ldrh	r2, [r7, #6]
 8007e5a:	8a79      	ldrh	r1, [r7, #18]
 8007e5c:	8a3b      	ldrh	r3, [r7, #16]
 8007e5e:	440b      	add	r3, r1
 8007e60:	429a      	cmp	r2, r3
 8007e62:	da49      	bge.n	8007ef8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007e64:	89fb      	ldrh	r3, [r7, #14]
 8007e66:	2b08      	cmp	r3, #8
 8007e68:	d84f      	bhi.n	8007f0a <ff_wtoupper+0xfa>
 8007e6a:	a201      	add	r2, pc, #4	; (adr r2, 8007e70 <ff_wtoupper+0x60>)
 8007e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e70:	08007e95 	.word	0x08007e95
 8007e74:	08007ea7 	.word	0x08007ea7
 8007e78:	08007ebd 	.word	0x08007ebd
 8007e7c:	08007ec5 	.word	0x08007ec5
 8007e80:	08007ecd 	.word	0x08007ecd
 8007e84:	08007ed5 	.word	0x08007ed5
 8007e88:	08007edd 	.word	0x08007edd
 8007e8c:	08007ee5 	.word	0x08007ee5
 8007e90:	08007eed 	.word	0x08007eed
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007e94:	88fa      	ldrh	r2, [r7, #6]
 8007e96:	8a7b      	ldrh	r3, [r7, #18]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	005b      	lsls	r3, r3, #1
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	80fb      	strh	r3, [r7, #6]
 8007ea4:	e027      	b.n	8007ef6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007ea6:	88fa      	ldrh	r2, [r7, #6]
 8007ea8:	8a7b      	ldrh	r3, [r7, #18]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	88fa      	ldrh	r2, [r7, #6]
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	80fb      	strh	r3, [r7, #6]
 8007eba:	e01c      	b.n	8007ef6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007ebc:	88fb      	ldrh	r3, [r7, #6]
 8007ebe:	3b10      	subs	r3, #16
 8007ec0:	80fb      	strh	r3, [r7, #6]
 8007ec2:	e018      	b.n	8007ef6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007ec4:	88fb      	ldrh	r3, [r7, #6]
 8007ec6:	3b20      	subs	r3, #32
 8007ec8:	80fb      	strh	r3, [r7, #6]
 8007eca:	e014      	b.n	8007ef6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007ecc:	88fb      	ldrh	r3, [r7, #6]
 8007ece:	3b30      	subs	r3, #48	; 0x30
 8007ed0:	80fb      	strh	r3, [r7, #6]
 8007ed2:	e010      	b.n	8007ef6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007ed4:	88fb      	ldrh	r3, [r7, #6]
 8007ed6:	3b1a      	subs	r3, #26
 8007ed8:	80fb      	strh	r3, [r7, #6]
 8007eda:	e00c      	b.n	8007ef6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007edc:	88fb      	ldrh	r3, [r7, #6]
 8007ede:	3308      	adds	r3, #8
 8007ee0:	80fb      	strh	r3, [r7, #6]
 8007ee2:	e008      	b.n	8007ef6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007ee4:	88fb      	ldrh	r3, [r7, #6]
 8007ee6:	3b50      	subs	r3, #80	; 0x50
 8007ee8:	80fb      	strh	r3, [r7, #6]
 8007eea:	e004      	b.n	8007ef6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007eec:	88fb      	ldrh	r3, [r7, #6]
 8007eee:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007ef2:	80fb      	strh	r3, [r7, #6]
 8007ef4:	bf00      	nop
			}
			break;
 8007ef6:	e008      	b.n	8007f0a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007ef8:	89fb      	ldrh	r3, [r7, #14]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d195      	bne.n	8007e2a <ff_wtoupper+0x1a>
 8007efe:	8a3b      	ldrh	r3, [r7, #16]
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	4413      	add	r3, r2
 8007f06:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007f08:	e78f      	b.n	8007e2a <ff_wtoupper+0x1a>
			break;
 8007f0a:	bf00      	nop
	}

	return chr;
 8007f0c:	88fb      	ldrh	r3, [r7, #6]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	371c      	adds	r7, #28
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	0800bfbc 	.word	0x0800bfbc
 8007f20:	0800c1b0 	.word	0x0800c1b0

08007f24 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007f2e:	79fb      	ldrb	r3, [r7, #7]
 8007f30:	4a08      	ldr	r2, [pc, #32]	; (8007f54 <disk_status+0x30>)
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	79fa      	ldrb	r2, [r7, #7]
 8007f3c:	4905      	ldr	r1, [pc, #20]	; (8007f54 <disk_status+0x30>)
 8007f3e:	440a      	add	r2, r1
 8007f40:	7a12      	ldrb	r2, [r2, #8]
 8007f42:	4610      	mov	r0, r2
 8007f44:	4798      	blx	r3
 8007f46:	4603      	mov	r3, r0
 8007f48:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	20000340 	.word	0x20000340

08007f58 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007f66:	79fb      	ldrb	r3, [r7, #7]
 8007f68:	4a0d      	ldr	r2, [pc, #52]	; (8007fa0 <disk_initialize+0x48>)
 8007f6a:	5cd3      	ldrb	r3, [r2, r3]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d111      	bne.n	8007f94 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007f70:	79fb      	ldrb	r3, [r7, #7]
 8007f72:	4a0b      	ldr	r2, [pc, #44]	; (8007fa0 <disk_initialize+0x48>)
 8007f74:	2101      	movs	r1, #1
 8007f76:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007f78:	79fb      	ldrb	r3, [r7, #7]
 8007f7a:	4a09      	ldr	r2, [pc, #36]	; (8007fa0 <disk_initialize+0x48>)
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	79fa      	ldrb	r2, [r7, #7]
 8007f86:	4906      	ldr	r1, [pc, #24]	; (8007fa0 <disk_initialize+0x48>)
 8007f88:	440a      	add	r2, r1
 8007f8a:	7a12      	ldrb	r2, [r2, #8]
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	4798      	blx	r3
 8007f90:	4603      	mov	r3, r0
 8007f92:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20000340 	.word	0x20000340

08007fa4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007fa4:	b590      	push	{r4, r7, lr}
 8007fa6:	b087      	sub	sp, #28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60b9      	str	r1, [r7, #8]
 8007fac:	607a      	str	r2, [r7, #4]
 8007fae:	603b      	str	r3, [r7, #0]
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
 8007fb6:	4a0a      	ldr	r2, [pc, #40]	; (8007fe0 <disk_read+0x3c>)
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	689c      	ldr	r4, [r3, #8]
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
 8007fc2:	4a07      	ldr	r2, [pc, #28]	; (8007fe0 <disk_read+0x3c>)
 8007fc4:	4413      	add	r3, r2
 8007fc6:	7a18      	ldrb	r0, [r3, #8]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	68b9      	ldr	r1, [r7, #8]
 8007fce:	47a0      	blx	r4
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	371c      	adds	r7, #28
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd90      	pop	{r4, r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20000340 	.word	0x20000340

08007fe4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007fe4:	b590      	push	{r4, r7, lr}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	607a      	str	r2, [r7, #4]
 8007fee:	603b      	str	r3, [r7, #0]
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
 8007ff6:	4a0a      	ldr	r2, [pc, #40]	; (8008020 <disk_write+0x3c>)
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	68dc      	ldr	r4, [r3, #12]
 8008000:	7bfb      	ldrb	r3, [r7, #15]
 8008002:	4a07      	ldr	r2, [pc, #28]	; (8008020 <disk_write+0x3c>)
 8008004:	4413      	add	r3, r2
 8008006:	7a18      	ldrb	r0, [r3, #8]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	68b9      	ldr	r1, [r7, #8]
 800800e:	47a0      	blx	r4
 8008010:	4603      	mov	r3, r0
 8008012:	75fb      	strb	r3, [r7, #23]
  return res;
 8008014:	7dfb      	ldrb	r3, [r7, #23]
}
 8008016:	4618      	mov	r0, r3
 8008018:	371c      	adds	r7, #28
 800801a:	46bd      	mov	sp, r7
 800801c:	bd90      	pop	{r4, r7, pc}
 800801e:	bf00      	nop
 8008020:	20000340 	.word	0x20000340

08008024 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	4603      	mov	r3, r0
 800802c:	603a      	str	r2, [r7, #0]
 800802e:	71fb      	strb	r3, [r7, #7]
 8008030:	460b      	mov	r3, r1
 8008032:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008034:	79fb      	ldrb	r3, [r7, #7]
 8008036:	4a09      	ldr	r2, [pc, #36]	; (800805c <disk_ioctl+0x38>)
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4413      	add	r3, r2
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	79fa      	ldrb	r2, [r7, #7]
 8008042:	4906      	ldr	r1, [pc, #24]	; (800805c <disk_ioctl+0x38>)
 8008044:	440a      	add	r2, r1
 8008046:	7a10      	ldrb	r0, [r2, #8]
 8008048:	79b9      	ldrb	r1, [r7, #6]
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	4798      	blx	r3
 800804e:	4603      	mov	r3, r0
 8008050:	73fb      	strb	r3, [r7, #15]
  return res;
 8008052:	7bfb      	ldrb	r3, [r7, #15]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	20000340 	.word	0x20000340

08008060 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	3301      	adds	r3, #1
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008070:	89fb      	ldrh	r3, [r7, #14]
 8008072:	021b      	lsls	r3, r3, #8
 8008074:	b21a      	sxth	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	b21b      	sxth	r3, r3
 800807c:	4313      	orrs	r3, r2
 800807e:	b21b      	sxth	r3, r3
 8008080:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008082:	89fb      	ldrh	r3, [r7, #14]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	3303      	adds	r3, #3
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	021b      	lsls	r3, r3, #8
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	3202      	adds	r2, #2
 80080a8:	7812      	ldrb	r2, [r2, #0]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	021b      	lsls	r3, r3, #8
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	3201      	adds	r2, #1
 80080b6:	7812      	ldrb	r2, [r2, #0]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	021b      	lsls	r3, r3, #8
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	7812      	ldrb	r2, [r2, #0]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	60fb      	str	r3, [r7, #12]
	return rv;
 80080c8:	68fb      	ldr	r3, [r7, #12]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80080d6:	b480      	push	{r7}
 80080d8:	b083      	sub	sp, #12
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	460b      	mov	r3, r1
 80080e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	1c5a      	adds	r2, r3, #1
 80080e6:	607a      	str	r2, [r7, #4]
 80080e8:	887a      	ldrh	r2, [r7, #2]
 80080ea:	b2d2      	uxtb	r2, r2
 80080ec:	701a      	strb	r2, [r3, #0]
 80080ee:	887b      	ldrh	r3, [r7, #2]
 80080f0:	0a1b      	lsrs	r3, r3, #8
 80080f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	1c5a      	adds	r2, r3, #1
 80080f8:	607a      	str	r2, [r7, #4]
 80080fa:	887a      	ldrh	r2, [r7, #2]
 80080fc:	b2d2      	uxtb	r2, r2
 80080fe:	701a      	strb	r2, [r3, #0]
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	607a      	str	r2, [r7, #4]
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	b2d2      	uxtb	r2, r2
 8008120:	701a      	strb	r2, [r3, #0]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	0a1b      	lsrs	r3, r3, #8
 8008126:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	607a      	str	r2, [r7, #4]
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	b2d2      	uxtb	r2, r2
 8008132:	701a      	strb	r2, [r3, #0]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	0a1b      	lsrs	r3, r3, #8
 8008138:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	607a      	str	r2, [r7, #4]
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	b2d2      	uxtb	r2, r2
 8008144:	701a      	strb	r2, [r3, #0]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	0a1b      	lsrs	r3, r3, #8
 800814a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	1c5a      	adds	r2, r3, #1
 8008150:	607a      	str	r2, [r7, #4]
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	b2d2      	uxtb	r2, r2
 8008156:	701a      	strb	r2, [r3, #0]
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008164:	b480      	push	{r7}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00d      	beq.n	800819a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	1c53      	adds	r3, r2, #1
 8008182:	613b      	str	r3, [r7, #16]
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	1c59      	adds	r1, r3, #1
 8008188:	6179      	str	r1, [r7, #20]
 800818a:	7812      	ldrb	r2, [r2, #0]
 800818c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	3b01      	subs	r3, #1
 8008192:	607b      	str	r3, [r7, #4]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1f1      	bne.n	800817e <mem_cpy+0x1a>
	}
}
 800819a:	bf00      	nop
 800819c:	371c      	adds	r7, #28
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80081a6:	b480      	push	{r7}
 80081a8:	b087      	sub	sp, #28
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	60f8      	str	r0, [r7, #12]
 80081ae:	60b9      	str	r1, [r7, #8]
 80081b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	617a      	str	r2, [r7, #20]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	b2d2      	uxtb	r2, r2
 80081c0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	3b01      	subs	r3, #1
 80081c6:	607b      	str	r3, [r7, #4]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1f3      	bne.n	80081b6 <mem_set+0x10>
}
 80081ce:	bf00      	nop
 80081d0:	371c      	adds	r7, #28
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80081da:	b480      	push	{r7}
 80081dc:	b089      	sub	sp, #36	; 0x24
 80081de:	af00      	add	r7, sp, #0
 80081e0:	60f8      	str	r0, [r7, #12]
 80081e2:	60b9      	str	r1, [r7, #8]
 80081e4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	61fb      	str	r3, [r7, #28]
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80081ee:	2300      	movs	r3, #0
 80081f0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	61fa      	str	r2, [r7, #28]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	4619      	mov	r1, r3
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	1c5a      	adds	r2, r3, #1
 8008200:	61ba      	str	r2, [r7, #24]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	1acb      	subs	r3, r1, r3
 8008206:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	3b01      	subs	r3, #1
 800820c:	607b      	str	r3, [r7, #4]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <mem_cmp+0x40>
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d0eb      	beq.n	80081f2 <mem_cmp+0x18>

	return r;
 800821a:	697b      	ldr	r3, [r7, #20]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3724      	adds	r7, #36	; 0x24
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008232:	e002      	b.n	800823a <chk_chr+0x12>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	3301      	adds	r3, #1
 8008238:	607b      	str	r3, [r7, #4]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d005      	beq.n	800824e <chk_chr+0x26>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	461a      	mov	r2, r3
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	4293      	cmp	r3, r2
 800824c:	d1f2      	bne.n	8008234 <chk_chr+0xc>
	return *str;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	781b      	ldrb	r3, [r3, #0]
}
 8008252:	4618      	mov	r0, r3
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
	...

08008260 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800826a:	2300      	movs	r3, #0
 800826c:	60bb      	str	r3, [r7, #8]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	60fb      	str	r3, [r7, #12]
 8008272:	e029      	b.n	80082c8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008274:	4a27      	ldr	r2, [pc, #156]	; (8008314 <chk_lock+0xb4>)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	011b      	lsls	r3, r3, #4
 800827a:	4413      	add	r3, r2
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d01d      	beq.n	80082be <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008282:	4a24      	ldr	r2, [pc, #144]	; (8008314 <chk_lock+0xb4>)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	011b      	lsls	r3, r3, #4
 8008288:	4413      	add	r3, r2
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	429a      	cmp	r2, r3
 8008292:	d116      	bne.n	80082c2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008294:	4a1f      	ldr	r2, [pc, #124]	; (8008314 <chk_lock+0xb4>)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	011b      	lsls	r3, r3, #4
 800829a:	4413      	add	r3, r2
 800829c:	3304      	adds	r3, #4
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d10c      	bne.n	80082c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80082a8:	4a1a      	ldr	r2, [pc, #104]	; (8008314 <chk_lock+0xb4>)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	011b      	lsls	r3, r3, #4
 80082ae:	4413      	add	r3, r2
 80082b0:	3308      	adds	r3, #8
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d102      	bne.n	80082c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80082bc:	e007      	b.n	80082ce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80082be:	2301      	movs	r3, #1
 80082c0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	3301      	adds	r3, #1
 80082c6:	60fb      	str	r3, [r7, #12]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d9d2      	bls.n	8008274 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d109      	bne.n	80082e8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d102      	bne.n	80082e0 <chk_lock+0x80>
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d101      	bne.n	80082e4 <chk_lock+0x84>
 80082e0:	2300      	movs	r3, #0
 80082e2:	e010      	b.n	8008306 <chk_lock+0xa6>
 80082e4:	2312      	movs	r3, #18
 80082e6:	e00e      	b.n	8008306 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d108      	bne.n	8008300 <chk_lock+0xa0>
 80082ee:	4a09      	ldr	r2, [pc, #36]	; (8008314 <chk_lock+0xb4>)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	011b      	lsls	r3, r3, #4
 80082f4:	4413      	add	r3, r2
 80082f6:	330c      	adds	r3, #12
 80082f8:	881b      	ldrh	r3, [r3, #0]
 80082fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082fe:	d101      	bne.n	8008304 <chk_lock+0xa4>
 8008300:	2310      	movs	r3, #16
 8008302:	e000      	b.n	8008306 <chk_lock+0xa6>
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	20000120 	.word	0x20000120

08008318 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800831e:	2300      	movs	r3, #0
 8008320:	607b      	str	r3, [r7, #4]
 8008322:	e002      	b.n	800832a <enq_lock+0x12>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	3301      	adds	r3, #1
 8008328:	607b      	str	r3, [r7, #4]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d806      	bhi.n	800833e <enq_lock+0x26>
 8008330:	4a09      	ldr	r2, [pc, #36]	; (8008358 <enq_lock+0x40>)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	011b      	lsls	r3, r3, #4
 8008336:	4413      	add	r3, r2
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1f2      	bne.n	8008324 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b02      	cmp	r3, #2
 8008342:	bf14      	ite	ne
 8008344:	2301      	movne	r3, #1
 8008346:	2300      	moveq	r3, #0
 8008348:	b2db      	uxtb	r3, r3
}
 800834a:	4618      	mov	r0, r3
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	20000120 	.word	0x20000120

0800835c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008366:	2300      	movs	r3, #0
 8008368:	60fb      	str	r3, [r7, #12]
 800836a:	e01f      	b.n	80083ac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800836c:	4a41      	ldr	r2, [pc, #260]	; (8008474 <inc_lock+0x118>)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	011b      	lsls	r3, r3, #4
 8008372:	4413      	add	r3, r2
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	429a      	cmp	r2, r3
 800837c:	d113      	bne.n	80083a6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800837e:	4a3d      	ldr	r2, [pc, #244]	; (8008474 <inc_lock+0x118>)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	011b      	lsls	r3, r3, #4
 8008384:	4413      	add	r3, r2
 8008386:	3304      	adds	r3, #4
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800838e:	429a      	cmp	r2, r3
 8008390:	d109      	bne.n	80083a6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008392:	4a38      	ldr	r2, [pc, #224]	; (8008474 <inc_lock+0x118>)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	011b      	lsls	r3, r3, #4
 8008398:	4413      	add	r3, r2
 800839a:	3308      	adds	r3, #8
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d006      	beq.n	80083b4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	3301      	adds	r3, #1
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d9dc      	bls.n	800836c <inc_lock+0x10>
 80083b2:	e000      	b.n	80083b6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80083b4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d132      	bne.n	8008422 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80083bc:	2300      	movs	r3, #0
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	e002      	b.n	80083c8 <inc_lock+0x6c>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	3301      	adds	r3, #1
 80083c6:	60fb      	str	r3, [r7, #12]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d806      	bhi.n	80083dc <inc_lock+0x80>
 80083ce:	4a29      	ldr	r2, [pc, #164]	; (8008474 <inc_lock+0x118>)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	011b      	lsls	r3, r3, #4
 80083d4:	4413      	add	r3, r2
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1f2      	bne.n	80083c2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d101      	bne.n	80083e6 <inc_lock+0x8a>
 80083e2:	2300      	movs	r3, #0
 80083e4:	e040      	b.n	8008468 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	4922      	ldr	r1, [pc, #136]	; (8008474 <inc_lock+0x118>)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	011b      	lsls	r3, r3, #4
 80083f0:	440b      	add	r3, r1
 80083f2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	689a      	ldr	r2, [r3, #8]
 80083f8:	491e      	ldr	r1, [pc, #120]	; (8008474 <inc_lock+0x118>)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	011b      	lsls	r3, r3, #4
 80083fe:	440b      	add	r3, r1
 8008400:	3304      	adds	r3, #4
 8008402:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	695a      	ldr	r2, [r3, #20]
 8008408:	491a      	ldr	r1, [pc, #104]	; (8008474 <inc_lock+0x118>)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	011b      	lsls	r3, r3, #4
 800840e:	440b      	add	r3, r1
 8008410:	3308      	adds	r3, #8
 8008412:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008414:	4a17      	ldr	r2, [pc, #92]	; (8008474 <inc_lock+0x118>)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	011b      	lsls	r3, r3, #4
 800841a:	4413      	add	r3, r2
 800841c:	330c      	adds	r3, #12
 800841e:	2200      	movs	r2, #0
 8008420:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d009      	beq.n	800843c <inc_lock+0xe0>
 8008428:	4a12      	ldr	r2, [pc, #72]	; (8008474 <inc_lock+0x118>)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	011b      	lsls	r3, r3, #4
 800842e:	4413      	add	r3, r2
 8008430:	330c      	adds	r3, #12
 8008432:	881b      	ldrh	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <inc_lock+0xe0>
 8008438:	2300      	movs	r3, #0
 800843a:	e015      	b.n	8008468 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d108      	bne.n	8008454 <inc_lock+0xf8>
 8008442:	4a0c      	ldr	r2, [pc, #48]	; (8008474 <inc_lock+0x118>)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	011b      	lsls	r3, r3, #4
 8008448:	4413      	add	r3, r2
 800844a:	330c      	adds	r3, #12
 800844c:	881b      	ldrh	r3, [r3, #0]
 800844e:	3301      	adds	r3, #1
 8008450:	b29a      	uxth	r2, r3
 8008452:	e001      	b.n	8008458 <inc_lock+0xfc>
 8008454:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008458:	4906      	ldr	r1, [pc, #24]	; (8008474 <inc_lock+0x118>)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	011b      	lsls	r3, r3, #4
 800845e:	440b      	add	r3, r1
 8008460:	330c      	adds	r3, #12
 8008462:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	3301      	adds	r3, #1
}
 8008468:	4618      	mov	r0, r3
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr
 8008474:	20000120 	.word	0x20000120

08008478 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	3b01      	subs	r3, #1
 8008484:	607b      	str	r3, [r7, #4]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d825      	bhi.n	80084d8 <dec_lock+0x60>
		n = Files[i].ctr;
 800848c:	4a17      	ldr	r2, [pc, #92]	; (80084ec <dec_lock+0x74>)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	4413      	add	r3, r2
 8008494:	330c      	adds	r3, #12
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800849a:	89fb      	ldrh	r3, [r7, #14]
 800849c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084a0:	d101      	bne.n	80084a6 <dec_lock+0x2e>
 80084a2:	2300      	movs	r3, #0
 80084a4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80084a6:	89fb      	ldrh	r3, [r7, #14]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <dec_lock+0x3a>
 80084ac:	89fb      	ldrh	r3, [r7, #14]
 80084ae:	3b01      	subs	r3, #1
 80084b0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80084b2:	4a0e      	ldr	r2, [pc, #56]	; (80084ec <dec_lock+0x74>)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	4413      	add	r3, r2
 80084ba:	330c      	adds	r3, #12
 80084bc:	89fa      	ldrh	r2, [r7, #14]
 80084be:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80084c0:	89fb      	ldrh	r3, [r7, #14]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d105      	bne.n	80084d2 <dec_lock+0x5a>
 80084c6:	4a09      	ldr	r2, [pc, #36]	; (80084ec <dec_lock+0x74>)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	011b      	lsls	r3, r3, #4
 80084cc:	4413      	add	r3, r2
 80084ce:	2200      	movs	r2, #0
 80084d0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	737b      	strb	r3, [r7, #13]
 80084d6:	e001      	b.n	80084dc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80084d8:	2302      	movs	r3, #2
 80084da:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80084dc:	7b7b      	ldrb	r3, [r7, #13]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	20000120 	.word	0x20000120

080084f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80084f8:	2300      	movs	r3, #0
 80084fa:	60fb      	str	r3, [r7, #12]
 80084fc:	e010      	b.n	8008520 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80084fe:	4a0d      	ldr	r2, [pc, #52]	; (8008534 <clear_lock+0x44>)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	011b      	lsls	r3, r3, #4
 8008504:	4413      	add	r3, r2
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	429a      	cmp	r2, r3
 800850c:	d105      	bne.n	800851a <clear_lock+0x2a>
 800850e:	4a09      	ldr	r2, [pc, #36]	; (8008534 <clear_lock+0x44>)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	011b      	lsls	r3, r3, #4
 8008514:	4413      	add	r3, r2
 8008516:	2200      	movs	r2, #0
 8008518:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3301      	adds	r3, #1
 800851e:	60fb      	str	r3, [r7, #12]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d9eb      	bls.n	80084fe <clear_lock+0xe>
	}
}
 8008526:	bf00      	nop
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	20000120 	.word	0x20000120

08008538 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	78db      	ldrb	r3, [r3, #3]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d034      	beq.n	80085b6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008550:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	7858      	ldrb	r0, [r3, #1]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800855c:	2301      	movs	r3, #1
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	f7ff fd40 	bl	8007fe4 <disk_write>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d002      	beq.n	8008570 <sync_window+0x38>
			res = FR_DISK_ERR;
 800856a:	2301      	movs	r3, #1
 800856c:	73fb      	strb	r3, [r7, #15]
 800856e:	e022      	b.n	80085b6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	1ad2      	subs	r2, r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	429a      	cmp	r2, r3
 8008584:	d217      	bcs.n	80085b6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	789b      	ldrb	r3, [r3, #2]
 800858a:	613b      	str	r3, [r7, #16]
 800858c:	e010      	b.n	80085b0 <sync_window+0x78>
					wsect += fs->fsize;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	4413      	add	r3, r2
 8008596:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	7858      	ldrb	r0, [r3, #1]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80085a2:	2301      	movs	r3, #1
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	f7ff fd1d 	bl	8007fe4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	3b01      	subs	r3, #1
 80085ae:	613b      	str	r3, [r7, #16]
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d8eb      	bhi.n	800858e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3718      	adds	r7, #24
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d01b      	beq.n	8008610 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f7ff ffad 	bl	8008538 <sync_window>
 80085de:	4603      	mov	r3, r0
 80085e0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d113      	bne.n	8008610 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	7858      	ldrb	r0, [r3, #1]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80085f2:	2301      	movs	r3, #1
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	f7ff fcd5 	bl	8007fa4 <disk_read>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d004      	beq.n	800860a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008600:	f04f 33ff 	mov.w	r3, #4294967295
 8008604:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008606:	2301      	movs	r3, #1
 8008608:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008610:	7bfb      	ldrb	r3, [r7, #15]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f7ff ff87 	bl	8008538 <sync_window>
 800862a:	4603      	mov	r3, r0
 800862c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800862e:	7bfb      	ldrb	r3, [r7, #15]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d159      	bne.n	80086e8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	2b03      	cmp	r3, #3
 800863a:	d149      	bne.n	80086d0 <sync_fs+0xb4>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	791b      	ldrb	r3, [r3, #4]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d145      	bne.n	80086d0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	899b      	ldrh	r3, [r3, #12]
 800864e:	461a      	mov	r2, r3
 8008650:	2100      	movs	r1, #0
 8008652:	f7ff fda8 	bl	80081a6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	3338      	adds	r3, #56	; 0x38
 800865a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800865e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008662:	4618      	mov	r0, r3
 8008664:	f7ff fd37 	bl	80080d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	3338      	adds	r3, #56	; 0x38
 800866c:	4921      	ldr	r1, [pc, #132]	; (80086f4 <sync_fs+0xd8>)
 800866e:	4618      	mov	r0, r3
 8008670:	f7ff fd4c 	bl	800810c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	3338      	adds	r3, #56	; 0x38
 8008678:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800867c:	491e      	ldr	r1, [pc, #120]	; (80086f8 <sync_fs+0xdc>)
 800867e:	4618      	mov	r0, r3
 8008680:	f7ff fd44 	bl	800810c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	3338      	adds	r3, #56	; 0x38
 8008688:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	4619      	mov	r1, r3
 8008692:	4610      	mov	r0, r2
 8008694:	f7ff fd3a 	bl	800810c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	3338      	adds	r3, #56	; 0x38
 800869c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	695b      	ldr	r3, [r3, #20]
 80086a4:	4619      	mov	r1, r3
 80086a6:	4610      	mov	r0, r2
 80086a8:	f7ff fd30 	bl	800810c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b0:	1c5a      	adds	r2, r3, #1
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	7858      	ldrb	r0, [r3, #1]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086c4:	2301      	movs	r3, #1
 80086c6:	f7ff fc8d 	bl	8007fe4 <disk_write>
			fs->fsi_flag = 0;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	785b      	ldrb	r3, [r3, #1]
 80086d4:	2200      	movs	r2, #0
 80086d6:	2100      	movs	r1, #0
 80086d8:	4618      	mov	r0, r3
 80086da:	f7ff fca3 	bl	8008024 <disk_ioctl>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <sync_fs+0xcc>
 80086e4:	2301      	movs	r3, #1
 80086e6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	41615252 	.word	0x41615252
 80086f8:	61417272 	.word	0x61417272

080086fc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	3b02      	subs	r3, #2
 800870a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	69db      	ldr	r3, [r3, #28]
 8008710:	3b02      	subs	r3, #2
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	429a      	cmp	r2, r3
 8008716:	d301      	bcc.n	800871c <clust2sect+0x20>
 8008718:	2300      	movs	r3, #0
 800871a:	e008      	b.n	800872e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	895b      	ldrh	r3, [r3, #10]
 8008720:	461a      	mov	r2, r3
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	fb03 f202 	mul.w	r2, r3, r2
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872c:	4413      	add	r3, r2
}
 800872e:	4618      	mov	r0, r3
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b086      	sub	sp, #24
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d904      	bls.n	800875a <get_fat+0x20>
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	69db      	ldr	r3, [r3, #28]
 8008754:	683a      	ldr	r2, [r7, #0]
 8008756:	429a      	cmp	r2, r3
 8008758:	d302      	bcc.n	8008760 <get_fat+0x26>
		val = 1;	/* Internal error */
 800875a:	2301      	movs	r3, #1
 800875c:	617b      	str	r3, [r7, #20]
 800875e:	e0b7      	b.n	80088d0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008760:	f04f 33ff 	mov.w	r3, #4294967295
 8008764:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	2b02      	cmp	r3, #2
 800876c:	d05a      	beq.n	8008824 <get_fat+0xea>
 800876e:	2b03      	cmp	r3, #3
 8008770:	d07d      	beq.n	800886e <get_fat+0x134>
 8008772:	2b01      	cmp	r3, #1
 8008774:	f040 80a2 	bne.w	80088bc <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	60fb      	str	r3, [r7, #12]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	085b      	lsrs	r3, r3, #1
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	4413      	add	r3, r2
 8008784:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	899b      	ldrh	r3, [r3, #12]
 800878e:	4619      	mov	r1, r3
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	fbb3 f3f1 	udiv	r3, r3, r1
 8008796:	4413      	add	r3, r2
 8008798:	4619      	mov	r1, r3
 800879a:	6938      	ldr	r0, [r7, #16]
 800879c:	f7ff ff10 	bl	80085c0 <move_window>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f040 808d 	bne.w	80088c2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	1c5a      	adds	r2, r3, #1
 80087ac:	60fa      	str	r2, [r7, #12]
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	8992      	ldrh	r2, [r2, #12]
 80087b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80087b6:	fb02 f201 	mul.w	r2, r2, r1
 80087ba:	1a9b      	subs	r3, r3, r2
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	4413      	add	r3, r2
 80087c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80087c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	899b      	ldrh	r3, [r3, #12]
 80087ce:	4619      	mov	r1, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80087d6:	4413      	add	r3, r2
 80087d8:	4619      	mov	r1, r3
 80087da:	6938      	ldr	r0, [r7, #16]
 80087dc:	f7ff fef0 	bl	80085c0 <move_window>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d16f      	bne.n	80088c6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	899b      	ldrh	r3, [r3, #12]
 80087ea:	461a      	mov	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80087f2:	fb02 f201 	mul.w	r2, r2, r1
 80087f6:	1a9b      	subs	r3, r3, r2
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	4413      	add	r3, r2
 80087fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008800:	021b      	lsls	r3, r3, #8
 8008802:	461a      	mov	r2, r3
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	4313      	orrs	r3, r2
 8008808:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	f003 0301 	and.w	r3, r3, #1
 8008810:	2b00      	cmp	r3, #0
 8008812:	d002      	beq.n	800881a <get_fat+0xe0>
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	091b      	lsrs	r3, r3, #4
 8008818:	e002      	b.n	8008820 <get_fat+0xe6>
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008820:	617b      	str	r3, [r7, #20]
			break;
 8008822:	e055      	b.n	80088d0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	899b      	ldrh	r3, [r3, #12]
 800882c:	085b      	lsrs	r3, r3, #1
 800882e:	b29b      	uxth	r3, r3
 8008830:	4619      	mov	r1, r3
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	fbb3 f3f1 	udiv	r3, r3, r1
 8008838:	4413      	add	r3, r2
 800883a:	4619      	mov	r1, r3
 800883c:	6938      	ldr	r0, [r7, #16]
 800883e:	f7ff febf 	bl	80085c0 <move_window>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d140      	bne.n	80088ca <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	005b      	lsls	r3, r3, #1
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	8992      	ldrh	r2, [r2, #12]
 8008856:	fbb3 f0f2 	udiv	r0, r3, r2
 800885a:	fb02 f200 	mul.w	r2, r2, r0
 800885e:	1a9b      	subs	r3, r3, r2
 8008860:	440b      	add	r3, r1
 8008862:	4618      	mov	r0, r3
 8008864:	f7ff fbfc 	bl	8008060 <ld_word>
 8008868:	4603      	mov	r3, r0
 800886a:	617b      	str	r3, [r7, #20]
			break;
 800886c:	e030      	b.n	80088d0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	899b      	ldrh	r3, [r3, #12]
 8008876:	089b      	lsrs	r3, r3, #2
 8008878:	b29b      	uxth	r3, r3
 800887a:	4619      	mov	r1, r3
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008882:	4413      	add	r3, r2
 8008884:	4619      	mov	r1, r3
 8008886:	6938      	ldr	r0, [r7, #16]
 8008888:	f7ff fe9a 	bl	80085c0 <move_window>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d11d      	bne.n	80088ce <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	8992      	ldrh	r2, [r2, #12]
 80088a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80088a4:	fb02 f200 	mul.w	r2, r2, r0
 80088a8:	1a9b      	subs	r3, r3, r2
 80088aa:	440b      	add	r3, r1
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7ff fbef 	bl	8008090 <ld_dword>
 80088b2:	4603      	mov	r3, r0
 80088b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80088b8:	617b      	str	r3, [r7, #20]
			break;
 80088ba:	e009      	b.n	80088d0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80088bc:	2301      	movs	r3, #1
 80088be:	617b      	str	r3, [r7, #20]
 80088c0:	e006      	b.n	80088d0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088c2:	bf00      	nop
 80088c4:	e004      	b.n	80088d0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088c6:	bf00      	nop
 80088c8:	e002      	b.n	80088d0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80088ca:	bf00      	nop
 80088cc:	e000      	b.n	80088d0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80088ce:	bf00      	nop
		}
	}

	return val;
 80088d0:	697b      	ldr	r3, [r7, #20]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3718      	adds	r7, #24
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80088da:	b590      	push	{r4, r7, lr}
 80088dc:	b089      	sub	sp, #36	; 0x24
 80088de:	af00      	add	r7, sp, #0
 80088e0:	60f8      	str	r0, [r7, #12]
 80088e2:	60b9      	str	r1, [r7, #8]
 80088e4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80088e6:	2302      	movs	r3, #2
 80088e8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	f240 8106 	bls.w	8008afe <put_fat+0x224>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	69db      	ldr	r3, [r3, #28]
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	f080 8100 	bcs.w	8008afe <put_fat+0x224>
		switch (fs->fs_type) {
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	2b02      	cmp	r3, #2
 8008904:	f000 8088 	beq.w	8008a18 <put_fat+0x13e>
 8008908:	2b03      	cmp	r3, #3
 800890a:	f000 80b0 	beq.w	8008a6e <put_fat+0x194>
 800890e:	2b01      	cmp	r3, #1
 8008910:	f040 80f5 	bne.w	8008afe <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	61bb      	str	r3, [r7, #24]
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	085b      	lsrs	r3, r3, #1
 800891c:	69ba      	ldr	r2, [r7, #24]
 800891e:	4413      	add	r3, r2
 8008920:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	899b      	ldrh	r3, [r3, #12]
 800892a:	4619      	mov	r1, r3
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008932:	4413      	add	r3, r2
 8008934:	4619      	mov	r1, r3
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f7ff fe42 	bl	80085c0 <move_window>
 800893c:	4603      	mov	r3, r0
 800893e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008940:	7ffb      	ldrb	r3, [r7, #31]
 8008942:	2b00      	cmp	r3, #0
 8008944:	f040 80d4 	bne.w	8008af0 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	1c5a      	adds	r2, r3, #1
 8008952:	61ba      	str	r2, [r7, #24]
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	8992      	ldrh	r2, [r2, #12]
 8008958:	fbb3 f0f2 	udiv	r0, r3, r2
 800895c:	fb02 f200 	mul.w	r2, r2, r0
 8008960:	1a9b      	subs	r3, r3, r2
 8008962:	440b      	add	r3, r1
 8008964:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00d      	beq.n	800898c <put_fat+0xb2>
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	b25b      	sxtb	r3, r3
 8008976:	f003 030f 	and.w	r3, r3, #15
 800897a:	b25a      	sxtb	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	b2db      	uxtb	r3, r3
 8008980:	011b      	lsls	r3, r3, #4
 8008982:	b25b      	sxtb	r3, r3
 8008984:	4313      	orrs	r3, r2
 8008986:	b25b      	sxtb	r3, r3
 8008988:	b2db      	uxtb	r3, r3
 800898a:	e001      	b.n	8008990 <put_fat+0xb6>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	b2db      	uxtb	r3, r3
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2201      	movs	r2, #1
 8008998:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	899b      	ldrh	r3, [r3, #12]
 80089a2:	4619      	mov	r1, r3
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80089aa:	4413      	add	r3, r2
 80089ac:	4619      	mov	r1, r3
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f7ff fe06 	bl	80085c0 <move_window>
 80089b4:	4603      	mov	r3, r0
 80089b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80089b8:	7ffb      	ldrb	r3, [r7, #31]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f040 809a 	bne.w	8008af4 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	899b      	ldrh	r3, [r3, #12]
 80089ca:	461a      	mov	r2, r3
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80089d2:	fb02 f200 	mul.w	r2, r2, r0
 80089d6:	1a9b      	subs	r3, r3, r2
 80089d8:	440b      	add	r3, r1
 80089da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	f003 0301 	and.w	r3, r3, #1
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d003      	beq.n	80089ee <put_fat+0x114>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	091b      	lsrs	r3, r3, #4
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	e00e      	b.n	8008a0c <put_fat+0x132>
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	b25b      	sxtb	r3, r3
 80089f4:	f023 030f 	bic.w	r3, r3, #15
 80089f8:	b25a      	sxtb	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	0a1b      	lsrs	r3, r3, #8
 80089fe:	b25b      	sxtb	r3, r3
 8008a00:	f003 030f 	and.w	r3, r3, #15
 8008a04:	b25b      	sxtb	r3, r3
 8008a06:	4313      	orrs	r3, r2
 8008a08:	b25b      	sxtb	r3, r3
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	697a      	ldr	r2, [r7, #20]
 8008a0e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2201      	movs	r2, #1
 8008a14:	70da      	strb	r2, [r3, #3]
			break;
 8008a16:	e072      	b.n	8008afe <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	899b      	ldrh	r3, [r3, #12]
 8008a20:	085b      	lsrs	r3, r3, #1
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	4619      	mov	r1, r3
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a2c:	4413      	add	r3, r2
 8008a2e:	4619      	mov	r1, r3
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f7ff fdc5 	bl	80085c0 <move_window>
 8008a36:	4603      	mov	r3, r0
 8008a38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a3a:	7ffb      	ldrb	r3, [r7, #31]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d15b      	bne.n	8008af8 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	005b      	lsls	r3, r3, #1
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	8992      	ldrh	r2, [r2, #12]
 8008a4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a52:	fb02 f200 	mul.w	r2, r2, r0
 8008a56:	1a9b      	subs	r3, r3, r2
 8008a58:	440b      	add	r3, r1
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	b292      	uxth	r2, r2
 8008a5e:	4611      	mov	r1, r2
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7ff fb38 	bl	80080d6 <st_word>
			fs->wflag = 1;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	70da      	strb	r2, [r3, #3]
			break;
 8008a6c:	e047      	b.n	8008afe <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	899b      	ldrh	r3, [r3, #12]
 8008a76:	089b      	lsrs	r3, r3, #2
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a82:	4413      	add	r3, r2
 8008a84:	4619      	mov	r1, r3
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f7ff fd9a 	bl	80085c0 <move_window>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a90:	7ffb      	ldrb	r3, [r7, #31]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d132      	bne.n	8008afc <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	8992      	ldrh	r2, [r2, #12]
 8008aaa:	fbb3 f0f2 	udiv	r0, r3, r2
 8008aae:	fb02 f200 	mul.w	r2, r2, r0
 8008ab2:	1a9b      	subs	r3, r3, r2
 8008ab4:	440b      	add	r3, r1
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7ff faea 	bl	8008090 <ld_dword>
 8008abc:	4603      	mov	r3, r0
 8008abe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008ac2:	4323      	orrs	r3, r4
 8008ac4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	8992      	ldrh	r2, [r2, #12]
 8008ad4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ad8:	fb02 f200 	mul.w	r2, r2, r0
 8008adc:	1a9b      	subs	r3, r3, r2
 8008ade:	440b      	add	r3, r1
 8008ae0:	6879      	ldr	r1, [r7, #4]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7ff fb12 	bl	800810c <st_dword>
			fs->wflag = 1;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2201      	movs	r2, #1
 8008aec:	70da      	strb	r2, [r3, #3]
			break;
 8008aee:	e006      	b.n	8008afe <put_fat+0x224>
			if (res != FR_OK) break;
 8008af0:	bf00      	nop
 8008af2:	e004      	b.n	8008afe <put_fat+0x224>
			if (res != FR_OK) break;
 8008af4:	bf00      	nop
 8008af6:	e002      	b.n	8008afe <put_fat+0x224>
			if (res != FR_OK) break;
 8008af8:	bf00      	nop
 8008afa:	e000      	b.n	8008afe <put_fat+0x224>
			if (res != FR_OK) break;
 8008afc:	bf00      	nop
		}
	}
	return res;
 8008afe:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3724      	adds	r7, #36	; 0x24
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd90      	pop	{r4, r7, pc}

08008b08 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b088      	sub	sp, #32
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d904      	bls.n	8008b2e <remove_chain+0x26>
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	69db      	ldr	r3, [r3, #28]
 8008b28:	68ba      	ldr	r2, [r7, #8]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d301      	bcc.n	8008b32 <remove_chain+0x2a>
 8008b2e:	2302      	movs	r3, #2
 8008b30:	e04b      	b.n	8008bca <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00c      	beq.n	8008b52 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008b38:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3c:	6879      	ldr	r1, [r7, #4]
 8008b3e:	69b8      	ldr	r0, [r7, #24]
 8008b40:	f7ff fecb 	bl	80088da <put_fat>
 8008b44:	4603      	mov	r3, r0
 8008b46:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008b48:	7ffb      	ldrb	r3, [r7, #31]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <remove_chain+0x4a>
 8008b4e:	7ffb      	ldrb	r3, [r7, #31]
 8008b50:	e03b      	b.n	8008bca <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008b52:	68b9      	ldr	r1, [r7, #8]
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f7ff fdf0 	bl	800873a <get_fat>
 8008b5a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d031      	beq.n	8008bc6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d101      	bne.n	8008b6c <remove_chain+0x64>
 8008b68:	2302      	movs	r3, #2
 8008b6a:	e02e      	b.n	8008bca <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b72:	d101      	bne.n	8008b78 <remove_chain+0x70>
 8008b74:	2301      	movs	r3, #1
 8008b76:	e028      	b.n	8008bca <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008b78:	2200      	movs	r2, #0
 8008b7a:	68b9      	ldr	r1, [r7, #8]
 8008b7c:	69b8      	ldr	r0, [r7, #24]
 8008b7e:	f7ff feac 	bl	80088da <put_fat>
 8008b82:	4603      	mov	r3, r0
 8008b84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008b86:	7ffb      	ldrb	r3, [r7, #31]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d001      	beq.n	8008b90 <remove_chain+0x88>
 8008b8c:	7ffb      	ldrb	r3, [r7, #31]
 8008b8e:	e01c      	b.n	8008bca <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	699a      	ldr	r2, [r3, #24]
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	69db      	ldr	r3, [r3, #28]
 8008b98:	3b02      	subs	r3, #2
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d20b      	bcs.n	8008bb6 <remove_chain+0xae>
			fs->free_clst++;
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	1c5a      	adds	r2, r3, #1
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	791b      	ldrb	r3, [r3, #4]
 8008bac:	f043 0301 	orr.w	r3, r3, #1
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d3c6      	bcc.n	8008b52 <remove_chain+0x4a>
 8008bc4:	e000      	b.n	8008bc8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008bc6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3720      	adds	r7, #32
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b088      	sub	sp, #32
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10d      	bne.n	8008c04 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d004      	beq.n	8008bfe <create_chain+0x2c>
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	69db      	ldr	r3, [r3, #28]
 8008bf8:	69ba      	ldr	r2, [r7, #24]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d31b      	bcc.n	8008c36 <create_chain+0x64>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	61bb      	str	r3, [r7, #24]
 8008c02:	e018      	b.n	8008c36 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff fd97 	bl	800873a <get_fat>
 8008c0c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d801      	bhi.n	8008c18 <create_chain+0x46>
 8008c14:	2301      	movs	r3, #1
 8008c16:	e070      	b.n	8008cfa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1e:	d101      	bne.n	8008c24 <create_chain+0x52>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	e06a      	b.n	8008cfa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	69db      	ldr	r3, [r3, #28]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d201      	bcs.n	8008c32 <create_chain+0x60>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	e063      	b.n	8008cfa <create_chain+0x128>
		scl = clst;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	69db      	ldr	r3, [r3, #28]
 8008c44:	69fa      	ldr	r2, [r7, #28]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d307      	bcc.n	8008c5a <create_chain+0x88>
				ncl = 2;
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008c4e:	69fa      	ldr	r2, [r7, #28]
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d901      	bls.n	8008c5a <create_chain+0x88>
 8008c56:	2300      	movs	r3, #0
 8008c58:	e04f      	b.n	8008cfa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008c5a:	69f9      	ldr	r1, [r7, #28]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7ff fd6c 	bl	800873a <get_fat>
 8008c62:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00e      	beq.n	8008c88 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d003      	beq.n	8008c78 <create_chain+0xa6>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c76:	d101      	bne.n	8008c7c <create_chain+0xaa>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	e03e      	b.n	8008cfa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008c7c:	69fa      	ldr	r2, [r7, #28]
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d1da      	bne.n	8008c3a <create_chain+0x68>
 8008c84:	2300      	movs	r3, #0
 8008c86:	e038      	b.n	8008cfa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008c88:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8e:	69f9      	ldr	r1, [r7, #28]
 8008c90:	6938      	ldr	r0, [r7, #16]
 8008c92:	f7ff fe22 	bl	80088da <put_fat>
 8008c96:	4603      	mov	r3, r0
 8008c98:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d109      	bne.n	8008cb4 <create_chain+0xe2>
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d006      	beq.n	8008cb4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008ca6:	69fa      	ldr	r2, [r7, #28]
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	6938      	ldr	r0, [r7, #16]
 8008cac:	f7ff fe15 	bl	80088da <put_fat>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d116      	bne.n	8008ce8 <create_chain+0x116>
		fs->last_clst = ncl;
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	69fa      	ldr	r2, [r7, #28]
 8008cbe:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	699a      	ldr	r2, [r3, #24]
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	69db      	ldr	r3, [r3, #28]
 8008cc8:	3b02      	subs	r3, #2
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d804      	bhi.n	8008cd8 <create_chain+0x106>
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	1e5a      	subs	r2, r3, #1
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	791b      	ldrb	r3, [r3, #4]
 8008cdc:	f043 0301 	orr.w	r3, r3, #1
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	711a      	strb	r2, [r3, #4]
 8008ce6:	e007      	b.n	8008cf8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d102      	bne.n	8008cf4 <create_chain+0x122>
 8008cee:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf2:	e000      	b.n	8008cf6 <create_chain+0x124>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008cf8:	69fb      	ldr	r3, [r7, #28]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3720      	adds	r7, #32
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b087      	sub	sp, #28
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d16:	3304      	adds	r3, #4
 8008d18:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	899b      	ldrh	r3, [r3, #12]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	8952      	ldrh	r2, [r2, #10]
 8008d2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d2e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	1d1a      	adds	r2, r3, #4
 8008d34:	613a      	str	r2, [r7, #16]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d101      	bne.n	8008d44 <clmt_clust+0x42>
 8008d40:	2300      	movs	r3, #0
 8008d42:	e010      	b.n	8008d66 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d307      	bcc.n	8008d5c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	617b      	str	r3, [r7, #20]
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	3304      	adds	r3, #4
 8008d58:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008d5a:	e7e9      	b.n	8008d30 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008d5c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	4413      	add	r3, r2
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b086      	sub	sp, #24
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d88:	d204      	bcs.n	8008d94 <dir_sdi+0x22>
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	f003 031f 	and.w	r3, r3, #31
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008d94:	2302      	movs	r3, #2
 8008d96:	e071      	b.n	8008e7c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d106      	bne.n	8008db8 <dir_sdi+0x46>
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d902      	bls.n	8008db8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10c      	bne.n	8008dd8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	095b      	lsrs	r3, r3, #5
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	8912      	ldrh	r2, [r2, #8]
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d301      	bcc.n	8008dce <dir_sdi+0x5c>
 8008dca:	2302      	movs	r3, #2
 8008dcc:	e056      	b.n	8008e7c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	61da      	str	r2, [r3, #28]
 8008dd6:	e02d      	b.n	8008e34 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	895b      	ldrh	r3, [r3, #10]
 8008ddc:	461a      	mov	r2, r3
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	899b      	ldrh	r3, [r3, #12]
 8008de2:	fb03 f302 	mul.w	r3, r3, r2
 8008de6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008de8:	e019      	b.n	8008e1e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6979      	ldr	r1, [r7, #20]
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7ff fca3 	bl	800873a <get_fat>
 8008df4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfc:	d101      	bne.n	8008e02 <dir_sdi+0x90>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e03c      	b.n	8008e7c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d904      	bls.n	8008e12 <dir_sdi+0xa0>
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	69db      	ldr	r3, [r3, #28]
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d301      	bcc.n	8008e16 <dir_sdi+0xa4>
 8008e12:	2302      	movs	r3, #2
 8008e14:	e032      	b.n	8008e7c <dir_sdi+0x10a>
			ofs -= csz;
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d2e1      	bcs.n	8008dea <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008e26:	6979      	ldr	r1, [r7, #20]
 8008e28:	6938      	ldr	r0, [r7, #16]
 8008e2a:	f7ff fc67 	bl	80086fc <clust2sect>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	697a      	ldr	r2, [r7, #20]
 8008e38:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <dir_sdi+0xd4>
 8008e42:	2302      	movs	r3, #2
 8008e44:	e01a      	b.n	8008e7c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	69da      	ldr	r2, [r3, #28]
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	899b      	ldrh	r3, [r3, #12]
 8008e4e:	4619      	mov	r1, r3
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e56:	441a      	add	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	899b      	ldrh	r3, [r3, #12]
 8008e66:	461a      	mov	r2, r3
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e6e:	fb02 f200 	mul.w	r2, r2, r0
 8008e72:	1a9b      	subs	r3, r3, r2
 8008e74:	18ca      	adds	r2, r1, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3718      	adds	r7, #24
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	695b      	ldr	r3, [r3, #20]
 8008e98:	3320      	adds	r3, #32
 8008e9a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	69db      	ldr	r3, [r3, #28]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d003      	beq.n	8008eac <dir_next+0x28>
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008eaa:	d301      	bcc.n	8008eb0 <dir_next+0x2c>
 8008eac:	2304      	movs	r3, #4
 8008eae:	e0bb      	b.n	8009028 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	899b      	ldrh	r3, [r3, #12]
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ebc:	fb02 f201 	mul.w	r2, r2, r1
 8008ec0:	1a9b      	subs	r3, r3, r2
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f040 809d 	bne.w	8009002 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	69db      	ldr	r3, [r3, #28]
 8008ecc:	1c5a      	adds	r2, r3, #1
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10b      	bne.n	8008ef2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	095b      	lsrs	r3, r3, #5
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	8912      	ldrh	r2, [r2, #8]
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	f0c0 808d 	bcc.w	8009002 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	61da      	str	r2, [r3, #28]
 8008eee:	2304      	movs	r3, #4
 8008ef0:	e09a      	b.n	8009028 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	899b      	ldrh	r3, [r3, #12]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	fbb3 f3f2 	udiv	r3, r3, r2
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	8952      	ldrh	r2, [r2, #10]
 8008f02:	3a01      	subs	r2, #1
 8008f04:	4013      	ands	r3, r2
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d17b      	bne.n	8009002 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	4619      	mov	r1, r3
 8008f12:	4610      	mov	r0, r2
 8008f14:	f7ff fc11 	bl	800873a <get_fat>
 8008f18:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d801      	bhi.n	8008f24 <dir_next+0xa0>
 8008f20:	2302      	movs	r3, #2
 8008f22:	e081      	b.n	8009028 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f2a:	d101      	bne.n	8008f30 <dir_next+0xac>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e07b      	b.n	8009028 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	69db      	ldr	r3, [r3, #28]
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d359      	bcc.n	8008fee <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d104      	bne.n	8008f4a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	61da      	str	r2, [r3, #28]
 8008f46:	2304      	movs	r3, #4
 8008f48:	e06e      	b.n	8009028 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	4619      	mov	r1, r3
 8008f52:	4610      	mov	r0, r2
 8008f54:	f7ff fe3d 	bl	8008bd2 <create_chain>
 8008f58:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d101      	bne.n	8008f64 <dir_next+0xe0>
 8008f60:	2307      	movs	r3, #7
 8008f62:	e061      	b.n	8009028 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d101      	bne.n	8008f6e <dir_next+0xea>
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	e05c      	b.n	8009028 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f74:	d101      	bne.n	8008f7a <dir_next+0xf6>
 8008f76:	2301      	movs	r3, #1
 8008f78:	e056      	b.n	8009028 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f7ff fadc 	bl	8008538 <sync_window>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d001      	beq.n	8008f8a <dir_next+0x106>
 8008f86:	2301      	movs	r3, #1
 8008f88:	e04e      	b.n	8009028 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	899b      	ldrh	r3, [r3, #12]
 8008f94:	461a      	mov	r2, r3
 8008f96:	2100      	movs	r1, #0
 8008f98:	f7ff f905 	bl	80081a6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	613b      	str	r3, [r7, #16]
 8008fa0:	6979      	ldr	r1, [r7, #20]
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f7ff fbaa 	bl	80086fc <clust2sect>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	635a      	str	r2, [r3, #52]	; 0x34
 8008fae:	e012      	b.n	8008fd6 <dir_next+0x152>
						fs->wflag = 1;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f7ff fabe 	bl	8008538 <sync_window>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d001      	beq.n	8008fc6 <dir_next+0x142>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e030      	b.n	8009028 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	613b      	str	r3, [r7, #16]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd0:	1c5a      	adds	r2, r3, #1
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	635a      	str	r2, [r3, #52]	; 0x34
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	895b      	ldrh	r3, [r3, #10]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d3e6      	bcc.n	8008fb0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	1ad2      	subs	r2, r2, r3
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	697a      	ldr	r2, [r7, #20]
 8008ff2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008ff4:	6979      	ldr	r1, [r7, #20]
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f7ff fb80 	bl	80086fc <clust2sect>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	899b      	ldrh	r3, [r3, #12]
 8009012:	461a      	mov	r2, r3
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	fbb3 f0f2 	udiv	r0, r3, r2
 800901a:	fb02 f200 	mul.w	r2, r2, r0
 800901e:	1a9b      	subs	r3, r3, r2
 8009020:	18ca      	adds	r2, r1, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3718      	adds	r7, #24
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009040:	2100      	movs	r1, #0
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7ff fe95 	bl	8008d72 <dir_sdi>
 8009048:	4603      	mov	r3, r0
 800904a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800904c:	7dfb      	ldrb	r3, [r7, #23]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d12b      	bne.n	80090aa <dir_alloc+0x7a>
		n = 0;
 8009052:	2300      	movs	r3, #0
 8009054:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	4619      	mov	r1, r3
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f7ff faaf 	bl	80085c0 <move_window>
 8009062:	4603      	mov	r3, r0
 8009064:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009066:	7dfb      	ldrb	r3, [r7, #23]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d11d      	bne.n	80090a8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a1b      	ldr	r3, [r3, #32]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	2be5      	cmp	r3, #229	; 0xe5
 8009074:	d004      	beq.n	8009080 <dir_alloc+0x50>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a1b      	ldr	r3, [r3, #32]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d107      	bne.n	8009090 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	3301      	adds	r3, #1
 8009084:	613b      	str	r3, [r7, #16]
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	429a      	cmp	r2, r3
 800908c:	d102      	bne.n	8009094 <dir_alloc+0x64>
 800908e:	e00c      	b.n	80090aa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009090:	2300      	movs	r3, #0
 8009092:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009094:	2101      	movs	r1, #1
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f7ff fef4 	bl	8008e84 <dir_next>
 800909c:	4603      	mov	r3, r0
 800909e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0d7      	beq.n	8009056 <dir_alloc+0x26>
 80090a6:	e000      	b.n	80090aa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80090a8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80090aa:	7dfb      	ldrb	r3, [r7, #23]
 80090ac:	2b04      	cmp	r3, #4
 80090ae:	d101      	bne.n	80090b4 <dir_alloc+0x84>
 80090b0:	2307      	movs	r3, #7
 80090b2:	75fb      	strb	r3, [r7, #23]
	return res;
 80090b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3718      	adds	r7, #24
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b084      	sub	sp, #16
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	331a      	adds	r3, #26
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fe ffc7 	bl	8008060 <ld_word>
 80090d2:	4603      	mov	r3, r0
 80090d4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	2b03      	cmp	r3, #3
 80090dc:	d109      	bne.n	80090f2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	3314      	adds	r3, #20
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fe ffbc 	bl	8008060 <ld_word>
 80090e8:	4603      	mov	r3, r0
 80090ea:	041b      	lsls	r3, r3, #16
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80090f2:	68fb      	ldr	r3, [r7, #12]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	331a      	adds	r3, #26
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	b292      	uxth	r2, r2
 8009110:	4611      	mov	r1, r2
 8009112:	4618      	mov	r0, r3
 8009114:	f7fe ffdf 	bl	80080d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	2b03      	cmp	r3, #3
 800911e:	d109      	bne.n	8009134 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	f103 0214 	add.w	r2, r3, #20
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	0c1b      	lsrs	r3, r3, #16
 800912a:	b29b      	uxth	r3, r3
 800912c:	4619      	mov	r1, r3
 800912e:	4610      	mov	r0, r2
 8009130:	f7fe ffd1 	bl	80080d6 <st_word>
	}
}
 8009134:	bf00      	nop
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800913c:	b590      	push	{r4, r7, lr}
 800913e:	b087      	sub	sp, #28
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	331a      	adds	r3, #26
 800914a:	4618      	mov	r0, r3
 800914c:	f7fe ff88 	bl	8008060 <ld_word>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d001      	beq.n	800915a <cmp_lfn+0x1e>
 8009156:	2300      	movs	r3, #0
 8009158:	e059      	b.n	800920e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009162:	1e5a      	subs	r2, r3, #1
 8009164:	4613      	mov	r3, r2
 8009166:	005b      	lsls	r3, r3, #1
 8009168:	4413      	add	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	4413      	add	r3, r2
 800916e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009170:	2301      	movs	r3, #1
 8009172:	81fb      	strh	r3, [r7, #14]
 8009174:	2300      	movs	r3, #0
 8009176:	613b      	str	r3, [r7, #16]
 8009178:	e033      	b.n	80091e2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800917a:	4a27      	ldr	r2, [pc, #156]	; (8009218 <cmp_lfn+0xdc>)
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	4413      	add	r3, r2
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	4413      	add	r3, r2
 8009188:	4618      	mov	r0, r3
 800918a:	f7fe ff69 	bl	8008060 <ld_word>
 800918e:	4603      	mov	r3, r0
 8009190:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009192:	89fb      	ldrh	r3, [r7, #14]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d01a      	beq.n	80091ce <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	2bfe      	cmp	r3, #254	; 0xfe
 800919c:	d812      	bhi.n	80091c4 <cmp_lfn+0x88>
 800919e:	89bb      	ldrh	r3, [r7, #12]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7fe fe35 	bl	8007e10 <ff_wtoupper>
 80091a6:	4603      	mov	r3, r0
 80091a8:	461c      	mov	r4, r3
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	1c5a      	adds	r2, r3, #1
 80091ae:	617a      	str	r2, [r7, #20]
 80091b0:	005b      	lsls	r3, r3, #1
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	4413      	add	r3, r2
 80091b6:	881b      	ldrh	r3, [r3, #0]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7fe fe29 	bl	8007e10 <ff_wtoupper>
 80091be:	4603      	mov	r3, r0
 80091c0:	429c      	cmp	r4, r3
 80091c2:	d001      	beq.n	80091c8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80091c4:	2300      	movs	r3, #0
 80091c6:	e022      	b.n	800920e <cmp_lfn+0xd2>
			}
			wc = uc;
 80091c8:	89bb      	ldrh	r3, [r7, #12]
 80091ca:	81fb      	strh	r3, [r7, #14]
 80091cc:	e006      	b.n	80091dc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80091ce:	89bb      	ldrh	r3, [r7, #12]
 80091d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d001      	beq.n	80091dc <cmp_lfn+0xa0>
 80091d8:	2300      	movs	r3, #0
 80091da:	e018      	b.n	800920e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	3301      	adds	r3, #1
 80091e0:	613b      	str	r3, [r7, #16]
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	2b0c      	cmp	r3, #12
 80091e6:	d9c8      	bls.n	800917a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00b      	beq.n	800920c <cmp_lfn+0xd0>
 80091f4:	89fb      	ldrh	r3, [r7, #14]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d008      	beq.n	800920c <cmp_lfn+0xd0>
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	005b      	lsls	r3, r3, #1
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	4413      	add	r3, r2
 8009202:	881b      	ldrh	r3, [r3, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <cmp_lfn+0xd0>
 8009208:	2300      	movs	r3, #0
 800920a:	e000      	b.n	800920e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800920c:	2301      	movs	r3, #1
}
 800920e:	4618      	mov	r0, r3
 8009210:	371c      	adds	r7, #28
 8009212:	46bd      	mov	sp, r7
 8009214:	bd90      	pop	{r4, r7, pc}
 8009216:	bf00      	nop
 8009218:	0800c2ec 	.word	0x0800c2ec

0800921c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b088      	sub	sp, #32
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	4611      	mov	r1, r2
 8009228:	461a      	mov	r2, r3
 800922a:	460b      	mov	r3, r1
 800922c:	71fb      	strb	r3, [r7, #7]
 800922e:	4613      	mov	r3, r2
 8009230:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	330d      	adds	r3, #13
 8009236:	79ba      	ldrb	r2, [r7, #6]
 8009238:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	330b      	adds	r3, #11
 800923e:	220f      	movs	r2, #15
 8009240:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	330c      	adds	r3, #12
 8009246:	2200      	movs	r2, #0
 8009248:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	331a      	adds	r3, #26
 800924e:	2100      	movs	r1, #0
 8009250:	4618      	mov	r0, r3
 8009252:	f7fe ff40 	bl	80080d6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009256:	79fb      	ldrb	r3, [r7, #7]
 8009258:	1e5a      	subs	r2, r3, #1
 800925a:	4613      	mov	r3, r2
 800925c:	005b      	lsls	r3, r3, #1
 800925e:	4413      	add	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4413      	add	r3, r2
 8009264:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009266:	2300      	movs	r3, #0
 8009268:	82fb      	strh	r3, [r7, #22]
 800926a:	2300      	movs	r3, #0
 800926c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800926e:	8afb      	ldrh	r3, [r7, #22]
 8009270:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009274:	4293      	cmp	r3, r2
 8009276:	d007      	beq.n	8009288 <put_lfn+0x6c>
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	1c5a      	adds	r2, r3, #1
 800927c:	61fa      	str	r2, [r7, #28]
 800927e:	005b      	lsls	r3, r3, #1
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	4413      	add	r3, r2
 8009284:	881b      	ldrh	r3, [r3, #0]
 8009286:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009288:	4a17      	ldr	r2, [pc, #92]	; (80092e8 <put_lfn+0xcc>)
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	4413      	add	r3, r2
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	461a      	mov	r2, r3
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	4413      	add	r3, r2
 8009296:	8afa      	ldrh	r2, [r7, #22]
 8009298:	4611      	mov	r1, r2
 800929a:	4618      	mov	r0, r3
 800929c:	f7fe ff1b 	bl	80080d6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80092a0:	8afb      	ldrh	r3, [r7, #22]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d102      	bne.n	80092ac <put_lfn+0x90>
 80092a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80092aa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	3301      	adds	r3, #1
 80092b0:	61bb      	str	r3, [r7, #24]
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	2b0c      	cmp	r3, #12
 80092b6:	d9da      	bls.n	800926e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80092b8:	8afb      	ldrh	r3, [r7, #22]
 80092ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092be:	4293      	cmp	r3, r2
 80092c0:	d006      	beq.n	80092d0 <put_lfn+0xb4>
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	005b      	lsls	r3, r3, #1
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	4413      	add	r3, r2
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d103      	bne.n	80092d8 <put_lfn+0xbc>
 80092d0:	79fb      	ldrb	r3, [r7, #7]
 80092d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	79fa      	ldrb	r2, [r7, #7]
 80092dc:	701a      	strb	r2, [r3, #0]
}
 80092de:	bf00      	nop
 80092e0:	3720      	adds	r7, #32
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	0800c2ec 	.word	0x0800c2ec

080092ec <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b08c      	sub	sp, #48	; 0x30
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]
 80092f8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80092fa:	220b      	movs	r2, #11
 80092fc:	68b9      	ldr	r1, [r7, #8]
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f7fe ff30 	bl	8008164 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	2b05      	cmp	r3, #5
 8009308:	d92b      	bls.n	8009362 <gen_numname+0x76>
		sr = seq;
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800930e:	e022      	b.n	8009356 <gen_numname+0x6a>
			wc = *lfn++;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	1c9a      	adds	r2, r3, #2
 8009314:	607a      	str	r2, [r7, #4]
 8009316:	881b      	ldrh	r3, [r3, #0]
 8009318:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800931a:	2300      	movs	r3, #0
 800931c:	62bb      	str	r3, [r7, #40]	; 0x28
 800931e:	e017      	b.n	8009350 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	005a      	lsls	r2, r3, #1
 8009324:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009326:	f003 0301 	and.w	r3, r3, #1
 800932a:	4413      	add	r3, r2
 800932c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800932e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009330:	085b      	lsrs	r3, r3, #1
 8009332:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800933a:	2b00      	cmp	r3, #0
 800933c:	d005      	beq.n	800934a <gen_numname+0x5e>
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009344:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009348:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800934a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934c:	3301      	adds	r3, #1
 800934e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009352:	2b0f      	cmp	r3, #15
 8009354:	d9e4      	bls.n	8009320 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1d8      	bne.n	8009310 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009362:	2307      	movs	r3, #7
 8009364:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	b2db      	uxtb	r3, r3
 800936a:	f003 030f 	and.w	r3, r3, #15
 800936e:	b2db      	uxtb	r3, r3
 8009370:	3330      	adds	r3, #48	; 0x30
 8009372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009376:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800937a:	2b39      	cmp	r3, #57	; 0x39
 800937c:	d904      	bls.n	8009388 <gen_numname+0x9c>
 800937e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009382:	3307      	adds	r3, #7
 8009384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938a:	1e5a      	subs	r2, r3, #1
 800938c:	62ba      	str	r2, [r7, #40]	; 0x28
 800938e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009392:	4413      	add	r3, r2
 8009394:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009398:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	091b      	lsrs	r3, r3, #4
 80093a0:	603b      	str	r3, [r7, #0]
	} while (seq);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1de      	bne.n	8009366 <gen_numname+0x7a>
	ns[i] = '~';
 80093a8:	f107 0214 	add.w	r2, r7, #20
 80093ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ae:	4413      	add	r3, r2
 80093b0:	227e      	movs	r2, #126	; 0x7e
 80093b2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80093b4:	2300      	movs	r3, #0
 80093b6:	627b      	str	r3, [r7, #36]	; 0x24
 80093b8:	e002      	b.n	80093c0 <gen_numname+0xd4>
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	3301      	adds	r3, #1
 80093be:	627b      	str	r3, [r7, #36]	; 0x24
 80093c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d205      	bcs.n	80093d4 <gen_numname+0xe8>
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093cc:	4413      	add	r3, r2
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	2b20      	cmp	r3, #32
 80093d2:	d1f2      	bne.n	80093ba <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80093d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d6:	2b07      	cmp	r3, #7
 80093d8:	d808      	bhi.n	80093ec <gen_numname+0x100>
 80093da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093dc:	1c5a      	adds	r2, r3, #1
 80093de:	62ba      	str	r2, [r7, #40]	; 0x28
 80093e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80093e4:	4413      	add	r3, r2
 80093e6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80093ea:	e000      	b.n	80093ee <gen_numname+0x102>
 80093ec:	2120      	movs	r1, #32
 80093ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f0:	1c5a      	adds	r2, r3, #1
 80093f2:	627a      	str	r2, [r7, #36]	; 0x24
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	4413      	add	r3, r2
 80093f8:	460a      	mov	r2, r1
 80093fa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80093fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fe:	2b07      	cmp	r3, #7
 8009400:	d9e8      	bls.n	80093d4 <gen_numname+0xe8>
}
 8009402:	bf00      	nop
 8009404:	3730      	adds	r7, #48	; 0x30
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800940a:	b480      	push	{r7}
 800940c:	b085      	sub	sp, #20
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009412:	2300      	movs	r3, #0
 8009414:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009416:	230b      	movs	r3, #11
 8009418:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800941a:	7bfb      	ldrb	r3, [r7, #15]
 800941c:	b2da      	uxtb	r2, r3
 800941e:	0852      	lsrs	r2, r2, #1
 8009420:	01db      	lsls	r3, r3, #7
 8009422:	4313      	orrs	r3, r2
 8009424:	b2da      	uxtb	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	1c59      	adds	r1, r3, #1
 800942a:	6079      	str	r1, [r7, #4]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	4413      	add	r3, r2
 8009430:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	3b01      	subs	r3, #1
 8009436:	60bb      	str	r3, [r7, #8]
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1ed      	bne.n	800941a <sum_sfn+0x10>
	return sum;
 800943e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3714      	adds	r7, #20
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800945a:	2100      	movs	r1, #0
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7ff fc88 	bl	8008d72 <dir_sdi>
 8009462:	4603      	mov	r3, r0
 8009464:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009466:	7dfb      	ldrb	r3, [r7, #23]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d001      	beq.n	8009470 <dir_find+0x24>
 800946c:	7dfb      	ldrb	r3, [r7, #23]
 800946e:	e0a9      	b.n	80095c4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009470:	23ff      	movs	r3, #255	; 0xff
 8009472:	753b      	strb	r3, [r7, #20]
 8009474:	7d3b      	ldrb	r3, [r7, #20]
 8009476:	757b      	strb	r3, [r7, #21]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f04f 32ff 	mov.w	r2, #4294967295
 800947e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	69db      	ldr	r3, [r3, #28]
 8009484:	4619      	mov	r1, r3
 8009486:	6938      	ldr	r0, [r7, #16]
 8009488:	f7ff f89a 	bl	80085c0 <move_window>
 800948c:	4603      	mov	r3, r0
 800948e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009490:	7dfb      	ldrb	r3, [r7, #23]
 8009492:	2b00      	cmp	r3, #0
 8009494:	f040 8090 	bne.w	80095b8 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a1b      	ldr	r3, [r3, #32]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80094a0:	7dbb      	ldrb	r3, [r7, #22]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d102      	bne.n	80094ac <dir_find+0x60>
 80094a6:	2304      	movs	r3, #4
 80094a8:	75fb      	strb	r3, [r7, #23]
 80094aa:	e08a      	b.n	80095c2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	330b      	adds	r3, #11
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094b8:	73fb      	strb	r3, [r7, #15]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	7bfa      	ldrb	r2, [r7, #15]
 80094be:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80094c0:	7dbb      	ldrb	r3, [r7, #22]
 80094c2:	2be5      	cmp	r3, #229	; 0xe5
 80094c4:	d007      	beq.n	80094d6 <dir_find+0x8a>
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
 80094c8:	f003 0308 	and.w	r3, r3, #8
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d009      	beq.n	80094e4 <dir_find+0x98>
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
 80094d2:	2b0f      	cmp	r3, #15
 80094d4:	d006      	beq.n	80094e4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80094d6:	23ff      	movs	r3, #255	; 0xff
 80094d8:	757b      	strb	r3, [r7, #21]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f04f 32ff 	mov.w	r2, #4294967295
 80094e0:	631a      	str	r2, [r3, #48]	; 0x30
 80094e2:	e05e      	b.n	80095a2 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
 80094e6:	2b0f      	cmp	r3, #15
 80094e8:	d136      	bne.n	8009558 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80094f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d154      	bne.n	80095a2 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80094f8:	7dbb      	ldrb	r3, [r7, #22]
 80094fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00d      	beq.n	800951e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	7b5b      	ldrb	r3, [r3, #13]
 8009508:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800950a:	7dbb      	ldrb	r3, [r7, #22]
 800950c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009510:	75bb      	strb	r3, [r7, #22]
 8009512:	7dbb      	ldrb	r3, [r7, #22]
 8009514:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	695a      	ldr	r2, [r3, #20]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800951e:	7dba      	ldrb	r2, [r7, #22]
 8009520:	7d7b      	ldrb	r3, [r7, #21]
 8009522:	429a      	cmp	r2, r3
 8009524:	d115      	bne.n	8009552 <dir_find+0x106>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	330d      	adds	r3, #13
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	7d3a      	ldrb	r2, [r7, #20]
 8009530:	429a      	cmp	r2, r3
 8009532:	d10e      	bne.n	8009552 <dir_find+0x106>
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	691a      	ldr	r2, [r3, #16]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a1b      	ldr	r3, [r3, #32]
 800953c:	4619      	mov	r1, r3
 800953e:	4610      	mov	r0, r2
 8009540:	f7ff fdfc 	bl	800913c <cmp_lfn>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d003      	beq.n	8009552 <dir_find+0x106>
 800954a:	7d7b      	ldrb	r3, [r7, #21]
 800954c:	3b01      	subs	r3, #1
 800954e:	b2db      	uxtb	r3, r3
 8009550:	e000      	b.n	8009554 <dir_find+0x108>
 8009552:	23ff      	movs	r3, #255	; 0xff
 8009554:	757b      	strb	r3, [r7, #21]
 8009556:	e024      	b.n	80095a2 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009558:	7d7b      	ldrb	r3, [r7, #21]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d109      	bne.n	8009572 <dir_find+0x126>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a1b      	ldr	r3, [r3, #32]
 8009562:	4618      	mov	r0, r3
 8009564:	f7ff ff51 	bl	800940a <sum_sfn>
 8009568:	4603      	mov	r3, r0
 800956a:	461a      	mov	r2, r3
 800956c:	7d3b      	ldrb	r3, [r7, #20]
 800956e:	4293      	cmp	r3, r2
 8009570:	d024      	beq.n	80095bc <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10a      	bne.n	8009596 <dir_find+0x14a>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a18      	ldr	r0, [r3, #32]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	3324      	adds	r3, #36	; 0x24
 8009588:	220b      	movs	r2, #11
 800958a:	4619      	mov	r1, r3
 800958c:	f7fe fe25 	bl	80081da <mem_cmp>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d014      	beq.n	80095c0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009596:	23ff      	movs	r3, #255	; 0xff
 8009598:	757b      	strb	r3, [r7, #21]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f04f 32ff 	mov.w	r2, #4294967295
 80095a0:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80095a2:	2100      	movs	r1, #0
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f7ff fc6d 	bl	8008e84 <dir_next>
 80095aa:	4603      	mov	r3, r0
 80095ac:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80095ae:	7dfb      	ldrb	r3, [r7, #23]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f43f af65 	beq.w	8009480 <dir_find+0x34>
 80095b6:	e004      	b.n	80095c2 <dir_find+0x176>
		if (res != FR_OK) break;
 80095b8:	bf00      	nop
 80095ba:	e002      	b.n	80095c2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80095bc:	bf00      	nop
 80095be:	e000      	b.n	80095c2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80095c0:	bf00      	nop

	return res;
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3718      	adds	r7, #24
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08c      	sub	sp, #48	; 0x30
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80095e0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d001      	beq.n	80095ec <dir_register+0x20>
 80095e8:	2306      	movs	r3, #6
 80095ea:	e0e0      	b.n	80097ae <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80095ec:	2300      	movs	r3, #0
 80095ee:	627b      	str	r3, [r7, #36]	; 0x24
 80095f0:	e002      	b.n	80095f8 <dir_register+0x2c>
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f4:	3301      	adds	r3, #1
 80095f6:	627b      	str	r3, [r7, #36]	; 0x24
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	691a      	ldr	r2, [r3, #16]
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fe:	005b      	lsls	r3, r3, #1
 8009600:	4413      	add	r3, r2
 8009602:	881b      	ldrh	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1f4      	bne.n	80095f2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800960e:	f107 030c 	add.w	r3, r7, #12
 8009612:	220c      	movs	r2, #12
 8009614:	4618      	mov	r0, r3
 8009616:	f7fe fda5 	bl	8008164 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800961a:	7dfb      	ldrb	r3, [r7, #23]
 800961c:	f003 0301 	and.w	r3, r3, #1
 8009620:	2b00      	cmp	r3, #0
 8009622:	d032      	beq.n	800968a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2240      	movs	r2, #64	; 0x40
 8009628:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800962c:	2301      	movs	r3, #1
 800962e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009630:	e016      	b.n	8009660 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	691a      	ldr	r2, [r3, #16]
 800963c:	f107 010c 	add.w	r1, r7, #12
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	f7ff fe53 	bl	80092ec <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f7ff ff00 	bl	800944c <dir_find>
 800964c:	4603      	mov	r3, r0
 800964e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009652:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009656:	2b00      	cmp	r3, #0
 8009658:	d106      	bne.n	8009668 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	3301      	adds	r3, #1
 800965e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009662:	2b63      	cmp	r3, #99	; 0x63
 8009664:	d9e5      	bls.n	8009632 <dir_register+0x66>
 8009666:	e000      	b.n	800966a <dir_register+0x9e>
			if (res != FR_OK) break;
 8009668:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	2b64      	cmp	r3, #100	; 0x64
 800966e:	d101      	bne.n	8009674 <dir_register+0xa8>
 8009670:	2307      	movs	r3, #7
 8009672:	e09c      	b.n	80097ae <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009674:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009678:	2b04      	cmp	r3, #4
 800967a:	d002      	beq.n	8009682 <dir_register+0xb6>
 800967c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009680:	e095      	b.n	80097ae <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009682:	7dfa      	ldrb	r2, [r7, #23]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800968a:	7dfb      	ldrb	r3, [r7, #23]
 800968c:	f003 0302 	and.w	r3, r3, #2
 8009690:	2b00      	cmp	r3, #0
 8009692:	d007      	beq.n	80096a4 <dir_register+0xd8>
 8009694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009696:	330c      	adds	r3, #12
 8009698:	4a47      	ldr	r2, [pc, #284]	; (80097b8 <dir_register+0x1ec>)
 800969a:	fba2 2303 	umull	r2, r3, r2, r3
 800969e:	089b      	lsrs	r3, r3, #2
 80096a0:	3301      	adds	r3, #1
 80096a2:	e000      	b.n	80096a6 <dir_register+0xda>
 80096a4:	2301      	movs	r3, #1
 80096a6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80096a8:	6a39      	ldr	r1, [r7, #32]
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f7ff fcc0 	bl	8009030 <dir_alloc>
 80096b0:	4603      	mov	r3, r0
 80096b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80096b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d148      	bne.n	8009750 <dir_register+0x184>
 80096be:	6a3b      	ldr	r3, [r7, #32]
 80096c0:	3b01      	subs	r3, #1
 80096c2:	623b      	str	r3, [r7, #32]
 80096c4:	6a3b      	ldr	r3, [r7, #32]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d042      	beq.n	8009750 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	695a      	ldr	r2, [r3, #20]
 80096ce:	6a3b      	ldr	r3, [r7, #32]
 80096d0:	015b      	lsls	r3, r3, #5
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7ff fb4b 	bl	8008d72 <dir_sdi>
 80096dc:	4603      	mov	r3, r0
 80096de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80096e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d132      	bne.n	8009750 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	3324      	adds	r3, #36	; 0x24
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7ff fe8b 	bl	800940a <sum_sfn>
 80096f4:	4603      	mov	r3, r0
 80096f6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	69db      	ldr	r3, [r3, #28]
 80096fc:	4619      	mov	r1, r3
 80096fe:	69f8      	ldr	r0, [r7, #28]
 8009700:	f7fe ff5e 	bl	80085c0 <move_window>
 8009704:	4603      	mov	r3, r0
 8009706:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800970a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800970e:	2b00      	cmp	r3, #0
 8009710:	d11d      	bne.n	800974e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	6918      	ldr	r0, [r3, #16]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a19      	ldr	r1, [r3, #32]
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	b2da      	uxtb	r2, r3
 800971e:	7efb      	ldrb	r3, [r7, #27]
 8009720:	f7ff fd7c 	bl	800921c <put_lfn>
				fs->wflag = 1;
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	2201      	movs	r2, #1
 8009728:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800972a:	2100      	movs	r1, #0
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7ff fba9 	bl	8008e84 <dir_next>
 8009732:	4603      	mov	r3, r0
 8009734:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009738:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800973c:	2b00      	cmp	r3, #0
 800973e:	d107      	bne.n	8009750 <dir_register+0x184>
 8009740:	6a3b      	ldr	r3, [r7, #32]
 8009742:	3b01      	subs	r3, #1
 8009744:	623b      	str	r3, [r7, #32]
 8009746:	6a3b      	ldr	r3, [r7, #32]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1d5      	bne.n	80096f8 <dir_register+0x12c>
 800974c:	e000      	b.n	8009750 <dir_register+0x184>
				if (res != FR_OK) break;
 800974e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009750:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009754:	2b00      	cmp	r3, #0
 8009756:	d128      	bne.n	80097aa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	69db      	ldr	r3, [r3, #28]
 800975c:	4619      	mov	r1, r3
 800975e:	69f8      	ldr	r0, [r7, #28]
 8009760:	f7fe ff2e 	bl	80085c0 <move_window>
 8009764:	4603      	mov	r3, r0
 8009766:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800976a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800976e:	2b00      	cmp	r3, #0
 8009770:	d11b      	bne.n	80097aa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	2220      	movs	r2, #32
 8009778:	2100      	movs	r1, #0
 800977a:	4618      	mov	r0, r3
 800977c:	f7fe fd13 	bl	80081a6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6a18      	ldr	r0, [r3, #32]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	3324      	adds	r3, #36	; 0x24
 8009788:	220b      	movs	r2, #11
 800978a:	4619      	mov	r1, r3
 800978c:	f7fe fcea 	bl	8008164 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	330c      	adds	r3, #12
 800979c:	f002 0218 	and.w	r2, r2, #24
 80097a0:	b2d2      	uxtb	r2, r2
 80097a2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	2201      	movs	r2, #1
 80097a8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80097aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3730      	adds	r7, #48	; 0x30
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	4ec4ec4f 	.word	0x4ec4ec4f

080097bc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b08a      	sub	sp, #40	; 0x28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	613b      	str	r3, [r7, #16]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	60fb      	str	r3, [r7, #12]
 80097d4:	2300      	movs	r3, #0
 80097d6:	617b      	str	r3, [r7, #20]
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	1c5a      	adds	r2, r3, #1
 80097e0:	61ba      	str	r2, [r7, #24]
 80097e2:	693a      	ldr	r2, [r7, #16]
 80097e4:	4413      	add	r3, r2
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80097ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097ec:	2b1f      	cmp	r3, #31
 80097ee:	d940      	bls.n	8009872 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80097f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097f2:	2b2f      	cmp	r3, #47	; 0x2f
 80097f4:	d006      	beq.n	8009804 <create_name+0x48>
 80097f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097f8:	2b5c      	cmp	r3, #92	; 0x5c
 80097fa:	d110      	bne.n	800981e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80097fc:	e002      	b.n	8009804 <create_name+0x48>
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	3301      	adds	r3, #1
 8009802:	61bb      	str	r3, [r7, #24]
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	4413      	add	r3, r2
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	2b2f      	cmp	r3, #47	; 0x2f
 800980e:	d0f6      	beq.n	80097fe <create_name+0x42>
 8009810:	693a      	ldr	r2, [r7, #16]
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	4413      	add	r3, r2
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	2b5c      	cmp	r3, #92	; 0x5c
 800981a:	d0f0      	beq.n	80097fe <create_name+0x42>
			break;
 800981c:	e02a      	b.n	8009874 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	2bfe      	cmp	r3, #254	; 0xfe
 8009822:	d901      	bls.n	8009828 <create_name+0x6c>
 8009824:	2306      	movs	r3, #6
 8009826:	e177      	b.n	8009b18 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009828:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800982a:	b2db      	uxtb	r3, r3
 800982c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800982e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009830:	2101      	movs	r1, #1
 8009832:	4618      	mov	r0, r3
 8009834:	f7fe fab0 	bl	8007d98 <ff_convert>
 8009838:	4603      	mov	r3, r0
 800983a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800983c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800983e:	2b00      	cmp	r3, #0
 8009840:	d101      	bne.n	8009846 <create_name+0x8a>
 8009842:	2306      	movs	r3, #6
 8009844:	e168      	b.n	8009b18 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009846:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009848:	2b7f      	cmp	r3, #127	; 0x7f
 800984a:	d809      	bhi.n	8009860 <create_name+0xa4>
 800984c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800984e:	4619      	mov	r1, r3
 8009850:	48b3      	ldr	r0, [pc, #716]	; (8009b20 <create_name+0x364>)
 8009852:	f7fe fce9 	bl	8008228 <chk_chr>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d001      	beq.n	8009860 <create_name+0xa4>
 800985c:	2306      	movs	r3, #6
 800985e:	e15b      	b.n	8009b18 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	1c5a      	adds	r2, r3, #1
 8009864:	617a      	str	r2, [r7, #20]
 8009866:	005b      	lsls	r3, r3, #1
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	4413      	add	r3, r2
 800986c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800986e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009870:	e7b4      	b.n	80097dc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009872:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009874:	693a      	ldr	r2, [r7, #16]
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	441a      	add	r2, r3
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800987e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009880:	2b1f      	cmp	r3, #31
 8009882:	d801      	bhi.n	8009888 <create_name+0xcc>
 8009884:	2304      	movs	r3, #4
 8009886:	e000      	b.n	800988a <create_name+0xce>
 8009888:	2300      	movs	r3, #0
 800988a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800988e:	e011      	b.n	80098b4 <create_name+0xf8>
		w = lfn[di - 1];
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009896:	3b01      	subs	r3, #1
 8009898:	005b      	lsls	r3, r3, #1
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	4413      	add	r3, r2
 800989e:	881b      	ldrh	r3, [r3, #0]
 80098a0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80098a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098a4:	2b20      	cmp	r3, #32
 80098a6:	d002      	beq.n	80098ae <create_name+0xf2>
 80098a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098aa:	2b2e      	cmp	r3, #46	; 0x2e
 80098ac:	d106      	bne.n	80098bc <create_name+0x100>
		di--;
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	3b01      	subs	r3, #1
 80098b2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1ea      	bne.n	8009890 <create_name+0xd4>
 80098ba:	e000      	b.n	80098be <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80098bc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	005b      	lsls	r3, r3, #1
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	4413      	add	r3, r2
 80098c6:	2200      	movs	r2, #0
 80098c8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <create_name+0x118>
 80098d0:	2306      	movs	r3, #6
 80098d2:	e121      	b.n	8009b18 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	3324      	adds	r3, #36	; 0x24
 80098d8:	220b      	movs	r2, #11
 80098da:	2120      	movs	r1, #32
 80098dc:	4618      	mov	r0, r3
 80098de:	f7fe fc62 	bl	80081a6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80098e2:	2300      	movs	r3, #0
 80098e4:	61bb      	str	r3, [r7, #24]
 80098e6:	e002      	b.n	80098ee <create_name+0x132>
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	3301      	adds	r3, #1
 80098ec:	61bb      	str	r3, [r7, #24]
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	4413      	add	r3, r2
 80098f6:	881b      	ldrh	r3, [r3, #0]
 80098f8:	2b20      	cmp	r3, #32
 80098fa:	d0f5      	beq.n	80098e8 <create_name+0x12c>
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	005b      	lsls	r3, r3, #1
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	4413      	add	r3, r2
 8009904:	881b      	ldrh	r3, [r3, #0]
 8009906:	2b2e      	cmp	r3, #46	; 0x2e
 8009908:	d0ee      	beq.n	80098e8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d009      	beq.n	8009924 <create_name+0x168>
 8009910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009914:	f043 0303 	orr.w	r3, r3, #3
 8009918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800991c:	e002      	b.n	8009924 <create_name+0x168>
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	3b01      	subs	r3, #1
 8009922:	617b      	str	r3, [r7, #20]
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d009      	beq.n	800993e <create_name+0x182>
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009930:	3b01      	subs	r3, #1
 8009932:	005b      	lsls	r3, r3, #1
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	4413      	add	r3, r2
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	2b2e      	cmp	r3, #46	; 0x2e
 800993c:	d1ef      	bne.n	800991e <create_name+0x162>

	i = b = 0; ni = 8;
 800993e:	2300      	movs	r3, #0
 8009940:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009944:	2300      	movs	r3, #0
 8009946:	623b      	str	r3, [r7, #32]
 8009948:	2308      	movs	r3, #8
 800994a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	1c5a      	adds	r2, r3, #1
 8009950:	61ba      	str	r2, [r7, #24]
 8009952:	005b      	lsls	r3, r3, #1
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	4413      	add	r3, r2
 8009958:	881b      	ldrh	r3, [r3, #0]
 800995a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800995c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800995e:	2b00      	cmp	r3, #0
 8009960:	f000 8090 	beq.w	8009a84 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009966:	2b20      	cmp	r3, #32
 8009968:	d006      	beq.n	8009978 <create_name+0x1bc>
 800996a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800996c:	2b2e      	cmp	r3, #46	; 0x2e
 800996e:	d10a      	bne.n	8009986 <create_name+0x1ca>
 8009970:	69ba      	ldr	r2, [r7, #24]
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	429a      	cmp	r2, r3
 8009976:	d006      	beq.n	8009986 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800997c:	f043 0303 	orr.w	r3, r3, #3
 8009980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009984:	e07d      	b.n	8009a82 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009986:	6a3a      	ldr	r2, [r7, #32]
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	429a      	cmp	r2, r3
 800998c:	d203      	bcs.n	8009996 <create_name+0x1da>
 800998e:	69ba      	ldr	r2, [r7, #24]
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	429a      	cmp	r2, r3
 8009994:	d123      	bne.n	80099de <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	2b0b      	cmp	r3, #11
 800999a:	d106      	bne.n	80099aa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800999c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099a0:	f043 0303 	orr.w	r3, r3, #3
 80099a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099a8:	e06f      	b.n	8009a8a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80099aa:	69ba      	ldr	r2, [r7, #24]
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d005      	beq.n	80099be <create_name+0x202>
 80099b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099b6:	f043 0303 	orr.w	r3, r3, #3
 80099ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80099be:	69ba      	ldr	r2, [r7, #24]
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d860      	bhi.n	8009a88 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	61bb      	str	r3, [r7, #24]
 80099ca:	2308      	movs	r3, #8
 80099cc:	623b      	str	r3, [r7, #32]
 80099ce:	230b      	movs	r3, #11
 80099d0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80099d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80099dc:	e051      	b.n	8009a82 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80099de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099e0:	2b7f      	cmp	r3, #127	; 0x7f
 80099e2:	d914      	bls.n	8009a0e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80099e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099e6:	2100      	movs	r1, #0
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7fe f9d5 	bl	8007d98 <ff_convert>
 80099ee:	4603      	mov	r3, r0
 80099f0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80099f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d004      	beq.n	8009a02 <create_name+0x246>
 80099f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099fa:	3b80      	subs	r3, #128	; 0x80
 80099fc:	4a49      	ldr	r2, [pc, #292]	; (8009b24 <create_name+0x368>)
 80099fe:	5cd3      	ldrb	r3, [r2, r3]
 8009a00:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a06:	f043 0302 	orr.w	r3, r3, #2
 8009a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009a0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d007      	beq.n	8009a24 <create_name+0x268>
 8009a14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a16:	4619      	mov	r1, r3
 8009a18:	4843      	ldr	r0, [pc, #268]	; (8009b28 <create_name+0x36c>)
 8009a1a:	f7fe fc05 	bl	8008228 <chk_chr>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d008      	beq.n	8009a36 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009a24:	235f      	movs	r3, #95	; 0x5f
 8009a26:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a2c:	f043 0303 	orr.w	r3, r3, #3
 8009a30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a34:	e01b      	b.n	8009a6e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009a36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a38:	2b40      	cmp	r3, #64	; 0x40
 8009a3a:	d909      	bls.n	8009a50 <create_name+0x294>
 8009a3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a3e:	2b5a      	cmp	r3, #90	; 0x5a
 8009a40:	d806      	bhi.n	8009a50 <create_name+0x294>
					b |= 2;
 8009a42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009a46:	f043 0302 	orr.w	r3, r3, #2
 8009a4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009a4e:	e00e      	b.n	8009a6e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009a50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a52:	2b60      	cmp	r3, #96	; 0x60
 8009a54:	d90b      	bls.n	8009a6e <create_name+0x2b2>
 8009a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a58:	2b7a      	cmp	r3, #122	; 0x7a
 8009a5a:	d808      	bhi.n	8009a6e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009a5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009a60:	f043 0301 	orr.w	r3, r3, #1
 8009a64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009a68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a6a:	3b20      	subs	r3, #32
 8009a6c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009a6e:	6a3b      	ldr	r3, [r7, #32]
 8009a70:	1c5a      	adds	r2, r3, #1
 8009a72:	623a      	str	r2, [r7, #32]
 8009a74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009a76:	b2d1      	uxtb	r1, r2
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	460a      	mov	r2, r1
 8009a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009a82:	e763      	b.n	800994c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009a84:	bf00      	nop
 8009a86:	e000      	b.n	8009a8a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8009a88:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a90:	2be5      	cmp	r3, #229	; 0xe5
 8009a92:	d103      	bne.n	8009a9c <create_name+0x2e0>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2205      	movs	r2, #5
 8009a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	2b08      	cmp	r3, #8
 8009aa0:	d104      	bne.n	8009aac <create_name+0x2f0>
 8009aa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009aac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ab0:	f003 030c 	and.w	r3, r3, #12
 8009ab4:	2b0c      	cmp	r3, #12
 8009ab6:	d005      	beq.n	8009ac4 <create_name+0x308>
 8009ab8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009abc:	f003 0303 	and.w	r3, r3, #3
 8009ac0:	2b03      	cmp	r3, #3
 8009ac2:	d105      	bne.n	8009ad0 <create_name+0x314>
 8009ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ac8:	f043 0302 	orr.w	r3, r3, #2
 8009acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ad4:	f003 0302 	and.w	r3, r3, #2
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d117      	bne.n	8009b0c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009adc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ae0:	f003 0303 	and.w	r3, r3, #3
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d105      	bne.n	8009af4 <create_name+0x338>
 8009ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009aec:	f043 0310 	orr.w	r3, r3, #16
 8009af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009af4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009af8:	f003 030c 	and.w	r3, r3, #12
 8009afc:	2b04      	cmp	r3, #4
 8009afe:	d105      	bne.n	8009b0c <create_name+0x350>
 8009b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b04:	f043 0308 	orr.w	r3, r3, #8
 8009b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009b12:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009b16:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3728      	adds	r7, #40	; 0x28
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	0800be40 	.word	0x0800be40
 8009b24:	0800c26c 	.word	0x0800c26c
 8009b28:	0800be4c 	.word	0x0800be4c

08009b2c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b086      	sub	sp, #24
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009b40:	e002      	b.n	8009b48 <follow_path+0x1c>
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	3301      	adds	r3, #1
 8009b46:	603b      	str	r3, [r7, #0]
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	2b2f      	cmp	r3, #47	; 0x2f
 8009b4e:	d0f8      	beq.n	8009b42 <follow_path+0x16>
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	2b5c      	cmp	r3, #92	; 0x5c
 8009b56:	d0f4      	beq.n	8009b42 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	2b1f      	cmp	r3, #31
 8009b64:	d80a      	bhi.n	8009b7c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2280      	movs	r2, #128	; 0x80
 8009b6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009b6e:	2100      	movs	r1, #0
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f7ff f8fe 	bl	8008d72 <dir_sdi>
 8009b76:	4603      	mov	r3, r0
 8009b78:	75fb      	strb	r3, [r7, #23]
 8009b7a:	e048      	b.n	8009c0e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009b7c:	463b      	mov	r3, r7
 8009b7e:	4619      	mov	r1, r3
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7ff fe1b 	bl	80097bc <create_name>
 8009b86:	4603      	mov	r3, r0
 8009b88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009b8a:	7dfb      	ldrb	r3, [r7, #23]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d139      	bne.n	8009c04 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f7ff fc5b 	bl	800944c <dir_find>
 8009b96:	4603      	mov	r3, r0
 8009b98:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009ba0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009ba2:	7dfb      	ldrb	r3, [r7, #23]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00a      	beq.n	8009bbe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009ba8:	7dfb      	ldrb	r3, [r7, #23]
 8009baa:	2b04      	cmp	r3, #4
 8009bac:	d12c      	bne.n	8009c08 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009bae:	7afb      	ldrb	r3, [r7, #11]
 8009bb0:	f003 0304 	and.w	r3, r3, #4
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d127      	bne.n	8009c08 <follow_path+0xdc>
 8009bb8:	2305      	movs	r3, #5
 8009bba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009bbc:	e024      	b.n	8009c08 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009bbe:	7afb      	ldrb	r3, [r7, #11]
 8009bc0:	f003 0304 	and.w	r3, r3, #4
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d121      	bne.n	8009c0c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	799b      	ldrb	r3, [r3, #6]
 8009bcc:	f003 0310 	and.w	r3, r3, #16
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d102      	bne.n	8009bda <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009bd4:	2305      	movs	r3, #5
 8009bd6:	75fb      	strb	r3, [r7, #23]
 8009bd8:	e019      	b.n	8009c0e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	68fa      	ldr	r2, [r7, #12]
 8009be6:	8992      	ldrh	r2, [r2, #12]
 8009be8:	fbb3 f0f2 	udiv	r0, r3, r2
 8009bec:	fb02 f200 	mul.w	r2, r2, r0
 8009bf0:	1a9b      	subs	r3, r3, r2
 8009bf2:	440b      	add	r3, r1
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f7ff fa61 	bl	80090be <ld_clust>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009c02:	e7bb      	b.n	8009b7c <follow_path+0x50>
			if (res != FR_OK) break;
 8009c04:	bf00      	nop
 8009c06:	e002      	b.n	8009c0e <follow_path+0xe2>
				break;
 8009c08:	bf00      	nop
 8009c0a:	e000      	b.n	8009c0e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009c0c:	bf00      	nop
			}
		}
	}

	return res;
 8009c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3718      	adds	r7, #24
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b087      	sub	sp, #28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009c20:	f04f 33ff 	mov.w	r3, #4294967295
 8009c24:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d031      	beq.n	8009c92 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	617b      	str	r3, [r7, #20]
 8009c34:	e002      	b.n	8009c3c <get_ldnumber+0x24>
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	617b      	str	r3, [r7, #20]
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	2b1f      	cmp	r3, #31
 8009c42:	d903      	bls.n	8009c4c <get_ldnumber+0x34>
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	2b3a      	cmp	r3, #58	; 0x3a
 8009c4a:	d1f4      	bne.n	8009c36 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	2b3a      	cmp	r3, #58	; 0x3a
 8009c52:	d11c      	bne.n	8009c8e <get_ldnumber+0x76>
			tp = *path;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	1c5a      	adds	r2, r3, #1
 8009c5e:	60fa      	str	r2, [r7, #12]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	3b30      	subs	r3, #48	; 0x30
 8009c64:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	2b09      	cmp	r3, #9
 8009c6a:	d80e      	bhi.n	8009c8a <get_ldnumber+0x72>
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d10a      	bne.n	8009c8a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d107      	bne.n	8009c8a <get_ldnumber+0x72>
					vol = (int)i;
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	3301      	adds	r3, #1
 8009c82:	617b      	str	r3, [r7, #20]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	e002      	b.n	8009c94 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009c8e:	2300      	movs	r3, #0
 8009c90:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009c92:	693b      	ldr	r3, [r7, #16]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	371c      	adds	r7, #28
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	70da      	strb	r2, [r3, #3]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009cb8:	6839      	ldr	r1, [r7, #0]
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7fe fc80 	bl	80085c0 <move_window>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d001      	beq.n	8009cca <check_fs+0x2a>
 8009cc6:	2304      	movs	r3, #4
 8009cc8:	e038      	b.n	8009d3c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	3338      	adds	r3, #56	; 0x38
 8009cce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7fe f9c4 	bl	8008060 <ld_word>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	461a      	mov	r2, r3
 8009cdc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d001      	beq.n	8009ce8 <check_fs+0x48>
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	e029      	b.n	8009d3c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009cee:	2be9      	cmp	r3, #233	; 0xe9
 8009cf0:	d009      	beq.n	8009d06 <check_fs+0x66>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009cf8:	2beb      	cmp	r3, #235	; 0xeb
 8009cfa:	d11e      	bne.n	8009d3a <check_fs+0x9a>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009d02:	2b90      	cmp	r3, #144	; 0x90
 8009d04:	d119      	bne.n	8009d3a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	3338      	adds	r3, #56	; 0x38
 8009d0a:	3336      	adds	r3, #54	; 0x36
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7fe f9bf 	bl	8008090 <ld_dword>
 8009d12:	4603      	mov	r3, r0
 8009d14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009d18:	4a0a      	ldr	r2, [pc, #40]	; (8009d44 <check_fs+0xa4>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d101      	bne.n	8009d22 <check_fs+0x82>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	e00c      	b.n	8009d3c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	3338      	adds	r3, #56	; 0x38
 8009d26:	3352      	adds	r3, #82	; 0x52
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fe f9b1 	bl	8008090 <ld_dword>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	4b05      	ldr	r3, [pc, #20]	; (8009d48 <check_fs+0xa8>)
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d101      	bne.n	8009d3a <check_fs+0x9a>
 8009d36:	2300      	movs	r3, #0
 8009d38:	e000      	b.n	8009d3c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009d3a:	2302      	movs	r3, #2
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	00544146 	.word	0x00544146
 8009d48:	33544146 	.word	0x33544146

08009d4c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b096      	sub	sp, #88	; 0x58
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	4613      	mov	r3, r2
 8009d58:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f7ff ff59 	bl	8009c18 <get_ldnumber>
 8009d66:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	da01      	bge.n	8009d72 <find_volume+0x26>
 8009d6e:	230b      	movs	r3, #11
 8009d70:	e268      	b.n	800a244 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009d72:	4ab0      	ldr	r2, [pc, #704]	; (800a034 <find_volume+0x2e8>)
 8009d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d7a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d101      	bne.n	8009d86 <find_volume+0x3a>
 8009d82:	230c      	movs	r3, #12
 8009d84:	e25e      	b.n	800a244 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d8a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009d8c:	79fb      	ldrb	r3, [r7, #7]
 8009d8e:	f023 0301 	bic.w	r3, r3, #1
 8009d92:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d01a      	beq.n	8009dd2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9e:	785b      	ldrb	r3, [r3, #1]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7fe f8bf 	bl	8007f24 <disk_status>
 8009da6:	4603      	mov	r3, r0
 8009da8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009dac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009db0:	f003 0301 	and.w	r3, r3, #1
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10c      	bne.n	8009dd2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009db8:	79fb      	ldrb	r3, [r7, #7]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d007      	beq.n	8009dce <find_volume+0x82>
 8009dbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009dc2:	f003 0304 	and.w	r3, r3, #4
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d001      	beq.n	8009dce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009dca:	230a      	movs	r3, #10
 8009dcc:	e23a      	b.n	800a244 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8009dce:	2300      	movs	r3, #0
 8009dd0:	e238      	b.n	800a244 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dda:	b2da      	uxtb	r2, r3
 8009ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dde:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de2:	785b      	ldrb	r3, [r3, #1]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fe f8b7 	bl	8007f58 <disk_initialize>
 8009dea:	4603      	mov	r3, r0
 8009dec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009df0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009df4:	f003 0301 	and.w	r3, r3, #1
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009dfc:	2303      	movs	r3, #3
 8009dfe:	e221      	b.n	800a244 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009e00:	79fb      	ldrb	r3, [r7, #7]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d007      	beq.n	8009e16 <find_volume+0xca>
 8009e06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e0a:	f003 0304 	and.w	r3, r3, #4
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009e12:	230a      	movs	r3, #10
 8009e14:	e216      	b.n	800a244 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e18:	7858      	ldrb	r0, [r3, #1]
 8009e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e1c:	330c      	adds	r3, #12
 8009e1e:	461a      	mov	r2, r3
 8009e20:	2102      	movs	r1, #2
 8009e22:	f7fe f8ff 	bl	8008024 <disk_ioctl>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d001      	beq.n	8009e30 <find_volume+0xe4>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e209      	b.n	800a244 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e32:	899b      	ldrh	r3, [r3, #12]
 8009e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e38:	d80d      	bhi.n	8009e56 <find_volume+0x10a>
 8009e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3c:	899b      	ldrh	r3, [r3, #12]
 8009e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e42:	d308      	bcc.n	8009e56 <find_volume+0x10a>
 8009e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e46:	899b      	ldrh	r3, [r3, #12]
 8009e48:	461a      	mov	r2, r3
 8009e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4c:	899b      	ldrh	r3, [r3, #12]
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	4013      	ands	r3, r2
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d001      	beq.n	8009e5a <find_volume+0x10e>
 8009e56:	2301      	movs	r3, #1
 8009e58:	e1f4      	b.n	800a244 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009e5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e62:	f7ff ff1d 	bl	8009ca0 <check_fs>
 8009e66:	4603      	mov	r3, r0
 8009e68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009e6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	d14b      	bne.n	8009f0c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009e74:	2300      	movs	r3, #0
 8009e76:	643b      	str	r3, [r7, #64]	; 0x40
 8009e78:	e01f      	b.n	8009eba <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e82:	011b      	lsls	r3, r3, #4
 8009e84:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009e88:	4413      	add	r3, r2
 8009e8a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8e:	3304      	adds	r3, #4
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d006      	beq.n	8009ea4 <find_volume+0x158>
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	3308      	adds	r3, #8
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fe f8f8 	bl	8008090 <ld_dword>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	e000      	b.n	8009ea6 <find_volume+0x15a>
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009eae:	440b      	add	r3, r1
 8009eb0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	643b      	str	r3, [r7, #64]	; 0x40
 8009eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ebc:	2b03      	cmp	r3, #3
 8009ebe:	d9dc      	bls.n	8009e7a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d002      	beq.n	8009ed0 <find_volume+0x184>
 8009eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009ed8:	4413      	add	r3, r2
 8009eda:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009ede:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d005      	beq.n	8009ef2 <find_volume+0x1a6>
 8009ee6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ee8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009eea:	f7ff fed9 	bl	8009ca0 <check_fs>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	e000      	b.n	8009ef4 <find_volume+0x1a8>
 8009ef2:	2303      	movs	r3, #3
 8009ef4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009ef8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d905      	bls.n	8009f0c <find_volume+0x1c0>
 8009f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f02:	3301      	adds	r3, #1
 8009f04:	643b      	str	r3, [r7, #64]	; 0x40
 8009f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f08:	2b03      	cmp	r3, #3
 8009f0a:	d9e1      	bls.n	8009ed0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009f0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f10:	2b04      	cmp	r3, #4
 8009f12:	d101      	bne.n	8009f18 <find_volume+0x1cc>
 8009f14:	2301      	movs	r3, #1
 8009f16:	e195      	b.n	800a244 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009f18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d901      	bls.n	8009f24 <find_volume+0x1d8>
 8009f20:	230d      	movs	r3, #13
 8009f22:	e18f      	b.n	800a244 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f26:	3338      	adds	r3, #56	; 0x38
 8009f28:	330b      	adds	r3, #11
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fe f898 	bl	8008060 <ld_word>
 8009f30:	4603      	mov	r3, r0
 8009f32:	461a      	mov	r2, r3
 8009f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f36:	899b      	ldrh	r3, [r3, #12]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d001      	beq.n	8009f40 <find_volume+0x1f4>
 8009f3c:	230d      	movs	r3, #13
 8009f3e:	e181      	b.n	800a244 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f42:	3338      	adds	r3, #56	; 0x38
 8009f44:	3316      	adds	r3, #22
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fe f88a 	bl	8008060 <ld_word>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d106      	bne.n	8009f64 <find_volume+0x218>
 8009f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f58:	3338      	adds	r3, #56	; 0x38
 8009f5a:	3324      	adds	r3, #36	; 0x24
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7fe f897 	bl	8008090 <ld_dword>
 8009f62:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f68:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8009f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f72:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f76:	789b      	ldrb	r3, [r3, #2]
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d005      	beq.n	8009f88 <find_volume+0x23c>
 8009f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7e:	789b      	ldrb	r3, [r3, #2]
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d001      	beq.n	8009f88 <find_volume+0x23c>
 8009f84:	230d      	movs	r3, #13
 8009f86:	e15d      	b.n	800a244 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8a:	789b      	ldrb	r3, [r3, #2]
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f90:	fb02 f303 	mul.w	r3, r2, r3
 8009f94:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa4:	895b      	ldrh	r3, [r3, #10]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d008      	beq.n	8009fbc <find_volume+0x270>
 8009faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fac:	895b      	ldrh	r3, [r3, #10]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb2:	895b      	ldrh	r3, [r3, #10]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d001      	beq.n	8009fc0 <find_volume+0x274>
 8009fbc:	230d      	movs	r3, #13
 8009fbe:	e141      	b.n	800a244 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc2:	3338      	adds	r3, #56	; 0x38
 8009fc4:	3311      	adds	r3, #17
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7fe f84a 	bl	8008060 <ld_word>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	461a      	mov	r2, r3
 8009fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd6:	891b      	ldrh	r3, [r3, #8]
 8009fd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fda:	8992      	ldrh	r2, [r2, #12]
 8009fdc:	0952      	lsrs	r2, r2, #5
 8009fde:	b292      	uxth	r2, r2
 8009fe0:	fbb3 f1f2 	udiv	r1, r3, r2
 8009fe4:	fb02 f201 	mul.w	r2, r2, r1
 8009fe8:	1a9b      	subs	r3, r3, r2
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d001      	beq.n	8009ff4 <find_volume+0x2a8>
 8009ff0:	230d      	movs	r3, #13
 8009ff2:	e127      	b.n	800a244 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff6:	3338      	adds	r3, #56	; 0x38
 8009ff8:	3313      	adds	r3, #19
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fe f830 	bl	8008060 <ld_word>
 800a000:	4603      	mov	r3, r0
 800a002:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a006:	2b00      	cmp	r3, #0
 800a008:	d106      	bne.n	800a018 <find_volume+0x2cc>
 800a00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00c:	3338      	adds	r3, #56	; 0x38
 800a00e:	3320      	adds	r3, #32
 800a010:	4618      	mov	r0, r3
 800a012:	f7fe f83d 	bl	8008090 <ld_dword>
 800a016:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01a:	3338      	adds	r3, #56	; 0x38
 800a01c:	330e      	adds	r3, #14
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fe f81e 	bl	8008060 <ld_word>
 800a024:	4603      	mov	r3, r0
 800a026:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a028:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d104      	bne.n	800a038 <find_volume+0x2ec>
 800a02e:	230d      	movs	r3, #13
 800a030:	e108      	b.n	800a244 <find_volume+0x4f8>
 800a032:	bf00      	nop
 800a034:	20000118 	.word	0x20000118

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a038:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a03a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a03c:	4413      	add	r3, r2
 800a03e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a040:	8911      	ldrh	r1, [r2, #8]
 800a042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a044:	8992      	ldrh	r2, [r2, #12]
 800a046:	0952      	lsrs	r2, r2, #5
 800a048:	b292      	uxth	r2, r2
 800a04a:	fbb1 f2f2 	udiv	r2, r1, r2
 800a04e:	b292      	uxth	r2, r2
 800a050:	4413      	add	r3, r2
 800a052:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a054:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a058:	429a      	cmp	r2, r3
 800a05a:	d201      	bcs.n	800a060 <find_volume+0x314>
 800a05c:	230d      	movs	r3, #13
 800a05e:	e0f1      	b.n	800a244 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a068:	8952      	ldrh	r2, [r2, #10]
 800a06a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a06e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a072:	2b00      	cmp	r3, #0
 800a074:	d101      	bne.n	800a07a <find_volume+0x32e>
 800a076:	230d      	movs	r3, #13
 800a078:	e0e4      	b.n	800a244 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800a07a:	2303      	movs	r3, #3
 800a07c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a082:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a086:	4293      	cmp	r3, r2
 800a088:	d802      	bhi.n	800a090 <find_volume+0x344>
 800a08a:	2302      	movs	r3, #2
 800a08c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a092:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a096:	4293      	cmp	r3, r2
 800a098:	d802      	bhi.n	800a0a0 <find_volume+0x354>
 800a09a:	2301      	movs	r3, #1
 800a09c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	1c9a      	adds	r2, r3, #2
 800a0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a6:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a0ac:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a0ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a0b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0b2:	441a      	add	r2, r3
 800a0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a0b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0bc:	441a      	add	r2, r3
 800a0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a0c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	d11e      	bne.n	800a108 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0cc:	3338      	adds	r3, #56	; 0x38
 800a0ce:	332a      	adds	r3, #42	; 0x2a
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7fd ffc5 	bl	8008060 <ld_word>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d001      	beq.n	800a0e0 <find_volume+0x394>
 800a0dc:	230d      	movs	r3, #13
 800a0de:	e0b1      	b.n	800a244 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e2:	891b      	ldrh	r3, [r3, #8]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d001      	beq.n	800a0ec <find_volume+0x3a0>
 800a0e8:	230d      	movs	r3, #13
 800a0ea:	e0ab      	b.n	800a244 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ee:	3338      	adds	r3, #56	; 0x38
 800a0f0:	332c      	adds	r3, #44	; 0x2c
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7fd ffcc 	bl	8008090 <ld_dword>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a100:	69db      	ldr	r3, [r3, #28]
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	647b      	str	r3, [r7, #68]	; 0x44
 800a106:	e01f      	b.n	800a148 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10a:	891b      	ldrh	r3, [r3, #8]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d101      	bne.n	800a114 <find_volume+0x3c8>
 800a110:	230d      	movs	r3, #13
 800a112:	e097      	b.n	800a244 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a116:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a11a:	441a      	add	r2, r3
 800a11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a120:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a124:	2b02      	cmp	r3, #2
 800a126:	d103      	bne.n	800a130 <find_volume+0x3e4>
 800a128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12a:	69db      	ldr	r3, [r3, #28]
 800a12c:	005b      	lsls	r3, r3, #1
 800a12e:	e00a      	b.n	800a146 <find_volume+0x3fa>
 800a130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a132:	69da      	ldr	r2, [r3, #28]
 800a134:	4613      	mov	r3, r2
 800a136:	005b      	lsls	r3, r3, #1
 800a138:	4413      	add	r3, r2
 800a13a:	085a      	lsrs	r2, r3, #1
 800a13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13e:	69db      	ldr	r3, [r3, #28]
 800a140:	f003 0301 	and.w	r3, r3, #1
 800a144:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a146:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14a:	6a1a      	ldr	r2, [r3, #32]
 800a14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14e:	899b      	ldrh	r3, [r3, #12]
 800a150:	4619      	mov	r1, r3
 800a152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a154:	440b      	add	r3, r1
 800a156:	3b01      	subs	r3, #1
 800a158:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a15a:	8989      	ldrh	r1, [r1, #12]
 800a15c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a160:	429a      	cmp	r2, r3
 800a162:	d201      	bcs.n	800a168 <find_volume+0x41c>
 800a164:	230d      	movs	r3, #13
 800a166:	e06d      	b.n	800a244 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16a:	f04f 32ff 	mov.w	r2, #4294967295
 800a16e:	619a      	str	r2, [r3, #24]
 800a170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a172:	699a      	ldr	r2, [r3, #24]
 800a174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a176:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17a:	2280      	movs	r2, #128	; 0x80
 800a17c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a17e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a182:	2b03      	cmp	r3, #3
 800a184:	d149      	bne.n	800a21a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a188:	3338      	adds	r3, #56	; 0x38
 800a18a:	3330      	adds	r3, #48	; 0x30
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fd ff67 	bl	8008060 <ld_word>
 800a192:	4603      	mov	r3, r0
 800a194:	2b01      	cmp	r3, #1
 800a196:	d140      	bne.n	800a21a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a19a:	3301      	adds	r3, #1
 800a19c:	4619      	mov	r1, r3
 800a19e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1a0:	f7fe fa0e 	bl	80085c0 <move_window>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d137      	bne.n	800a21a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800a1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b2:	3338      	adds	r3, #56	; 0x38
 800a1b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7fd ff51 	bl	8008060 <ld_word>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d127      	bne.n	800a21a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1cc:	3338      	adds	r3, #56	; 0x38
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fd ff5e 	bl	8008090 <ld_dword>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	4b1d      	ldr	r3, [pc, #116]	; (800a24c <find_volume+0x500>)
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d11e      	bne.n	800a21a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1de:	3338      	adds	r3, #56	; 0x38
 800a1e0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7fd ff53 	bl	8008090 <ld_dword>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	4b18      	ldr	r3, [pc, #96]	; (800a250 <find_volume+0x504>)
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d113      	bne.n	800a21a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f4:	3338      	adds	r3, #56	; 0x38
 800a1f6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7fd ff48 	bl	8008090 <ld_dword>
 800a200:	4602      	mov	r2, r0
 800a202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a204:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a208:	3338      	adds	r3, #56	; 0x38
 800a20a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a20e:	4618      	mov	r0, r3
 800a210:	f7fd ff3e 	bl	8008090 <ld_dword>
 800a214:	4602      	mov	r2, r0
 800a216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a218:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a220:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a222:	4b0c      	ldr	r3, [pc, #48]	; (800a254 <find_volume+0x508>)
 800a224:	881b      	ldrh	r3, [r3, #0]
 800a226:	3301      	adds	r3, #1
 800a228:	b29a      	uxth	r2, r3
 800a22a:	4b0a      	ldr	r3, [pc, #40]	; (800a254 <find_volume+0x508>)
 800a22c:	801a      	strh	r2, [r3, #0]
 800a22e:	4b09      	ldr	r3, [pc, #36]	; (800a254 <find_volume+0x508>)
 800a230:	881a      	ldrh	r2, [r3, #0]
 800a232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a234:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a238:	4a07      	ldr	r2, [pc, #28]	; (800a258 <find_volume+0x50c>)
 800a23a:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a23c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a23e:	f7fe f957 	bl	80084f0 <clear_lock>
#endif
	return FR_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3758      	adds	r7, #88	; 0x58
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	41615252 	.word	0x41615252
 800a250:	61417272 	.word	0x61417272
 800a254:	2000011c 	.word	0x2000011c
 800a258:	20000140 	.word	0x20000140

0800a25c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a266:	2309      	movs	r3, #9
 800a268:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d01c      	beq.n	800a2aa <validate+0x4e>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d018      	beq.n	800a2aa <validate+0x4e>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d013      	beq.n	800a2aa <validate+0x4e>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	889a      	ldrh	r2, [r3, #4]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	88db      	ldrh	r3, [r3, #6]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d10c      	bne.n	800a2aa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	785b      	ldrb	r3, [r3, #1]
 800a296:	4618      	mov	r0, r3
 800a298:	f7fd fe44 	bl	8007f24 <disk_status>
 800a29c:	4603      	mov	r3, r0
 800a29e:	f003 0301 	and.w	r3, r3, #1
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d101      	bne.n	800a2aa <validate+0x4e>
			res = FR_OK;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a2aa:	7bfb      	ldrb	r3, [r7, #15]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d102      	bne.n	800a2b6 <validate+0x5a>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	e000      	b.n	800a2b8 <validate+0x5c>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	6013      	str	r3, [r2, #0]
	return res;
 800a2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
	...

0800a2c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b088      	sub	sp, #32
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	4613      	mov	r3, r2
 800a2d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a2da:	f107 0310 	add.w	r3, r7, #16
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7ff fc9a 	bl	8009c18 <get_ldnumber>
 800a2e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	da01      	bge.n	800a2f0 <f_mount+0x28>
 800a2ec:	230b      	movs	r3, #11
 800a2ee:	e02b      	b.n	800a348 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a2f0:	4a17      	ldr	r2, [pc, #92]	; (800a350 <f_mount+0x88>)
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d005      	beq.n	800a30c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a300:	69b8      	ldr	r0, [r7, #24]
 800a302:	f7fe f8f5 	bl	80084f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	2200      	movs	r2, #0
 800a30a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d002      	beq.n	800a318 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2200      	movs	r2, #0
 800a316:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	490d      	ldr	r1, [pc, #52]	; (800a350 <f_mount+0x88>)
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d002      	beq.n	800a32e <f_mount+0x66>
 800a328:	79fb      	ldrb	r3, [r7, #7]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d001      	beq.n	800a332 <f_mount+0x6a>
 800a32e:	2300      	movs	r3, #0
 800a330:	e00a      	b.n	800a348 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a332:	f107 010c 	add.w	r1, r7, #12
 800a336:	f107 0308 	add.w	r3, r7, #8
 800a33a:	2200      	movs	r2, #0
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7ff fd05 	bl	8009d4c <find_volume>
 800a342:	4603      	mov	r3, r0
 800a344:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a346:	7dfb      	ldrb	r3, [r7, #23]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3720      	adds	r7, #32
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	20000118 	.word	0x20000118

0800a354 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b09a      	sub	sp, #104	; 0x68
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	4613      	mov	r3, r2
 800a360:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d101      	bne.n	800a36c <f_open+0x18>
 800a368:	2309      	movs	r3, #9
 800a36a:	e1bb      	b.n	800a6e4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a36c:	79fb      	ldrb	r3, [r7, #7]
 800a36e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a372:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a374:	79fa      	ldrb	r2, [r7, #7]
 800a376:	f107 0114 	add.w	r1, r7, #20
 800a37a:	f107 0308 	add.w	r3, r7, #8
 800a37e:	4618      	mov	r0, r3
 800a380:	f7ff fce4 	bl	8009d4c <find_volume>
 800a384:	4603      	mov	r3, r0
 800a386:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a38a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f040 819f 	bne.w	800a6d2 <f_open+0x37e>
		dj.obj.fs = fs;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a398:	68ba      	ldr	r2, [r7, #8]
 800a39a:	f107 0318 	add.w	r3, r7, #24
 800a39e:	4611      	mov	r1, r2
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7ff fbc3 	bl	8009b2c <follow_path>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a3ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d11a      	bne.n	800a3ea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a3b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a3b8:	b25b      	sxtb	r3, r3
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	da03      	bge.n	800a3c6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a3be:	2306      	movs	r3, #6
 800a3c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a3c4:	e011      	b.n	800a3ea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a3c6:	79fb      	ldrb	r3, [r7, #7]
 800a3c8:	f023 0301 	bic.w	r3, r3, #1
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	bf14      	ite	ne
 800a3d0:	2301      	movne	r3, #1
 800a3d2:	2300      	moveq	r3, #0
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	f107 0318 	add.w	r3, r7, #24
 800a3dc:	4611      	mov	r1, r2
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fd ff3e 	bl	8008260 <chk_lock>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a3ea:	79fb      	ldrb	r3, [r7, #7]
 800a3ec:	f003 031c 	and.w	r3, r3, #28
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d07f      	beq.n	800a4f4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a3f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d017      	beq.n	800a42c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a3fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a400:	2b04      	cmp	r3, #4
 800a402:	d10e      	bne.n	800a422 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a404:	f7fd ff88 	bl	8008318 <enq_lock>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d006      	beq.n	800a41c <f_open+0xc8>
 800a40e:	f107 0318 	add.w	r3, r7, #24
 800a412:	4618      	mov	r0, r3
 800a414:	f7ff f8da 	bl	80095cc <dir_register>
 800a418:	4603      	mov	r3, r0
 800a41a:	e000      	b.n	800a41e <f_open+0xca>
 800a41c:	2312      	movs	r3, #18
 800a41e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a422:	79fb      	ldrb	r3, [r7, #7]
 800a424:	f043 0308 	orr.w	r3, r3, #8
 800a428:	71fb      	strb	r3, [r7, #7]
 800a42a:	e010      	b.n	800a44e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a42c:	7fbb      	ldrb	r3, [r7, #30]
 800a42e:	f003 0311 	and.w	r3, r3, #17
 800a432:	2b00      	cmp	r3, #0
 800a434:	d003      	beq.n	800a43e <f_open+0xea>
					res = FR_DENIED;
 800a436:	2307      	movs	r3, #7
 800a438:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a43c:	e007      	b.n	800a44e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a43e:	79fb      	ldrb	r3, [r7, #7]
 800a440:	f003 0304 	and.w	r3, r3, #4
 800a444:	2b00      	cmp	r3, #0
 800a446:	d002      	beq.n	800a44e <f_open+0xfa>
 800a448:	2308      	movs	r3, #8
 800a44a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a44e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a452:	2b00      	cmp	r3, #0
 800a454:	d168      	bne.n	800a528 <f_open+0x1d4>
 800a456:	79fb      	ldrb	r3, [r7, #7]
 800a458:	f003 0308 	and.w	r3, r3, #8
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d063      	beq.n	800a528 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a460:	f7fd fb14 	bl	8007a8c <get_fattime>
 800a464:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a468:	330e      	adds	r3, #14
 800a46a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fd fe4d 	bl	800810c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a474:	3316      	adds	r3, #22
 800a476:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a478:	4618      	mov	r0, r3
 800a47a:	f7fd fe47 	bl	800810c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	330b      	adds	r3, #11
 800a482:	2220      	movs	r2, #32
 800a484:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a48a:	4611      	mov	r1, r2
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7fe fe16 	bl	80090be <ld_clust>
 800a492:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a498:	2200      	movs	r2, #0
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7fe fe2e 	bl	80090fc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a2:	331c      	adds	r3, #28
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fd fe30 	bl	800810c <st_dword>
					fs->wflag = 1;
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a4b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d037      	beq.n	800a528 <f_open+0x1d4>
						dw = fs->winsect;
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4bc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a4be:	f107 0318 	add.w	r3, r7, #24
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7fe fb1e 	bl	8008b08 <remove_chain>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a4d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d126      	bne.n	800a528 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7fe f86e 	bl	80085c0 <move_window>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a4ee:	3a01      	subs	r2, #1
 800a4f0:	615a      	str	r2, [r3, #20]
 800a4f2:	e019      	b.n	800a528 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a4f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d115      	bne.n	800a528 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a4fc:	7fbb      	ldrb	r3, [r7, #30]
 800a4fe:	f003 0310 	and.w	r3, r3, #16
 800a502:	2b00      	cmp	r3, #0
 800a504:	d003      	beq.n	800a50e <f_open+0x1ba>
					res = FR_NO_FILE;
 800a506:	2304      	movs	r3, #4
 800a508:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a50c:	e00c      	b.n	800a528 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a50e:	79fb      	ldrb	r3, [r7, #7]
 800a510:	f003 0302 	and.w	r3, r3, #2
 800a514:	2b00      	cmp	r3, #0
 800a516:	d007      	beq.n	800a528 <f_open+0x1d4>
 800a518:	7fbb      	ldrb	r3, [r7, #30]
 800a51a:	f003 0301 	and.w	r3, r3, #1
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d002      	beq.n	800a528 <f_open+0x1d4>
						res = FR_DENIED;
 800a522:	2307      	movs	r3, #7
 800a524:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a528:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d128      	bne.n	800a582 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a530:	79fb      	ldrb	r3, [r7, #7]
 800a532:	f003 0308 	and.w	r3, r3, #8
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a53a:	79fb      	ldrb	r3, [r7, #7]
 800a53c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a540:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a54a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a550:	79fb      	ldrb	r3, [r7, #7]
 800a552:	f023 0301 	bic.w	r3, r3, #1
 800a556:	2b00      	cmp	r3, #0
 800a558:	bf14      	ite	ne
 800a55a:	2301      	movne	r3, #1
 800a55c:	2300      	moveq	r3, #0
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	461a      	mov	r2, r3
 800a562:	f107 0318 	add.w	r3, r7, #24
 800a566:	4611      	mov	r1, r2
 800a568:	4618      	mov	r0, r3
 800a56a:	f7fd fef7 	bl	800835c <inc_lock>
 800a56e:	4602      	mov	r2, r0
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	691b      	ldr	r3, [r3, #16]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d102      	bne.n	800a582 <f_open+0x22e>
 800a57c:	2302      	movs	r3, #2
 800a57e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a582:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a586:	2b00      	cmp	r3, #0
 800a588:	f040 80a3 	bne.w	800a6d2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a590:	4611      	mov	r1, r2
 800a592:	4618      	mov	r0, r3
 800a594:	f7fe fd93 	bl	80090be <ld_clust>
 800a598:	4602      	mov	r2, r0
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a0:	331c      	adds	r3, #28
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7fd fd74 	bl	8008090 <ld_dword>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a5b4:	697a      	ldr	r2, [r7, #20]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	88da      	ldrh	r2, [r3, #6]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	79fa      	ldrb	r2, [r7, #7]
 800a5c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	3330      	adds	r3, #48	; 0x30
 800a5de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a5e2:	2100      	movs	r1, #0
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7fd fdde 	bl	80081a6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a5ea:	79fb      	ldrb	r3, [r7, #7]
 800a5ec:	f003 0320 	and.w	r3, r3, #32
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d06e      	beq.n	800a6d2 <f_open+0x37e>
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d06a      	beq.n	800a6d2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	68da      	ldr	r2, [r3, #12]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	895b      	ldrh	r3, [r3, #10]
 800a608:	461a      	mov	r2, r3
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	899b      	ldrh	r3, [r3, #12]
 800a60e:	fb03 f302 	mul.w	r3, r3, r2
 800a612:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a620:	e016      	b.n	800a650 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a626:	4618      	mov	r0, r3
 800a628:	f7fe f887 	bl	800873a <get_fat>
 800a62c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a62e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a630:	2b01      	cmp	r3, #1
 800a632:	d802      	bhi.n	800a63a <f_open+0x2e6>
 800a634:	2302      	movs	r3, #2
 800a636:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a63a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a640:	d102      	bne.n	800a648 <f_open+0x2f4>
 800a642:	2301      	movs	r3, #1
 800a644:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a648:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a64a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a64c:	1ad3      	subs	r3, r2, r3
 800a64e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a650:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a654:	2b00      	cmp	r3, #0
 800a656:	d103      	bne.n	800a660 <f_open+0x30c>
 800a658:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a65a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d8e0      	bhi.n	800a622 <f_open+0x2ce>
				}
				fp->clust = clst;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a664:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a666:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d131      	bne.n	800a6d2 <f_open+0x37e>
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	899b      	ldrh	r3, [r3, #12]
 800a672:	461a      	mov	r2, r3
 800a674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a676:	fbb3 f1f2 	udiv	r1, r3, r2
 800a67a:	fb02 f201 	mul.w	r2, r2, r1
 800a67e:	1a9b      	subs	r3, r3, r2
 800a680:	2b00      	cmp	r3, #0
 800a682:	d026      	beq.n	800a6d2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a688:	4618      	mov	r0, r3
 800a68a:	f7fe f837 	bl	80086fc <clust2sect>
 800a68e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a692:	2b00      	cmp	r3, #0
 800a694:	d103      	bne.n	800a69e <f_open+0x34a>
						res = FR_INT_ERR;
 800a696:	2302      	movs	r3, #2
 800a698:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a69c:	e019      	b.n	800a6d2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	899b      	ldrh	r3, [r3, #12]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6a6:	fbb3 f2f2 	udiv	r2, r3, r2
 800a6aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6ac:	441a      	add	r2, r3
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	7858      	ldrb	r0, [r3, #1]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6a1a      	ldr	r2, [r3, #32]
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	f7fd fc6f 	bl	8007fa4 <disk_read>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d002      	beq.n	800a6d2 <f_open+0x37e>
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a6d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d002      	beq.n	800a6e0 <f_open+0x38c>
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a6e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3768      	adds	r7, #104	; 0x68
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b08c      	sub	sp, #48	; 0x30
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	607a      	str	r2, [r7, #4]
 800a6f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	2200      	movs	r2, #0
 800a702:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f107 0210 	add.w	r2, r7, #16
 800a70a:	4611      	mov	r1, r2
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7ff fda5 	bl	800a25c <validate>
 800a712:	4603      	mov	r3, r0
 800a714:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a718:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d107      	bne.n	800a730 <f_write+0x44>
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	7d5b      	ldrb	r3, [r3, #21]
 800a724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d002      	beq.n	800a736 <f_write+0x4a>
 800a730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a734:	e16a      	b.n	800aa0c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	7d1b      	ldrb	r3, [r3, #20]
 800a73a:	f003 0302 	and.w	r3, r3, #2
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d101      	bne.n	800a746 <f_write+0x5a>
 800a742:	2307      	movs	r3, #7
 800a744:	e162      	b.n	800aa0c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	699a      	ldr	r2, [r3, #24]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	441a      	add	r2, r3
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	699b      	ldr	r3, [r3, #24]
 800a752:	429a      	cmp	r2, r3
 800a754:	f080 814c 	bcs.w	800a9f0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	699b      	ldr	r3, [r3, #24]
 800a75c:	43db      	mvns	r3, r3
 800a75e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a760:	e146      	b.n	800a9f0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	699b      	ldr	r3, [r3, #24]
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	8992      	ldrh	r2, [r2, #12]
 800a76a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a76e:	fb02 f201 	mul.w	r2, r2, r1
 800a772:	1a9b      	subs	r3, r3, r2
 800a774:	2b00      	cmp	r3, #0
 800a776:	f040 80f1 	bne.w	800a95c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	699b      	ldr	r3, [r3, #24]
 800a77e:	693a      	ldr	r2, [r7, #16]
 800a780:	8992      	ldrh	r2, [r2, #12]
 800a782:	fbb3 f3f2 	udiv	r3, r3, r2
 800a786:	693a      	ldr	r2, [r7, #16]
 800a788:	8952      	ldrh	r2, [r2, #10]
 800a78a:	3a01      	subs	r2, #1
 800a78c:	4013      	ands	r3, r2
 800a78e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d143      	bne.n	800a81e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	699b      	ldr	r3, [r3, #24]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d10c      	bne.n	800a7b8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d11a      	bne.n	800a7e0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fe fa0f 	bl	8008bd2 <create_chain>
 800a7b4:	62b8      	str	r0, [r7, #40]	; 0x28
 800a7b6:	e013      	b.n	800a7e0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d007      	beq.n	800a7d0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f7fe fa9b 	bl	8008d02 <clmt_clust>
 800a7cc:	62b8      	str	r0, [r7, #40]	; 0x28
 800a7ce:	e007      	b.n	800a7e0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	69db      	ldr	r3, [r3, #28]
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	4610      	mov	r0, r2
 800a7da:	f7fe f9fa 	bl	8008bd2 <create_chain>
 800a7de:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f000 8109 	beq.w	800a9fa <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d104      	bne.n	800a7f8 <f_write+0x10c>
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2202      	movs	r2, #2
 800a7f2:	755a      	strb	r2, [r3, #21]
 800a7f4:	2302      	movs	r3, #2
 800a7f6:	e109      	b.n	800aa0c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fe:	d104      	bne.n	800a80a <f_write+0x11e>
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2201      	movs	r2, #1
 800a804:	755a      	strb	r2, [r3, #21]
 800a806:	2301      	movs	r3, #1
 800a808:	e100      	b.n	800aa0c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a80e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d102      	bne.n	800a81e <f_write+0x132>
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a81c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	7d1b      	ldrb	r3, [r3, #20]
 800a822:	b25b      	sxtb	r3, r3
 800a824:	2b00      	cmp	r3, #0
 800a826:	da18      	bge.n	800a85a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	7858      	ldrb	r0, [r3, #1]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	6a1a      	ldr	r2, [r3, #32]
 800a836:	2301      	movs	r3, #1
 800a838:	f7fd fbd4 	bl	8007fe4 <disk_write>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d004      	beq.n	800a84c <f_write+0x160>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2201      	movs	r2, #1
 800a846:	755a      	strb	r2, [r3, #21]
 800a848:	2301      	movs	r3, #1
 800a84a:	e0df      	b.n	800aa0c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	7d1b      	ldrb	r3, [r3, #20]
 800a850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a854:	b2da      	uxtb	r2, r3
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a85a:	693a      	ldr	r2, [r7, #16]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	69db      	ldr	r3, [r3, #28]
 800a860:	4619      	mov	r1, r3
 800a862:	4610      	mov	r0, r2
 800a864:	f7fd ff4a 	bl	80086fc <clust2sect>
 800a868:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d104      	bne.n	800a87a <f_write+0x18e>
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2202      	movs	r2, #2
 800a874:	755a      	strb	r2, [r3, #21]
 800a876:	2302      	movs	r3, #2
 800a878:	e0c8      	b.n	800aa0c <f_write+0x320>
			sect += csect;
 800a87a:	697a      	ldr	r2, [r7, #20]
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	4413      	add	r3, r2
 800a880:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	899b      	ldrh	r3, [r3, #12]
 800a886:	461a      	mov	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a88e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a890:	6a3b      	ldr	r3, [r7, #32]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d043      	beq.n	800a91e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a896:	69ba      	ldr	r2, [r7, #24]
 800a898:	6a3b      	ldr	r3, [r7, #32]
 800a89a:	4413      	add	r3, r2
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	8952      	ldrh	r2, [r2, #10]
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d905      	bls.n	800a8b0 <f_write+0x1c4>
					cc = fs->csize - csect;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	895b      	ldrh	r3, [r3, #10]
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	1ad3      	subs	r3, r2, r3
 800a8ae:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	7858      	ldrb	r0, [r3, #1]
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
 800a8b6:	697a      	ldr	r2, [r7, #20]
 800a8b8:	69f9      	ldr	r1, [r7, #28]
 800a8ba:	f7fd fb93 	bl	8007fe4 <disk_write>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d004      	beq.n	800a8ce <f_write+0x1e2>
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	755a      	strb	r2, [r3, #21]
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e09e      	b.n	800aa0c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6a1a      	ldr	r2, [r3, #32]
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	6a3a      	ldr	r2, [r7, #32]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d918      	bls.n	800a90e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	6a1a      	ldr	r2, [r3, #32]
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	693a      	ldr	r2, [r7, #16]
 800a8ec:	8992      	ldrh	r2, [r2, #12]
 800a8ee:	fb02 f303 	mul.w	r3, r2, r3
 800a8f2:	69fa      	ldr	r2, [r7, #28]
 800a8f4:	18d1      	adds	r1, r2, r3
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	899b      	ldrh	r3, [r3, #12]
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	f7fd fc32 	bl	8008164 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	7d1b      	ldrb	r3, [r3, #20]
 800a904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a908:	b2da      	uxtb	r2, r3
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	899b      	ldrh	r3, [r3, #12]
 800a912:	461a      	mov	r2, r3
 800a914:	6a3b      	ldr	r3, [r7, #32]
 800a916:	fb02 f303 	mul.w	r3, r2, r3
 800a91a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a91c:	e04b      	b.n	800a9b6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6a1b      	ldr	r3, [r3, #32]
 800a922:	697a      	ldr	r2, [r7, #20]
 800a924:	429a      	cmp	r2, r3
 800a926:	d016      	beq.n	800a956 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	699a      	ldr	r2, [r3, #24]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a930:	429a      	cmp	r2, r3
 800a932:	d210      	bcs.n	800a956 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	7858      	ldrb	r0, [r3, #1]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a93e:	2301      	movs	r3, #1
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	f7fd fb2f 	bl	8007fa4 <disk_read>
 800a946:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d004      	beq.n	800a956 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2201      	movs	r2, #1
 800a950:	755a      	strb	r2, [r3, #21]
 800a952:	2301      	movs	r3, #1
 800a954:	e05a      	b.n	800aa0c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	697a      	ldr	r2, [r7, #20]
 800a95a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	899b      	ldrh	r3, [r3, #12]
 800a960:	4618      	mov	r0, r3
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	699b      	ldr	r3, [r3, #24]
 800a966:	693a      	ldr	r2, [r7, #16]
 800a968:	8992      	ldrh	r2, [r2, #12]
 800a96a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a96e:	fb02 f201 	mul.w	r2, r2, r1
 800a972:	1a9b      	subs	r3, r3, r2
 800a974:	1ac3      	subs	r3, r0, r3
 800a976:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d901      	bls.n	800a984 <f_write+0x298>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	699b      	ldr	r3, [r3, #24]
 800a98e:	693a      	ldr	r2, [r7, #16]
 800a990:	8992      	ldrh	r2, [r2, #12]
 800a992:	fbb3 f0f2 	udiv	r0, r3, r2
 800a996:	fb02 f200 	mul.w	r2, r2, r0
 800a99a:	1a9b      	subs	r3, r3, r2
 800a99c:	440b      	add	r3, r1
 800a99e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9a0:	69f9      	ldr	r1, [r7, #28]
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7fd fbde 	bl	8008164 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	7d1b      	ldrb	r3, [r3, #20]
 800a9ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a9b0:	b2da      	uxtb	r2, r3
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a9b6:	69fa      	ldr	r2, [r7, #28]
 800a9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ba:	4413      	add	r3, r2
 800a9bc:	61fb      	str	r3, [r7, #28]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	699a      	ldr	r2, [r3, #24]
 800a9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c4:	441a      	add	r2, r3
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	619a      	str	r2, [r3, #24]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	68da      	ldr	r2, [r3, #12]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	699b      	ldr	r3, [r3, #24]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	bf38      	it	cc
 800a9d6:	461a      	movcc	r2, r3
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	60da      	str	r2, [r3, #12]
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e2:	441a      	add	r2, r3
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	601a      	str	r2, [r3, #0]
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ec:	1ad3      	subs	r3, r2, r3
 800a9ee:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	f47f aeb5 	bne.w	800a762 <f_write+0x76>
 800a9f8:	e000      	b.n	800a9fc <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a9fa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	7d1b      	ldrb	r3, [r3, #20]
 800aa00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa04:	b2da      	uxtb	r2, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3730      	adds	r7, #48	; 0x30
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b086      	sub	sp, #24
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f107 0208 	add.w	r2, r7, #8
 800aa22:	4611      	mov	r1, r2
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7ff fc19 	bl	800a25c <validate>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aa2e:	7dfb      	ldrb	r3, [r7, #23]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d168      	bne.n	800ab06 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	7d1b      	ldrb	r3, [r3, #20]
 800aa38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d062      	beq.n	800ab06 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	7d1b      	ldrb	r3, [r3, #20]
 800aa44:	b25b      	sxtb	r3, r3
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	da15      	bge.n	800aa76 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	7858      	ldrb	r0, [r3, #1]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6a1a      	ldr	r2, [r3, #32]
 800aa58:	2301      	movs	r3, #1
 800aa5a:	f7fd fac3 	bl	8007fe4 <disk_write>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d001      	beq.n	800aa68 <f_sync+0x54>
 800aa64:	2301      	movs	r3, #1
 800aa66:	e04f      	b.n	800ab08 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	7d1b      	ldrb	r3, [r3, #20]
 800aa6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa70:	b2da      	uxtb	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800aa76:	f7fd f809 	bl	8007a8c <get_fattime>
 800aa7a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa82:	4619      	mov	r1, r3
 800aa84:	4610      	mov	r0, r2
 800aa86:	f7fd fd9b 	bl	80085c0 <move_window>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800aa8e:	7dfb      	ldrb	r3, [r7, #23]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d138      	bne.n	800ab06 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa98:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	330b      	adds	r3, #11
 800aa9e:	781a      	ldrb	r2, [r3, #0]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	330b      	adds	r3, #11
 800aaa4:	f042 0220 	orr.w	r2, r2, #32
 800aaa8:	b2d2      	uxtb	r2, r2
 800aaaa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6818      	ldr	r0, [r3, #0]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	461a      	mov	r2, r3
 800aab6:	68f9      	ldr	r1, [r7, #12]
 800aab8:	f7fe fb20 	bl	80090fc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f103 021c 	add.w	r2, r3, #28
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	4619      	mov	r1, r3
 800aac8:	4610      	mov	r0, r2
 800aaca:	f7fd fb1f 	bl	800810c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	3316      	adds	r3, #22
 800aad2:	6939      	ldr	r1, [r7, #16]
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7fd fb19 	bl	800810c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	3312      	adds	r3, #18
 800aade:	2100      	movs	r1, #0
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fd faf8 	bl	80080d6 <st_word>
					fs->wflag = 1;
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	2201      	movs	r2, #1
 800aaea:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fd fd94 	bl	800861c <sync_fs>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	7d1b      	ldrb	r3, [r3, #20]
 800aafc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ab06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3718      	adds	r7, #24
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f7ff ff7b 	bl	800aa14 <f_sync>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ab22:	7bfb      	ldrb	r3, [r7, #15]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d118      	bne.n	800ab5a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f107 0208 	add.w	r2, r7, #8
 800ab2e:	4611      	mov	r1, r2
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7ff fb93 	bl	800a25c <validate>
 800ab36:	4603      	mov	r3, r0
 800ab38:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ab3a:	7bfb      	ldrb	r3, [r7, #15]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d10c      	bne.n	800ab5a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	691b      	ldr	r3, [r3, #16]
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fd fc97 	bl	8008478 <dec_lock>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ab4e:	7bfb      	ldrb	r3, [r7, #15]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d102      	bne.n	800ab5a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ab5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b087      	sub	sp, #28
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	4613      	mov	r3, r2
 800ab70:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ab72:	2301      	movs	r3, #1
 800ab74:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ab76:	2300      	movs	r3, #0
 800ab78:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ab7a:	4b1f      	ldr	r3, [pc, #124]	; (800abf8 <FATFS_LinkDriverEx+0x94>)
 800ab7c:	7a5b      	ldrb	r3, [r3, #9]
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d131      	bne.n	800abe8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ab84:	4b1c      	ldr	r3, [pc, #112]	; (800abf8 <FATFS_LinkDriverEx+0x94>)
 800ab86:	7a5b      	ldrb	r3, [r3, #9]
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	4b1a      	ldr	r3, [pc, #104]	; (800abf8 <FATFS_LinkDriverEx+0x94>)
 800ab8e:	2100      	movs	r1, #0
 800ab90:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ab92:	4b19      	ldr	r3, [pc, #100]	; (800abf8 <FATFS_LinkDriverEx+0x94>)
 800ab94:	7a5b      	ldrb	r3, [r3, #9]
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	4a17      	ldr	r2, [pc, #92]	; (800abf8 <FATFS_LinkDriverEx+0x94>)
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	4413      	add	r3, r2
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800aba2:	4b15      	ldr	r3, [pc, #84]	; (800abf8 <FATFS_LinkDriverEx+0x94>)
 800aba4:	7a5b      	ldrb	r3, [r3, #9]
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	461a      	mov	r2, r3
 800abaa:	4b13      	ldr	r3, [pc, #76]	; (800abf8 <FATFS_LinkDriverEx+0x94>)
 800abac:	4413      	add	r3, r2
 800abae:	79fa      	ldrb	r2, [r7, #7]
 800abb0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800abb2:	4b11      	ldr	r3, [pc, #68]	; (800abf8 <FATFS_LinkDriverEx+0x94>)
 800abb4:	7a5b      	ldrb	r3, [r3, #9]
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	1c5a      	adds	r2, r3, #1
 800abba:	b2d1      	uxtb	r1, r2
 800abbc:	4a0e      	ldr	r2, [pc, #56]	; (800abf8 <FATFS_LinkDriverEx+0x94>)
 800abbe:	7251      	strb	r1, [r2, #9]
 800abc0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800abc2:	7dbb      	ldrb	r3, [r7, #22]
 800abc4:	3330      	adds	r3, #48	; 0x30
 800abc6:	b2da      	uxtb	r2, r3
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	3301      	adds	r3, #1
 800abd0:	223a      	movs	r2, #58	; 0x3a
 800abd2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	3302      	adds	r3, #2
 800abd8:	222f      	movs	r2, #47	; 0x2f
 800abda:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	3303      	adds	r3, #3
 800abe0:	2200      	movs	r2, #0
 800abe2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800abe4:	2300      	movs	r3, #0
 800abe6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800abe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800abea:	4618      	mov	r0, r3
 800abec:	371c      	adds	r7, #28
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	20000340 	.word	0x20000340

0800abfc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ac06:	2200      	movs	r2, #0
 800ac08:	6839      	ldr	r1, [r7, #0]
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f7ff ffaa 	bl	800ab64 <FATFS_LinkDriverEx>
 800ac10:	4603      	mov	r3, r0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3708      	adds	r7, #8
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
	...

0800ac1c <__errno>:
 800ac1c:	4b01      	ldr	r3, [pc, #4]	; (800ac24 <__errno+0x8>)
 800ac1e:	6818      	ldr	r0, [r3, #0]
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	20000028 	.word	0x20000028

0800ac28 <__libc_init_array>:
 800ac28:	b570      	push	{r4, r5, r6, lr}
 800ac2a:	4e0d      	ldr	r6, [pc, #52]	; (800ac60 <__libc_init_array+0x38>)
 800ac2c:	4c0d      	ldr	r4, [pc, #52]	; (800ac64 <__libc_init_array+0x3c>)
 800ac2e:	1ba4      	subs	r4, r4, r6
 800ac30:	10a4      	asrs	r4, r4, #2
 800ac32:	2500      	movs	r5, #0
 800ac34:	42a5      	cmp	r5, r4
 800ac36:	d109      	bne.n	800ac4c <__libc_init_array+0x24>
 800ac38:	4e0b      	ldr	r6, [pc, #44]	; (800ac68 <__libc_init_array+0x40>)
 800ac3a:	4c0c      	ldr	r4, [pc, #48]	; (800ac6c <__libc_init_array+0x44>)
 800ac3c:	f000 ff74 	bl	800bb28 <_init>
 800ac40:	1ba4      	subs	r4, r4, r6
 800ac42:	10a4      	asrs	r4, r4, #2
 800ac44:	2500      	movs	r5, #0
 800ac46:	42a5      	cmp	r5, r4
 800ac48:	d105      	bne.n	800ac56 <__libc_init_array+0x2e>
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac50:	4798      	blx	r3
 800ac52:	3501      	adds	r5, #1
 800ac54:	e7ee      	b.n	800ac34 <__libc_init_array+0xc>
 800ac56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac5a:	4798      	blx	r3
 800ac5c:	3501      	adds	r5, #1
 800ac5e:	e7f2      	b.n	800ac46 <__libc_init_array+0x1e>
 800ac60:	0800c39c 	.word	0x0800c39c
 800ac64:	0800c39c 	.word	0x0800c39c
 800ac68:	0800c39c 	.word	0x0800c39c
 800ac6c:	0800c3a0 	.word	0x0800c3a0

0800ac70 <memcpy>:
 800ac70:	b510      	push	{r4, lr}
 800ac72:	1e43      	subs	r3, r0, #1
 800ac74:	440a      	add	r2, r1
 800ac76:	4291      	cmp	r1, r2
 800ac78:	d100      	bne.n	800ac7c <memcpy+0xc>
 800ac7a:	bd10      	pop	{r4, pc}
 800ac7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac80:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac84:	e7f7      	b.n	800ac76 <memcpy+0x6>

0800ac86 <memset>:
 800ac86:	4402      	add	r2, r0
 800ac88:	4603      	mov	r3, r0
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d100      	bne.n	800ac90 <memset+0xa>
 800ac8e:	4770      	bx	lr
 800ac90:	f803 1b01 	strb.w	r1, [r3], #1
 800ac94:	e7f9      	b.n	800ac8a <memset+0x4>
	...

0800ac98 <_free_r>:
 800ac98:	b538      	push	{r3, r4, r5, lr}
 800ac9a:	4605      	mov	r5, r0
 800ac9c:	2900      	cmp	r1, #0
 800ac9e:	d045      	beq.n	800ad2c <_free_r+0x94>
 800aca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aca4:	1f0c      	subs	r4, r1, #4
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	bfb8      	it	lt
 800acaa:	18e4      	addlt	r4, r4, r3
 800acac:	f000 fbc6 	bl	800b43c <__malloc_lock>
 800acb0:	4a1f      	ldr	r2, [pc, #124]	; (800ad30 <_free_r+0x98>)
 800acb2:	6813      	ldr	r3, [r2, #0]
 800acb4:	4610      	mov	r0, r2
 800acb6:	b933      	cbnz	r3, 800acc6 <_free_r+0x2e>
 800acb8:	6063      	str	r3, [r4, #4]
 800acba:	6014      	str	r4, [r2, #0]
 800acbc:	4628      	mov	r0, r5
 800acbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acc2:	f000 bbbc 	b.w	800b43e <__malloc_unlock>
 800acc6:	42a3      	cmp	r3, r4
 800acc8:	d90c      	bls.n	800ace4 <_free_r+0x4c>
 800acca:	6821      	ldr	r1, [r4, #0]
 800accc:	1862      	adds	r2, r4, r1
 800acce:	4293      	cmp	r3, r2
 800acd0:	bf04      	itt	eq
 800acd2:	681a      	ldreq	r2, [r3, #0]
 800acd4:	685b      	ldreq	r3, [r3, #4]
 800acd6:	6063      	str	r3, [r4, #4]
 800acd8:	bf04      	itt	eq
 800acda:	1852      	addeq	r2, r2, r1
 800acdc:	6022      	streq	r2, [r4, #0]
 800acde:	6004      	str	r4, [r0, #0]
 800ace0:	e7ec      	b.n	800acbc <_free_r+0x24>
 800ace2:	4613      	mov	r3, r2
 800ace4:	685a      	ldr	r2, [r3, #4]
 800ace6:	b10a      	cbz	r2, 800acec <_free_r+0x54>
 800ace8:	42a2      	cmp	r2, r4
 800acea:	d9fa      	bls.n	800ace2 <_free_r+0x4a>
 800acec:	6819      	ldr	r1, [r3, #0]
 800acee:	1858      	adds	r0, r3, r1
 800acf0:	42a0      	cmp	r0, r4
 800acf2:	d10b      	bne.n	800ad0c <_free_r+0x74>
 800acf4:	6820      	ldr	r0, [r4, #0]
 800acf6:	4401      	add	r1, r0
 800acf8:	1858      	adds	r0, r3, r1
 800acfa:	4282      	cmp	r2, r0
 800acfc:	6019      	str	r1, [r3, #0]
 800acfe:	d1dd      	bne.n	800acbc <_free_r+0x24>
 800ad00:	6810      	ldr	r0, [r2, #0]
 800ad02:	6852      	ldr	r2, [r2, #4]
 800ad04:	605a      	str	r2, [r3, #4]
 800ad06:	4401      	add	r1, r0
 800ad08:	6019      	str	r1, [r3, #0]
 800ad0a:	e7d7      	b.n	800acbc <_free_r+0x24>
 800ad0c:	d902      	bls.n	800ad14 <_free_r+0x7c>
 800ad0e:	230c      	movs	r3, #12
 800ad10:	602b      	str	r3, [r5, #0]
 800ad12:	e7d3      	b.n	800acbc <_free_r+0x24>
 800ad14:	6820      	ldr	r0, [r4, #0]
 800ad16:	1821      	adds	r1, r4, r0
 800ad18:	428a      	cmp	r2, r1
 800ad1a:	bf04      	itt	eq
 800ad1c:	6811      	ldreq	r1, [r2, #0]
 800ad1e:	6852      	ldreq	r2, [r2, #4]
 800ad20:	6062      	str	r2, [r4, #4]
 800ad22:	bf04      	itt	eq
 800ad24:	1809      	addeq	r1, r1, r0
 800ad26:	6021      	streq	r1, [r4, #0]
 800ad28:	605c      	str	r4, [r3, #4]
 800ad2a:	e7c7      	b.n	800acbc <_free_r+0x24>
 800ad2c:	bd38      	pop	{r3, r4, r5, pc}
 800ad2e:	bf00      	nop
 800ad30:	2000034c 	.word	0x2000034c

0800ad34 <_malloc_r>:
 800ad34:	b570      	push	{r4, r5, r6, lr}
 800ad36:	1ccd      	adds	r5, r1, #3
 800ad38:	f025 0503 	bic.w	r5, r5, #3
 800ad3c:	3508      	adds	r5, #8
 800ad3e:	2d0c      	cmp	r5, #12
 800ad40:	bf38      	it	cc
 800ad42:	250c      	movcc	r5, #12
 800ad44:	2d00      	cmp	r5, #0
 800ad46:	4606      	mov	r6, r0
 800ad48:	db01      	blt.n	800ad4e <_malloc_r+0x1a>
 800ad4a:	42a9      	cmp	r1, r5
 800ad4c:	d903      	bls.n	800ad56 <_malloc_r+0x22>
 800ad4e:	230c      	movs	r3, #12
 800ad50:	6033      	str	r3, [r6, #0]
 800ad52:	2000      	movs	r0, #0
 800ad54:	bd70      	pop	{r4, r5, r6, pc}
 800ad56:	f000 fb71 	bl	800b43c <__malloc_lock>
 800ad5a:	4a21      	ldr	r2, [pc, #132]	; (800ade0 <_malloc_r+0xac>)
 800ad5c:	6814      	ldr	r4, [r2, #0]
 800ad5e:	4621      	mov	r1, r4
 800ad60:	b991      	cbnz	r1, 800ad88 <_malloc_r+0x54>
 800ad62:	4c20      	ldr	r4, [pc, #128]	; (800ade4 <_malloc_r+0xb0>)
 800ad64:	6823      	ldr	r3, [r4, #0]
 800ad66:	b91b      	cbnz	r3, 800ad70 <_malloc_r+0x3c>
 800ad68:	4630      	mov	r0, r6
 800ad6a:	f000 f8b9 	bl	800aee0 <_sbrk_r>
 800ad6e:	6020      	str	r0, [r4, #0]
 800ad70:	4629      	mov	r1, r5
 800ad72:	4630      	mov	r0, r6
 800ad74:	f000 f8b4 	bl	800aee0 <_sbrk_r>
 800ad78:	1c43      	adds	r3, r0, #1
 800ad7a:	d124      	bne.n	800adc6 <_malloc_r+0x92>
 800ad7c:	230c      	movs	r3, #12
 800ad7e:	6033      	str	r3, [r6, #0]
 800ad80:	4630      	mov	r0, r6
 800ad82:	f000 fb5c 	bl	800b43e <__malloc_unlock>
 800ad86:	e7e4      	b.n	800ad52 <_malloc_r+0x1e>
 800ad88:	680b      	ldr	r3, [r1, #0]
 800ad8a:	1b5b      	subs	r3, r3, r5
 800ad8c:	d418      	bmi.n	800adc0 <_malloc_r+0x8c>
 800ad8e:	2b0b      	cmp	r3, #11
 800ad90:	d90f      	bls.n	800adb2 <_malloc_r+0x7e>
 800ad92:	600b      	str	r3, [r1, #0]
 800ad94:	50cd      	str	r5, [r1, r3]
 800ad96:	18cc      	adds	r4, r1, r3
 800ad98:	4630      	mov	r0, r6
 800ad9a:	f000 fb50 	bl	800b43e <__malloc_unlock>
 800ad9e:	f104 000b 	add.w	r0, r4, #11
 800ada2:	1d23      	adds	r3, r4, #4
 800ada4:	f020 0007 	bic.w	r0, r0, #7
 800ada8:	1ac3      	subs	r3, r0, r3
 800adaa:	d0d3      	beq.n	800ad54 <_malloc_r+0x20>
 800adac:	425a      	negs	r2, r3
 800adae:	50e2      	str	r2, [r4, r3]
 800adb0:	e7d0      	b.n	800ad54 <_malloc_r+0x20>
 800adb2:	428c      	cmp	r4, r1
 800adb4:	684b      	ldr	r3, [r1, #4]
 800adb6:	bf16      	itet	ne
 800adb8:	6063      	strne	r3, [r4, #4]
 800adba:	6013      	streq	r3, [r2, #0]
 800adbc:	460c      	movne	r4, r1
 800adbe:	e7eb      	b.n	800ad98 <_malloc_r+0x64>
 800adc0:	460c      	mov	r4, r1
 800adc2:	6849      	ldr	r1, [r1, #4]
 800adc4:	e7cc      	b.n	800ad60 <_malloc_r+0x2c>
 800adc6:	1cc4      	adds	r4, r0, #3
 800adc8:	f024 0403 	bic.w	r4, r4, #3
 800adcc:	42a0      	cmp	r0, r4
 800adce:	d005      	beq.n	800addc <_malloc_r+0xa8>
 800add0:	1a21      	subs	r1, r4, r0
 800add2:	4630      	mov	r0, r6
 800add4:	f000 f884 	bl	800aee0 <_sbrk_r>
 800add8:	3001      	adds	r0, #1
 800adda:	d0cf      	beq.n	800ad7c <_malloc_r+0x48>
 800addc:	6025      	str	r5, [r4, #0]
 800adde:	e7db      	b.n	800ad98 <_malloc_r+0x64>
 800ade0:	2000034c 	.word	0x2000034c
 800ade4:	20000350 	.word	0x20000350

0800ade8 <iprintf>:
 800ade8:	b40f      	push	{r0, r1, r2, r3}
 800adea:	4b0a      	ldr	r3, [pc, #40]	; (800ae14 <iprintf+0x2c>)
 800adec:	b513      	push	{r0, r1, r4, lr}
 800adee:	681c      	ldr	r4, [r3, #0]
 800adf0:	b124      	cbz	r4, 800adfc <iprintf+0x14>
 800adf2:	69a3      	ldr	r3, [r4, #24]
 800adf4:	b913      	cbnz	r3, 800adfc <iprintf+0x14>
 800adf6:	4620      	mov	r0, r4
 800adf8:	f000 fa32 	bl	800b260 <__sinit>
 800adfc:	ab05      	add	r3, sp, #20
 800adfe:	9a04      	ldr	r2, [sp, #16]
 800ae00:	68a1      	ldr	r1, [r4, #8]
 800ae02:	9301      	str	r3, [sp, #4]
 800ae04:	4620      	mov	r0, r4
 800ae06:	f000 fb45 	bl	800b494 <_vfiprintf_r>
 800ae0a:	b002      	add	sp, #8
 800ae0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae10:	b004      	add	sp, #16
 800ae12:	4770      	bx	lr
 800ae14:	20000028 	.word	0x20000028

0800ae18 <_puts_r>:
 800ae18:	b570      	push	{r4, r5, r6, lr}
 800ae1a:	460e      	mov	r6, r1
 800ae1c:	4605      	mov	r5, r0
 800ae1e:	b118      	cbz	r0, 800ae28 <_puts_r+0x10>
 800ae20:	6983      	ldr	r3, [r0, #24]
 800ae22:	b90b      	cbnz	r3, 800ae28 <_puts_r+0x10>
 800ae24:	f000 fa1c 	bl	800b260 <__sinit>
 800ae28:	69ab      	ldr	r3, [r5, #24]
 800ae2a:	68ac      	ldr	r4, [r5, #8]
 800ae2c:	b913      	cbnz	r3, 800ae34 <_puts_r+0x1c>
 800ae2e:	4628      	mov	r0, r5
 800ae30:	f000 fa16 	bl	800b260 <__sinit>
 800ae34:	4b23      	ldr	r3, [pc, #140]	; (800aec4 <_puts_r+0xac>)
 800ae36:	429c      	cmp	r4, r3
 800ae38:	d117      	bne.n	800ae6a <_puts_r+0x52>
 800ae3a:	686c      	ldr	r4, [r5, #4]
 800ae3c:	89a3      	ldrh	r3, [r4, #12]
 800ae3e:	071b      	lsls	r3, r3, #28
 800ae40:	d51d      	bpl.n	800ae7e <_puts_r+0x66>
 800ae42:	6923      	ldr	r3, [r4, #16]
 800ae44:	b1db      	cbz	r3, 800ae7e <_puts_r+0x66>
 800ae46:	3e01      	subs	r6, #1
 800ae48:	68a3      	ldr	r3, [r4, #8]
 800ae4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	60a3      	str	r3, [r4, #8]
 800ae52:	b9e9      	cbnz	r1, 800ae90 <_puts_r+0x78>
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	da2e      	bge.n	800aeb6 <_puts_r+0x9e>
 800ae58:	4622      	mov	r2, r4
 800ae5a:	210a      	movs	r1, #10
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	f000 f84f 	bl	800af00 <__swbuf_r>
 800ae62:	3001      	adds	r0, #1
 800ae64:	d011      	beq.n	800ae8a <_puts_r+0x72>
 800ae66:	200a      	movs	r0, #10
 800ae68:	e011      	b.n	800ae8e <_puts_r+0x76>
 800ae6a:	4b17      	ldr	r3, [pc, #92]	; (800aec8 <_puts_r+0xb0>)
 800ae6c:	429c      	cmp	r4, r3
 800ae6e:	d101      	bne.n	800ae74 <_puts_r+0x5c>
 800ae70:	68ac      	ldr	r4, [r5, #8]
 800ae72:	e7e3      	b.n	800ae3c <_puts_r+0x24>
 800ae74:	4b15      	ldr	r3, [pc, #84]	; (800aecc <_puts_r+0xb4>)
 800ae76:	429c      	cmp	r4, r3
 800ae78:	bf08      	it	eq
 800ae7a:	68ec      	ldreq	r4, [r5, #12]
 800ae7c:	e7de      	b.n	800ae3c <_puts_r+0x24>
 800ae7e:	4621      	mov	r1, r4
 800ae80:	4628      	mov	r0, r5
 800ae82:	f000 f88f 	bl	800afa4 <__swsetup_r>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	d0dd      	beq.n	800ae46 <_puts_r+0x2e>
 800ae8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae8e:	bd70      	pop	{r4, r5, r6, pc}
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	da04      	bge.n	800ae9e <_puts_r+0x86>
 800ae94:	69a2      	ldr	r2, [r4, #24]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	dc06      	bgt.n	800aea8 <_puts_r+0x90>
 800ae9a:	290a      	cmp	r1, #10
 800ae9c:	d004      	beq.n	800aea8 <_puts_r+0x90>
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	1c5a      	adds	r2, r3, #1
 800aea2:	6022      	str	r2, [r4, #0]
 800aea4:	7019      	strb	r1, [r3, #0]
 800aea6:	e7cf      	b.n	800ae48 <_puts_r+0x30>
 800aea8:	4622      	mov	r2, r4
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f000 f828 	bl	800af00 <__swbuf_r>
 800aeb0:	3001      	adds	r0, #1
 800aeb2:	d1c9      	bne.n	800ae48 <_puts_r+0x30>
 800aeb4:	e7e9      	b.n	800ae8a <_puts_r+0x72>
 800aeb6:	6823      	ldr	r3, [r4, #0]
 800aeb8:	200a      	movs	r0, #10
 800aeba:	1c5a      	adds	r2, r3, #1
 800aebc:	6022      	str	r2, [r4, #0]
 800aebe:	7018      	strb	r0, [r3, #0]
 800aec0:	e7e5      	b.n	800ae8e <_puts_r+0x76>
 800aec2:	bf00      	nop
 800aec4:	0800c320 	.word	0x0800c320
 800aec8:	0800c340 	.word	0x0800c340
 800aecc:	0800c300 	.word	0x0800c300

0800aed0 <puts>:
 800aed0:	4b02      	ldr	r3, [pc, #8]	; (800aedc <puts+0xc>)
 800aed2:	4601      	mov	r1, r0
 800aed4:	6818      	ldr	r0, [r3, #0]
 800aed6:	f7ff bf9f 	b.w	800ae18 <_puts_r>
 800aeda:	bf00      	nop
 800aedc:	20000028 	.word	0x20000028

0800aee0 <_sbrk_r>:
 800aee0:	b538      	push	{r3, r4, r5, lr}
 800aee2:	4c06      	ldr	r4, [pc, #24]	; (800aefc <_sbrk_r+0x1c>)
 800aee4:	2300      	movs	r3, #0
 800aee6:	4605      	mov	r5, r0
 800aee8:	4608      	mov	r0, r1
 800aeea:	6023      	str	r3, [r4, #0]
 800aeec:	f7f7 f912 	bl	8002114 <_sbrk>
 800aef0:	1c43      	adds	r3, r0, #1
 800aef2:	d102      	bne.n	800aefa <_sbrk_r+0x1a>
 800aef4:	6823      	ldr	r3, [r4, #0]
 800aef6:	b103      	cbz	r3, 800aefa <_sbrk_r+0x1a>
 800aef8:	602b      	str	r3, [r5, #0]
 800aefa:	bd38      	pop	{r3, r4, r5, pc}
 800aefc:	20007028 	.word	0x20007028

0800af00 <__swbuf_r>:
 800af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af02:	460e      	mov	r6, r1
 800af04:	4614      	mov	r4, r2
 800af06:	4605      	mov	r5, r0
 800af08:	b118      	cbz	r0, 800af12 <__swbuf_r+0x12>
 800af0a:	6983      	ldr	r3, [r0, #24]
 800af0c:	b90b      	cbnz	r3, 800af12 <__swbuf_r+0x12>
 800af0e:	f000 f9a7 	bl	800b260 <__sinit>
 800af12:	4b21      	ldr	r3, [pc, #132]	; (800af98 <__swbuf_r+0x98>)
 800af14:	429c      	cmp	r4, r3
 800af16:	d12a      	bne.n	800af6e <__swbuf_r+0x6e>
 800af18:	686c      	ldr	r4, [r5, #4]
 800af1a:	69a3      	ldr	r3, [r4, #24]
 800af1c:	60a3      	str	r3, [r4, #8]
 800af1e:	89a3      	ldrh	r3, [r4, #12]
 800af20:	071a      	lsls	r2, r3, #28
 800af22:	d52e      	bpl.n	800af82 <__swbuf_r+0x82>
 800af24:	6923      	ldr	r3, [r4, #16]
 800af26:	b363      	cbz	r3, 800af82 <__swbuf_r+0x82>
 800af28:	6923      	ldr	r3, [r4, #16]
 800af2a:	6820      	ldr	r0, [r4, #0]
 800af2c:	1ac0      	subs	r0, r0, r3
 800af2e:	6963      	ldr	r3, [r4, #20]
 800af30:	b2f6      	uxtb	r6, r6
 800af32:	4283      	cmp	r3, r0
 800af34:	4637      	mov	r7, r6
 800af36:	dc04      	bgt.n	800af42 <__swbuf_r+0x42>
 800af38:	4621      	mov	r1, r4
 800af3a:	4628      	mov	r0, r5
 800af3c:	f000 f926 	bl	800b18c <_fflush_r>
 800af40:	bb28      	cbnz	r0, 800af8e <__swbuf_r+0x8e>
 800af42:	68a3      	ldr	r3, [r4, #8]
 800af44:	3b01      	subs	r3, #1
 800af46:	60a3      	str	r3, [r4, #8]
 800af48:	6823      	ldr	r3, [r4, #0]
 800af4a:	1c5a      	adds	r2, r3, #1
 800af4c:	6022      	str	r2, [r4, #0]
 800af4e:	701e      	strb	r6, [r3, #0]
 800af50:	6963      	ldr	r3, [r4, #20]
 800af52:	3001      	adds	r0, #1
 800af54:	4283      	cmp	r3, r0
 800af56:	d004      	beq.n	800af62 <__swbuf_r+0x62>
 800af58:	89a3      	ldrh	r3, [r4, #12]
 800af5a:	07db      	lsls	r3, r3, #31
 800af5c:	d519      	bpl.n	800af92 <__swbuf_r+0x92>
 800af5e:	2e0a      	cmp	r6, #10
 800af60:	d117      	bne.n	800af92 <__swbuf_r+0x92>
 800af62:	4621      	mov	r1, r4
 800af64:	4628      	mov	r0, r5
 800af66:	f000 f911 	bl	800b18c <_fflush_r>
 800af6a:	b190      	cbz	r0, 800af92 <__swbuf_r+0x92>
 800af6c:	e00f      	b.n	800af8e <__swbuf_r+0x8e>
 800af6e:	4b0b      	ldr	r3, [pc, #44]	; (800af9c <__swbuf_r+0x9c>)
 800af70:	429c      	cmp	r4, r3
 800af72:	d101      	bne.n	800af78 <__swbuf_r+0x78>
 800af74:	68ac      	ldr	r4, [r5, #8]
 800af76:	e7d0      	b.n	800af1a <__swbuf_r+0x1a>
 800af78:	4b09      	ldr	r3, [pc, #36]	; (800afa0 <__swbuf_r+0xa0>)
 800af7a:	429c      	cmp	r4, r3
 800af7c:	bf08      	it	eq
 800af7e:	68ec      	ldreq	r4, [r5, #12]
 800af80:	e7cb      	b.n	800af1a <__swbuf_r+0x1a>
 800af82:	4621      	mov	r1, r4
 800af84:	4628      	mov	r0, r5
 800af86:	f000 f80d 	bl	800afa4 <__swsetup_r>
 800af8a:	2800      	cmp	r0, #0
 800af8c:	d0cc      	beq.n	800af28 <__swbuf_r+0x28>
 800af8e:	f04f 37ff 	mov.w	r7, #4294967295
 800af92:	4638      	mov	r0, r7
 800af94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af96:	bf00      	nop
 800af98:	0800c320 	.word	0x0800c320
 800af9c:	0800c340 	.word	0x0800c340
 800afa0:	0800c300 	.word	0x0800c300

0800afa4 <__swsetup_r>:
 800afa4:	4b32      	ldr	r3, [pc, #200]	; (800b070 <__swsetup_r+0xcc>)
 800afa6:	b570      	push	{r4, r5, r6, lr}
 800afa8:	681d      	ldr	r5, [r3, #0]
 800afaa:	4606      	mov	r6, r0
 800afac:	460c      	mov	r4, r1
 800afae:	b125      	cbz	r5, 800afba <__swsetup_r+0x16>
 800afb0:	69ab      	ldr	r3, [r5, #24]
 800afb2:	b913      	cbnz	r3, 800afba <__swsetup_r+0x16>
 800afb4:	4628      	mov	r0, r5
 800afb6:	f000 f953 	bl	800b260 <__sinit>
 800afba:	4b2e      	ldr	r3, [pc, #184]	; (800b074 <__swsetup_r+0xd0>)
 800afbc:	429c      	cmp	r4, r3
 800afbe:	d10f      	bne.n	800afe0 <__swsetup_r+0x3c>
 800afc0:	686c      	ldr	r4, [r5, #4]
 800afc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	0715      	lsls	r5, r2, #28
 800afca:	d42c      	bmi.n	800b026 <__swsetup_r+0x82>
 800afcc:	06d0      	lsls	r0, r2, #27
 800afce:	d411      	bmi.n	800aff4 <__swsetup_r+0x50>
 800afd0:	2209      	movs	r2, #9
 800afd2:	6032      	str	r2, [r6, #0]
 800afd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afd8:	81a3      	strh	r3, [r4, #12]
 800afda:	f04f 30ff 	mov.w	r0, #4294967295
 800afde:	e03e      	b.n	800b05e <__swsetup_r+0xba>
 800afe0:	4b25      	ldr	r3, [pc, #148]	; (800b078 <__swsetup_r+0xd4>)
 800afe2:	429c      	cmp	r4, r3
 800afe4:	d101      	bne.n	800afea <__swsetup_r+0x46>
 800afe6:	68ac      	ldr	r4, [r5, #8]
 800afe8:	e7eb      	b.n	800afc2 <__swsetup_r+0x1e>
 800afea:	4b24      	ldr	r3, [pc, #144]	; (800b07c <__swsetup_r+0xd8>)
 800afec:	429c      	cmp	r4, r3
 800afee:	bf08      	it	eq
 800aff0:	68ec      	ldreq	r4, [r5, #12]
 800aff2:	e7e6      	b.n	800afc2 <__swsetup_r+0x1e>
 800aff4:	0751      	lsls	r1, r2, #29
 800aff6:	d512      	bpl.n	800b01e <__swsetup_r+0x7a>
 800aff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800affa:	b141      	cbz	r1, 800b00e <__swsetup_r+0x6a>
 800affc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b000:	4299      	cmp	r1, r3
 800b002:	d002      	beq.n	800b00a <__swsetup_r+0x66>
 800b004:	4630      	mov	r0, r6
 800b006:	f7ff fe47 	bl	800ac98 <_free_r>
 800b00a:	2300      	movs	r3, #0
 800b00c:	6363      	str	r3, [r4, #52]	; 0x34
 800b00e:	89a3      	ldrh	r3, [r4, #12]
 800b010:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b014:	81a3      	strh	r3, [r4, #12]
 800b016:	2300      	movs	r3, #0
 800b018:	6063      	str	r3, [r4, #4]
 800b01a:	6923      	ldr	r3, [r4, #16]
 800b01c:	6023      	str	r3, [r4, #0]
 800b01e:	89a3      	ldrh	r3, [r4, #12]
 800b020:	f043 0308 	orr.w	r3, r3, #8
 800b024:	81a3      	strh	r3, [r4, #12]
 800b026:	6923      	ldr	r3, [r4, #16]
 800b028:	b94b      	cbnz	r3, 800b03e <__swsetup_r+0x9a>
 800b02a:	89a3      	ldrh	r3, [r4, #12]
 800b02c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b034:	d003      	beq.n	800b03e <__swsetup_r+0x9a>
 800b036:	4621      	mov	r1, r4
 800b038:	4630      	mov	r0, r6
 800b03a:	f000 f9bf 	bl	800b3bc <__smakebuf_r>
 800b03e:	89a2      	ldrh	r2, [r4, #12]
 800b040:	f012 0301 	ands.w	r3, r2, #1
 800b044:	d00c      	beq.n	800b060 <__swsetup_r+0xbc>
 800b046:	2300      	movs	r3, #0
 800b048:	60a3      	str	r3, [r4, #8]
 800b04a:	6963      	ldr	r3, [r4, #20]
 800b04c:	425b      	negs	r3, r3
 800b04e:	61a3      	str	r3, [r4, #24]
 800b050:	6923      	ldr	r3, [r4, #16]
 800b052:	b953      	cbnz	r3, 800b06a <__swsetup_r+0xc6>
 800b054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b058:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b05c:	d1ba      	bne.n	800afd4 <__swsetup_r+0x30>
 800b05e:	bd70      	pop	{r4, r5, r6, pc}
 800b060:	0792      	lsls	r2, r2, #30
 800b062:	bf58      	it	pl
 800b064:	6963      	ldrpl	r3, [r4, #20]
 800b066:	60a3      	str	r3, [r4, #8]
 800b068:	e7f2      	b.n	800b050 <__swsetup_r+0xac>
 800b06a:	2000      	movs	r0, #0
 800b06c:	e7f7      	b.n	800b05e <__swsetup_r+0xba>
 800b06e:	bf00      	nop
 800b070:	20000028 	.word	0x20000028
 800b074:	0800c320 	.word	0x0800c320
 800b078:	0800c340 	.word	0x0800c340
 800b07c:	0800c300 	.word	0x0800c300

0800b080 <__sflush_r>:
 800b080:	898a      	ldrh	r2, [r1, #12]
 800b082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b086:	4605      	mov	r5, r0
 800b088:	0710      	lsls	r0, r2, #28
 800b08a:	460c      	mov	r4, r1
 800b08c:	d458      	bmi.n	800b140 <__sflush_r+0xc0>
 800b08e:	684b      	ldr	r3, [r1, #4]
 800b090:	2b00      	cmp	r3, #0
 800b092:	dc05      	bgt.n	800b0a0 <__sflush_r+0x20>
 800b094:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b096:	2b00      	cmp	r3, #0
 800b098:	dc02      	bgt.n	800b0a0 <__sflush_r+0x20>
 800b09a:	2000      	movs	r0, #0
 800b09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0a2:	2e00      	cmp	r6, #0
 800b0a4:	d0f9      	beq.n	800b09a <__sflush_r+0x1a>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b0ac:	682f      	ldr	r7, [r5, #0]
 800b0ae:	6a21      	ldr	r1, [r4, #32]
 800b0b0:	602b      	str	r3, [r5, #0]
 800b0b2:	d032      	beq.n	800b11a <__sflush_r+0x9a>
 800b0b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b0b6:	89a3      	ldrh	r3, [r4, #12]
 800b0b8:	075a      	lsls	r2, r3, #29
 800b0ba:	d505      	bpl.n	800b0c8 <__sflush_r+0x48>
 800b0bc:	6863      	ldr	r3, [r4, #4]
 800b0be:	1ac0      	subs	r0, r0, r3
 800b0c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b0c2:	b10b      	cbz	r3, 800b0c8 <__sflush_r+0x48>
 800b0c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0c6:	1ac0      	subs	r0, r0, r3
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0ce:	6a21      	ldr	r1, [r4, #32]
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	47b0      	blx	r6
 800b0d4:	1c43      	adds	r3, r0, #1
 800b0d6:	89a3      	ldrh	r3, [r4, #12]
 800b0d8:	d106      	bne.n	800b0e8 <__sflush_r+0x68>
 800b0da:	6829      	ldr	r1, [r5, #0]
 800b0dc:	291d      	cmp	r1, #29
 800b0de:	d848      	bhi.n	800b172 <__sflush_r+0xf2>
 800b0e0:	4a29      	ldr	r2, [pc, #164]	; (800b188 <__sflush_r+0x108>)
 800b0e2:	40ca      	lsrs	r2, r1
 800b0e4:	07d6      	lsls	r6, r2, #31
 800b0e6:	d544      	bpl.n	800b172 <__sflush_r+0xf2>
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	6062      	str	r2, [r4, #4]
 800b0ec:	04d9      	lsls	r1, r3, #19
 800b0ee:	6922      	ldr	r2, [r4, #16]
 800b0f0:	6022      	str	r2, [r4, #0]
 800b0f2:	d504      	bpl.n	800b0fe <__sflush_r+0x7e>
 800b0f4:	1c42      	adds	r2, r0, #1
 800b0f6:	d101      	bne.n	800b0fc <__sflush_r+0x7c>
 800b0f8:	682b      	ldr	r3, [r5, #0]
 800b0fa:	b903      	cbnz	r3, 800b0fe <__sflush_r+0x7e>
 800b0fc:	6560      	str	r0, [r4, #84]	; 0x54
 800b0fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b100:	602f      	str	r7, [r5, #0]
 800b102:	2900      	cmp	r1, #0
 800b104:	d0c9      	beq.n	800b09a <__sflush_r+0x1a>
 800b106:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b10a:	4299      	cmp	r1, r3
 800b10c:	d002      	beq.n	800b114 <__sflush_r+0x94>
 800b10e:	4628      	mov	r0, r5
 800b110:	f7ff fdc2 	bl	800ac98 <_free_r>
 800b114:	2000      	movs	r0, #0
 800b116:	6360      	str	r0, [r4, #52]	; 0x34
 800b118:	e7c0      	b.n	800b09c <__sflush_r+0x1c>
 800b11a:	2301      	movs	r3, #1
 800b11c:	4628      	mov	r0, r5
 800b11e:	47b0      	blx	r6
 800b120:	1c41      	adds	r1, r0, #1
 800b122:	d1c8      	bne.n	800b0b6 <__sflush_r+0x36>
 800b124:	682b      	ldr	r3, [r5, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d0c5      	beq.n	800b0b6 <__sflush_r+0x36>
 800b12a:	2b1d      	cmp	r3, #29
 800b12c:	d001      	beq.n	800b132 <__sflush_r+0xb2>
 800b12e:	2b16      	cmp	r3, #22
 800b130:	d101      	bne.n	800b136 <__sflush_r+0xb6>
 800b132:	602f      	str	r7, [r5, #0]
 800b134:	e7b1      	b.n	800b09a <__sflush_r+0x1a>
 800b136:	89a3      	ldrh	r3, [r4, #12]
 800b138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b13c:	81a3      	strh	r3, [r4, #12]
 800b13e:	e7ad      	b.n	800b09c <__sflush_r+0x1c>
 800b140:	690f      	ldr	r7, [r1, #16]
 800b142:	2f00      	cmp	r7, #0
 800b144:	d0a9      	beq.n	800b09a <__sflush_r+0x1a>
 800b146:	0793      	lsls	r3, r2, #30
 800b148:	680e      	ldr	r6, [r1, #0]
 800b14a:	bf08      	it	eq
 800b14c:	694b      	ldreq	r3, [r1, #20]
 800b14e:	600f      	str	r7, [r1, #0]
 800b150:	bf18      	it	ne
 800b152:	2300      	movne	r3, #0
 800b154:	eba6 0807 	sub.w	r8, r6, r7
 800b158:	608b      	str	r3, [r1, #8]
 800b15a:	f1b8 0f00 	cmp.w	r8, #0
 800b15e:	dd9c      	ble.n	800b09a <__sflush_r+0x1a>
 800b160:	4643      	mov	r3, r8
 800b162:	463a      	mov	r2, r7
 800b164:	6a21      	ldr	r1, [r4, #32]
 800b166:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b168:	4628      	mov	r0, r5
 800b16a:	47b0      	blx	r6
 800b16c:	2800      	cmp	r0, #0
 800b16e:	dc06      	bgt.n	800b17e <__sflush_r+0xfe>
 800b170:	89a3      	ldrh	r3, [r4, #12]
 800b172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b176:	81a3      	strh	r3, [r4, #12]
 800b178:	f04f 30ff 	mov.w	r0, #4294967295
 800b17c:	e78e      	b.n	800b09c <__sflush_r+0x1c>
 800b17e:	4407      	add	r7, r0
 800b180:	eba8 0800 	sub.w	r8, r8, r0
 800b184:	e7e9      	b.n	800b15a <__sflush_r+0xda>
 800b186:	bf00      	nop
 800b188:	20400001 	.word	0x20400001

0800b18c <_fflush_r>:
 800b18c:	b538      	push	{r3, r4, r5, lr}
 800b18e:	690b      	ldr	r3, [r1, #16]
 800b190:	4605      	mov	r5, r0
 800b192:	460c      	mov	r4, r1
 800b194:	b1db      	cbz	r3, 800b1ce <_fflush_r+0x42>
 800b196:	b118      	cbz	r0, 800b1a0 <_fflush_r+0x14>
 800b198:	6983      	ldr	r3, [r0, #24]
 800b19a:	b90b      	cbnz	r3, 800b1a0 <_fflush_r+0x14>
 800b19c:	f000 f860 	bl	800b260 <__sinit>
 800b1a0:	4b0c      	ldr	r3, [pc, #48]	; (800b1d4 <_fflush_r+0x48>)
 800b1a2:	429c      	cmp	r4, r3
 800b1a4:	d109      	bne.n	800b1ba <_fflush_r+0x2e>
 800b1a6:	686c      	ldr	r4, [r5, #4]
 800b1a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ac:	b17b      	cbz	r3, 800b1ce <_fflush_r+0x42>
 800b1ae:	4621      	mov	r1, r4
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1b6:	f7ff bf63 	b.w	800b080 <__sflush_r>
 800b1ba:	4b07      	ldr	r3, [pc, #28]	; (800b1d8 <_fflush_r+0x4c>)
 800b1bc:	429c      	cmp	r4, r3
 800b1be:	d101      	bne.n	800b1c4 <_fflush_r+0x38>
 800b1c0:	68ac      	ldr	r4, [r5, #8]
 800b1c2:	e7f1      	b.n	800b1a8 <_fflush_r+0x1c>
 800b1c4:	4b05      	ldr	r3, [pc, #20]	; (800b1dc <_fflush_r+0x50>)
 800b1c6:	429c      	cmp	r4, r3
 800b1c8:	bf08      	it	eq
 800b1ca:	68ec      	ldreq	r4, [r5, #12]
 800b1cc:	e7ec      	b.n	800b1a8 <_fflush_r+0x1c>
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	bd38      	pop	{r3, r4, r5, pc}
 800b1d2:	bf00      	nop
 800b1d4:	0800c320 	.word	0x0800c320
 800b1d8:	0800c340 	.word	0x0800c340
 800b1dc:	0800c300 	.word	0x0800c300

0800b1e0 <std>:
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	b510      	push	{r4, lr}
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	e9c0 3300 	strd	r3, r3, [r0]
 800b1ea:	6083      	str	r3, [r0, #8]
 800b1ec:	8181      	strh	r1, [r0, #12]
 800b1ee:	6643      	str	r3, [r0, #100]	; 0x64
 800b1f0:	81c2      	strh	r2, [r0, #14]
 800b1f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1f6:	6183      	str	r3, [r0, #24]
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	2208      	movs	r2, #8
 800b1fc:	305c      	adds	r0, #92	; 0x5c
 800b1fe:	f7ff fd42 	bl	800ac86 <memset>
 800b202:	4b05      	ldr	r3, [pc, #20]	; (800b218 <std+0x38>)
 800b204:	6263      	str	r3, [r4, #36]	; 0x24
 800b206:	4b05      	ldr	r3, [pc, #20]	; (800b21c <std+0x3c>)
 800b208:	62a3      	str	r3, [r4, #40]	; 0x28
 800b20a:	4b05      	ldr	r3, [pc, #20]	; (800b220 <std+0x40>)
 800b20c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b20e:	4b05      	ldr	r3, [pc, #20]	; (800b224 <std+0x44>)
 800b210:	6224      	str	r4, [r4, #32]
 800b212:	6323      	str	r3, [r4, #48]	; 0x30
 800b214:	bd10      	pop	{r4, pc}
 800b216:	bf00      	nop
 800b218:	0800b9d1 	.word	0x0800b9d1
 800b21c:	0800b9f3 	.word	0x0800b9f3
 800b220:	0800ba2b 	.word	0x0800ba2b
 800b224:	0800ba4f 	.word	0x0800ba4f

0800b228 <_cleanup_r>:
 800b228:	4901      	ldr	r1, [pc, #4]	; (800b230 <_cleanup_r+0x8>)
 800b22a:	f000 b885 	b.w	800b338 <_fwalk_reent>
 800b22e:	bf00      	nop
 800b230:	0800b18d 	.word	0x0800b18d

0800b234 <__sfmoreglue>:
 800b234:	b570      	push	{r4, r5, r6, lr}
 800b236:	1e4a      	subs	r2, r1, #1
 800b238:	2568      	movs	r5, #104	; 0x68
 800b23a:	4355      	muls	r5, r2
 800b23c:	460e      	mov	r6, r1
 800b23e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b242:	f7ff fd77 	bl	800ad34 <_malloc_r>
 800b246:	4604      	mov	r4, r0
 800b248:	b140      	cbz	r0, 800b25c <__sfmoreglue+0x28>
 800b24a:	2100      	movs	r1, #0
 800b24c:	e9c0 1600 	strd	r1, r6, [r0]
 800b250:	300c      	adds	r0, #12
 800b252:	60a0      	str	r0, [r4, #8]
 800b254:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b258:	f7ff fd15 	bl	800ac86 <memset>
 800b25c:	4620      	mov	r0, r4
 800b25e:	bd70      	pop	{r4, r5, r6, pc}

0800b260 <__sinit>:
 800b260:	6983      	ldr	r3, [r0, #24]
 800b262:	b510      	push	{r4, lr}
 800b264:	4604      	mov	r4, r0
 800b266:	bb33      	cbnz	r3, 800b2b6 <__sinit+0x56>
 800b268:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b26c:	6503      	str	r3, [r0, #80]	; 0x50
 800b26e:	4b12      	ldr	r3, [pc, #72]	; (800b2b8 <__sinit+0x58>)
 800b270:	4a12      	ldr	r2, [pc, #72]	; (800b2bc <__sinit+0x5c>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	6282      	str	r2, [r0, #40]	; 0x28
 800b276:	4298      	cmp	r0, r3
 800b278:	bf04      	itt	eq
 800b27a:	2301      	moveq	r3, #1
 800b27c:	6183      	streq	r3, [r0, #24]
 800b27e:	f000 f81f 	bl	800b2c0 <__sfp>
 800b282:	6060      	str	r0, [r4, #4]
 800b284:	4620      	mov	r0, r4
 800b286:	f000 f81b 	bl	800b2c0 <__sfp>
 800b28a:	60a0      	str	r0, [r4, #8]
 800b28c:	4620      	mov	r0, r4
 800b28e:	f000 f817 	bl	800b2c0 <__sfp>
 800b292:	2200      	movs	r2, #0
 800b294:	60e0      	str	r0, [r4, #12]
 800b296:	2104      	movs	r1, #4
 800b298:	6860      	ldr	r0, [r4, #4]
 800b29a:	f7ff ffa1 	bl	800b1e0 <std>
 800b29e:	2201      	movs	r2, #1
 800b2a0:	2109      	movs	r1, #9
 800b2a2:	68a0      	ldr	r0, [r4, #8]
 800b2a4:	f7ff ff9c 	bl	800b1e0 <std>
 800b2a8:	2202      	movs	r2, #2
 800b2aa:	2112      	movs	r1, #18
 800b2ac:	68e0      	ldr	r0, [r4, #12]
 800b2ae:	f7ff ff97 	bl	800b1e0 <std>
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	61a3      	str	r3, [r4, #24]
 800b2b6:	bd10      	pop	{r4, pc}
 800b2b8:	0800c2fc 	.word	0x0800c2fc
 800b2bc:	0800b229 	.word	0x0800b229

0800b2c0 <__sfp>:
 800b2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c2:	4b1b      	ldr	r3, [pc, #108]	; (800b330 <__sfp+0x70>)
 800b2c4:	681e      	ldr	r6, [r3, #0]
 800b2c6:	69b3      	ldr	r3, [r6, #24]
 800b2c8:	4607      	mov	r7, r0
 800b2ca:	b913      	cbnz	r3, 800b2d2 <__sfp+0x12>
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	f7ff ffc7 	bl	800b260 <__sinit>
 800b2d2:	3648      	adds	r6, #72	; 0x48
 800b2d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b2d8:	3b01      	subs	r3, #1
 800b2da:	d503      	bpl.n	800b2e4 <__sfp+0x24>
 800b2dc:	6833      	ldr	r3, [r6, #0]
 800b2de:	b133      	cbz	r3, 800b2ee <__sfp+0x2e>
 800b2e0:	6836      	ldr	r6, [r6, #0]
 800b2e2:	e7f7      	b.n	800b2d4 <__sfp+0x14>
 800b2e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b2e8:	b16d      	cbz	r5, 800b306 <__sfp+0x46>
 800b2ea:	3468      	adds	r4, #104	; 0x68
 800b2ec:	e7f4      	b.n	800b2d8 <__sfp+0x18>
 800b2ee:	2104      	movs	r1, #4
 800b2f0:	4638      	mov	r0, r7
 800b2f2:	f7ff ff9f 	bl	800b234 <__sfmoreglue>
 800b2f6:	6030      	str	r0, [r6, #0]
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d1f1      	bne.n	800b2e0 <__sfp+0x20>
 800b2fc:	230c      	movs	r3, #12
 800b2fe:	603b      	str	r3, [r7, #0]
 800b300:	4604      	mov	r4, r0
 800b302:	4620      	mov	r0, r4
 800b304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b306:	4b0b      	ldr	r3, [pc, #44]	; (800b334 <__sfp+0x74>)
 800b308:	6665      	str	r5, [r4, #100]	; 0x64
 800b30a:	e9c4 5500 	strd	r5, r5, [r4]
 800b30e:	60a5      	str	r5, [r4, #8]
 800b310:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b314:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b318:	2208      	movs	r2, #8
 800b31a:	4629      	mov	r1, r5
 800b31c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b320:	f7ff fcb1 	bl	800ac86 <memset>
 800b324:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b328:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b32c:	e7e9      	b.n	800b302 <__sfp+0x42>
 800b32e:	bf00      	nop
 800b330:	0800c2fc 	.word	0x0800c2fc
 800b334:	ffff0001 	.word	0xffff0001

0800b338 <_fwalk_reent>:
 800b338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b33c:	4680      	mov	r8, r0
 800b33e:	4689      	mov	r9, r1
 800b340:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b344:	2600      	movs	r6, #0
 800b346:	b914      	cbnz	r4, 800b34e <_fwalk_reent+0x16>
 800b348:	4630      	mov	r0, r6
 800b34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b34e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b352:	3f01      	subs	r7, #1
 800b354:	d501      	bpl.n	800b35a <_fwalk_reent+0x22>
 800b356:	6824      	ldr	r4, [r4, #0]
 800b358:	e7f5      	b.n	800b346 <_fwalk_reent+0xe>
 800b35a:	89ab      	ldrh	r3, [r5, #12]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d907      	bls.n	800b370 <_fwalk_reent+0x38>
 800b360:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b364:	3301      	adds	r3, #1
 800b366:	d003      	beq.n	800b370 <_fwalk_reent+0x38>
 800b368:	4629      	mov	r1, r5
 800b36a:	4640      	mov	r0, r8
 800b36c:	47c8      	blx	r9
 800b36e:	4306      	orrs	r6, r0
 800b370:	3568      	adds	r5, #104	; 0x68
 800b372:	e7ee      	b.n	800b352 <_fwalk_reent+0x1a>

0800b374 <__swhatbuf_r>:
 800b374:	b570      	push	{r4, r5, r6, lr}
 800b376:	460e      	mov	r6, r1
 800b378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b37c:	2900      	cmp	r1, #0
 800b37e:	b096      	sub	sp, #88	; 0x58
 800b380:	4614      	mov	r4, r2
 800b382:	461d      	mov	r5, r3
 800b384:	da07      	bge.n	800b396 <__swhatbuf_r+0x22>
 800b386:	2300      	movs	r3, #0
 800b388:	602b      	str	r3, [r5, #0]
 800b38a:	89b3      	ldrh	r3, [r6, #12]
 800b38c:	061a      	lsls	r2, r3, #24
 800b38e:	d410      	bmi.n	800b3b2 <__swhatbuf_r+0x3e>
 800b390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b394:	e00e      	b.n	800b3b4 <__swhatbuf_r+0x40>
 800b396:	466a      	mov	r2, sp
 800b398:	f000 fb80 	bl	800ba9c <_fstat_r>
 800b39c:	2800      	cmp	r0, #0
 800b39e:	dbf2      	blt.n	800b386 <__swhatbuf_r+0x12>
 800b3a0:	9a01      	ldr	r2, [sp, #4]
 800b3a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b3a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b3aa:	425a      	negs	r2, r3
 800b3ac:	415a      	adcs	r2, r3
 800b3ae:	602a      	str	r2, [r5, #0]
 800b3b0:	e7ee      	b.n	800b390 <__swhatbuf_r+0x1c>
 800b3b2:	2340      	movs	r3, #64	; 0x40
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	6023      	str	r3, [r4, #0]
 800b3b8:	b016      	add	sp, #88	; 0x58
 800b3ba:	bd70      	pop	{r4, r5, r6, pc}

0800b3bc <__smakebuf_r>:
 800b3bc:	898b      	ldrh	r3, [r1, #12]
 800b3be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3c0:	079d      	lsls	r5, r3, #30
 800b3c2:	4606      	mov	r6, r0
 800b3c4:	460c      	mov	r4, r1
 800b3c6:	d507      	bpl.n	800b3d8 <__smakebuf_r+0x1c>
 800b3c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b3cc:	6023      	str	r3, [r4, #0]
 800b3ce:	6123      	str	r3, [r4, #16]
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	6163      	str	r3, [r4, #20]
 800b3d4:	b002      	add	sp, #8
 800b3d6:	bd70      	pop	{r4, r5, r6, pc}
 800b3d8:	ab01      	add	r3, sp, #4
 800b3da:	466a      	mov	r2, sp
 800b3dc:	f7ff ffca 	bl	800b374 <__swhatbuf_r>
 800b3e0:	9900      	ldr	r1, [sp, #0]
 800b3e2:	4605      	mov	r5, r0
 800b3e4:	4630      	mov	r0, r6
 800b3e6:	f7ff fca5 	bl	800ad34 <_malloc_r>
 800b3ea:	b948      	cbnz	r0, 800b400 <__smakebuf_r+0x44>
 800b3ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3f0:	059a      	lsls	r2, r3, #22
 800b3f2:	d4ef      	bmi.n	800b3d4 <__smakebuf_r+0x18>
 800b3f4:	f023 0303 	bic.w	r3, r3, #3
 800b3f8:	f043 0302 	orr.w	r3, r3, #2
 800b3fc:	81a3      	strh	r3, [r4, #12]
 800b3fe:	e7e3      	b.n	800b3c8 <__smakebuf_r+0xc>
 800b400:	4b0d      	ldr	r3, [pc, #52]	; (800b438 <__smakebuf_r+0x7c>)
 800b402:	62b3      	str	r3, [r6, #40]	; 0x28
 800b404:	89a3      	ldrh	r3, [r4, #12]
 800b406:	6020      	str	r0, [r4, #0]
 800b408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b40c:	81a3      	strh	r3, [r4, #12]
 800b40e:	9b00      	ldr	r3, [sp, #0]
 800b410:	6163      	str	r3, [r4, #20]
 800b412:	9b01      	ldr	r3, [sp, #4]
 800b414:	6120      	str	r0, [r4, #16]
 800b416:	b15b      	cbz	r3, 800b430 <__smakebuf_r+0x74>
 800b418:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b41c:	4630      	mov	r0, r6
 800b41e:	f000 fb4f 	bl	800bac0 <_isatty_r>
 800b422:	b128      	cbz	r0, 800b430 <__smakebuf_r+0x74>
 800b424:	89a3      	ldrh	r3, [r4, #12]
 800b426:	f023 0303 	bic.w	r3, r3, #3
 800b42a:	f043 0301 	orr.w	r3, r3, #1
 800b42e:	81a3      	strh	r3, [r4, #12]
 800b430:	89a3      	ldrh	r3, [r4, #12]
 800b432:	431d      	orrs	r5, r3
 800b434:	81a5      	strh	r5, [r4, #12]
 800b436:	e7cd      	b.n	800b3d4 <__smakebuf_r+0x18>
 800b438:	0800b229 	.word	0x0800b229

0800b43c <__malloc_lock>:
 800b43c:	4770      	bx	lr

0800b43e <__malloc_unlock>:
 800b43e:	4770      	bx	lr

0800b440 <__sfputc_r>:
 800b440:	6893      	ldr	r3, [r2, #8]
 800b442:	3b01      	subs	r3, #1
 800b444:	2b00      	cmp	r3, #0
 800b446:	b410      	push	{r4}
 800b448:	6093      	str	r3, [r2, #8]
 800b44a:	da08      	bge.n	800b45e <__sfputc_r+0x1e>
 800b44c:	6994      	ldr	r4, [r2, #24]
 800b44e:	42a3      	cmp	r3, r4
 800b450:	db01      	blt.n	800b456 <__sfputc_r+0x16>
 800b452:	290a      	cmp	r1, #10
 800b454:	d103      	bne.n	800b45e <__sfputc_r+0x1e>
 800b456:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b45a:	f7ff bd51 	b.w	800af00 <__swbuf_r>
 800b45e:	6813      	ldr	r3, [r2, #0]
 800b460:	1c58      	adds	r0, r3, #1
 800b462:	6010      	str	r0, [r2, #0]
 800b464:	7019      	strb	r1, [r3, #0]
 800b466:	4608      	mov	r0, r1
 800b468:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <__sfputs_r>:
 800b46e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b470:	4606      	mov	r6, r0
 800b472:	460f      	mov	r7, r1
 800b474:	4614      	mov	r4, r2
 800b476:	18d5      	adds	r5, r2, r3
 800b478:	42ac      	cmp	r4, r5
 800b47a:	d101      	bne.n	800b480 <__sfputs_r+0x12>
 800b47c:	2000      	movs	r0, #0
 800b47e:	e007      	b.n	800b490 <__sfputs_r+0x22>
 800b480:	463a      	mov	r2, r7
 800b482:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b486:	4630      	mov	r0, r6
 800b488:	f7ff ffda 	bl	800b440 <__sfputc_r>
 800b48c:	1c43      	adds	r3, r0, #1
 800b48e:	d1f3      	bne.n	800b478 <__sfputs_r+0xa>
 800b490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b494 <_vfiprintf_r>:
 800b494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b498:	460c      	mov	r4, r1
 800b49a:	b09d      	sub	sp, #116	; 0x74
 800b49c:	4617      	mov	r7, r2
 800b49e:	461d      	mov	r5, r3
 800b4a0:	4606      	mov	r6, r0
 800b4a2:	b118      	cbz	r0, 800b4ac <_vfiprintf_r+0x18>
 800b4a4:	6983      	ldr	r3, [r0, #24]
 800b4a6:	b90b      	cbnz	r3, 800b4ac <_vfiprintf_r+0x18>
 800b4a8:	f7ff feda 	bl	800b260 <__sinit>
 800b4ac:	4b7c      	ldr	r3, [pc, #496]	; (800b6a0 <_vfiprintf_r+0x20c>)
 800b4ae:	429c      	cmp	r4, r3
 800b4b0:	d158      	bne.n	800b564 <_vfiprintf_r+0xd0>
 800b4b2:	6874      	ldr	r4, [r6, #4]
 800b4b4:	89a3      	ldrh	r3, [r4, #12]
 800b4b6:	0718      	lsls	r0, r3, #28
 800b4b8:	d55e      	bpl.n	800b578 <_vfiprintf_r+0xe4>
 800b4ba:	6923      	ldr	r3, [r4, #16]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d05b      	beq.n	800b578 <_vfiprintf_r+0xe4>
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b4c4:	2320      	movs	r3, #32
 800b4c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4ca:	2330      	movs	r3, #48	; 0x30
 800b4cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4d0:	9503      	str	r5, [sp, #12]
 800b4d2:	f04f 0b01 	mov.w	fp, #1
 800b4d6:	46b8      	mov	r8, r7
 800b4d8:	4645      	mov	r5, r8
 800b4da:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b4de:	b10b      	cbz	r3, 800b4e4 <_vfiprintf_r+0x50>
 800b4e0:	2b25      	cmp	r3, #37	; 0x25
 800b4e2:	d154      	bne.n	800b58e <_vfiprintf_r+0xfa>
 800b4e4:	ebb8 0a07 	subs.w	sl, r8, r7
 800b4e8:	d00b      	beq.n	800b502 <_vfiprintf_r+0x6e>
 800b4ea:	4653      	mov	r3, sl
 800b4ec:	463a      	mov	r2, r7
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	f7ff ffbc 	bl	800b46e <__sfputs_r>
 800b4f6:	3001      	adds	r0, #1
 800b4f8:	f000 80c2 	beq.w	800b680 <_vfiprintf_r+0x1ec>
 800b4fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4fe:	4453      	add	r3, sl
 800b500:	9309      	str	r3, [sp, #36]	; 0x24
 800b502:	f898 3000 	ldrb.w	r3, [r8]
 800b506:	2b00      	cmp	r3, #0
 800b508:	f000 80ba 	beq.w	800b680 <_vfiprintf_r+0x1ec>
 800b50c:	2300      	movs	r3, #0
 800b50e:	f04f 32ff 	mov.w	r2, #4294967295
 800b512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b516:	9304      	str	r3, [sp, #16]
 800b518:	9307      	str	r3, [sp, #28]
 800b51a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b51e:	931a      	str	r3, [sp, #104]	; 0x68
 800b520:	46a8      	mov	r8, r5
 800b522:	2205      	movs	r2, #5
 800b524:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b528:	485e      	ldr	r0, [pc, #376]	; (800b6a4 <_vfiprintf_r+0x210>)
 800b52a:	f7f4 fe79 	bl	8000220 <memchr>
 800b52e:	9b04      	ldr	r3, [sp, #16]
 800b530:	bb78      	cbnz	r0, 800b592 <_vfiprintf_r+0xfe>
 800b532:	06d9      	lsls	r1, r3, #27
 800b534:	bf44      	itt	mi
 800b536:	2220      	movmi	r2, #32
 800b538:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b53c:	071a      	lsls	r2, r3, #28
 800b53e:	bf44      	itt	mi
 800b540:	222b      	movmi	r2, #43	; 0x2b
 800b542:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b546:	782a      	ldrb	r2, [r5, #0]
 800b548:	2a2a      	cmp	r2, #42	; 0x2a
 800b54a:	d02a      	beq.n	800b5a2 <_vfiprintf_r+0x10e>
 800b54c:	9a07      	ldr	r2, [sp, #28]
 800b54e:	46a8      	mov	r8, r5
 800b550:	2000      	movs	r0, #0
 800b552:	250a      	movs	r5, #10
 800b554:	4641      	mov	r1, r8
 800b556:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b55a:	3b30      	subs	r3, #48	; 0x30
 800b55c:	2b09      	cmp	r3, #9
 800b55e:	d969      	bls.n	800b634 <_vfiprintf_r+0x1a0>
 800b560:	b360      	cbz	r0, 800b5bc <_vfiprintf_r+0x128>
 800b562:	e024      	b.n	800b5ae <_vfiprintf_r+0x11a>
 800b564:	4b50      	ldr	r3, [pc, #320]	; (800b6a8 <_vfiprintf_r+0x214>)
 800b566:	429c      	cmp	r4, r3
 800b568:	d101      	bne.n	800b56e <_vfiprintf_r+0xda>
 800b56a:	68b4      	ldr	r4, [r6, #8]
 800b56c:	e7a2      	b.n	800b4b4 <_vfiprintf_r+0x20>
 800b56e:	4b4f      	ldr	r3, [pc, #316]	; (800b6ac <_vfiprintf_r+0x218>)
 800b570:	429c      	cmp	r4, r3
 800b572:	bf08      	it	eq
 800b574:	68f4      	ldreq	r4, [r6, #12]
 800b576:	e79d      	b.n	800b4b4 <_vfiprintf_r+0x20>
 800b578:	4621      	mov	r1, r4
 800b57a:	4630      	mov	r0, r6
 800b57c:	f7ff fd12 	bl	800afa4 <__swsetup_r>
 800b580:	2800      	cmp	r0, #0
 800b582:	d09d      	beq.n	800b4c0 <_vfiprintf_r+0x2c>
 800b584:	f04f 30ff 	mov.w	r0, #4294967295
 800b588:	b01d      	add	sp, #116	; 0x74
 800b58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b58e:	46a8      	mov	r8, r5
 800b590:	e7a2      	b.n	800b4d8 <_vfiprintf_r+0x44>
 800b592:	4a44      	ldr	r2, [pc, #272]	; (800b6a4 <_vfiprintf_r+0x210>)
 800b594:	1a80      	subs	r0, r0, r2
 800b596:	fa0b f000 	lsl.w	r0, fp, r0
 800b59a:	4318      	orrs	r0, r3
 800b59c:	9004      	str	r0, [sp, #16]
 800b59e:	4645      	mov	r5, r8
 800b5a0:	e7be      	b.n	800b520 <_vfiprintf_r+0x8c>
 800b5a2:	9a03      	ldr	r2, [sp, #12]
 800b5a4:	1d11      	adds	r1, r2, #4
 800b5a6:	6812      	ldr	r2, [r2, #0]
 800b5a8:	9103      	str	r1, [sp, #12]
 800b5aa:	2a00      	cmp	r2, #0
 800b5ac:	db01      	blt.n	800b5b2 <_vfiprintf_r+0x11e>
 800b5ae:	9207      	str	r2, [sp, #28]
 800b5b0:	e004      	b.n	800b5bc <_vfiprintf_r+0x128>
 800b5b2:	4252      	negs	r2, r2
 800b5b4:	f043 0302 	orr.w	r3, r3, #2
 800b5b8:	9207      	str	r2, [sp, #28]
 800b5ba:	9304      	str	r3, [sp, #16]
 800b5bc:	f898 3000 	ldrb.w	r3, [r8]
 800b5c0:	2b2e      	cmp	r3, #46	; 0x2e
 800b5c2:	d10e      	bne.n	800b5e2 <_vfiprintf_r+0x14e>
 800b5c4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b5c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b5ca:	d138      	bne.n	800b63e <_vfiprintf_r+0x1aa>
 800b5cc:	9b03      	ldr	r3, [sp, #12]
 800b5ce:	1d1a      	adds	r2, r3, #4
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	9203      	str	r2, [sp, #12]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	bfb8      	it	lt
 800b5d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5dc:	f108 0802 	add.w	r8, r8, #2
 800b5e0:	9305      	str	r3, [sp, #20]
 800b5e2:	4d33      	ldr	r5, [pc, #204]	; (800b6b0 <_vfiprintf_r+0x21c>)
 800b5e4:	f898 1000 	ldrb.w	r1, [r8]
 800b5e8:	2203      	movs	r2, #3
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	f7f4 fe18 	bl	8000220 <memchr>
 800b5f0:	b140      	cbz	r0, 800b604 <_vfiprintf_r+0x170>
 800b5f2:	2340      	movs	r3, #64	; 0x40
 800b5f4:	1b40      	subs	r0, r0, r5
 800b5f6:	fa03 f000 	lsl.w	r0, r3, r0
 800b5fa:	9b04      	ldr	r3, [sp, #16]
 800b5fc:	4303      	orrs	r3, r0
 800b5fe:	f108 0801 	add.w	r8, r8, #1
 800b602:	9304      	str	r3, [sp, #16]
 800b604:	f898 1000 	ldrb.w	r1, [r8]
 800b608:	482a      	ldr	r0, [pc, #168]	; (800b6b4 <_vfiprintf_r+0x220>)
 800b60a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b60e:	2206      	movs	r2, #6
 800b610:	f108 0701 	add.w	r7, r8, #1
 800b614:	f7f4 fe04 	bl	8000220 <memchr>
 800b618:	2800      	cmp	r0, #0
 800b61a:	d037      	beq.n	800b68c <_vfiprintf_r+0x1f8>
 800b61c:	4b26      	ldr	r3, [pc, #152]	; (800b6b8 <_vfiprintf_r+0x224>)
 800b61e:	bb1b      	cbnz	r3, 800b668 <_vfiprintf_r+0x1d4>
 800b620:	9b03      	ldr	r3, [sp, #12]
 800b622:	3307      	adds	r3, #7
 800b624:	f023 0307 	bic.w	r3, r3, #7
 800b628:	3308      	adds	r3, #8
 800b62a:	9303      	str	r3, [sp, #12]
 800b62c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b62e:	444b      	add	r3, r9
 800b630:	9309      	str	r3, [sp, #36]	; 0x24
 800b632:	e750      	b.n	800b4d6 <_vfiprintf_r+0x42>
 800b634:	fb05 3202 	mla	r2, r5, r2, r3
 800b638:	2001      	movs	r0, #1
 800b63a:	4688      	mov	r8, r1
 800b63c:	e78a      	b.n	800b554 <_vfiprintf_r+0xc0>
 800b63e:	2300      	movs	r3, #0
 800b640:	f108 0801 	add.w	r8, r8, #1
 800b644:	9305      	str	r3, [sp, #20]
 800b646:	4619      	mov	r1, r3
 800b648:	250a      	movs	r5, #10
 800b64a:	4640      	mov	r0, r8
 800b64c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b650:	3a30      	subs	r2, #48	; 0x30
 800b652:	2a09      	cmp	r2, #9
 800b654:	d903      	bls.n	800b65e <_vfiprintf_r+0x1ca>
 800b656:	2b00      	cmp	r3, #0
 800b658:	d0c3      	beq.n	800b5e2 <_vfiprintf_r+0x14e>
 800b65a:	9105      	str	r1, [sp, #20]
 800b65c:	e7c1      	b.n	800b5e2 <_vfiprintf_r+0x14e>
 800b65e:	fb05 2101 	mla	r1, r5, r1, r2
 800b662:	2301      	movs	r3, #1
 800b664:	4680      	mov	r8, r0
 800b666:	e7f0      	b.n	800b64a <_vfiprintf_r+0x1b6>
 800b668:	ab03      	add	r3, sp, #12
 800b66a:	9300      	str	r3, [sp, #0]
 800b66c:	4622      	mov	r2, r4
 800b66e:	4b13      	ldr	r3, [pc, #76]	; (800b6bc <_vfiprintf_r+0x228>)
 800b670:	a904      	add	r1, sp, #16
 800b672:	4630      	mov	r0, r6
 800b674:	f3af 8000 	nop.w
 800b678:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b67c:	4681      	mov	r9, r0
 800b67e:	d1d5      	bne.n	800b62c <_vfiprintf_r+0x198>
 800b680:	89a3      	ldrh	r3, [r4, #12]
 800b682:	065b      	lsls	r3, r3, #25
 800b684:	f53f af7e 	bmi.w	800b584 <_vfiprintf_r+0xf0>
 800b688:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b68a:	e77d      	b.n	800b588 <_vfiprintf_r+0xf4>
 800b68c:	ab03      	add	r3, sp, #12
 800b68e:	9300      	str	r3, [sp, #0]
 800b690:	4622      	mov	r2, r4
 800b692:	4b0a      	ldr	r3, [pc, #40]	; (800b6bc <_vfiprintf_r+0x228>)
 800b694:	a904      	add	r1, sp, #16
 800b696:	4630      	mov	r0, r6
 800b698:	f000 f888 	bl	800b7ac <_printf_i>
 800b69c:	e7ec      	b.n	800b678 <_vfiprintf_r+0x1e4>
 800b69e:	bf00      	nop
 800b6a0:	0800c320 	.word	0x0800c320
 800b6a4:	0800c360 	.word	0x0800c360
 800b6a8:	0800c340 	.word	0x0800c340
 800b6ac:	0800c300 	.word	0x0800c300
 800b6b0:	0800c366 	.word	0x0800c366
 800b6b4:	0800c36a 	.word	0x0800c36a
 800b6b8:	00000000 	.word	0x00000000
 800b6bc:	0800b46f 	.word	0x0800b46f

0800b6c0 <_printf_common>:
 800b6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6c4:	4691      	mov	r9, r2
 800b6c6:	461f      	mov	r7, r3
 800b6c8:	688a      	ldr	r2, [r1, #8]
 800b6ca:	690b      	ldr	r3, [r1, #16]
 800b6cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	bfb8      	it	lt
 800b6d4:	4613      	movlt	r3, r2
 800b6d6:	f8c9 3000 	str.w	r3, [r9]
 800b6da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6de:	4606      	mov	r6, r0
 800b6e0:	460c      	mov	r4, r1
 800b6e2:	b112      	cbz	r2, 800b6ea <_printf_common+0x2a>
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	f8c9 3000 	str.w	r3, [r9]
 800b6ea:	6823      	ldr	r3, [r4, #0]
 800b6ec:	0699      	lsls	r1, r3, #26
 800b6ee:	bf42      	ittt	mi
 800b6f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b6f4:	3302      	addmi	r3, #2
 800b6f6:	f8c9 3000 	strmi.w	r3, [r9]
 800b6fa:	6825      	ldr	r5, [r4, #0]
 800b6fc:	f015 0506 	ands.w	r5, r5, #6
 800b700:	d107      	bne.n	800b712 <_printf_common+0x52>
 800b702:	f104 0a19 	add.w	sl, r4, #25
 800b706:	68e3      	ldr	r3, [r4, #12]
 800b708:	f8d9 2000 	ldr.w	r2, [r9]
 800b70c:	1a9b      	subs	r3, r3, r2
 800b70e:	42ab      	cmp	r3, r5
 800b710:	dc28      	bgt.n	800b764 <_printf_common+0xa4>
 800b712:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b716:	6822      	ldr	r2, [r4, #0]
 800b718:	3300      	adds	r3, #0
 800b71a:	bf18      	it	ne
 800b71c:	2301      	movne	r3, #1
 800b71e:	0692      	lsls	r2, r2, #26
 800b720:	d42d      	bmi.n	800b77e <_printf_common+0xbe>
 800b722:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b726:	4639      	mov	r1, r7
 800b728:	4630      	mov	r0, r6
 800b72a:	47c0      	blx	r8
 800b72c:	3001      	adds	r0, #1
 800b72e:	d020      	beq.n	800b772 <_printf_common+0xb2>
 800b730:	6823      	ldr	r3, [r4, #0]
 800b732:	68e5      	ldr	r5, [r4, #12]
 800b734:	f8d9 2000 	ldr.w	r2, [r9]
 800b738:	f003 0306 	and.w	r3, r3, #6
 800b73c:	2b04      	cmp	r3, #4
 800b73e:	bf08      	it	eq
 800b740:	1aad      	subeq	r5, r5, r2
 800b742:	68a3      	ldr	r3, [r4, #8]
 800b744:	6922      	ldr	r2, [r4, #16]
 800b746:	bf0c      	ite	eq
 800b748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b74c:	2500      	movne	r5, #0
 800b74e:	4293      	cmp	r3, r2
 800b750:	bfc4      	itt	gt
 800b752:	1a9b      	subgt	r3, r3, r2
 800b754:	18ed      	addgt	r5, r5, r3
 800b756:	f04f 0900 	mov.w	r9, #0
 800b75a:	341a      	adds	r4, #26
 800b75c:	454d      	cmp	r5, r9
 800b75e:	d11a      	bne.n	800b796 <_printf_common+0xd6>
 800b760:	2000      	movs	r0, #0
 800b762:	e008      	b.n	800b776 <_printf_common+0xb6>
 800b764:	2301      	movs	r3, #1
 800b766:	4652      	mov	r2, sl
 800b768:	4639      	mov	r1, r7
 800b76a:	4630      	mov	r0, r6
 800b76c:	47c0      	blx	r8
 800b76e:	3001      	adds	r0, #1
 800b770:	d103      	bne.n	800b77a <_printf_common+0xba>
 800b772:	f04f 30ff 	mov.w	r0, #4294967295
 800b776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b77a:	3501      	adds	r5, #1
 800b77c:	e7c3      	b.n	800b706 <_printf_common+0x46>
 800b77e:	18e1      	adds	r1, r4, r3
 800b780:	1c5a      	adds	r2, r3, #1
 800b782:	2030      	movs	r0, #48	; 0x30
 800b784:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b788:	4422      	add	r2, r4
 800b78a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b78e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b792:	3302      	adds	r3, #2
 800b794:	e7c5      	b.n	800b722 <_printf_common+0x62>
 800b796:	2301      	movs	r3, #1
 800b798:	4622      	mov	r2, r4
 800b79a:	4639      	mov	r1, r7
 800b79c:	4630      	mov	r0, r6
 800b79e:	47c0      	blx	r8
 800b7a0:	3001      	adds	r0, #1
 800b7a2:	d0e6      	beq.n	800b772 <_printf_common+0xb2>
 800b7a4:	f109 0901 	add.w	r9, r9, #1
 800b7a8:	e7d8      	b.n	800b75c <_printf_common+0x9c>
	...

0800b7ac <_printf_i>:
 800b7ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b7b4:	460c      	mov	r4, r1
 800b7b6:	7e09      	ldrb	r1, [r1, #24]
 800b7b8:	b085      	sub	sp, #20
 800b7ba:	296e      	cmp	r1, #110	; 0x6e
 800b7bc:	4617      	mov	r7, r2
 800b7be:	4606      	mov	r6, r0
 800b7c0:	4698      	mov	r8, r3
 800b7c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7c4:	f000 80b3 	beq.w	800b92e <_printf_i+0x182>
 800b7c8:	d822      	bhi.n	800b810 <_printf_i+0x64>
 800b7ca:	2963      	cmp	r1, #99	; 0x63
 800b7cc:	d036      	beq.n	800b83c <_printf_i+0x90>
 800b7ce:	d80a      	bhi.n	800b7e6 <_printf_i+0x3a>
 800b7d0:	2900      	cmp	r1, #0
 800b7d2:	f000 80b9 	beq.w	800b948 <_printf_i+0x19c>
 800b7d6:	2958      	cmp	r1, #88	; 0x58
 800b7d8:	f000 8083 	beq.w	800b8e2 <_printf_i+0x136>
 800b7dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b7e4:	e032      	b.n	800b84c <_printf_i+0xa0>
 800b7e6:	2964      	cmp	r1, #100	; 0x64
 800b7e8:	d001      	beq.n	800b7ee <_printf_i+0x42>
 800b7ea:	2969      	cmp	r1, #105	; 0x69
 800b7ec:	d1f6      	bne.n	800b7dc <_printf_i+0x30>
 800b7ee:	6820      	ldr	r0, [r4, #0]
 800b7f0:	6813      	ldr	r3, [r2, #0]
 800b7f2:	0605      	lsls	r5, r0, #24
 800b7f4:	f103 0104 	add.w	r1, r3, #4
 800b7f8:	d52a      	bpl.n	800b850 <_printf_i+0xa4>
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	6011      	str	r1, [r2, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	da03      	bge.n	800b80a <_printf_i+0x5e>
 800b802:	222d      	movs	r2, #45	; 0x2d
 800b804:	425b      	negs	r3, r3
 800b806:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b80a:	486f      	ldr	r0, [pc, #444]	; (800b9c8 <_printf_i+0x21c>)
 800b80c:	220a      	movs	r2, #10
 800b80e:	e039      	b.n	800b884 <_printf_i+0xd8>
 800b810:	2973      	cmp	r1, #115	; 0x73
 800b812:	f000 809d 	beq.w	800b950 <_printf_i+0x1a4>
 800b816:	d808      	bhi.n	800b82a <_printf_i+0x7e>
 800b818:	296f      	cmp	r1, #111	; 0x6f
 800b81a:	d020      	beq.n	800b85e <_printf_i+0xb2>
 800b81c:	2970      	cmp	r1, #112	; 0x70
 800b81e:	d1dd      	bne.n	800b7dc <_printf_i+0x30>
 800b820:	6823      	ldr	r3, [r4, #0]
 800b822:	f043 0320 	orr.w	r3, r3, #32
 800b826:	6023      	str	r3, [r4, #0]
 800b828:	e003      	b.n	800b832 <_printf_i+0x86>
 800b82a:	2975      	cmp	r1, #117	; 0x75
 800b82c:	d017      	beq.n	800b85e <_printf_i+0xb2>
 800b82e:	2978      	cmp	r1, #120	; 0x78
 800b830:	d1d4      	bne.n	800b7dc <_printf_i+0x30>
 800b832:	2378      	movs	r3, #120	; 0x78
 800b834:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b838:	4864      	ldr	r0, [pc, #400]	; (800b9cc <_printf_i+0x220>)
 800b83a:	e055      	b.n	800b8e8 <_printf_i+0x13c>
 800b83c:	6813      	ldr	r3, [r2, #0]
 800b83e:	1d19      	adds	r1, r3, #4
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	6011      	str	r1, [r2, #0]
 800b844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b84c:	2301      	movs	r3, #1
 800b84e:	e08c      	b.n	800b96a <_printf_i+0x1be>
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	6011      	str	r1, [r2, #0]
 800b854:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b858:	bf18      	it	ne
 800b85a:	b21b      	sxthne	r3, r3
 800b85c:	e7cf      	b.n	800b7fe <_printf_i+0x52>
 800b85e:	6813      	ldr	r3, [r2, #0]
 800b860:	6825      	ldr	r5, [r4, #0]
 800b862:	1d18      	adds	r0, r3, #4
 800b864:	6010      	str	r0, [r2, #0]
 800b866:	0628      	lsls	r0, r5, #24
 800b868:	d501      	bpl.n	800b86e <_printf_i+0xc2>
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	e002      	b.n	800b874 <_printf_i+0xc8>
 800b86e:	0668      	lsls	r0, r5, #25
 800b870:	d5fb      	bpl.n	800b86a <_printf_i+0xbe>
 800b872:	881b      	ldrh	r3, [r3, #0]
 800b874:	4854      	ldr	r0, [pc, #336]	; (800b9c8 <_printf_i+0x21c>)
 800b876:	296f      	cmp	r1, #111	; 0x6f
 800b878:	bf14      	ite	ne
 800b87a:	220a      	movne	r2, #10
 800b87c:	2208      	moveq	r2, #8
 800b87e:	2100      	movs	r1, #0
 800b880:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b884:	6865      	ldr	r5, [r4, #4]
 800b886:	60a5      	str	r5, [r4, #8]
 800b888:	2d00      	cmp	r5, #0
 800b88a:	f2c0 8095 	blt.w	800b9b8 <_printf_i+0x20c>
 800b88e:	6821      	ldr	r1, [r4, #0]
 800b890:	f021 0104 	bic.w	r1, r1, #4
 800b894:	6021      	str	r1, [r4, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d13d      	bne.n	800b916 <_printf_i+0x16a>
 800b89a:	2d00      	cmp	r5, #0
 800b89c:	f040 808e 	bne.w	800b9bc <_printf_i+0x210>
 800b8a0:	4665      	mov	r5, ip
 800b8a2:	2a08      	cmp	r2, #8
 800b8a4:	d10b      	bne.n	800b8be <_printf_i+0x112>
 800b8a6:	6823      	ldr	r3, [r4, #0]
 800b8a8:	07db      	lsls	r3, r3, #31
 800b8aa:	d508      	bpl.n	800b8be <_printf_i+0x112>
 800b8ac:	6923      	ldr	r3, [r4, #16]
 800b8ae:	6862      	ldr	r2, [r4, #4]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	bfde      	ittt	le
 800b8b4:	2330      	movle	r3, #48	; 0x30
 800b8b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b8be:	ebac 0305 	sub.w	r3, ip, r5
 800b8c2:	6123      	str	r3, [r4, #16]
 800b8c4:	f8cd 8000 	str.w	r8, [sp]
 800b8c8:	463b      	mov	r3, r7
 800b8ca:	aa03      	add	r2, sp, #12
 800b8cc:	4621      	mov	r1, r4
 800b8ce:	4630      	mov	r0, r6
 800b8d0:	f7ff fef6 	bl	800b6c0 <_printf_common>
 800b8d4:	3001      	adds	r0, #1
 800b8d6:	d14d      	bne.n	800b974 <_printf_i+0x1c8>
 800b8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8dc:	b005      	add	sp, #20
 800b8de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8e2:	4839      	ldr	r0, [pc, #228]	; (800b9c8 <_printf_i+0x21c>)
 800b8e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b8e8:	6813      	ldr	r3, [r2, #0]
 800b8ea:	6821      	ldr	r1, [r4, #0]
 800b8ec:	1d1d      	adds	r5, r3, #4
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	6015      	str	r5, [r2, #0]
 800b8f2:	060a      	lsls	r2, r1, #24
 800b8f4:	d50b      	bpl.n	800b90e <_printf_i+0x162>
 800b8f6:	07ca      	lsls	r2, r1, #31
 800b8f8:	bf44      	itt	mi
 800b8fa:	f041 0120 	orrmi.w	r1, r1, #32
 800b8fe:	6021      	strmi	r1, [r4, #0]
 800b900:	b91b      	cbnz	r3, 800b90a <_printf_i+0x15e>
 800b902:	6822      	ldr	r2, [r4, #0]
 800b904:	f022 0220 	bic.w	r2, r2, #32
 800b908:	6022      	str	r2, [r4, #0]
 800b90a:	2210      	movs	r2, #16
 800b90c:	e7b7      	b.n	800b87e <_printf_i+0xd2>
 800b90e:	064d      	lsls	r5, r1, #25
 800b910:	bf48      	it	mi
 800b912:	b29b      	uxthmi	r3, r3
 800b914:	e7ef      	b.n	800b8f6 <_printf_i+0x14a>
 800b916:	4665      	mov	r5, ip
 800b918:	fbb3 f1f2 	udiv	r1, r3, r2
 800b91c:	fb02 3311 	mls	r3, r2, r1, r3
 800b920:	5cc3      	ldrb	r3, [r0, r3]
 800b922:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b926:	460b      	mov	r3, r1
 800b928:	2900      	cmp	r1, #0
 800b92a:	d1f5      	bne.n	800b918 <_printf_i+0x16c>
 800b92c:	e7b9      	b.n	800b8a2 <_printf_i+0xf6>
 800b92e:	6813      	ldr	r3, [r2, #0]
 800b930:	6825      	ldr	r5, [r4, #0]
 800b932:	6961      	ldr	r1, [r4, #20]
 800b934:	1d18      	adds	r0, r3, #4
 800b936:	6010      	str	r0, [r2, #0]
 800b938:	0628      	lsls	r0, r5, #24
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	d501      	bpl.n	800b942 <_printf_i+0x196>
 800b93e:	6019      	str	r1, [r3, #0]
 800b940:	e002      	b.n	800b948 <_printf_i+0x19c>
 800b942:	066a      	lsls	r2, r5, #25
 800b944:	d5fb      	bpl.n	800b93e <_printf_i+0x192>
 800b946:	8019      	strh	r1, [r3, #0]
 800b948:	2300      	movs	r3, #0
 800b94a:	6123      	str	r3, [r4, #16]
 800b94c:	4665      	mov	r5, ip
 800b94e:	e7b9      	b.n	800b8c4 <_printf_i+0x118>
 800b950:	6813      	ldr	r3, [r2, #0]
 800b952:	1d19      	adds	r1, r3, #4
 800b954:	6011      	str	r1, [r2, #0]
 800b956:	681d      	ldr	r5, [r3, #0]
 800b958:	6862      	ldr	r2, [r4, #4]
 800b95a:	2100      	movs	r1, #0
 800b95c:	4628      	mov	r0, r5
 800b95e:	f7f4 fc5f 	bl	8000220 <memchr>
 800b962:	b108      	cbz	r0, 800b968 <_printf_i+0x1bc>
 800b964:	1b40      	subs	r0, r0, r5
 800b966:	6060      	str	r0, [r4, #4]
 800b968:	6863      	ldr	r3, [r4, #4]
 800b96a:	6123      	str	r3, [r4, #16]
 800b96c:	2300      	movs	r3, #0
 800b96e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b972:	e7a7      	b.n	800b8c4 <_printf_i+0x118>
 800b974:	6923      	ldr	r3, [r4, #16]
 800b976:	462a      	mov	r2, r5
 800b978:	4639      	mov	r1, r7
 800b97a:	4630      	mov	r0, r6
 800b97c:	47c0      	blx	r8
 800b97e:	3001      	adds	r0, #1
 800b980:	d0aa      	beq.n	800b8d8 <_printf_i+0x12c>
 800b982:	6823      	ldr	r3, [r4, #0]
 800b984:	079b      	lsls	r3, r3, #30
 800b986:	d413      	bmi.n	800b9b0 <_printf_i+0x204>
 800b988:	68e0      	ldr	r0, [r4, #12]
 800b98a:	9b03      	ldr	r3, [sp, #12]
 800b98c:	4298      	cmp	r0, r3
 800b98e:	bfb8      	it	lt
 800b990:	4618      	movlt	r0, r3
 800b992:	e7a3      	b.n	800b8dc <_printf_i+0x130>
 800b994:	2301      	movs	r3, #1
 800b996:	464a      	mov	r2, r9
 800b998:	4639      	mov	r1, r7
 800b99a:	4630      	mov	r0, r6
 800b99c:	47c0      	blx	r8
 800b99e:	3001      	adds	r0, #1
 800b9a0:	d09a      	beq.n	800b8d8 <_printf_i+0x12c>
 800b9a2:	3501      	adds	r5, #1
 800b9a4:	68e3      	ldr	r3, [r4, #12]
 800b9a6:	9a03      	ldr	r2, [sp, #12]
 800b9a8:	1a9b      	subs	r3, r3, r2
 800b9aa:	42ab      	cmp	r3, r5
 800b9ac:	dcf2      	bgt.n	800b994 <_printf_i+0x1e8>
 800b9ae:	e7eb      	b.n	800b988 <_printf_i+0x1dc>
 800b9b0:	2500      	movs	r5, #0
 800b9b2:	f104 0919 	add.w	r9, r4, #25
 800b9b6:	e7f5      	b.n	800b9a4 <_printf_i+0x1f8>
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1ac      	bne.n	800b916 <_printf_i+0x16a>
 800b9bc:	7803      	ldrb	r3, [r0, #0]
 800b9be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9c6:	e76c      	b.n	800b8a2 <_printf_i+0xf6>
 800b9c8:	0800c371 	.word	0x0800c371
 800b9cc:	0800c382 	.word	0x0800c382

0800b9d0 <__sread>:
 800b9d0:	b510      	push	{r4, lr}
 800b9d2:	460c      	mov	r4, r1
 800b9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d8:	f000 f894 	bl	800bb04 <_read_r>
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	bfab      	itete	ge
 800b9e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9e2:	89a3      	ldrhlt	r3, [r4, #12]
 800b9e4:	181b      	addge	r3, r3, r0
 800b9e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9ea:	bfac      	ite	ge
 800b9ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9ee:	81a3      	strhlt	r3, [r4, #12]
 800b9f0:	bd10      	pop	{r4, pc}

0800b9f2 <__swrite>:
 800b9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f6:	461f      	mov	r7, r3
 800b9f8:	898b      	ldrh	r3, [r1, #12]
 800b9fa:	05db      	lsls	r3, r3, #23
 800b9fc:	4605      	mov	r5, r0
 800b9fe:	460c      	mov	r4, r1
 800ba00:	4616      	mov	r6, r2
 800ba02:	d505      	bpl.n	800ba10 <__swrite+0x1e>
 800ba04:	2302      	movs	r3, #2
 800ba06:	2200      	movs	r2, #0
 800ba08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba0c:	f000 f868 	bl	800bae0 <_lseek_r>
 800ba10:	89a3      	ldrh	r3, [r4, #12]
 800ba12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba1a:	81a3      	strh	r3, [r4, #12]
 800ba1c:	4632      	mov	r2, r6
 800ba1e:	463b      	mov	r3, r7
 800ba20:	4628      	mov	r0, r5
 800ba22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba26:	f000 b817 	b.w	800ba58 <_write_r>

0800ba2a <__sseek>:
 800ba2a:	b510      	push	{r4, lr}
 800ba2c:	460c      	mov	r4, r1
 800ba2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba32:	f000 f855 	bl	800bae0 <_lseek_r>
 800ba36:	1c43      	adds	r3, r0, #1
 800ba38:	89a3      	ldrh	r3, [r4, #12]
 800ba3a:	bf15      	itete	ne
 800ba3c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba46:	81a3      	strheq	r3, [r4, #12]
 800ba48:	bf18      	it	ne
 800ba4a:	81a3      	strhne	r3, [r4, #12]
 800ba4c:	bd10      	pop	{r4, pc}

0800ba4e <__sclose>:
 800ba4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba52:	f000 b813 	b.w	800ba7c <_close_r>
	...

0800ba58 <_write_r>:
 800ba58:	b538      	push	{r3, r4, r5, lr}
 800ba5a:	4c07      	ldr	r4, [pc, #28]	; (800ba78 <_write_r+0x20>)
 800ba5c:	4605      	mov	r5, r0
 800ba5e:	4608      	mov	r0, r1
 800ba60:	4611      	mov	r1, r2
 800ba62:	2200      	movs	r2, #0
 800ba64:	6022      	str	r2, [r4, #0]
 800ba66:	461a      	mov	r2, r3
 800ba68:	f7f6 fb04 	bl	8002074 <_write>
 800ba6c:	1c43      	adds	r3, r0, #1
 800ba6e:	d102      	bne.n	800ba76 <_write_r+0x1e>
 800ba70:	6823      	ldr	r3, [r4, #0]
 800ba72:	b103      	cbz	r3, 800ba76 <_write_r+0x1e>
 800ba74:	602b      	str	r3, [r5, #0]
 800ba76:	bd38      	pop	{r3, r4, r5, pc}
 800ba78:	20007028 	.word	0x20007028

0800ba7c <_close_r>:
 800ba7c:	b538      	push	{r3, r4, r5, lr}
 800ba7e:	4c06      	ldr	r4, [pc, #24]	; (800ba98 <_close_r+0x1c>)
 800ba80:	2300      	movs	r3, #0
 800ba82:	4605      	mov	r5, r0
 800ba84:	4608      	mov	r0, r1
 800ba86:	6023      	str	r3, [r4, #0]
 800ba88:	f7f6 fb10 	bl	80020ac <_close>
 800ba8c:	1c43      	adds	r3, r0, #1
 800ba8e:	d102      	bne.n	800ba96 <_close_r+0x1a>
 800ba90:	6823      	ldr	r3, [r4, #0]
 800ba92:	b103      	cbz	r3, 800ba96 <_close_r+0x1a>
 800ba94:	602b      	str	r3, [r5, #0]
 800ba96:	bd38      	pop	{r3, r4, r5, pc}
 800ba98:	20007028 	.word	0x20007028

0800ba9c <_fstat_r>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	4c07      	ldr	r4, [pc, #28]	; (800babc <_fstat_r+0x20>)
 800baa0:	2300      	movs	r3, #0
 800baa2:	4605      	mov	r5, r0
 800baa4:	4608      	mov	r0, r1
 800baa6:	4611      	mov	r1, r2
 800baa8:	6023      	str	r3, [r4, #0]
 800baaa:	f7f6 fb0b 	bl	80020c4 <_fstat>
 800baae:	1c43      	adds	r3, r0, #1
 800bab0:	d102      	bne.n	800bab8 <_fstat_r+0x1c>
 800bab2:	6823      	ldr	r3, [r4, #0]
 800bab4:	b103      	cbz	r3, 800bab8 <_fstat_r+0x1c>
 800bab6:	602b      	str	r3, [r5, #0]
 800bab8:	bd38      	pop	{r3, r4, r5, pc}
 800baba:	bf00      	nop
 800babc:	20007028 	.word	0x20007028

0800bac0 <_isatty_r>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	4c06      	ldr	r4, [pc, #24]	; (800badc <_isatty_r+0x1c>)
 800bac4:	2300      	movs	r3, #0
 800bac6:	4605      	mov	r5, r0
 800bac8:	4608      	mov	r0, r1
 800baca:	6023      	str	r3, [r4, #0]
 800bacc:	f7f6 fb0a 	bl	80020e4 <_isatty>
 800bad0:	1c43      	adds	r3, r0, #1
 800bad2:	d102      	bne.n	800bada <_isatty_r+0x1a>
 800bad4:	6823      	ldr	r3, [r4, #0]
 800bad6:	b103      	cbz	r3, 800bada <_isatty_r+0x1a>
 800bad8:	602b      	str	r3, [r5, #0]
 800bada:	bd38      	pop	{r3, r4, r5, pc}
 800badc:	20007028 	.word	0x20007028

0800bae0 <_lseek_r>:
 800bae0:	b538      	push	{r3, r4, r5, lr}
 800bae2:	4c07      	ldr	r4, [pc, #28]	; (800bb00 <_lseek_r+0x20>)
 800bae4:	4605      	mov	r5, r0
 800bae6:	4608      	mov	r0, r1
 800bae8:	4611      	mov	r1, r2
 800baea:	2200      	movs	r2, #0
 800baec:	6022      	str	r2, [r4, #0]
 800baee:	461a      	mov	r2, r3
 800baf0:	f7f6 fb03 	bl	80020fa <_lseek>
 800baf4:	1c43      	adds	r3, r0, #1
 800baf6:	d102      	bne.n	800bafe <_lseek_r+0x1e>
 800baf8:	6823      	ldr	r3, [r4, #0]
 800bafa:	b103      	cbz	r3, 800bafe <_lseek_r+0x1e>
 800bafc:	602b      	str	r3, [r5, #0]
 800bafe:	bd38      	pop	{r3, r4, r5, pc}
 800bb00:	20007028 	.word	0x20007028

0800bb04 <_read_r>:
 800bb04:	b538      	push	{r3, r4, r5, lr}
 800bb06:	4c07      	ldr	r4, [pc, #28]	; (800bb24 <_read_r+0x20>)
 800bb08:	4605      	mov	r5, r0
 800bb0a:	4608      	mov	r0, r1
 800bb0c:	4611      	mov	r1, r2
 800bb0e:	2200      	movs	r2, #0
 800bb10:	6022      	str	r2, [r4, #0]
 800bb12:	461a      	mov	r2, r3
 800bb14:	f7f6 fa91 	bl	800203a <_read>
 800bb18:	1c43      	adds	r3, r0, #1
 800bb1a:	d102      	bne.n	800bb22 <_read_r+0x1e>
 800bb1c:	6823      	ldr	r3, [r4, #0]
 800bb1e:	b103      	cbz	r3, 800bb22 <_read_r+0x1e>
 800bb20:	602b      	str	r3, [r5, #0]
 800bb22:	bd38      	pop	{r3, r4, r5, pc}
 800bb24:	20007028 	.word	0x20007028

0800bb28 <_init>:
 800bb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb2a:	bf00      	nop
 800bb2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb2e:	bc08      	pop	{r3}
 800bb30:	469e      	mov	lr, r3
 800bb32:	4770      	bx	lr

0800bb34 <_fini>:
 800bb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb36:	bf00      	nop
 800bb38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb3a:	bc08      	pop	{r3}
 800bb3c:	469e      	mov	lr, r3
 800bb3e:	4770      	bx	lr
