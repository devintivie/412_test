
413_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba28  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  0800bc08  0800bc08  0001bc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1cc  0800c1cc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1cc  0800c1cc  0001c1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1d4  0800c1d4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1d4  0800c1d4  0001c1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1d8  0800c1d8  0001c1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800c1dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a758  20000078  0800c254  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a7d0  0800c254  0002a7d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021af6  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000043eb  00000000  00000000  00041b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ab0  00000000  00000000  00045f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001888  00000000  00000000  00047a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028b62  00000000  00000000  000492c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c638  00000000  00000000  00071e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e29ea  00000000  00000000  0008e462  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00170e4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000772c  00000000  00000000  00170ec8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bbf0 	.word	0x0800bbf0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	0800bbf0 	.word	0x0800bbf0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <write_PCM16_stereo_header>:

#include "fatfs.h"

/*Return 0 on success and -1 on failure*/
int write_PCM16_stereo_header(  FILE*   file_p, int32_t SampleRate, int32_t FrameCount)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
    int32_t subchunk2_size;
    int32_t chunk_size;

    size_t write_count;

    subchunk2_size  = FrameCount * NUM_CHANNELS * BITS_PER_SAMPLE/8;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	011b      	lsls	r3, r3, #4
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	da00      	bge.n	80005d6 <write_PCM16_stereo_header+0x16>
 80005d4:	3307      	adds	r3, #7
 80005d6:	10db      	asrs	r3, r3, #3
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    chunk_size      = 4 + (8 + SUBCHUNK1SIZE) + (8 + subchunk2_size);
 80005da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005dc:	3324      	adds	r3, #36	; 0x24
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48

    wav_header.ChunkID[0] = 'R';
 80005e0:	2352      	movs	r3, #82	; 0x52
 80005e2:	763b      	strb	r3, [r7, #24]
    wav_header.ChunkID[1] = 'I';
 80005e4:	2349      	movs	r3, #73	; 0x49
 80005e6:	767b      	strb	r3, [r7, #25]
    wav_header.ChunkID[2] = 'F';
 80005e8:	2346      	movs	r3, #70	; 0x46
 80005ea:	76bb      	strb	r3, [r7, #26]
    wav_header.ChunkID[3] = 'F';
 80005ec:	2346      	movs	r3, #70	; 0x46
 80005ee:	76fb      	strb	r3, [r7, #27]

    wav_header.ChunkSize = chunk_size;
 80005f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005f2:	61fb      	str	r3, [r7, #28]

    wav_header.Format[0] = 'W';
 80005f4:	2357      	movs	r3, #87	; 0x57
 80005f6:	f887 3020 	strb.w	r3, [r7, #32]
    wav_header.Format[1] = 'A';
 80005fa:	2341      	movs	r3, #65	; 0x41
 80005fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    wav_header.Format[2] = 'V';
 8000600:	2356      	movs	r3, #86	; 0x56
 8000602:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    wav_header.Format[3] = 'E';
 8000606:	2345      	movs	r3, #69	; 0x45
 8000608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    wav_header.Subchunk1ID[0] = 'f';
 800060c:	2366      	movs	r3, #102	; 0x66
 800060e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    wav_header.Subchunk1ID[1] = 'm';
 8000612:	236d      	movs	r3, #109	; 0x6d
 8000614:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    wav_header.Subchunk1ID[2] = 't';
 8000618:	2374      	movs	r3, #116	; 0x74
 800061a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    wav_header.Subchunk1ID[3] = ' ';
 800061e:	2320      	movs	r3, #32
 8000620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    wav_header.Subchunk1Size = SUBCHUNK1SIZE;
 8000624:	2310      	movs	r3, #16
 8000626:	62bb      	str	r3, [r7, #40]	; 0x28
    wav_header.AudioFormat = AUDIO_FORMAT;
 8000628:	2301      	movs	r3, #1
 800062a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    wav_header.NumChannels = NUM_CHANNELS;
 800062c:	2301      	movs	r3, #1
 800062e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    wav_header.SampleRate = SampleRate;
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
    wav_header.ByteRate = BYTE_RATE;
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <write_PCM16_stereo_header+0xcc>)
 8000636:	637b      	str	r3, [r7, #52]	; 0x34
    wav_header.BlockAlign = BLOCK_ALIGN;
 8000638:	2302      	movs	r3, #2
 800063a:	873b      	strh	r3, [r7, #56]	; 0x38
    wav_header.BitsPerSample = BITS_PER_SAMPLE;
 800063c:	2310      	movs	r3, #16
 800063e:	877b      	strh	r3, [r7, #58]	; 0x3a

    wav_header.Subchunk2ID[0] = 'd';
 8000640:	2364      	movs	r3, #100	; 0x64
 8000642:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    wav_header.Subchunk2ID[1] = 'a';
 8000646:	2361      	movs	r3, #97	; 0x61
 8000648:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    wav_header.Subchunk2ID[2] = 't';
 800064c:	2374      	movs	r3, #116	; 0x74
 800064e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    wav_header.Subchunk2ID[3] = 'a';
 8000652:	2361      	movs	r3, #97	; 0x61
 8000654:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    wav_header.Subchunk2Size = subchunk2_size;
 8000658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800065a:	643b      	str	r3, [r7, #64]	; 0x40

    UINT byteCount;
	ret = f_write(file_p, &wav_header, sizeof(wavfile_header_t), &byteCount);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	f107 0118 	add.w	r1, r7, #24
 8000664:	222c      	movs	r2, #44	; 0x2c
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	f00a f8b0 	bl	800a7cc <f_write>
 800066c:	4603      	mov	r3, r0
 800066e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ret = f_close(file_p);
 8000672:	68f8      	ldr	r0, [r7, #12]
 8000674:	f00a fabc 	bl	800abf0 <f_close>
 8000678:	4603      	mov	r3, r0
 800067a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    return ret;
 800067e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000682:	4618      	mov	r0, r3
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	00017700 	.word	0x00017700

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b092      	sub	sp, #72	; 0x48
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef ret;
	uint8_t myWrite[30] = "TEST STRING";
 8000696:	4a61      	ldr	r2, [pc, #388]	; (800081c <main+0x18c>)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	ca07      	ldmia	r2, {r0, r1, r2}
 800069e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80006a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	821a      	strh	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b2:	f001 fcc5 	bl	8002040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b6:	f000 f8d5 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ba:	f000 fb73 	bl	8000da4 <MX_GPIO_Init>
  MX_DMA_Init();
 80006be:	f000 fb51 	bl	8000d64 <MX_DMA_Init>
  MX_ADC1_Init();
 80006c2:	f000 f969 	bl	8000998 <MX_ADC1_Init>
  MX_DAC_Init();
 80006c6:	f000 f9b9 	bl	8000a3c <MX_DAC_Init>
  MX_DFSDM1_Init();
 80006ca:	f000 f9e1 	bl	8000a90 <MX_DFSDM1_Init>
  MX_FMPI2C1_Init();
 80006ce:	f000 fa45 	bl	8000b5c <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 80006d2:	f000 fd55 	bl	8001180 <MX_FSMC_Init>
  MX_I2S2_Init();
 80006d6:	f000 fa77 	bl	8000bc8 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 80006da:	f000 faa3 	bl	8000c24 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 80006de:	f000 facd 	bl	8000c7c <MX_SDIO_SD_Init>
  MX_UART10_Init();
 80006e2:	f000 faeb 	bl	8000cbc <MX_UART10_Init>
  MX_USART6_UART_Init();
 80006e6:	f000 fb13 	bl	8000d10 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80006ea:	f007 fa2d 	bl	8007b48 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2120      	movs	r1, #32
 80006f2:	484b      	ldr	r0, [pc, #300]	; (8000820 <main+0x190>)
 80006f4:	f003 fab4 	bl	8003c60 <HAL_GPIO_WritePin>


	printf("path: '%s'\r\n", SDPath);
 80006f8:	494a      	ldr	r1, [pc, #296]	; (8000824 <main+0x194>)
 80006fa:	484b      	ldr	r0, [pc, #300]	; (8000828 <main+0x198>)
 80006fc:	f00a fbd8 	bl	800aeb0 <iprintf>
//	double duration = 10; /*seconds*/


	fRet = f_mount(&myFAT, SDPath, 1);
 8000700:	2201      	movs	r2, #1
 8000702:	4948      	ldr	r1, [pc, #288]	; (8000824 <main+0x194>)
 8000704:	4849      	ldr	r0, [pc, #292]	; (800082c <main+0x19c>)
 8000706:	f009 fe4f 	bl	800a3a8 <f_mount>
 800070a:	4603      	mov	r3, r0
 800070c:	461a      	mov	r2, r3
 800070e:	4b48      	ldr	r3, [pc, #288]	; (8000830 <main+0x1a0>)
 8000710:	701a      	strb	r2, [r3, #0]


	f_open(&myFile, fname, FA_WRITE | FA_CREATE_ALWAYS);
 8000712:	4b48      	ldr	r3, [pc, #288]	; (8000834 <main+0x1a4>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	220a      	movs	r2, #10
 8000718:	4619      	mov	r1, r3
 800071a:	4847      	ldr	r0, [pc, #284]	; (8000838 <main+0x1a8>)
 800071c:	f009 fe8a 	bl	800a434 <f_open>

	write_PCM16_stereo_header(&myFile, SAMPLE_RATE, FrameCount * AUDIO_REC);
 8000720:	4b46      	ldr	r3, [pc, #280]	; (800083c <main+0x1ac>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	02db      	lsls	r3, r3, #11
 8000726:	461a      	mov	r2, r3
 8000728:	f64b 3180 	movw	r1, #48000	; 0xbb80
 800072c:	4842      	ldr	r0, [pc, #264]	; (8000838 <main+0x1a8>)
 800072e:	f7ff ff47 	bl	80005c0 <write_PCM16_stereo_header>


  ret = HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, Rec1Buf, AUDIO_REC);
 8000732:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000736:	4942      	ldr	r1, [pc, #264]	; (8000840 <main+0x1b0>)
 8000738:	4842      	ldr	r0, [pc, #264]	; (8000844 <main+0x1b4>)
 800073a:	f002 fb29 	bl	8002d90 <HAL_DFSDM_FilterRegularStart_DMA>
 800073e:	4603      	mov	r3, r0
 8000740:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if(ret != HAL_OK)
 8000744:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000748:	2b00      	cmp	r3, #0
 800074a:	d002      	beq.n	8000752 <main+0xc2>
  {
	  printf("DMA on filter not started");
 800074c:	483e      	ldr	r0, [pc, #248]	; (8000848 <main+0x1b8>)
 800074e:	f00a fbaf 	bl	800aeb0 <iprintf>
//  ret = HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm2_filter0, Rec2Buf, AUDIO_REC);
//   if(ret != HAL_OK)
//   {
// 	  printf("DMA on filter not started");
//   }
   HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2120      	movs	r1, #32
 8000756:	4832      	ldr	r0, [pc, #200]	; (8000820 <main+0x190>)
 8000758:	f003 fa82 	bl	8003c60 <HAL_GPIO_WritePin>
//	  int data = 1;
//	  HAL_DFSDM_Channel_StateTypeDef status = HAL_DFSDM_ChannelGetState(&hdfsdm1_channel1);
//	  HAL_StatusTypeDef clk_pres = HAL_DFSDM_ChannelPollForCkab(&hdfsdm1_channel1, 1000);
//	  data = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0, 1);
//	  printf("data = %ld\r\n", data);
	  if(DmaRecHalfBuffCplt == 1)
 800075c:	4b3b      	ldr	r3, [pc, #236]	; (800084c <main+0x1bc>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d116      	bne.n	8000792 <main+0x102>
	  {
		  for(int i = 0; i < AUDIO_REC/2; i++)
 8000764:	2300      	movs	r3, #0
 8000766:	647b      	str	r3, [r7, #68]	; 0x44
 8000768:	e00c      	b.n	8000784 <main+0xf4>
		  {
//			  tmpBuf[i] = Rec1Buf[i];
			  Value1Buf[i] = (uint16_t)((Rec1Buf[i] >> 8) & 0xffff);//(Rec1Buf[i] >> 8) & 0xffff;
 800076a:	4a35      	ldr	r2, [pc, #212]	; (8000840 <main+0x1b0>)
 800076c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800076e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000772:	121b      	asrs	r3, r3, #8
 8000774:	b299      	uxth	r1, r3
 8000776:	4a36      	ldr	r2, [pc, #216]	; (8000850 <main+0x1c0>)
 8000778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800077a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(int i = 0; i < AUDIO_REC/2; i++)
 800077e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000780:	3301      	adds	r3, #1
 8000782:	647b      	str	r3, [r7, #68]	; 0x44
 8000784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800078a:	dbee      	blt.n	800076a <main+0xda>
		  }
		  DmaRecHalfBuffCplt = 0;
 800078c:	4b2f      	ldr	r3, [pc, #188]	; (800084c <main+0x1bc>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
	  }
	  if(DmaRecBuffCplt == 1)
 8000792:	4b30      	ldr	r3, [pc, #192]	; (8000854 <main+0x1c4>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d1e0      	bne.n	800075c <main+0xcc>
	  {
		  printf("ooo wee\r\n");
 800079a:	482f      	ldr	r0, [pc, #188]	; (8000858 <main+0x1c8>)
 800079c:	f00a fbfc 	bl	800af98 <puts>
		  for(int i = AUDIO_REC/2; i < AUDIO_REC; i++)
 80007a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a4:	643b      	str	r3, [r7, #64]	; 0x40
 80007a6:	e00c      	b.n	80007c2 <main+0x132>
		  {
//			  tmpBuf[i] = Rec1Buf[i];
			  Value1Buf[i] = (uint16_t)((Rec1Buf[i] >> 8) & 0xffff);//Rec1Buf[i];//(Rec1Buf[i] >> 8) & 0xffff;
 80007a8:	4a25      	ldr	r2, [pc, #148]	; (8000840 <main+0x1b0>)
 80007aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b0:	121b      	asrs	r3, r3, #8
 80007b2:	b299      	uxth	r1, r3
 80007b4:	4a26      	ldr	r2, [pc, #152]	; (8000850 <main+0x1c0>)
 80007b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(int i = AUDIO_REC/2; i < AUDIO_REC; i++)
 80007bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007be:	3301      	adds	r3, #1
 80007c0:	643b      	str	r3, [r7, #64]	; 0x40
 80007c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007c8:	dbee      	blt.n	80007a8 <main+0x118>
		  }
		  DmaRecBuffCplt = 0;
 80007ca:	4b22      	ldr	r3, [pc, #136]	; (8000854 <main+0x1c4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]

		  if(pass++ <= FrameCount)
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <main+0x1cc>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	4921      	ldr	r1, [pc, #132]	; (800085c <main+0x1cc>)
 80007d8:	600a      	str	r2, [r1, #0]
 80007da:	4a18      	ldr	r2, [pc, #96]	; (800083c <main+0x1ac>)
 80007dc:	6812      	ldr	r2, [r2, #0]
 80007de:	4293      	cmp	r3, r2
 80007e0:	dc10      	bgt.n	8000804 <main+0x174>
		  {
			  f_open(&myFile, fname, FA_WRITE | FA_OPEN_APPEND);// | FA_CREATE_ALWAYS);
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <main+0x1a4>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2232      	movs	r2, #50	; 0x32
 80007e8:	4619      	mov	r1, r3
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <main+0x1a8>)
 80007ec:	f009 fe22 	bl	800a434 <f_open>
				f_write(&myFile, Value1Buf, AUDIO_REC, &byteCount);
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <main+0x1d0>)
 80007f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007f6:	4916      	ldr	r1, [pc, #88]	; (8000850 <main+0x1c0>)
 80007f8:	480f      	ldr	r0, [pc, #60]	; (8000838 <main+0x1a8>)
 80007fa:	f009 ffe7 	bl	800a7cc <f_write>
				f_close(&myFile);
 80007fe:	480e      	ldr	r0, [pc, #56]	; (8000838 <main+0x1a8>)
 8000800:	f00a f9f6 	bl	800abf0 <f_close>
		  }
		  if(pass >= FrameCount)
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <main+0x1cc>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <main+0x1ac>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	429a      	cmp	r2, r3
 800080e:	dba5      	blt.n	800075c <main+0xcc>
		  {
			  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	2120      	movs	r1, #32
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <main+0x190>)
 8000816:	f003 fa23 	bl	8003c60 <HAL_GPIO_WritePin>
	  if(DmaRecHalfBuffCplt == 1)
 800081a:	e79f      	b.n	800075c <main+0xcc>
 800081c:	0800bc58 	.word	0x0800bc58
 8000820:	40020800 	.word	0x40020800
 8000824:	20008760 	.word	0x20008760
 8000828:	0800bc20 	.word	0x0800bc20
 800082c:	2000668c 	.word	0x2000668c
 8000830:	20000096 	.word	0x20000096
 8000834:	20000004 	.word	0x20000004
 8000838:	20003358 	.word	0x20003358
 800083c:	20000000 	.word	0x20000000
 8000840:	20004388 	.word	0x20004388
 8000844:	20006388 	.word	0x20006388
 8000848:	0800bc30 	.word	0x0800bc30
 800084c:	20000094 	.word	0x20000094
 8000850:	20000320 	.word	0x20000320
 8000854:	20000095 	.word	0x20000095
 8000858:	0800bc4c 	.word	0x0800bc4c
 800085c:	20000098 	.word	0x20000098
 8000860:	200063dc 	.word	0x200063dc

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b0aa      	sub	sp, #168	; 0xa8
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800086e:	2234      	movs	r2, #52	; 0x34
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f00a fa6c 	bl	800ad50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	2258      	movs	r2, #88	; 0x58
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f00a fa5d 	bl	800ad50 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b3d      	ldr	r3, [pc, #244]	; (8000990 <SystemClock_Config+0x12c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a3c      	ldr	r2, [pc, #240]	; (8000990 <SystemClock_Config+0x12c>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b3a      	ldr	r3, [pc, #232]	; (8000990 <SystemClock_Config+0x12c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b37      	ldr	r3, [pc, #220]	; (8000994 <SystemClock_Config+0x130>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a36      	ldr	r2, [pc, #216]	; (8000994 <SystemClock_Config+0x130>)
 80008bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c0:	6013      	str	r3, [r2, #0]
 80008c2:	4b34      	ldr	r3, [pc, #208]	; (8000994 <SystemClock_Config+0x130>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ce:	2301      	movs	r3, #1
 80008d0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008d2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008d6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d8:	2302      	movs	r3, #2
 80008da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008e6:	2319      	movs	r3, #25
 80008e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008ec:	23c0      	movs	r3, #192	; 0xc0
 80008ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80008f8:	2308      	movs	r3, #8
 80008fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008fe:	2302      	movs	r3, #2
 8000900:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000908:	4618      	mov	r0, r3
 800090a:	f004 fcef 	bl	80052ec <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000914:	f000 fd06 	bl	8001324 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000918:	230f      	movs	r3, #15
 800091a:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	2302      	movs	r3, #2
 800091e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000928:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800092e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000932:	2103      	movs	r1, #3
 8000934:	4618      	mov	r0, r3
 8000936:	f003 ff31 	bl	800479c <HAL_RCC_ClockConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000940:	f000 fcf0 	bl	8001324 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 8000944:	f240 1371 	movw	r3, #369	; 0x171
 8000948:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800094a:	2332      	movs	r3, #50	; 0x32
 800094c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 800094e:	230c      	movs	r3, #12
 8000950:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000952:	2302      	movs	r3, #2
 8000954:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800095a:	2300      	movs	r3, #0
 800095c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 800095e:	2300      	movs	r3, #0
 8000960:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000962:	2300      	movs	r3, #0
 8000964:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8000966:	2300      	movs	r3, #0
 8000968:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 800096e:	2300      	movs	r3, #0
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	4618      	mov	r0, r3
 8000978:	f004 f8dc 	bl	8004b34 <HAL_RCCEx_PeriphCLKConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0x122>
  {
    Error_Handler();
 8000982:	f000 fccf 	bl	8001324 <Error_Handler>
  }
}
 8000986:	bf00      	nop
 8000988:	37a8      	adds	r7, #168	; 0xa8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40007000 	.word	0x40007000

08000998 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800099e:	463b      	mov	r3, r7
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <MX_ADC1_Init+0x98>)
 80009ac:	4a21      	ldr	r2, [pc, #132]	; (8000a34 <MX_ADC1_Init+0x9c>)
 80009ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009b0:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <MX_ADC1_Init+0x98>)
 80009b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_ADC1_Init+0x98>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <MX_ADC1_Init+0x98>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_ADC1_Init+0x98>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <MX_ADC1_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_ADC1_Init+0x98>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_ADC1_Init+0x98>)
 80009da:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <MX_ADC1_Init+0xa0>)
 80009dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_ADC1_Init+0x98>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_ADC1_Init+0x98>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_ADC1_Init+0x98>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_ADC1_Init+0x98>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009f8:	480d      	ldr	r0, [pc, #52]	; (8000a30 <MX_ADC1_Init+0x98>)
 80009fa:	f001 fbb5 	bl	8002168 <HAL_ADC_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a04:	f000 fc8e 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a08:	230a      	movs	r3, #10
 8000a0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a14:	463b      	mov	r3, r7
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_ADC1_Init+0x98>)
 8000a1a:	f001 fbe9 	bl	80021f0 <HAL_ADC_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a24:	f000 fc7e 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20006470 	.word	0x20006470
 8000a34:	40012000 	.word	0x40012000
 8000a38:	0f000001 	.word	0x0f000001

08000a3c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a42:	463b      	mov	r3, r7
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_DAC_Init+0x4c>)
 8000a4c:	4a0f      	ldr	r2, [pc, #60]	; (8000a8c <MX_DAC_Init+0x50>)
 8000a4e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <MX_DAC_Init+0x4c>)
 8000a52:	f001 ff0c 	bl	800286e <HAL_DAC_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000a5c:	f000 fc62 	bl	8001324 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4806      	ldr	r0, [pc, #24]	; (8000a88 <MX_DAC_Init+0x4c>)
 8000a70:	f001 ff1f 	bl	80028b2 <HAL_DAC_ConfigChannel>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000a7a:	f000 fc53 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20006518 	.word	0x20006518
 8000a8c:	40007400 	.word	0x40007400

08000a90 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000a94:	4b2c      	ldr	r3, [pc, #176]	; (8000b48 <MX_DFSDM1_Init+0xb8>)
 8000a96:	4a2d      	ldr	r2, [pc, #180]	; (8000b4c <MX_DFSDM1_Init+0xbc>)
 8000a98:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000a9a:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <MX_DFSDM1_Init+0xb8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000aa0:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <MX_DFSDM1_Init+0xb8>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000aa6:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <MX_DFSDM1_Init+0xb8>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000aac:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <MX_DFSDM1_Init+0xb8>)
 8000aae:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000ab2:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 50;
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <MX_DFSDM1_Init+0xb8>)
 8000ab6:	2232      	movs	r2, #50	; 0x32
 8000ab8:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000aba:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <MX_DFSDM1_Init+0xb8>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000ac0:	4821      	ldr	r0, [pc, #132]	; (8000b48 <MX_DFSDM1_Init+0xb8>)
 8000ac2:	f002 f833 	bl	8002b2c <HAL_DFSDM_FilterInit>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000acc:	f000 fc2a 	bl	8001324 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <MX_DFSDM1_Init+0xc0>)
 8000ad2:	4a20      	ldr	r2, [pc, #128]	; (8000b54 <MX_DFSDM1_Init+0xc4>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <MX_DFSDM1_Init+0xc0>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <MX_DFSDM1_Init+0xc0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 40;
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <MX_DFSDM1_Init+0xc0>)
 8000ae4:	2228      	movs	r2, #40	; 0x28
 8000ae6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <MX_DFSDM1_Init+0xc0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_DFSDM1_Init+0xc0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_DFSDM1_Init+0xc0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_DFSDM1_Init+0xc0>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <MX_DFSDM1_Init+0xc0>)
 8000b02:	2204      	movs	r2, #4
 8000b04:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_DFSDM1_Init+0xc0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_DFSDM1_Init+0xc0>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_DFSDM1_Init+0xc0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x0;
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <MX_DFSDM1_Init+0xc0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000b1e:	480c      	ldr	r0, [pc, #48]	; (8000b50 <MX_DFSDM1_Init+0xc0>)
 8000b20:	f001 ff14 	bl	800294c <HAL_DFSDM_ChannelInit>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000b2a:	f000 fbfb 	bl	8001324 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4909      	ldr	r1, [pc, #36]	; (8000b58 <MX_DFSDM1_Init+0xc8>)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_DFSDM1_Init+0xb8>)
 8000b34:	f002 f8e6 	bl	8002d04 <HAL_DFSDM_FilterConfigRegChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000b3e:	f000 fbf1 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20006388 	.word	0x20006388
 8000b4c:	40016100 	.word	0x40016100
 8000b50:	20001320 	.word	0x20001320
 8000b54:	40016020 	.word	0x40016020
 8000b58:	00010002 	.word	0x00010002

08000b5c <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <MX_FMPI2C1_Init+0x60>)
 8000b62:	4a17      	ldr	r2, [pc, #92]	; (8000bc0 <MX_FMPI2C1_Init+0x64>)
 8000b64:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x20303E5D;
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <MX_FMPI2C1_Init+0x60>)
 8000b68:	4a16      	ldr	r2, [pc, #88]	; (8000bc4 <MX_FMPI2C1_Init+0x68>)
 8000b6a:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_FMPI2C1_Init+0x60>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <MX_FMPI2C1_Init+0x60>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000b78:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <MX_FMPI2C1_Init+0x60>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_FMPI2C1_Init+0x60>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <MX_FMPI2C1_Init+0x60>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_FMPI2C1_Init+0x60>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <MX_FMPI2C1_Init+0x60>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000b96:	4809      	ldr	r0, [pc, #36]	; (8000bbc <MX_FMPI2C1_Init+0x60>)
 8000b98:	f002 fdde 	bl	8003758 <HAL_FMPI2C_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000ba2:	f000 fbbf 	bl	8001324 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <MX_FMPI2C1_Init+0x60>)
 8000baa:	f002 fe64 	bl	8003876 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000bb4:	f000 fbb6 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	2000652c 	.word	0x2000652c
 8000bc0:	40006000 	.word	0x40006000
 8000bc4:	20303e5d 	.word	0x20303e5d

08000bc8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <MX_I2S2_Init+0x54>)
 8000bce:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <MX_I2S2_Init+0x58>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_I2S2_Init+0x54>)
 8000bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <MX_I2S2_Init+0x54>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_I2S2_Init+0x54>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <MX_I2S2_Init+0x54>)
 8000be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bec:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <MX_I2S2_Init+0x54>)
 8000bf0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000bf4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_I2S2_Init+0x54>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <MX_I2S2_Init+0x54>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_I2S2_Init+0x54>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <MX_I2S2_Init+0x54>)
 8000c0a:	f003 f843 	bl	8003c94 <HAL_I2S_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000c14:	f000 fb86 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200086c4 	.word	0x200086c4
 8000c20:	40003800 	.word	0x40003800

08000c24 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_QUADSPI_Init+0x50>)
 8000c2a:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <MX_QUADSPI_Init+0x54>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_QUADSPI_Init+0x50>)
 8000c30:	22ff      	movs	r2, #255	; 0xff
 8000c32:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_QUADSPI_Init+0x50>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_QUADSPI_Init+0x50>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_QUADSPI_Init+0x50>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_QUADSPI_Init+0x50>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_QUADSPI_Init+0x50>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MX_QUADSPI_Init+0x50>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_QUADSPI_Init+0x50>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_QUADSPI_Init+0x50>)
 8000c60:	f003 fcda 	bl	8004618 <HAL_QSPI_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000c6a:	f000 fb5b 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2000870c 	.word	0x2000870c
 8000c78:	a0001000 	.word	0xa0001000

08000c7c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_SDIO_SD_Init+0x38>)
 8000c82:	4a0d      	ldr	r2, [pc, #52]	; (8000cb8 <MX_SDIO_SD_Init+0x3c>)
 8000c84:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_SDIO_SD_Init+0x38>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_SDIO_SD_Init+0x38>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_SDIO_SD_Init+0x38>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_SDIO_SD_Init+0x38>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <MX_SDIO_SD_Init+0x38>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <MX_SDIO_SD_Init+0x38>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	200065c8 	.word	0x200065c8
 8000cb8:	40012c00 	.word	0x40012c00

08000cbc <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_UART10_Init+0x4c>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <MX_UART10_Init+0x50>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <MX_UART10_Init+0x4c>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_UART10_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_UART10_Init+0x4c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <MX_UART10_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_UART10_Init+0x4c>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <MX_UART10_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_UART10_Init+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_UART10_Init+0x4c>)
 8000cf4:	f005 fd1c 	bl	8006730 <HAL_UART_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000cfe:	f000 fb11 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200063e0 	.word	0x200063e0
 8000d0c:	40011c00 	.word	0x40011c00

08000d10 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_USART6_UART_Init+0x4c>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <MX_USART6_UART_Init+0x50>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <MX_USART6_UART_Init+0x4c>)
 8000d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d20:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_USART6_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_USART6_UART_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_USART6_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_USART6_UART_Init+0x4c>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_USART6_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_USART6_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_USART6_UART_Init+0x4c>)
 8000d48:	f005 fcf2 	bl	8006730 <HAL_UART_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d52:	f000 fae7 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000664c 	.word	0x2000664c
 8000d60:	40011400 	.word	0x40011400

08000d64 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_DMA_Init+0x3c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <MX_DMA_Init+0x3c>)
 8000d74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_DMA_Init+0x3c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2038      	movs	r0, #56	; 0x38
 8000d8c:	f001 fd39 	bl	8002802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d90:	2038      	movs	r0, #56	; 0x38
 8000d92:	f001 fd52 	bl	800283a <HAL_NVIC_EnableIRQ>

}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800

08000da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08e      	sub	sp, #56	; 0x38
 8000da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
 8000dbe:	4bb1      	ldr	r3, [pc, #708]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4ab0      	ldr	r2, [pc, #704]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000dc4:	f043 0310 	orr.w	r3, r3, #16
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4bae      	ldr	r3, [pc, #696]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0310 	and.w	r3, r3, #16
 8000dd2:	623b      	str	r3, [r7, #32]
 8000dd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	4baa      	ldr	r3, [pc, #680]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4aa9      	ldr	r2, [pc, #676]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4ba7      	ldr	r3, [pc, #668]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	61fb      	str	r3, [r7, #28]
 8000df0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
 8000df6:	4ba3      	ldr	r3, [pc, #652]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4aa2      	ldr	r2, [pc, #648]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000dfc:	f043 0320 	orr.w	r3, r3, #32
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4ba0      	ldr	r3, [pc, #640]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0320 	and.w	r3, r3, #32
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	4b9c      	ldr	r3, [pc, #624]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a9b      	ldr	r2, [pc, #620]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b99      	ldr	r3, [pc, #612]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b95      	ldr	r3, [pc, #596]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a94      	ldr	r2, [pc, #592]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b92      	ldr	r3, [pc, #584]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b8e      	ldr	r3, [pc, #568]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a8d      	ldr	r2, [pc, #564]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b8b      	ldr	r3, [pc, #556]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	4b87      	ldr	r3, [pc, #540]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a86      	ldr	r2, [pc, #536]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b84      	ldr	r3, [pc, #528]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	4b80      	ldr	r3, [pc, #512]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a7f      	ldr	r2, [pc, #508]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b7d      	ldr	r3, [pc, #500]	; (8001084 <MX_GPIO_Init+0x2e0>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2138      	movs	r1, #56	; 0x38
 8000e9e:	487a      	ldr	r0, [pc, #488]	; (8001088 <MX_GPIO_Init+0x2e4>)
 8000ea0:	f002 fede 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2120      	movs	r1, #32
 8000ea8:	4878      	ldr	r0, [pc, #480]	; (800108c <MX_GPIO_Init+0x2e8>)
 8000eaa:	f002 fed9 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000eb4:	4876      	ldr	r0, [pc, #472]	; (8001090 <MX_GPIO_Init+0x2ec>)
 8000eb6:	f002 fed3 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000ec0:	4874      	ldr	r0, [pc, #464]	; (8001094 <MX_GPIO_Init+0x2f0>)
 8000ec2:	f002 fecd 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000ec6:	2338      	movs	r3, #56	; 0x38
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eda:	4619      	mov	r1, r3
 8000edc:	486a      	ldr	r0, [pc, #424]	; (8001088 <MX_GPIO_Init+0x2e4>)
 8000ede:	f002 fd15 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000ee2:	2340      	movs	r3, #64	; 0x40
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	4862      	ldr	r0, [pc, #392]	; (8001088 <MX_GPIO_Init+0x2e4>)
 8000efe:	f002 fd05 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f14:	2302      	movs	r3, #2
 8000f16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	485e      	ldr	r0, [pc, #376]	; (8001098 <MX_GPIO_Init+0x2f4>)
 8000f20:	f002 fcf4 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000f24:	2302      	movs	r3, #2
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f28:	4b5c      	ldr	r3, [pc, #368]	; (800109c <MX_GPIO_Init+0x2f8>)
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f34:	4619      	mov	r1, r3
 8000f36:	4855      	ldr	r0, [pc, #340]	; (800108c <MX_GPIO_Init+0x2e8>)
 8000f38:	f002 fce8 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f40:	4b56      	ldr	r3, [pc, #344]	; (800109c <MX_GPIO_Init+0x2f8>)
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4854      	ldr	r0, [pc, #336]	; (80010a0 <MX_GPIO_Init+0x2fc>)
 8000f50:	f002 fcdc 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_DATIN1_Pin */
  GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8000f64:	2307      	movs	r3, #7
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	484c      	ldr	r0, [pc, #304]	; (80010a0 <MX_GPIO_Init+0x2fc>)
 8000f70:	f002 fccc 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000f74:	2320      	movs	r3, #32
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4840      	ldr	r0, [pc, #256]	; (800108c <MX_GPIO_Init+0x2e8>)
 8000f8c:	f002 fcbe 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000f90:	2301      	movs	r3, #1
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4839      	ldr	r0, [pc, #228]	; (8001090 <MX_GPIO_Init+0x2ec>)
 8000fac:	f002 fcae 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000fb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4834      	ldr	r0, [pc, #208]	; (8001098 <MX_GPIO_Init+0x2f4>)
 8000fc6:	f002 fca1 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000fca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd0:	2312      	movs	r3, #18
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	482a      	ldr	r0, [pc, #168]	; (8001090 <MX_GPIO_Init+0x2ec>)
 8000fe8:	f002 fc90 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000ffe:	2307      	movs	r3, #7
 8001000:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8001002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001006:	4619      	mov	r1, r3
 8001008:	4821      	ldr	r0, [pc, #132]	; (8001090 <MX_GPIO_Init+0x2ec>)
 800100a:	f002 fc7f 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 800100e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001024:	4619      	mov	r1, r3
 8001026:	481a      	ldr	r0, [pc, #104]	; (8001090 <MX_GPIO_Init+0x2ec>)
 8001028:	f002 fc70 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 800102c:	f248 0380 	movw	r3, #32896	; 0x8080
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_GPIO_Init+0x2f8>)
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800103a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103e:	4619      	mov	r1, r3
 8001040:	4814      	ldr	r0, [pc, #80]	; (8001094 <MX_GPIO_Init+0x2f0>)
 8001042:	f002 fc63 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 8001046:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	4619      	mov	r1, r3
 800105e:	480d      	ldr	r0, [pc, #52]	; (8001094 <MX_GPIO_Init+0x2f0>)
 8001060:	f002 fc54 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001064:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001072:	2303      	movs	r3, #3
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001076:	230a      	movs	r3, #10
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4619      	mov	r1, r3
 8001080:	e010      	b.n	80010a4 <MX_GPIO_Init+0x300>
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	40021000 	.word	0x40021000
 800108c:	40020800 	.word	0x40020800
 8001090:	40020400 	.word	0x40020400
 8001094:	40021800 	.word	0x40021800
 8001098:	40021400 	.word	0x40021400
 800109c:	10110000 	.word	0x10110000
 80010a0:	40020000 	.word	0x40020000
 80010a4:	4832      	ldr	r0, [pc, #200]	; (8001170 <MX_GPIO_Init+0x3cc>)
 80010a6:	f002 fc31 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 80010aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010bc:	2301      	movs	r3, #1
 80010be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c4:	4619      	mov	r1, r3
 80010c6:	482a      	ldr	r0, [pc, #168]	; (8001170 <MX_GPIO_Init+0x3cc>)
 80010c8:	f002 fc20 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 80010cc:	2304      	movs	r3, #4
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 80010dc:	2303      	movs	r3, #3
 80010de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e4:	4619      	mov	r1, r3
 80010e6:	4823      	ldr	r0, [pc, #140]	; (8001174 <MX_GPIO_Init+0x3d0>)
 80010e8:	f002 fc10 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80010ec:	2330      	movs	r3, #48	; 0x30
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010fc:	2306      	movs	r3, #6
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001104:	4619      	mov	r1, r3
 8001106:	481c      	ldr	r0, [pc, #112]	; (8001178 <MX_GPIO_Init+0x3d4>)
 8001108:	f002 fc00 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800110c:	2340      	movs	r3, #64	; 0x40
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <MX_GPIO_Init+0x3d8>)
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111c:	4619      	mov	r1, r3
 800111e:	4816      	ldr	r0, [pc, #88]	; (8001178 <MX_GPIO_Init+0x3d4>)
 8001120:	f002 fbf4 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_DATIN7_Pin */
  GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001134:	2306      	movs	r3, #6
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	4619      	mov	r1, r3
 800113e:	480e      	ldr	r0, [pc, #56]	; (8001178 <MX_GPIO_Init+0x3d4>)
 8001140:	f002 fbe4 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001156:	2302      	movs	r3, #2
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	4619      	mov	r1, r3
 8001160:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_GPIO_Init+0x3d4>)
 8001162:	f002 fbd3 	bl	800390c <HAL_GPIO_Init>

}
 8001166:	bf00      	nop
 8001168:	3738      	adds	r7, #56	; 0x38
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40020000 	.word	0x40020000
 8001174:	40020c00 	.word	0x40020c00
 8001178:	40020400 	.word	0x40020400
 800117c:	10110000 	.word	0x10110000

08001180 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
 8001194:	615a      	str	r2, [r3, #20]
 8001196:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001198:	4b4f      	ldr	r3, [pc, #316]	; (80012d8 <MX_FSMC_Init+0x158>)
 800119a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800119e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80011a0:	4b4d      	ldr	r3, [pc, #308]	; (80012d8 <MX_FSMC_Init+0x158>)
 80011a2:	4a4e      	ldr	r2, [pc, #312]	; (80012dc <MX_FSMC_Init+0x15c>)
 80011a4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80011a6:	4b4c      	ldr	r3, [pc, #304]	; (80012d8 <MX_FSMC_Init+0x158>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80011ac:	4b4a      	ldr	r3, [pc, #296]	; (80012d8 <MX_FSMC_Init+0x158>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80011b2:	4b49      	ldr	r3, [pc, #292]	; (80012d8 <MX_FSMC_Init+0x158>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80011b8:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <MX_FSMC_Init+0x158>)
 80011ba:	2210      	movs	r2, #16
 80011bc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80011be:	4b46      	ldr	r3, [pc, #280]	; (80012d8 <MX_FSMC_Init+0x158>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80011c4:	4b44      	ldr	r3, [pc, #272]	; (80012d8 <MX_FSMC_Init+0x158>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80011ca:	4b43      	ldr	r3, [pc, #268]	; (80012d8 <MX_FSMC_Init+0x158>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 80011d0:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <MX_FSMC_Init+0x158>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80011d6:	4b40      	ldr	r3, [pc, #256]	; (80012d8 <MX_FSMC_Init+0x158>)
 80011d8:	2200      	movs	r2, #0
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80011dc:	4b3e      	ldr	r3, [pc, #248]	; (80012d8 <MX_FSMC_Init+0x158>)
 80011de:	2200      	movs	r2, #0
 80011e0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80011e2:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <MX_FSMC_Init+0x158>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80011e8:	4b3b      	ldr	r3, [pc, #236]	; (80012d8 <MX_FSMC_Init+0x158>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80011ee:	4b3a      	ldr	r3, [pc, #232]	; (80012d8 <MX_FSMC_Init+0x158>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80011f4:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <MX_FSMC_Init+0x158>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80011fa:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <MX_FSMC_Init+0x158>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001200:	230f      	movs	r3, #15
 8001202:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001204:	230f      	movs	r3, #15
 8001206:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001208:	23ff      	movs	r3, #255	; 0xff
 800120a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800120c:	230f      	movs	r3, #15
 800120e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001210:	2310      	movs	r3, #16
 8001212:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001214:	2311      	movs	r3, #17
 8001216:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	4619      	mov	r1, r3
 8001222:	482d      	ldr	r0, [pc, #180]	; (80012d8 <MX_FSMC_Init+0x158>)
 8001224:	f005 fa40 	bl	80066a8 <HAL_SRAM_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 800122e:	f000 f879 	bl	8001324 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8001232:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <MX_FSMC_Init+0x160>)
 8001234:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001238:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800123a:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <MX_FSMC_Init+0x160>)
 800123c:	4a27      	ldr	r2, [pc, #156]	; (80012dc <MX_FSMC_Init+0x15c>)
 800123e:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8001240:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <MX_FSMC_Init+0x160>)
 8001242:	2204      	movs	r2, #4
 8001244:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001246:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <MX_FSMC_Init+0x160>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800124c:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <MX_FSMC_Init+0x160>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001252:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <MX_FSMC_Init+0x160>)
 8001254:	2210      	movs	r2, #16
 8001256:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001258:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <MX_FSMC_Init+0x160>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <MX_FSMC_Init+0x160>)
 8001260:	2200      	movs	r2, #0
 8001262:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001264:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <MX_FSMC_Init+0x160>)
 8001266:	2200      	movs	r2, #0
 8001268:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <MX_FSMC_Init+0x160>)
 800126c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001270:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <MX_FSMC_Init+0x160>)
 8001274:	2200      	movs	r2, #0
 8001276:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MX_FSMC_Init+0x160>)
 800127a:	2200      	movs	r2, #0
 800127c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <MX_FSMC_Init+0x160>)
 8001280:	2200      	movs	r2, #0
 8001282:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_FSMC_Init+0x160>)
 8001286:	2200      	movs	r2, #0
 8001288:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <MX_FSMC_Init+0x160>)
 800128c:	2200      	movs	r2, #0
 800128e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <MX_FSMC_Init+0x160>)
 8001292:	2200      	movs	r2, #0
 8001294:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_FSMC_Init+0x160>)
 8001298:	2200      	movs	r2, #0
 800129a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800129c:	230f      	movs	r3, #15
 800129e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80012a0:	230f      	movs	r3, #15
 80012a2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80012a4:	23ff      	movs	r3, #255	; 0xff
 80012a6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80012a8:	230f      	movs	r3, #15
 80012aa:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80012ac:	2310      	movs	r3, #16
 80012ae:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80012b0:	2311      	movs	r3, #17
 80012b2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2200      	movs	r2, #0
 80012bc:	4619      	mov	r1, r3
 80012be:	4808      	ldr	r0, [pc, #32]	; (80012e0 <MX_FSMC_Init+0x160>)
 80012c0:	f005 f9f2 	bl	80066a8 <HAL_SRAM_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_FSMC_Init+0x14e>
  {
    Error_Handler( );
 80012ca:	f000 f82b 	bl	8001324 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80012ce:	bf00      	nop
 80012d0:	3720      	adds	r7, #32
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20006420 	.word	0x20006420
 80012dc:	a0000104 	.word	0xa0000104
 80012e0:	20006578 	.word	0x20006578

080012e4 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

	DmaRecHalfBuffCplt=1;
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]



}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000094 	.word	0x20000094

08001304 <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	DmaRecBuffCplt=1;
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]

}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000095 	.word	0x20000095

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <HAL_MspInit+0x4c>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	4a0f      	ldr	r2, [pc, #60]	; (8001380 <HAL_MspInit+0x4c>)
 8001344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001348:	6453      	str	r3, [r2, #68]	; 0x44
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <HAL_MspInit+0x4c>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_MspInit+0x4c>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	4a08      	ldr	r2, [pc, #32]	; (8001380 <HAL_MspInit+0x4c>)
 8001360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001364:	6413      	str	r3, [r2, #64]	; 0x40
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_MspInit+0x4c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800

08001384 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08c      	sub	sp, #48	; 0x30
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a31      	ldr	r2, [pc, #196]	; (8001468 <HAL_ADC_MspInit+0xe4>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d15b      	bne.n	800145e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
 80013aa:	4b30      	ldr	r3, [pc, #192]	; (800146c <HAL_ADC_MspInit+0xe8>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	4a2f      	ldr	r2, [pc, #188]	; (800146c <HAL_ADC_MspInit+0xe8>)
 80013b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b4:	6453      	str	r3, [r2, #68]	; 0x44
 80013b6:	4b2d      	ldr	r3, [pc, #180]	; (800146c <HAL_ADC_MspInit+0xe8>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013be:	61bb      	str	r3, [r7, #24]
 80013c0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	4b29      	ldr	r3, [pc, #164]	; (800146c <HAL_ADC_MspInit+0xe8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a28      	ldr	r2, [pc, #160]	; (800146c <HAL_ADC_MspInit+0xe8>)
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <HAL_ADC_MspInit+0xe8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	4b22      	ldr	r3, [pc, #136]	; (800146c <HAL_ADC_MspInit+0xe8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a21      	ldr	r2, [pc, #132]	; (800146c <HAL_ADC_MspInit+0xe8>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <HAL_ADC_MspInit+0xe8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_ADC_MspInit+0xe8>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a1a      	ldr	r2, [pc, #104]	; (800146c <HAL_ADC_MspInit+0xe8>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <HAL_ADC_MspInit+0xe8>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 8001416:	2311      	movs	r3, #17
 8001418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141a:	2303      	movs	r3, #3
 800141c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	4811      	ldr	r0, [pc, #68]	; (8001470 <HAL_ADC_MspInit+0xec>)
 800142a:	f002 fa6f 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 800142e:	2326      	movs	r3, #38	; 0x26
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001432:	2303      	movs	r3, #3
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	480c      	ldr	r0, [pc, #48]	; (8001474 <HAL_ADC_MspInit+0xf0>)
 8001442:	f002 fa63 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 8001446:	2302      	movs	r3, #2
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800144a:	2303      	movs	r3, #3
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	4807      	ldr	r0, [pc, #28]	; (8001478 <HAL_ADC_MspInit+0xf4>)
 800145a:	f002 fa57 	bl	800390c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800145e:	bf00      	nop
 8001460:	3730      	adds	r7, #48	; 0x30
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40012000 	.word	0x40012000
 800146c:	40023800 	.word	0x40023800
 8001470:	40020800 	.word	0x40020800
 8001474:	40020000 	.word	0x40020000
 8001478:	40020400 	.word	0x40020400

0800147c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a17      	ldr	r2, [pc, #92]	; (80014f8 <HAL_DAC_MspInit+0x7c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d127      	bne.n	80014ee <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <HAL_DAC_MspInit+0x80>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a15      	ldr	r2, [pc, #84]	; (80014fc <HAL_DAC_MspInit+0x80>)
 80014a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <HAL_DAC_MspInit+0x80>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_DAC_MspInit+0x80>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <HAL_DAC_MspInit+0x80>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_DAC_MspInit+0x80>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 80014d6:	2310      	movs	r3, #16
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014da:	2303      	movs	r3, #3
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <HAL_DAC_MspInit+0x84>)
 80014ea:	f002 fa0f 	bl	800390c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40007400 	.word	0x40007400
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020000 	.word	0x40020000

08001504 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_FILTER_INSTANCE(hdfsdm_filter->Instance))&&(DFSDM1_Init == 0))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a4f      	ldr	r2, [pc, #316]	; (8001660 <HAL_DFSDM_FilterMspInit+0x15c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d004      	beq.n	8001530 <HAL_DFSDM_FilterMspInit+0x2c>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a4e      	ldr	r2, [pc, #312]	; (8001664 <HAL_DFSDM_FilterMspInit+0x160>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d157      	bne.n	80015e0 <HAL_DFSDM_FilterMspInit+0xdc>
 8001530:	4b4d      	ldr	r3, [pc, #308]	; (8001668 <HAL_DFSDM_FilterMspInit+0x164>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d153      	bne.n	80015e0 <HAL_DFSDM_FilterMspInit+0xdc>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001538:	4b4c      	ldr	r3, [pc, #304]	; (800166c <HAL_DFSDM_FilterMspInit+0x168>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	4a4b      	ldr	r2, [pc, #300]	; (800166c <HAL_DFSDM_FilterMspInit+0x168>)
 8001540:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001542:	4b4a      	ldr	r3, [pc, #296]	; (800166c <HAL_DFSDM_FilterMspInit+0x168>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d10d      	bne.n	8001566 <HAL_DFSDM_FilterMspInit+0x62>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	4b48      	ldr	r3, [pc, #288]	; (8001670 <HAL_DFSDM_FilterMspInit+0x16c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	4a47      	ldr	r2, [pc, #284]	; (8001670 <HAL_DFSDM_FilterMspInit+0x16c>)
 8001554:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001558:	6453      	str	r3, [r2, #68]	; 0x44
 800155a:	4b45      	ldr	r3, [pc, #276]	; (8001670 <HAL_DFSDM_FilterMspInit+0x16c>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b41      	ldr	r3, [pc, #260]	; (8001670 <HAL_DFSDM_FilterMspInit+0x16c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a40      	ldr	r2, [pc, #256]	; (8001670 <HAL_DFSDM_FilterMspInit+0x16c>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b3e      	ldr	r3, [pc, #248]	; (8001670 <HAL_DFSDM_FilterMspInit+0x16c>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	4b3a      	ldr	r3, [pc, #232]	; (8001670 <HAL_DFSDM_FilterMspInit+0x16c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a39      	ldr	r2, [pc, #228]	; (8001670 <HAL_DFSDM_FilterMspInit+0x16c>)
 800158c:	f043 0308 	orr.w	r3, r3, #8
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b37      	ldr	r3, [pc, #220]	; (8001670 <HAL_DFSDM_FilterMspInit+0x16c>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 800159e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80015b0:	2306      	movs	r3, #6
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	482e      	ldr	r0, [pc, #184]	; (8001674 <HAL_DFSDM_FilterMspInit+0x170>)
 80015bc:	f002 f9a6 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 80015c0:	2340      	movs	r3, #64	; 0x40
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80015d0:	2306      	movs	r3, #6
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4827      	ldr	r0, [pc, #156]	; (8001678 <HAL_DFSDM_FilterMspInit+0x174>)
 80015dc:	f002 f996 	bl	800390c <HAL_GPIO_Init>
  /* USER CODE END DFSDM1_MspInit 1 */
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a1e      	ldr	r2, [pc, #120]	; (8001660 <HAL_DFSDM_FilterMspInit+0x15c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d136      	bne.n	8001658 <HAL_DFSDM_FilterMspInit+0x154>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80015ea:	4b24      	ldr	r3, [pc, #144]	; (800167c <HAL_DFSDM_FilterMspInit+0x178>)
 80015ec:	4a24      	ldr	r2, [pc, #144]	; (8001680 <HAL_DFSDM_FilterMspInit+0x17c>)
 80015ee:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_7;
 80015f0:	4b22      	ldr	r3, [pc, #136]	; (800167c <HAL_DFSDM_FilterMspInit+0x178>)
 80015f2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80015f6:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f8:	4b20      	ldr	r3, [pc, #128]	; (800167c <HAL_DFSDM_FilterMspInit+0x178>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <HAL_DFSDM_FilterMspInit+0x178>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001604:	4b1d      	ldr	r3, [pc, #116]	; (800167c <HAL_DFSDM_FilterMspInit+0x178>)
 8001606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800160a:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <HAL_DFSDM_FilterMspInit+0x178>)
 800160e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001612:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_DFSDM_FilterMspInit+0x178>)
 8001616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800161a:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <HAL_DFSDM_FilterMspInit+0x178>)
 800161e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001622:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_DFSDM_FilterMspInit+0x178>)
 8001626:	2200      	movs	r2, #0
 8001628:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <HAL_DFSDM_FilterMspInit+0x178>)
 800162c:	2200      	movs	r2, #0
 800162e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001630:	4812      	ldr	r0, [pc, #72]	; (800167c <HAL_DFSDM_FilterMspInit+0x178>)
 8001632:	f001 fd23 	bl	800307c <HAL_DMA_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <HAL_DFSDM_FilterMspInit+0x13c>
    {
      Error_Handler();
 800163c:	f7ff fe72 	bl	8001324 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a0e      	ldr	r2, [pc, #56]	; (800167c <HAL_DFSDM_FilterMspInit+0x178>)
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c
 8001646:	4a0d      	ldr	r2, [pc, #52]	; (800167c <HAL_DFSDM_FilterMspInit+0x178>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a0b      	ldr	r2, [pc, #44]	; (800167c <HAL_DFSDM_FilterMspInit+0x178>)
 8001650:	629a      	str	r2, [r3, #40]	; 0x28
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <HAL_DFSDM_FilterMspInit+0x178>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	; 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40016100 	.word	0x40016100
 8001664:	40016180 	.word	0x40016180
 8001668:	200000a0 	.word	0x200000a0
 800166c:	2000009c 	.word	0x2000009c
 8001670:	40023800 	.word	0x40023800
 8001674:	40020000 	.word	0x40020000
 8001678:	40020c00 	.word	0x40020c00
 800167c:	200064b8 	.word	0x200064b8
 8001680:	40026410 	.word	0x40026410

08001684 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a36      	ldr	r2, [pc, #216]	; (800177c <HAL_DFSDM_ChannelMspInit+0xf8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00e      	beq.n	80016c4 <HAL_DFSDM_ChannelMspInit+0x40>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a35      	ldr	r2, [pc, #212]	; (8001780 <HAL_DFSDM_ChannelMspInit+0xfc>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d009      	beq.n	80016c4 <HAL_DFSDM_ChannelMspInit+0x40>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a33      	ldr	r2, [pc, #204]	; (8001784 <HAL_DFSDM_ChannelMspInit+0x100>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d004      	beq.n	80016c4 <HAL_DFSDM_ChannelMspInit+0x40>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a32      	ldr	r2, [pc, #200]	; (8001788 <HAL_DFSDM_ChannelMspInit+0x104>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d157      	bne.n	8001774 <HAL_DFSDM_ChannelMspInit+0xf0>
 80016c4:	4b31      	ldr	r3, [pc, #196]	; (800178c <HAL_DFSDM_ChannelMspInit+0x108>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d153      	bne.n	8001774 <HAL_DFSDM_ChannelMspInit+0xf0>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80016cc:	4b30      	ldr	r3, [pc, #192]	; (8001790 <HAL_DFSDM_ChannelMspInit+0x10c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	4a2f      	ldr	r2, [pc, #188]	; (8001790 <HAL_DFSDM_ChannelMspInit+0x10c>)
 80016d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80016d6:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <HAL_DFSDM_ChannelMspInit+0x10c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d10d      	bne.n	80016fa <HAL_DFSDM_ChannelMspInit+0x76>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	4b2c      	ldr	r3, [pc, #176]	; (8001794 <HAL_DFSDM_ChannelMspInit+0x110>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	4a2b      	ldr	r2, [pc, #172]	; (8001794 <HAL_DFSDM_ChannelMspInit+0x110>)
 80016e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ec:	6453      	str	r3, [r2, #68]	; 0x44
 80016ee:	4b29      	ldr	r3, [pc, #164]	; (8001794 <HAL_DFSDM_ChannelMspInit+0x110>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <HAL_DFSDM_ChannelMspInit+0x110>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a24      	ldr	r2, [pc, #144]	; (8001794 <HAL_DFSDM_ChannelMspInit+0x110>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b22      	ldr	r3, [pc, #136]	; (8001794 <HAL_DFSDM_ChannelMspInit+0x110>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <HAL_DFSDM_ChannelMspInit+0x110>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <HAL_DFSDM_ChannelMspInit+0x110>)
 8001720:	f043 0308 	orr.w	r3, r3, #8
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_DFSDM_ChannelMspInit+0x110>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001744:	2306      	movs	r3, #6
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4619      	mov	r1, r3
 800174e:	4812      	ldr	r0, [pc, #72]	; (8001798 <HAL_DFSDM_ChannelMspInit+0x114>)
 8001750:	f002 f8dc 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001754:	2340      	movs	r3, #64	; 0x40
 8001756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001764:	2306      	movs	r3, #6
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	480b      	ldr	r0, [pc, #44]	; (800179c <HAL_DFSDM_ChannelMspInit+0x118>)
 8001770:	f002 f8cc 	bl	800390c <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8001774:	bf00      	nop
 8001776:	3728      	adds	r7, #40	; 0x28
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40016000 	.word	0x40016000
 8001780:	40016020 	.word	0x40016020
 8001784:	40016040 	.word	0x40016040
 8001788:	40016060 	.word	0x40016060
 800178c:	200000a0 	.word	0x200000a0
 8001790:	2000009c 	.word	0x2000009c
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	40020c00 	.word	0x40020c00

080017a0 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a19      	ldr	r2, [pc, #100]	; (8001824 <HAL_FMPI2C_MspInit+0x84>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d12b      	bne.n	800181a <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_FMPI2C_MspInit+0x88>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a17      	ldr	r2, [pc, #92]	; (8001828 <HAL_FMPI2C_MspInit+0x88>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_FMPI2C_MspInit+0x88>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration    
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 80017de:	23c0      	movs	r3, #192	; 0xc0
 80017e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017e2:	2312      	movs	r3, #18
 80017e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e6:	2301      	movs	r3, #1
 80017e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 80017ee:	2304      	movs	r3, #4
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	480c      	ldr	r0, [pc, #48]	; (800182c <HAL_FMPI2C_MspInit+0x8c>)
 80017fa:	f002 f887 	bl	800390c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_FMPI2C_MspInit+0x88>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a08      	ldr	r2, [pc, #32]	; (8001828 <HAL_FMPI2C_MspInit+0x88>)
 8001808:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_FMPI2C_MspInit+0x88>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 800181a:	bf00      	nop
 800181c:	3728      	adds	r7, #40	; 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40006000 	.word	0x40006000
 8001828:	40023800 	.word	0x40023800
 800182c:	40020800 	.word	0x40020800

08001830 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	; 0x30
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 031c 	add.w	r3, r7, #28
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a4f      	ldr	r2, [pc, #316]	; (800198c <HAL_I2S_MspInit+0x15c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	f040 8097 	bne.w	8001982 <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	4b4d      	ldr	r3, [pc, #308]	; (8001990 <HAL_I2S_MspInit+0x160>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	4a4c      	ldr	r2, [pc, #304]	; (8001990 <HAL_I2S_MspInit+0x160>)
 800185e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001862:	6413      	str	r3, [r2, #64]	; 0x40
 8001864:	4b4a      	ldr	r3, [pc, #296]	; (8001990 <HAL_I2S_MspInit+0x160>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186c:	61bb      	str	r3, [r7, #24]
 800186e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	4b46      	ldr	r3, [pc, #280]	; (8001990 <HAL_I2S_MspInit+0x160>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	4a45      	ldr	r2, [pc, #276]	; (8001990 <HAL_I2S_MspInit+0x160>)
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	6313      	str	r3, [r2, #48]	; 0x30
 8001880:	4b43      	ldr	r3, [pc, #268]	; (8001990 <HAL_I2S_MspInit+0x160>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188c:	2300      	movs	r3, #0
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <HAL_I2S_MspInit+0x160>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	4a3e      	ldr	r2, [pc, #248]	; (8001990 <HAL_I2S_MspInit+0x160>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6313      	str	r3, [r2, #48]	; 0x30
 800189c:	4b3c      	ldr	r3, [pc, #240]	; (8001990 <HAL_I2S_MspInit+0x160>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	4b38      	ldr	r3, [pc, #224]	; (8001990 <HAL_I2S_MspInit+0x160>)
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	4a37      	ldr	r2, [pc, #220]	; (8001990 <HAL_I2S_MspInit+0x160>)
 80018b2:	f043 0308 	orr.w	r3, r3, #8
 80018b6:	6313      	str	r3, [r2, #48]	; 0x30
 80018b8:	4b35      	ldr	r3, [pc, #212]	; (8001990 <HAL_I2S_MspInit+0x160>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	4b31      	ldr	r3, [pc, #196]	; (8001990 <HAL_I2S_MspInit+0x160>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	4a30      	ldr	r2, [pc, #192]	; (8001990 <HAL_I2S_MspInit+0x160>)
 80018ce:	f043 0302 	orr.w	r3, r3, #2
 80018d2:	6313      	str	r3, [r2, #48]	; 0x30
 80018d4:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <HAL_I2S_MspInit+0x160>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 80018e0:	2304      	movs	r3, #4
 80018e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 80018f0:	2306      	movs	r3, #6
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	4619      	mov	r1, r3
 80018fa:	4826      	ldr	r0, [pc, #152]	; (8001994 <HAL_I2S_MspInit+0x164>)
 80018fc:	f002 f806 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8001900:	2308      	movs	r3, #8
 8001902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001910:	2305      	movs	r3, #5
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	4619      	mov	r1, r3
 800191a:	481e      	ldr	r0, [pc, #120]	; (8001994 <HAL_I2S_MspInit+0x164>)
 800191c:	f001 fff6 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001920:	2308      	movs	r3, #8
 8001922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001930:	2305      	movs	r3, #5
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	4619      	mov	r1, r3
 800193a:	4817      	ldr	r0, [pc, #92]	; (8001998 <HAL_I2S_MspInit+0x168>)
 800193c:	f001 ffe6 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8001940:	2308      	movs	r3, #8
 8001942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001950:	2305      	movs	r3, #5
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	4619      	mov	r1, r3
 800195a:	4810      	ldr	r0, [pc, #64]	; (800199c <HAL_I2S_MspInit+0x16c>)
 800195c:	f001 ffd6 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001972:	2305      	movs	r3, #5
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	4619      	mov	r1, r3
 800197c:	4808      	ldr	r0, [pc, #32]	; (80019a0 <HAL_I2S_MspInit+0x170>)
 800197e:	f001 ffc5 	bl	800390c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001982:	bf00      	nop
 8001984:	3730      	adds	r7, #48	; 0x30
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40003800 	.word	0x40003800
 8001990:	40023800 	.word	0x40023800
 8001994:	40020800 	.word	0x40020800
 8001998:	40020000 	.word	0x40020000
 800199c:	40020c00 	.word	0x40020c00
 80019a0:	40020400 	.word	0x40020400

080019a4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08e      	sub	sp, #56	; 0x38
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a56      	ldr	r2, [pc, #344]	; (8001b1c <HAL_QSPI_MspInit+0x178>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	f040 80a6 	bne.w	8001b14 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
 80019cc:	4b54      	ldr	r3, [pc, #336]	; (8001b20 <HAL_QSPI_MspInit+0x17c>)
 80019ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d0:	4a53      	ldr	r2, [pc, #332]	; (8001b20 <HAL_QSPI_MspInit+0x17c>)
 80019d2:	f043 0302 	orr.w	r3, r3, #2
 80019d6:	6393      	str	r3, [r2, #56]	; 0x38
 80019d8:	4b51      	ldr	r3, [pc, #324]	; (8001b20 <HAL_QSPI_MspInit+0x17c>)
 80019da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	623b      	str	r3, [r7, #32]
 80019e2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
 80019e8:	4b4d      	ldr	r3, [pc, #308]	; (8001b20 <HAL_QSPI_MspInit+0x17c>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	4a4c      	ldr	r2, [pc, #304]	; (8001b20 <HAL_QSPI_MspInit+0x17c>)
 80019ee:	f043 0310 	orr.w	r3, r3, #16
 80019f2:	6313      	str	r3, [r2, #48]	; 0x30
 80019f4:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <HAL_QSPI_MspInit+0x17c>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	61fb      	str	r3, [r7, #28]
 80019fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a00:	2300      	movs	r3, #0
 8001a02:	61bb      	str	r3, [r7, #24]
 8001a04:	4b46      	ldr	r3, [pc, #280]	; (8001b20 <HAL_QSPI_MspInit+0x17c>)
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	4a45      	ldr	r2, [pc, #276]	; (8001b20 <HAL_QSPI_MspInit+0x17c>)
 8001a0a:	f043 0320 	orr.w	r3, r3, #32
 8001a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a10:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <HAL_QSPI_MspInit+0x17c>)
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a14:	f003 0320 	and.w	r3, r3, #32
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	4b3f      	ldr	r3, [pc, #252]	; (8001b20 <HAL_QSPI_MspInit+0x17c>)
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	4a3e      	ldr	r2, [pc, #248]	; (8001b20 <HAL_QSPI_MspInit+0x17c>)
 8001a26:	f043 0302 	orr.w	r3, r3, #2
 8001a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2c:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <HAL_QSPI_MspInit+0x17c>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <HAL_QSPI_MspInit+0x17c>)
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	4a37      	ldr	r2, [pc, #220]	; (8001b20 <HAL_QSPI_MspInit+0x17c>)
 8001a42:	f043 0308 	orr.w	r3, r3, #8
 8001a46:	6313      	str	r3, [r2, #48]	; 0x30
 8001a48:	4b35      	ldr	r3, [pc, #212]	; (8001b20 <HAL_QSPI_MspInit+0x17c>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	4b31      	ldr	r3, [pc, #196]	; (8001b20 <HAL_QSPI_MspInit+0x17c>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	4a30      	ldr	r2, [pc, #192]	; (8001b20 <HAL_QSPI_MspInit+0x17c>)
 8001a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a62:	6313      	str	r3, [r2, #48]	; 0x30
 8001a64:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <HAL_QSPI_MspInit+0x17c>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001a70:	2304      	movs	r3, #4
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001a80:	2309      	movs	r3, #9
 8001a82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4826      	ldr	r0, [pc, #152]	; (8001b24 <HAL_QSPI_MspInit+0x180>)
 8001a8c:	f001 ff3e 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001a90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001aa2:	230a      	movs	r3, #10
 8001aa4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aaa:	4619      	mov	r1, r3
 8001aac:	481e      	ldr	r0, [pc, #120]	; (8001b28 <HAL_QSPI_MspInit+0x184>)
 8001aae:	f001 ff2d 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001ac2:	2309      	movs	r3, #9
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aca:	4619      	mov	r1, r3
 8001acc:	4817      	ldr	r0, [pc, #92]	; (8001b2c <HAL_QSPI_MspInit+0x188>)
 8001ace:	f001 ff1d 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001ae4:	2309      	movs	r3, #9
 8001ae6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aec:	4619      	mov	r1, r3
 8001aee:	4810      	ldr	r0, [pc, #64]	; (8001b30 <HAL_QSPI_MspInit+0x18c>)
 8001af0:	f001 ff0c 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001af4:	2340      	movs	r3, #64	; 0x40
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b04:	230a      	movs	r3, #10
 8001b06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4809      	ldr	r0, [pc, #36]	; (8001b34 <HAL_QSPI_MspInit+0x190>)
 8001b10:	f001 fefc 	bl	800390c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001b14:	bf00      	nop
 8001b16:	3738      	adds	r7, #56	; 0x38
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	a0001000 	.word	0xa0001000
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40021400 	.word	0x40021400
 8001b2c:	40020400 	.word	0x40020400
 8001b30:	40020c00 	.word	0x40020c00
 8001b34:	40021800 	.word	0x40021800

08001b38 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a31      	ldr	r2, [pc, #196]	; (8001c1c <HAL_SD_MspInit+0xe4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d15b      	bne.n	8001c12 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	4b30      	ldr	r3, [pc, #192]	; (8001c20 <HAL_SD_MspInit+0xe8>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	4a2f      	ldr	r2, [pc, #188]	; (8001c20 <HAL_SD_MspInit+0xe8>)
 8001b64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b68:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <HAL_SD_MspInit+0xe8>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <HAL_SD_MspInit+0xe8>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a28      	ldr	r2, [pc, #160]	; (8001c20 <HAL_SD_MspInit+0xe8>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <HAL_SD_MspInit+0xe8>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <HAL_SD_MspInit+0xe8>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a21      	ldr	r2, [pc, #132]	; (8001c20 <HAL_SD_MspInit+0xe8>)
 8001b9c:	f043 0304 	orr.w	r3, r3, #4
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <HAL_SD_MspInit+0xe8>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK 
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001bae:	2340      	movs	r3, #64	; 0x40
 8001bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001bbe:	230c      	movs	r3, #12
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4816      	ldr	r0, [pc, #88]	; (8001c24 <HAL_SD_MspInit+0xec>)
 8001bca:	f001 fe9f 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin;
 8001bce:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001be0:	230c      	movs	r3, #12
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	480f      	ldr	r0, [pc, #60]	; (8001c28 <HAL_SD_MspInit+0xf0>)
 8001bec:	f001 fe8e 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_CLK_Pin;
 8001bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001c02:	230c      	movs	r3, #12
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CLK_GPIO_Port, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4806      	ldr	r0, [pc, #24]	; (8001c28 <HAL_SD_MspInit+0xf0>)
 8001c0e:	f001 fe7d 	bl	800390c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001c12:	bf00      	nop
 8001c14:	3728      	adds	r7, #40	; 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40012c00 	.word	0x40012c00
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40020000 	.word	0x40020000
 8001c28:	40020800 	.word	0x40020800

08001c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08c      	sub	sp, #48	; 0x30
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a33      	ldr	r2, [pc, #204]	; (8001d18 <HAL_UART_MspInit+0xec>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d12d      	bne.n	8001caa <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <HAL_UART_MspInit+0xf0>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a31      	ldr	r2, [pc, #196]	; (8001d1c <HAL_UART_MspInit+0xf0>)
 8001c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <HAL_UART_MspInit+0xf0>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c66:	61bb      	str	r3, [r7, #24]
 8001c68:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <HAL_UART_MspInit+0xf0>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a2a      	ldr	r2, [pc, #168]	; (8001d1c <HAL_UART_MspInit+0xf0>)
 8001c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <HAL_UART_MspInit+0xf0>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration    
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX 
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8001c86:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001c98:	230b      	movs	r3, #11
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	481f      	ldr	r0, [pc, #124]	; (8001d20 <HAL_UART_MspInit+0xf4>)
 8001ca4:	f001 fe32 	bl	800390c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ca8:	e031      	b.n	8001d0e <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a1d      	ldr	r2, [pc, #116]	; (8001d24 <HAL_UART_MspInit+0xf8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d12c      	bne.n	8001d0e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_UART_MspInit+0xf0>)
 8001cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbc:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <HAL_UART_MspInit+0xf0>)
 8001cbe:	f043 0320 	orr.w	r3, r3, #32
 8001cc2:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc4:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_UART_MspInit+0xf0>)
 8001cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc8:	f003 0320 	and.w	r3, r3, #32
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_UART_MspInit+0xf0>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	4a10      	ldr	r2, [pc, #64]	; (8001d1c <HAL_UART_MspInit+0xf0>)
 8001cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cde:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce0:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <HAL_UART_MspInit+0xf0>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001cec:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001cfe:	2308      	movs	r3, #8
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	4805      	ldr	r0, [pc, #20]	; (8001d20 <HAL_UART_MspInit+0xf4>)
 8001d0a:	f001 fdff 	bl	800390c <HAL_GPIO_Init>
}
 8001d0e:	bf00      	nop
 8001d10:	3730      	adds	r7, #48	; 0x30
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40011c00 	.word	0x40011c00
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40021800 	.word	0x40021800
 8001d24:	40011400 	.word	0x40011400

08001d28 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001d3c:	4b2c      	ldr	r3, [pc, #176]	; (8001df0 <HAL_FSMC_MspInit+0xc8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d151      	bne.n	8001de8 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001d44:	4b2a      	ldr	r3, [pc, #168]	; (8001df0 <HAL_FSMC_MspInit+0xc8>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <HAL_FSMC_MspInit+0xcc>)
 8001d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d52:	4a28      	ldr	r2, [pc, #160]	; (8001df4 <HAL_FSMC_MspInit+0xcc>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6393      	str	r3, [r2, #56]	; 0x38
 8001d5a:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <HAL_FSMC_MspInit+0xcc>)
 8001d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin 
 8001d66:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001d6a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin 
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d74:	2303      	movs	r3, #3
 8001d76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001d78:	230c      	movs	r3, #12
 8001d7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	4619      	mov	r1, r3
 8001d80:	481d      	ldr	r0, [pc, #116]	; (8001df8 <HAL_FSMC_MspInit+0xd0>)
 8001d82:	f001 fdc3 	bl	800390c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin 
 8001d86:	f240 433f 	movw	r3, #1087	; 0x43f
 8001d8a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001d98:	230c      	movs	r3, #12
 8001d9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4816      	ldr	r0, [pc, #88]	; (8001dfc <HAL_FSMC_MspInit+0xd4>)
 8001da2:	f001 fdb3 	bl	800390c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin 
 8001da6:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001daa:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin 
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001db8:	230c      	movs	r3, #12
 8001dba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	480f      	ldr	r0, [pc, #60]	; (8001e00 <HAL_FSMC_MspInit+0xd8>)
 8001dc2:	f001 fda3 	bl	800390c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin 
 8001dc6:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001dca:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin 
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001dd8:	230c      	movs	r3, #12
 8001dda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	4619      	mov	r1, r3
 8001de0:	4808      	ldr	r0, [pc, #32]	; (8001e04 <HAL_FSMC_MspInit+0xdc>)
 8001de2:	f001 fd93 	bl	800390c <HAL_GPIO_Init>
 8001de6:	e000      	b.n	8001dea <HAL_FSMC_MspInit+0xc2>
    return;
 8001de8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	200000a4 	.word	0x200000a4
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40021400 	.word	0x40021400
 8001dfc:	40021800 	.word	0x40021800
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40020c00 	.word	0x40020c00

08001e08 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001e10:	f7ff ff8a 	bl	8001d28 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2e:	e7fe      	b.n	8001e2e <HardFault_Handler+0x4>

08001e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <MemManage_Handler+0x4>

08001e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <BusFault_Handler+0x4>

08001e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <UsageFault_Handler+0x4>

08001e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e70:	f000 f938 	bl	80020e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <DMA2_Stream0_IRQHandler+0x10>)
 8001e7e:	f001 fa03 	bl	8003288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200064b8 	.word	0x200064b8

08001e8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	e00a      	b.n	8001eb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e9e:	f3af 8000 	nop.w
 8001ea2:	4601      	mov	r1, r0
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	b2ca      	uxtb	r2, r1
 8001eac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	dbf0      	blt.n	8001e9e <_read+0x12>
	}

return len;
 8001ebc:	687b      	ldr	r3, [r7, #4]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	e009      	b.n	8001eec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	60ba      	str	r2, [r7, #8]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dbf1      	blt.n	8001ed8 <_write+0x12>
	}
	return len;
 8001ef4:	687b      	ldr	r3, [r7, #4]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_close>:

int _close(int file)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
	return -1;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f26:	605a      	str	r2, [r3, #4]
	return 0;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <_isatty>:

int _isatty(int file)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
	return 0;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <_sbrk+0x50>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d102      	bne.n	8001f7e <_sbrk+0x16>
		heap_end = &end;
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <_sbrk+0x50>)
 8001f7a:	4a10      	ldr	r2, [pc, #64]	; (8001fbc <_sbrk+0x54>)
 8001f7c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <_sbrk+0x50>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <_sbrk+0x50>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	466a      	mov	r2, sp
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d907      	bls.n	8001fa2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f92:	f008 feb3 	bl	800acfc <__errno>
 8001f96:	4602      	mov	r2, r0
 8001f98:	230c      	movs	r3, #12
 8001f9a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa0:	e006      	b.n	8001fb0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001fa2:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <_sbrk+0x50>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	4a03      	ldr	r2, [pc, #12]	; (8001fb8 <_sbrk+0x50>)
 8001fac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001fae:	68fb      	ldr	r3, [r7, #12]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	200000a8 	.word	0x200000a8
 8001fbc:	2000a7d0 	.word	0x2000a7d0

08001fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <SystemInit+0x28>)
 8001fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fca:	4a07      	ldr	r2, [pc, #28]	; (8001fe8 <SystemInit+0x28>)
 8001fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <SystemInit+0x28>)
 8001fd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fda:	609a      	str	r2, [r3, #8]
#endif
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002024 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001ff0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ff2:	e003      	b.n	8001ffc <LoopCopyDataInit>

08001ff4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ff6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ff8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ffa:	3104      	adds	r1, #4

08001ffc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ffc:	480b      	ldr	r0, [pc, #44]	; (800202c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002000:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002002:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002004:	d3f6      	bcc.n	8001ff4 <CopyDataInit>
  ldr  r2, =_sbss
 8002006:	4a0b      	ldr	r2, [pc, #44]	; (8002034 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002008:	e002      	b.n	8002010 <LoopFillZerobss>

0800200a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800200a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800200c:	f842 3b04 	str.w	r3, [r2], #4

08002010 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002012:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002014:	d3f9      	bcc.n	800200a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002016:	f7ff ffd3 	bl	8001fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800201a:	f008 fe75 	bl	800ad08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800201e:	f7fe fb37 	bl	8000690 <main>
  bx  lr    
 8002022:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002024:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002028:	0800c1dc 	.word	0x0800c1dc
  ldr  r0, =_sdata
 800202c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002030:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002034:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002038:	2000a7d0 	.word	0x2000a7d0

0800203c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800203c:	e7fe      	b.n	800203c <ADC_IRQHandler>
	...

08002040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002044:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <HAL_Init+0x40>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0d      	ldr	r2, [pc, #52]	; (8002080 <HAL_Init+0x40>)
 800204a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800204e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_Init+0x40>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <HAL_Init+0x40>)
 8002056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800205a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <HAL_Init+0x40>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a07      	ldr	r2, [pc, #28]	; (8002080 <HAL_Init+0x40>)
 8002062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002068:	2003      	movs	r0, #3
 800206a:	f000 fbbf 	bl	80027ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800206e:	2000      	movs	r0, #0
 8002070:	f000 f808 	bl	8002084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002074:	f7ff f95e 	bl	8001334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40023c00 	.word	0x40023c00

08002084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800208c:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <HAL_InitTick+0x54>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_InitTick+0x58>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4619      	mov	r1, r3
 8002096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800209a:	fbb3 f3f1 	udiv	r3, r3, r1
 800209e:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fbd7 	bl	8002856 <HAL_SYSTICK_Config>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e00e      	b.n	80020d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b0f      	cmp	r3, #15
 80020b6:	d80a      	bhi.n	80020ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b8:	2200      	movs	r2, #0
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	f000 fb9f 	bl	8002802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c4:	4a06      	ldr	r2, [pc, #24]	; (80020e0 <HAL_InitTick+0x5c>)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e000      	b.n	80020d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000008 	.word	0x20000008
 80020dc:	20000010 	.word	0x20000010
 80020e0:	2000000c 	.word	0x2000000c

080020e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_IncTick+0x20>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_IncTick+0x24>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	4a04      	ldr	r2, [pc, #16]	; (8002108 <HAL_IncTick+0x24>)
 80020f6:	6013      	str	r3, [r2, #0]
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20000010 	.word	0x20000010
 8002108:	20008758 	.word	0x20008758

0800210c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return uwTick;
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_GetTick+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20008758 	.word	0x20008758

08002124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800212c:	f7ff ffee 	bl	800210c <HAL_GetTick>
 8002130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d005      	beq.n	800214a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_Delay+0x40>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4413      	add	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800214a:	bf00      	nop
 800214c:	f7ff ffde 	bl	800210c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	429a      	cmp	r2, r3
 800215a:	d8f7      	bhi.n	800214c <HAL_Delay+0x28>
  {
  }
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000010 	.word	0x20000010

08002168 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e033      	b.n	80021e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff f8fc 	bl	8001384 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d118      	bne.n	80021d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021ae:	f023 0302 	bic.w	r3, r3, #2
 80021b2:	f043 0202 	orr.w	r2, r3, #2
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f94a 	bl	8002454 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f023 0303 	bic.w	r3, r3, #3
 80021ce:	f043 0201 	orr.w	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	641a      	str	r2, [r3, #64]	; 0x40
 80021d6:	e001      	b.n	80021dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_ADC_ConfigChannel+0x1c>
 8002208:	2302      	movs	r3, #2
 800220a:	e113      	b.n	8002434 <HAL_ADC_ConfigChannel+0x244>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b09      	cmp	r3, #9
 800221a:	d925      	bls.n	8002268 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68d9      	ldr	r1, [r3, #12]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	3b1e      	subs	r3, #30
 8002232:	2207      	movs	r2, #7
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43da      	mvns	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	400a      	ands	r2, r1
 8002240:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68d9      	ldr	r1, [r3, #12]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	b29b      	uxth	r3, r3
 8002252:	4618      	mov	r0, r3
 8002254:	4603      	mov	r3, r0
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4403      	add	r3, r0
 800225a:	3b1e      	subs	r3, #30
 800225c:	409a      	lsls	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	e022      	b.n	80022ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6919      	ldr	r1, [r3, #16]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	461a      	mov	r2, r3
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	2207      	movs	r2, #7
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	400a      	ands	r2, r1
 800228a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6919      	ldr	r1, [r3, #16]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	b29b      	uxth	r3, r3
 800229c:	4618      	mov	r0, r3
 800229e:	4603      	mov	r3, r0
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4403      	add	r3, r0
 80022a4:	409a      	lsls	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b06      	cmp	r3, #6
 80022b4:	d824      	bhi.n	8002300 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	3b05      	subs	r3, #5
 80022c8:	221f      	movs	r2, #31
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43da      	mvns	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	400a      	ands	r2, r1
 80022d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	4618      	mov	r0, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	3b05      	subs	r3, #5
 80022f2:	fa00 f203 	lsl.w	r2, r0, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	635a      	str	r2, [r3, #52]	; 0x34
 80022fe:	e04c      	b.n	800239a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b0c      	cmp	r3, #12
 8002306:	d824      	bhi.n	8002352 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	3b23      	subs	r3, #35	; 0x23
 800231a:	221f      	movs	r2, #31
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43da      	mvns	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	400a      	ands	r2, r1
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	b29b      	uxth	r3, r3
 8002336:	4618      	mov	r0, r3
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	3b23      	subs	r3, #35	; 0x23
 8002344:	fa00 f203 	lsl.w	r2, r0, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
 8002350:	e023      	b.n	800239a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	3b41      	subs	r3, #65	; 0x41
 8002364:	221f      	movs	r2, #31
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43da      	mvns	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	400a      	ands	r2, r1
 8002372:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	b29b      	uxth	r3, r3
 8002380:	4618      	mov	r0, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	3b41      	subs	r3, #65	; 0x41
 800238e:	fa00 f203 	lsl.w	r2, r0, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800239a:	4b29      	ldr	r3, [pc, #164]	; (8002440 <HAL_ADC_ConfigChannel+0x250>)
 800239c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a28      	ldr	r2, [pc, #160]	; (8002444 <HAL_ADC_ConfigChannel+0x254>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d10f      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x1d8>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b12      	cmp	r3, #18
 80023ae:	d10b      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a1d      	ldr	r2, [pc, #116]	; (8002444 <HAL_ADC_ConfigChannel+0x254>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d12b      	bne.n	800242a <HAL_ADC_ConfigChannel+0x23a>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a1c      	ldr	r2, [pc, #112]	; (8002448 <HAL_ADC_ConfigChannel+0x258>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d003      	beq.n	80023e4 <HAL_ADC_ConfigChannel+0x1f4>
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b11      	cmp	r3, #17
 80023e2:	d122      	bne.n	800242a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a11      	ldr	r2, [pc, #68]	; (8002448 <HAL_ADC_ConfigChannel+0x258>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d111      	bne.n	800242a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_ADC_ConfigChannel+0x25c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a11      	ldr	r2, [pc, #68]	; (8002450 <HAL_ADC_ConfigChannel+0x260>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	0c9a      	lsrs	r2, r3, #18
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800241c:	e002      	b.n	8002424 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	3b01      	subs	r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f9      	bne.n	800241e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	40012300 	.word	0x40012300
 8002444:	40012000 	.word	0x40012000
 8002448:	10000012 	.word	0x10000012
 800244c:	20000008 	.word	0x20000008
 8002450:	431bde83 	.word	0x431bde83

08002454 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800245c:	4b79      	ldr	r3, [pc, #484]	; (8002644 <ADC_Init+0x1f0>)
 800245e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	431a      	orrs	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002488:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6859      	ldr	r1, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	021a      	lsls	r2, r3, #8
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6899      	ldr	r1, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	4a58      	ldr	r2, [pc, #352]	; (8002648 <ADC_Init+0x1f4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d022      	beq.n	8002532 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6899      	ldr	r1, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800251c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6899      	ldr	r1, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	e00f      	b.n	8002552 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002540:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002550:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0202 	bic.w	r2, r2, #2
 8002560:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6899      	ldr	r1, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7e1b      	ldrb	r3, [r3, #24]
 800256c:	005a      	lsls	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01b      	beq.n	80025b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800258e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800259e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6859      	ldr	r1, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	3b01      	subs	r3, #1
 80025ac:	035a      	lsls	r2, r3, #13
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	e007      	b.n	80025c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	051a      	lsls	r2, r3, #20
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6899      	ldr	r1, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800260a:	025a      	lsls	r2, r3, #9
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002622:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6899      	ldr	r1, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	029a      	lsls	r2, r3, #10
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	609a      	str	r2, [r3, #8]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	40012300 	.word	0x40012300
 8002648:	0f000001 	.word	0x0f000001

0800264c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002668:	4013      	ands	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800267c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267e:	4a04      	ldr	r2, [pc, #16]	; (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	60d3      	str	r3, [r2, #12]
}
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002698:	4b04      	ldr	r3, [pc, #16]	; (80026ac <__NVIC_GetPriorityGrouping+0x18>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	f003 0307 	and.w	r3, r3, #7
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	db0b      	blt.n	80026da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	f003 021f 	and.w	r2, r3, #31
 80026c8:	4907      	ldr	r1, [pc, #28]	; (80026e8 <__NVIC_EnableIRQ+0x38>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	2001      	movs	r0, #1
 80026d2:	fa00 f202 	lsl.w	r2, r0, r2
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000e100 	.word	0xe000e100

080026ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	db0a      	blt.n	8002716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	490c      	ldr	r1, [pc, #48]	; (8002738 <__NVIC_SetPriority+0x4c>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	0112      	lsls	r2, r2, #4
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	440b      	add	r3, r1
 8002710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002714:	e00a      	b.n	800272c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4908      	ldr	r1, [pc, #32]	; (800273c <__NVIC_SetPriority+0x50>)
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	3b04      	subs	r3, #4
 8002724:	0112      	lsls	r2, r2, #4
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	440b      	add	r3, r1
 800272a:	761a      	strb	r2, [r3, #24]
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000e100 	.word	0xe000e100
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	; 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f1c3 0307 	rsb	r3, r3, #7
 800275a:	2b04      	cmp	r3, #4
 800275c:	bf28      	it	cs
 800275e:	2304      	movcs	r3, #4
 8002760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3304      	adds	r3, #4
 8002766:	2b06      	cmp	r3, #6
 8002768:	d902      	bls.n	8002770 <NVIC_EncodePriority+0x30>
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3b03      	subs	r3, #3
 800276e:	e000      	b.n	8002772 <NVIC_EncodePriority+0x32>
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002774:	f04f 32ff 	mov.w	r2, #4294967295
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43da      	mvns	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	401a      	ands	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002788:	f04f 31ff 	mov.w	r1, #4294967295
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	43d9      	mvns	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002798:	4313      	orrs	r3, r2
         );
}
 800279a:	4618      	mov	r0, r3
 800279c:	3724      	adds	r7, #36	; 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b8:	d301      	bcc.n	80027be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ba:	2301      	movs	r3, #1
 80027bc:	e00f      	b.n	80027de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027be:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <SysTick_Config+0x40>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027c6:	210f      	movs	r1, #15
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295
 80027cc:	f7ff ff8e 	bl	80026ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <SysTick_Config+0x40>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d6:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <SysTick_Config+0x40>)
 80027d8:	2207      	movs	r2, #7
 80027da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	e000e010 	.word	0xe000e010

080027ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff ff29 	bl	800264c <__NVIC_SetPriorityGrouping>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	4603      	mov	r3, r0
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002814:	f7ff ff3e 	bl	8002694 <__NVIC_GetPriorityGrouping>
 8002818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	6978      	ldr	r0, [r7, #20]
 8002820:	f7ff ff8e 	bl	8002740 <NVIC_EncodePriority>
 8002824:	4602      	mov	r2, r0
 8002826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282a:	4611      	mov	r1, r2
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff5d 	bl	80026ec <__NVIC_SetPriority>
}
 8002832:	bf00      	nop
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	4603      	mov	r3, r0
 8002842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff31 	bl	80026b0 <__NVIC_EnableIRQ>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff ffa2 	bl	80027a8 <SysTick_Config>
 8002864:	4603      	mov	r3, r0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e014      	b.n	80028aa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	791b      	ldrb	r3, [r3, #4]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d105      	bne.n	8002896 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7fe fdf3 	bl	800147c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2202      	movs	r2, #2
 800289a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b087      	sub	sp, #28
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	795b      	ldrb	r3, [r3, #5]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_DAC_ConfigChannel+0x20>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e036      	b.n	8002940 <HAL_DAC_ConfigChannel+0x8e>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2202      	movs	r2, #2
 80028dc:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80028e6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4013      	ands	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6819      	ldr	r1, [r3, #0]
 8002920:	22c0      	movs	r2, #192	; 0xc0
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43da      	mvns	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	400a      	ands	r2, r1
 8002930:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	371c      	adds	r7, #28
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e0cf      	b.n	8002afe <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a69      	ldr	r2, [pc, #420]	; (8002b08 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d00e      	beq.n	8002986 <HAL_DFSDM_ChannelInit+0x3a>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a67      	ldr	r2, [pc, #412]	; (8002b0c <HAL_DFSDM_ChannelInit+0x1c0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d009      	beq.n	8002986 <HAL_DFSDM_ChannelInit+0x3a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a66      	ldr	r2, [pc, #408]	; (8002b10 <HAL_DFSDM_ChannelInit+0x1c4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d004      	beq.n	8002986 <HAL_DFSDM_ChannelInit+0x3a>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a64      	ldr	r2, [pc, #400]	; (8002b14 <HAL_DFSDM_ChannelInit+0x1c8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d106      	bne.n	8002994 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8002986:	4b64      	ldr	r3, [pc, #400]	; (8002b18 <HAL_DFSDM_ChannelInit+0x1cc>)
 8002988:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 800298a:	4b64      	ldr	r3, [pc, #400]	; (8002b1c <HAL_DFSDM_ChannelInit+0x1d0>)
 800298c:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 800298e:	4b5e      	ldr	r3, [pc, #376]	; (8002b08 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	e005      	b.n	80029a0 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8002994:	4b62      	ldr	r3, [pc, #392]	; (8002b20 <HAL_DFSDM_ChannelInit+0x1d4>)
 8002996:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8002998:	4b62      	ldr	r3, [pc, #392]	; (8002b24 <HAL_DFSDM_ChannelInit+0x1d8>)
 800299a:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 800299c:	4b62      	ldr	r3, [pc, #392]	; (8002b28 <HAL_DFSDM_ChannelInit+0x1dc>)
 800299e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 faaf 	bl	8002f08 <DFSDM_GetChannelFromInstance>
 80029aa:	4603      	mov	r3, r0
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0a0      	b.n	8002afe <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7fe fe61 	bl	8001684 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d125      	bne.n	8002a20 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	431a      	orrs	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	791b      	ldrb	r3, [r3, #4]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d108      	bne.n	8002a14 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	041b      	lsls	r3, r3, #16
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002a2e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6819      	ldr	r1, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002a3e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002a44:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 020f 	bic.w	r2, r2, #15
 8002a5c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6819      	ldr	r1, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002a84:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6899      	ldr	r1, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	3b01      	subs	r3, #1
 8002a96:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f002 0207 	and.w	r2, r2, #7
 8002ab0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002adc:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fa0c 	bl	8002f08 <DFSDM_GetChannelFromInstance>
 8002af0:	4603      	mov	r3, r0
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40016000 	.word	0x40016000
 8002b0c:	40016020 	.word	0x40016020
 8002b10:	40016040 	.word	0x40016040
 8002b14:	40016060 	.word	0x40016060
 8002b18:	200000ac 	.word	0x200000ac
 8002b1c:	200000b0 	.word	0x200000b0
 8002b20:	200000c0 	.word	0x200000c0
 8002b24:	200000c4 	.word	0x200000c4
 8002b28:	40016400 	.word	0x40016400

08002b2c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e0d9      	b.n	8002cf2 <HAL_DFSDM_FilterInit+0x1c6>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a6e      	ldr	r2, [pc, #440]	; (8002cfc <HAL_DFSDM_FilterInit+0x1d0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d109      	bne.n	8002b5c <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d003      	beq.n	8002b58 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0ca      	b.n	8002cf2 <HAL_DFSDM_FilterInit+0x1c6>
  }
#if defined (DFSDM2_Channel0)  
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a67      	ldr	r2, [pc, #412]	; (8002d00 <HAL_DFSDM_FilterInit+0x1d4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d109      	bne.n	8002b7a <HAL_DFSDM_FilterInit+0x4e>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d003      	beq.n	8002b76 <HAL_DFSDM_FilterInit+0x4a>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_DFSDM_FilterInit+0x4e>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e0bb      	b.n	8002cf2 <HAL_DFSDM_FilterInit+0x1c6>
  }  
#endif /* DFSDM2_Channel0 */
       
  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1U;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1U;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7fe fcb6 	bl	8001504 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002ba6:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7a1b      	ldrb	r3, [r3, #8]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d108      	bne.n	8002bc2 <HAL_DFSDM_FilterInit+0x96>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	e007      	b.n	8002bd2 <HAL_DFSDM_FilterInit+0xa6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002bd0:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7a5b      	ldrb	r3, [r3, #9]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d108      	bne.n	8002bec <HAL_DFSDM_FilterInit+0xc0>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	e007      	b.n	8002bfc <HAL_DFSDM_FilterInit+0xd0>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002bfa:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8002c0a:	f023 0308 	bic.w	r3, r3, #8
 8002c0e:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d108      	bne.n	8002c2a <HAL_DFSDM_FilterInit+0xfe>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6819      	ldr	r1, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	7c1b      	ldrb	r3, [r3, #16]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d108      	bne.n	8002c44 <HAL_DFSDM_FilterInit+0x118>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0210 	orr.w	r2, r2, #16
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	e007      	b.n	8002c54 <HAL_DFSDM_FilterInit+0x128>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0210 	bic.w	r2, r2, #16
 8002c52:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	7c5b      	ldrb	r3, [r3, #17]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d108      	bne.n	8002c6e <HAL_DFSDM_FilterInit+0x142>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0220 	orr.w	r2, r2, #32
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	e007      	b.n	8002c7e <HAL_DFSDM_FilterInit+0x152>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0220 	bic.w	r2, r2, #32
 8002c7c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8002c8c:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8002c90:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6959      	ldr	r1, [r3, #20]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002ca4:	431a      	orrs	r2, r3
                                     (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002cac:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	7c1a      	ldrb	r2, [r3, #16]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40016100 	.word	0x40016100
 8002d00:	40016500 	.word	0x40016500

08002d04 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d02e      	beq.n	8002d7c <HAL_DFSDM_FilterConfigRegChannel+0x78>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8002d24:	2bff      	cmp	r3, #255	; 0xff
 8002d26:	d029      	beq.n	8002d7c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d3a:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d10d      	bne.n	8002d5e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002d50:	431a      	orrs	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	e00a      	b.n	8002d74 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6819      	ldr	r1, [r3, #0]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	631a      	str	r2, [r3, #48]	; 0x30
 8002d7a:	e001      	b.n	8002d80 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }  
  else
  {
    status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0U))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	75fb      	strb	r3, [r7, #23]
 8002db0:	e066      	b.n	8002e80 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dc0:	d002      	beq.n	8002dc8 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	75fb      	strb	r3, [r7, #23]
 8002dc6:	e05b      	b.n	8002e80 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10e      	bne.n	8002dee <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10a      	bne.n	8002dee <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d105      	bne.n	8002dee <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d002      	beq.n	8002dee <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1U))
  {
    status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	75fb      	strb	r3, [r7, #23]
 8002dec:	e048      	b.n	8002e80 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10c      	bne.n	8002e10 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d108      	bne.n	8002e10 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e08:	d102      	bne.n	8002e10 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	75fb      	strb	r3, [r7, #23]
 8002e0e:	e037      	b.n	8002e80 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d004      	beq.n	8002e24 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d12b      	bne.n	8002e7c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	4a18      	ldr	r2, [pc, #96]	; (8002e8c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8002e2a:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	4a17      	ldr	r2, [pc, #92]	; (8002e90 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8002e32:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e3e:	d101      	bne.n	8002e44 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8002e40:	4a14      	ldr	r2, [pc, #80]	; (8002e94 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8002e42:	e000      	b.n	8002e46 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8002e44:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	331c      	adds	r3, #28
 8002e56:	4619      	mov	r1, r3
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f000 f9bc 	bl	80031d8 <HAL_DMA_Start_IT>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d006      	beq.n	8002e74 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	22ff      	movs	r2, #255	; 0xff
 8002e6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002e72:	e005      	b.n	8002e80 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f8ab 	bl	8002fd0 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002e7a:	e001      	b.n	8002e80 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8002e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	08002ec9 	.word	0x08002ec9
 8002e90:	08002ee5 	.word	0x08002ee5
 8002e94:	08002ead 	.word	0x08002ead

08002e98 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdfsdm_filter);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f7fe fa12 	bl	80012e4 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8002ec0:	bf00      	nop
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f7fe fa14 	bl	8001304 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8002edc:	bf00      	nop
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2203      	movs	r2, #3
 8002ef6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f7ff ffcd 	bl	8002e98 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a24      	ldr	r2, [pc, #144]	; (8002fa4 <DFSDM_GetChannelFromInstance+0x9c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d003      	beq.n	8002f20 <DFSDM_GetChannelFromInstance+0x18>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a23      	ldr	r2, [pc, #140]	; (8002fa8 <DFSDM_GetChannelFromInstance+0xa0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d102      	bne.n	8002f26 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	e037      	b.n	8002f96 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a20      	ldr	r2, [pc, #128]	; (8002fac <DFSDM_GetChannelFromInstance+0xa4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d003      	beq.n	8002f36 <DFSDM_GetChannelFromInstance+0x2e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <DFSDM_GetChannelFromInstance+0xa8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d102      	bne.n	8002f3c <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8002f36:	2301      	movs	r3, #1
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	e02c      	b.n	8002f96 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a1d      	ldr	r2, [pc, #116]	; (8002fb4 <DFSDM_GetChannelFromInstance+0xac>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d003      	beq.n	8002f4c <DFSDM_GetChannelFromInstance+0x44>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a1c      	ldr	r2, [pc, #112]	; (8002fb8 <DFSDM_GetChannelFromInstance+0xb0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d102      	bne.n	8002f52 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	e021      	b.n	8002f96 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a19      	ldr	r2, [pc, #100]	; (8002fbc <DFSDM_GetChannelFromInstance+0xb4>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d003      	beq.n	8002f62 <DFSDM_GetChannelFromInstance+0x5a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a18      	ldr	r2, [pc, #96]	; (8002fc0 <DFSDM_GetChannelFromInstance+0xb8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d102      	bne.n	8002f68 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8002f62:	2303      	movs	r3, #3
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	e016      	b.n	8002f96 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a16      	ldr	r2, [pc, #88]	; (8002fc4 <DFSDM_GetChannelFromInstance+0xbc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d102      	bne.n	8002f76 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8002f70:	2304      	movs	r3, #4
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	e00f      	b.n	8002f96 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a13      	ldr	r2, [pc, #76]	; (8002fc8 <DFSDM_GetChannelFromInstance+0xc0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d102      	bne.n	8002f84 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8002f7e:	2305      	movs	r3, #5
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	e008      	b.n	8002f96 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a11      	ldr	r2, [pc, #68]	; (8002fcc <DFSDM_GetChannelFromInstance+0xc4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d102      	bne.n	8002f92 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8002f8c:	2306      	movs	r3, #6
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e001      	b.n	8002f96 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8002f92:	2307      	movs	r3, #7
 8002f94:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8002f96:	68fb      	ldr	r3, [r7, #12]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	40016000 	.word	0x40016000
 8002fa8:	40016400 	.word	0x40016400
 8002fac:	40016020 	.word	0x40016020
 8002fb0:	40016420 	.word	0x40016420
 8002fb4:	40016040 	.word	0x40016040
 8002fb8:	40016440 	.word	0x40016440
 8002fbc:	40016060 	.word	0x40016060
 8002fc0:	40016460 	.word	0x40016460
 8002fc4:	40016480 	.word	0x40016480
 8002fc8:	400164a0 	.word	0x400164a0
 8002fcc:	400164c0 	.word	0x400164c0

08002fd0 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d108      	bne.n	8002ff2 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	e033      	b.n	800305a <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0201 	bic.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003010:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0201 	orr.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003028:	2b03      	cmp	r3, #3
 800302a:	d116      	bne.n	800305a <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0202 	orr.w	r2, r2, #2
 8003042:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1U;
 800304a:	2b01      	cmp	r3, #1
 800304c:	d102      	bne.n	8003054 <DFSDM_RegConvStart+0x84>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	e000      	b.n	8003056 <DFSDM_RegConvStart+0x86>
 8003054:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <DFSDM_RegConvStart+0x98>
 8003064:	2202      	movs	r2, #2
 8003066:	e000      	b.n	800306a <DFSDM_RegConvStart+0x9a>
 8003068:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003088:	f7ff f840 	bl	800210c <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e099      	b.n	80031cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0201 	bic.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b8:	e00f      	b.n	80030da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ba:	f7ff f827 	bl	800210c <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d908      	bls.n	80030da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2203      	movs	r2, #3
 80030d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e078      	b.n	80031cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1e8      	bne.n	80030ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	4b38      	ldr	r3, [pc, #224]	; (80031d4 <HAL_DMA_Init+0x158>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003106:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003112:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800311e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	2b04      	cmp	r3, #4
 8003132:	d107      	bne.n	8003144 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	4313      	orrs	r3, r2
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f023 0307 	bic.w	r3, r3, #7
 800315a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4313      	orrs	r3, r2
 8003164:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	2b04      	cmp	r3, #4
 800316c:	d117      	bne.n	800319e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00e      	beq.n	800319e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fa6f 	bl	8003664 <DMA_CheckFifoParam>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2240      	movs	r2, #64	; 0x40
 8003190:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800319a:	2301      	movs	r3, #1
 800319c:	e016      	b.n	80031cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fa26 	bl	80035f8 <DMA_CalcBaseAndBitshift>
 80031ac:	4603      	mov	r3, r0
 80031ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	223f      	movs	r2, #63	; 0x3f
 80031b6:	409a      	lsls	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	e010803f 	.word	0xe010803f

080031d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_DMA_Start_IT+0x26>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e040      	b.n	8003280 <HAL_DMA_Start_IT+0xa8>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d12f      	bne.n	8003272 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2202      	movs	r2, #2
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f9b8 	bl	800359c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003230:	223f      	movs	r2, #63	; 0x3f
 8003232:	409a      	lsls	r2, r3
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0216 	orr.w	r2, r2, #22
 8003246:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	2b00      	cmp	r3, #0
 800324e:	d007      	beq.n	8003260 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0208 	orr.w	r2, r2, #8
 800325e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	e005      	b.n	800327e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800327a:	2302      	movs	r3, #2
 800327c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800327e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003294:	4b92      	ldr	r3, [pc, #584]	; (80034e0 <HAL_DMA_IRQHandler+0x258>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a92      	ldr	r2, [pc, #584]	; (80034e4 <HAL_DMA_IRQHandler+0x25c>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	0a9b      	lsrs	r3, r3, #10
 80032a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b2:	2208      	movs	r2, #8
 80032b4:	409a      	lsls	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d01a      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d013      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0204 	bic.w	r2, r2, #4
 80032da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e0:	2208      	movs	r2, #8
 80032e2:	409a      	lsls	r2, r3
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f8:	2201      	movs	r2, #1
 80032fa:	409a      	lsls	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d012      	beq.n	800332a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003316:	2201      	movs	r2, #1
 8003318:	409a      	lsls	r2, r3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003322:	f043 0202 	orr.w	r2, r3, #2
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332e:	2204      	movs	r2, #4
 8003330:	409a      	lsls	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d012      	beq.n	8003360 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00b      	beq.n	8003360 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334c:	2204      	movs	r2, #4
 800334e:	409a      	lsls	r2, r3
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003358:	f043 0204 	orr.w	r2, r3, #4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003364:	2210      	movs	r2, #16
 8003366:	409a      	lsls	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d043      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d03c      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	2210      	movs	r2, #16
 8003384:	409a      	lsls	r2, r3
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d018      	beq.n	80033ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d108      	bne.n	80033b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d024      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	4798      	blx	r3
 80033b6:	e01f      	b.n	80033f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01b      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	4798      	blx	r3
 80033c8:	e016      	b.n	80033f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d107      	bne.n	80033e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0208 	bic.w	r2, r2, #8
 80033e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fc:	2220      	movs	r2, #32
 80033fe:	409a      	lsls	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 808e 	beq.w	8003526 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8086 	beq.w	8003526 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	2220      	movs	r2, #32
 8003420:	409a      	lsls	r2, r3
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b05      	cmp	r3, #5
 8003430:	d136      	bne.n	80034a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0216 	bic.w	r2, r2, #22
 8003440:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003450:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d103      	bne.n	8003462 <HAL_DMA_IRQHandler+0x1da>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0208 	bic.w	r2, r2, #8
 8003470:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003476:	223f      	movs	r2, #63	; 0x3f
 8003478:	409a      	lsls	r2, r3
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003492:	2b00      	cmp	r3, #0
 8003494:	d07d      	beq.n	8003592 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
        }
        return;
 800349e:	e078      	b.n	8003592 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d01c      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d108      	bne.n	80034ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d030      	beq.n	8003526 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	4798      	blx	r3
 80034cc:	e02b      	b.n	8003526 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d027      	beq.n	8003526 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
 80034de:	e022      	b.n	8003526 <HAL_DMA_IRQHandler+0x29e>
 80034e0:	20000008 	.word	0x20000008
 80034e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10f      	bne.n	8003516 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0210 	bic.w	r2, r2, #16
 8003504:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352a:	2b00      	cmp	r3, #0
 800352c:	d032      	beq.n	8003594 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d022      	beq.n	8003580 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2205      	movs	r2, #5
 800353e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	3301      	adds	r3, #1
 8003556:	60bb      	str	r3, [r7, #8]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	429a      	cmp	r2, r3
 800355c:	d307      	bcc.n	800356e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f2      	bne.n	8003552 <HAL_DMA_IRQHandler+0x2ca>
 800356c:	e000      	b.n	8003570 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800356e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
 8003590:	e000      	b.n	8003594 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003592:	bf00      	nop
    }
  }
}
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop

0800359c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b40      	cmp	r3, #64	; 0x40
 80035c8:	d108      	bne.n	80035dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035da:	e007      	b.n	80035ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	60da      	str	r2, [r3, #12]
}
 80035ec:	bf00      	nop
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	3b10      	subs	r3, #16
 8003608:	4a14      	ldr	r2, [pc, #80]	; (800365c <DMA_CalcBaseAndBitshift+0x64>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003612:	4a13      	ldr	r2, [pc, #76]	; (8003660 <DMA_CalcBaseAndBitshift+0x68>)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4413      	add	r3, r2
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b03      	cmp	r3, #3
 8003624:	d909      	bls.n	800363a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800362e:	f023 0303 	bic.w	r3, r3, #3
 8003632:	1d1a      	adds	r2, r3, #4
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	659a      	str	r2, [r3, #88]	; 0x58
 8003638:	e007      	b.n	800364a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003642:	f023 0303 	bic.w	r3, r3, #3
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	aaaaaaab 	.word	0xaaaaaaab
 8003660:	0800bcd8 	.word	0x0800bcd8

08003664 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d11f      	bne.n	80036be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b03      	cmp	r3, #3
 8003682:	d855      	bhi.n	8003730 <DMA_CheckFifoParam+0xcc>
 8003684:	a201      	add	r2, pc, #4	; (adr r2, 800368c <DMA_CheckFifoParam+0x28>)
 8003686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368a:	bf00      	nop
 800368c:	0800369d 	.word	0x0800369d
 8003690:	080036af 	.word	0x080036af
 8003694:	0800369d 	.word	0x0800369d
 8003698:	08003731 	.word	0x08003731
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d045      	beq.n	8003734 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ac:	e042      	b.n	8003734 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036b6:	d13f      	bne.n	8003738 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036bc:	e03c      	b.n	8003738 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c6:	d121      	bne.n	800370c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d836      	bhi.n	800373c <DMA_CheckFifoParam+0xd8>
 80036ce:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <DMA_CheckFifoParam+0x70>)
 80036d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d4:	080036e5 	.word	0x080036e5
 80036d8:	080036eb 	.word	0x080036eb
 80036dc:	080036e5 	.word	0x080036e5
 80036e0:	080036fd 	.word	0x080036fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
      break;
 80036e8:	e02f      	b.n	800374a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d024      	beq.n	8003740 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036fa:	e021      	b.n	8003740 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003704:	d11e      	bne.n	8003744 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800370a:	e01b      	b.n	8003744 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d902      	bls.n	8003718 <DMA_CheckFifoParam+0xb4>
 8003712:	2b03      	cmp	r3, #3
 8003714:	d003      	beq.n	800371e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003716:	e018      	b.n	800374a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
      break;
 800371c:	e015      	b.n	800374a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00e      	beq.n	8003748 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
      break;
 800372e:	e00b      	b.n	8003748 <DMA_CheckFifoParam+0xe4>
      break;
 8003730:	bf00      	nop
 8003732:	e00a      	b.n	800374a <DMA_CheckFifoParam+0xe6>
      break;
 8003734:	bf00      	nop
 8003736:	e008      	b.n	800374a <DMA_CheckFifoParam+0xe6>
      break;
 8003738:	bf00      	nop
 800373a:	e006      	b.n	800374a <DMA_CheckFifoParam+0xe6>
      break;
 800373c:	bf00      	nop
 800373e:	e004      	b.n	800374a <DMA_CheckFifoParam+0xe6>
      break;
 8003740:	bf00      	nop
 8003742:	e002      	b.n	800374a <DMA_CheckFifoParam+0xe6>
      break;   
 8003744:	bf00      	nop
 8003746:	e000      	b.n	800374a <DMA_CheckFifoParam+0xe6>
      break;
 8003748:	bf00      	nop
    }
  } 
  
  return status; 
 800374a:	7bfb      	ldrb	r3, [r7, #15]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e081      	b.n	800386e <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fe f80e 	bl	80017a0 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	; 0x24
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0201 	bic.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037b8:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d107      	bne.n	80037d2 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	e006      	b.n	80037e0 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d104      	bne.n	80037f2 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003804:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003814:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	ea42 0103 	orr.w	r1, r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	021a      	lsls	r2, r3, #8
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69d9      	ldr	r1, [r3, #28]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1a      	ldr	r2, [r3, #32]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b20      	cmp	r3, #32
 800388a:	d138      	bne.n	80038fe <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8003896:	2302      	movs	r3, #2
 8003898:	e032      	b.n	8003900 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2224      	movs	r2, #36	; 0x24
 80038a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0201 	bic.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038c8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6819      	ldr	r1, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0201 	orr.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e000      	b.n	8003900 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038fe:	2302      	movs	r3, #2
  }
}
 8003900:	4618      	mov	r0, r3
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800390c:	b480      	push	{r7}
 800390e:	b089      	sub	sp, #36	; 0x24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	e165      	b.n	8003bf4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003928:	2201      	movs	r2, #1
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4013      	ands	r3, r2
 800393a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	429a      	cmp	r2, r3
 8003942:	f040 8154 	bne.w	8003bee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d00b      	beq.n	8003966 <HAL_GPIO_Init+0x5a>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d007      	beq.n	8003966 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800395a:	2b11      	cmp	r3, #17
 800395c:	d003      	beq.n	8003966 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b12      	cmp	r3, #18
 8003964:	d130      	bne.n	80039c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	2203      	movs	r2, #3
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43db      	mvns	r3, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4013      	ands	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4313      	orrs	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800399c:	2201      	movs	r2, #1
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f003 0201 	and.w	r2, r3, #1
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	2203      	movs	r2, #3
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4013      	ands	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d003      	beq.n	8003a08 <HAL_GPIO_Init+0xfc>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b12      	cmp	r3, #18
 8003a06:	d123      	bne.n	8003a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	08da      	lsrs	r2, r3, #3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3208      	adds	r2, #8
 8003a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	220f      	movs	r2, #15
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	08da      	lsrs	r2, r3, #3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3208      	adds	r2, #8
 8003a4a:	69b9      	ldr	r1, [r7, #24]
 8003a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 0203 	and.w	r2, r3, #3
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 80ae 	beq.w	8003bee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	4b5c      	ldr	r3, [pc, #368]	; (8003c08 <HAL_GPIO_Init+0x2fc>)
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	4a5b      	ldr	r2, [pc, #364]	; (8003c08 <HAL_GPIO_Init+0x2fc>)
 8003a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8003aa2:	4b59      	ldr	r3, [pc, #356]	; (8003c08 <HAL_GPIO_Init+0x2fc>)
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aae:	4a57      	ldr	r2, [pc, #348]	; (8003c0c <HAL_GPIO_Init+0x300>)
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	089b      	lsrs	r3, r3, #2
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	220f      	movs	r2, #15
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	43db      	mvns	r3, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a4e      	ldr	r2, [pc, #312]	; (8003c10 <HAL_GPIO_Init+0x304>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d025      	beq.n	8003b26 <HAL_GPIO_Init+0x21a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a4d      	ldr	r2, [pc, #308]	; (8003c14 <HAL_GPIO_Init+0x308>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01f      	beq.n	8003b22 <HAL_GPIO_Init+0x216>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a4c      	ldr	r2, [pc, #304]	; (8003c18 <HAL_GPIO_Init+0x30c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d019      	beq.n	8003b1e <HAL_GPIO_Init+0x212>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a4b      	ldr	r2, [pc, #300]	; (8003c1c <HAL_GPIO_Init+0x310>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <HAL_GPIO_Init+0x20e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a4a      	ldr	r2, [pc, #296]	; (8003c20 <HAL_GPIO_Init+0x314>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00d      	beq.n	8003b16 <HAL_GPIO_Init+0x20a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a49      	ldr	r2, [pc, #292]	; (8003c24 <HAL_GPIO_Init+0x318>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d007      	beq.n	8003b12 <HAL_GPIO_Init+0x206>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a48      	ldr	r2, [pc, #288]	; (8003c28 <HAL_GPIO_Init+0x31c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d101      	bne.n	8003b0e <HAL_GPIO_Init+0x202>
 8003b0a:	2306      	movs	r3, #6
 8003b0c:	e00c      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b0e:	2307      	movs	r3, #7
 8003b10:	e00a      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b12:	2305      	movs	r3, #5
 8003b14:	e008      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b16:	2304      	movs	r3, #4
 8003b18:	e006      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e004      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e002      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b26:	2300      	movs	r3, #0
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	f002 0203 	and.w	r2, r2, #3
 8003b2e:	0092      	lsls	r2, r2, #2
 8003b30:	4093      	lsls	r3, r2
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b38:	4934      	ldr	r1, [pc, #208]	; (8003c0c <HAL_GPIO_Init+0x300>)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	089b      	lsrs	r3, r3, #2
 8003b3e:	3302      	adds	r3, #2
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b46:	4b39      	ldr	r3, [pc, #228]	; (8003c2c <HAL_GPIO_Init+0x320>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4013      	ands	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b6a:	4a30      	ldr	r2, [pc, #192]	; (8003c2c <HAL_GPIO_Init+0x320>)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b70:	4b2e      	ldr	r3, [pc, #184]	; (8003c2c <HAL_GPIO_Init+0x320>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b94:	4a25      	ldr	r2, [pc, #148]	; (8003c2c <HAL_GPIO_Init+0x320>)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b9a:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <HAL_GPIO_Init+0x320>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bbe:	4a1b      	ldr	r2, [pc, #108]	; (8003c2c <HAL_GPIO_Init+0x320>)
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bc4:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <HAL_GPIO_Init+0x320>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003be8:	4a10      	ldr	r2, [pc, #64]	; (8003c2c <HAL_GPIO_Init+0x320>)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	2b0f      	cmp	r3, #15
 8003bf8:	f67f ae96 	bls.w	8003928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bfc:	bf00      	nop
 8003bfe:	3724      	adds	r7, #36	; 0x24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	40013800 	.word	0x40013800
 8003c10:	40020000 	.word	0x40020000
 8003c14:	40020400 	.word	0x40020400
 8003c18:	40020800 	.word	0x40020800
 8003c1c:	40020c00 	.word	0x40020c00
 8003c20:	40021000 	.word	0x40021000
 8003c24:	40021400 	.word	0x40021400
 8003c28:	40021800 	.word	0x40021800
 8003c2c:	40013c00 	.word	0x40013c00

08003c30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	887b      	ldrh	r3, [r7, #2]
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
 8003c4c:	e001      	b.n	8003c52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	807b      	strh	r3, [r7, #2]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c70:	787b      	ldrb	r3, [r7, #1]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c76:	887a      	ldrh	r2, [r7, #2]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c7c:	e003      	b.n	8003c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c7e:	887b      	ldrh	r3, [r7, #2]
 8003c80:	041a      	lsls	r2, r3, #16
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	619a      	str	r2, [r3, #24]
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
	...

08003c94 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e154      	b.n	8003f50 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d109      	bne.n	8003cc6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a98      	ldr	r2, [pc, #608]	; (8003f20 <HAL_I2S_Init+0x28c>)
 8003cbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7fd fdb5 	bl	8001830 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003cdc:	f023 030f 	bic.w	r3, r3, #15
 8003ce0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d06f      	beq.n	8003dd2 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d102      	bne.n	8003d00 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003cfa:	2310      	movs	r3, #16
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	e001      	b.n	8003d04 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003d00:	2320      	movs	r3, #32
 8003d02:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d802      	bhi.n	8003d12 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a83      	ldr	r2, [pc, #524]	; (8003f24 <HAL_I2S_Init+0x290>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_I2S_Init+0x92>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a81      	ldr	r2, [pc, #516]	; (8003f28 <HAL_I2S_Init+0x294>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d104      	bne.n	8003d30 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8003d26:	2001      	movs	r0, #1
 8003d28:	f001 f990 	bl	800504c <HAL_RCCEx_GetPeriphCLKFreq>
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	e003      	b.n	8003d38 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8003d30:	2002      	movs	r0, #2
 8003d32:	f001 f98b 	bl	800504c <HAL_RCCEx_GetPeriphCLKFreq>
 8003d36:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d40:	d125      	bne.n	8003d8e <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d010      	beq.n	8003d6c <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d66:	3305      	adds	r3, #5
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	e01f      	b.n	8003dac <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d76:	4613      	mov	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	461a      	mov	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	3305      	adds	r3, #5
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	e00e      	b.n	8003dac <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	461a      	mov	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da8:	3305      	adds	r3, #5
 8003daa:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4a5f      	ldr	r2, [pc, #380]	; (8003f2c <HAL_I2S_Init+0x298>)
 8003db0:	fba2 2303 	umull	r2, r3, r2, r3
 8003db4:	08db      	lsrs	r3, r3, #3
 8003db6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	085b      	lsrs	r3, r3, #1
 8003dc8:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	021b      	lsls	r3, r3, #8
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	e003      	b.n	8003dda <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d902      	bls.n	8003de6 <HAL_I2S_Init+0x152>
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	2bff      	cmp	r3, #255	; 0xff
 8003de4:	d907      	bls.n	8003df6 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	f043 0210 	orr.w	r2, r3, #16
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e0ac      	b.n	8003f50 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691a      	ldr	r2, [r3, #16]
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	ea42 0103 	orr.w	r1, r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e14:	f023 030f 	bic.w	r3, r3, #15
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6851      	ldr	r1, [r2, #4]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6892      	ldr	r2, [r2, #8]
 8003e20:	4311      	orrs	r1, r2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68d2      	ldr	r2, [r2, #12]
 8003e26:	4311      	orrs	r1, r2
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6992      	ldr	r2, [r2, #24]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e38:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	2b30      	cmp	r3, #48	; 0x30
 8003e40:	d003      	beq.n	8003e4a <HAL_I2S_Init+0x1b6>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	2bb0      	cmp	r3, #176	; 0xb0
 8003e48:	d107      	bne.n	8003e5a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e58:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d16e      	bne.n	8003f40 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a32      	ldr	r2, [pc, #200]	; (8003f30 <HAL_I2S_Init+0x29c>)
 8003e66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a2d      	ldr	r2, [pc, #180]	; (8003f24 <HAL_I2S_Init+0x290>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d101      	bne.n	8003e76 <HAL_I2S_Init+0x1e2>
 8003e72:	4b30      	ldr	r3, [pc, #192]	; (8003f34 <HAL_I2S_Init+0x2a0>)
 8003e74:	e001      	b.n	8003e7a <HAL_I2S_Init+0x1e6>
 8003e76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	4928      	ldr	r1, [pc, #160]	; (8003f24 <HAL_I2S_Init+0x290>)
 8003e82:	428a      	cmp	r2, r1
 8003e84:	d101      	bne.n	8003e8a <HAL_I2S_Init+0x1f6>
 8003e86:	4a2b      	ldr	r2, [pc, #172]	; (8003f34 <HAL_I2S_Init+0x2a0>)
 8003e88:	e001      	b.n	8003e8e <HAL_I2S_Init+0x1fa>
 8003e8a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003e8e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e92:	f023 030f 	bic.w	r3, r3, #15
 8003e96:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a21      	ldr	r2, [pc, #132]	; (8003f24 <HAL_I2S_Init+0x290>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d101      	bne.n	8003ea6 <HAL_I2S_Init+0x212>
 8003ea2:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <HAL_I2S_Init+0x2a0>)
 8003ea4:	e001      	b.n	8003eaa <HAL_I2S_Init+0x216>
 8003ea6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eaa:	2202      	movs	r2, #2
 8003eac:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1c      	ldr	r2, [pc, #112]	; (8003f24 <HAL_I2S_Init+0x290>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d101      	bne.n	8003ebc <HAL_I2S_Init+0x228>
 8003eb8:	4b1e      	ldr	r3, [pc, #120]	; (8003f34 <HAL_I2S_Init+0x2a0>)
 8003eba:	e001      	b.n	8003ec0 <HAL_I2S_Init+0x22c>
 8003ebc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ecc:	d003      	beq.n	8003ed6 <HAL_I2S_Init+0x242>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d103      	bne.n	8003ede <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	e001      	b.n	8003ee2 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	b299      	uxth	r1, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003ef8:	4303      	orrs	r3, r0
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	430b      	orrs	r3, r1
 8003efe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003f00:	4313      	orrs	r3, r2
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	897b      	ldrh	r3, [r7, #10]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f0e:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a03      	ldr	r2, [pc, #12]	; (8003f24 <HAL_I2S_Init+0x290>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d10e      	bne.n	8003f38 <HAL_I2S_Init+0x2a4>
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_I2S_Init+0x2a0>)
 8003f1c:	e00e      	b.n	8003f3c <HAL_I2S_Init+0x2a8>
 8003f1e:	bf00      	nop
 8003f20:	0800404f 	.word	0x0800404f
 8003f24:	40003800 	.word	0x40003800
 8003f28:	40003c00 	.word	0x40003c00
 8003f2c:	cccccccd 	.word	0xcccccccd
 8003f30:	08004165 	.word	0x08004165
 8003f34:	40003400 	.word	0x40003400
 8003f38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f3c:	897a      	ldrh	r2, [r7, #10]
 8003f3e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3720      	adds	r7, #32
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	881a      	ldrh	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	1c9a      	adds	r2, r3, #2
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10e      	bne.n	8003fe8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fd8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff ffb8 	bl	8003f58 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	b292      	uxth	r2, r2
 8004004:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	1c9a      	adds	r2, r3, #2
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10e      	bne.n	8004046 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004036:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff ff93 	bl	8003f6c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b086      	sub	sp, #24
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b04      	cmp	r3, #4
 8004068:	d13a      	bne.n	80040e0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b01      	cmp	r3, #1
 8004072:	d109      	bne.n	8004088 <I2S_IRQHandler+0x3a>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407e:	2b40      	cmp	r3, #64	; 0x40
 8004080:	d102      	bne.n	8004088 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff ffb4 	bl	8003ff0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408e:	2b40      	cmp	r3, #64	; 0x40
 8004090:	d126      	bne.n	80040e0 <I2S_IRQHandler+0x92>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b20      	cmp	r3, #32
 800409e:	d11f      	bne.n	80040e0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040b0:	2300      	movs	r3, #0
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d2:	f043 0202 	orr.w	r2, r3, #2
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff ff50 	bl	8003f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d136      	bne.n	800415a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d109      	bne.n	800410a <I2S_IRQHandler+0xbc>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004100:	2b80      	cmp	r3, #128	; 0x80
 8004102:	d102      	bne.n	800410a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ff45 	bl	8003f94 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b08      	cmp	r3, #8
 8004112:	d122      	bne.n	800415a <I2S_IRQHandler+0x10c>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b20      	cmp	r3, #32
 8004120:	d11b      	bne.n	800415a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004130:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414c:	f043 0204 	orr.w	r2, r3, #4
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7ff ff13 	bl	8003f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800415a:	bf00      	nop
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4aa2      	ldr	r2, [pc, #648]	; (8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d101      	bne.n	8004182 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800417e:	4ba2      	ldr	r3, [pc, #648]	; (8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004180:	e001      	b.n	8004186 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004182:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a9b      	ldr	r2, [pc, #620]	; (8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d101      	bne.n	80041a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800419c:	4b9a      	ldr	r3, [pc, #616]	; (8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800419e:	e001      	b.n	80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80041a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b0:	d004      	beq.n	80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f040 8099 	bne.w	80042ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d107      	bne.n	80041d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f925 	bl	8004420 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d107      	bne.n	80041f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f9c8 	bl	8004580 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f6:	2b40      	cmp	r3, #64	; 0x40
 80041f8:	d13a      	bne.n	8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	d035      	beq.n	8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a7e      	ldr	r2, [pc, #504]	; (8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d101      	bne.n	8004212 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800420e:	4b7e      	ldr	r3, [pc, #504]	; (8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004210:	e001      	b.n	8004216 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004212:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4979      	ldr	r1, [pc, #484]	; (8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800421e:	428b      	cmp	r3, r1
 8004220:	d101      	bne.n	8004226 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004222:	4b79      	ldr	r3, [pc, #484]	; (8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004224:	e001      	b.n	800422a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004226:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800422a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800422e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800423e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	f043 0202 	orr.w	r2, r3, #2
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7ff fe88 	bl	8003f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b08      	cmp	r3, #8
 8004278:	f040 80be 	bne.w	80043f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80b8 	beq.w	80043f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004296:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a59      	ldr	r2, [pc, #356]	; (8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d101      	bne.n	80042a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80042a2:	4b59      	ldr	r3, [pc, #356]	; (8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042a4:	e001      	b.n	80042aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80042a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4954      	ldr	r1, [pc, #336]	; (8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042b2:	428b      	cmp	r3, r1
 80042b4:	d101      	bne.n	80042ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80042b6:	4b54      	ldr	r3, [pc, #336]	; (8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042b8:	e001      	b.n	80042be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80042ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80042c4:	2300      	movs	r3, #0
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	60bb      	str	r3, [r7, #8]
 80042d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	f043 0204 	orr.w	r2, r3, #4
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff fe4a 	bl	8003f80 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042ec:	e084      	b.n	80043f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d107      	bne.n	8004308 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f8be 	bl	8004484 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b01      	cmp	r3, #1
 8004310:	d107      	bne.n	8004322 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f8fd 	bl	800451c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004328:	2b40      	cmp	r3, #64	; 0x40
 800432a:	d12f      	bne.n	800438c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	d02a      	beq.n	800438c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004344:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a2e      	ldr	r2, [pc, #184]	; (8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004350:	4b2d      	ldr	r3, [pc, #180]	; (8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004352:	e001      	b.n	8004358 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004354:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4929      	ldr	r1, [pc, #164]	; (8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004360:	428b      	cmp	r3, r1
 8004362:	d101      	bne.n	8004368 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004364:	4b28      	ldr	r3, [pc, #160]	; (8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004366:	e001      	b.n	800436c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004368:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800436c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004370:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	f043 0202 	orr.w	r2, r3, #2
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff fdfa 	bl	8003f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b08      	cmp	r3, #8
 8004394:	d131      	bne.n	80043fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d02c      	beq.n	80043fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a17      	ldr	r2, [pc, #92]	; (8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d101      	bne.n	80043ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80043aa:	4b17      	ldr	r3, [pc, #92]	; (8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043ac:	e001      	b.n	80043b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80043ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4912      	ldr	r1, [pc, #72]	; (8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043ba:	428b      	cmp	r3, r1
 80043bc:	d101      	bne.n	80043c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80043be:	4b12      	ldr	r3, [pc, #72]	; (8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043c0:	e001      	b.n	80043c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80043c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043ca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043da:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e8:	f043 0204 	orr.w	r2, r3, #4
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff fdc5 	bl	8003f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043f6:	e000      	b.n	80043fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043f8:	bf00      	nop
}
 80043fa:	bf00      	nop
 80043fc:	3720      	adds	r7, #32
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40003800 	.word	0x40003800
 8004408:	40003400 	.word	0x40003400

0800440c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	1c99      	adds	r1, r3, #2
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6251      	str	r1, [r2, #36]	; 0x24
 8004432:	881a      	ldrh	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d113      	bne.n	800447a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004460:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d106      	bne.n	800447a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7ff ffc9 	bl	800440c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800447a:	bf00      	nop
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	1c99      	adds	r1, r3, #2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6251      	str	r1, [r2, #36]	; 0x24
 8004496:	8819      	ldrh	r1, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1d      	ldr	r2, [pc, #116]	; (8004514 <I2SEx_TxISR_I2SExt+0x90>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d101      	bne.n	80044a6 <I2SEx_TxISR_I2SExt+0x22>
 80044a2:	4b1d      	ldr	r3, [pc, #116]	; (8004518 <I2SEx_TxISR_I2SExt+0x94>)
 80044a4:	e001      	b.n	80044aa <I2SEx_TxISR_I2SExt+0x26>
 80044a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044aa:	460a      	mov	r2, r1
 80044ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d121      	bne.n	800450a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a12      	ldr	r2, [pc, #72]	; (8004514 <I2SEx_TxISR_I2SExt+0x90>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d101      	bne.n	80044d4 <I2SEx_TxISR_I2SExt+0x50>
 80044d0:	4b11      	ldr	r3, [pc, #68]	; (8004518 <I2SEx_TxISR_I2SExt+0x94>)
 80044d2:	e001      	b.n	80044d8 <I2SEx_TxISR_I2SExt+0x54>
 80044d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	490d      	ldr	r1, [pc, #52]	; (8004514 <I2SEx_TxISR_I2SExt+0x90>)
 80044e0:	428b      	cmp	r3, r1
 80044e2:	d101      	bne.n	80044e8 <I2SEx_TxISR_I2SExt+0x64>
 80044e4:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <I2SEx_TxISR_I2SExt+0x94>)
 80044e6:	e001      	b.n	80044ec <I2SEx_TxISR_I2SExt+0x68>
 80044e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d106      	bne.n	800450a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff ff81 	bl	800440c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800450a:	bf00      	nop
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40003800 	.word	0x40003800
 8004518:	40003400 	.word	0x40003400

0800451c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68d8      	ldr	r0, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452e:	1c99      	adds	r1, r3, #2
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004534:	b282      	uxth	r2, r0
 8004536:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800454a:	b29b      	uxth	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d113      	bne.n	8004578 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800455e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d106      	bne.n	8004578 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff ff4a 	bl	800440c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004578:	bf00      	nop
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a20      	ldr	r2, [pc, #128]	; (8004610 <I2SEx_RxISR_I2SExt+0x90>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d101      	bne.n	8004596 <I2SEx_RxISR_I2SExt+0x16>
 8004592:	4b20      	ldr	r3, [pc, #128]	; (8004614 <I2SEx_RxISR_I2SExt+0x94>)
 8004594:	e001      	b.n	800459a <I2SEx_RxISR_I2SExt+0x1a>
 8004596:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800459a:	68d8      	ldr	r0, [r3, #12]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	1c99      	adds	r1, r3, #2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80045a6:	b282      	uxth	r2, r0
 80045a8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d121      	bne.n	8004606 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a12      	ldr	r2, [pc, #72]	; (8004610 <I2SEx_RxISR_I2SExt+0x90>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d101      	bne.n	80045d0 <I2SEx_RxISR_I2SExt+0x50>
 80045cc:	4b11      	ldr	r3, [pc, #68]	; (8004614 <I2SEx_RxISR_I2SExt+0x94>)
 80045ce:	e001      	b.n	80045d4 <I2SEx_RxISR_I2SExt+0x54>
 80045d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	490d      	ldr	r1, [pc, #52]	; (8004610 <I2SEx_RxISR_I2SExt+0x90>)
 80045dc:	428b      	cmp	r3, r1
 80045de:	d101      	bne.n	80045e4 <I2SEx_RxISR_I2SExt+0x64>
 80045e0:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <I2SEx_RxISR_I2SExt+0x94>)
 80045e2:	e001      	b.n	80045e8 <I2SEx_RxISR_I2SExt+0x68>
 80045e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045ec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d106      	bne.n	8004606 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff ff03 	bl	800440c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004606:	bf00      	nop
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40003800 	.word	0x40003800
 8004614:	40003400 	.word	0x40003400

08004618 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af02      	add	r7, sp, #8
 800461e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004620:	f7fd fd74 	bl	800210c <HAL_GetTick>
 8004624:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e069      	b.n	8004704 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10b      	bne.n	8004654 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7fd f9ad 	bl	80019a4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800464a:	f241 3188 	movw	r1, #5000	; 0x1388
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f85e 	bl	8004710 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	3b01      	subs	r3, #1
 8004664:	021a      	lsls	r2, r3, #8
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	2120      	movs	r1, #32
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f856 	bl	800472c <QSPI_WaitFlagStateUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004684:	7afb      	ldrb	r3, [r7, #11]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d137      	bne.n	80046fa <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004694:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6852      	ldr	r2, [r2, #4]
 800469c:	0611      	lsls	r1, r2, #24
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	68d2      	ldr	r2, [r2, #12]
 80046a2:	4311      	orrs	r1, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	69d2      	ldr	r2, [r2, #28]
 80046a8:	4311      	orrs	r1, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6a12      	ldr	r2, [r2, #32]
 80046ae:	4311      	orrs	r1, r2
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	430b      	orrs	r3, r1
 80046b6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	4b13      	ldr	r3, [pc, #76]	; (800470c <HAL_QSPI_Init+0xf4>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6912      	ldr	r2, [r2, #16]
 80046c6:	0411      	lsls	r1, r2, #16
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6952      	ldr	r2, [r2, #20]
 80046cc:	4311      	orrs	r1, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6992      	ldr	r2, [r2, #24]
 80046d2:	4311      	orrs	r1, r2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6812      	ldr	r2, [r2, #0]
 80046d8:	430b      	orrs	r3, r1
 80046da:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004702:	7afb      	ldrb	r3, [r7, #11]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	ffe0f8fe 	.word	0xffe0f8fe

08004710 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	4613      	mov	r3, r2
 800473a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800473c:	e01a      	b.n	8004774 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004744:	d016      	beq.n	8004774 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004746:	f7fd fce1 	bl	800210c <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	429a      	cmp	r2, r3
 8004754:	d302      	bcc.n	800475c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10b      	bne.n	8004774 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2204      	movs	r2, #4
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004768:	f043 0201 	orr.w	r2, r3, #1
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e00e      	b.n	8004792 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	4013      	ands	r3, r2
 800477e:	2b00      	cmp	r3, #0
 8004780:	bf14      	ite	ne
 8004782:	2301      	movne	r3, #1
 8004784:	2300      	moveq	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	429a      	cmp	r2, r3
 800478e:	d1d6      	bne.n	800473e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0cc      	b.n	800494a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047b0:	4b68      	ldr	r3, [pc, #416]	; (8004954 <HAL_RCC_ClockConfig+0x1b8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d90c      	bls.n	80047d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047be:	4b65      	ldr	r3, [pc, #404]	; (8004954 <HAL_RCC_ClockConfig+0x1b8>)
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c6:	4b63      	ldr	r3, [pc, #396]	; (8004954 <HAL_RCC_ClockConfig+0x1b8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d001      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e0b8      	b.n	800494a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d020      	beq.n	8004826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047f0:	4b59      	ldr	r3, [pc, #356]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	4a58      	ldr	r2, [pc, #352]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004808:	4b53      	ldr	r3, [pc, #332]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4a52      	ldr	r2, [pc, #328]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004814:	4b50      	ldr	r3, [pc, #320]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	494d      	ldr	r1, [pc, #308]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	4313      	orrs	r3, r2
 8004824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d044      	beq.n	80048bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d107      	bne.n	800484a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483a:	4b47      	ldr	r3, [pc, #284]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d119      	bne.n	800487a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e07f      	b.n	800494a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d003      	beq.n	800485a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004856:	2b03      	cmp	r3, #3
 8004858:	d107      	bne.n	800486a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800485a:	4b3f      	ldr	r3, [pc, #252]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d109      	bne.n	800487a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e06f      	b.n	800494a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486a:	4b3b      	ldr	r3, [pc, #236]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e067      	b.n	800494a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800487a:	4b37      	ldr	r3, [pc, #220]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f023 0203 	bic.w	r2, r3, #3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	4934      	ldr	r1, [pc, #208]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 8004888:	4313      	orrs	r3, r2
 800488a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800488c:	f7fd fc3e 	bl	800210c <HAL_GetTick>
 8004890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004892:	e00a      	b.n	80048aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004894:	f7fd fc3a 	bl	800210c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e04f      	b.n	800494a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048aa:	4b2b      	ldr	r3, [pc, #172]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 020c 	and.w	r2, r3, #12
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d1eb      	bne.n	8004894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048bc:	4b25      	ldr	r3, [pc, #148]	; (8004954 <HAL_RCC_ClockConfig+0x1b8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d20c      	bcs.n	80048e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ca:	4b22      	ldr	r3, [pc, #136]	; (8004954 <HAL_RCC_ClockConfig+0x1b8>)
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d2:	4b20      	ldr	r3, [pc, #128]	; (8004954 <HAL_RCC_ClockConfig+0x1b8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d001      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e032      	b.n	800494a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f0:	4b19      	ldr	r3, [pc, #100]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	4916      	ldr	r1, [pc, #88]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d009      	beq.n	8004922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800490e:	4b12      	ldr	r3, [pc, #72]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	490e      	ldr	r1, [pc, #56]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	4313      	orrs	r3, r2
 8004920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004922:	f000 f821 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 8004926:	4601      	mov	r1, r0
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	091b      	lsrs	r3, r3, #4
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	4a0a      	ldr	r2, [pc, #40]	; (800495c <HAL_RCC_ClockConfig+0x1c0>)
 8004934:	5cd3      	ldrb	r3, [r2, r3]
 8004936:	fa21 f303 	lsr.w	r3, r1, r3
 800493a:	4a09      	ldr	r2, [pc, #36]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 800493c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800493e:	4b09      	ldr	r3, [pc, #36]	; (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f7fd fb9e 	bl	8002084 <HAL_InitTick>

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40023c00 	.word	0x40023c00
 8004958:	40023800 	.word	0x40023800
 800495c:	0800bcc0 	.word	0x0800bcc0
 8004960:	20000008 	.word	0x20000008
 8004964:	2000000c 	.word	0x2000000c

08004968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	607b      	str	r3, [r7, #4]
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	2300      	movs	r3, #0
 8004978:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800497e:	4b50      	ldr	r3, [pc, #320]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	2b04      	cmp	r3, #4
 8004988:	d007      	beq.n	800499a <HAL_RCC_GetSysClockFreq+0x32>
 800498a:	2b08      	cmp	r3, #8
 800498c:	d008      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0x38>
 800498e:	2b00      	cmp	r3, #0
 8004990:	f040 808d 	bne.w	8004aae <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004994:	4b4b      	ldr	r3, [pc, #300]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004996:	60bb      	str	r3, [r7, #8]
       break;
 8004998:	e08c      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800499a:	4b4b      	ldr	r3, [pc, #300]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x160>)
 800499c:	60bb      	str	r3, [r7, #8]
      break;
 800499e:	e089      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049a0:	4b47      	ldr	r3, [pc, #284]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x158>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049aa:	4b45      	ldr	r3, [pc, #276]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x158>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d023      	beq.n	80049fe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049b6:	4b42      	ldr	r3, [pc, #264]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x158>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	099b      	lsrs	r3, r3, #6
 80049bc:	f04f 0400 	mov.w	r4, #0
 80049c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	ea03 0501 	and.w	r5, r3, r1
 80049cc:	ea04 0602 	and.w	r6, r4, r2
 80049d0:	4a3d      	ldr	r2, [pc, #244]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x160>)
 80049d2:	fb02 f106 	mul.w	r1, r2, r6
 80049d6:	2200      	movs	r2, #0
 80049d8:	fb02 f205 	mul.w	r2, r2, r5
 80049dc:	440a      	add	r2, r1
 80049de:	493a      	ldr	r1, [pc, #232]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x160>)
 80049e0:	fba5 0101 	umull	r0, r1, r5, r1
 80049e4:	1853      	adds	r3, r2, r1
 80049e6:	4619      	mov	r1, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f04f 0400 	mov.w	r4, #0
 80049ee:	461a      	mov	r2, r3
 80049f0:	4623      	mov	r3, r4
 80049f2:	f7fb fc65 	bl	80002c0 <__aeabi_uldivmod>
 80049f6:	4603      	mov	r3, r0
 80049f8:	460c      	mov	r4, r1
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	e049      	b.n	8004a92 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049fe:	4b30      	ldr	r3, [pc, #192]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	099b      	lsrs	r3, r3, #6
 8004a04:	f04f 0400 	mov.w	r4, #0
 8004a08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	ea03 0501 	and.w	r5, r3, r1
 8004a14:	ea04 0602 	and.w	r6, r4, r2
 8004a18:	4629      	mov	r1, r5
 8004a1a:	4632      	mov	r2, r6
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	f04f 0400 	mov.w	r4, #0
 8004a24:	0154      	lsls	r4, r2, #5
 8004a26:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a2a:	014b      	lsls	r3, r1, #5
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4622      	mov	r2, r4
 8004a30:	1b49      	subs	r1, r1, r5
 8004a32:	eb62 0206 	sbc.w	r2, r2, r6
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	f04f 0400 	mov.w	r4, #0
 8004a3e:	0194      	lsls	r4, r2, #6
 8004a40:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a44:	018b      	lsls	r3, r1, #6
 8004a46:	1a5b      	subs	r3, r3, r1
 8004a48:	eb64 0402 	sbc.w	r4, r4, r2
 8004a4c:	f04f 0100 	mov.w	r1, #0
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	00e2      	lsls	r2, r4, #3
 8004a56:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a5a:	00d9      	lsls	r1, r3, #3
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4614      	mov	r4, r2
 8004a60:	195b      	adds	r3, r3, r5
 8004a62:	eb44 0406 	adc.w	r4, r4, r6
 8004a66:	f04f 0100 	mov.w	r1, #0
 8004a6a:	f04f 0200 	mov.w	r2, #0
 8004a6e:	02a2      	lsls	r2, r4, #10
 8004a70:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a74:	0299      	lsls	r1, r3, #10
 8004a76:	460b      	mov	r3, r1
 8004a78:	4614      	mov	r4, r2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f04f 0400 	mov.w	r4, #0
 8004a84:	461a      	mov	r2, r3
 8004a86:	4623      	mov	r3, r4
 8004a88:	f7fb fc1a 	bl	80002c0 <__aeabi_uldivmod>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	460c      	mov	r4, r1
 8004a90:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a92:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	0c1b      	lsrs	r3, r3, #16
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aaa:	60bb      	str	r3, [r7, #8]
      break;
 8004aac:	e002      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004aae:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004ab0:	60bb      	str	r3, [r7, #8]
      break;
 8004ab2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	00f42400 	.word	0x00f42400
 8004ac8:	017d7840 	.word	0x017d7840

08004acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad0:	4b03      	ldr	r3, [pc, #12]	; (8004ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	20000008 	.word	0x20000008

08004ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ae8:	f7ff fff0 	bl	8004acc <HAL_RCC_GetHCLKFreq>
 8004aec:	4601      	mov	r1, r0
 8004aee:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	0a9b      	lsrs	r3, r3, #10
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	4a03      	ldr	r2, [pc, #12]	; (8004b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004afa:	5cd3      	ldrb	r3, [r2, r3]
 8004afc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40023800 	.word	0x40023800
 8004b08:	0800bcd0 	.word	0x0800bcd0

08004b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b10:	f7ff ffdc 	bl	8004acc <HAL_RCC_GetHCLKFreq>
 8004b14:	4601      	mov	r1, r0
 8004b16:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	0b5b      	lsrs	r3, r3, #13
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	4a03      	ldr	r2, [pc, #12]	; (8004b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b22:	5cd3      	ldrb	r3, [r2, r3]
 8004b24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	0800bcd0 	.word	0x0800bcd0

08004b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d010      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004b58:	4b7a      	ldr	r3, [pc, #488]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b5e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	4977      	ldr	r1, [pc, #476]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8004b76:	2301      	movs	r3, #1
 8004b78:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d010      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004b86:	4b6f      	ldr	r3, [pc, #444]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b8c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	496b      	ldr	r1, [pc, #428]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d022      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8004bb4:	4b63      	ldr	r3, [pc, #396]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc2:	4960      	ldr	r1, [pc, #384]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bde:	d10c      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004be0:	4b58      	ldr	r3, [pc, #352]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004be6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	021b      	lsls	r3, r3, #8
 8004bf2:	4954      	ldr	r1, [pc, #336]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d022      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8004c06:	4b4f      	ldr	r3, [pc, #316]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c14:	494b      	ldr	r1, [pc, #300]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004c24:	2301      	movs	r3, #1
 8004c26:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c30:	d10c      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004c32:	4b44      	ldr	r3, [pc, #272]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	021b      	lsls	r3, r3, #8
 8004c44:	493f      	ldr	r1, [pc, #252]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 808a 	beq.w	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	4b39      	ldr	r3, [pc, #228]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	4a38      	ldr	r2, [pc, #224]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c68:	6413      	str	r3, [r2, #64]	; 0x40
 8004c6a:	4b36      	ldr	r3, [pc, #216]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c76:	4b34      	ldr	r3, [pc, #208]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a33      	ldr	r2, [pc, #204]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c82:	f7fd fa43 	bl	800210c <HAL_GetTick>
 8004c86:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c88:	e008      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c8a:	f7fd fa3f 	bl	800210c <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e1d1      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c9c:	4b2a      	ldr	r3, [pc, #168]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ca8:	4b26      	ldr	r3, [pc, #152]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb0:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d02f      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d028      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cc6:	4b1f      	ldr	r3, [pc, #124]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cce:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cd0:	4b1e      	ldr	r3, [pc, #120]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cd6:	4b1d      	ldr	r3, [pc, #116]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004cdc:	4a19      	ldr	r2, [pc, #100]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ce2:	4b18      	ldr	r3, [pc, #96]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d114      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cee:	f7fd fa0d 	bl	800210c <HAL_GetTick>
 8004cf2:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf4:	e00a      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cf6:	f7fd fa09 	bl	800210c <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e199      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0c:	4b0d      	ldr	r3, [pc, #52]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0ee      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d24:	d114      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004d26:	4b07      	ldr	r3, [pc, #28]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d3a:	4902      	ldr	r1, [pc, #8]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	608b      	str	r3, [r1, #8]
 8004d40:	e00c      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004d42:	bf00      	nop
 8004d44:	40023800 	.word	0x40023800
 8004d48:	40007000 	.word	0x40007000
 8004d4c:	42470e40 	.word	0x42470e40
 8004d50:	4b89      	ldr	r3, [pc, #548]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4a88      	ldr	r2, [pc, #544]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004d56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d5a:	6093      	str	r3, [r2, #8]
 8004d5c:	4b86      	ldr	r3, [pc, #536]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004d5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d68:	4983      	ldr	r1, [pc, #524]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d004      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8004d80:	4b7e      	ldr	r3, [pc, #504]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8004d82:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004d90:	4b79      	ldr	r3, [pc, #484]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	4976      	ldr	r1, [pc, #472]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d011      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004db2:	4b71      	ldr	r3, [pc, #452]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004db8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	496d      	ldr	r1, [pc, #436]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004de2:	4b65      	ldr	r3, [pc, #404]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004de8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df0:	4961      	ldr	r1, [pc, #388]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d004      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b80      	cmp	r3, #128	; 0x80
 8004e04:	f040 80c6 	bne.w	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e08:	4b5d      	ldr	r3, [pc, #372]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e0e:	f7fd f97d 	bl	800210c <HAL_GetTick>
 8004e12:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e14:	e008      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e16:	f7fd f979 	bl	800210c <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e10b      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e28:	4b53      	ldr	r3, [pc, #332]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f0      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004e34:	4a53      	ldr	r2, [pc, #332]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d023      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d019      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d004      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e78:	d00e      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d019      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d115      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e96:	d110      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	019b      	lsls	r3, r3, #6
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	061b      	lsls	r3, r3, #24
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	071b      	lsls	r3, r3, #28
 8004eb2:	4931      	ldr	r1, [pc, #196]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d009      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d026      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d122      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ee2:	4b25      	ldr	r3, [pc, #148]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee8:	0e1b      	lsrs	r3, r3, #24
 8004eea:	f003 030f 	and.w	r3, r3, #15
 8004eee:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	019b      	lsls	r3, r3, #6
 8004efa:	431a      	orrs	r2, r3
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	061b      	lsls	r3, r3, #24
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	071b      	lsls	r3, r3, #28
 8004f08:	491b      	ldr	r1, [pc, #108]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8004f10:	4b19      	ldr	r3, [pc, #100]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f16:	f023 021f 	bic.w	r2, r3, #31
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	4915      	ldr	r1, [pc, #84]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d010      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	019b      	lsls	r3, r3, #6
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	061b      	lsls	r3, r3, #24
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	071b      	lsls	r3, r3, #28
 8004f4e:	490a      	ldr	r1, [pc, #40]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f56:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004f58:	2201      	movs	r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f5c:	f7fd f8d6 	bl	800210c <HAL_GetTick>
 8004f60:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f62:	e011      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f64:	f7fd f8d2 	bl	800210c <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d90a      	bls.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e064      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004f76:	bf00      	nop
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	424711e0 	.word	0x424711e0
 8004f80:	42470068 	.word	0x42470068
 8004f84:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f88:	4b2f      	ldr	r3, [pc, #188]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0e7      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fa0:	4b29      	ldr	r3, [pc, #164]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fa6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fae:	4926      	ldr	r1, [pc, #152]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004fc2:	4b21      	ldr	r3, [pc, #132]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fc8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd0:	491d      	ldr	r1, [pc, #116]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004fe4:	4b18      	ldr	r3, [pc, #96]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff2:	4915      	ldr	r1, [pc, #84]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8005006:	4b10      	ldr	r3, [pc, #64]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800500c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	490c      	ldr	r1, [pc, #48]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005028:	4b07      	ldr	r3, [pc, #28]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800502a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800502e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	4904      	ldr	r1, [pc, #16]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3720      	adds	r7, #32
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40023800 	.word	0x40023800

0800504c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d003      	beq.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 800506a:	2b02      	cmp	r3, #2
 800506c:	f000 8098 	beq.w	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005070:	e12d      	b.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8005072:	4b9a      	ldr	r3, [pc, #616]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005078:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800507c:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005084:	d00c      	beq.n	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8005086:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800508a:	d802      	bhi.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005090:	e082      	b.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8005092:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005096:	d047      	beq.n	8005128 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005098:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800509c:	d06f      	beq.n	800517e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 800509e:	e07b      	b.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80050a0:	4b8f      	ldr	r3, [pc, #572]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80050a2:	617b      	str	r3, [r7, #20]
          break;
 80050a4:	e07b      	b.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80050a6:	4b8d      	ldr	r3, [pc, #564]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80050a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050b4:	d109      	bne.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80050b6:	4b89      	ldr	r3, [pc, #548]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80050b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050c0:	4a87      	ldr	r2, [pc, #540]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80050c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	e019      	b.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050ca:	4b84      	ldr	r3, [pc, #528]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050d6:	d109      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80050d8:	4b80      	ldr	r3, [pc, #512]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80050da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050e2:	4a80      	ldr	r2, [pc, #512]	; (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80050e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	e008      	b.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80050ec:	4b7b      	ldr	r3, [pc, #492]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80050ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050f6:	4a7c      	ldr	r2, [pc, #496]	; (80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80050f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fc:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80050fe:	4b77      	ldr	r3, [pc, #476]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005104:	099b      	lsrs	r3, r3, #6
 8005106:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	fb02 f303 	mul.w	r3, r2, r3
 8005110:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005112:	4b72      	ldr	r3, [pc, #456]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005118:	0f1b      	lsrs	r3, r3, #28
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	fbb2 f3f3 	udiv	r3, r2, r3
 8005124:	617b      	str	r3, [r7, #20]
          break;
 8005126:	e03a      	b.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005128:	4b6c      	ldr	r3, [pc, #432]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005130:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005134:	d108      	bne.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005136:	4b69      	ldr	r3, [pc, #420]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800513e:	4a69      	ldr	r2, [pc, #420]	; (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005140:	fbb2 f3f3 	udiv	r3, r2, r3
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	e007      	b.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005148:	4b64      	ldr	r3, [pc, #400]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005150:	4a65      	ldr	r2, [pc, #404]	; (80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005152:	fbb2 f3f3 	udiv	r3, r2, r3
 8005156:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005158:	4b60      	ldr	r3, [pc, #384]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	099b      	lsrs	r3, r3, #6
 800515e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	fb02 f303 	mul.w	r3, r2, r3
 8005168:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800516a:	4b5c      	ldr	r3, [pc, #368]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	0f1b      	lsrs	r3, r3, #28
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	fbb2 f3f3 	udiv	r3, r2, r3
 800517a:	617b      	str	r3, [r7, #20]
          break;
 800517c:	e00f      	b.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800517e:	4b57      	ldr	r3, [pc, #348]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800518a:	d102      	bne.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 800518c:	4b55      	ldr	r3, [pc, #340]	; (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800518e:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005190:	e005      	b.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8005192:	4b55      	ldr	r3, [pc, #340]	; (80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005194:	617b      	str	r3, [r7, #20]
          break;
 8005196:	e002      	b.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
          break;
 800519c:	bf00      	nop
        }
      }
      break;
 800519e:	e096      	b.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80051a0:	4b4e      	ldr	r3, [pc, #312]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80051a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a6:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80051aa:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051b2:	d00c      	beq.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80051b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051b8:	d802      	bhi.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80051be:	e082      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80051c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051c4:	d047      	beq.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80051c6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80051ca:	d06f      	beq.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80051cc:	e07b      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80051ce:	4b44      	ldr	r3, [pc, #272]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80051d0:	617b      	str	r3, [r7, #20]
          break;
 80051d2:	e07b      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80051d4:	4b41      	ldr	r3, [pc, #260]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80051d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051e2:	d109      	bne.n	80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80051e4:	4b3d      	ldr	r3, [pc, #244]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80051e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051ee:	4a3c      	ldr	r2, [pc, #240]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80051f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	e019      	b.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80051f8:	4b38      	ldr	r3, [pc, #224]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005204:	d109      	bne.n	800521a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005206:	4b35      	ldr	r3, [pc, #212]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800520c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005210:	4a34      	ldr	r2, [pc, #208]	; (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005212:	fbb2 f3f3 	udiv	r3, r2, r3
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	e008      	b.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800521a:	4b30      	ldr	r3, [pc, #192]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800521c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005224:	4a30      	ldr	r2, [pc, #192]	; (80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005226:	fbb2 f3f3 	udiv	r3, r2, r3
 800522a:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800522c:	4b2b      	ldr	r3, [pc, #172]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800522e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005232:	099b      	lsrs	r3, r3, #6
 8005234:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	fb02 f303 	mul.w	r3, r2, r3
 800523e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005240:	4b26      	ldr	r3, [pc, #152]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005246:	0f1b      	lsrs	r3, r3, #28
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005252:	617b      	str	r3, [r7, #20]
          break;
 8005254:	e03a      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005256:	4b21      	ldr	r3, [pc, #132]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800525e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005262:	d108      	bne.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005264:	4b1d      	ldr	r3, [pc, #116]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800526c:	4a1d      	ldr	r2, [pc, #116]	; (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800526e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005272:	613b      	str	r3, [r7, #16]
 8005274:	e007      	b.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005276:	4b19      	ldr	r3, [pc, #100]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800527e:	4a1a      	ldr	r2, [pc, #104]	; (80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005280:	fbb2 f3f3 	udiv	r3, r2, r3
 8005284:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005286:	4b15      	ldr	r3, [pc, #84]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	099b      	lsrs	r3, r3, #6
 800528c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	fb02 f303 	mul.w	r3, r2, r3
 8005296:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005298:	4b10      	ldr	r3, [pc, #64]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	0f1b      	lsrs	r3, r3, #28
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a8:	617b      	str	r3, [r7, #20]
          break;
 80052aa:	e00f      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80052ac:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052b8:	d102      	bne.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 80052ba:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80052bc:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80052be:	e005      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 80052c0:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80052c2:	617b      	str	r3, [r7, #20]
          break;
 80052c4:	e002      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]
          break;
 80052ca:	bf00      	nop
        }
      }
      break;
 80052cc:	bf00      	nop
    }
  }
  return frequency;
 80052ce:	697b      	ldr	r3, [r7, #20]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	371c      	adds	r7, #28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	40023800 	.word	0x40023800
 80052e0:	00bb8000 	.word	0x00bb8000
 80052e4:	017d7840 	.word	0x017d7840
 80052e8:	00f42400 	.word	0x00f42400

080052ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d075      	beq.n	80053f0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005304:	4ba2      	ldr	r3, [pc, #648]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f003 030c 	and.w	r3, r3, #12
 800530c:	2b04      	cmp	r3, #4
 800530e:	d00c      	beq.n	800532a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005310:	4b9f      	ldr	r3, [pc, #636]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005318:	2b08      	cmp	r3, #8
 800531a:	d112      	bne.n	8005342 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800531c:	4b9c      	ldr	r3, [pc, #624]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005324:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005328:	d10b      	bne.n	8005342 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800532a:	4b99      	ldr	r3, [pc, #612]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d05b      	beq.n	80053ee <HAL_RCC_OscConfig+0x102>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d157      	bne.n	80053ee <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e20b      	b.n	800575a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800534a:	d106      	bne.n	800535a <HAL_RCC_OscConfig+0x6e>
 800534c:	4b90      	ldr	r3, [pc, #576]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a8f      	ldr	r2, [pc, #572]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 8005352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	e01d      	b.n	8005396 <HAL_RCC_OscConfig+0xaa>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005362:	d10c      	bne.n	800537e <HAL_RCC_OscConfig+0x92>
 8005364:	4b8a      	ldr	r3, [pc, #552]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a89      	ldr	r2, [pc, #548]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 800536a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	4b87      	ldr	r3, [pc, #540]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a86      	ldr	r2, [pc, #536]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 8005376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	e00b      	b.n	8005396 <HAL_RCC_OscConfig+0xaa>
 800537e:	4b84      	ldr	r3, [pc, #528]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a83      	ldr	r2, [pc, #524]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 8005384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	4b81      	ldr	r3, [pc, #516]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a80      	ldr	r2, [pc, #512]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 8005390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005394:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d013      	beq.n	80053c6 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539e:	f7fc feb5 	bl	800210c <HAL_GetTick>
 80053a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053a4:	e008      	b.n	80053b8 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053a6:	f7fc feb1 	bl	800210c <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b64      	cmp	r3, #100	; 0x64
 80053b2:	d901      	bls.n	80053b8 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e1d0      	b.n	800575a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053b8:	4b75      	ldr	r3, [pc, #468]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0f0      	beq.n	80053a6 <HAL_RCC_OscConfig+0xba>
 80053c4:	e014      	b.n	80053f0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c6:	f7fc fea1 	bl	800210c <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053cc:	e008      	b.n	80053e0 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053ce:	f7fc fe9d 	bl	800210c <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b64      	cmp	r3, #100	; 0x64
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e1bc      	b.n	800575a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053e0:	4b6b      	ldr	r3, [pc, #428]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1f0      	bne.n	80053ce <HAL_RCC_OscConfig+0xe2>
 80053ec:	e000      	b.n	80053f0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d063      	beq.n	80054c4 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80053fc:	4b64      	ldr	r3, [pc, #400]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 030c 	and.w	r3, r3, #12
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00b      	beq.n	8005420 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005408:	4b61      	ldr	r3, [pc, #388]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005410:	2b08      	cmp	r3, #8
 8005412:	d11c      	bne.n	800544e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005414:	4b5e      	ldr	r3, [pc, #376]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d116      	bne.n	800544e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005420:	4b5b      	ldr	r3, [pc, #364]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <HAL_RCC_OscConfig+0x14c>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d001      	beq.n	8005438 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e190      	b.n	800575a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005438:	4b55      	ldr	r3, [pc, #340]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	4952      	ldr	r1, [pc, #328]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 8005448:	4313      	orrs	r3, r2
 800544a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800544c:	e03a      	b.n	80054c4 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d020      	beq.n	8005498 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005456:	4b4f      	ldr	r3, [pc, #316]	; (8005594 <HAL_RCC_OscConfig+0x2a8>)
 8005458:	2201      	movs	r2, #1
 800545a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545c:	f7fc fe56 	bl	800210c <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005464:	f7fc fe52 	bl	800210c <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e171      	b.n	800575a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005476:	4b46      	ldr	r3, [pc, #280]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0f0      	beq.n	8005464 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005482:	4b43      	ldr	r3, [pc, #268]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	493f      	ldr	r1, [pc, #252]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 8005492:	4313      	orrs	r3, r2
 8005494:	600b      	str	r3, [r1, #0]
 8005496:	e015      	b.n	80054c4 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005498:	4b3e      	ldr	r3, [pc, #248]	; (8005594 <HAL_RCC_OscConfig+0x2a8>)
 800549a:	2200      	movs	r2, #0
 800549c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549e:	f7fc fe35 	bl	800210c <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054a6:	f7fc fe31 	bl	800210c <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e150      	b.n	800575a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054b8:	4b35      	ldr	r3, [pc, #212]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1f0      	bne.n	80054a6 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0308 	and.w	r3, r3, #8
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d030      	beq.n	8005532 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d016      	beq.n	8005506 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054d8:	4b2f      	ldr	r3, [pc, #188]	; (8005598 <HAL_RCC_OscConfig+0x2ac>)
 80054da:	2201      	movs	r2, #1
 80054dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054de:	f7fc fe15 	bl	800210c <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054e6:	f7fc fe11 	bl	800210c <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e130      	b.n	800575a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054f8:	4b25      	ldr	r3, [pc, #148]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 80054fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCC_OscConfig+0x1fa>
 8005504:	e015      	b.n	8005532 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005506:	4b24      	ldr	r3, [pc, #144]	; (8005598 <HAL_RCC_OscConfig+0x2ac>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800550c:	f7fc fdfe 	bl	800210c <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005514:	f7fc fdfa 	bl	800210c <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e119      	b.n	800575a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005526:	4b1a      	ldr	r3, [pc, #104]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 8005528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0304 	and.w	r3, r3, #4
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 809f 	beq.w	800567e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005540:	2300      	movs	r3, #0
 8005542:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005544:	4b12      	ldr	r3, [pc, #72]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10f      	bne.n	8005570 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005550:	2300      	movs	r3, #0
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	4b0e      	ldr	r3, [pc, #56]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 8005556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005558:	4a0d      	ldr	r2, [pc, #52]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 800555a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800555e:	6413      	str	r3, [r2, #64]	; 0x40
 8005560:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <HAL_RCC_OscConfig+0x2a4>)
 8005562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800556c:	2301      	movs	r3, #1
 800556e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005570:	4b0a      	ldr	r3, [pc, #40]	; (800559c <HAL_RCC_OscConfig+0x2b0>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005578:	2b00      	cmp	r3, #0
 800557a:	d120      	bne.n	80055be <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800557c:	4b07      	ldr	r3, [pc, #28]	; (800559c <HAL_RCC_OscConfig+0x2b0>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a06      	ldr	r2, [pc, #24]	; (800559c <HAL_RCC_OscConfig+0x2b0>)
 8005582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005586:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005588:	f7fc fdc0 	bl	800210c <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800558e:	e010      	b.n	80055b2 <HAL_RCC_OscConfig+0x2c6>
 8005590:	40023800 	.word	0x40023800
 8005594:	42470000 	.word	0x42470000
 8005598:	42470e80 	.word	0x42470e80
 800559c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a0:	f7fc fdb4 	bl	800210c <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e0d3      	b.n	800575a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b2:	4b6c      	ldr	r3, [pc, #432]	; (8005764 <HAL_RCC_OscConfig+0x478>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0f0      	beq.n	80055a0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d106      	bne.n	80055d4 <HAL_RCC_OscConfig+0x2e8>
 80055c6:	4b68      	ldr	r3, [pc, #416]	; (8005768 <HAL_RCC_OscConfig+0x47c>)
 80055c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ca:	4a67      	ldr	r2, [pc, #412]	; (8005768 <HAL_RCC_OscConfig+0x47c>)
 80055cc:	f043 0301 	orr.w	r3, r3, #1
 80055d0:	6713      	str	r3, [r2, #112]	; 0x70
 80055d2:	e01c      	b.n	800560e <HAL_RCC_OscConfig+0x322>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2b05      	cmp	r3, #5
 80055da:	d10c      	bne.n	80055f6 <HAL_RCC_OscConfig+0x30a>
 80055dc:	4b62      	ldr	r3, [pc, #392]	; (8005768 <HAL_RCC_OscConfig+0x47c>)
 80055de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e0:	4a61      	ldr	r2, [pc, #388]	; (8005768 <HAL_RCC_OscConfig+0x47c>)
 80055e2:	f043 0304 	orr.w	r3, r3, #4
 80055e6:	6713      	str	r3, [r2, #112]	; 0x70
 80055e8:	4b5f      	ldr	r3, [pc, #380]	; (8005768 <HAL_RCC_OscConfig+0x47c>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ec:	4a5e      	ldr	r2, [pc, #376]	; (8005768 <HAL_RCC_OscConfig+0x47c>)
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	6713      	str	r3, [r2, #112]	; 0x70
 80055f4:	e00b      	b.n	800560e <HAL_RCC_OscConfig+0x322>
 80055f6:	4b5c      	ldr	r3, [pc, #368]	; (8005768 <HAL_RCC_OscConfig+0x47c>)
 80055f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fa:	4a5b      	ldr	r2, [pc, #364]	; (8005768 <HAL_RCC_OscConfig+0x47c>)
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	6713      	str	r3, [r2, #112]	; 0x70
 8005602:	4b59      	ldr	r3, [pc, #356]	; (8005768 <HAL_RCC_OscConfig+0x47c>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	4a58      	ldr	r2, [pc, #352]	; (8005768 <HAL_RCC_OscConfig+0x47c>)
 8005608:	f023 0304 	bic.w	r3, r3, #4
 800560c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d015      	beq.n	8005642 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005616:	f7fc fd79 	bl	800210c <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800561c:	e00a      	b.n	8005634 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800561e:	f7fc fd75 	bl	800210c <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	f241 3288 	movw	r2, #5000	; 0x1388
 800562c:	4293      	cmp	r3, r2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e092      	b.n	800575a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005634:	4b4c      	ldr	r3, [pc, #304]	; (8005768 <HAL_RCC_OscConfig+0x47c>)
 8005636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0ee      	beq.n	800561e <HAL_RCC_OscConfig+0x332>
 8005640:	e014      	b.n	800566c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005642:	f7fc fd63 	bl	800210c <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005648:	e00a      	b.n	8005660 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800564a:	f7fc fd5f 	bl	800210c <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	f241 3288 	movw	r2, #5000	; 0x1388
 8005658:	4293      	cmp	r3, r2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e07c      	b.n	800575a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005660:	4b41      	ldr	r3, [pc, #260]	; (8005768 <HAL_RCC_OscConfig+0x47c>)
 8005662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1ee      	bne.n	800564a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800566c:	7dfb      	ldrb	r3, [r7, #23]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d105      	bne.n	800567e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005672:	4b3d      	ldr	r3, [pc, #244]	; (8005768 <HAL_RCC_OscConfig+0x47c>)
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	4a3c      	ldr	r2, [pc, #240]	; (8005768 <HAL_RCC_OscConfig+0x47c>)
 8005678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800567c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d068      	beq.n	8005758 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005686:	4b38      	ldr	r3, [pc, #224]	; (8005768 <HAL_RCC_OscConfig+0x47c>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 030c 	and.w	r3, r3, #12
 800568e:	2b08      	cmp	r3, #8
 8005690:	d060      	beq.n	8005754 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	2b02      	cmp	r3, #2
 8005698:	d145      	bne.n	8005726 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800569a:	4b34      	ldr	r3, [pc, #208]	; (800576c <HAL_RCC_OscConfig+0x480>)
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a0:	f7fc fd34 	bl	800210c <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a8:	f7fc fd30 	bl	800210c <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e04f      	b.n	800575a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ba:	4b2b      	ldr	r3, [pc, #172]	; (8005768 <HAL_RCC_OscConfig+0x47c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f0      	bne.n	80056a8 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69da      	ldr	r2, [r3, #28]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	019b      	lsls	r3, r3, #6
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056dc:	085b      	lsrs	r3, r3, #1
 80056de:	3b01      	subs	r3, #1
 80056e0:	041b      	lsls	r3, r3, #16
 80056e2:	431a      	orrs	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	061b      	lsls	r3, r3, #24
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f0:	071b      	lsls	r3, r3, #28
 80056f2:	491d      	ldr	r1, [pc, #116]	; (8005768 <HAL_RCC_OscConfig+0x47c>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056f8:	4b1c      	ldr	r3, [pc, #112]	; (800576c <HAL_RCC_OscConfig+0x480>)
 80056fa:	2201      	movs	r2, #1
 80056fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fe:	f7fc fd05 	bl	800210c <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005706:	f7fc fd01 	bl	800210c <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e020      	b.n	800575a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005718:	4b13      	ldr	r3, [pc, #76]	; (8005768 <HAL_RCC_OscConfig+0x47c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0f0      	beq.n	8005706 <HAL_RCC_OscConfig+0x41a>
 8005724:	e018      	b.n	8005758 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005726:	4b11      	ldr	r3, [pc, #68]	; (800576c <HAL_RCC_OscConfig+0x480>)
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572c:	f7fc fcee 	bl	800210c <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005734:	f7fc fcea 	bl	800210c <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e009      	b.n	800575a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005746:	4b08      	ldr	r3, [pc, #32]	; (8005768 <HAL_RCC_OscConfig+0x47c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f0      	bne.n	8005734 <HAL_RCC_OscConfig+0x448>
 8005752:	e001      	b.n	8005758 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e000      	b.n	800575a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	40007000 	.word	0x40007000
 8005768:	40023800 	.word	0x40023800
 800576c:	42470060 	.word	0x42470060

08005770 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e022      	b.n	80057c8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d105      	bne.n	800579a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7fc f9cf 	bl	8001b38 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2203      	movs	r2, #3
 800579e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f814 	bl	80057d0 <HAL_SD_InitCard>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e00a      	b.n	80057c8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80057d0:	b5b0      	push	{r4, r5, r7, lr}
 80057d2:	b08e      	sub	sp, #56	; 0x38
 80057d4:	af04      	add	r7, sp, #16
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80057d8:	2300      	movs	r3, #0
 80057da:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80057dc:	2300      	movs	r3, #0
 80057de:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80057e0:	2300      	movs	r3, #0
 80057e2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80057e4:	2300      	movs	r3, #0
 80057e6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80057e8:	2300      	movs	r3, #0
 80057ea:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80057ec:	2376      	movs	r3, #118	; 0x76
 80057ee:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681d      	ldr	r5, [r3, #0]
 80057f4:	466c      	mov	r4, sp
 80057f6:	f107 0314 	add.w	r3, r7, #20
 80057fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005802:	f107 0308 	add.w	r3, r7, #8
 8005806:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005808:	4628      	mov	r0, r5
 800580a:	f001 fc7b 	bl	8007104 <SDIO_Init>
 800580e:	4603      	mov	r3, r0
 8005810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e031      	b.n	8005884 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005820:	4b1a      	ldr	r3, [pc, #104]	; (800588c <HAL_SD_InitCard+0xbc>)
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4618      	mov	r0, r3
 800582c:	f001 fcb3 	bl	8007196 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005830:	4b16      	ldr	r3, [pc, #88]	; (800588c <HAL_SD_InitCard+0xbc>)
 8005832:	2201      	movs	r2, #1
 8005834:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fe80 	bl	800653c <SD_PowerON>
 800583c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00b      	beq.n	800585c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	431a      	orrs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e013      	b.n	8005884 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fd9f 	bl	80063a0 <SD_InitCard>
 8005862:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00b      	beq.n	8005882 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e000      	b.n	8005884 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3728      	adds	r7, #40	; 0x28
 8005888:	46bd      	mov	sp, r7
 800588a:	bdb0      	pop	{r4, r5, r7, pc}
 800588c:	422580a0 	.word	0x422580a0

08005890 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b092      	sub	sp, #72	; 0x48
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800589e:	f7fc fc35 	bl	800210c <HAL_GetTick>
 80058a2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d107      	bne.n	80058c2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e1d7      	b.n	8005c72 <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	f040 81ca 	bne.w	8005c64 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80058d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	441a      	add	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d907      	bls.n	80058f4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e1be      	b.n	8005c72 <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2203      	movs	r2, #3
 80058f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2200      	movs	r2, #0
 8005902:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005908:	2b01      	cmp	r3, #1
 800590a:	d002      	beq.n	8005912 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800590c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590e:	025b      	lsls	r3, r3, #9
 8005910:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f44f 7100 	mov.w	r1, #512	; 0x200
 800591a:	4618      	mov	r0, r3
 800591c:	f001 fcce 	bl	80072bc <SDMMC_CmdBlockLength>
 8005920:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8005922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00f      	beq.n	8005948 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a9a      	ldr	r2, [pc, #616]	; (8005b98 <HAL_SD_ReadBlocks+0x308>)
 800592e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005936:	431a      	orrs	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e194      	b.n	8005c72 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005948:	f04f 33ff 	mov.w	r3, #4294967295
 800594c:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	025b      	lsls	r3, r3, #9
 8005952:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005954:	2390      	movs	r3, #144	; 0x90
 8005956:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005958:	2302      	movs	r3, #2
 800595a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800595c:	2300      	movs	r3, #0
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005960:	2301      	movs	r3, #1
 8005962:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f107 0214 	add.w	r2, r7, #20
 800596c:	4611      	mov	r1, r2
 800596e:	4618      	mov	r0, r3
 8005970:	f001 fc78 	bl	8007264 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d90a      	bls.n	8005990 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2202      	movs	r2, #2
 800597e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005986:	4618      	mov	r0, r3
 8005988:	f001 fcdc 	bl	8007344 <SDMMC_CmdReadMultiBlock>
 800598c:	6478      	str	r0, [r7, #68]	; 0x44
 800598e:	e009      	b.n	80059a4 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2201      	movs	r2, #1
 8005994:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800599c:	4618      	mov	r0, r3
 800599e:	f001 fcaf 	bl	8007300 <SDMMC_CmdReadSingleBlock>
 80059a2:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80059a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d012      	beq.n	80059d0 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a7a      	ldr	r2, [pc, #488]	; (8005b98 <HAL_SD_ReadBlocks+0x308>)
 80059b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b8:	431a      	orrs	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e150      	b.n	8005c72 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80059d4:	e061      	b.n	8005a9a <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d03c      	beq.n	8005a5e <HAL_SD_ReadBlocks+0x1ce>
 80059e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d039      	beq.n	8005a5e <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80059ea:	2300      	movs	r3, #0
 80059ec:	643b      	str	r3, [r7, #64]	; 0x40
 80059ee:	e033      	b.n	8005a58 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f001 fbb0 	bl	800715a <SDIO_ReadFIFO>
 80059fa:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80059fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a02:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a06:	3301      	adds	r3, #1
 8005a08:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	0a1b      	lsrs	r3, r3, #8
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a18:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a22:	3b01      	subs	r3, #1
 8005a24:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a28:	0c1b      	lsrs	r3, r3, #16
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a32:	3301      	adds	r3, #1
 8005a34:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	0e1b      	lsrs	r3, r3, #24
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a44:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a48:	3301      	adds	r3, #1
 8005a4a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a54:	3301      	adds	r3, #1
 8005a56:	643b      	str	r3, [r7, #64]	; 0x40
 8005a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a5a:	2b07      	cmp	r3, #7
 8005a5c:	d9c8      	bls.n	80059f0 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005a5e:	f7fc fb55 	bl	800210c <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d902      	bls.n	8005a74 <HAL_SD_ReadBlocks+0x1e4>
 8005a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d112      	bne.n	8005a9a <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a47      	ldr	r2, [pc, #284]	; (8005b98 <HAL_SD_ReadBlocks+0x308>)
 8005a7a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e0eb      	b.n	8005c72 <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa0:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d096      	beq.n	80059d6 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d022      	beq.n	8005afc <HAL_SD_ReadBlocks+0x26c>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d91f      	bls.n	8005afc <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d01b      	beq.n	8005afc <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f001 fca1 	bl	8007410 <SDMMC_CmdStopTransfer>
 8005ace:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d012      	beq.n	8005afc <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a2f      	ldr	r2, [pc, #188]	; (8005b98 <HAL_SD_ReadBlocks+0x308>)
 8005adc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e0ba      	b.n	8005c72 <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b02:	f003 0308 	and.w	r3, r3, #8
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d012      	beq.n	8005b30 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a22      	ldr	r2, [pc, #136]	; (8005b98 <HAL_SD_ReadBlocks+0x308>)
 8005b10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	f043 0208 	orr.w	r2, r3, #8
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e0a0      	b.n	8005c72 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d012      	beq.n	8005b64 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a15      	ldr	r2, [pc, #84]	; (8005b98 <HAL_SD_ReadBlocks+0x308>)
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	f043 0202 	orr.w	r2, r3, #2
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e086      	b.n	8005c72 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d063      	beq.n	8005c3a <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a08      	ldr	r2, [pc, #32]	; (8005b98 <HAL_SD_ReadBlocks+0x308>)
 8005b78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	f043 0220 	orr.w	r2, r3, #32
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e06c      	b.n	8005c72 <HAL_SD_ReadBlocks+0x3e2>
 8005b98:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f001 fada 	bl	800715a <SDIO_ReadFIFO>
 8005ba6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bae:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbe:	0a1b      	lsrs	r3, r3, #8
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc8:	3301      	adds	r3, #1
 8005bca:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd4:	0c1b      	lsrs	r3, r3, #16
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bda:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bde:	3301      	adds	r3, #1
 8005be0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be4:	3b01      	subs	r3, #1
 8005be6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bea:	0e1b      	lsrs	r3, r3, #24
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005bfe:	f7fc fa85 	bl	800210c <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d902      	bls.n	8005c14 <HAL_SD_ReadBlocks+0x384>
 8005c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d112      	bne.n	8005c3a <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a18      	ldr	r2, [pc, #96]	; (8005c7c <HAL_SD_ReadBlocks+0x3ec>)
 8005c1a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c20:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e01b      	b.n	8005c72 <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <HAL_SD_ReadBlocks+0x3be>
 8005c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1a6      	bne.n	8005b9c <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f240 523a 	movw	r2, #1338	; 0x53a
 8005c56:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	e006      	b.n	8005c72 <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
  }
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3748      	adds	r7, #72	; 0x48
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	004005ff 	.word	0x004005ff

08005c80 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b092      	sub	sp, #72	; 0x48
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005c8e:	f7fc fa3d 	bl	800210c <HAL_GetTick>
 8005c92:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d107      	bne.n	8005cb2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e182      	b.n	8005fb8 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	f040 8175 	bne.w	8005faa <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005cc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	441a      	add	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d907      	bls.n	8005ce4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e169      	b.n	8005fb8 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2203      	movs	r2, #3
 8005ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d002      	beq.n	8005d02 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	025b      	lsls	r3, r3, #9
 8005d00:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f001 fad6 	bl	80072bc <SDMMC_CmdBlockLength>
 8005d10:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00f      	beq.n	8005d38 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a9c      	ldr	r2, [pc, #624]	; (8005f90 <HAL_SD_WriteBlocks+0x310>)
 8005d1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d26:	431a      	orrs	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e13f      	b.n	8005fb8 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d38:	f04f 33ff 	mov.w	r3, #4294967295
 8005d3c:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	025b      	lsls	r3, r3, #9
 8005d42:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005d44:	2390      	movs	r3, #144	; 0x90
 8005d46:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005d50:	2301      	movs	r3, #1
 8005d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f107 0218 	add.w	r2, r7, #24
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f001 fa80 	bl	8007264 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d90a      	bls.n	8005d80 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d76:	4618      	mov	r0, r3
 8005d78:	f001 fb28 	bl	80073cc <SDMMC_CmdWriteMultiBlock>
 8005d7c:	6478      	str	r0, [r7, #68]	; 0x44
 8005d7e:	e009      	b.n	8005d94 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2210      	movs	r2, #16
 8005d84:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f001 fafb 	bl	8007388 <SDMMC_CmdWriteSingleBlock>
 8005d92:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d012      	beq.n	8005dc0 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a7c      	ldr	r2, [pc, #496]	; (8005f90 <HAL_SD_WriteBlocks+0x310>)
 8005da0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005da8:	431a      	orrs	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e0fb      	b.n	8005fb8 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005dc4:	e065      	b.n	8005e92 <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d040      	beq.n	8005e56 <HAL_SD_WriteBlocks+0x1d6>
 8005dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d03d      	beq.n	8005e56 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005dda:	2300      	movs	r3, #0
 8005ddc:	643b      	str	r3, [r7, #64]	; 0x40
 8005dde:	e037      	b.n	8005e50 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8005de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de8:	3301      	adds	r3, #1
 8005dea:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dee:	3b01      	subs	r3, #1
 8005df0:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	021a      	lsls	r2, r3, #8
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e00:	3301      	adds	r3, #1
 8005e02:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e06:	3b01      	subs	r3, #1
 8005e08:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	041a      	lsls	r2, r3, #16
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e18:	3301      	adds	r3, #1
 8005e1a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	061a      	lsls	r2, r3, #24
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e30:	3301      	adds	r3, #1
 8005e32:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e36:	3b01      	subs	r3, #1
 8005e38:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f107 0214 	add.w	r2, r7, #20
 8005e42:	4611      	mov	r1, r2
 8005e44:	4618      	mov	r0, r3
 8005e46:	f001 f995 	bl	8007174 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	643b      	str	r3, [r7, #64]	; 0x40
 8005e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e52:	2b07      	cmp	r3, #7
 8005e54:	d9c4      	bls.n	8005de0 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005e56:	f7fc f959 	bl	800210c <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d902      	bls.n	8005e6c <HAL_SD_WriteBlocks+0x1ec>
 8005e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d112      	bne.n	8005e92 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a47      	ldr	r2, [pc, #284]	; (8005f90 <HAL_SD_WriteBlocks+0x310>)
 8005e72:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e092      	b.n	8005fb8 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e98:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d092      	beq.n	8005dc6 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d022      	beq.n	8005ef4 <HAL_SD_WriteBlocks+0x274>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d91f      	bls.n	8005ef4 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d01b      	beq.n	8005ef4 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 faa5 	bl	8007410 <SDMMC_CmdStopTransfer>
 8005ec6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d012      	beq.n	8005ef4 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a2f      	ldr	r2, [pc, #188]	; (8005f90 <HAL_SD_WriteBlocks+0x310>)
 8005ed4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005edc:	431a      	orrs	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e061      	b.n	8005fb8 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d012      	beq.n	8005f28 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a22      	ldr	r2, [pc, #136]	; (8005f90 <HAL_SD_WriteBlocks+0x310>)
 8005f08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	f043 0208 	orr.w	r2, r3, #8
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e047      	b.n	8005fb8 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d012      	beq.n	8005f5c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a15      	ldr	r2, [pc, #84]	; (8005f90 <HAL_SD_WriteBlocks+0x310>)
 8005f3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	f043 0202 	orr.w	r2, r3, #2
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e02d      	b.n	8005fb8 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f62:	f003 0310 	and.w	r3, r3, #16
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d014      	beq.n	8005f94 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a08      	ldr	r2, [pc, #32]	; (8005f90 <HAL_SD_WriteBlocks+0x310>)
 8005f70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f76:	f043 0210 	orr.w	r2, r3, #16
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e013      	b.n	8005fb8 <HAL_SD_WriteBlocks+0x338>
 8005f90:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f240 523a 	movw	r2, #1338	; 0x53a
 8005f9c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	e006      	b.n	8005fb8 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
  }
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3748      	adds	r7, #72	; 0x48
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fce:	0f9b      	lsrs	r3, r3, #30
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fda:	0e9b      	lsrs	r3, r3, #26
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fec:	0e1b      	lsrs	r3, r3, #24
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	f003 0303 	and.w	r3, r3, #3
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ffe:	0c1b      	lsrs	r3, r3, #16
 8006000:	b2da      	uxtb	r2, r3
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800600a:	0a1b      	lsrs	r3, r3, #8
 800600c:	b2da      	uxtb	r2, r3
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006016:	b2da      	uxtb	r2, r3
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006020:	0d1b      	lsrs	r3, r3, #20
 8006022:	b29a      	uxth	r2, r3
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800602c:	0c1b      	lsrs	r3, r3, #16
 800602e:	b2db      	uxtb	r3, r3
 8006030:	f003 030f 	and.w	r3, r3, #15
 8006034:	b2da      	uxtb	r2, r3
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800603e:	0bdb      	lsrs	r3, r3, #15
 8006040:	b2db      	uxtb	r3, r3
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	b2da      	uxtb	r2, r3
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006050:	0b9b      	lsrs	r3, r3, #14
 8006052:	b2db      	uxtb	r3, r3
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	b2da      	uxtb	r2, r3
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006062:	0b5b      	lsrs	r3, r3, #13
 8006064:	b2db      	uxtb	r3, r3
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	b2da      	uxtb	r2, r3
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006074:	0b1b      	lsrs	r3, r3, #12
 8006076:	b2db      	uxtb	r3, r3
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	b2da      	uxtb	r2, r3
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2200      	movs	r2, #0
 8006086:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608c:	2b00      	cmp	r3, #0
 800608e:	d163      	bne.n	8006158 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006094:	009a      	lsls	r2, r3, #2
 8006096:	f640 73fc 	movw	r3, #4092	; 0xffc
 800609a:	4013      	ands	r3, r2
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80060a0:	0f92      	lsrs	r2, r2, #30
 80060a2:	431a      	orrs	r2, r3
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ac:	0edb      	lsrs	r3, r3, #27
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060be:	0e1b      	lsrs	r3, r3, #24
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	f003 0307 	and.w	r3, r3, #7
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060d0:	0d5b      	lsrs	r3, r3, #21
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	f003 0307 	and.w	r3, r3, #7
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060e2:	0c9b      	lsrs	r3, r3, #18
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060f4:	0bdb      	lsrs	r3, r3, #15
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	7e1b      	ldrb	r3, [r3, #24]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	f003 0307 	and.w	r3, r3, #7
 8006116:	3302      	adds	r3, #2
 8006118:	2201      	movs	r2, #1
 800611a:	fa02 f303 	lsl.w	r3, r2, r3
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006122:	fb02 f203 	mul.w	r2, r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	7a1b      	ldrb	r3, [r3, #8]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	2201      	movs	r2, #1
 8006136:	409a      	lsls	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006144:	0a52      	lsrs	r2, r2, #9
 8006146:	fb02 f203 	mul.w	r2, r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006154:	661a      	str	r2, [r3, #96]	; 0x60
 8006156:	e031      	b.n	80061bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615c:	2b01      	cmp	r3, #1
 800615e:	d11d      	bne.n	800619c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006164:	041b      	lsls	r3, r3, #16
 8006166:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800616e:	0c1b      	lsrs	r3, r3, #16
 8006170:	431a      	orrs	r2, r3
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	3301      	adds	r3, #1
 800617c:	029a      	lsls	r2, r3, #10
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006190:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	661a      	str	r2, [r3, #96]	; 0x60
 800619a:	e00f      	b.n	80061bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a58      	ldr	r2, [pc, #352]	; (8006304 <HAL_SD_GetCardCSD+0x344>)
 80061a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e09d      	b.n	80062f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061c0:	0b9b      	lsrs	r3, r3, #14
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061d2:	09db      	lsrs	r3, r3, #7
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f4:	0fdb      	lsrs	r3, r3, #31
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006200:	0f5b      	lsrs	r3, r3, #29
 8006202:	b2db      	uxtb	r3, r3
 8006204:	f003 0303 	and.w	r3, r3, #3
 8006208:	b2da      	uxtb	r2, r3
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006212:	0e9b      	lsrs	r3, r3, #26
 8006214:	b2db      	uxtb	r3, r3
 8006216:	f003 0307 	and.w	r3, r3, #7
 800621a:	b2da      	uxtb	r2, r3
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006224:	0d9b      	lsrs	r3, r3, #22
 8006226:	b2db      	uxtb	r3, r3
 8006228:	f003 030f 	and.w	r3, r3, #15
 800622c:	b2da      	uxtb	r2, r3
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006236:	0d5b      	lsrs	r3, r3, #21
 8006238:	b2db      	uxtb	r3, r3
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	b2da      	uxtb	r2, r3
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006252:	0c1b      	lsrs	r3, r3, #16
 8006254:	b2db      	uxtb	r3, r3
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	b2da      	uxtb	r2, r3
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006266:	0bdb      	lsrs	r3, r3, #15
 8006268:	b2db      	uxtb	r3, r3
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	b2da      	uxtb	r2, r3
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627a:	0b9b      	lsrs	r3, r3, #14
 800627c:	b2db      	uxtb	r3, r3
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	b2da      	uxtb	r2, r3
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628e:	0b5b      	lsrs	r3, r3, #13
 8006290:	b2db      	uxtb	r3, r3
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	b2da      	uxtb	r2, r3
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a2:	0b1b      	lsrs	r3, r3, #12
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b6:	0a9b      	lsrs	r3, r3, #10
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ca:	0a1b      	lsrs	r3, r3, #8
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062de:	085b      	lsrs	r3, r3, #1
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	004005ff 	.word	0x004005ff

08006308 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006368:	2300      	movs	r3, #0
 800636a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800636c:	f107 030c 	add.w	r3, r7, #12
 8006370:	4619      	mov	r1, r3
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f970 	bl	8006658 <SD_SendStatus>
 8006378:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d005      	beq.n	800638c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	431a      	orrs	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	0a5b      	lsrs	r3, r3, #9
 8006390:	f003 030f 	and.w	r3, r3, #15
 8006394:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006396:	693b      	ldr	r3, [r7, #16]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80063a0:	b5b0      	push	{r4, r5, r7, lr}
 80063a2:	b094      	sub	sp, #80	; 0x50
 80063a4:	af04      	add	r7, sp, #16
 80063a6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80063a8:	2301      	movs	r3, #1
 80063aa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 feff 	bl	80071b4 <SDIO_GetPowerState>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d102      	bne.n	80063c2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80063bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80063c0:	e0b7      	b.n	8006532 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	2b03      	cmp	r3, #3
 80063c8:	d02f      	beq.n	800642a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f001 f8e5 	bl	800759e <SDMMC_CmdSendCID>
 80063d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80063d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <SD_InitCard+0x40>
    {
      return errorstate;
 80063dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063de:	e0a8      	b.n	8006532 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2100      	movs	r1, #0
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 ff29 	bl	800723e <SDIO_GetResponse>
 80063ec:	4602      	mov	r2, r0
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2104      	movs	r1, #4
 80063f8:	4618      	mov	r0, r3
 80063fa:	f000 ff20 	bl	800723e <SDIO_GetResponse>
 80063fe:	4602      	mov	r2, r0
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2108      	movs	r1, #8
 800640a:	4618      	mov	r0, r3
 800640c:	f000 ff17 	bl	800723e <SDIO_GetResponse>
 8006410:	4602      	mov	r2, r0
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	210c      	movs	r1, #12
 800641c:	4618      	mov	r0, r3
 800641e:	f000 ff0e 	bl	800723e <SDIO_GetResponse>
 8006422:	4602      	mov	r2, r0
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642e:	2b03      	cmp	r3, #3
 8006430:	d00d      	beq.n	800644e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f107 020e 	add.w	r2, r7, #14
 800643a:	4611      	mov	r1, r2
 800643c:	4618      	mov	r0, r3
 800643e:	f001 f8eb 	bl	8007618 <SDMMC_CmdSetRelAdd>
 8006442:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <SD_InitCard+0xae>
    {
      return errorstate;
 800644a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644c:	e071      	b.n	8006532 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006452:	2b03      	cmp	r3, #3
 8006454:	d036      	beq.n	80064c4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006456:	89fb      	ldrh	r3, [r7, #14]
 8006458:	461a      	mov	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006466:	041b      	lsls	r3, r3, #16
 8006468:	4619      	mov	r1, r3
 800646a:	4610      	mov	r0, r2
 800646c:	f001 f8b5 	bl	80075da <SDMMC_CmdSendCSD>
 8006470:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800647a:	e05a      	b.n	8006532 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2100      	movs	r1, #0
 8006482:	4618      	mov	r0, r3
 8006484:	f000 fedb 	bl	800723e <SDIO_GetResponse>
 8006488:	4602      	mov	r2, r0
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2104      	movs	r1, #4
 8006494:	4618      	mov	r0, r3
 8006496:	f000 fed2 	bl	800723e <SDIO_GetResponse>
 800649a:	4602      	mov	r2, r0
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2108      	movs	r1, #8
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 fec9 	bl	800723e <SDIO_GetResponse>
 80064ac:	4602      	mov	r2, r0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	210c      	movs	r1, #12
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 fec0 	bl	800723e <SDIO_GetResponse>
 80064be:	4602      	mov	r2, r0
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2104      	movs	r1, #4
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 feb7 	bl	800723e <SDIO_GetResponse>
 80064d0:	4603      	mov	r3, r0
 80064d2:	0d1a      	lsrs	r2, r3, #20
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80064d8:	f107 0310 	add.w	r3, r7, #16
 80064dc:	4619      	mov	r1, r3
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff fd6e 	bl	8005fc0 <HAL_SD_GetCardCSD>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80064ee:	e020      	b.n	8006532 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6819      	ldr	r1, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f8:	041b      	lsls	r3, r3, #16
 80064fa:	f04f 0400 	mov.w	r4, #0
 80064fe:	461a      	mov	r2, r3
 8006500:	4623      	mov	r3, r4
 8006502:	4608      	mov	r0, r1
 8006504:	f000 ffa6 	bl	8007454 <SDMMC_CmdSelDesel>
 8006508:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800650a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <SD_InitCard+0x174>
  {
    return errorstate;
 8006510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006512:	e00e      	b.n	8006532 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681d      	ldr	r5, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	466c      	mov	r4, sp
 800651c:	f103 0210 	add.w	r2, r3, #16
 8006520:	ca07      	ldmia	r2, {r0, r1, r2}
 8006522:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006526:	3304      	adds	r3, #4
 8006528:	cb0e      	ldmia	r3, {r1, r2, r3}
 800652a:	4628      	mov	r0, r5
 800652c:	f000 fdea 	bl	8007104 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3740      	adds	r7, #64	; 0x40
 8006536:	46bd      	mov	sp, r7
 8006538:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800653c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	2300      	movs	r3, #0
 800654e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4618      	mov	r0, r3
 8006556:	f000 ffa0 	bl	800749a <SDMMC_CmdGoIdleState>
 800655a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	e072      	b.n	800664c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4618      	mov	r0, r3
 800656c:	f000 ffb3 	bl	80074d6 <SDMMC_CmdOperCond>
 8006570:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00d      	beq.n	8006594 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4618      	mov	r0, r3
 8006584:	f000 ff89 	bl	800749a <SDMMC_CmdGoIdleState>
 8006588:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d004      	beq.n	800659a <SD_PowerON+0x5e>
    {
      return errorstate;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	e05b      	b.n	800664c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d137      	bne.n	8006612 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2100      	movs	r1, #0
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 ffb3 	bl	8007514 <SDMMC_CmdAppCommand>
 80065ae:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d02d      	beq.n	8006612 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80065ba:	e047      	b.n	800664c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2100      	movs	r1, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 ffa6 	bl	8007514 <SDMMC_CmdAppCommand>
 80065c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <SD_PowerON+0x98>
    {
      return errorstate;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	e03b      	b.n	800664c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	491e      	ldr	r1, [pc, #120]	; (8006654 <SD_PowerON+0x118>)
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 ffbc 	bl	8007558 <SDMMC_CmdAppOperCommand>
 80065e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80065ec:	e02e      	b.n	800664c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2100      	movs	r1, #0
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 fe22 	bl	800723e <SDIO_GetResponse>
 80065fa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	0fdb      	lsrs	r3, r3, #31
 8006600:	2b01      	cmp	r3, #1
 8006602:	d101      	bne.n	8006608 <SD_PowerON+0xcc>
 8006604:	2301      	movs	r3, #1
 8006606:	e000      	b.n	800660a <SD_PowerON+0xce>
 8006608:	2300      	movs	r3, #0
 800660a:	613b      	str	r3, [r7, #16]

    count++;
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	3301      	adds	r3, #1
 8006610:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006618:	4293      	cmp	r3, r2
 800661a:	d802      	bhi.n	8006622 <SD_PowerON+0xe6>
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0cc      	beq.n	80065bc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006628:	4293      	cmp	r3, r2
 800662a:	d902      	bls.n	8006632 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800662c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006630:	e00c      	b.n	800664c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	645a      	str	r2, [r3, #68]	; 0x44
 8006642:	e002      	b.n	800664a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	c1100000 	.word	0xc1100000

08006658 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d102      	bne.n	800666e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006668:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800666c:	e018      	b.n	80066a0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006676:	041b      	lsls	r3, r3, #16
 8006678:	4619      	mov	r1, r3
 800667a:	4610      	mov	r0, r2
 800667c:	f000 ffed 	bl	800765a <SDMMC_CmdSendStatus>
 8006680:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <SD_SendStatus+0x34>
  {
    return errorstate;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	e009      	b.n	80066a0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2100      	movs	r1, #0
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fdd3 	bl	800723e <SDIO_GetResponse>
 8006698:	4602      	mov	r2, r0
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e034      	b.n	8006728 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f7fb fb98 	bl	8001e08 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	3308      	adds	r3, #8
 80066e0:	4619      	mov	r1, r3
 80066e2:	4610      	mov	r0, r2
 80066e4:	f000 fc0a 	bl	8006efc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6818      	ldr	r0, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	461a      	mov	r2, r3
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	f000 fc72 	bl	8006fdc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6858      	ldr	r0, [r3, #4]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006704:	6879      	ldr	r1, [r7, #4]
 8006706:	f000 fcbd 	bl	8007084 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	6892      	ldr	r2, [r2, #8]
 8006712:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	6892      	ldr	r2, [r2, #8]
 800671e:	f041 0101 	orr.w	r1, r1, #1
 8006722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e03f      	b.n	80067c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7fb fa68 	bl	8001c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2224      	movs	r2, #36	; 0x24
 8006760:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68da      	ldr	r2, [r3, #12]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f829 	bl	80067cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	695a      	ldr	r2, [r3, #20]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	431a      	orrs	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	431a      	orrs	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	4313      	orrs	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800680e:	f023 030c 	bic.w	r3, r3, #12
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	6812      	ldr	r2, [r2, #0]
 8006816:	68f9      	ldr	r1, [r7, #12]
 8006818:	430b      	orrs	r3, r1
 800681a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	699a      	ldr	r2, [r3, #24]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800683a:	f040 8199 	bne.w	8006b70 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4ac6      	ldr	r2, [pc, #792]	; (8006b5c <UART_SetConfig+0x390>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00f      	beq.n	8006868 <UART_SetConfig+0x9c>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4ac4      	ldr	r2, [pc, #784]	; (8006b60 <UART_SetConfig+0x394>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d00a      	beq.n	8006868 <UART_SetConfig+0x9c>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4ac3      	ldr	r2, [pc, #780]	; (8006b64 <UART_SetConfig+0x398>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d005      	beq.n	8006868 <UART_SetConfig+0x9c>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4ac1      	ldr	r2, [pc, #772]	; (8006b68 <UART_SetConfig+0x39c>)
 8006862:	4293      	cmp	r3, r2
 8006864:	f040 80bd 	bne.w	80069e2 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006868:	f7fe f950 	bl	8004b0c <HAL_RCC_GetPCLK2Freq>
 800686c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	461d      	mov	r5, r3
 8006872:	f04f 0600 	mov.w	r6, #0
 8006876:	46a8      	mov	r8, r5
 8006878:	46b1      	mov	r9, r6
 800687a:	eb18 0308 	adds.w	r3, r8, r8
 800687e:	eb49 0409 	adc.w	r4, r9, r9
 8006882:	4698      	mov	r8, r3
 8006884:	46a1      	mov	r9, r4
 8006886:	eb18 0805 	adds.w	r8, r8, r5
 800688a:	eb49 0906 	adc.w	r9, r9, r6
 800688e:	f04f 0100 	mov.w	r1, #0
 8006892:	f04f 0200 	mov.w	r2, #0
 8006896:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800689a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800689e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068a2:	4688      	mov	r8, r1
 80068a4:	4691      	mov	r9, r2
 80068a6:	eb18 0005 	adds.w	r0, r8, r5
 80068aa:	eb49 0106 	adc.w	r1, r9, r6
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	461d      	mov	r5, r3
 80068b4:	f04f 0600 	mov.w	r6, #0
 80068b8:	196b      	adds	r3, r5, r5
 80068ba:	eb46 0406 	adc.w	r4, r6, r6
 80068be:	461a      	mov	r2, r3
 80068c0:	4623      	mov	r3, r4
 80068c2:	f7f9 fcfd 	bl	80002c0 <__aeabi_uldivmod>
 80068c6:	4603      	mov	r3, r0
 80068c8:	460c      	mov	r4, r1
 80068ca:	461a      	mov	r2, r3
 80068cc:	4ba7      	ldr	r3, [pc, #668]	; (8006b6c <UART_SetConfig+0x3a0>)
 80068ce:	fba3 2302 	umull	r2, r3, r3, r2
 80068d2:	095b      	lsrs	r3, r3, #5
 80068d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	461d      	mov	r5, r3
 80068dc:	f04f 0600 	mov.w	r6, #0
 80068e0:	46a9      	mov	r9, r5
 80068e2:	46b2      	mov	sl, r6
 80068e4:	eb19 0309 	adds.w	r3, r9, r9
 80068e8:	eb4a 040a 	adc.w	r4, sl, sl
 80068ec:	4699      	mov	r9, r3
 80068ee:	46a2      	mov	sl, r4
 80068f0:	eb19 0905 	adds.w	r9, r9, r5
 80068f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80068f8:	f04f 0100 	mov.w	r1, #0
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006904:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006908:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800690c:	4689      	mov	r9, r1
 800690e:	4692      	mov	sl, r2
 8006910:	eb19 0005 	adds.w	r0, r9, r5
 8006914:	eb4a 0106 	adc.w	r1, sl, r6
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	461d      	mov	r5, r3
 800691e:	f04f 0600 	mov.w	r6, #0
 8006922:	196b      	adds	r3, r5, r5
 8006924:	eb46 0406 	adc.w	r4, r6, r6
 8006928:	461a      	mov	r2, r3
 800692a:	4623      	mov	r3, r4
 800692c:	f7f9 fcc8 	bl	80002c0 <__aeabi_uldivmod>
 8006930:	4603      	mov	r3, r0
 8006932:	460c      	mov	r4, r1
 8006934:	461a      	mov	r2, r3
 8006936:	4b8d      	ldr	r3, [pc, #564]	; (8006b6c <UART_SetConfig+0x3a0>)
 8006938:	fba3 1302 	umull	r1, r3, r3, r2
 800693c:	095b      	lsrs	r3, r3, #5
 800693e:	2164      	movs	r1, #100	; 0x64
 8006940:	fb01 f303 	mul.w	r3, r1, r3
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	3332      	adds	r3, #50	; 0x32
 800694a:	4a88      	ldr	r2, [pc, #544]	; (8006b6c <UART_SetConfig+0x3a0>)
 800694c:	fba2 2303 	umull	r2, r3, r2, r3
 8006950:	095b      	lsrs	r3, r3, #5
 8006952:	005b      	lsls	r3, r3, #1
 8006954:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006958:	4498      	add	r8, r3
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	461d      	mov	r5, r3
 800695e:	f04f 0600 	mov.w	r6, #0
 8006962:	46a9      	mov	r9, r5
 8006964:	46b2      	mov	sl, r6
 8006966:	eb19 0309 	adds.w	r3, r9, r9
 800696a:	eb4a 040a 	adc.w	r4, sl, sl
 800696e:	4699      	mov	r9, r3
 8006970:	46a2      	mov	sl, r4
 8006972:	eb19 0905 	adds.w	r9, r9, r5
 8006976:	eb4a 0a06 	adc.w	sl, sl, r6
 800697a:	f04f 0100 	mov.w	r1, #0
 800697e:	f04f 0200 	mov.w	r2, #0
 8006982:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006986:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800698a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800698e:	4689      	mov	r9, r1
 8006990:	4692      	mov	sl, r2
 8006992:	eb19 0005 	adds.w	r0, r9, r5
 8006996:	eb4a 0106 	adc.w	r1, sl, r6
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	461d      	mov	r5, r3
 80069a0:	f04f 0600 	mov.w	r6, #0
 80069a4:	196b      	adds	r3, r5, r5
 80069a6:	eb46 0406 	adc.w	r4, r6, r6
 80069aa:	461a      	mov	r2, r3
 80069ac:	4623      	mov	r3, r4
 80069ae:	f7f9 fc87 	bl	80002c0 <__aeabi_uldivmod>
 80069b2:	4603      	mov	r3, r0
 80069b4:	460c      	mov	r4, r1
 80069b6:	461a      	mov	r2, r3
 80069b8:	4b6c      	ldr	r3, [pc, #432]	; (8006b6c <UART_SetConfig+0x3a0>)
 80069ba:	fba3 1302 	umull	r1, r3, r3, r2
 80069be:	095b      	lsrs	r3, r3, #5
 80069c0:	2164      	movs	r1, #100	; 0x64
 80069c2:	fb01 f303 	mul.w	r3, r1, r3
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	00db      	lsls	r3, r3, #3
 80069ca:	3332      	adds	r3, #50	; 0x32
 80069cc:	4a67      	ldr	r2, [pc, #412]	; (8006b6c <UART_SetConfig+0x3a0>)
 80069ce:	fba2 2303 	umull	r2, r3, r2, r3
 80069d2:	095b      	lsrs	r3, r3, #5
 80069d4:	f003 0207 	and.w	r2, r3, #7
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4442      	add	r2, r8
 80069de:	609a      	str	r2, [r3, #8]
 80069e0:	e27d      	b.n	8006ede <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069e2:	f7fe f87f 	bl	8004ae4 <HAL_RCC_GetPCLK1Freq>
 80069e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	461d      	mov	r5, r3
 80069ec:	f04f 0600 	mov.w	r6, #0
 80069f0:	46a8      	mov	r8, r5
 80069f2:	46b1      	mov	r9, r6
 80069f4:	eb18 0308 	adds.w	r3, r8, r8
 80069f8:	eb49 0409 	adc.w	r4, r9, r9
 80069fc:	4698      	mov	r8, r3
 80069fe:	46a1      	mov	r9, r4
 8006a00:	eb18 0805 	adds.w	r8, r8, r5
 8006a04:	eb49 0906 	adc.w	r9, r9, r6
 8006a08:	f04f 0100 	mov.w	r1, #0
 8006a0c:	f04f 0200 	mov.w	r2, #0
 8006a10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a1c:	4688      	mov	r8, r1
 8006a1e:	4691      	mov	r9, r2
 8006a20:	eb18 0005 	adds.w	r0, r8, r5
 8006a24:	eb49 0106 	adc.w	r1, r9, r6
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	461d      	mov	r5, r3
 8006a2e:	f04f 0600 	mov.w	r6, #0
 8006a32:	196b      	adds	r3, r5, r5
 8006a34:	eb46 0406 	adc.w	r4, r6, r6
 8006a38:	461a      	mov	r2, r3
 8006a3a:	4623      	mov	r3, r4
 8006a3c:	f7f9 fc40 	bl	80002c0 <__aeabi_uldivmod>
 8006a40:	4603      	mov	r3, r0
 8006a42:	460c      	mov	r4, r1
 8006a44:	461a      	mov	r2, r3
 8006a46:	4b49      	ldr	r3, [pc, #292]	; (8006b6c <UART_SetConfig+0x3a0>)
 8006a48:	fba3 2302 	umull	r2, r3, r3, r2
 8006a4c:	095b      	lsrs	r3, r3, #5
 8006a4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	461d      	mov	r5, r3
 8006a56:	f04f 0600 	mov.w	r6, #0
 8006a5a:	46a9      	mov	r9, r5
 8006a5c:	46b2      	mov	sl, r6
 8006a5e:	eb19 0309 	adds.w	r3, r9, r9
 8006a62:	eb4a 040a 	adc.w	r4, sl, sl
 8006a66:	4699      	mov	r9, r3
 8006a68:	46a2      	mov	sl, r4
 8006a6a:	eb19 0905 	adds.w	r9, r9, r5
 8006a6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a72:	f04f 0100 	mov.w	r1, #0
 8006a76:	f04f 0200 	mov.w	r2, #0
 8006a7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a86:	4689      	mov	r9, r1
 8006a88:	4692      	mov	sl, r2
 8006a8a:	eb19 0005 	adds.w	r0, r9, r5
 8006a8e:	eb4a 0106 	adc.w	r1, sl, r6
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	461d      	mov	r5, r3
 8006a98:	f04f 0600 	mov.w	r6, #0
 8006a9c:	196b      	adds	r3, r5, r5
 8006a9e:	eb46 0406 	adc.w	r4, r6, r6
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	4623      	mov	r3, r4
 8006aa6:	f7f9 fc0b 	bl	80002c0 <__aeabi_uldivmod>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	460c      	mov	r4, r1
 8006aae:	461a      	mov	r2, r3
 8006ab0:	4b2e      	ldr	r3, [pc, #184]	; (8006b6c <UART_SetConfig+0x3a0>)
 8006ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8006ab6:	095b      	lsrs	r3, r3, #5
 8006ab8:	2164      	movs	r1, #100	; 0x64
 8006aba:	fb01 f303 	mul.w	r3, r1, r3
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	00db      	lsls	r3, r3, #3
 8006ac2:	3332      	adds	r3, #50	; 0x32
 8006ac4:	4a29      	ldr	r2, [pc, #164]	; (8006b6c <UART_SetConfig+0x3a0>)
 8006ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aca:	095b      	lsrs	r3, r3, #5
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ad2:	4498      	add	r8, r3
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	461d      	mov	r5, r3
 8006ad8:	f04f 0600 	mov.w	r6, #0
 8006adc:	46a9      	mov	r9, r5
 8006ade:	46b2      	mov	sl, r6
 8006ae0:	eb19 0309 	adds.w	r3, r9, r9
 8006ae4:	eb4a 040a 	adc.w	r4, sl, sl
 8006ae8:	4699      	mov	r9, r3
 8006aea:	46a2      	mov	sl, r4
 8006aec:	eb19 0905 	adds.w	r9, r9, r5
 8006af0:	eb4a 0a06 	adc.w	sl, sl, r6
 8006af4:	f04f 0100 	mov.w	r1, #0
 8006af8:	f04f 0200 	mov.w	r2, #0
 8006afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b08:	4689      	mov	r9, r1
 8006b0a:	4692      	mov	sl, r2
 8006b0c:	eb19 0005 	adds.w	r0, r9, r5
 8006b10:	eb4a 0106 	adc.w	r1, sl, r6
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	461d      	mov	r5, r3
 8006b1a:	f04f 0600 	mov.w	r6, #0
 8006b1e:	196b      	adds	r3, r5, r5
 8006b20:	eb46 0406 	adc.w	r4, r6, r6
 8006b24:	461a      	mov	r2, r3
 8006b26:	4623      	mov	r3, r4
 8006b28:	f7f9 fbca 	bl	80002c0 <__aeabi_uldivmod>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	460c      	mov	r4, r1
 8006b30:	461a      	mov	r2, r3
 8006b32:	4b0e      	ldr	r3, [pc, #56]	; (8006b6c <UART_SetConfig+0x3a0>)
 8006b34:	fba3 1302 	umull	r1, r3, r3, r2
 8006b38:	095b      	lsrs	r3, r3, #5
 8006b3a:	2164      	movs	r1, #100	; 0x64
 8006b3c:	fb01 f303 	mul.w	r3, r1, r3
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	3332      	adds	r3, #50	; 0x32
 8006b46:	4a09      	ldr	r2, [pc, #36]	; (8006b6c <UART_SetConfig+0x3a0>)
 8006b48:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4c:	095b      	lsrs	r3, r3, #5
 8006b4e:	f003 0207 	and.w	r2, r3, #7
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4442      	add	r2, r8
 8006b58:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006b5a:	e1c0      	b.n	8006ede <UART_SetConfig+0x712>
 8006b5c:	40011000 	.word	0x40011000
 8006b60:	40011400 	.word	0x40011400
 8006b64:	40011800 	.word	0x40011800
 8006b68:	40011c00 	.word	0x40011c00
 8006b6c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4adc      	ldr	r2, [pc, #880]	; (8006ee8 <UART_SetConfig+0x71c>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d00f      	beq.n	8006b9a <UART_SetConfig+0x3ce>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4adb      	ldr	r2, [pc, #876]	; (8006eec <UART_SetConfig+0x720>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d00a      	beq.n	8006b9a <UART_SetConfig+0x3ce>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4ad9      	ldr	r2, [pc, #868]	; (8006ef0 <UART_SetConfig+0x724>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d005      	beq.n	8006b9a <UART_SetConfig+0x3ce>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4ad8      	ldr	r2, [pc, #864]	; (8006ef4 <UART_SetConfig+0x728>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	f040 80d1 	bne.w	8006d3c <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b9a:	f7fd ffb7 	bl	8004b0c <HAL_RCC_GetPCLK2Freq>
 8006b9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	469a      	mov	sl, r3
 8006ba4:	f04f 0b00 	mov.w	fp, #0
 8006ba8:	46d0      	mov	r8, sl
 8006baa:	46d9      	mov	r9, fp
 8006bac:	eb18 0308 	adds.w	r3, r8, r8
 8006bb0:	eb49 0409 	adc.w	r4, r9, r9
 8006bb4:	4698      	mov	r8, r3
 8006bb6:	46a1      	mov	r9, r4
 8006bb8:	eb18 080a 	adds.w	r8, r8, sl
 8006bbc:	eb49 090b 	adc.w	r9, r9, fp
 8006bc0:	f04f 0100 	mov.w	r1, #0
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006bcc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006bd0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006bd4:	4688      	mov	r8, r1
 8006bd6:	4691      	mov	r9, r2
 8006bd8:	eb1a 0508 	adds.w	r5, sl, r8
 8006bdc:	eb4b 0609 	adc.w	r6, fp, r9
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	4619      	mov	r1, r3
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	f04f 0300 	mov.w	r3, #0
 8006bee:	f04f 0400 	mov.w	r4, #0
 8006bf2:	0094      	lsls	r4, r2, #2
 8006bf4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bf8:	008b      	lsls	r3, r1, #2
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	4623      	mov	r3, r4
 8006bfe:	4628      	mov	r0, r5
 8006c00:	4631      	mov	r1, r6
 8006c02:	f7f9 fb5d 	bl	80002c0 <__aeabi_uldivmod>
 8006c06:	4603      	mov	r3, r0
 8006c08:	460c      	mov	r4, r1
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	4bba      	ldr	r3, [pc, #744]	; (8006ef8 <UART_SetConfig+0x72c>)
 8006c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	469b      	mov	fp, r3
 8006c1c:	f04f 0c00 	mov.w	ip, #0
 8006c20:	46d9      	mov	r9, fp
 8006c22:	46e2      	mov	sl, ip
 8006c24:	eb19 0309 	adds.w	r3, r9, r9
 8006c28:	eb4a 040a 	adc.w	r4, sl, sl
 8006c2c:	4699      	mov	r9, r3
 8006c2e:	46a2      	mov	sl, r4
 8006c30:	eb19 090b 	adds.w	r9, r9, fp
 8006c34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c38:	f04f 0100 	mov.w	r1, #0
 8006c3c:	f04f 0200 	mov.w	r2, #0
 8006c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c4c:	4689      	mov	r9, r1
 8006c4e:	4692      	mov	sl, r2
 8006c50:	eb1b 0509 	adds.w	r5, fp, r9
 8006c54:	eb4c 060a 	adc.w	r6, ip, sl
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	f04f 0200 	mov.w	r2, #0
 8006c62:	f04f 0300 	mov.w	r3, #0
 8006c66:	f04f 0400 	mov.w	r4, #0
 8006c6a:	0094      	lsls	r4, r2, #2
 8006c6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c70:	008b      	lsls	r3, r1, #2
 8006c72:	461a      	mov	r2, r3
 8006c74:	4623      	mov	r3, r4
 8006c76:	4628      	mov	r0, r5
 8006c78:	4631      	mov	r1, r6
 8006c7a:	f7f9 fb21 	bl	80002c0 <__aeabi_uldivmod>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	460c      	mov	r4, r1
 8006c82:	461a      	mov	r2, r3
 8006c84:	4b9c      	ldr	r3, [pc, #624]	; (8006ef8 <UART_SetConfig+0x72c>)
 8006c86:	fba3 1302 	umull	r1, r3, r3, r2
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	2164      	movs	r1, #100	; 0x64
 8006c8e:	fb01 f303 	mul.w	r3, r1, r3
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	011b      	lsls	r3, r3, #4
 8006c96:	3332      	adds	r3, #50	; 0x32
 8006c98:	4a97      	ldr	r2, [pc, #604]	; (8006ef8 <UART_SetConfig+0x72c>)
 8006c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9e:	095b      	lsrs	r3, r3, #5
 8006ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ca4:	4498      	add	r8, r3
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	469b      	mov	fp, r3
 8006caa:	f04f 0c00 	mov.w	ip, #0
 8006cae:	46d9      	mov	r9, fp
 8006cb0:	46e2      	mov	sl, ip
 8006cb2:	eb19 0309 	adds.w	r3, r9, r9
 8006cb6:	eb4a 040a 	adc.w	r4, sl, sl
 8006cba:	4699      	mov	r9, r3
 8006cbc:	46a2      	mov	sl, r4
 8006cbe:	eb19 090b 	adds.w	r9, r9, fp
 8006cc2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006cc6:	f04f 0100 	mov.w	r1, #0
 8006cca:	f04f 0200 	mov.w	r2, #0
 8006cce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cda:	4689      	mov	r9, r1
 8006cdc:	4692      	mov	sl, r2
 8006cde:	eb1b 0509 	adds.w	r5, fp, r9
 8006ce2:	eb4c 060a 	adc.w	r6, ip, sl
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	4619      	mov	r1, r3
 8006cec:	f04f 0200 	mov.w	r2, #0
 8006cf0:	f04f 0300 	mov.w	r3, #0
 8006cf4:	f04f 0400 	mov.w	r4, #0
 8006cf8:	0094      	lsls	r4, r2, #2
 8006cfa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006cfe:	008b      	lsls	r3, r1, #2
 8006d00:	461a      	mov	r2, r3
 8006d02:	4623      	mov	r3, r4
 8006d04:	4628      	mov	r0, r5
 8006d06:	4631      	mov	r1, r6
 8006d08:	f7f9 fada 	bl	80002c0 <__aeabi_uldivmod>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	460c      	mov	r4, r1
 8006d10:	461a      	mov	r2, r3
 8006d12:	4b79      	ldr	r3, [pc, #484]	; (8006ef8 <UART_SetConfig+0x72c>)
 8006d14:	fba3 1302 	umull	r1, r3, r3, r2
 8006d18:	095b      	lsrs	r3, r3, #5
 8006d1a:	2164      	movs	r1, #100	; 0x64
 8006d1c:	fb01 f303 	mul.w	r3, r1, r3
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	3332      	adds	r3, #50	; 0x32
 8006d26:	4a74      	ldr	r2, [pc, #464]	; (8006ef8 <UART_SetConfig+0x72c>)
 8006d28:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2c:	095b      	lsrs	r3, r3, #5
 8006d2e:	f003 020f 	and.w	r2, r3, #15
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4442      	add	r2, r8
 8006d38:	609a      	str	r2, [r3, #8]
 8006d3a:	e0d0      	b.n	8006ede <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d3c:	f7fd fed2 	bl	8004ae4 <HAL_RCC_GetPCLK1Freq>
 8006d40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	469a      	mov	sl, r3
 8006d46:	f04f 0b00 	mov.w	fp, #0
 8006d4a:	46d0      	mov	r8, sl
 8006d4c:	46d9      	mov	r9, fp
 8006d4e:	eb18 0308 	adds.w	r3, r8, r8
 8006d52:	eb49 0409 	adc.w	r4, r9, r9
 8006d56:	4698      	mov	r8, r3
 8006d58:	46a1      	mov	r9, r4
 8006d5a:	eb18 080a 	adds.w	r8, r8, sl
 8006d5e:	eb49 090b 	adc.w	r9, r9, fp
 8006d62:	f04f 0100 	mov.w	r1, #0
 8006d66:	f04f 0200 	mov.w	r2, #0
 8006d6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d76:	4688      	mov	r8, r1
 8006d78:	4691      	mov	r9, r2
 8006d7a:	eb1a 0508 	adds.w	r5, sl, r8
 8006d7e:	eb4b 0609 	adc.w	r6, fp, r9
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	4619      	mov	r1, r3
 8006d88:	f04f 0200 	mov.w	r2, #0
 8006d8c:	f04f 0300 	mov.w	r3, #0
 8006d90:	f04f 0400 	mov.w	r4, #0
 8006d94:	0094      	lsls	r4, r2, #2
 8006d96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d9a:	008b      	lsls	r3, r1, #2
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	4623      	mov	r3, r4
 8006da0:	4628      	mov	r0, r5
 8006da2:	4631      	mov	r1, r6
 8006da4:	f7f9 fa8c 	bl	80002c0 <__aeabi_uldivmod>
 8006da8:	4603      	mov	r3, r0
 8006daa:	460c      	mov	r4, r1
 8006dac:	461a      	mov	r2, r3
 8006dae:	4b52      	ldr	r3, [pc, #328]	; (8006ef8 <UART_SetConfig+0x72c>)
 8006db0:	fba3 2302 	umull	r2, r3, r3, r2
 8006db4:	095b      	lsrs	r3, r3, #5
 8006db6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	469b      	mov	fp, r3
 8006dbe:	f04f 0c00 	mov.w	ip, #0
 8006dc2:	46d9      	mov	r9, fp
 8006dc4:	46e2      	mov	sl, ip
 8006dc6:	eb19 0309 	adds.w	r3, r9, r9
 8006dca:	eb4a 040a 	adc.w	r4, sl, sl
 8006dce:	4699      	mov	r9, r3
 8006dd0:	46a2      	mov	sl, r4
 8006dd2:	eb19 090b 	adds.w	r9, r9, fp
 8006dd6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006dda:	f04f 0100 	mov.w	r1, #0
 8006dde:	f04f 0200 	mov.w	r2, #0
 8006de2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006de6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006dea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006dee:	4689      	mov	r9, r1
 8006df0:	4692      	mov	sl, r2
 8006df2:	eb1b 0509 	adds.w	r5, fp, r9
 8006df6:	eb4c 060a 	adc.w	r6, ip, sl
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	f04f 0200 	mov.w	r2, #0
 8006e04:	f04f 0300 	mov.w	r3, #0
 8006e08:	f04f 0400 	mov.w	r4, #0
 8006e0c:	0094      	lsls	r4, r2, #2
 8006e0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e12:	008b      	lsls	r3, r1, #2
 8006e14:	461a      	mov	r2, r3
 8006e16:	4623      	mov	r3, r4
 8006e18:	4628      	mov	r0, r5
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	f7f9 fa50 	bl	80002c0 <__aeabi_uldivmod>
 8006e20:	4603      	mov	r3, r0
 8006e22:	460c      	mov	r4, r1
 8006e24:	461a      	mov	r2, r3
 8006e26:	4b34      	ldr	r3, [pc, #208]	; (8006ef8 <UART_SetConfig+0x72c>)
 8006e28:	fba3 1302 	umull	r1, r3, r3, r2
 8006e2c:	095b      	lsrs	r3, r3, #5
 8006e2e:	2164      	movs	r1, #100	; 0x64
 8006e30:	fb01 f303 	mul.w	r3, r1, r3
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	011b      	lsls	r3, r3, #4
 8006e38:	3332      	adds	r3, #50	; 0x32
 8006e3a:	4a2f      	ldr	r2, [pc, #188]	; (8006ef8 <UART_SetConfig+0x72c>)
 8006e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e40:	095b      	lsrs	r3, r3, #5
 8006e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e46:	4498      	add	r8, r3
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	469b      	mov	fp, r3
 8006e4c:	f04f 0c00 	mov.w	ip, #0
 8006e50:	46d9      	mov	r9, fp
 8006e52:	46e2      	mov	sl, ip
 8006e54:	eb19 0309 	adds.w	r3, r9, r9
 8006e58:	eb4a 040a 	adc.w	r4, sl, sl
 8006e5c:	4699      	mov	r9, r3
 8006e5e:	46a2      	mov	sl, r4
 8006e60:	eb19 090b 	adds.w	r9, r9, fp
 8006e64:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006e68:	f04f 0100 	mov.w	r1, #0
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e7c:	4689      	mov	r9, r1
 8006e7e:	4692      	mov	sl, r2
 8006e80:	eb1b 0509 	adds.w	r5, fp, r9
 8006e84:	eb4c 060a 	adc.w	r6, ip, sl
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	f04f 0200 	mov.w	r2, #0
 8006e92:	f04f 0300 	mov.w	r3, #0
 8006e96:	f04f 0400 	mov.w	r4, #0
 8006e9a:	0094      	lsls	r4, r2, #2
 8006e9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ea0:	008b      	lsls	r3, r1, #2
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	4623      	mov	r3, r4
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	4631      	mov	r1, r6
 8006eaa:	f7f9 fa09 	bl	80002c0 <__aeabi_uldivmod>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	460c      	mov	r4, r1
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	4b10      	ldr	r3, [pc, #64]	; (8006ef8 <UART_SetConfig+0x72c>)
 8006eb6:	fba3 1302 	umull	r1, r3, r3, r2
 8006eba:	095b      	lsrs	r3, r3, #5
 8006ebc:	2164      	movs	r1, #100	; 0x64
 8006ebe:	fb01 f303 	mul.w	r3, r1, r3
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	3332      	adds	r3, #50	; 0x32
 8006ec8:	4a0b      	ldr	r2, [pc, #44]	; (8006ef8 <UART_SetConfig+0x72c>)
 8006eca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ece:	095b      	lsrs	r3, r3, #5
 8006ed0:	f003 020f 	and.w	r2, r3, #15
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4442      	add	r2, r8
 8006eda:	609a      	str	r2, [r3, #8]
}
 8006edc:	e7ff      	b.n	8006ede <UART_SetConfig+0x712>
 8006ede:	bf00      	nop
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee8:	40011000 	.word	0x40011000
 8006eec:	40011400 	.word	0x40011400
 8006ef0:	40011800 	.word	0x40011800
 8006ef4:	40011c00 	.word	0x40011c00
 8006ef8:	51eb851f 	.word	0x51eb851f

08006efc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f14:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4b2f      	ldr	r3, [pc, #188]	; (8006fd8 <FSMC_NORSRAM_Init+0xdc>)
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006f26:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006f2c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006f32:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006f38:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8006f3e:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006f44:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006f4a:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006f50:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006f56:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8006f5c:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8006f62:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8006f68:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8006f6e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	2b08      	cmp	r3, #8
 8006f7c:	d103      	bne.n	8006f86 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f84:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68f9      	ldr	r1, [r7, #12]
 8006f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f9a:	d10a      	bne.n	8006fb2 <FSMC_NORSRAM_Init+0xb6>
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d006      	beq.n	8006fb2 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fac:	431a      	orrs	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d006      	beq.n	8006fc8 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	ffc00480 	.word	0xffc00480

08006fdc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006ffe:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800700a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007012:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800701a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	3b01      	subs	r3, #1
 8007022:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007024:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	3b02      	subs	r3, #2
 800702c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800702e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007034:	4313      	orrs	r3, r2
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4313      	orrs	r3, r2
 800703a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6979      	ldr	r1, [r7, #20]
 8007044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007054:	d10e      	bne.n	8007074 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800705e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	3b01      	subs	r3, #1
 8007066:	051b      	lsls	r3, r3, #20
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	4313      	orrs	r3, r2
 800706c:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	371c      	adds	r7, #28
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
	...

08007084 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007092:	2300      	movs	r3, #0
 8007094:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800709c:	d122      	bne.n	80070e4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	4b15      	ldr	r3, [pc, #84]	; (8007100 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80070ac:	4013      	ands	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070ba:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80070c2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80070ca:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80070d0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	6979      	ldr	r1, [r7, #20]
 80070de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80070e2:	e005      	b.n	80070f0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80070ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	371c      	adds	r7, #28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	cff00000 	.word	0xcff00000

08007104 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007104:	b084      	sub	sp, #16
 8007106:	b480      	push	{r7}
 8007108:	b085      	sub	sp, #20
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	f107 001c 	add.w	r0, r7, #28
 8007112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800711a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800711c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800711e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007122:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007124:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007126:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800712a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800712c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800712e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	4313      	orrs	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800713e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	431a      	orrs	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	b004      	add	sp, #16
 8007158:	4770      	bx	lr

0800715a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007168:	4618      	mov	r0, r3
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2203      	movs	r2, #3
 80071a2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80071a4:	2002      	movs	r0, #2
 80071a6:	f7fa ffbd 	bl	8002124 <HAL_Delay>
  
  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0303 	and.w	r3, r3, #3
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80071ee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80071f4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80071fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	4313      	orrs	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800720a:	f023 030f 	bic.w	r3, r3, #15
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	431a      	orrs	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	b2db      	uxtb	r3, r3
}
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800723e:	b480      	push	{r7}
 8007240:	b085      	sub	sp, #20
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3314      	adds	r3, #20
 800724c:	461a      	mov	r2, r3
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	4413      	add	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
}  
 8007258:	4618      	mov	r0, r3
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800726e:	2300      	movs	r3, #0
 8007270:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800728a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007290:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007296:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	431a      	orrs	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80072ae:	2300      	movs	r3, #0

}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b088      	sub	sp, #32
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80072ca:	2310      	movs	r3, #16
 80072cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072ce:	2340      	movs	r3, #64	; 0x40
 80072d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072d2:	2300      	movs	r3, #0
 80072d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072dc:	f107 0308 	add.w	r3, r7, #8
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff ff74 	bl	80071d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80072e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ec:	2110      	movs	r1, #16
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f9fe 	bl	80076f0 <SDMMC_GetCmdResp1>
 80072f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072f6:	69fb      	ldr	r3, [r7, #28]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3720      	adds	r7, #32
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b088      	sub	sp, #32
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800730e:	2311      	movs	r3, #17
 8007310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007312:	2340      	movs	r3, #64	; 0x40
 8007314:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800731a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800731e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007320:	f107 0308 	add.w	r3, r7, #8
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7ff ff52 	bl	80071d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800732c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007330:	2111      	movs	r1, #17
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f9dc 	bl	80076f0 <SDMMC_GetCmdResp1>
 8007338:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800733a:	69fb      	ldr	r3, [r7, #28]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3720      	adds	r7, #32
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b088      	sub	sp, #32
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007352:	2312      	movs	r3, #18
 8007354:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007356:	2340      	movs	r3, #64	; 0x40
 8007358:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800735a:	2300      	movs	r3, #0
 800735c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800735e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007362:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007364:	f107 0308 	add.w	r3, r7, #8
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff ff30 	bl	80071d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007370:	f241 3288 	movw	r2, #5000	; 0x1388
 8007374:	2112      	movs	r1, #18
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f9ba 	bl	80076f0 <SDMMC_GetCmdResp1>
 800737c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800737e:	69fb      	ldr	r3, [r7, #28]
}
 8007380:	4618      	mov	r0, r3
 8007382:	3720      	adds	r7, #32
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b088      	sub	sp, #32
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007396:	2318      	movs	r3, #24
 8007398:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800739a:	2340      	movs	r3, #64	; 0x40
 800739c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800739e:	2300      	movs	r3, #0
 80073a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073a8:	f107 0308 	add.w	r3, r7, #8
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7ff ff0e 	bl	80071d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80073b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073b8:	2118      	movs	r1, #24
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f998 	bl	80076f0 <SDMMC_GetCmdResp1>
 80073c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073c2:	69fb      	ldr	r3, [r7, #28]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3720      	adds	r7, #32
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80073da:	2319      	movs	r3, #25
 80073dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80073de:	2340      	movs	r3, #64	; 0x40
 80073e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073e2:	2300      	movs	r3, #0
 80073e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073ec:	f107 0308 	add.w	r3, r7, #8
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7ff feec 	bl	80071d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80073f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073fc:	2119      	movs	r1, #25
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f976 	bl	80076f0 <SDMMC_GetCmdResp1>
 8007404:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007406:	69fb      	ldr	r3, [r7, #28]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3720      	adds	r7, #32
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b088      	sub	sp, #32
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800741c:	230c      	movs	r3, #12
 800741e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007420:	2340      	movs	r3, #64	; 0x40
 8007422:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007424:	2300      	movs	r3, #0
 8007426:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800742c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800742e:	f107 0308 	add.w	r3, r7, #8
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7ff fecb 	bl	80071d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800743a:	4a05      	ldr	r2, [pc, #20]	; (8007450 <SDMMC_CmdStopTransfer+0x40>)
 800743c:	210c      	movs	r1, #12
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f956 	bl	80076f0 <SDMMC_GetCmdResp1>
 8007444:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007446:	69fb      	ldr	r3, [r7, #28]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3720      	adds	r7, #32
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	05f5e100 	.word	0x05f5e100

08007454 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08a      	sub	sp, #40	; 0x28
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007464:	2307      	movs	r3, #7
 8007466:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007468:	2340      	movs	r3, #64	; 0x40
 800746a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800746c:	2300      	movs	r3, #0
 800746e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007474:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007476:	f107 0310 	add.w	r3, r7, #16
 800747a:	4619      	mov	r1, r3
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f7ff fea7 	bl	80071d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007482:	f241 3288 	movw	r2, #5000	; 0x1388
 8007486:	2107      	movs	r1, #7
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 f931 	bl	80076f0 <SDMMC_GetCmdResp1>
 800748e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007492:	4618      	mov	r0, r3
 8007494:	3728      	adds	r7, #40	; 0x28
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b088      	sub	sp, #32
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80074a6:	2300      	movs	r3, #0
 80074a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80074aa:	2300      	movs	r3, #0
 80074ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074ae:	2300      	movs	r3, #0
 80074b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074b8:	f107 0308 	add.w	r3, r7, #8
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7ff fe86 	bl	80071d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f8eb 	bl	80076a0 <SDMMC_GetCmdError>
 80074ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074cc:	69fb      	ldr	r3, [r7, #28]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3720      	adds	r7, #32
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b088      	sub	sp, #32
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80074de:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80074e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80074e4:	2308      	movs	r3, #8
 80074e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074e8:	2340      	movs	r3, #64	; 0x40
 80074ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074ec:	2300      	movs	r3, #0
 80074ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074f6:	f107 0308 	add.w	r3, r7, #8
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7ff fe67 	bl	80071d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fad4 	bl	8007ab0 <SDMMC_GetCmdResp7>
 8007508:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800750a:	69fb      	ldr	r3, [r7, #28]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3720      	adds	r7, #32
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b088      	sub	sp, #32
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007522:	2337      	movs	r3, #55	; 0x37
 8007524:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007526:	2340      	movs	r3, #64	; 0x40
 8007528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800752a:	2300      	movs	r3, #0
 800752c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800752e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007532:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007534:	f107 0308 	add.w	r3, r7, #8
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7ff fe48 	bl	80071d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007540:	f241 3288 	movw	r2, #5000	; 0x1388
 8007544:	2137      	movs	r1, #55	; 0x37
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f8d2 	bl	80076f0 <SDMMC_GetCmdResp1>
 800754c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800754e:	69fb      	ldr	r3, [r7, #28]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3720      	adds	r7, #32
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b088      	sub	sp, #32
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007568:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800756c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800756e:	2329      	movs	r3, #41	; 0x29
 8007570:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007572:	2340      	movs	r3, #64	; 0x40
 8007574:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007576:	2300      	movs	r3, #0
 8007578:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800757a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800757e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007580:	f107 0308 	add.w	r3, r7, #8
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7ff fe22 	bl	80071d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f9e1 	bl	8007954 <SDMMC_GetCmdResp3>
 8007592:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007594:	69fb      	ldr	r3, [r7, #28]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3720      	adds	r7, #32
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b088      	sub	sp, #32
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80075aa:	2302      	movs	r3, #2
 80075ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80075ae:	23c0      	movs	r3, #192	; 0xc0
 80075b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075b2:	2300      	movs	r3, #0
 80075b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075bc:	f107 0308 	add.w	r3, r7, #8
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff fe04 	bl	80071d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f97d 	bl	80078c8 <SDMMC_GetCmdResp2>
 80075ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075d0:	69fb      	ldr	r3, [r7, #28]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3720      	adds	r7, #32
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b088      	sub	sp, #32
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80075e8:	2309      	movs	r3, #9
 80075ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80075ec:	23c0      	movs	r3, #192	; 0xc0
 80075ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075f0:	2300      	movs	r3, #0
 80075f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075fa:	f107 0308 	add.w	r3, r7, #8
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7ff fde5 	bl	80071d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f95e 	bl	80078c8 <SDMMC_GetCmdResp2>
 800760c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800760e:	69fb      	ldr	r3, [r7, #28]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3720      	adds	r7, #32
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007622:	2300      	movs	r3, #0
 8007624:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007626:	2303      	movs	r3, #3
 8007628:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800762a:	2340      	movs	r3, #64	; 0x40
 800762c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800762e:	2300      	movs	r3, #0
 8007630:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007636:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007638:	f107 0308 	add.w	r3, r7, #8
 800763c:	4619      	mov	r1, r3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7ff fdc6 	bl	80071d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	2103      	movs	r1, #3
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f9bd 	bl	80079c8 <SDMMC_GetCmdResp6>
 800764e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007650:	69fb      	ldr	r3, [r7, #28]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3720      	adds	r7, #32
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b088      	sub	sp, #32
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007668:	230d      	movs	r3, #13
 800766a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800766c:	2340      	movs	r3, #64	; 0x40
 800766e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007670:	2300      	movs	r3, #0
 8007672:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007678:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800767a:	f107 0308 	add.w	r3, r7, #8
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7ff fda5 	bl	80071d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007686:	f241 3288 	movw	r2, #5000	; 0x1388
 800768a:	210d      	movs	r1, #13
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f82f 	bl	80076f0 <SDMMC_GetCmdResp1>
 8007692:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007694:	69fb      	ldr	r3, [r7, #28]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3720      	adds	r7, #32
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80076a0:	b490      	push	{r4, r7}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80076a8:	4b0f      	ldr	r3, [pc, #60]	; (80076e8 <SDMMC_GetCmdError+0x48>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a0f      	ldr	r2, [pc, #60]	; (80076ec <SDMMC_GetCmdError+0x4c>)
 80076ae:	fba2 2303 	umull	r2, r3, r2, r3
 80076b2:	0a5b      	lsrs	r3, r3, #9
 80076b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076b8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80076bc:	4623      	mov	r3, r4
 80076be:	1e5c      	subs	r4, r3, #1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d102      	bne.n	80076ca <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80076c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076c8:	e009      	b.n	80076de <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d0f2      	beq.n	80076bc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	22c5      	movs	r2, #197	; 0xc5
 80076da:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bc90      	pop	{r4, r7}
 80076e6:	4770      	bx	lr
 80076e8:	20000008 	.word	0x20000008
 80076ec:	10624dd3 	.word	0x10624dd3

080076f0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80076f0:	b590      	push	{r4, r7, lr}
 80076f2:	b087      	sub	sp, #28
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	460b      	mov	r3, r1
 80076fa:	607a      	str	r2, [r7, #4]
 80076fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076fe:	4b6f      	ldr	r3, [pc, #444]	; (80078bc <SDMMC_GetCmdResp1+0x1cc>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a6f      	ldr	r2, [pc, #444]	; (80078c0 <SDMMC_GetCmdResp1+0x1d0>)
 8007704:	fba2 2303 	umull	r2, r3, r2, r3
 8007708:	0a5b      	lsrs	r3, r3, #9
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007710:	4623      	mov	r3, r4
 8007712:	1e5c      	subs	r4, r3, #1
 8007714:	2b00      	cmp	r3, #0
 8007716:	d102      	bne.n	800771e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007718:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800771c:	e0c9      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007722:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800772a:	2b00      	cmp	r3, #0
 800772c:	d0f0      	beq.n	8007710 <SDMMC_GetCmdResp1+0x20>
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1eb      	bne.n	8007710 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800773c:	f003 0304 	and.w	r3, r3, #4
 8007740:	2b00      	cmp	r3, #0
 8007742:	d004      	beq.n	800774e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2204      	movs	r2, #4
 8007748:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800774a:	2304      	movs	r3, #4
 800774c:	e0b1      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b00      	cmp	r3, #0
 8007758:	d004      	beq.n	8007764 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2201      	movs	r2, #1
 800775e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007760:	2301      	movs	r3, #1
 8007762:	e0a6      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	22c5      	movs	r2, #197	; 0xc5
 8007768:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f7ff fd5a 	bl	8007224 <SDIO_GetCommandResponse>
 8007770:	4603      	mov	r3, r0
 8007772:	461a      	mov	r2, r3
 8007774:	7afb      	ldrb	r3, [r7, #11]
 8007776:	4293      	cmp	r3, r2
 8007778:	d001      	beq.n	800777e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800777a:	2301      	movs	r3, #1
 800777c:	e099      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800777e:	2100      	movs	r1, #0
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f7ff fd5c 	bl	800723e <SDIO_GetResponse>
 8007786:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	4b4e      	ldr	r3, [pc, #312]	; (80078c4 <SDMMC_GetCmdResp1+0x1d4>)
 800778c:	4013      	ands	r3, r2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8007792:	2300      	movs	r3, #0
 8007794:	e08d      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	da02      	bge.n	80077a2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800779c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077a0:	e087      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80077ac:	2340      	movs	r3, #64	; 0x40
 80077ae:	e080      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80077ba:	2380      	movs	r3, #128	; 0x80
 80077bc:	e079      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80077c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077cc:	e071      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d002      	beq.n	80077de <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80077d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077dc:	e069      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80077e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077ec:	e061      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80077f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077fc:	e059      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800780c:	e051      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800781c:	e049      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d002      	beq.n	800782e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007828:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800782c:	e041      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8007838:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800783c:	e039      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800784c:	e031      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007858:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800785c:	e029      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007868:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800786c:	e021      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007878:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800787c:	e019      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d002      	beq.n	800788e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007888:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800788c:	e011      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d002      	beq.n	800789e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007898:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800789c:	e009      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	f003 0308 	and.w	r3, r3, #8
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80078a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80078ac:	e001      	b.n	80078b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80078ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	371c      	adds	r7, #28
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd90      	pop	{r4, r7, pc}
 80078ba:	bf00      	nop
 80078bc:	20000008 	.word	0x20000008
 80078c0:	10624dd3 	.word	0x10624dd3
 80078c4:	fdffe008 	.word	0xfdffe008

080078c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80078c8:	b490      	push	{r4, r7}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078d0:	4b1e      	ldr	r3, [pc, #120]	; (800794c <SDMMC_GetCmdResp2+0x84>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a1e      	ldr	r2, [pc, #120]	; (8007950 <SDMMC_GetCmdResp2+0x88>)
 80078d6:	fba2 2303 	umull	r2, r3, r2, r3
 80078da:	0a5b      	lsrs	r3, r3, #9
 80078dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80078e4:	4623      	mov	r3, r4
 80078e6:	1e5c      	subs	r4, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078f0:	e026      	b.n	8007940 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d0f0      	beq.n	80078e4 <SDMMC_GetCmdResp2+0x1c>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1eb      	bne.n	80078e4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007910:	f003 0304 	and.w	r3, r3, #4
 8007914:	2b00      	cmp	r3, #0
 8007916:	d004      	beq.n	8007922 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2204      	movs	r2, #4
 800791c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800791e:	2304      	movs	r3, #4
 8007920:	e00e      	b.n	8007940 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	d004      	beq.n	8007938 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007934:	2301      	movs	r3, #1
 8007936:	e003      	b.n	8007940 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	22c5      	movs	r2, #197	; 0xc5
 800793c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bc90      	pop	{r4, r7}
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	20000008 	.word	0x20000008
 8007950:	10624dd3 	.word	0x10624dd3

08007954 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007954:	b490      	push	{r4, r7}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800795c:	4b18      	ldr	r3, [pc, #96]	; (80079c0 <SDMMC_GetCmdResp3+0x6c>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a18      	ldr	r2, [pc, #96]	; (80079c4 <SDMMC_GetCmdResp3+0x70>)
 8007962:	fba2 2303 	umull	r2, r3, r2, r3
 8007966:	0a5b      	lsrs	r3, r3, #9
 8007968:	f241 3288 	movw	r2, #5000	; 0x1388
 800796c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007970:	4623      	mov	r3, r4
 8007972:	1e5c      	subs	r4, r3, #1
 8007974:	2b00      	cmp	r3, #0
 8007976:	d102      	bne.n	800797e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007978:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800797c:	e01b      	b.n	80079b6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007982:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800798a:	2b00      	cmp	r3, #0
 800798c:	d0f0      	beq.n	8007970 <SDMMC_GetCmdResp3+0x1c>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1eb      	bne.n	8007970 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d004      	beq.n	80079ae <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2204      	movs	r2, #4
 80079a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079aa:	2304      	movs	r3, #4
 80079ac:	e003      	b.n	80079b6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	22c5      	movs	r2, #197	; 0xc5
 80079b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bc90      	pop	{r4, r7}
 80079be:	4770      	bx	lr
 80079c0:	20000008 	.word	0x20000008
 80079c4:	10624dd3 	.word	0x10624dd3

080079c8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80079c8:	b590      	push	{r4, r7, lr}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	460b      	mov	r3, r1
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079d6:	4b34      	ldr	r3, [pc, #208]	; (8007aa8 <SDMMC_GetCmdResp6+0xe0>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a34      	ldr	r2, [pc, #208]	; (8007aac <SDMMC_GetCmdResp6+0xe4>)
 80079dc:	fba2 2303 	umull	r2, r3, r2, r3
 80079e0:	0a5b      	lsrs	r3, r3, #9
 80079e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079e6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80079ea:	4623      	mov	r3, r4
 80079ec:	1e5c      	subs	r4, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d102      	bne.n	80079f8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079f6:	e052      	b.n	8007a9e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079fc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d0f0      	beq.n	80079ea <SDMMC_GetCmdResp6+0x22>
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1eb      	bne.n	80079ea <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a16:	f003 0304 	and.w	r3, r3, #4
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d004      	beq.n	8007a28 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2204      	movs	r2, #4
 8007a22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a24:	2304      	movs	r3, #4
 8007a26:	e03a      	b.n	8007a9e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d004      	beq.n	8007a3e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2201      	movs	r2, #1
 8007a38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e02f      	b.n	8007a9e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f7ff fbf0 	bl	8007224 <SDIO_GetCommandResponse>
 8007a44:	4603      	mov	r3, r0
 8007a46:	461a      	mov	r2, r3
 8007a48:	7afb      	ldrb	r3, [r7, #11]
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d001      	beq.n	8007a52 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e025      	b.n	8007a9e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	22c5      	movs	r2, #197	; 0xc5
 8007a56:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007a58:	2100      	movs	r1, #0
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f7ff fbef 	bl	800723e <SDIO_GetResponse>
 8007a60:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d106      	bne.n	8007a7a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	0c1b      	lsrs	r3, r3, #16
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007a76:	2300      	movs	r3, #0
 8007a78:	e011      	b.n	8007a9e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a88:	e009      	b.n	8007a9e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a98:	e001      	b.n	8007a9e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd90      	pop	{r4, r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20000008 	.word	0x20000008
 8007aac:	10624dd3 	.word	0x10624dd3

08007ab0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007ab0:	b490      	push	{r4, r7}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ab8:	4b21      	ldr	r3, [pc, #132]	; (8007b40 <SDMMC_GetCmdResp7+0x90>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a21      	ldr	r2, [pc, #132]	; (8007b44 <SDMMC_GetCmdResp7+0x94>)
 8007abe:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac2:	0a5b      	lsrs	r3, r3, #9
 8007ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007acc:	4623      	mov	r3, r4
 8007ace:	1e5c      	subs	r4, r3, #1
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d102      	bne.n	8007ada <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ad4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ad8:	e02c      	b.n	8007b34 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ade:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d0f0      	beq.n	8007acc <SDMMC_GetCmdResp7+0x1c>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1eb      	bne.n	8007acc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af8:	f003 0304 	and.w	r3, r3, #4
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d004      	beq.n	8007b0a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2204      	movs	r2, #4
 8007b04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b06:	2304      	movs	r3, #4
 8007b08:	e014      	b.n	8007b34 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d004      	beq.n	8007b20 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e009      	b.n	8007b34 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2240      	movs	r2, #64	; 0x40
 8007b30:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007b32:	2300      	movs	r3, #0
  
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bc90      	pop	{r4, r7}
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20000008 	.word	0x20000008
 8007b44:	10624dd3 	.word	0x10624dd3

08007b48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007b4c:	4904      	ldr	r1, [pc, #16]	; (8007b60 <MX_FATFS_Init+0x18>)
 8007b4e:	4805      	ldr	r0, [pc, #20]	; (8007b64 <MX_FATFS_Init+0x1c>)
 8007b50:	f003 f8c4 	bl	800acdc <FATFS_LinkDriver>
 8007b54:	4603      	mov	r3, r0
 8007b56:	461a      	mov	r2, r3
 8007b58:	4b03      	ldr	r3, [pc, #12]	; (8007b68 <MX_FATFS_Init+0x20>)
 8007b5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007b5c:	bf00      	nop
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	20008760 	.word	0x20008760
 8007b64:	0800bce0 	.word	0x0800bce0
 8007b68:	2000875c 	.word	0x2000875c

08007b6c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007b70:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007b86:	f000 f86b 	bl	8007c60 <BSP_SD_IsDetected>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d001      	beq.n	8007b94 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e005      	b.n	8007ba0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007b94:	4804      	ldr	r0, [pc, #16]	; (8007ba8 <BSP_SD_Init+0x2c>)
 8007b96:	f7fd fdeb 	bl	8005770 <HAL_SD_Init>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8007b9e:	79fb      	ldrb	r3, [r7, #7]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	200065c8 	.word	0x200065c8

08007bac <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b088      	sub	sp, #32
 8007bb0:	af02      	add	r7, sp, #8
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	68f9      	ldr	r1, [r7, #12]
 8007bc8:	4806      	ldr	r0, [pc, #24]	; (8007be4 <BSP_SD_ReadBlocks+0x38>)
 8007bca:	f7fd fe61 	bl	8005890 <HAL_SD_ReadBlocks>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8007bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	200065c8 	.word	0x200065c8

08007be8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b088      	sub	sp, #32
 8007bec:	af02      	add	r7, sp, #8
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
 8007bf4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	68f9      	ldr	r1, [r7, #12]
 8007c04:	4806      	ldr	r0, [pc, #24]	; (8007c20 <BSP_SD_WriteBlocks+0x38>)
 8007c06:	f7fe f83b 	bl	8005c80 <HAL_SD_WriteBlocks>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8007c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	200065c8 	.word	0x200065c8

08007c24 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007c28:	4805      	ldr	r0, [pc, #20]	; (8007c40 <BSP_SD_GetCardState+0x1c>)
 8007c2a:	f7fe fb99 	bl	8006360 <HAL_SD_GetCardState>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b04      	cmp	r3, #4
 8007c32:	bf14      	ite	ne
 8007c34:	2301      	movne	r3, #1
 8007c36:	2300      	moveq	r3, #0
 8007c38:	b2db      	uxtb	r3, r3
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	200065c8 	.word	0x200065c8

08007c44 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	4803      	ldr	r0, [pc, #12]	; (8007c5c <BSP_SD_GetCardInfo+0x18>)
 8007c50:	f7fe fb5a 	bl	8006308 <HAL_SD_GetCardInfo>
}
 8007c54:	bf00      	nop
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	200065c8 	.word	0x200065c8

08007c60 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007c66:	2301      	movs	r3, #1
 8007c68:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8007c6a:	f000 f80b 	bl	8007c84 <BSP_PlatformIsDetected>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007c74:	2300      	movs	r3, #0
 8007c76:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007c78:	79fb      	ldrb	r3, [r7, #7]
 8007c7a:	b2db      	uxtb	r3, r3
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007c8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c92:	4806      	ldr	r0, [pc, #24]	; (8007cac <BSP_PlatformIsDetected+0x28>)
 8007c94:	f7fb ffcc 	bl	8003c30 <HAL_GPIO_ReadPin>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8007ca2:	79fb      	ldrb	r3, [r7, #7]
}  
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	40021400 	.word	0x40021400

08007cb0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007cba:	4b0b      	ldr	r3, [pc, #44]	; (8007ce8 <SD_CheckStatus+0x38>)
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007cc0:	f7ff ffb0 	bl	8007c24 <BSP_SD_GetCardState>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d107      	bne.n	8007cda <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007cca:	4b07      	ldr	r3, [pc, #28]	; (8007ce8 <SD_CheckStatus+0x38>)
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	f023 0301 	bic.w	r3, r3, #1
 8007cd4:	b2da      	uxtb	r2, r3
 8007cd6:	4b04      	ldr	r3, [pc, #16]	; (8007ce8 <SD_CheckStatus+0x38>)
 8007cd8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007cda:	4b03      	ldr	r3, [pc, #12]	; (8007ce8 <SD_CheckStatus+0x38>)
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	b2db      	uxtb	r3, r3
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	20000011 	.word	0x20000011

08007cec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8007cf6:	4b0b      	ldr	r3, [pc, #44]	; (8007d24 <SD_initialize+0x38>)
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007cfc:	f7ff ff3e 	bl	8007b7c <BSP_SD_Init>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d107      	bne.n	8007d16 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007d06:	79fb      	ldrb	r3, [r7, #7]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7ff ffd1 	bl	8007cb0 <SD_CheckStatus>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	461a      	mov	r2, r3
 8007d12:	4b04      	ldr	r3, [pc, #16]	; (8007d24 <SD_initialize+0x38>)
 8007d14:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007d16:	4b03      	ldr	r3, [pc, #12]	; (8007d24 <SD_initialize+0x38>)
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	b2db      	uxtb	r3, r3
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	20000011 	.word	0x20000011

08007d28 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	4603      	mov	r3, r0
 8007d30:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007d32:	79fb      	ldrb	r3, [r7, #7]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7ff ffbb 	bl	8007cb0 <SD_CheckStatus>
 8007d3a:	4603      	mov	r3, r0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b086      	sub	sp, #24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60b9      	str	r1, [r7, #8]
 8007d4c:	607a      	str	r2, [r7, #4]
 8007d4e:	603b      	str	r3, [r7, #0]
 8007d50:	4603      	mov	r3, r0
 8007d52:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007d58:	f04f 33ff 	mov.w	r3, #4294967295
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	6879      	ldr	r1, [r7, #4]
 8007d60:	68b8      	ldr	r0, [r7, #8]
 8007d62:	f7ff ff23 	bl	8007bac <BSP_SD_ReadBlocks>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d107      	bne.n	8007d7c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007d6c:	bf00      	nop
 8007d6e:	f7ff ff59 	bl	8007c24 <BSP_SD_GetCardState>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1fa      	bne.n	8007d6e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3718      	adds	r7, #24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b086      	sub	sp, #24
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
 8007d90:	603b      	str	r3, [r7, #0]
 8007d92:	4603      	mov	r3, r0
 8007d94:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8007d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	6879      	ldr	r1, [r7, #4]
 8007da2:	68b8      	ldr	r0, [r7, #8]
 8007da4:	f7ff ff20 	bl	8007be8 <BSP_SD_WriteBlocks>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d107      	bne.n	8007dbe <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8007dae:	bf00      	nop
 8007db0:	f7ff ff38 	bl	8007c24 <BSP_SD_GetCardState>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1fa      	bne.n	8007db0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3718      	adds	r7, #24
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b08c      	sub	sp, #48	; 0x30
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	4603      	mov	r3, r0
 8007dd0:	603a      	str	r2, [r7, #0]
 8007dd2:	71fb      	strb	r3, [r7, #7]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007dde:	4b25      	ldr	r3, [pc, #148]	; (8007e74 <SD_ioctl+0xac>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	f003 0301 	and.w	r3, r3, #1
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <SD_ioctl+0x28>
 8007dec:	2303      	movs	r3, #3
 8007dee:	e03c      	b.n	8007e6a <SD_ioctl+0xa2>

  switch (cmd)
 8007df0:	79bb      	ldrb	r3, [r7, #6]
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	d834      	bhi.n	8007e60 <SD_ioctl+0x98>
 8007df6:	a201      	add	r2, pc, #4	; (adr r2, 8007dfc <SD_ioctl+0x34>)
 8007df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfc:	08007e0d 	.word	0x08007e0d
 8007e00:	08007e15 	.word	0x08007e15
 8007e04:	08007e2d 	.word	0x08007e2d
 8007e08:	08007e47 	.word	0x08007e47
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007e12:	e028      	b.n	8007e66 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007e14:	f107 030c 	add.w	r3, r7, #12
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7ff ff13 	bl	8007c44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007e2a:	e01c      	b.n	8007e66 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007e2c:	f107 030c 	add.w	r3, r7, #12
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7ff ff07 	bl	8007c44 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007e44:	e00f      	b.n	8007e66 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007e46:	f107 030c 	add.w	r3, r7, #12
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7ff fefa 	bl	8007c44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	0a5a      	lsrs	r2, r3, #9
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007e5e:	e002      	b.n	8007e66 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007e60:	2304      	movs	r3, #4
 8007e62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007e66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3730      	adds	r7, #48	; 0x30
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	20000011 	.word	0x20000011

08007e78 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	4603      	mov	r3, r0
 8007e80:	6039      	str	r1, [r7, #0]
 8007e82:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007e84:	88fb      	ldrh	r3, [r7, #6]
 8007e86:	2b7f      	cmp	r3, #127	; 0x7f
 8007e88:	d802      	bhi.n	8007e90 <ff_convert+0x18>
		c = chr;
 8007e8a:	88fb      	ldrh	r3, [r7, #6]
 8007e8c:	81fb      	strh	r3, [r7, #14]
 8007e8e:	e025      	b.n	8007edc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00b      	beq.n	8007eae <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007e96:	88fb      	ldrh	r3, [r7, #6]
 8007e98:	2bff      	cmp	r3, #255	; 0xff
 8007e9a:	d805      	bhi.n	8007ea8 <ff_convert+0x30>
 8007e9c:	88fb      	ldrh	r3, [r7, #6]
 8007e9e:	3b80      	subs	r3, #128	; 0x80
 8007ea0:	4a12      	ldr	r2, [pc, #72]	; (8007eec <ff_convert+0x74>)
 8007ea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ea6:	e000      	b.n	8007eaa <ff_convert+0x32>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	81fb      	strh	r3, [r7, #14]
 8007eac:	e016      	b.n	8007edc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007eae:	2300      	movs	r3, #0
 8007eb0:	81fb      	strh	r3, [r7, #14]
 8007eb2:	e009      	b.n	8007ec8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007eb4:	89fb      	ldrh	r3, [r7, #14]
 8007eb6:	4a0d      	ldr	r2, [pc, #52]	; (8007eec <ff_convert+0x74>)
 8007eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ebc:	88fa      	ldrh	r2, [r7, #6]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d006      	beq.n	8007ed0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007ec2:	89fb      	ldrh	r3, [r7, #14]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	81fb      	strh	r3, [r7, #14]
 8007ec8:	89fb      	ldrh	r3, [r7, #14]
 8007eca:	2b7f      	cmp	r3, #127	; 0x7f
 8007ecc:	d9f2      	bls.n	8007eb4 <ff_convert+0x3c>
 8007ece:	e000      	b.n	8007ed2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007ed0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007ed2:	89fb      	ldrh	r3, [r7, #14]
 8007ed4:	3380      	adds	r3, #128	; 0x80
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007edc:	89fb      	ldrh	r3, [r7, #14]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	0800bcf4 	.word	0x0800bcf4

08007ef0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007efa:	88fb      	ldrh	r3, [r7, #6]
 8007efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f00:	d201      	bcs.n	8007f06 <ff_wtoupper+0x16>
 8007f02:	4b3e      	ldr	r3, [pc, #248]	; (8007ffc <ff_wtoupper+0x10c>)
 8007f04:	e000      	b.n	8007f08 <ff_wtoupper+0x18>
 8007f06:	4b3e      	ldr	r3, [pc, #248]	; (8008000 <ff_wtoupper+0x110>)
 8007f08:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	1c9a      	adds	r2, r3, #2
 8007f0e:	617a      	str	r2, [r7, #20]
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007f14:	8a7b      	ldrh	r3, [r7, #18]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d068      	beq.n	8007fec <ff_wtoupper+0xfc>
 8007f1a:	88fa      	ldrh	r2, [r7, #6]
 8007f1c:	8a7b      	ldrh	r3, [r7, #18]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d364      	bcc.n	8007fec <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	1c9a      	adds	r2, r3, #2
 8007f26:	617a      	str	r2, [r7, #20]
 8007f28:	881b      	ldrh	r3, [r3, #0]
 8007f2a:	823b      	strh	r3, [r7, #16]
 8007f2c:	8a3b      	ldrh	r3, [r7, #16]
 8007f2e:	0a1b      	lsrs	r3, r3, #8
 8007f30:	81fb      	strh	r3, [r7, #14]
 8007f32:	8a3b      	ldrh	r3, [r7, #16]
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007f38:	88fa      	ldrh	r2, [r7, #6]
 8007f3a:	8a79      	ldrh	r1, [r7, #18]
 8007f3c:	8a3b      	ldrh	r3, [r7, #16]
 8007f3e:	440b      	add	r3, r1
 8007f40:	429a      	cmp	r2, r3
 8007f42:	da49      	bge.n	8007fd8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007f44:	89fb      	ldrh	r3, [r7, #14]
 8007f46:	2b08      	cmp	r3, #8
 8007f48:	d84f      	bhi.n	8007fea <ff_wtoupper+0xfa>
 8007f4a:	a201      	add	r2, pc, #4	; (adr r2, 8007f50 <ff_wtoupper+0x60>)
 8007f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f50:	08007f75 	.word	0x08007f75
 8007f54:	08007f87 	.word	0x08007f87
 8007f58:	08007f9d 	.word	0x08007f9d
 8007f5c:	08007fa5 	.word	0x08007fa5
 8007f60:	08007fad 	.word	0x08007fad
 8007f64:	08007fb5 	.word	0x08007fb5
 8007f68:	08007fbd 	.word	0x08007fbd
 8007f6c:	08007fc5 	.word	0x08007fc5
 8007f70:	08007fcd 	.word	0x08007fcd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007f74:	88fa      	ldrh	r2, [r7, #6]
 8007f76:	8a7b      	ldrh	r3, [r7, #18]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	005b      	lsls	r3, r3, #1
 8007f7c:	697a      	ldr	r2, [r7, #20]
 8007f7e:	4413      	add	r3, r2
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	80fb      	strh	r3, [r7, #6]
 8007f84:	e027      	b.n	8007fd6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007f86:	88fa      	ldrh	r2, [r7, #6]
 8007f88:	8a7b      	ldrh	r3, [r7, #18]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	88fa      	ldrh	r2, [r7, #6]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	80fb      	strh	r3, [r7, #6]
 8007f9a:	e01c      	b.n	8007fd6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007f9c:	88fb      	ldrh	r3, [r7, #6]
 8007f9e:	3b10      	subs	r3, #16
 8007fa0:	80fb      	strh	r3, [r7, #6]
 8007fa2:	e018      	b.n	8007fd6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007fa4:	88fb      	ldrh	r3, [r7, #6]
 8007fa6:	3b20      	subs	r3, #32
 8007fa8:	80fb      	strh	r3, [r7, #6]
 8007faa:	e014      	b.n	8007fd6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007fac:	88fb      	ldrh	r3, [r7, #6]
 8007fae:	3b30      	subs	r3, #48	; 0x30
 8007fb0:	80fb      	strh	r3, [r7, #6]
 8007fb2:	e010      	b.n	8007fd6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007fb4:	88fb      	ldrh	r3, [r7, #6]
 8007fb6:	3b1a      	subs	r3, #26
 8007fb8:	80fb      	strh	r3, [r7, #6]
 8007fba:	e00c      	b.n	8007fd6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007fbc:	88fb      	ldrh	r3, [r7, #6]
 8007fbe:	3308      	adds	r3, #8
 8007fc0:	80fb      	strh	r3, [r7, #6]
 8007fc2:	e008      	b.n	8007fd6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007fc4:	88fb      	ldrh	r3, [r7, #6]
 8007fc6:	3b50      	subs	r3, #80	; 0x50
 8007fc8:	80fb      	strh	r3, [r7, #6]
 8007fca:	e004      	b.n	8007fd6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007fcc:	88fb      	ldrh	r3, [r7, #6]
 8007fce:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007fd2:	80fb      	strh	r3, [r7, #6]
 8007fd4:	bf00      	nop
			}
			break;
 8007fd6:	e008      	b.n	8007fea <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007fd8:	89fb      	ldrh	r3, [r7, #14]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d195      	bne.n	8007f0a <ff_wtoupper+0x1a>
 8007fde:	8a3b      	ldrh	r3, [r7, #16]
 8007fe0:	005b      	lsls	r3, r3, #1
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007fe8:	e78f      	b.n	8007f0a <ff_wtoupper+0x1a>
			break;
 8007fea:	bf00      	nop
	}

	return chr;
 8007fec:	88fb      	ldrh	r3, [r7, #6]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	371c      	adds	r7, #28
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	0800bdf4 	.word	0x0800bdf4
 8008000:	0800bfe8 	.word	0x0800bfe8

08008004 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	4603      	mov	r3, r0
 800800c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800800e:	79fb      	ldrb	r3, [r7, #7]
 8008010:	4a08      	ldr	r2, [pc, #32]	; (8008034 <disk_status+0x30>)
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	79fa      	ldrb	r2, [r7, #7]
 800801c:	4905      	ldr	r1, [pc, #20]	; (8008034 <disk_status+0x30>)
 800801e:	440a      	add	r2, r1
 8008020:	7a12      	ldrb	r2, [r2, #8]
 8008022:	4610      	mov	r0, r2
 8008024:	4798      	blx	r3
 8008026:	4603      	mov	r3, r0
 8008028:	73fb      	strb	r3, [r7, #15]
  return stat;
 800802a:	7bfb      	ldrb	r3, [r7, #15]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	2000030c 	.word	0x2000030c

08008038 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	4603      	mov	r3, r0
 8008040:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008046:	79fb      	ldrb	r3, [r7, #7]
 8008048:	4a0d      	ldr	r2, [pc, #52]	; (8008080 <disk_initialize+0x48>)
 800804a:	5cd3      	ldrb	r3, [r2, r3]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d111      	bne.n	8008074 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008050:	79fb      	ldrb	r3, [r7, #7]
 8008052:	4a0b      	ldr	r2, [pc, #44]	; (8008080 <disk_initialize+0x48>)
 8008054:	2101      	movs	r1, #1
 8008056:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008058:	79fb      	ldrb	r3, [r7, #7]
 800805a:	4a09      	ldr	r2, [pc, #36]	; (8008080 <disk_initialize+0x48>)
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	79fa      	ldrb	r2, [r7, #7]
 8008066:	4906      	ldr	r1, [pc, #24]	; (8008080 <disk_initialize+0x48>)
 8008068:	440a      	add	r2, r1
 800806a:	7a12      	ldrb	r2, [r2, #8]
 800806c:	4610      	mov	r0, r2
 800806e:	4798      	blx	r3
 8008070:	4603      	mov	r3, r0
 8008072:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008074:	7bfb      	ldrb	r3, [r7, #15]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	2000030c 	.word	0x2000030c

08008084 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008084:	b590      	push	{r4, r7, lr}
 8008086:	b087      	sub	sp, #28
 8008088:	af00      	add	r7, sp, #0
 800808a:	60b9      	str	r1, [r7, #8]
 800808c:	607a      	str	r2, [r7, #4]
 800808e:	603b      	str	r3, [r7, #0]
 8008090:	4603      	mov	r3, r0
 8008092:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008094:	7bfb      	ldrb	r3, [r7, #15]
 8008096:	4a0a      	ldr	r2, [pc, #40]	; (80080c0 <disk_read+0x3c>)
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	689c      	ldr	r4, [r3, #8]
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	4a07      	ldr	r2, [pc, #28]	; (80080c0 <disk_read+0x3c>)
 80080a4:	4413      	add	r3, r2
 80080a6:	7a18      	ldrb	r0, [r3, #8]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	68b9      	ldr	r1, [r7, #8]
 80080ae:	47a0      	blx	r4
 80080b0:	4603      	mov	r3, r0
 80080b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80080b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	371c      	adds	r7, #28
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd90      	pop	{r4, r7, pc}
 80080be:	bf00      	nop
 80080c0:	2000030c 	.word	0x2000030c

080080c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80080c4:	b590      	push	{r4, r7, lr}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60b9      	str	r1, [r7, #8]
 80080cc:	607a      	str	r2, [r7, #4]
 80080ce:	603b      	str	r3, [r7, #0]
 80080d0:	4603      	mov	r3, r0
 80080d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	4a0a      	ldr	r2, [pc, #40]	; (8008100 <disk_write+0x3c>)
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	68dc      	ldr	r4, [r3, #12]
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
 80080e2:	4a07      	ldr	r2, [pc, #28]	; (8008100 <disk_write+0x3c>)
 80080e4:	4413      	add	r3, r2
 80080e6:	7a18      	ldrb	r0, [r3, #8]
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	68b9      	ldr	r1, [r7, #8]
 80080ee:	47a0      	blx	r4
 80080f0:	4603      	mov	r3, r0
 80080f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	371c      	adds	r7, #28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd90      	pop	{r4, r7, pc}
 80080fe:	bf00      	nop
 8008100:	2000030c 	.word	0x2000030c

08008104 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	4603      	mov	r3, r0
 800810c:	603a      	str	r2, [r7, #0]
 800810e:	71fb      	strb	r3, [r7, #7]
 8008110:	460b      	mov	r3, r1
 8008112:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008114:	79fb      	ldrb	r3, [r7, #7]
 8008116:	4a09      	ldr	r2, [pc, #36]	; (800813c <disk_ioctl+0x38>)
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	79fa      	ldrb	r2, [r7, #7]
 8008122:	4906      	ldr	r1, [pc, #24]	; (800813c <disk_ioctl+0x38>)
 8008124:	440a      	add	r2, r1
 8008126:	7a10      	ldrb	r0, [r2, #8]
 8008128:	79b9      	ldrb	r1, [r7, #6]
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	4798      	blx	r3
 800812e:	4603      	mov	r3, r0
 8008130:	73fb      	strb	r3, [r7, #15]
  return res;
 8008132:	7bfb      	ldrb	r3, [r7, #15]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	2000030c 	.word	0x2000030c

08008140 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3301      	adds	r3, #1
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008150:	89fb      	ldrh	r3, [r7, #14]
 8008152:	021b      	lsls	r3, r3, #8
 8008154:	b21a      	sxth	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	b21b      	sxth	r3, r3
 800815c:	4313      	orrs	r3, r2
 800815e:	b21b      	sxth	r3, r3
 8008160:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008162:	89fb      	ldrh	r3, [r7, #14]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	3303      	adds	r3, #3
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	021b      	lsls	r3, r3, #8
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	3202      	adds	r2, #2
 8008188:	7812      	ldrb	r2, [r2, #0]
 800818a:	4313      	orrs	r3, r2
 800818c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	021b      	lsls	r3, r3, #8
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	3201      	adds	r2, #1
 8008196:	7812      	ldrb	r2, [r2, #0]
 8008198:	4313      	orrs	r3, r2
 800819a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	021b      	lsls	r3, r3, #8
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	7812      	ldrb	r2, [r2, #0]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]
	return rv;
 80081a8:	68fb      	ldr	r3, [r7, #12]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80081b6:	b480      	push	{r7}
 80081b8:	b083      	sub	sp, #12
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	460b      	mov	r3, r1
 80081c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	1c5a      	adds	r2, r3, #1
 80081c6:	607a      	str	r2, [r7, #4]
 80081c8:	887a      	ldrh	r2, [r7, #2]
 80081ca:	b2d2      	uxtb	r2, r2
 80081cc:	701a      	strb	r2, [r3, #0]
 80081ce:	887b      	ldrh	r3, [r7, #2]
 80081d0:	0a1b      	lsrs	r3, r3, #8
 80081d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	607a      	str	r2, [r7, #4]
 80081da:	887a      	ldrh	r2, [r7, #2]
 80081dc:	b2d2      	uxtb	r2, r2
 80081de:	701a      	strb	r2, [r3, #0]
}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	1c5a      	adds	r2, r3, #1
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	683a      	ldr	r2, [r7, #0]
 80081fe:	b2d2      	uxtb	r2, r2
 8008200:	701a      	strb	r2, [r3, #0]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	0a1b      	lsrs	r3, r3, #8
 8008206:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	607a      	str	r2, [r7, #4]
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	b2d2      	uxtb	r2, r2
 8008212:	701a      	strb	r2, [r3, #0]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	0a1b      	lsrs	r3, r3, #8
 8008218:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	1c5a      	adds	r2, r3, #1
 800821e:	607a      	str	r2, [r7, #4]
 8008220:	683a      	ldr	r2, [r7, #0]
 8008222:	b2d2      	uxtb	r2, r2
 8008224:	701a      	strb	r2, [r3, #0]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	0a1b      	lsrs	r3, r3, #8
 800822a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	607a      	str	r2, [r7, #4]
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	b2d2      	uxtb	r2, r2
 8008236:	701a      	strb	r2, [r3, #0]
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00d      	beq.n	800827a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	1c53      	adds	r3, r2, #1
 8008262:	613b      	str	r3, [r7, #16]
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	1c59      	adds	r1, r3, #1
 8008268:	6179      	str	r1, [r7, #20]
 800826a:	7812      	ldrb	r2, [r2, #0]
 800826c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	3b01      	subs	r3, #1
 8008272:	607b      	str	r3, [r7, #4]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1f1      	bne.n	800825e <mem_cpy+0x1a>
	}
}
 800827a:	bf00      	nop
 800827c:	371c      	adds	r7, #28
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008286:	b480      	push	{r7}
 8008288:	b087      	sub	sp, #28
 800828a:	af00      	add	r7, sp, #0
 800828c:	60f8      	str	r0, [r7, #12]
 800828e:	60b9      	str	r1, [r7, #8]
 8008290:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	1c5a      	adds	r2, r3, #1
 800829a:	617a      	str	r2, [r7, #20]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	b2d2      	uxtb	r2, r2
 80082a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3b01      	subs	r3, #1
 80082a6:	607b      	str	r3, [r7, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1f3      	bne.n	8008296 <mem_set+0x10>
}
 80082ae:	bf00      	nop
 80082b0:	371c      	adds	r7, #28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80082ba:	b480      	push	{r7}
 80082bc:	b089      	sub	sp, #36	; 0x24
 80082be:	af00      	add	r7, sp, #0
 80082c0:	60f8      	str	r0, [r7, #12]
 80082c2:	60b9      	str	r1, [r7, #8]
 80082c4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	61fb      	str	r3, [r7, #28]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80082ce:	2300      	movs	r3, #0
 80082d0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	1c5a      	adds	r2, r3, #1
 80082d6:	61fa      	str	r2, [r7, #28]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	4619      	mov	r1, r3
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	1c5a      	adds	r2, r3, #1
 80082e0:	61ba      	str	r2, [r7, #24]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	1acb      	subs	r3, r1, r3
 80082e6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	3b01      	subs	r3, #1
 80082ec:	607b      	str	r3, [r7, #4]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <mem_cmp+0x40>
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d0eb      	beq.n	80082d2 <mem_cmp+0x18>

	return r;
 80082fa:	697b      	ldr	r3, [r7, #20]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3724      	adds	r7, #36	; 0x24
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008312:	e002      	b.n	800831a <chk_chr+0x12>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	3301      	adds	r3, #1
 8008318:	607b      	str	r3, [r7, #4]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d005      	beq.n	800832e <chk_chr+0x26>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	461a      	mov	r2, r3
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	4293      	cmp	r3, r2
 800832c:	d1f2      	bne.n	8008314 <chk_chr+0xc>
	return *str;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	781b      	ldrb	r3, [r3, #0]
}
 8008332:	4618      	mov	r0, r3
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
	...

08008340 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800834a:	2300      	movs	r3, #0
 800834c:	60bb      	str	r3, [r7, #8]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	60fb      	str	r3, [r7, #12]
 8008352:	e029      	b.n	80083a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008354:	4a27      	ldr	r2, [pc, #156]	; (80083f4 <chk_lock+0xb4>)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	011b      	lsls	r3, r3, #4
 800835a:	4413      	add	r3, r2
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d01d      	beq.n	800839e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008362:	4a24      	ldr	r2, [pc, #144]	; (80083f4 <chk_lock+0xb4>)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	011b      	lsls	r3, r3, #4
 8008368:	4413      	add	r3, r2
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	429a      	cmp	r2, r3
 8008372:	d116      	bne.n	80083a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008374:	4a1f      	ldr	r2, [pc, #124]	; (80083f4 <chk_lock+0xb4>)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	011b      	lsls	r3, r3, #4
 800837a:	4413      	add	r3, r2
 800837c:	3304      	adds	r3, #4
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008384:	429a      	cmp	r2, r3
 8008386:	d10c      	bne.n	80083a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008388:	4a1a      	ldr	r2, [pc, #104]	; (80083f4 <chk_lock+0xb4>)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	011b      	lsls	r3, r3, #4
 800838e:	4413      	add	r3, r2
 8008390:	3308      	adds	r3, #8
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008398:	429a      	cmp	r2, r3
 800839a:	d102      	bne.n	80083a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800839c:	e007      	b.n	80083ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800839e:	2301      	movs	r3, #1
 80083a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3301      	adds	r3, #1
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d9d2      	bls.n	8008354 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d109      	bne.n	80083c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d102      	bne.n	80083c0 <chk_lock+0x80>
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d101      	bne.n	80083c4 <chk_lock+0x84>
 80083c0:	2300      	movs	r3, #0
 80083c2:	e010      	b.n	80083e6 <chk_lock+0xa6>
 80083c4:	2312      	movs	r3, #18
 80083c6:	e00e      	b.n	80083e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d108      	bne.n	80083e0 <chk_lock+0xa0>
 80083ce:	4a09      	ldr	r2, [pc, #36]	; (80083f4 <chk_lock+0xb4>)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	011b      	lsls	r3, r3, #4
 80083d4:	4413      	add	r3, r2
 80083d6:	330c      	adds	r3, #12
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083de:	d101      	bne.n	80083e4 <chk_lock+0xa4>
 80083e0:	2310      	movs	r3, #16
 80083e2:	e000      	b.n	80083e6 <chk_lock+0xa6>
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	200000ec 	.word	0x200000ec

080083f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80083fe:	2300      	movs	r3, #0
 8008400:	607b      	str	r3, [r7, #4]
 8008402:	e002      	b.n	800840a <enq_lock+0x12>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	3301      	adds	r3, #1
 8008408:	607b      	str	r3, [r7, #4]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d806      	bhi.n	800841e <enq_lock+0x26>
 8008410:	4a09      	ldr	r2, [pc, #36]	; (8008438 <enq_lock+0x40>)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	011b      	lsls	r3, r3, #4
 8008416:	4413      	add	r3, r2
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1f2      	bne.n	8008404 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b02      	cmp	r3, #2
 8008422:	bf14      	ite	ne
 8008424:	2301      	movne	r3, #1
 8008426:	2300      	moveq	r3, #0
 8008428:	b2db      	uxtb	r3, r3
}
 800842a:	4618      	mov	r0, r3
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	200000ec 	.word	0x200000ec

0800843c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008446:	2300      	movs	r3, #0
 8008448:	60fb      	str	r3, [r7, #12]
 800844a:	e01f      	b.n	800848c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800844c:	4a41      	ldr	r2, [pc, #260]	; (8008554 <inc_lock+0x118>)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	011b      	lsls	r3, r3, #4
 8008452:	4413      	add	r3, r2
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	429a      	cmp	r2, r3
 800845c:	d113      	bne.n	8008486 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800845e:	4a3d      	ldr	r2, [pc, #244]	; (8008554 <inc_lock+0x118>)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	011b      	lsls	r3, r3, #4
 8008464:	4413      	add	r3, r2
 8008466:	3304      	adds	r3, #4
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800846e:	429a      	cmp	r2, r3
 8008470:	d109      	bne.n	8008486 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008472:	4a38      	ldr	r2, [pc, #224]	; (8008554 <inc_lock+0x118>)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	011b      	lsls	r3, r3, #4
 8008478:	4413      	add	r3, r2
 800847a:	3308      	adds	r3, #8
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008482:	429a      	cmp	r2, r3
 8008484:	d006      	beq.n	8008494 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	3301      	adds	r3, #1
 800848a:	60fb      	str	r3, [r7, #12]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d9dc      	bls.n	800844c <inc_lock+0x10>
 8008492:	e000      	b.n	8008496 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008494:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2b02      	cmp	r3, #2
 800849a:	d132      	bne.n	8008502 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800849c:	2300      	movs	r3, #0
 800849e:	60fb      	str	r3, [r7, #12]
 80084a0:	e002      	b.n	80084a8 <inc_lock+0x6c>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3301      	adds	r3, #1
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d806      	bhi.n	80084bc <inc_lock+0x80>
 80084ae:	4a29      	ldr	r2, [pc, #164]	; (8008554 <inc_lock+0x118>)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	4413      	add	r3, r2
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1f2      	bne.n	80084a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d101      	bne.n	80084c6 <inc_lock+0x8a>
 80084c2:	2300      	movs	r3, #0
 80084c4:	e040      	b.n	8008548 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	4922      	ldr	r1, [pc, #136]	; (8008554 <inc_lock+0x118>)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	011b      	lsls	r3, r3, #4
 80084d0:	440b      	add	r3, r1
 80084d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	689a      	ldr	r2, [r3, #8]
 80084d8:	491e      	ldr	r1, [pc, #120]	; (8008554 <inc_lock+0x118>)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	011b      	lsls	r3, r3, #4
 80084de:	440b      	add	r3, r1
 80084e0:	3304      	adds	r3, #4
 80084e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	695a      	ldr	r2, [r3, #20]
 80084e8:	491a      	ldr	r1, [pc, #104]	; (8008554 <inc_lock+0x118>)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	011b      	lsls	r3, r3, #4
 80084ee:	440b      	add	r3, r1
 80084f0:	3308      	adds	r3, #8
 80084f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80084f4:	4a17      	ldr	r2, [pc, #92]	; (8008554 <inc_lock+0x118>)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	011b      	lsls	r3, r3, #4
 80084fa:	4413      	add	r3, r2
 80084fc:	330c      	adds	r3, #12
 80084fe:	2200      	movs	r2, #0
 8008500:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d009      	beq.n	800851c <inc_lock+0xe0>
 8008508:	4a12      	ldr	r2, [pc, #72]	; (8008554 <inc_lock+0x118>)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	011b      	lsls	r3, r3, #4
 800850e:	4413      	add	r3, r2
 8008510:	330c      	adds	r3, #12
 8008512:	881b      	ldrh	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d001      	beq.n	800851c <inc_lock+0xe0>
 8008518:	2300      	movs	r3, #0
 800851a:	e015      	b.n	8008548 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d108      	bne.n	8008534 <inc_lock+0xf8>
 8008522:	4a0c      	ldr	r2, [pc, #48]	; (8008554 <inc_lock+0x118>)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	011b      	lsls	r3, r3, #4
 8008528:	4413      	add	r3, r2
 800852a:	330c      	adds	r3, #12
 800852c:	881b      	ldrh	r3, [r3, #0]
 800852e:	3301      	adds	r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	e001      	b.n	8008538 <inc_lock+0xfc>
 8008534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008538:	4906      	ldr	r1, [pc, #24]	; (8008554 <inc_lock+0x118>)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	011b      	lsls	r3, r3, #4
 800853e:	440b      	add	r3, r1
 8008540:	330c      	adds	r3, #12
 8008542:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	3301      	adds	r3, #1
}
 8008548:	4618      	mov	r0, r3
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	200000ec 	.word	0x200000ec

08008558 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3b01      	subs	r3, #1
 8008564:	607b      	str	r3, [r7, #4]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d825      	bhi.n	80085b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800856c:	4a17      	ldr	r2, [pc, #92]	; (80085cc <dec_lock+0x74>)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	011b      	lsls	r3, r3, #4
 8008572:	4413      	add	r3, r2
 8008574:	330c      	adds	r3, #12
 8008576:	881b      	ldrh	r3, [r3, #0]
 8008578:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800857a:	89fb      	ldrh	r3, [r7, #14]
 800857c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008580:	d101      	bne.n	8008586 <dec_lock+0x2e>
 8008582:	2300      	movs	r3, #0
 8008584:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008586:	89fb      	ldrh	r3, [r7, #14]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d002      	beq.n	8008592 <dec_lock+0x3a>
 800858c:	89fb      	ldrh	r3, [r7, #14]
 800858e:	3b01      	subs	r3, #1
 8008590:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008592:	4a0e      	ldr	r2, [pc, #56]	; (80085cc <dec_lock+0x74>)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	011b      	lsls	r3, r3, #4
 8008598:	4413      	add	r3, r2
 800859a:	330c      	adds	r3, #12
 800859c:	89fa      	ldrh	r2, [r7, #14]
 800859e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80085a0:	89fb      	ldrh	r3, [r7, #14]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d105      	bne.n	80085b2 <dec_lock+0x5a>
 80085a6:	4a09      	ldr	r2, [pc, #36]	; (80085cc <dec_lock+0x74>)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	011b      	lsls	r3, r3, #4
 80085ac:	4413      	add	r3, r2
 80085ae:	2200      	movs	r2, #0
 80085b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	737b      	strb	r3, [r7, #13]
 80085b6:	e001      	b.n	80085bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80085b8:	2302      	movs	r3, #2
 80085ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80085bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3714      	adds	r7, #20
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	200000ec 	.word	0x200000ec

080085d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80085d8:	2300      	movs	r3, #0
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	e010      	b.n	8008600 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80085de:	4a0d      	ldr	r2, [pc, #52]	; (8008614 <clear_lock+0x44>)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	011b      	lsls	r3, r3, #4
 80085e4:	4413      	add	r3, r2
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d105      	bne.n	80085fa <clear_lock+0x2a>
 80085ee:	4a09      	ldr	r2, [pc, #36]	; (8008614 <clear_lock+0x44>)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	011b      	lsls	r3, r3, #4
 80085f4:	4413      	add	r3, r2
 80085f6:	2200      	movs	r2, #0
 80085f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	3301      	adds	r3, #1
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d9eb      	bls.n	80085de <clear_lock+0xe>
	}
}
 8008606:	bf00      	nop
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	200000ec 	.word	0x200000ec

08008618 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	78db      	ldrb	r3, [r3, #3]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d034      	beq.n	8008696 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008630:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	7858      	ldrb	r0, [r3, #1]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800863c:	2301      	movs	r3, #1
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	f7ff fd40 	bl	80080c4 <disk_write>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d002      	beq.n	8008650 <sync_window+0x38>
			res = FR_DISK_ERR;
 800864a:	2301      	movs	r3, #1
 800864c:	73fb      	strb	r3, [r7, #15]
 800864e:	e022      	b.n	8008696 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	1ad2      	subs	r2, r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	429a      	cmp	r2, r3
 8008664:	d217      	bcs.n	8008696 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	789b      	ldrb	r3, [r3, #2]
 800866a:	613b      	str	r3, [r7, #16]
 800866c:	e010      	b.n	8008690 <sync_window+0x78>
					wsect += fs->fsize;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	4413      	add	r3, r2
 8008676:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	7858      	ldrb	r0, [r3, #1]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008682:	2301      	movs	r3, #1
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	f7ff fd1d 	bl	80080c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	3b01      	subs	r3, #1
 800868e:	613b      	str	r3, [r7, #16]
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d8eb      	bhi.n	800866e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008696:	7bfb      	ldrb	r3, [r7, #15]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d01b      	beq.n	80086f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f7ff ffad 	bl	8008618 <sync_window>
 80086be:	4603      	mov	r3, r0
 80086c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d113      	bne.n	80086f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	7858      	ldrb	r0, [r3, #1]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80086d2:	2301      	movs	r3, #1
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	f7ff fcd5 	bl	8008084 <disk_read>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d004      	beq.n	80086ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80086e0:	f04f 33ff 	mov.w	r3, #4294967295
 80086e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
	...

080086fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff ff87 	bl	8008618 <sync_window>
 800870a:	4603      	mov	r3, r0
 800870c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d159      	bne.n	80087c8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	2b03      	cmp	r3, #3
 800871a:	d149      	bne.n	80087b0 <sync_fs+0xb4>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	791b      	ldrb	r3, [r3, #4]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d145      	bne.n	80087b0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	899b      	ldrh	r3, [r3, #12]
 800872e:	461a      	mov	r2, r3
 8008730:	2100      	movs	r1, #0
 8008732:	f7ff fda8 	bl	8008286 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	3338      	adds	r3, #56	; 0x38
 800873a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800873e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008742:	4618      	mov	r0, r3
 8008744:	f7ff fd37 	bl	80081b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3338      	adds	r3, #56	; 0x38
 800874c:	4921      	ldr	r1, [pc, #132]	; (80087d4 <sync_fs+0xd8>)
 800874e:	4618      	mov	r0, r3
 8008750:	f7ff fd4c 	bl	80081ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	3338      	adds	r3, #56	; 0x38
 8008758:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800875c:	491e      	ldr	r1, [pc, #120]	; (80087d8 <sync_fs+0xdc>)
 800875e:	4618      	mov	r0, r3
 8008760:	f7ff fd44 	bl	80081ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	3338      	adds	r3, #56	; 0x38
 8008768:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	4619      	mov	r1, r3
 8008772:	4610      	mov	r0, r2
 8008774:	f7ff fd3a 	bl	80081ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3338      	adds	r3, #56	; 0x38
 800877c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	4619      	mov	r1, r3
 8008786:	4610      	mov	r0, r2
 8008788:	f7ff fd30 	bl	80081ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008790:	1c5a      	adds	r2, r3, #1
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	7858      	ldrb	r0, [r3, #1]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087a4:	2301      	movs	r3, #1
 80087a6:	f7ff fc8d 	bl	80080c4 <disk_write>
			fs->fsi_flag = 0;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	785b      	ldrb	r3, [r3, #1]
 80087b4:	2200      	movs	r2, #0
 80087b6:	2100      	movs	r1, #0
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff fca3 	bl	8008104 <disk_ioctl>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d001      	beq.n	80087c8 <sync_fs+0xcc>
 80087c4:	2301      	movs	r3, #1
 80087c6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	41615252 	.word	0x41615252
 80087d8:	61417272 	.word	0x61417272

080087dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	3b02      	subs	r3, #2
 80087ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	69db      	ldr	r3, [r3, #28]
 80087f0:	3b02      	subs	r3, #2
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d301      	bcc.n	80087fc <clust2sect+0x20>
 80087f8:	2300      	movs	r3, #0
 80087fa:	e008      	b.n	800880e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	895b      	ldrh	r3, [r3, #10]
 8008800:	461a      	mov	r2, r3
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	fb03 f202 	mul.w	r2, r3, r2
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880c:	4413      	add	r3, r2
}
 800880e:	4618      	mov	r0, r3
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b086      	sub	sp, #24
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d904      	bls.n	800883a <get_fat+0x20>
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	69db      	ldr	r3, [r3, #28]
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	429a      	cmp	r2, r3
 8008838:	d302      	bcc.n	8008840 <get_fat+0x26>
		val = 1;	/* Internal error */
 800883a:	2301      	movs	r3, #1
 800883c:	617b      	str	r3, [r7, #20]
 800883e:	e0b7      	b.n	80089b0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008840:	f04f 33ff 	mov.w	r3, #4294967295
 8008844:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	2b02      	cmp	r3, #2
 800884c:	d05a      	beq.n	8008904 <get_fat+0xea>
 800884e:	2b03      	cmp	r3, #3
 8008850:	d07d      	beq.n	800894e <get_fat+0x134>
 8008852:	2b01      	cmp	r3, #1
 8008854:	f040 80a2 	bne.w	800899c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	085b      	lsrs	r3, r3, #1
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	4413      	add	r3, r2
 8008864:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	899b      	ldrh	r3, [r3, #12]
 800886e:	4619      	mov	r1, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	fbb3 f3f1 	udiv	r3, r3, r1
 8008876:	4413      	add	r3, r2
 8008878:	4619      	mov	r1, r3
 800887a:	6938      	ldr	r0, [r7, #16]
 800887c:	f7ff ff10 	bl	80086a0 <move_window>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	f040 808d 	bne.w	80089a2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	1c5a      	adds	r2, r3, #1
 800888c:	60fa      	str	r2, [r7, #12]
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	8992      	ldrh	r2, [r2, #12]
 8008892:	fbb3 f1f2 	udiv	r1, r3, r2
 8008896:	fb02 f201 	mul.w	r2, r2, r1
 800889a:	1a9b      	subs	r3, r3, r2
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	4413      	add	r3, r2
 80088a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80088a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	899b      	ldrh	r3, [r3, #12]
 80088ae:	4619      	mov	r1, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80088b6:	4413      	add	r3, r2
 80088b8:	4619      	mov	r1, r3
 80088ba:	6938      	ldr	r0, [r7, #16]
 80088bc:	f7ff fef0 	bl	80086a0 <move_window>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d16f      	bne.n	80089a6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	899b      	ldrh	r3, [r3, #12]
 80088ca:	461a      	mov	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80088d2:	fb02 f201 	mul.w	r2, r2, r1
 80088d6:	1a9b      	subs	r3, r3, r2
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	4413      	add	r3, r2
 80088dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80088e0:	021b      	lsls	r3, r3, #8
 80088e2:	461a      	mov	r2, r3
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	f003 0301 	and.w	r3, r3, #1
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d002      	beq.n	80088fa <get_fat+0xe0>
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	091b      	lsrs	r3, r3, #4
 80088f8:	e002      	b.n	8008900 <get_fat+0xe6>
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008900:	617b      	str	r3, [r7, #20]
			break;
 8008902:	e055      	b.n	80089b0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	899b      	ldrh	r3, [r3, #12]
 800890c:	085b      	lsrs	r3, r3, #1
 800890e:	b29b      	uxth	r3, r3
 8008910:	4619      	mov	r1, r3
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	fbb3 f3f1 	udiv	r3, r3, r1
 8008918:	4413      	add	r3, r2
 800891a:	4619      	mov	r1, r3
 800891c:	6938      	ldr	r0, [r7, #16]
 800891e:	f7ff febf 	bl	80086a0 <move_window>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d140      	bne.n	80089aa <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	005b      	lsls	r3, r3, #1
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	8992      	ldrh	r2, [r2, #12]
 8008936:	fbb3 f0f2 	udiv	r0, r3, r2
 800893a:	fb02 f200 	mul.w	r2, r2, r0
 800893e:	1a9b      	subs	r3, r3, r2
 8008940:	440b      	add	r3, r1
 8008942:	4618      	mov	r0, r3
 8008944:	f7ff fbfc 	bl	8008140 <ld_word>
 8008948:	4603      	mov	r3, r0
 800894a:	617b      	str	r3, [r7, #20]
			break;
 800894c:	e030      	b.n	80089b0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	899b      	ldrh	r3, [r3, #12]
 8008956:	089b      	lsrs	r3, r3, #2
 8008958:	b29b      	uxth	r3, r3
 800895a:	4619      	mov	r1, r3
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008962:	4413      	add	r3, r2
 8008964:	4619      	mov	r1, r3
 8008966:	6938      	ldr	r0, [r7, #16]
 8008968:	f7ff fe9a 	bl	80086a0 <move_window>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d11d      	bne.n	80089ae <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	8992      	ldrh	r2, [r2, #12]
 8008980:	fbb3 f0f2 	udiv	r0, r3, r2
 8008984:	fb02 f200 	mul.w	r2, r2, r0
 8008988:	1a9b      	subs	r3, r3, r2
 800898a:	440b      	add	r3, r1
 800898c:	4618      	mov	r0, r3
 800898e:	f7ff fbef 	bl	8008170 <ld_dword>
 8008992:	4603      	mov	r3, r0
 8008994:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008998:	617b      	str	r3, [r7, #20]
			break;
 800899a:	e009      	b.n	80089b0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800899c:	2301      	movs	r3, #1
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	e006      	b.n	80089b0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089a2:	bf00      	nop
 80089a4:	e004      	b.n	80089b0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089a6:	bf00      	nop
 80089a8:	e002      	b.n	80089b0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80089aa:	bf00      	nop
 80089ac:	e000      	b.n	80089b0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80089ae:	bf00      	nop
		}
	}

	return val;
 80089b0:	697b      	ldr	r3, [r7, #20]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3718      	adds	r7, #24
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80089ba:	b590      	push	{r4, r7, lr}
 80089bc:	b089      	sub	sp, #36	; 0x24
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80089c6:	2302      	movs	r3, #2
 80089c8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	f240 8106 	bls.w	8008bde <put_fat+0x224>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	69db      	ldr	r3, [r3, #28]
 80089d6:	68ba      	ldr	r2, [r7, #8]
 80089d8:	429a      	cmp	r2, r3
 80089da:	f080 8100 	bcs.w	8008bde <put_fat+0x224>
		switch (fs->fs_type) {
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	f000 8088 	beq.w	8008af8 <put_fat+0x13e>
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	f000 80b0 	beq.w	8008b4e <put_fat+0x194>
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	f040 80f5 	bne.w	8008bde <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	61bb      	str	r3, [r7, #24]
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	085b      	lsrs	r3, r3, #1
 80089fc:	69ba      	ldr	r2, [r7, #24]
 80089fe:	4413      	add	r3, r2
 8008a00:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	899b      	ldrh	r3, [r3, #12]
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a12:	4413      	add	r3, r2
 8008a14:	4619      	mov	r1, r3
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f7ff fe42 	bl	80086a0 <move_window>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a20:	7ffb      	ldrb	r3, [r7, #31]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f040 80d4 	bne.w	8008bd0 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	1c5a      	adds	r2, r3, #1
 8008a32:	61ba      	str	r2, [r7, #24]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	8992      	ldrh	r2, [r2, #12]
 8008a38:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a3c:	fb02 f200 	mul.w	r2, r2, r0
 8008a40:	1a9b      	subs	r3, r3, r2
 8008a42:	440b      	add	r3, r1
 8008a44:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00d      	beq.n	8008a6c <put_fat+0xb2>
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	b25b      	sxtb	r3, r3
 8008a56:	f003 030f 	and.w	r3, r3, #15
 8008a5a:	b25a      	sxtb	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	011b      	lsls	r3, r3, #4
 8008a62:	b25b      	sxtb	r3, r3
 8008a64:	4313      	orrs	r3, r2
 8008a66:	b25b      	sxtb	r3, r3
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	e001      	b.n	8008a70 <put_fat+0xb6>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	697a      	ldr	r2, [r7, #20]
 8008a72:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2201      	movs	r2, #1
 8008a78:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	899b      	ldrh	r3, [r3, #12]
 8008a82:	4619      	mov	r1, r3
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a8a:	4413      	add	r3, r2
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f7ff fe06 	bl	80086a0 <move_window>
 8008a94:	4603      	mov	r3, r0
 8008a96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a98:	7ffb      	ldrb	r3, [r7, #31]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f040 809a 	bne.w	8008bd4 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	899b      	ldrh	r3, [r3, #12]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ab2:	fb02 f200 	mul.w	r2, r2, r0
 8008ab6:	1a9b      	subs	r3, r3, r2
 8008ab8:	440b      	add	r3, r1
 8008aba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d003      	beq.n	8008ace <put_fat+0x114>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	091b      	lsrs	r3, r3, #4
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	e00e      	b.n	8008aec <put_fat+0x132>
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	b25b      	sxtb	r3, r3
 8008ad4:	f023 030f 	bic.w	r3, r3, #15
 8008ad8:	b25a      	sxtb	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	0a1b      	lsrs	r3, r3, #8
 8008ade:	b25b      	sxtb	r3, r3
 8008ae0:	f003 030f 	and.w	r3, r3, #15
 8008ae4:	b25b      	sxtb	r3, r3
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	b25b      	sxtb	r3, r3
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2201      	movs	r2, #1
 8008af4:	70da      	strb	r2, [r3, #3]
			break;
 8008af6:	e072      	b.n	8008bde <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	899b      	ldrh	r3, [r3, #12]
 8008b00:	085b      	lsrs	r3, r3, #1
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	4619      	mov	r1, r3
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b0c:	4413      	add	r3, r2
 8008b0e:	4619      	mov	r1, r3
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f7ff fdc5 	bl	80086a0 <move_window>
 8008b16:	4603      	mov	r3, r0
 8008b18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b1a:	7ffb      	ldrb	r3, [r7, #31]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d15b      	bne.n	8008bd8 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	005b      	lsls	r3, r3, #1
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	8992      	ldrh	r2, [r2, #12]
 8008b2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b32:	fb02 f200 	mul.w	r2, r2, r0
 8008b36:	1a9b      	subs	r3, r3, r2
 8008b38:	440b      	add	r3, r1
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	b292      	uxth	r2, r2
 8008b3e:	4611      	mov	r1, r2
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7ff fb38 	bl	80081b6 <st_word>
			fs->wflag = 1;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	70da      	strb	r2, [r3, #3]
			break;
 8008b4c:	e047      	b.n	8008bde <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	899b      	ldrh	r3, [r3, #12]
 8008b56:	089b      	lsrs	r3, r3, #2
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b62:	4413      	add	r3, r2
 8008b64:	4619      	mov	r1, r3
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f7ff fd9a 	bl	80086a0 <move_window>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b70:	7ffb      	ldrb	r3, [r7, #31]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d132      	bne.n	8008bdc <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	8992      	ldrh	r2, [r2, #12]
 8008b8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b8e:	fb02 f200 	mul.w	r2, r2, r0
 8008b92:	1a9b      	subs	r3, r3, r2
 8008b94:	440b      	add	r3, r1
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7ff faea 	bl	8008170 <ld_dword>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008ba2:	4323      	orrs	r3, r4
 8008ba4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	8992      	ldrh	r2, [r2, #12]
 8008bb4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bb8:	fb02 f200 	mul.w	r2, r2, r0
 8008bbc:	1a9b      	subs	r3, r3, r2
 8008bbe:	440b      	add	r3, r1
 8008bc0:	6879      	ldr	r1, [r7, #4]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7ff fb12 	bl	80081ec <st_dword>
			fs->wflag = 1;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	70da      	strb	r2, [r3, #3]
			break;
 8008bce:	e006      	b.n	8008bde <put_fat+0x224>
			if (res != FR_OK) break;
 8008bd0:	bf00      	nop
 8008bd2:	e004      	b.n	8008bde <put_fat+0x224>
			if (res != FR_OK) break;
 8008bd4:	bf00      	nop
 8008bd6:	e002      	b.n	8008bde <put_fat+0x224>
			if (res != FR_OK) break;
 8008bd8:	bf00      	nop
 8008bda:	e000      	b.n	8008bde <put_fat+0x224>
			if (res != FR_OK) break;
 8008bdc:	bf00      	nop
		}
	}
	return res;
 8008bde:	7ffb      	ldrb	r3, [r7, #31]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3724      	adds	r7, #36	; 0x24
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd90      	pop	{r4, r7, pc}

08008be8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b088      	sub	sp, #32
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d904      	bls.n	8008c0e <remove_chain+0x26>
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	69db      	ldr	r3, [r3, #28]
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d301      	bcc.n	8008c12 <remove_chain+0x2a>
 8008c0e:	2302      	movs	r3, #2
 8008c10:	e04b      	b.n	8008caa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00c      	beq.n	8008c32 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008c18:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1c:	6879      	ldr	r1, [r7, #4]
 8008c1e:	69b8      	ldr	r0, [r7, #24]
 8008c20:	f7ff fecb 	bl	80089ba <put_fat>
 8008c24:	4603      	mov	r3, r0
 8008c26:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008c28:	7ffb      	ldrb	r3, [r7, #31]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <remove_chain+0x4a>
 8008c2e:	7ffb      	ldrb	r3, [r7, #31]
 8008c30:	e03b      	b.n	8008caa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008c32:	68b9      	ldr	r1, [r7, #8]
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f7ff fdf0 	bl	800881a <get_fat>
 8008c3a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d031      	beq.n	8008ca6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d101      	bne.n	8008c4c <remove_chain+0x64>
 8008c48:	2302      	movs	r3, #2
 8008c4a:	e02e      	b.n	8008caa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c52:	d101      	bne.n	8008c58 <remove_chain+0x70>
 8008c54:	2301      	movs	r3, #1
 8008c56:	e028      	b.n	8008caa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008c58:	2200      	movs	r2, #0
 8008c5a:	68b9      	ldr	r1, [r7, #8]
 8008c5c:	69b8      	ldr	r0, [r7, #24]
 8008c5e:	f7ff feac 	bl	80089ba <put_fat>
 8008c62:	4603      	mov	r3, r0
 8008c64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008c66:	7ffb      	ldrb	r3, [r7, #31]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <remove_chain+0x88>
 8008c6c:	7ffb      	ldrb	r3, [r7, #31]
 8008c6e:	e01c      	b.n	8008caa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	699a      	ldr	r2, [r3, #24]
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	69db      	ldr	r3, [r3, #28]
 8008c78:	3b02      	subs	r3, #2
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d20b      	bcs.n	8008c96 <remove_chain+0xae>
			fs->free_clst++;
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	1c5a      	adds	r2, r3, #1
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	791b      	ldrb	r3, [r3, #4]
 8008c8c:	f043 0301 	orr.w	r3, r3, #1
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	69db      	ldr	r3, [r3, #28]
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d3c6      	bcc.n	8008c32 <remove_chain+0x4a>
 8008ca4:	e000      	b.n	8008ca8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008ca6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3720      	adds	r7, #32
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b088      	sub	sp, #32
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d10d      	bne.n	8008ce4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d004      	beq.n	8008cde <create_chain+0x2c>
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	69db      	ldr	r3, [r3, #28]
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d31b      	bcc.n	8008d16 <create_chain+0x64>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	61bb      	str	r3, [r7, #24]
 8008ce2:	e018      	b.n	8008d16 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008ce4:	6839      	ldr	r1, [r7, #0]
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7ff fd97 	bl	800881a <get_fat>
 8008cec:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d801      	bhi.n	8008cf8 <create_chain+0x46>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e070      	b.n	8008dda <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfe:	d101      	bne.n	8008d04 <create_chain+0x52>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	e06a      	b.n	8008dda <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	69db      	ldr	r3, [r3, #28]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d201      	bcs.n	8008d12 <create_chain+0x60>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	e063      	b.n	8008dda <create_chain+0x128>
		scl = clst;
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	69db      	ldr	r3, [r3, #28]
 8008d24:	69fa      	ldr	r2, [r7, #28]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d307      	bcc.n	8008d3a <create_chain+0x88>
				ncl = 2;
 8008d2a:	2302      	movs	r3, #2
 8008d2c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008d2e:	69fa      	ldr	r2, [r7, #28]
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d901      	bls.n	8008d3a <create_chain+0x88>
 8008d36:	2300      	movs	r3, #0
 8008d38:	e04f      	b.n	8008dda <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008d3a:	69f9      	ldr	r1, [r7, #28]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f7ff fd6c 	bl	800881a <get_fat>
 8008d42:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00e      	beq.n	8008d68 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d003      	beq.n	8008d58 <create_chain+0xa6>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d56:	d101      	bne.n	8008d5c <create_chain+0xaa>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	e03e      	b.n	8008dda <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008d5c:	69fa      	ldr	r2, [r7, #28]
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d1da      	bne.n	8008d1a <create_chain+0x68>
 8008d64:	2300      	movs	r3, #0
 8008d66:	e038      	b.n	8008dda <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008d68:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d6e:	69f9      	ldr	r1, [r7, #28]
 8008d70:	6938      	ldr	r0, [r7, #16]
 8008d72:	f7ff fe22 	bl	80089ba <put_fat>
 8008d76:	4603      	mov	r3, r0
 8008d78:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d109      	bne.n	8008d94 <create_chain+0xe2>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d006      	beq.n	8008d94 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008d86:	69fa      	ldr	r2, [r7, #28]
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6938      	ldr	r0, [r7, #16]
 8008d8c:	f7ff fe15 	bl	80089ba <put_fat>
 8008d90:	4603      	mov	r3, r0
 8008d92:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d116      	bne.n	8008dc8 <create_chain+0x116>
		fs->last_clst = ncl;
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	69fa      	ldr	r2, [r7, #28]
 8008d9e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	699a      	ldr	r2, [r3, #24]
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	69db      	ldr	r3, [r3, #28]
 8008da8:	3b02      	subs	r3, #2
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d804      	bhi.n	8008db8 <create_chain+0x106>
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	1e5a      	subs	r2, r3, #1
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	791b      	ldrb	r3, [r3, #4]
 8008dbc:	f043 0301 	orr.w	r3, r3, #1
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	711a      	strb	r2, [r3, #4]
 8008dc6:	e007      	b.n	8008dd8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008dc8:	7dfb      	ldrb	r3, [r7, #23]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d102      	bne.n	8008dd4 <create_chain+0x122>
 8008dce:	f04f 33ff 	mov.w	r3, #4294967295
 8008dd2:	e000      	b.n	8008dd6 <create_chain+0x124>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008dd8:	69fb      	ldr	r3, [r7, #28]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3720      	adds	r7, #32
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b087      	sub	sp, #28
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df6:	3304      	adds	r3, #4
 8008df8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	899b      	ldrh	r3, [r3, #12]
 8008dfe:	461a      	mov	r2, r3
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	8952      	ldrh	r2, [r2, #10]
 8008e0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e0e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	1d1a      	adds	r2, r3, #4
 8008e14:	613a      	str	r2, [r7, #16]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d101      	bne.n	8008e24 <clmt_clust+0x42>
 8008e20:	2300      	movs	r3, #0
 8008e22:	e010      	b.n	8008e46 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d307      	bcc.n	8008e3c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	617b      	str	r3, [r7, #20]
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	3304      	adds	r3, #4
 8008e38:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e3a:	e7e9      	b.n	8008e10 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008e3c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	4413      	add	r3, r2
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	371c      	adds	r7, #28
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b086      	sub	sp, #24
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e68:	d204      	bcs.n	8008e74 <dir_sdi+0x22>
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	f003 031f 	and.w	r3, r3, #31
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d001      	beq.n	8008e78 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008e74:	2302      	movs	r3, #2
 8008e76:	e071      	b.n	8008f5c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d106      	bne.n	8008e98 <dir_sdi+0x46>
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d902      	bls.n	8008e98 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e96:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10c      	bne.n	8008eb8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	095b      	lsrs	r3, r3, #5
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	8912      	ldrh	r2, [r2, #8]
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d301      	bcc.n	8008eae <dir_sdi+0x5c>
 8008eaa:	2302      	movs	r3, #2
 8008eac:	e056      	b.n	8008f5c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	61da      	str	r2, [r3, #28]
 8008eb6:	e02d      	b.n	8008f14 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	895b      	ldrh	r3, [r3, #10]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	899b      	ldrh	r3, [r3, #12]
 8008ec2:	fb03 f302 	mul.w	r3, r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008ec8:	e019      	b.n	8008efe <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6979      	ldr	r1, [r7, #20]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7ff fca3 	bl	800881a <get_fat>
 8008ed4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008edc:	d101      	bne.n	8008ee2 <dir_sdi+0x90>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e03c      	b.n	8008f5c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d904      	bls.n	8008ef2 <dir_sdi+0xa0>
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d301      	bcc.n	8008ef6 <dir_sdi+0xa4>
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	e032      	b.n	8008f5c <dir_sdi+0x10a>
			ofs -= csz;
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d2e1      	bcs.n	8008eca <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008f06:	6979      	ldr	r1, [r7, #20]
 8008f08:	6938      	ldr	r0, [r7, #16]
 8008f0a:	f7ff fc67 	bl	80087dc <clust2sect>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <dir_sdi+0xd4>
 8008f22:	2302      	movs	r3, #2
 8008f24:	e01a      	b.n	8008f5c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	69da      	ldr	r2, [r3, #28]
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	899b      	ldrh	r3, [r3, #12]
 8008f2e:	4619      	mov	r1, r3
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f36:	441a      	add	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	899b      	ldrh	r3, [r3, #12]
 8008f46:	461a      	mov	r2, r3
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f4e:	fb02 f200 	mul.w	r2, r2, r0
 8008f52:	1a9b      	subs	r3, r3, r2
 8008f54:	18ca      	adds	r2, r1, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	3320      	adds	r3, #32
 8008f7a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <dir_next+0x28>
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f8a:	d301      	bcc.n	8008f90 <dir_next+0x2c>
 8008f8c:	2304      	movs	r3, #4
 8008f8e:	e0bb      	b.n	8009108 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	899b      	ldrh	r3, [r3, #12]
 8008f94:	461a      	mov	r2, r3
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f9c:	fb02 f201 	mul.w	r2, r2, r1
 8008fa0:	1a9b      	subs	r3, r3, r2
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f040 809d 	bne.w	80090e2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	69db      	ldr	r3, [r3, #28]
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10b      	bne.n	8008fd2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	095b      	lsrs	r3, r3, #5
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	8912      	ldrh	r2, [r2, #8]
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	f0c0 808d 	bcc.w	80090e2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	61da      	str	r2, [r3, #28]
 8008fce:	2304      	movs	r3, #4
 8008fd0:	e09a      	b.n	8009108 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	899b      	ldrh	r3, [r3, #12]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	8952      	ldrh	r2, [r2, #10]
 8008fe2:	3a01      	subs	r2, #1
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d17b      	bne.n	80090e2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	4610      	mov	r0, r2
 8008ff4:	f7ff fc11 	bl	800881a <get_fat>
 8008ff8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d801      	bhi.n	8009004 <dir_next+0xa0>
 8009000:	2302      	movs	r3, #2
 8009002:	e081      	b.n	8009108 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800900a:	d101      	bne.n	8009010 <dir_next+0xac>
 800900c:	2301      	movs	r3, #1
 800900e:	e07b      	b.n	8009108 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	697a      	ldr	r2, [r7, #20]
 8009016:	429a      	cmp	r2, r3
 8009018:	d359      	bcc.n	80090ce <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d104      	bne.n	800902a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	61da      	str	r2, [r3, #28]
 8009026:	2304      	movs	r3, #4
 8009028:	e06e      	b.n	8009108 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	4619      	mov	r1, r3
 8009032:	4610      	mov	r0, r2
 8009034:	f7ff fe3d 	bl	8008cb2 <create_chain>
 8009038:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d101      	bne.n	8009044 <dir_next+0xe0>
 8009040:	2307      	movs	r3, #7
 8009042:	e061      	b.n	8009108 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d101      	bne.n	800904e <dir_next+0xea>
 800904a:	2302      	movs	r3, #2
 800904c:	e05c      	b.n	8009108 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009054:	d101      	bne.n	800905a <dir_next+0xf6>
 8009056:	2301      	movs	r3, #1
 8009058:	e056      	b.n	8009108 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f7ff fadc 	bl	8008618 <sync_window>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <dir_next+0x106>
 8009066:	2301      	movs	r3, #1
 8009068:	e04e      	b.n	8009108 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	899b      	ldrh	r3, [r3, #12]
 8009074:	461a      	mov	r2, r3
 8009076:	2100      	movs	r1, #0
 8009078:	f7ff f905 	bl	8008286 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800907c:	2300      	movs	r3, #0
 800907e:	613b      	str	r3, [r7, #16]
 8009080:	6979      	ldr	r1, [r7, #20]
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f7ff fbaa 	bl	80087dc <clust2sect>
 8009088:	4602      	mov	r2, r0
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	635a      	str	r2, [r3, #52]	; 0x34
 800908e:	e012      	b.n	80090b6 <dir_next+0x152>
						fs->wflag = 1;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2201      	movs	r2, #1
 8009094:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f7ff fabe 	bl	8008618 <sync_window>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <dir_next+0x142>
 80090a2:	2301      	movs	r3, #1
 80090a4:	e030      	b.n	8009108 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	3301      	adds	r3, #1
 80090aa:	613b      	str	r3, [r7, #16]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b0:	1c5a      	adds	r2, r3, #1
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	635a      	str	r2, [r3, #52]	; 0x34
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	895b      	ldrh	r3, [r3, #10]
 80090ba:	461a      	mov	r2, r3
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	4293      	cmp	r3, r2
 80090c0:	d3e6      	bcc.n	8009090 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	1ad2      	subs	r2, r2, r3
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	697a      	ldr	r2, [r7, #20]
 80090d2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80090d4:	6979      	ldr	r1, [r7, #20]
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f7ff fb80 	bl	80087dc <clust2sect>
 80090dc:	4602      	mov	r2, r0
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	899b      	ldrh	r3, [r3, #12]
 80090f2:	461a      	mov	r2, r3
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80090fa:	fb02 f200 	mul.w	r2, r2, r0
 80090fe:	1a9b      	subs	r3, r3, r2
 8009100:	18ca      	adds	r2, r1, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3718      	adds	r7, #24
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009120:	2100      	movs	r1, #0
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7ff fe95 	bl	8008e52 <dir_sdi>
 8009128:	4603      	mov	r3, r0
 800912a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800912c:	7dfb      	ldrb	r3, [r7, #23]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d12b      	bne.n	800918a <dir_alloc+0x7a>
		n = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	4619      	mov	r1, r3
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f7ff faaf 	bl	80086a0 <move_window>
 8009142:	4603      	mov	r3, r0
 8009144:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009146:	7dfb      	ldrb	r3, [r7, #23]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d11d      	bne.n	8009188 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a1b      	ldr	r3, [r3, #32]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	2be5      	cmp	r3, #229	; 0xe5
 8009154:	d004      	beq.n	8009160 <dir_alloc+0x50>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d107      	bne.n	8009170 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	3301      	adds	r3, #1
 8009164:	613b      	str	r3, [r7, #16]
 8009166:	693a      	ldr	r2, [r7, #16]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	429a      	cmp	r2, r3
 800916c:	d102      	bne.n	8009174 <dir_alloc+0x64>
 800916e:	e00c      	b.n	800918a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009170:	2300      	movs	r3, #0
 8009172:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009174:	2101      	movs	r1, #1
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f7ff fef4 	bl	8008f64 <dir_next>
 800917c:	4603      	mov	r3, r0
 800917e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009180:	7dfb      	ldrb	r3, [r7, #23]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d0d7      	beq.n	8009136 <dir_alloc+0x26>
 8009186:	e000      	b.n	800918a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009188:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800918a:	7dfb      	ldrb	r3, [r7, #23]
 800918c:	2b04      	cmp	r3, #4
 800918e:	d101      	bne.n	8009194 <dir_alloc+0x84>
 8009190:	2307      	movs	r3, #7
 8009192:	75fb      	strb	r3, [r7, #23]
	return res;
 8009194:	7dfb      	ldrb	r3, [r7, #23]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3718      	adds	r7, #24
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b084      	sub	sp, #16
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	331a      	adds	r3, #26
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fe ffc7 	bl	8008140 <ld_word>
 80091b2:	4603      	mov	r3, r0
 80091b4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d109      	bne.n	80091d2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	3314      	adds	r3, #20
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fe ffbc 	bl	8008140 <ld_word>
 80091c8:	4603      	mov	r3, r0
 80091ca:	041b      	lsls	r3, r3, #16
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80091d2:	68fb      	ldr	r3, [r7, #12]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	331a      	adds	r3, #26
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	b292      	uxth	r2, r2
 80091f0:	4611      	mov	r1, r2
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7fe ffdf 	bl	80081b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	2b03      	cmp	r3, #3
 80091fe:	d109      	bne.n	8009214 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	f103 0214 	add.w	r2, r3, #20
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	0c1b      	lsrs	r3, r3, #16
 800920a:	b29b      	uxth	r3, r3
 800920c:	4619      	mov	r1, r3
 800920e:	4610      	mov	r0, r2
 8009210:	f7fe ffd1 	bl	80081b6 <st_word>
	}
}
 8009214:	bf00      	nop
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800921c:	b590      	push	{r4, r7, lr}
 800921e:	b087      	sub	sp, #28
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	331a      	adds	r3, #26
 800922a:	4618      	mov	r0, r3
 800922c:	f7fe ff88 	bl	8008140 <ld_word>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d001      	beq.n	800923a <cmp_lfn+0x1e>
 8009236:	2300      	movs	r3, #0
 8009238:	e059      	b.n	80092ee <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009242:	1e5a      	subs	r2, r3, #1
 8009244:	4613      	mov	r3, r2
 8009246:	005b      	lsls	r3, r3, #1
 8009248:	4413      	add	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4413      	add	r3, r2
 800924e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009250:	2301      	movs	r3, #1
 8009252:	81fb      	strh	r3, [r7, #14]
 8009254:	2300      	movs	r3, #0
 8009256:	613b      	str	r3, [r7, #16]
 8009258:	e033      	b.n	80092c2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800925a:	4a27      	ldr	r2, [pc, #156]	; (80092f8 <cmp_lfn+0xdc>)
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	4413      	add	r3, r2
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	4413      	add	r3, r2
 8009268:	4618      	mov	r0, r3
 800926a:	f7fe ff69 	bl	8008140 <ld_word>
 800926e:	4603      	mov	r3, r0
 8009270:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009272:	89fb      	ldrh	r3, [r7, #14]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d01a      	beq.n	80092ae <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	2bfe      	cmp	r3, #254	; 0xfe
 800927c:	d812      	bhi.n	80092a4 <cmp_lfn+0x88>
 800927e:	89bb      	ldrh	r3, [r7, #12]
 8009280:	4618      	mov	r0, r3
 8009282:	f7fe fe35 	bl	8007ef0 <ff_wtoupper>
 8009286:	4603      	mov	r3, r0
 8009288:	461c      	mov	r4, r3
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	1c5a      	adds	r2, r3, #1
 800928e:	617a      	str	r2, [r7, #20]
 8009290:	005b      	lsls	r3, r3, #1
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	4413      	add	r3, r2
 8009296:	881b      	ldrh	r3, [r3, #0]
 8009298:	4618      	mov	r0, r3
 800929a:	f7fe fe29 	bl	8007ef0 <ff_wtoupper>
 800929e:	4603      	mov	r3, r0
 80092a0:	429c      	cmp	r4, r3
 80092a2:	d001      	beq.n	80092a8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80092a4:	2300      	movs	r3, #0
 80092a6:	e022      	b.n	80092ee <cmp_lfn+0xd2>
			}
			wc = uc;
 80092a8:	89bb      	ldrh	r3, [r7, #12]
 80092aa:	81fb      	strh	r3, [r7, #14]
 80092ac:	e006      	b.n	80092bc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80092ae:	89bb      	ldrh	r3, [r7, #12]
 80092b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d001      	beq.n	80092bc <cmp_lfn+0xa0>
 80092b8:	2300      	movs	r3, #0
 80092ba:	e018      	b.n	80092ee <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	3301      	adds	r3, #1
 80092c0:	613b      	str	r3, [r7, #16]
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	2b0c      	cmp	r3, #12
 80092c6:	d9c8      	bls.n	800925a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00b      	beq.n	80092ec <cmp_lfn+0xd0>
 80092d4:	89fb      	ldrh	r3, [r7, #14]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d008      	beq.n	80092ec <cmp_lfn+0xd0>
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	005b      	lsls	r3, r3, #1
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	4413      	add	r3, r2
 80092e2:	881b      	ldrh	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d001      	beq.n	80092ec <cmp_lfn+0xd0>
 80092e8:	2300      	movs	r3, #0
 80092ea:	e000      	b.n	80092ee <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80092ec:	2301      	movs	r3, #1
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	371c      	adds	r7, #28
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd90      	pop	{r4, r7, pc}
 80092f6:	bf00      	nop
 80092f8:	0800c124 	.word	0x0800c124

080092fc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b088      	sub	sp, #32
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	4611      	mov	r1, r2
 8009308:	461a      	mov	r2, r3
 800930a:	460b      	mov	r3, r1
 800930c:	71fb      	strb	r3, [r7, #7]
 800930e:	4613      	mov	r3, r2
 8009310:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	330d      	adds	r3, #13
 8009316:	79ba      	ldrb	r2, [r7, #6]
 8009318:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	330b      	adds	r3, #11
 800931e:	220f      	movs	r2, #15
 8009320:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	330c      	adds	r3, #12
 8009326:	2200      	movs	r2, #0
 8009328:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	331a      	adds	r3, #26
 800932e:	2100      	movs	r1, #0
 8009330:	4618      	mov	r0, r3
 8009332:	f7fe ff40 	bl	80081b6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009336:	79fb      	ldrb	r3, [r7, #7]
 8009338:	1e5a      	subs	r2, r3, #1
 800933a:	4613      	mov	r3, r2
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	4413      	add	r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	4413      	add	r3, r2
 8009344:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	82fb      	strh	r3, [r7, #22]
 800934a:	2300      	movs	r3, #0
 800934c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800934e:	8afb      	ldrh	r3, [r7, #22]
 8009350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009354:	4293      	cmp	r3, r2
 8009356:	d007      	beq.n	8009368 <put_lfn+0x6c>
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	1c5a      	adds	r2, r3, #1
 800935c:	61fa      	str	r2, [r7, #28]
 800935e:	005b      	lsls	r3, r3, #1
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	4413      	add	r3, r2
 8009364:	881b      	ldrh	r3, [r3, #0]
 8009366:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009368:	4a17      	ldr	r2, [pc, #92]	; (80093c8 <put_lfn+0xcc>)
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	4413      	add	r3, r2
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	461a      	mov	r2, r3
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	4413      	add	r3, r2
 8009376:	8afa      	ldrh	r2, [r7, #22]
 8009378:	4611      	mov	r1, r2
 800937a:	4618      	mov	r0, r3
 800937c:	f7fe ff1b 	bl	80081b6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009380:	8afb      	ldrh	r3, [r7, #22]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d102      	bne.n	800938c <put_lfn+0x90>
 8009386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800938a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	3301      	adds	r3, #1
 8009390:	61bb      	str	r3, [r7, #24]
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	2b0c      	cmp	r3, #12
 8009396:	d9da      	bls.n	800934e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009398:	8afb      	ldrh	r3, [r7, #22]
 800939a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800939e:	4293      	cmp	r3, r2
 80093a0:	d006      	beq.n	80093b0 <put_lfn+0xb4>
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	005b      	lsls	r3, r3, #1
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	4413      	add	r3, r2
 80093aa:	881b      	ldrh	r3, [r3, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d103      	bne.n	80093b8 <put_lfn+0xbc>
 80093b0:	79fb      	ldrb	r3, [r7, #7]
 80093b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093b6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	79fa      	ldrb	r2, [r7, #7]
 80093bc:	701a      	strb	r2, [r3, #0]
}
 80093be:	bf00      	nop
 80093c0:	3720      	adds	r7, #32
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	0800c124 	.word	0x0800c124

080093cc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b08c      	sub	sp, #48	; 0x30
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]
 80093d8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80093da:	220b      	movs	r2, #11
 80093dc:	68b9      	ldr	r1, [r7, #8]
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f7fe ff30 	bl	8008244 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	2b05      	cmp	r3, #5
 80093e8:	d92b      	bls.n	8009442 <gen_numname+0x76>
		sr = seq;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80093ee:	e022      	b.n	8009436 <gen_numname+0x6a>
			wc = *lfn++;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	1c9a      	adds	r2, r3, #2
 80093f4:	607a      	str	r2, [r7, #4]
 80093f6:	881b      	ldrh	r3, [r3, #0]
 80093f8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80093fa:	2300      	movs	r3, #0
 80093fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80093fe:	e017      	b.n	8009430 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	005a      	lsls	r2, r3, #1
 8009404:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009406:	f003 0301 	and.w	r3, r3, #1
 800940a:	4413      	add	r3, r2
 800940c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800940e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009410:	085b      	lsrs	r3, r3, #1
 8009412:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800941a:	2b00      	cmp	r3, #0
 800941c:	d005      	beq.n	800942a <gen_numname+0x5e>
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009424:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009428:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800942a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942c:	3301      	adds	r3, #1
 800942e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009432:	2b0f      	cmp	r3, #15
 8009434:	d9e4      	bls.n	8009400 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	881b      	ldrh	r3, [r3, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1d8      	bne.n	80093f0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009442:	2307      	movs	r3, #7
 8009444:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	b2db      	uxtb	r3, r3
 800944a:	f003 030f 	and.w	r3, r3, #15
 800944e:	b2db      	uxtb	r3, r3
 8009450:	3330      	adds	r3, #48	; 0x30
 8009452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009456:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800945a:	2b39      	cmp	r3, #57	; 0x39
 800945c:	d904      	bls.n	8009468 <gen_numname+0x9c>
 800945e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009462:	3307      	adds	r3, #7
 8009464:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946a:	1e5a      	subs	r2, r3, #1
 800946c:	62ba      	str	r2, [r7, #40]	; 0x28
 800946e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009472:	4413      	add	r3, r2
 8009474:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009478:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	091b      	lsrs	r3, r3, #4
 8009480:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d1de      	bne.n	8009446 <gen_numname+0x7a>
	ns[i] = '~';
 8009488:	f107 0214 	add.w	r2, r7, #20
 800948c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948e:	4413      	add	r3, r2
 8009490:	227e      	movs	r2, #126	; 0x7e
 8009492:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009494:	2300      	movs	r3, #0
 8009496:	627b      	str	r3, [r7, #36]	; 0x24
 8009498:	e002      	b.n	80094a0 <gen_numname+0xd4>
 800949a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949c:	3301      	adds	r3, #1
 800949e:	627b      	str	r3, [r7, #36]	; 0x24
 80094a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d205      	bcs.n	80094b4 <gen_numname+0xe8>
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ac:	4413      	add	r3, r2
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	2b20      	cmp	r3, #32
 80094b2:	d1f2      	bne.n	800949a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80094b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b6:	2b07      	cmp	r3, #7
 80094b8:	d808      	bhi.n	80094cc <gen_numname+0x100>
 80094ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094bc:	1c5a      	adds	r2, r3, #1
 80094be:	62ba      	str	r2, [r7, #40]	; 0x28
 80094c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80094c4:	4413      	add	r3, r2
 80094c6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80094ca:	e000      	b.n	80094ce <gen_numname+0x102>
 80094cc:	2120      	movs	r1, #32
 80094ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d0:	1c5a      	adds	r2, r3, #1
 80094d2:	627a      	str	r2, [r7, #36]	; 0x24
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	4413      	add	r3, r2
 80094d8:	460a      	mov	r2, r1
 80094da:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	2b07      	cmp	r3, #7
 80094e0:	d9e8      	bls.n	80094b4 <gen_numname+0xe8>
}
 80094e2:	bf00      	nop
 80094e4:	3730      	adds	r7, #48	; 0x30
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80094ea:	b480      	push	{r7}
 80094ec:	b085      	sub	sp, #20
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80094f2:	2300      	movs	r3, #0
 80094f4:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80094f6:	230b      	movs	r3, #11
 80094f8:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80094fa:	7bfb      	ldrb	r3, [r7, #15]
 80094fc:	b2da      	uxtb	r2, r3
 80094fe:	0852      	lsrs	r2, r2, #1
 8009500:	01db      	lsls	r3, r3, #7
 8009502:	4313      	orrs	r3, r2
 8009504:	b2da      	uxtb	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	1c59      	adds	r1, r3, #1
 800950a:	6079      	str	r1, [r7, #4]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	4413      	add	r3, r2
 8009510:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	3b01      	subs	r3, #1
 8009516:	60bb      	str	r3, [r7, #8]
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1ed      	bne.n	80094fa <sum_sfn+0x10>
	return sum;
 800951e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009520:	4618      	mov	r0, r3
 8009522:	3714      	adds	r7, #20
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b086      	sub	sp, #24
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800953a:	2100      	movs	r1, #0
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7ff fc88 	bl	8008e52 <dir_sdi>
 8009542:	4603      	mov	r3, r0
 8009544:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009546:	7dfb      	ldrb	r3, [r7, #23]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <dir_find+0x24>
 800954c:	7dfb      	ldrb	r3, [r7, #23]
 800954e:	e0a9      	b.n	80096a4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009550:	23ff      	movs	r3, #255	; 0xff
 8009552:	753b      	strb	r3, [r7, #20]
 8009554:	7d3b      	ldrb	r3, [r7, #20]
 8009556:	757b      	strb	r3, [r7, #21]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f04f 32ff 	mov.w	r2, #4294967295
 800955e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	69db      	ldr	r3, [r3, #28]
 8009564:	4619      	mov	r1, r3
 8009566:	6938      	ldr	r0, [r7, #16]
 8009568:	f7ff f89a 	bl	80086a0 <move_window>
 800956c:	4603      	mov	r3, r0
 800956e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009570:	7dfb      	ldrb	r3, [r7, #23]
 8009572:	2b00      	cmp	r3, #0
 8009574:	f040 8090 	bne.w	8009698 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a1b      	ldr	r3, [r3, #32]
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009580:	7dbb      	ldrb	r3, [r7, #22]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d102      	bne.n	800958c <dir_find+0x60>
 8009586:	2304      	movs	r3, #4
 8009588:	75fb      	strb	r3, [r7, #23]
 800958a:	e08a      	b.n	80096a2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a1b      	ldr	r3, [r3, #32]
 8009590:	330b      	adds	r3, #11
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009598:	73fb      	strb	r3, [r7, #15]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	7bfa      	ldrb	r2, [r7, #15]
 800959e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80095a0:	7dbb      	ldrb	r3, [r7, #22]
 80095a2:	2be5      	cmp	r3, #229	; 0xe5
 80095a4:	d007      	beq.n	80095b6 <dir_find+0x8a>
 80095a6:	7bfb      	ldrb	r3, [r7, #15]
 80095a8:	f003 0308 	and.w	r3, r3, #8
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d009      	beq.n	80095c4 <dir_find+0x98>
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	2b0f      	cmp	r3, #15
 80095b4:	d006      	beq.n	80095c4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80095b6:	23ff      	movs	r3, #255	; 0xff
 80095b8:	757b      	strb	r3, [r7, #21]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f04f 32ff 	mov.w	r2, #4294967295
 80095c0:	631a      	str	r2, [r3, #48]	; 0x30
 80095c2:	e05e      	b.n	8009682 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
 80095c6:	2b0f      	cmp	r3, #15
 80095c8:	d136      	bne.n	8009638 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80095d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d154      	bne.n	8009682 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80095d8:	7dbb      	ldrb	r3, [r7, #22]
 80095da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00d      	beq.n	80095fe <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	7b5b      	ldrb	r3, [r3, #13]
 80095e8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80095ea:	7dbb      	ldrb	r3, [r7, #22]
 80095ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095f0:	75bb      	strb	r3, [r7, #22]
 80095f2:	7dbb      	ldrb	r3, [r7, #22]
 80095f4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	695a      	ldr	r2, [r3, #20]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80095fe:	7dba      	ldrb	r2, [r7, #22]
 8009600:	7d7b      	ldrb	r3, [r7, #21]
 8009602:	429a      	cmp	r2, r3
 8009604:	d115      	bne.n	8009632 <dir_find+0x106>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	330d      	adds	r3, #13
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	7d3a      	ldrb	r2, [r7, #20]
 8009610:	429a      	cmp	r2, r3
 8009612:	d10e      	bne.n	8009632 <dir_find+0x106>
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	691a      	ldr	r2, [r3, #16]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a1b      	ldr	r3, [r3, #32]
 800961c:	4619      	mov	r1, r3
 800961e:	4610      	mov	r0, r2
 8009620:	f7ff fdfc 	bl	800921c <cmp_lfn>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d003      	beq.n	8009632 <dir_find+0x106>
 800962a:	7d7b      	ldrb	r3, [r7, #21]
 800962c:	3b01      	subs	r3, #1
 800962e:	b2db      	uxtb	r3, r3
 8009630:	e000      	b.n	8009634 <dir_find+0x108>
 8009632:	23ff      	movs	r3, #255	; 0xff
 8009634:	757b      	strb	r3, [r7, #21]
 8009636:	e024      	b.n	8009682 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009638:	7d7b      	ldrb	r3, [r7, #21]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d109      	bne.n	8009652 <dir_find+0x126>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a1b      	ldr	r3, [r3, #32]
 8009642:	4618      	mov	r0, r3
 8009644:	f7ff ff51 	bl	80094ea <sum_sfn>
 8009648:	4603      	mov	r3, r0
 800964a:	461a      	mov	r2, r3
 800964c:	7d3b      	ldrb	r3, [r7, #20]
 800964e:	4293      	cmp	r3, r2
 8009650:	d024      	beq.n	800969c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009658:	f003 0301 	and.w	r3, r3, #1
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10a      	bne.n	8009676 <dir_find+0x14a>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6a18      	ldr	r0, [r3, #32]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	3324      	adds	r3, #36	; 0x24
 8009668:	220b      	movs	r2, #11
 800966a:	4619      	mov	r1, r3
 800966c:	f7fe fe25 	bl	80082ba <mem_cmp>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d014      	beq.n	80096a0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009676:	23ff      	movs	r3, #255	; 0xff
 8009678:	757b      	strb	r3, [r7, #21]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f04f 32ff 	mov.w	r2, #4294967295
 8009680:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009682:	2100      	movs	r1, #0
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7ff fc6d 	bl	8008f64 <dir_next>
 800968a:	4603      	mov	r3, r0
 800968c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800968e:	7dfb      	ldrb	r3, [r7, #23]
 8009690:	2b00      	cmp	r3, #0
 8009692:	f43f af65 	beq.w	8009560 <dir_find+0x34>
 8009696:	e004      	b.n	80096a2 <dir_find+0x176>
		if (res != FR_OK) break;
 8009698:	bf00      	nop
 800969a:	e002      	b.n	80096a2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800969c:	bf00      	nop
 800969e:	e000      	b.n	80096a2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80096a0:	bf00      	nop

	return res;
 80096a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3718      	adds	r7, #24
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b08c      	sub	sp, #48	; 0x30
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80096c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d001      	beq.n	80096cc <dir_register+0x20>
 80096c8:	2306      	movs	r3, #6
 80096ca:	e0e0      	b.n	800988e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80096cc:	2300      	movs	r3, #0
 80096ce:	627b      	str	r3, [r7, #36]	; 0x24
 80096d0:	e002      	b.n	80096d8 <dir_register+0x2c>
 80096d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d4:	3301      	adds	r3, #1
 80096d6:	627b      	str	r3, [r7, #36]	; 0x24
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	691a      	ldr	r2, [r3, #16]
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	005b      	lsls	r3, r3, #1
 80096e0:	4413      	add	r3, r2
 80096e2:	881b      	ldrh	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1f4      	bne.n	80096d2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80096ee:	f107 030c 	add.w	r3, r7, #12
 80096f2:	220c      	movs	r2, #12
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fe fda5 	bl	8008244 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80096fa:	7dfb      	ldrb	r3, [r7, #23]
 80096fc:	f003 0301 	and.w	r3, r3, #1
 8009700:	2b00      	cmp	r3, #0
 8009702:	d032      	beq.n	800976a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2240      	movs	r2, #64	; 0x40
 8009708:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800970c:	2301      	movs	r3, #1
 800970e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009710:	e016      	b.n	8009740 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	691a      	ldr	r2, [r3, #16]
 800971c:	f107 010c 	add.w	r1, r7, #12
 8009720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009722:	f7ff fe53 	bl	80093cc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f7ff ff00 	bl	800952c <dir_find>
 800972c:	4603      	mov	r3, r0
 800972e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009732:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009736:	2b00      	cmp	r3, #0
 8009738:	d106      	bne.n	8009748 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800973a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973c:	3301      	adds	r3, #1
 800973e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009742:	2b63      	cmp	r3, #99	; 0x63
 8009744:	d9e5      	bls.n	8009712 <dir_register+0x66>
 8009746:	e000      	b.n	800974a <dir_register+0x9e>
			if (res != FR_OK) break;
 8009748:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800974a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974c:	2b64      	cmp	r3, #100	; 0x64
 800974e:	d101      	bne.n	8009754 <dir_register+0xa8>
 8009750:	2307      	movs	r3, #7
 8009752:	e09c      	b.n	800988e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009754:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009758:	2b04      	cmp	r3, #4
 800975a:	d002      	beq.n	8009762 <dir_register+0xb6>
 800975c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009760:	e095      	b.n	800988e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009762:	7dfa      	ldrb	r2, [r7, #23]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800976a:	7dfb      	ldrb	r3, [r7, #23]
 800976c:	f003 0302 	and.w	r3, r3, #2
 8009770:	2b00      	cmp	r3, #0
 8009772:	d007      	beq.n	8009784 <dir_register+0xd8>
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	330c      	adds	r3, #12
 8009778:	4a47      	ldr	r2, [pc, #284]	; (8009898 <dir_register+0x1ec>)
 800977a:	fba2 2303 	umull	r2, r3, r2, r3
 800977e:	089b      	lsrs	r3, r3, #2
 8009780:	3301      	adds	r3, #1
 8009782:	e000      	b.n	8009786 <dir_register+0xda>
 8009784:	2301      	movs	r3, #1
 8009786:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009788:	6a39      	ldr	r1, [r7, #32]
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f7ff fcc0 	bl	8009110 <dir_alloc>
 8009790:	4603      	mov	r3, r0
 8009792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009796:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800979a:	2b00      	cmp	r3, #0
 800979c:	d148      	bne.n	8009830 <dir_register+0x184>
 800979e:	6a3b      	ldr	r3, [r7, #32]
 80097a0:	3b01      	subs	r3, #1
 80097a2:	623b      	str	r3, [r7, #32]
 80097a4:	6a3b      	ldr	r3, [r7, #32]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d042      	beq.n	8009830 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	695a      	ldr	r2, [r3, #20]
 80097ae:	6a3b      	ldr	r3, [r7, #32]
 80097b0:	015b      	lsls	r3, r3, #5
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	4619      	mov	r1, r3
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7ff fb4b 	bl	8008e52 <dir_sdi>
 80097bc:	4603      	mov	r3, r0
 80097be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80097c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d132      	bne.n	8009830 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	3324      	adds	r3, #36	; 0x24
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7ff fe8b 	bl	80094ea <sum_sfn>
 80097d4:	4603      	mov	r3, r0
 80097d6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	69db      	ldr	r3, [r3, #28]
 80097dc:	4619      	mov	r1, r3
 80097de:	69f8      	ldr	r0, [r7, #28]
 80097e0:	f7fe ff5e 	bl	80086a0 <move_window>
 80097e4:	4603      	mov	r3, r0
 80097e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80097ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d11d      	bne.n	800982e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	6918      	ldr	r0, [r3, #16]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6a19      	ldr	r1, [r3, #32]
 80097fa:	6a3b      	ldr	r3, [r7, #32]
 80097fc:	b2da      	uxtb	r2, r3
 80097fe:	7efb      	ldrb	r3, [r7, #27]
 8009800:	f7ff fd7c 	bl	80092fc <put_lfn>
				fs->wflag = 1;
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	2201      	movs	r2, #1
 8009808:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800980a:	2100      	movs	r1, #0
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff fba9 	bl	8008f64 <dir_next>
 8009812:	4603      	mov	r3, r0
 8009814:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009818:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800981c:	2b00      	cmp	r3, #0
 800981e:	d107      	bne.n	8009830 <dir_register+0x184>
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	3b01      	subs	r3, #1
 8009824:	623b      	str	r3, [r7, #32]
 8009826:	6a3b      	ldr	r3, [r7, #32]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1d5      	bne.n	80097d8 <dir_register+0x12c>
 800982c:	e000      	b.n	8009830 <dir_register+0x184>
				if (res != FR_OK) break;
 800982e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009830:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009834:	2b00      	cmp	r3, #0
 8009836:	d128      	bne.n	800988a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	69db      	ldr	r3, [r3, #28]
 800983c:	4619      	mov	r1, r3
 800983e:	69f8      	ldr	r0, [r7, #28]
 8009840:	f7fe ff2e 	bl	80086a0 <move_window>
 8009844:	4603      	mov	r3, r0
 8009846:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800984a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800984e:	2b00      	cmp	r3, #0
 8009850:	d11b      	bne.n	800988a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	2220      	movs	r2, #32
 8009858:	2100      	movs	r1, #0
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe fd13 	bl	8008286 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6a18      	ldr	r0, [r3, #32]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	3324      	adds	r3, #36	; 0x24
 8009868:	220b      	movs	r2, #11
 800986a:	4619      	mov	r1, r3
 800986c:	f7fe fcea 	bl	8008244 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	330c      	adds	r3, #12
 800987c:	f002 0218 	and.w	r2, r2, #24
 8009880:	b2d2      	uxtb	r2, r2
 8009882:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	2201      	movs	r2, #1
 8009888:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800988a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800988e:	4618      	mov	r0, r3
 8009890:	3730      	adds	r7, #48	; 0x30
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	4ec4ec4f 	.word	0x4ec4ec4f

0800989c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b08a      	sub	sp, #40	; 0x28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	613b      	str	r3, [r7, #16]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	2300      	movs	r3, #0
 80098b6:	617b      	str	r3, [r7, #20]
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	1c5a      	adds	r2, r3, #1
 80098c0:	61ba      	str	r2, [r7, #24]
 80098c2:	693a      	ldr	r2, [r7, #16]
 80098c4:	4413      	add	r3, r2
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80098ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098cc:	2b1f      	cmp	r3, #31
 80098ce:	d940      	bls.n	8009952 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80098d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098d2:	2b2f      	cmp	r3, #47	; 0x2f
 80098d4:	d006      	beq.n	80098e4 <create_name+0x48>
 80098d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098d8:	2b5c      	cmp	r3, #92	; 0x5c
 80098da:	d110      	bne.n	80098fe <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80098dc:	e002      	b.n	80098e4 <create_name+0x48>
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	3301      	adds	r3, #1
 80098e2:	61bb      	str	r3, [r7, #24]
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	4413      	add	r3, r2
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	2b2f      	cmp	r3, #47	; 0x2f
 80098ee:	d0f6      	beq.n	80098de <create_name+0x42>
 80098f0:	693a      	ldr	r2, [r7, #16]
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	4413      	add	r3, r2
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	2b5c      	cmp	r3, #92	; 0x5c
 80098fa:	d0f0      	beq.n	80098de <create_name+0x42>
			break;
 80098fc:	e02a      	b.n	8009954 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	2bfe      	cmp	r3, #254	; 0xfe
 8009902:	d901      	bls.n	8009908 <create_name+0x6c>
 8009904:	2306      	movs	r3, #6
 8009906:	e177      	b.n	8009bf8 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009908:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800990a:	b2db      	uxtb	r3, r3
 800990c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800990e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009910:	2101      	movs	r1, #1
 8009912:	4618      	mov	r0, r3
 8009914:	f7fe fab0 	bl	8007e78 <ff_convert>
 8009918:	4603      	mov	r3, r0
 800991a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800991c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <create_name+0x8a>
 8009922:	2306      	movs	r3, #6
 8009924:	e168      	b.n	8009bf8 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009928:	2b7f      	cmp	r3, #127	; 0x7f
 800992a:	d809      	bhi.n	8009940 <create_name+0xa4>
 800992c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800992e:	4619      	mov	r1, r3
 8009930:	48b3      	ldr	r0, [pc, #716]	; (8009c00 <create_name+0x364>)
 8009932:	f7fe fce9 	bl	8008308 <chk_chr>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d001      	beq.n	8009940 <create_name+0xa4>
 800993c:	2306      	movs	r3, #6
 800993e:	e15b      	b.n	8009bf8 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	1c5a      	adds	r2, r3, #1
 8009944:	617a      	str	r2, [r7, #20]
 8009946:	005b      	lsls	r3, r3, #1
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	4413      	add	r3, r2
 800994c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800994e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009950:	e7b4      	b.n	80098bc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009952:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	441a      	add	r2, r3
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800995e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009960:	2b1f      	cmp	r3, #31
 8009962:	d801      	bhi.n	8009968 <create_name+0xcc>
 8009964:	2304      	movs	r3, #4
 8009966:	e000      	b.n	800996a <create_name+0xce>
 8009968:	2300      	movs	r3, #0
 800996a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800996e:	e011      	b.n	8009994 <create_name+0xf8>
		w = lfn[di - 1];
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009976:	3b01      	subs	r3, #1
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	4413      	add	r3, r2
 800997e:	881b      	ldrh	r3, [r3, #0]
 8009980:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009984:	2b20      	cmp	r3, #32
 8009986:	d002      	beq.n	800998e <create_name+0xf2>
 8009988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800998a:	2b2e      	cmp	r3, #46	; 0x2e
 800998c:	d106      	bne.n	800999c <create_name+0x100>
		di--;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	3b01      	subs	r3, #1
 8009992:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1ea      	bne.n	8009970 <create_name+0xd4>
 800999a:	e000      	b.n	800999e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800999c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	005b      	lsls	r3, r3, #1
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	4413      	add	r3, r2
 80099a6:	2200      	movs	r2, #0
 80099a8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d101      	bne.n	80099b4 <create_name+0x118>
 80099b0:	2306      	movs	r3, #6
 80099b2:	e121      	b.n	8009bf8 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	3324      	adds	r3, #36	; 0x24
 80099b8:	220b      	movs	r2, #11
 80099ba:	2120      	movs	r1, #32
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fe fc62 	bl	8008286 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80099c2:	2300      	movs	r3, #0
 80099c4:	61bb      	str	r3, [r7, #24]
 80099c6:	e002      	b.n	80099ce <create_name+0x132>
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	3301      	adds	r3, #1
 80099cc:	61bb      	str	r3, [r7, #24]
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	005b      	lsls	r3, r3, #1
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	4413      	add	r3, r2
 80099d6:	881b      	ldrh	r3, [r3, #0]
 80099d8:	2b20      	cmp	r3, #32
 80099da:	d0f5      	beq.n	80099c8 <create_name+0x12c>
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	005b      	lsls	r3, r3, #1
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	4413      	add	r3, r2
 80099e4:	881b      	ldrh	r3, [r3, #0]
 80099e6:	2b2e      	cmp	r3, #46	; 0x2e
 80099e8:	d0ee      	beq.n	80099c8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d009      	beq.n	8009a04 <create_name+0x168>
 80099f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099f4:	f043 0303 	orr.w	r3, r3, #3
 80099f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80099fc:	e002      	b.n	8009a04 <create_name+0x168>
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	3b01      	subs	r3, #1
 8009a02:	617b      	str	r3, [r7, #20]
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d009      	beq.n	8009a1e <create_name+0x182>
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a10:	3b01      	subs	r3, #1
 8009a12:	005b      	lsls	r3, r3, #1
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	4413      	add	r3, r2
 8009a18:	881b      	ldrh	r3, [r3, #0]
 8009a1a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a1c:	d1ef      	bne.n	80099fe <create_name+0x162>

	i = b = 0; ni = 8;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009a24:	2300      	movs	r3, #0
 8009a26:	623b      	str	r3, [r7, #32]
 8009a28:	2308      	movs	r3, #8
 8009a2a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	1c5a      	adds	r2, r3, #1
 8009a30:	61ba      	str	r2, [r7, #24]
 8009a32:	005b      	lsls	r3, r3, #1
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	4413      	add	r3, r2
 8009a38:	881b      	ldrh	r3, [r3, #0]
 8009a3a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009a3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f000 8090 	beq.w	8009b64 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009a44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a46:	2b20      	cmp	r3, #32
 8009a48:	d006      	beq.n	8009a58 <create_name+0x1bc>
 8009a4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a4c:	2b2e      	cmp	r3, #46	; 0x2e
 8009a4e:	d10a      	bne.n	8009a66 <create_name+0x1ca>
 8009a50:	69ba      	ldr	r2, [r7, #24]
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d006      	beq.n	8009a66 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a5c:	f043 0303 	orr.w	r3, r3, #3
 8009a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a64:	e07d      	b.n	8009b62 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009a66:	6a3a      	ldr	r2, [r7, #32]
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d203      	bcs.n	8009a76 <create_name+0x1da>
 8009a6e:	69ba      	ldr	r2, [r7, #24]
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d123      	bne.n	8009abe <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	2b0b      	cmp	r3, #11
 8009a7a:	d106      	bne.n	8009a8a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a80:	f043 0303 	orr.w	r3, r3, #3
 8009a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a88:	e06f      	b.n	8009b6a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009a8a:	69ba      	ldr	r2, [r7, #24]
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d005      	beq.n	8009a9e <create_name+0x202>
 8009a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a96:	f043 0303 	orr.w	r3, r3, #3
 8009a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009a9e:	69ba      	ldr	r2, [r7, #24]
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d860      	bhi.n	8009b68 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	61bb      	str	r3, [r7, #24]
 8009aaa:	2308      	movs	r3, #8
 8009aac:	623b      	str	r3, [r7, #32]
 8009aae:	230b      	movs	r3, #11
 8009ab0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009ab2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009abc:	e051      	b.n	8009b62 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009abe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8009ac2:	d914      	bls.n	8009aee <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009ac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7fe f9d5 	bl	8007e78 <ff_convert>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009ad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d004      	beq.n	8009ae2 <create_name+0x246>
 8009ad8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ada:	3b80      	subs	r3, #128	; 0x80
 8009adc:	4a49      	ldr	r2, [pc, #292]	; (8009c04 <create_name+0x368>)
 8009ade:	5cd3      	ldrb	r3, [r2, r3]
 8009ae0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ae6:	f043 0302 	orr.w	r3, r3, #2
 8009aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009aee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d007      	beq.n	8009b04 <create_name+0x268>
 8009af4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009af6:	4619      	mov	r1, r3
 8009af8:	4843      	ldr	r0, [pc, #268]	; (8009c08 <create_name+0x36c>)
 8009afa:	f7fe fc05 	bl	8008308 <chk_chr>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d008      	beq.n	8009b16 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009b04:	235f      	movs	r3, #95	; 0x5f
 8009b06:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b0c:	f043 0303 	orr.w	r3, r3, #3
 8009b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b14:	e01b      	b.n	8009b4e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009b16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b18:	2b40      	cmp	r3, #64	; 0x40
 8009b1a:	d909      	bls.n	8009b30 <create_name+0x294>
 8009b1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b1e:	2b5a      	cmp	r3, #90	; 0x5a
 8009b20:	d806      	bhi.n	8009b30 <create_name+0x294>
					b |= 2;
 8009b22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b26:	f043 0302 	orr.w	r3, r3, #2
 8009b2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b2e:	e00e      	b.n	8009b4e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009b30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b32:	2b60      	cmp	r3, #96	; 0x60
 8009b34:	d90b      	bls.n	8009b4e <create_name+0x2b2>
 8009b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b38:	2b7a      	cmp	r3, #122	; 0x7a
 8009b3a:	d808      	bhi.n	8009b4e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009b3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b40:	f043 0301 	orr.w	r3, r3, #1
 8009b44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b4a:	3b20      	subs	r3, #32
 8009b4c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	1c5a      	adds	r2, r3, #1
 8009b52:	623a      	str	r2, [r7, #32]
 8009b54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b56:	b2d1      	uxtb	r1, r2
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	460a      	mov	r2, r1
 8009b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009b62:	e763      	b.n	8009a2c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009b64:	bf00      	nop
 8009b66:	e000      	b.n	8009b6a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8009b68:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b70:	2be5      	cmp	r3, #229	; 0xe5
 8009b72:	d103      	bne.n	8009b7c <create_name+0x2e0>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2205      	movs	r2, #5
 8009b78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	2b08      	cmp	r3, #8
 8009b80:	d104      	bne.n	8009b8c <create_name+0x2f0>
 8009b82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009b8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b90:	f003 030c 	and.w	r3, r3, #12
 8009b94:	2b0c      	cmp	r3, #12
 8009b96:	d005      	beq.n	8009ba4 <create_name+0x308>
 8009b98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b9c:	f003 0303 	and.w	r3, r3, #3
 8009ba0:	2b03      	cmp	r3, #3
 8009ba2:	d105      	bne.n	8009bb0 <create_name+0x314>
 8009ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ba8:	f043 0302 	orr.w	r3, r3, #2
 8009bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bb4:	f003 0302 	and.w	r3, r3, #2
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d117      	bne.n	8009bec <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009bbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009bc0:	f003 0303 	and.w	r3, r3, #3
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d105      	bne.n	8009bd4 <create_name+0x338>
 8009bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bcc:	f043 0310 	orr.w	r3, r3, #16
 8009bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009bd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009bd8:	f003 030c 	and.w	r3, r3, #12
 8009bdc:	2b04      	cmp	r3, #4
 8009bde:	d105      	bne.n	8009bec <create_name+0x350>
 8009be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009be4:	f043 0308 	orr.w	r3, r3, #8
 8009be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009bf2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009bf6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3728      	adds	r7, #40	; 0x28
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	0800bc78 	.word	0x0800bc78
 8009c04:	0800c0a4 	.word	0x0800c0a4
 8009c08:	0800bc84 	.word	0x0800bc84

08009c0c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b086      	sub	sp, #24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009c20:	e002      	b.n	8009c28 <follow_path+0x1c>
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	3301      	adds	r3, #1
 8009c26:	603b      	str	r3, [r7, #0]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	2b2f      	cmp	r3, #47	; 0x2f
 8009c2e:	d0f8      	beq.n	8009c22 <follow_path+0x16>
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	2b5c      	cmp	r3, #92	; 0x5c
 8009c36:	d0f4      	beq.n	8009c22 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	2b1f      	cmp	r3, #31
 8009c44:	d80a      	bhi.n	8009c5c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2280      	movs	r2, #128	; 0x80
 8009c4a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009c4e:	2100      	movs	r1, #0
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f7ff f8fe 	bl	8008e52 <dir_sdi>
 8009c56:	4603      	mov	r3, r0
 8009c58:	75fb      	strb	r3, [r7, #23]
 8009c5a:	e048      	b.n	8009cee <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009c5c:	463b      	mov	r3, r7
 8009c5e:	4619      	mov	r1, r3
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f7ff fe1b 	bl	800989c <create_name>
 8009c66:	4603      	mov	r3, r0
 8009c68:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009c6a:	7dfb      	ldrb	r3, [r7, #23]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d139      	bne.n	8009ce4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7ff fc5b 	bl	800952c <dir_find>
 8009c76:	4603      	mov	r3, r0
 8009c78:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c80:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009c82:	7dfb      	ldrb	r3, [r7, #23]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d00a      	beq.n	8009c9e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009c88:	7dfb      	ldrb	r3, [r7, #23]
 8009c8a:	2b04      	cmp	r3, #4
 8009c8c:	d12c      	bne.n	8009ce8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009c8e:	7afb      	ldrb	r3, [r7, #11]
 8009c90:	f003 0304 	and.w	r3, r3, #4
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d127      	bne.n	8009ce8 <follow_path+0xdc>
 8009c98:	2305      	movs	r3, #5
 8009c9a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009c9c:	e024      	b.n	8009ce8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009c9e:	7afb      	ldrb	r3, [r7, #11]
 8009ca0:	f003 0304 	and.w	r3, r3, #4
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d121      	bne.n	8009cec <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	799b      	ldrb	r3, [r3, #6]
 8009cac:	f003 0310 	and.w	r3, r3, #16
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d102      	bne.n	8009cba <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009cb4:	2305      	movs	r3, #5
 8009cb6:	75fb      	strb	r3, [r7, #23]
 8009cb8:	e019      	b.n	8009cee <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	695b      	ldr	r3, [r3, #20]
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	8992      	ldrh	r2, [r2, #12]
 8009cc8:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ccc:	fb02 f200 	mul.w	r2, r2, r0
 8009cd0:	1a9b      	subs	r3, r3, r2
 8009cd2:	440b      	add	r3, r1
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f7ff fa61 	bl	800919e <ld_clust>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009ce2:	e7bb      	b.n	8009c5c <follow_path+0x50>
			if (res != FR_OK) break;
 8009ce4:	bf00      	nop
 8009ce6:	e002      	b.n	8009cee <follow_path+0xe2>
				break;
 8009ce8:	bf00      	nop
 8009cea:	e000      	b.n	8009cee <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009cec:	bf00      	nop
			}
		}
	}

	return res;
 8009cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3718      	adds	r7, #24
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b087      	sub	sp, #28
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009d00:	f04f 33ff 	mov.w	r3, #4294967295
 8009d04:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d031      	beq.n	8009d72 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	617b      	str	r3, [r7, #20]
 8009d14:	e002      	b.n	8009d1c <get_ldnumber+0x24>
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	617b      	str	r3, [r7, #20]
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	2b1f      	cmp	r3, #31
 8009d22:	d903      	bls.n	8009d2c <get_ldnumber+0x34>
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	2b3a      	cmp	r3, #58	; 0x3a
 8009d2a:	d1f4      	bne.n	8009d16 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	2b3a      	cmp	r3, #58	; 0x3a
 8009d32:	d11c      	bne.n	8009d6e <get_ldnumber+0x76>
			tp = *path;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	1c5a      	adds	r2, r3, #1
 8009d3e:	60fa      	str	r2, [r7, #12]
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	3b30      	subs	r3, #48	; 0x30
 8009d44:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	2b09      	cmp	r3, #9
 8009d4a:	d80e      	bhi.n	8009d6a <get_ldnumber+0x72>
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d10a      	bne.n	8009d6a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d107      	bne.n	8009d6a <get_ldnumber+0x72>
					vol = (int)i;
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	3301      	adds	r3, #1
 8009d62:	617b      	str	r3, [r7, #20]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	e002      	b.n	8009d74 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009d6e:	2300      	movs	r3, #0
 8009d70:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009d72:	693b      	ldr	r3, [r7, #16]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	371c      	adds	r7, #28
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	70da      	strb	r2, [r3, #3]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f04f 32ff 	mov.w	r2, #4294967295
 8009d96:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7fe fc80 	bl	80086a0 <move_window>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <check_fs+0x2a>
 8009da6:	2304      	movs	r3, #4
 8009da8:	e038      	b.n	8009e1c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	3338      	adds	r3, #56	; 0x38
 8009dae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fe f9c4 	bl	8008140 <ld_word>
 8009db8:	4603      	mov	r3, r0
 8009dba:	461a      	mov	r2, r3
 8009dbc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d001      	beq.n	8009dc8 <check_fs+0x48>
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e029      	b.n	8009e1c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009dce:	2be9      	cmp	r3, #233	; 0xe9
 8009dd0:	d009      	beq.n	8009de6 <check_fs+0x66>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009dd8:	2beb      	cmp	r3, #235	; 0xeb
 8009dda:	d11e      	bne.n	8009e1a <check_fs+0x9a>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009de2:	2b90      	cmp	r3, #144	; 0x90
 8009de4:	d119      	bne.n	8009e1a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	3338      	adds	r3, #56	; 0x38
 8009dea:	3336      	adds	r3, #54	; 0x36
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7fe f9bf 	bl	8008170 <ld_dword>
 8009df2:	4603      	mov	r3, r0
 8009df4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009df8:	4a0a      	ldr	r2, [pc, #40]	; (8009e24 <check_fs+0xa4>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d101      	bne.n	8009e02 <check_fs+0x82>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	e00c      	b.n	8009e1c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	3338      	adds	r3, #56	; 0x38
 8009e06:	3352      	adds	r3, #82	; 0x52
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fe f9b1 	bl	8008170 <ld_dword>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	4b05      	ldr	r3, [pc, #20]	; (8009e28 <check_fs+0xa8>)
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d101      	bne.n	8009e1a <check_fs+0x9a>
 8009e16:	2300      	movs	r3, #0
 8009e18:	e000      	b.n	8009e1c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009e1a:	2302      	movs	r3, #2
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	00544146 	.word	0x00544146
 8009e28:	33544146 	.word	0x33544146

08009e2c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b096      	sub	sp, #88	; 0x58
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	4613      	mov	r3, r2
 8009e38:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f7ff ff59 	bl	8009cf8 <get_ldnumber>
 8009e46:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	da01      	bge.n	8009e52 <find_volume+0x26>
 8009e4e:	230b      	movs	r3, #11
 8009e50:	e268      	b.n	800a324 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009e52:	4ab0      	ldr	r2, [pc, #704]	; (800a114 <find_volume+0x2e8>)
 8009e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e5a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d101      	bne.n	8009e66 <find_volume+0x3a>
 8009e62:	230c      	movs	r3, #12
 8009e64:	e25e      	b.n	800a324 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e6a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009e6c:	79fb      	ldrb	r3, [r7, #7]
 8009e6e:	f023 0301 	bic.w	r3, r3, #1
 8009e72:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d01a      	beq.n	8009eb2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7e:	785b      	ldrb	r3, [r3, #1]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fe f8bf 	bl	8008004 <disk_status>
 8009e86:	4603      	mov	r3, r0
 8009e88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009e8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e90:	f003 0301 	and.w	r3, r3, #1
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10c      	bne.n	8009eb2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009e98:	79fb      	ldrb	r3, [r7, #7]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d007      	beq.n	8009eae <find_volume+0x82>
 8009e9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ea2:	f003 0304 	and.w	r3, r3, #4
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009eaa:	230a      	movs	r3, #10
 8009eac:	e23a      	b.n	800a324 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8009eae:	2300      	movs	r3, #0
 8009eb0:	e238      	b.n	800a324 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ebe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec2:	785b      	ldrb	r3, [r3, #1]
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7fe f8b7 	bl	8008038 <disk_initialize>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009ed0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ed4:	f003 0301 	and.w	r3, r3, #1
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d001      	beq.n	8009ee0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009edc:	2303      	movs	r3, #3
 8009ede:	e221      	b.n	800a324 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009ee0:	79fb      	ldrb	r3, [r7, #7]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d007      	beq.n	8009ef6 <find_volume+0xca>
 8009ee6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009eea:	f003 0304 	and.w	r3, r3, #4
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d001      	beq.n	8009ef6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009ef2:	230a      	movs	r3, #10
 8009ef4:	e216      	b.n	800a324 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef8:	7858      	ldrb	r0, [r3, #1]
 8009efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efc:	330c      	adds	r3, #12
 8009efe:	461a      	mov	r2, r3
 8009f00:	2102      	movs	r1, #2
 8009f02:	f7fe f8ff 	bl	8008104 <disk_ioctl>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d001      	beq.n	8009f10 <find_volume+0xe4>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e209      	b.n	800a324 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f12:	899b      	ldrh	r3, [r3, #12]
 8009f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f18:	d80d      	bhi.n	8009f36 <find_volume+0x10a>
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1c:	899b      	ldrh	r3, [r3, #12]
 8009f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f22:	d308      	bcc.n	8009f36 <find_volume+0x10a>
 8009f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f26:	899b      	ldrh	r3, [r3, #12]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2c:	899b      	ldrh	r3, [r3, #12]
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	4013      	ands	r3, r2
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <find_volume+0x10e>
 8009f36:	2301      	movs	r3, #1
 8009f38:	e1f4      	b.n	800a324 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009f3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f42:	f7ff ff1d 	bl	8009d80 <check_fs>
 8009f46:	4603      	mov	r3, r0
 8009f48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009f4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f50:	2b02      	cmp	r3, #2
 8009f52:	d14b      	bne.n	8009fec <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009f54:	2300      	movs	r3, #0
 8009f56:	643b      	str	r3, [r7, #64]	; 0x40
 8009f58:	e01f      	b.n	8009f9a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f62:	011b      	lsls	r3, r3, #4
 8009f64:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009f68:	4413      	add	r3, r2
 8009f6a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6e:	3304      	adds	r3, #4
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d006      	beq.n	8009f84 <find_volume+0x158>
 8009f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f78:	3308      	adds	r3, #8
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fe f8f8 	bl	8008170 <ld_dword>
 8009f80:	4602      	mov	r2, r0
 8009f82:	e000      	b.n	8009f86 <find_volume+0x15a>
 8009f84:	2200      	movs	r2, #0
 8009f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009f8e:	440b      	add	r3, r1
 8009f90:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f96:	3301      	adds	r3, #1
 8009f98:	643b      	str	r3, [r7, #64]	; 0x40
 8009f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f9c:	2b03      	cmp	r3, #3
 8009f9e:	d9dc      	bls.n	8009f5a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d002      	beq.n	8009fb0 <find_volume+0x184>
 8009faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fac:	3b01      	subs	r3, #1
 8009fae:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009fb8:	4413      	add	r3, r2
 8009fba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009fbe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d005      	beq.n	8009fd2 <find_volume+0x1a6>
 8009fc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009fc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009fca:	f7ff fed9 	bl	8009d80 <check_fs>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	e000      	b.n	8009fd4 <find_volume+0x1a8>
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009fd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d905      	bls.n	8009fec <find_volume+0x1c0>
 8009fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8009fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fe8:	2b03      	cmp	r3, #3
 8009fea:	d9e1      	bls.n	8009fb0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009fec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ff0:	2b04      	cmp	r3, #4
 8009ff2:	d101      	bne.n	8009ff8 <find_volume+0x1cc>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e195      	b.n	800a324 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009ff8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d901      	bls.n	800a004 <find_volume+0x1d8>
 800a000:	230d      	movs	r3, #13
 800a002:	e18f      	b.n	800a324 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a006:	3338      	adds	r3, #56	; 0x38
 800a008:	330b      	adds	r3, #11
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fe f898 	bl	8008140 <ld_word>
 800a010:	4603      	mov	r3, r0
 800a012:	461a      	mov	r2, r3
 800a014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a016:	899b      	ldrh	r3, [r3, #12]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d001      	beq.n	800a020 <find_volume+0x1f4>
 800a01c:	230d      	movs	r3, #13
 800a01e:	e181      	b.n	800a324 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a022:	3338      	adds	r3, #56	; 0x38
 800a024:	3316      	adds	r3, #22
 800a026:	4618      	mov	r0, r3
 800a028:	f7fe f88a 	bl	8008140 <ld_word>
 800a02c:	4603      	mov	r3, r0
 800a02e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a032:	2b00      	cmp	r3, #0
 800a034:	d106      	bne.n	800a044 <find_volume+0x218>
 800a036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a038:	3338      	adds	r3, #56	; 0x38
 800a03a:	3324      	adds	r3, #36	; 0x24
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7fe f897 	bl	8008170 <ld_dword>
 800a042:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a046:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a048:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a052:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a056:	789b      	ldrb	r3, [r3, #2]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d005      	beq.n	800a068 <find_volume+0x23c>
 800a05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05e:	789b      	ldrb	r3, [r3, #2]
 800a060:	2b02      	cmp	r3, #2
 800a062:	d001      	beq.n	800a068 <find_volume+0x23c>
 800a064:	230d      	movs	r3, #13
 800a066:	e15d      	b.n	800a324 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06a:	789b      	ldrb	r3, [r3, #2]
 800a06c:	461a      	mov	r2, r3
 800a06e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a070:	fb02 f303 	mul.w	r3, r2, r3
 800a074:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a078:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a080:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a084:	895b      	ldrh	r3, [r3, #10]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d008      	beq.n	800a09c <find_volume+0x270>
 800a08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08c:	895b      	ldrh	r3, [r3, #10]
 800a08e:	461a      	mov	r2, r3
 800a090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a092:	895b      	ldrh	r3, [r3, #10]
 800a094:	3b01      	subs	r3, #1
 800a096:	4013      	ands	r3, r2
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <find_volume+0x274>
 800a09c:	230d      	movs	r3, #13
 800a09e:	e141      	b.n	800a324 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a2:	3338      	adds	r3, #56	; 0x38
 800a0a4:	3311      	adds	r3, #17
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fe f84a 	bl	8008140 <ld_word>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b6:	891b      	ldrh	r3, [r3, #8]
 800a0b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0ba:	8992      	ldrh	r2, [r2, #12]
 800a0bc:	0952      	lsrs	r2, r2, #5
 800a0be:	b292      	uxth	r2, r2
 800a0c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0c4:	fb02 f201 	mul.w	r2, r2, r1
 800a0c8:	1a9b      	subs	r3, r3, r2
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d001      	beq.n	800a0d4 <find_volume+0x2a8>
 800a0d0:	230d      	movs	r3, #13
 800a0d2:	e127      	b.n	800a324 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d6:	3338      	adds	r3, #56	; 0x38
 800a0d8:	3313      	adds	r3, #19
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fe f830 	bl	8008140 <ld_word>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a0e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d106      	bne.n	800a0f8 <find_volume+0x2cc>
 800a0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ec:	3338      	adds	r3, #56	; 0x38
 800a0ee:	3320      	adds	r3, #32
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7fe f83d 	bl	8008170 <ld_dword>
 800a0f6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fa:	3338      	adds	r3, #56	; 0x38
 800a0fc:	330e      	adds	r3, #14
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fe f81e 	bl	8008140 <ld_word>
 800a104:	4603      	mov	r3, r0
 800a106:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a108:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d104      	bne.n	800a118 <find_volume+0x2ec>
 800a10e:	230d      	movs	r3, #13
 800a110:	e108      	b.n	800a324 <find_volume+0x4f8>
 800a112:	bf00      	nop
 800a114:	200000e4 	.word	0x200000e4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a118:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a11a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a11c:	4413      	add	r3, r2
 800a11e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a120:	8911      	ldrh	r1, [r2, #8]
 800a122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a124:	8992      	ldrh	r2, [r2, #12]
 800a126:	0952      	lsrs	r2, r2, #5
 800a128:	b292      	uxth	r2, r2
 800a12a:	fbb1 f2f2 	udiv	r2, r1, r2
 800a12e:	b292      	uxth	r2, r2
 800a130:	4413      	add	r3, r2
 800a132:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a138:	429a      	cmp	r2, r3
 800a13a:	d201      	bcs.n	800a140 <find_volume+0x314>
 800a13c:	230d      	movs	r3, #13
 800a13e:	e0f1      	b.n	800a324 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a140:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a148:	8952      	ldrh	r2, [r2, #10]
 800a14a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a14e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a152:	2b00      	cmp	r3, #0
 800a154:	d101      	bne.n	800a15a <find_volume+0x32e>
 800a156:	230d      	movs	r3, #13
 800a158:	e0e4      	b.n	800a324 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800a15a:	2303      	movs	r3, #3
 800a15c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a162:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a166:	4293      	cmp	r3, r2
 800a168:	d802      	bhi.n	800a170 <find_volume+0x344>
 800a16a:	2302      	movs	r3, #2
 800a16c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a176:	4293      	cmp	r3, r2
 800a178:	d802      	bhi.n	800a180 <find_volume+0x354>
 800a17a:	2301      	movs	r3, #1
 800a17c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a182:	1c9a      	adds	r2, r3, #2
 800a184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a186:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a18c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a18e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a192:	441a      	add	r2, r3
 800a194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a196:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a198:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	441a      	add	r2, r3
 800a19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a1a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1a6:	2b03      	cmp	r3, #3
 800a1a8:	d11e      	bne.n	800a1e8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ac:	3338      	adds	r3, #56	; 0x38
 800a1ae:	332a      	adds	r3, #42	; 0x2a
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7fd ffc5 	bl	8008140 <ld_word>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d001      	beq.n	800a1c0 <find_volume+0x394>
 800a1bc:	230d      	movs	r3, #13
 800a1be:	e0b1      	b.n	800a324 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c2:	891b      	ldrh	r3, [r3, #8]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d001      	beq.n	800a1cc <find_volume+0x3a0>
 800a1c8:	230d      	movs	r3, #13
 800a1ca:	e0ab      	b.n	800a324 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ce:	3338      	adds	r3, #56	; 0x38
 800a1d0:	332c      	adds	r3, #44	; 0x2c
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fd ffcc 	bl	8008170 <ld_dword>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1dc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e0:	69db      	ldr	r3, [r3, #28]
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	647b      	str	r3, [r7, #68]	; 0x44
 800a1e6:	e01f      	b.n	800a228 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ea:	891b      	ldrh	r3, [r3, #8]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <find_volume+0x3c8>
 800a1f0:	230d      	movs	r3, #13
 800a1f2:	e097      	b.n	800a324 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1fa:	441a      	add	r2, r3
 800a1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fe:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a200:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a204:	2b02      	cmp	r3, #2
 800a206:	d103      	bne.n	800a210 <find_volume+0x3e4>
 800a208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20a:	69db      	ldr	r3, [r3, #28]
 800a20c:	005b      	lsls	r3, r3, #1
 800a20e:	e00a      	b.n	800a226 <find_volume+0x3fa>
 800a210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a212:	69da      	ldr	r2, [r3, #28]
 800a214:	4613      	mov	r3, r2
 800a216:	005b      	lsls	r3, r3, #1
 800a218:	4413      	add	r3, r2
 800a21a:	085a      	lsrs	r2, r3, #1
 800a21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21e:	69db      	ldr	r3, [r3, #28]
 800a220:	f003 0301 	and.w	r3, r3, #1
 800a224:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a226:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22a:	6a1a      	ldr	r2, [r3, #32]
 800a22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22e:	899b      	ldrh	r3, [r3, #12]
 800a230:	4619      	mov	r1, r3
 800a232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a234:	440b      	add	r3, r1
 800a236:	3b01      	subs	r3, #1
 800a238:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a23a:	8989      	ldrh	r1, [r1, #12]
 800a23c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a240:	429a      	cmp	r2, r3
 800a242:	d201      	bcs.n	800a248 <find_volume+0x41c>
 800a244:	230d      	movs	r3, #13
 800a246:	e06d      	b.n	800a324 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24a:	f04f 32ff 	mov.w	r2, #4294967295
 800a24e:	619a      	str	r2, [r3, #24]
 800a250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a252:	699a      	ldr	r2, [r3, #24]
 800a254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a256:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25a:	2280      	movs	r2, #128	; 0x80
 800a25c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a25e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a262:	2b03      	cmp	r3, #3
 800a264:	d149      	bne.n	800a2fa <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a268:	3338      	adds	r3, #56	; 0x38
 800a26a:	3330      	adds	r3, #48	; 0x30
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7fd ff67 	bl	8008140 <ld_word>
 800a272:	4603      	mov	r3, r0
 800a274:	2b01      	cmp	r3, #1
 800a276:	d140      	bne.n	800a2fa <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a27a:	3301      	adds	r3, #1
 800a27c:	4619      	mov	r1, r3
 800a27e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a280:	f7fe fa0e 	bl	80086a0 <move_window>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d137      	bne.n	800a2fa <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800a28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28c:	2200      	movs	r2, #0
 800a28e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a292:	3338      	adds	r3, #56	; 0x38
 800a294:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a298:	4618      	mov	r0, r3
 800a29a:	f7fd ff51 	bl	8008140 <ld_word>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d127      	bne.n	800a2fa <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ac:	3338      	adds	r3, #56	; 0x38
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fd ff5e 	bl	8008170 <ld_dword>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	4b1d      	ldr	r3, [pc, #116]	; (800a32c <find_volume+0x500>)
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d11e      	bne.n	800a2fa <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	3338      	adds	r3, #56	; 0x38
 800a2c0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7fd ff53 	bl	8008170 <ld_dword>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	4b18      	ldr	r3, [pc, #96]	; (800a330 <find_volume+0x504>)
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d113      	bne.n	800a2fa <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d4:	3338      	adds	r3, #56	; 0x38
 800a2d6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fd ff48 	bl	8008170 <ld_dword>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e4:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e8:	3338      	adds	r3, #56	; 0x38
 800a2ea:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7fd ff3e 	bl	8008170 <ld_dword>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f8:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a300:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a302:	4b0c      	ldr	r3, [pc, #48]	; (800a334 <find_volume+0x508>)
 800a304:	881b      	ldrh	r3, [r3, #0]
 800a306:	3301      	adds	r3, #1
 800a308:	b29a      	uxth	r2, r3
 800a30a:	4b0a      	ldr	r3, [pc, #40]	; (800a334 <find_volume+0x508>)
 800a30c:	801a      	strh	r2, [r3, #0]
 800a30e:	4b09      	ldr	r3, [pc, #36]	; (800a334 <find_volume+0x508>)
 800a310:	881a      	ldrh	r2, [r3, #0]
 800a312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a314:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a318:	4a07      	ldr	r2, [pc, #28]	; (800a338 <find_volume+0x50c>)
 800a31a:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a31c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a31e:	f7fe f957 	bl	80085d0 <clear_lock>
#endif
	return FR_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3758      	adds	r7, #88	; 0x58
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	41615252 	.word	0x41615252
 800a330:	61417272 	.word	0x61417272
 800a334:	200000e8 	.word	0x200000e8
 800a338:	2000010c 	.word	0x2000010c

0800a33c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a346:	2309      	movs	r3, #9
 800a348:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d01c      	beq.n	800a38a <validate+0x4e>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d018      	beq.n	800a38a <validate+0x4e>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d013      	beq.n	800a38a <validate+0x4e>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	889a      	ldrh	r2, [r3, #4]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	88db      	ldrh	r3, [r3, #6]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d10c      	bne.n	800a38a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	785b      	ldrb	r3, [r3, #1]
 800a376:	4618      	mov	r0, r3
 800a378:	f7fd fe44 	bl	8008004 <disk_status>
 800a37c:	4603      	mov	r3, r0
 800a37e:	f003 0301 	and.w	r3, r3, #1
 800a382:	2b00      	cmp	r3, #0
 800a384:	d101      	bne.n	800a38a <validate+0x4e>
			res = FR_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a38a:	7bfb      	ldrb	r3, [r7, #15]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d102      	bne.n	800a396 <validate+0x5a>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	e000      	b.n	800a398 <validate+0x5c>
 800a396:	2300      	movs	r3, #0
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	6013      	str	r3, [r2, #0]
	return res;
 800a39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
	...

0800a3a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b088      	sub	sp, #32
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a3ba:	f107 0310 	add.w	r3, r7, #16
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7ff fc9a 	bl	8009cf8 <get_ldnumber>
 800a3c4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a3c6:	69fb      	ldr	r3, [r7, #28]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	da01      	bge.n	800a3d0 <f_mount+0x28>
 800a3cc:	230b      	movs	r3, #11
 800a3ce:	e02b      	b.n	800a428 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a3d0:	4a17      	ldr	r2, [pc, #92]	; (800a430 <f_mount+0x88>)
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3d8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d005      	beq.n	800a3ec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a3e0:	69b8      	ldr	r0, [r7, #24]
 800a3e2:	f7fe f8f5 	bl	80085d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d002      	beq.n	800a3f8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	490d      	ldr	r1, [pc, #52]	; (800a430 <f_mount+0x88>)
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d002      	beq.n	800a40e <f_mount+0x66>
 800a408:	79fb      	ldrb	r3, [r7, #7]
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d001      	beq.n	800a412 <f_mount+0x6a>
 800a40e:	2300      	movs	r3, #0
 800a410:	e00a      	b.n	800a428 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a412:	f107 010c 	add.w	r1, r7, #12
 800a416:	f107 0308 	add.w	r3, r7, #8
 800a41a:	2200      	movs	r2, #0
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7ff fd05 	bl	8009e2c <find_volume>
 800a422:	4603      	mov	r3, r0
 800a424:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a426:	7dfb      	ldrb	r3, [r7, #23]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3720      	adds	r7, #32
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	200000e4 	.word	0x200000e4

0800a434 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b09a      	sub	sp, #104	; 0x68
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	4613      	mov	r3, r2
 800a440:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d101      	bne.n	800a44c <f_open+0x18>
 800a448:	2309      	movs	r3, #9
 800a44a:	e1bb      	b.n	800a7c4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a44c:	79fb      	ldrb	r3, [r7, #7]
 800a44e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a452:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a454:	79fa      	ldrb	r2, [r7, #7]
 800a456:	f107 0114 	add.w	r1, r7, #20
 800a45a:	f107 0308 	add.w	r3, r7, #8
 800a45e:	4618      	mov	r0, r3
 800a460:	f7ff fce4 	bl	8009e2c <find_volume>
 800a464:	4603      	mov	r3, r0
 800a466:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a46a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f040 819f 	bne.w	800a7b2 <f_open+0x37e>
		dj.obj.fs = fs;
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	f107 0318 	add.w	r3, r7, #24
 800a47e:	4611      	mov	r1, r2
 800a480:	4618      	mov	r0, r3
 800a482:	f7ff fbc3 	bl	8009c0c <follow_path>
 800a486:	4603      	mov	r3, r0
 800a488:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a48c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a490:	2b00      	cmp	r3, #0
 800a492:	d11a      	bne.n	800a4ca <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a494:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a498:	b25b      	sxtb	r3, r3
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	da03      	bge.n	800a4a6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a49e:	2306      	movs	r3, #6
 800a4a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a4a4:	e011      	b.n	800a4ca <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a4a6:	79fb      	ldrb	r3, [r7, #7]
 800a4a8:	f023 0301 	bic.w	r3, r3, #1
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	bf14      	ite	ne
 800a4b0:	2301      	movne	r3, #1
 800a4b2:	2300      	moveq	r3, #0
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	f107 0318 	add.w	r3, r7, #24
 800a4bc:	4611      	mov	r1, r2
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fd ff3e 	bl	8008340 <chk_lock>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a4ca:	79fb      	ldrb	r3, [r7, #7]
 800a4cc:	f003 031c 	and.w	r3, r3, #28
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d07f      	beq.n	800a5d4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a4d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d017      	beq.n	800a50c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a4dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a4e0:	2b04      	cmp	r3, #4
 800a4e2:	d10e      	bne.n	800a502 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a4e4:	f7fd ff88 	bl	80083f8 <enq_lock>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d006      	beq.n	800a4fc <f_open+0xc8>
 800a4ee:	f107 0318 	add.w	r3, r7, #24
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7ff f8da 	bl	80096ac <dir_register>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	e000      	b.n	800a4fe <f_open+0xca>
 800a4fc:	2312      	movs	r3, #18
 800a4fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a502:	79fb      	ldrb	r3, [r7, #7]
 800a504:	f043 0308 	orr.w	r3, r3, #8
 800a508:	71fb      	strb	r3, [r7, #7]
 800a50a:	e010      	b.n	800a52e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a50c:	7fbb      	ldrb	r3, [r7, #30]
 800a50e:	f003 0311 	and.w	r3, r3, #17
 800a512:	2b00      	cmp	r3, #0
 800a514:	d003      	beq.n	800a51e <f_open+0xea>
					res = FR_DENIED;
 800a516:	2307      	movs	r3, #7
 800a518:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a51c:	e007      	b.n	800a52e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a51e:	79fb      	ldrb	r3, [r7, #7]
 800a520:	f003 0304 	and.w	r3, r3, #4
 800a524:	2b00      	cmp	r3, #0
 800a526:	d002      	beq.n	800a52e <f_open+0xfa>
 800a528:	2308      	movs	r3, #8
 800a52a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a52e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a532:	2b00      	cmp	r3, #0
 800a534:	d168      	bne.n	800a608 <f_open+0x1d4>
 800a536:	79fb      	ldrb	r3, [r7, #7]
 800a538:	f003 0308 	and.w	r3, r3, #8
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d063      	beq.n	800a608 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a540:	f7fd fb14 	bl	8007b6c <get_fattime>
 800a544:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a548:	330e      	adds	r3, #14
 800a54a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7fd fe4d 	bl	80081ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a554:	3316      	adds	r3, #22
 800a556:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fd fe47 	bl	80081ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a560:	330b      	adds	r3, #11
 800a562:	2220      	movs	r2, #32
 800a564:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a56a:	4611      	mov	r1, r2
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fe fe16 	bl	800919e <ld_clust>
 800a572:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a578:	2200      	movs	r2, #0
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7fe fe2e 	bl	80091dc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a582:	331c      	adds	r3, #28
 800a584:	2100      	movs	r1, #0
 800a586:	4618      	mov	r0, r3
 800a588:	f7fd fe30 	bl	80081ec <st_dword>
					fs->wflag = 1;
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	2201      	movs	r2, #1
 800a590:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a594:	2b00      	cmp	r3, #0
 800a596:	d037      	beq.n	800a608 <f_open+0x1d4>
						dw = fs->winsect;
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a59c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a59e:	f107 0318 	add.w	r3, r7, #24
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fe fb1e 	bl	8008be8 <remove_chain>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a5b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d126      	bne.n	800a608 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7fe f86e 	bl	80086a0 <move_window>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a5ce:	3a01      	subs	r2, #1
 800a5d0:	615a      	str	r2, [r3, #20]
 800a5d2:	e019      	b.n	800a608 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a5d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d115      	bne.n	800a608 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a5dc:	7fbb      	ldrb	r3, [r7, #30]
 800a5de:	f003 0310 	and.w	r3, r3, #16
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d003      	beq.n	800a5ee <f_open+0x1ba>
					res = FR_NO_FILE;
 800a5e6:	2304      	movs	r3, #4
 800a5e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a5ec:	e00c      	b.n	800a608 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a5ee:	79fb      	ldrb	r3, [r7, #7]
 800a5f0:	f003 0302 	and.w	r3, r3, #2
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d007      	beq.n	800a608 <f_open+0x1d4>
 800a5f8:	7fbb      	ldrb	r3, [r7, #30]
 800a5fa:	f003 0301 	and.w	r3, r3, #1
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d002      	beq.n	800a608 <f_open+0x1d4>
						res = FR_DENIED;
 800a602:	2307      	movs	r3, #7
 800a604:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a608:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d128      	bne.n	800a662 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a610:	79fb      	ldrb	r3, [r7, #7]
 800a612:	f003 0308 	and.w	r3, r3, #8
 800a616:	2b00      	cmp	r3, #0
 800a618:	d003      	beq.n	800a622 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a61a:	79fb      	ldrb	r3, [r7, #7]
 800a61c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a620:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a62a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a630:	79fb      	ldrb	r3, [r7, #7]
 800a632:	f023 0301 	bic.w	r3, r3, #1
 800a636:	2b00      	cmp	r3, #0
 800a638:	bf14      	ite	ne
 800a63a:	2301      	movne	r3, #1
 800a63c:	2300      	moveq	r3, #0
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	461a      	mov	r2, r3
 800a642:	f107 0318 	add.w	r3, r7, #24
 800a646:	4611      	mov	r1, r2
 800a648:	4618      	mov	r0, r3
 800a64a:	f7fd fef7 	bl	800843c <inc_lock>
 800a64e:	4602      	mov	r2, r0
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d102      	bne.n	800a662 <f_open+0x22e>
 800a65c:	2302      	movs	r3, #2
 800a65e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a662:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a666:	2b00      	cmp	r3, #0
 800a668:	f040 80a3 	bne.w	800a7b2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a670:	4611      	mov	r1, r2
 800a672:	4618      	mov	r0, r3
 800a674:	f7fe fd93 	bl	800919e <ld_clust>
 800a678:	4602      	mov	r2, r0
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a680:	331c      	adds	r3, #28
 800a682:	4618      	mov	r0, r3
 800a684:	f7fd fd74 	bl	8008170 <ld_dword>
 800a688:	4602      	mov	r2, r0
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2200      	movs	r2, #0
 800a692:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a694:	697a      	ldr	r2, [r7, #20]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	88da      	ldrh	r2, [r3, #6]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	79fa      	ldrb	r2, [r7, #7]
 800a6a6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	3330      	adds	r3, #48	; 0x30
 800a6be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7fd fdde 	bl	8008286 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a6ca:	79fb      	ldrb	r3, [r7, #7]
 800a6cc:	f003 0320 	and.w	r3, r3, #32
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d06e      	beq.n	800a7b2 <f_open+0x37e>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d06a      	beq.n	800a7b2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	68da      	ldr	r2, [r3, #12]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	895b      	ldrh	r3, [r3, #10]
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	899b      	ldrh	r3, [r3, #12]
 800a6ee:	fb03 f302 	mul.w	r3, r3, r2
 800a6f2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a700:	e016      	b.n	800a730 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a706:	4618      	mov	r0, r3
 800a708:	f7fe f887 	bl	800881a <get_fat>
 800a70c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a70e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a710:	2b01      	cmp	r3, #1
 800a712:	d802      	bhi.n	800a71a <f_open+0x2e6>
 800a714:	2302      	movs	r3, #2
 800a716:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a71a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a71c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a720:	d102      	bne.n	800a728 <f_open+0x2f4>
 800a722:	2301      	movs	r3, #1
 800a724:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a728:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a72a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a72c:	1ad3      	subs	r3, r2, r3
 800a72e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a730:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a734:	2b00      	cmp	r3, #0
 800a736:	d103      	bne.n	800a740 <f_open+0x30c>
 800a738:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a73a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d8e0      	bhi.n	800a702 <f_open+0x2ce>
				}
				fp->clust = clst;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a744:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a746:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d131      	bne.n	800a7b2 <f_open+0x37e>
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	899b      	ldrh	r3, [r3, #12]
 800a752:	461a      	mov	r2, r3
 800a754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a756:	fbb3 f1f2 	udiv	r1, r3, r2
 800a75a:	fb02 f201 	mul.w	r2, r2, r1
 800a75e:	1a9b      	subs	r3, r3, r2
 800a760:	2b00      	cmp	r3, #0
 800a762:	d026      	beq.n	800a7b2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a768:	4618      	mov	r0, r3
 800a76a:	f7fe f837 	bl	80087dc <clust2sect>
 800a76e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a772:	2b00      	cmp	r3, #0
 800a774:	d103      	bne.n	800a77e <f_open+0x34a>
						res = FR_INT_ERR;
 800a776:	2302      	movs	r3, #2
 800a778:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a77c:	e019      	b.n	800a7b2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	899b      	ldrh	r3, [r3, #12]
 800a782:	461a      	mov	r2, r3
 800a784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a786:	fbb3 f2f2 	udiv	r2, r3, r2
 800a78a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a78c:	441a      	add	r2, r3
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	7858      	ldrb	r0, [r3, #1]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6a1a      	ldr	r2, [r3, #32]
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	f7fd fc6f 	bl	8008084 <disk_read>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d002      	beq.n	800a7b2 <f_open+0x37e>
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a7b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d002      	beq.n	800a7c0 <f_open+0x38c>
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a7c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3768      	adds	r7, #104	; 0x68
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b08c      	sub	sp, #48	; 0x30
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
 800a7d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f107 0210 	add.w	r2, r7, #16
 800a7ea:	4611      	mov	r1, r2
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7ff fda5 	bl	800a33c <validate>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a7f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d107      	bne.n	800a810 <f_write+0x44>
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	7d5b      	ldrb	r3, [r3, #21]
 800a804:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a808:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d002      	beq.n	800a816 <f_write+0x4a>
 800a810:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a814:	e16a      	b.n	800aaec <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	7d1b      	ldrb	r3, [r3, #20]
 800a81a:	f003 0302 	and.w	r3, r3, #2
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d101      	bne.n	800a826 <f_write+0x5a>
 800a822:	2307      	movs	r3, #7
 800a824:	e162      	b.n	800aaec <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	699a      	ldr	r2, [r3, #24]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	441a      	add	r2, r3
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	699b      	ldr	r3, [r3, #24]
 800a832:	429a      	cmp	r2, r3
 800a834:	f080 814c 	bcs.w	800aad0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	699b      	ldr	r3, [r3, #24]
 800a83c:	43db      	mvns	r3, r3
 800a83e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a840:	e146      	b.n	800aad0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	699b      	ldr	r3, [r3, #24]
 800a846:	693a      	ldr	r2, [r7, #16]
 800a848:	8992      	ldrh	r2, [r2, #12]
 800a84a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a84e:	fb02 f201 	mul.w	r2, r2, r1
 800a852:	1a9b      	subs	r3, r3, r2
 800a854:	2b00      	cmp	r3, #0
 800a856:	f040 80f1 	bne.w	800aa3c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	693a      	ldr	r2, [r7, #16]
 800a860:	8992      	ldrh	r2, [r2, #12]
 800a862:	fbb3 f3f2 	udiv	r3, r3, r2
 800a866:	693a      	ldr	r2, [r7, #16]
 800a868:	8952      	ldrh	r2, [r2, #10]
 800a86a:	3a01      	subs	r2, #1
 800a86c:	4013      	ands	r3, r2
 800a86e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d143      	bne.n	800a8fe <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	699b      	ldr	r3, [r3, #24]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10c      	bne.n	800a898 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a886:	2b00      	cmp	r3, #0
 800a888:	d11a      	bne.n	800a8c0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2100      	movs	r1, #0
 800a88e:	4618      	mov	r0, r3
 800a890:	f7fe fa0f 	bl	8008cb2 <create_chain>
 800a894:	62b8      	str	r0, [r7, #40]	; 0x28
 800a896:	e013      	b.n	800a8c0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d007      	beq.n	800a8b0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	699b      	ldr	r3, [r3, #24]
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f7fe fa9b 	bl	8008de2 <clmt_clust>
 800a8ac:	62b8      	str	r0, [r7, #40]	; 0x28
 800a8ae:	e007      	b.n	800a8c0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	69db      	ldr	r3, [r3, #28]
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	4610      	mov	r0, r2
 800a8ba:	f7fe f9fa 	bl	8008cb2 <create_chain>
 800a8be:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f000 8109 	beq.w	800aada <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d104      	bne.n	800a8d8 <f_write+0x10c>
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2202      	movs	r2, #2
 800a8d2:	755a      	strb	r2, [r3, #21]
 800a8d4:	2302      	movs	r3, #2
 800a8d6:	e109      	b.n	800aaec <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8de:	d104      	bne.n	800a8ea <f_write+0x11e>
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	755a      	strb	r2, [r3, #21]
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e100      	b.n	800aaec <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8ee:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d102      	bne.n	800a8fe <f_write+0x132>
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8fc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	7d1b      	ldrb	r3, [r3, #20]
 800a902:	b25b      	sxtb	r3, r3
 800a904:	2b00      	cmp	r3, #0
 800a906:	da18      	bge.n	800a93a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	7858      	ldrb	r0, [r3, #1]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6a1a      	ldr	r2, [r3, #32]
 800a916:	2301      	movs	r3, #1
 800a918:	f7fd fbd4 	bl	80080c4 <disk_write>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d004      	beq.n	800a92c <f_write+0x160>
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2201      	movs	r2, #1
 800a926:	755a      	strb	r2, [r3, #21]
 800a928:	2301      	movs	r3, #1
 800a92a:	e0df      	b.n	800aaec <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	7d1b      	ldrb	r3, [r3, #20]
 800a930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a934:	b2da      	uxtb	r2, r3
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a93a:	693a      	ldr	r2, [r7, #16]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	69db      	ldr	r3, [r3, #28]
 800a940:	4619      	mov	r1, r3
 800a942:	4610      	mov	r0, r2
 800a944:	f7fd ff4a 	bl	80087dc <clust2sect>
 800a948:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d104      	bne.n	800a95a <f_write+0x18e>
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2202      	movs	r2, #2
 800a954:	755a      	strb	r2, [r3, #21]
 800a956:	2302      	movs	r3, #2
 800a958:	e0c8      	b.n	800aaec <f_write+0x320>
			sect += csect;
 800a95a:	697a      	ldr	r2, [r7, #20]
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	4413      	add	r3, r2
 800a960:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	899b      	ldrh	r3, [r3, #12]
 800a966:	461a      	mov	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a96e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a970:	6a3b      	ldr	r3, [r7, #32]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d043      	beq.n	800a9fe <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a976:	69ba      	ldr	r2, [r7, #24]
 800a978:	6a3b      	ldr	r3, [r7, #32]
 800a97a:	4413      	add	r3, r2
 800a97c:	693a      	ldr	r2, [r7, #16]
 800a97e:	8952      	ldrh	r2, [r2, #10]
 800a980:	4293      	cmp	r3, r2
 800a982:	d905      	bls.n	800a990 <f_write+0x1c4>
					cc = fs->csize - csect;
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	895b      	ldrh	r3, [r3, #10]
 800a988:	461a      	mov	r2, r3
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	7858      	ldrb	r0, [r3, #1]
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	697a      	ldr	r2, [r7, #20]
 800a998:	69f9      	ldr	r1, [r7, #28]
 800a99a:	f7fd fb93 	bl	80080c4 <disk_write>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d004      	beq.n	800a9ae <f_write+0x1e2>
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	755a      	strb	r2, [r3, #21]
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e09e      	b.n	800aaec <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6a1a      	ldr	r2, [r3, #32]
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	6a3a      	ldr	r2, [r7, #32]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d918      	bls.n	800a9ee <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6a1a      	ldr	r2, [r3, #32]
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	1ad3      	subs	r3, r2, r3
 800a9ca:	693a      	ldr	r2, [r7, #16]
 800a9cc:	8992      	ldrh	r2, [r2, #12]
 800a9ce:	fb02 f303 	mul.w	r3, r2, r3
 800a9d2:	69fa      	ldr	r2, [r7, #28]
 800a9d4:	18d1      	adds	r1, r2, r3
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	899b      	ldrh	r3, [r3, #12]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	f7fd fc32 	bl	8008244 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	7d1b      	ldrb	r3, [r3, #20]
 800a9e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9e8:	b2da      	uxtb	r2, r3
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	899b      	ldrh	r3, [r3, #12]
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	6a3b      	ldr	r3, [r7, #32]
 800a9f6:	fb02 f303 	mul.w	r3, r2, r3
 800a9fa:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a9fc:	e04b      	b.n	800aa96 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	6a1b      	ldr	r3, [r3, #32]
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d016      	beq.n	800aa36 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	699a      	ldr	r2, [r3, #24]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d210      	bcs.n	800aa36 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	7858      	ldrb	r0, [r3, #1]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa1e:	2301      	movs	r3, #1
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	f7fd fb2f 	bl	8008084 <disk_read>
 800aa26:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d004      	beq.n	800aa36 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	755a      	strb	r2, [r3, #21]
 800aa32:	2301      	movs	r3, #1
 800aa34:	e05a      	b.n	800aaec <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	697a      	ldr	r2, [r7, #20]
 800aa3a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	899b      	ldrh	r3, [r3, #12]
 800aa40:	4618      	mov	r0, r3
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	699b      	ldr	r3, [r3, #24]
 800aa46:	693a      	ldr	r2, [r7, #16]
 800aa48:	8992      	ldrh	r2, [r2, #12]
 800aa4a:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa4e:	fb02 f201 	mul.w	r2, r2, r1
 800aa52:	1a9b      	subs	r3, r3, r2
 800aa54:	1ac3      	subs	r3, r0, r3
 800aa56:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800aa58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d901      	bls.n	800aa64 <f_write+0x298>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	699b      	ldr	r3, [r3, #24]
 800aa6e:	693a      	ldr	r2, [r7, #16]
 800aa70:	8992      	ldrh	r2, [r2, #12]
 800aa72:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa76:	fb02 f200 	mul.w	r2, r2, r0
 800aa7a:	1a9b      	subs	r3, r3, r2
 800aa7c:	440b      	add	r3, r1
 800aa7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa80:	69f9      	ldr	r1, [r7, #28]
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fd fbde 	bl	8008244 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	7d1b      	ldrb	r3, [r3, #20]
 800aa8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aa90:	b2da      	uxtb	r2, r3
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800aa96:	69fa      	ldr	r2, [r7, #28]
 800aa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9a:	4413      	add	r3, r2
 800aa9c:	61fb      	str	r3, [r7, #28]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	699a      	ldr	r2, [r3, #24]
 800aaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa4:	441a      	add	r2, r3
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	619a      	str	r2, [r3, #24]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	68da      	ldr	r2, [r3, #12]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	699b      	ldr	r3, [r3, #24]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	bf38      	it	cc
 800aab6:	461a      	movcc	r2, r3
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	60da      	str	r2, [r3, #12]
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac2:	441a      	add	r2, r3
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	601a      	str	r2, [r3, #0]
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	f47f aeb5 	bne.w	800a842 <f_write+0x76>
 800aad8:	e000      	b.n	800aadc <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aada:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	7d1b      	ldrb	r3, [r3, #20]
 800aae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aae4:	b2da      	uxtb	r2, r3
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3730      	adds	r7, #48	; 0x30
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f107 0208 	add.w	r2, r7, #8
 800ab02:	4611      	mov	r1, r2
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7ff fc19 	bl	800a33c <validate>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ab0e:	7dfb      	ldrb	r3, [r7, #23]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d168      	bne.n	800abe6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	7d1b      	ldrb	r3, [r3, #20]
 800ab18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d062      	beq.n	800abe6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	7d1b      	ldrb	r3, [r3, #20]
 800ab24:	b25b      	sxtb	r3, r3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	da15      	bge.n	800ab56 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	7858      	ldrb	r0, [r3, #1]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a1a      	ldr	r2, [r3, #32]
 800ab38:	2301      	movs	r3, #1
 800ab3a:	f7fd fac3 	bl	80080c4 <disk_write>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d001      	beq.n	800ab48 <f_sync+0x54>
 800ab44:	2301      	movs	r3, #1
 800ab46:	e04f      	b.n	800abe8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	7d1b      	ldrb	r3, [r3, #20]
 800ab4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab50:	b2da      	uxtb	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ab56:	f7fd f809 	bl	8007b6c <get_fattime>
 800ab5a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ab5c:	68ba      	ldr	r2, [r7, #8]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab62:	4619      	mov	r1, r3
 800ab64:	4610      	mov	r0, r2
 800ab66:	f7fd fd9b 	bl	80086a0 <move_window>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ab6e:	7dfb      	ldrb	r3, [r7, #23]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d138      	bne.n	800abe6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab78:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	330b      	adds	r3, #11
 800ab7e:	781a      	ldrb	r2, [r3, #0]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	330b      	adds	r3, #11
 800ab84:	f042 0220 	orr.w	r2, r2, #32
 800ab88:	b2d2      	uxtb	r2, r2
 800ab8a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6818      	ldr	r0, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	461a      	mov	r2, r3
 800ab96:	68f9      	ldr	r1, [r7, #12]
 800ab98:	f7fe fb20 	bl	80091dc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f103 021c 	add.w	r2, r3, #28
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	4619      	mov	r1, r3
 800aba8:	4610      	mov	r0, r2
 800abaa:	f7fd fb1f 	bl	80081ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	3316      	adds	r3, #22
 800abb2:	6939      	ldr	r1, [r7, #16]
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7fd fb19 	bl	80081ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	3312      	adds	r3, #18
 800abbe:	2100      	movs	r1, #0
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7fd faf8 	bl	80081b6 <st_word>
					fs->wflag = 1;
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	2201      	movs	r2, #1
 800abca:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	4618      	mov	r0, r3
 800abd0:	f7fd fd94 	bl	80086fc <sync_fs>
 800abd4:	4603      	mov	r3, r0
 800abd6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	7d1b      	ldrb	r3, [r3, #20]
 800abdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abe0:	b2da      	uxtb	r2, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800abe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3718      	adds	r7, #24
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f7ff ff7b 	bl	800aaf4 <f_sync>
 800abfe:	4603      	mov	r3, r0
 800ac00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ac02:	7bfb      	ldrb	r3, [r7, #15]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d118      	bne.n	800ac3a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f107 0208 	add.w	r2, r7, #8
 800ac0e:	4611      	mov	r1, r2
 800ac10:	4618      	mov	r0, r3
 800ac12:	f7ff fb93 	bl	800a33c <validate>
 800ac16:	4603      	mov	r3, r0
 800ac18:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ac1a:	7bfb      	ldrb	r3, [r7, #15]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d10c      	bne.n	800ac3a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	691b      	ldr	r3, [r3, #16]
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7fd fc97 	bl	8008558 <dec_lock>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ac2e:	7bfb      	ldrb	r3, [r7, #15]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d102      	bne.n	800ac3a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ac3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b087      	sub	sp, #28
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ac52:	2301      	movs	r3, #1
 800ac54:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ac56:	2300      	movs	r3, #0
 800ac58:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ac5a:	4b1f      	ldr	r3, [pc, #124]	; (800acd8 <FATFS_LinkDriverEx+0x94>)
 800ac5c:	7a5b      	ldrb	r3, [r3, #9]
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d131      	bne.n	800acc8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ac64:	4b1c      	ldr	r3, [pc, #112]	; (800acd8 <FATFS_LinkDriverEx+0x94>)
 800ac66:	7a5b      	ldrb	r3, [r3, #9]
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	4b1a      	ldr	r3, [pc, #104]	; (800acd8 <FATFS_LinkDriverEx+0x94>)
 800ac6e:	2100      	movs	r1, #0
 800ac70:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ac72:	4b19      	ldr	r3, [pc, #100]	; (800acd8 <FATFS_LinkDriverEx+0x94>)
 800ac74:	7a5b      	ldrb	r3, [r3, #9]
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	4a17      	ldr	r2, [pc, #92]	; (800acd8 <FATFS_LinkDriverEx+0x94>)
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	4413      	add	r3, r2
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ac82:	4b15      	ldr	r3, [pc, #84]	; (800acd8 <FATFS_LinkDriverEx+0x94>)
 800ac84:	7a5b      	ldrb	r3, [r3, #9]
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	461a      	mov	r2, r3
 800ac8a:	4b13      	ldr	r3, [pc, #76]	; (800acd8 <FATFS_LinkDriverEx+0x94>)
 800ac8c:	4413      	add	r3, r2
 800ac8e:	79fa      	ldrb	r2, [r7, #7]
 800ac90:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ac92:	4b11      	ldr	r3, [pc, #68]	; (800acd8 <FATFS_LinkDriverEx+0x94>)
 800ac94:	7a5b      	ldrb	r3, [r3, #9]
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	1c5a      	adds	r2, r3, #1
 800ac9a:	b2d1      	uxtb	r1, r2
 800ac9c:	4a0e      	ldr	r2, [pc, #56]	; (800acd8 <FATFS_LinkDriverEx+0x94>)
 800ac9e:	7251      	strb	r1, [r2, #9]
 800aca0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aca2:	7dbb      	ldrb	r3, [r7, #22]
 800aca4:	3330      	adds	r3, #48	; 0x30
 800aca6:	b2da      	uxtb	r2, r3
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	3301      	adds	r3, #1
 800acb0:	223a      	movs	r2, #58	; 0x3a
 800acb2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	3302      	adds	r3, #2
 800acb8:	222f      	movs	r2, #47	; 0x2f
 800acba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	3303      	adds	r3, #3
 800acc0:	2200      	movs	r2, #0
 800acc2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800acc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800acca:	4618      	mov	r0, r3
 800accc:	371c      	adds	r7, #28
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	2000030c 	.word	0x2000030c

0800acdc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ace6:	2200      	movs	r2, #0
 800ace8:	6839      	ldr	r1, [r7, #0]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f7ff ffaa 	bl	800ac44 <FATFS_LinkDriverEx>
 800acf0:	4603      	mov	r3, r0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
	...

0800acfc <__errno>:
 800acfc:	4b01      	ldr	r3, [pc, #4]	; (800ad04 <__errno+0x8>)
 800acfe:	6818      	ldr	r0, [r3, #0]
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	20000014 	.word	0x20000014

0800ad08 <__libc_init_array>:
 800ad08:	b570      	push	{r4, r5, r6, lr}
 800ad0a:	4e0d      	ldr	r6, [pc, #52]	; (800ad40 <__libc_init_array+0x38>)
 800ad0c:	4c0d      	ldr	r4, [pc, #52]	; (800ad44 <__libc_init_array+0x3c>)
 800ad0e:	1ba4      	subs	r4, r4, r6
 800ad10:	10a4      	asrs	r4, r4, #2
 800ad12:	2500      	movs	r5, #0
 800ad14:	42a5      	cmp	r5, r4
 800ad16:	d109      	bne.n	800ad2c <__libc_init_array+0x24>
 800ad18:	4e0b      	ldr	r6, [pc, #44]	; (800ad48 <__libc_init_array+0x40>)
 800ad1a:	4c0c      	ldr	r4, [pc, #48]	; (800ad4c <__libc_init_array+0x44>)
 800ad1c:	f000 ff68 	bl	800bbf0 <_init>
 800ad20:	1ba4      	subs	r4, r4, r6
 800ad22:	10a4      	asrs	r4, r4, #2
 800ad24:	2500      	movs	r5, #0
 800ad26:	42a5      	cmp	r5, r4
 800ad28:	d105      	bne.n	800ad36 <__libc_init_array+0x2e>
 800ad2a:	bd70      	pop	{r4, r5, r6, pc}
 800ad2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad30:	4798      	blx	r3
 800ad32:	3501      	adds	r5, #1
 800ad34:	e7ee      	b.n	800ad14 <__libc_init_array+0xc>
 800ad36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad3a:	4798      	blx	r3
 800ad3c:	3501      	adds	r5, #1
 800ad3e:	e7f2      	b.n	800ad26 <__libc_init_array+0x1e>
 800ad40:	0800c1d4 	.word	0x0800c1d4
 800ad44:	0800c1d4 	.word	0x0800c1d4
 800ad48:	0800c1d4 	.word	0x0800c1d4
 800ad4c:	0800c1d8 	.word	0x0800c1d8

0800ad50 <memset>:
 800ad50:	4402      	add	r2, r0
 800ad52:	4603      	mov	r3, r0
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d100      	bne.n	800ad5a <memset+0xa>
 800ad58:	4770      	bx	lr
 800ad5a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad5e:	e7f9      	b.n	800ad54 <memset+0x4>

0800ad60 <_free_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4605      	mov	r5, r0
 800ad64:	2900      	cmp	r1, #0
 800ad66:	d045      	beq.n	800adf4 <_free_r+0x94>
 800ad68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad6c:	1f0c      	subs	r4, r1, #4
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	bfb8      	it	lt
 800ad72:	18e4      	addlt	r4, r4, r3
 800ad74:	f000 fbc6 	bl	800b504 <__malloc_lock>
 800ad78:	4a1f      	ldr	r2, [pc, #124]	; (800adf8 <_free_r+0x98>)
 800ad7a:	6813      	ldr	r3, [r2, #0]
 800ad7c:	4610      	mov	r0, r2
 800ad7e:	b933      	cbnz	r3, 800ad8e <_free_r+0x2e>
 800ad80:	6063      	str	r3, [r4, #4]
 800ad82:	6014      	str	r4, [r2, #0]
 800ad84:	4628      	mov	r0, r5
 800ad86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad8a:	f000 bbbc 	b.w	800b506 <__malloc_unlock>
 800ad8e:	42a3      	cmp	r3, r4
 800ad90:	d90c      	bls.n	800adac <_free_r+0x4c>
 800ad92:	6821      	ldr	r1, [r4, #0]
 800ad94:	1862      	adds	r2, r4, r1
 800ad96:	4293      	cmp	r3, r2
 800ad98:	bf04      	itt	eq
 800ad9a:	681a      	ldreq	r2, [r3, #0]
 800ad9c:	685b      	ldreq	r3, [r3, #4]
 800ad9e:	6063      	str	r3, [r4, #4]
 800ada0:	bf04      	itt	eq
 800ada2:	1852      	addeq	r2, r2, r1
 800ada4:	6022      	streq	r2, [r4, #0]
 800ada6:	6004      	str	r4, [r0, #0]
 800ada8:	e7ec      	b.n	800ad84 <_free_r+0x24>
 800adaa:	4613      	mov	r3, r2
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	b10a      	cbz	r2, 800adb4 <_free_r+0x54>
 800adb0:	42a2      	cmp	r2, r4
 800adb2:	d9fa      	bls.n	800adaa <_free_r+0x4a>
 800adb4:	6819      	ldr	r1, [r3, #0]
 800adb6:	1858      	adds	r0, r3, r1
 800adb8:	42a0      	cmp	r0, r4
 800adba:	d10b      	bne.n	800add4 <_free_r+0x74>
 800adbc:	6820      	ldr	r0, [r4, #0]
 800adbe:	4401      	add	r1, r0
 800adc0:	1858      	adds	r0, r3, r1
 800adc2:	4282      	cmp	r2, r0
 800adc4:	6019      	str	r1, [r3, #0]
 800adc6:	d1dd      	bne.n	800ad84 <_free_r+0x24>
 800adc8:	6810      	ldr	r0, [r2, #0]
 800adca:	6852      	ldr	r2, [r2, #4]
 800adcc:	605a      	str	r2, [r3, #4]
 800adce:	4401      	add	r1, r0
 800add0:	6019      	str	r1, [r3, #0]
 800add2:	e7d7      	b.n	800ad84 <_free_r+0x24>
 800add4:	d902      	bls.n	800addc <_free_r+0x7c>
 800add6:	230c      	movs	r3, #12
 800add8:	602b      	str	r3, [r5, #0]
 800adda:	e7d3      	b.n	800ad84 <_free_r+0x24>
 800addc:	6820      	ldr	r0, [r4, #0]
 800adde:	1821      	adds	r1, r4, r0
 800ade0:	428a      	cmp	r2, r1
 800ade2:	bf04      	itt	eq
 800ade4:	6811      	ldreq	r1, [r2, #0]
 800ade6:	6852      	ldreq	r2, [r2, #4]
 800ade8:	6062      	str	r2, [r4, #4]
 800adea:	bf04      	itt	eq
 800adec:	1809      	addeq	r1, r1, r0
 800adee:	6021      	streq	r1, [r4, #0]
 800adf0:	605c      	str	r4, [r3, #4]
 800adf2:	e7c7      	b.n	800ad84 <_free_r+0x24>
 800adf4:	bd38      	pop	{r3, r4, r5, pc}
 800adf6:	bf00      	nop
 800adf8:	20000318 	.word	0x20000318

0800adfc <_malloc_r>:
 800adfc:	b570      	push	{r4, r5, r6, lr}
 800adfe:	1ccd      	adds	r5, r1, #3
 800ae00:	f025 0503 	bic.w	r5, r5, #3
 800ae04:	3508      	adds	r5, #8
 800ae06:	2d0c      	cmp	r5, #12
 800ae08:	bf38      	it	cc
 800ae0a:	250c      	movcc	r5, #12
 800ae0c:	2d00      	cmp	r5, #0
 800ae0e:	4606      	mov	r6, r0
 800ae10:	db01      	blt.n	800ae16 <_malloc_r+0x1a>
 800ae12:	42a9      	cmp	r1, r5
 800ae14:	d903      	bls.n	800ae1e <_malloc_r+0x22>
 800ae16:	230c      	movs	r3, #12
 800ae18:	6033      	str	r3, [r6, #0]
 800ae1a:	2000      	movs	r0, #0
 800ae1c:	bd70      	pop	{r4, r5, r6, pc}
 800ae1e:	f000 fb71 	bl	800b504 <__malloc_lock>
 800ae22:	4a21      	ldr	r2, [pc, #132]	; (800aea8 <_malloc_r+0xac>)
 800ae24:	6814      	ldr	r4, [r2, #0]
 800ae26:	4621      	mov	r1, r4
 800ae28:	b991      	cbnz	r1, 800ae50 <_malloc_r+0x54>
 800ae2a:	4c20      	ldr	r4, [pc, #128]	; (800aeac <_malloc_r+0xb0>)
 800ae2c:	6823      	ldr	r3, [r4, #0]
 800ae2e:	b91b      	cbnz	r3, 800ae38 <_malloc_r+0x3c>
 800ae30:	4630      	mov	r0, r6
 800ae32:	f000 f8b9 	bl	800afa8 <_sbrk_r>
 800ae36:	6020      	str	r0, [r4, #0]
 800ae38:	4629      	mov	r1, r5
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	f000 f8b4 	bl	800afa8 <_sbrk_r>
 800ae40:	1c43      	adds	r3, r0, #1
 800ae42:	d124      	bne.n	800ae8e <_malloc_r+0x92>
 800ae44:	230c      	movs	r3, #12
 800ae46:	6033      	str	r3, [r6, #0]
 800ae48:	4630      	mov	r0, r6
 800ae4a:	f000 fb5c 	bl	800b506 <__malloc_unlock>
 800ae4e:	e7e4      	b.n	800ae1a <_malloc_r+0x1e>
 800ae50:	680b      	ldr	r3, [r1, #0]
 800ae52:	1b5b      	subs	r3, r3, r5
 800ae54:	d418      	bmi.n	800ae88 <_malloc_r+0x8c>
 800ae56:	2b0b      	cmp	r3, #11
 800ae58:	d90f      	bls.n	800ae7a <_malloc_r+0x7e>
 800ae5a:	600b      	str	r3, [r1, #0]
 800ae5c:	50cd      	str	r5, [r1, r3]
 800ae5e:	18cc      	adds	r4, r1, r3
 800ae60:	4630      	mov	r0, r6
 800ae62:	f000 fb50 	bl	800b506 <__malloc_unlock>
 800ae66:	f104 000b 	add.w	r0, r4, #11
 800ae6a:	1d23      	adds	r3, r4, #4
 800ae6c:	f020 0007 	bic.w	r0, r0, #7
 800ae70:	1ac3      	subs	r3, r0, r3
 800ae72:	d0d3      	beq.n	800ae1c <_malloc_r+0x20>
 800ae74:	425a      	negs	r2, r3
 800ae76:	50e2      	str	r2, [r4, r3]
 800ae78:	e7d0      	b.n	800ae1c <_malloc_r+0x20>
 800ae7a:	428c      	cmp	r4, r1
 800ae7c:	684b      	ldr	r3, [r1, #4]
 800ae7e:	bf16      	itet	ne
 800ae80:	6063      	strne	r3, [r4, #4]
 800ae82:	6013      	streq	r3, [r2, #0]
 800ae84:	460c      	movne	r4, r1
 800ae86:	e7eb      	b.n	800ae60 <_malloc_r+0x64>
 800ae88:	460c      	mov	r4, r1
 800ae8a:	6849      	ldr	r1, [r1, #4]
 800ae8c:	e7cc      	b.n	800ae28 <_malloc_r+0x2c>
 800ae8e:	1cc4      	adds	r4, r0, #3
 800ae90:	f024 0403 	bic.w	r4, r4, #3
 800ae94:	42a0      	cmp	r0, r4
 800ae96:	d005      	beq.n	800aea4 <_malloc_r+0xa8>
 800ae98:	1a21      	subs	r1, r4, r0
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	f000 f884 	bl	800afa8 <_sbrk_r>
 800aea0:	3001      	adds	r0, #1
 800aea2:	d0cf      	beq.n	800ae44 <_malloc_r+0x48>
 800aea4:	6025      	str	r5, [r4, #0]
 800aea6:	e7db      	b.n	800ae60 <_malloc_r+0x64>
 800aea8:	20000318 	.word	0x20000318
 800aeac:	2000031c 	.word	0x2000031c

0800aeb0 <iprintf>:
 800aeb0:	b40f      	push	{r0, r1, r2, r3}
 800aeb2:	4b0a      	ldr	r3, [pc, #40]	; (800aedc <iprintf+0x2c>)
 800aeb4:	b513      	push	{r0, r1, r4, lr}
 800aeb6:	681c      	ldr	r4, [r3, #0]
 800aeb8:	b124      	cbz	r4, 800aec4 <iprintf+0x14>
 800aeba:	69a3      	ldr	r3, [r4, #24]
 800aebc:	b913      	cbnz	r3, 800aec4 <iprintf+0x14>
 800aebe:	4620      	mov	r0, r4
 800aec0:	f000 fa32 	bl	800b328 <__sinit>
 800aec4:	ab05      	add	r3, sp, #20
 800aec6:	9a04      	ldr	r2, [sp, #16]
 800aec8:	68a1      	ldr	r1, [r4, #8]
 800aeca:	9301      	str	r3, [sp, #4]
 800aecc:	4620      	mov	r0, r4
 800aece:	f000 fb45 	bl	800b55c <_vfiprintf_r>
 800aed2:	b002      	add	sp, #8
 800aed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aed8:	b004      	add	sp, #16
 800aeda:	4770      	bx	lr
 800aedc:	20000014 	.word	0x20000014

0800aee0 <_puts_r>:
 800aee0:	b570      	push	{r4, r5, r6, lr}
 800aee2:	460e      	mov	r6, r1
 800aee4:	4605      	mov	r5, r0
 800aee6:	b118      	cbz	r0, 800aef0 <_puts_r+0x10>
 800aee8:	6983      	ldr	r3, [r0, #24]
 800aeea:	b90b      	cbnz	r3, 800aef0 <_puts_r+0x10>
 800aeec:	f000 fa1c 	bl	800b328 <__sinit>
 800aef0:	69ab      	ldr	r3, [r5, #24]
 800aef2:	68ac      	ldr	r4, [r5, #8]
 800aef4:	b913      	cbnz	r3, 800aefc <_puts_r+0x1c>
 800aef6:	4628      	mov	r0, r5
 800aef8:	f000 fa16 	bl	800b328 <__sinit>
 800aefc:	4b23      	ldr	r3, [pc, #140]	; (800af8c <_puts_r+0xac>)
 800aefe:	429c      	cmp	r4, r3
 800af00:	d117      	bne.n	800af32 <_puts_r+0x52>
 800af02:	686c      	ldr	r4, [r5, #4]
 800af04:	89a3      	ldrh	r3, [r4, #12]
 800af06:	071b      	lsls	r3, r3, #28
 800af08:	d51d      	bpl.n	800af46 <_puts_r+0x66>
 800af0a:	6923      	ldr	r3, [r4, #16]
 800af0c:	b1db      	cbz	r3, 800af46 <_puts_r+0x66>
 800af0e:	3e01      	subs	r6, #1
 800af10:	68a3      	ldr	r3, [r4, #8]
 800af12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800af16:	3b01      	subs	r3, #1
 800af18:	60a3      	str	r3, [r4, #8]
 800af1a:	b9e9      	cbnz	r1, 800af58 <_puts_r+0x78>
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	da2e      	bge.n	800af7e <_puts_r+0x9e>
 800af20:	4622      	mov	r2, r4
 800af22:	210a      	movs	r1, #10
 800af24:	4628      	mov	r0, r5
 800af26:	f000 f84f 	bl	800afc8 <__swbuf_r>
 800af2a:	3001      	adds	r0, #1
 800af2c:	d011      	beq.n	800af52 <_puts_r+0x72>
 800af2e:	200a      	movs	r0, #10
 800af30:	e011      	b.n	800af56 <_puts_r+0x76>
 800af32:	4b17      	ldr	r3, [pc, #92]	; (800af90 <_puts_r+0xb0>)
 800af34:	429c      	cmp	r4, r3
 800af36:	d101      	bne.n	800af3c <_puts_r+0x5c>
 800af38:	68ac      	ldr	r4, [r5, #8]
 800af3a:	e7e3      	b.n	800af04 <_puts_r+0x24>
 800af3c:	4b15      	ldr	r3, [pc, #84]	; (800af94 <_puts_r+0xb4>)
 800af3e:	429c      	cmp	r4, r3
 800af40:	bf08      	it	eq
 800af42:	68ec      	ldreq	r4, [r5, #12]
 800af44:	e7de      	b.n	800af04 <_puts_r+0x24>
 800af46:	4621      	mov	r1, r4
 800af48:	4628      	mov	r0, r5
 800af4a:	f000 f88f 	bl	800b06c <__swsetup_r>
 800af4e:	2800      	cmp	r0, #0
 800af50:	d0dd      	beq.n	800af0e <_puts_r+0x2e>
 800af52:	f04f 30ff 	mov.w	r0, #4294967295
 800af56:	bd70      	pop	{r4, r5, r6, pc}
 800af58:	2b00      	cmp	r3, #0
 800af5a:	da04      	bge.n	800af66 <_puts_r+0x86>
 800af5c:	69a2      	ldr	r2, [r4, #24]
 800af5e:	429a      	cmp	r2, r3
 800af60:	dc06      	bgt.n	800af70 <_puts_r+0x90>
 800af62:	290a      	cmp	r1, #10
 800af64:	d004      	beq.n	800af70 <_puts_r+0x90>
 800af66:	6823      	ldr	r3, [r4, #0]
 800af68:	1c5a      	adds	r2, r3, #1
 800af6a:	6022      	str	r2, [r4, #0]
 800af6c:	7019      	strb	r1, [r3, #0]
 800af6e:	e7cf      	b.n	800af10 <_puts_r+0x30>
 800af70:	4622      	mov	r2, r4
 800af72:	4628      	mov	r0, r5
 800af74:	f000 f828 	bl	800afc8 <__swbuf_r>
 800af78:	3001      	adds	r0, #1
 800af7a:	d1c9      	bne.n	800af10 <_puts_r+0x30>
 800af7c:	e7e9      	b.n	800af52 <_puts_r+0x72>
 800af7e:	6823      	ldr	r3, [r4, #0]
 800af80:	200a      	movs	r0, #10
 800af82:	1c5a      	adds	r2, r3, #1
 800af84:	6022      	str	r2, [r4, #0]
 800af86:	7018      	strb	r0, [r3, #0]
 800af88:	e7e5      	b.n	800af56 <_puts_r+0x76>
 800af8a:	bf00      	nop
 800af8c:	0800c158 	.word	0x0800c158
 800af90:	0800c178 	.word	0x0800c178
 800af94:	0800c138 	.word	0x0800c138

0800af98 <puts>:
 800af98:	4b02      	ldr	r3, [pc, #8]	; (800afa4 <puts+0xc>)
 800af9a:	4601      	mov	r1, r0
 800af9c:	6818      	ldr	r0, [r3, #0]
 800af9e:	f7ff bf9f 	b.w	800aee0 <_puts_r>
 800afa2:	bf00      	nop
 800afa4:	20000014 	.word	0x20000014

0800afa8 <_sbrk_r>:
 800afa8:	b538      	push	{r3, r4, r5, lr}
 800afaa:	4c06      	ldr	r4, [pc, #24]	; (800afc4 <_sbrk_r+0x1c>)
 800afac:	2300      	movs	r3, #0
 800afae:	4605      	mov	r5, r0
 800afb0:	4608      	mov	r0, r1
 800afb2:	6023      	str	r3, [r4, #0]
 800afb4:	f7f6 ffd8 	bl	8001f68 <_sbrk>
 800afb8:	1c43      	adds	r3, r0, #1
 800afba:	d102      	bne.n	800afc2 <_sbrk_r+0x1a>
 800afbc:	6823      	ldr	r3, [r4, #0]
 800afbe:	b103      	cbz	r3, 800afc2 <_sbrk_r+0x1a>
 800afc0:	602b      	str	r3, [r5, #0]
 800afc2:	bd38      	pop	{r3, r4, r5, pc}
 800afc4:	2000a7cc 	.word	0x2000a7cc

0800afc8 <__swbuf_r>:
 800afc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afca:	460e      	mov	r6, r1
 800afcc:	4614      	mov	r4, r2
 800afce:	4605      	mov	r5, r0
 800afd0:	b118      	cbz	r0, 800afda <__swbuf_r+0x12>
 800afd2:	6983      	ldr	r3, [r0, #24]
 800afd4:	b90b      	cbnz	r3, 800afda <__swbuf_r+0x12>
 800afd6:	f000 f9a7 	bl	800b328 <__sinit>
 800afda:	4b21      	ldr	r3, [pc, #132]	; (800b060 <__swbuf_r+0x98>)
 800afdc:	429c      	cmp	r4, r3
 800afde:	d12a      	bne.n	800b036 <__swbuf_r+0x6e>
 800afe0:	686c      	ldr	r4, [r5, #4]
 800afe2:	69a3      	ldr	r3, [r4, #24]
 800afe4:	60a3      	str	r3, [r4, #8]
 800afe6:	89a3      	ldrh	r3, [r4, #12]
 800afe8:	071a      	lsls	r2, r3, #28
 800afea:	d52e      	bpl.n	800b04a <__swbuf_r+0x82>
 800afec:	6923      	ldr	r3, [r4, #16]
 800afee:	b363      	cbz	r3, 800b04a <__swbuf_r+0x82>
 800aff0:	6923      	ldr	r3, [r4, #16]
 800aff2:	6820      	ldr	r0, [r4, #0]
 800aff4:	1ac0      	subs	r0, r0, r3
 800aff6:	6963      	ldr	r3, [r4, #20]
 800aff8:	b2f6      	uxtb	r6, r6
 800affa:	4283      	cmp	r3, r0
 800affc:	4637      	mov	r7, r6
 800affe:	dc04      	bgt.n	800b00a <__swbuf_r+0x42>
 800b000:	4621      	mov	r1, r4
 800b002:	4628      	mov	r0, r5
 800b004:	f000 f926 	bl	800b254 <_fflush_r>
 800b008:	bb28      	cbnz	r0, 800b056 <__swbuf_r+0x8e>
 800b00a:	68a3      	ldr	r3, [r4, #8]
 800b00c:	3b01      	subs	r3, #1
 800b00e:	60a3      	str	r3, [r4, #8]
 800b010:	6823      	ldr	r3, [r4, #0]
 800b012:	1c5a      	adds	r2, r3, #1
 800b014:	6022      	str	r2, [r4, #0]
 800b016:	701e      	strb	r6, [r3, #0]
 800b018:	6963      	ldr	r3, [r4, #20]
 800b01a:	3001      	adds	r0, #1
 800b01c:	4283      	cmp	r3, r0
 800b01e:	d004      	beq.n	800b02a <__swbuf_r+0x62>
 800b020:	89a3      	ldrh	r3, [r4, #12]
 800b022:	07db      	lsls	r3, r3, #31
 800b024:	d519      	bpl.n	800b05a <__swbuf_r+0x92>
 800b026:	2e0a      	cmp	r6, #10
 800b028:	d117      	bne.n	800b05a <__swbuf_r+0x92>
 800b02a:	4621      	mov	r1, r4
 800b02c:	4628      	mov	r0, r5
 800b02e:	f000 f911 	bl	800b254 <_fflush_r>
 800b032:	b190      	cbz	r0, 800b05a <__swbuf_r+0x92>
 800b034:	e00f      	b.n	800b056 <__swbuf_r+0x8e>
 800b036:	4b0b      	ldr	r3, [pc, #44]	; (800b064 <__swbuf_r+0x9c>)
 800b038:	429c      	cmp	r4, r3
 800b03a:	d101      	bne.n	800b040 <__swbuf_r+0x78>
 800b03c:	68ac      	ldr	r4, [r5, #8]
 800b03e:	e7d0      	b.n	800afe2 <__swbuf_r+0x1a>
 800b040:	4b09      	ldr	r3, [pc, #36]	; (800b068 <__swbuf_r+0xa0>)
 800b042:	429c      	cmp	r4, r3
 800b044:	bf08      	it	eq
 800b046:	68ec      	ldreq	r4, [r5, #12]
 800b048:	e7cb      	b.n	800afe2 <__swbuf_r+0x1a>
 800b04a:	4621      	mov	r1, r4
 800b04c:	4628      	mov	r0, r5
 800b04e:	f000 f80d 	bl	800b06c <__swsetup_r>
 800b052:	2800      	cmp	r0, #0
 800b054:	d0cc      	beq.n	800aff0 <__swbuf_r+0x28>
 800b056:	f04f 37ff 	mov.w	r7, #4294967295
 800b05a:	4638      	mov	r0, r7
 800b05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b05e:	bf00      	nop
 800b060:	0800c158 	.word	0x0800c158
 800b064:	0800c178 	.word	0x0800c178
 800b068:	0800c138 	.word	0x0800c138

0800b06c <__swsetup_r>:
 800b06c:	4b32      	ldr	r3, [pc, #200]	; (800b138 <__swsetup_r+0xcc>)
 800b06e:	b570      	push	{r4, r5, r6, lr}
 800b070:	681d      	ldr	r5, [r3, #0]
 800b072:	4606      	mov	r6, r0
 800b074:	460c      	mov	r4, r1
 800b076:	b125      	cbz	r5, 800b082 <__swsetup_r+0x16>
 800b078:	69ab      	ldr	r3, [r5, #24]
 800b07a:	b913      	cbnz	r3, 800b082 <__swsetup_r+0x16>
 800b07c:	4628      	mov	r0, r5
 800b07e:	f000 f953 	bl	800b328 <__sinit>
 800b082:	4b2e      	ldr	r3, [pc, #184]	; (800b13c <__swsetup_r+0xd0>)
 800b084:	429c      	cmp	r4, r3
 800b086:	d10f      	bne.n	800b0a8 <__swsetup_r+0x3c>
 800b088:	686c      	ldr	r4, [r5, #4]
 800b08a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b08e:	b29a      	uxth	r2, r3
 800b090:	0715      	lsls	r5, r2, #28
 800b092:	d42c      	bmi.n	800b0ee <__swsetup_r+0x82>
 800b094:	06d0      	lsls	r0, r2, #27
 800b096:	d411      	bmi.n	800b0bc <__swsetup_r+0x50>
 800b098:	2209      	movs	r2, #9
 800b09a:	6032      	str	r2, [r6, #0]
 800b09c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0a0:	81a3      	strh	r3, [r4, #12]
 800b0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a6:	e03e      	b.n	800b126 <__swsetup_r+0xba>
 800b0a8:	4b25      	ldr	r3, [pc, #148]	; (800b140 <__swsetup_r+0xd4>)
 800b0aa:	429c      	cmp	r4, r3
 800b0ac:	d101      	bne.n	800b0b2 <__swsetup_r+0x46>
 800b0ae:	68ac      	ldr	r4, [r5, #8]
 800b0b0:	e7eb      	b.n	800b08a <__swsetup_r+0x1e>
 800b0b2:	4b24      	ldr	r3, [pc, #144]	; (800b144 <__swsetup_r+0xd8>)
 800b0b4:	429c      	cmp	r4, r3
 800b0b6:	bf08      	it	eq
 800b0b8:	68ec      	ldreq	r4, [r5, #12]
 800b0ba:	e7e6      	b.n	800b08a <__swsetup_r+0x1e>
 800b0bc:	0751      	lsls	r1, r2, #29
 800b0be:	d512      	bpl.n	800b0e6 <__swsetup_r+0x7a>
 800b0c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0c2:	b141      	cbz	r1, 800b0d6 <__swsetup_r+0x6a>
 800b0c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0c8:	4299      	cmp	r1, r3
 800b0ca:	d002      	beq.n	800b0d2 <__swsetup_r+0x66>
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	f7ff fe47 	bl	800ad60 <_free_r>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	6363      	str	r3, [r4, #52]	; 0x34
 800b0d6:	89a3      	ldrh	r3, [r4, #12]
 800b0d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0dc:	81a3      	strh	r3, [r4, #12]
 800b0de:	2300      	movs	r3, #0
 800b0e0:	6063      	str	r3, [r4, #4]
 800b0e2:	6923      	ldr	r3, [r4, #16]
 800b0e4:	6023      	str	r3, [r4, #0]
 800b0e6:	89a3      	ldrh	r3, [r4, #12]
 800b0e8:	f043 0308 	orr.w	r3, r3, #8
 800b0ec:	81a3      	strh	r3, [r4, #12]
 800b0ee:	6923      	ldr	r3, [r4, #16]
 800b0f0:	b94b      	cbnz	r3, 800b106 <__swsetup_r+0x9a>
 800b0f2:	89a3      	ldrh	r3, [r4, #12]
 800b0f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0fc:	d003      	beq.n	800b106 <__swsetup_r+0x9a>
 800b0fe:	4621      	mov	r1, r4
 800b100:	4630      	mov	r0, r6
 800b102:	f000 f9bf 	bl	800b484 <__smakebuf_r>
 800b106:	89a2      	ldrh	r2, [r4, #12]
 800b108:	f012 0301 	ands.w	r3, r2, #1
 800b10c:	d00c      	beq.n	800b128 <__swsetup_r+0xbc>
 800b10e:	2300      	movs	r3, #0
 800b110:	60a3      	str	r3, [r4, #8]
 800b112:	6963      	ldr	r3, [r4, #20]
 800b114:	425b      	negs	r3, r3
 800b116:	61a3      	str	r3, [r4, #24]
 800b118:	6923      	ldr	r3, [r4, #16]
 800b11a:	b953      	cbnz	r3, 800b132 <__swsetup_r+0xc6>
 800b11c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b120:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b124:	d1ba      	bne.n	800b09c <__swsetup_r+0x30>
 800b126:	bd70      	pop	{r4, r5, r6, pc}
 800b128:	0792      	lsls	r2, r2, #30
 800b12a:	bf58      	it	pl
 800b12c:	6963      	ldrpl	r3, [r4, #20]
 800b12e:	60a3      	str	r3, [r4, #8]
 800b130:	e7f2      	b.n	800b118 <__swsetup_r+0xac>
 800b132:	2000      	movs	r0, #0
 800b134:	e7f7      	b.n	800b126 <__swsetup_r+0xba>
 800b136:	bf00      	nop
 800b138:	20000014 	.word	0x20000014
 800b13c:	0800c158 	.word	0x0800c158
 800b140:	0800c178 	.word	0x0800c178
 800b144:	0800c138 	.word	0x0800c138

0800b148 <__sflush_r>:
 800b148:	898a      	ldrh	r2, [r1, #12]
 800b14a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b14e:	4605      	mov	r5, r0
 800b150:	0710      	lsls	r0, r2, #28
 800b152:	460c      	mov	r4, r1
 800b154:	d458      	bmi.n	800b208 <__sflush_r+0xc0>
 800b156:	684b      	ldr	r3, [r1, #4]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	dc05      	bgt.n	800b168 <__sflush_r+0x20>
 800b15c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b15e:	2b00      	cmp	r3, #0
 800b160:	dc02      	bgt.n	800b168 <__sflush_r+0x20>
 800b162:	2000      	movs	r0, #0
 800b164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b16a:	2e00      	cmp	r6, #0
 800b16c:	d0f9      	beq.n	800b162 <__sflush_r+0x1a>
 800b16e:	2300      	movs	r3, #0
 800b170:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b174:	682f      	ldr	r7, [r5, #0]
 800b176:	6a21      	ldr	r1, [r4, #32]
 800b178:	602b      	str	r3, [r5, #0]
 800b17a:	d032      	beq.n	800b1e2 <__sflush_r+0x9a>
 800b17c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b17e:	89a3      	ldrh	r3, [r4, #12]
 800b180:	075a      	lsls	r2, r3, #29
 800b182:	d505      	bpl.n	800b190 <__sflush_r+0x48>
 800b184:	6863      	ldr	r3, [r4, #4]
 800b186:	1ac0      	subs	r0, r0, r3
 800b188:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b18a:	b10b      	cbz	r3, 800b190 <__sflush_r+0x48>
 800b18c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b18e:	1ac0      	subs	r0, r0, r3
 800b190:	2300      	movs	r3, #0
 800b192:	4602      	mov	r2, r0
 800b194:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b196:	6a21      	ldr	r1, [r4, #32]
 800b198:	4628      	mov	r0, r5
 800b19a:	47b0      	blx	r6
 800b19c:	1c43      	adds	r3, r0, #1
 800b19e:	89a3      	ldrh	r3, [r4, #12]
 800b1a0:	d106      	bne.n	800b1b0 <__sflush_r+0x68>
 800b1a2:	6829      	ldr	r1, [r5, #0]
 800b1a4:	291d      	cmp	r1, #29
 800b1a6:	d848      	bhi.n	800b23a <__sflush_r+0xf2>
 800b1a8:	4a29      	ldr	r2, [pc, #164]	; (800b250 <__sflush_r+0x108>)
 800b1aa:	40ca      	lsrs	r2, r1
 800b1ac:	07d6      	lsls	r6, r2, #31
 800b1ae:	d544      	bpl.n	800b23a <__sflush_r+0xf2>
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	6062      	str	r2, [r4, #4]
 800b1b4:	04d9      	lsls	r1, r3, #19
 800b1b6:	6922      	ldr	r2, [r4, #16]
 800b1b8:	6022      	str	r2, [r4, #0]
 800b1ba:	d504      	bpl.n	800b1c6 <__sflush_r+0x7e>
 800b1bc:	1c42      	adds	r2, r0, #1
 800b1be:	d101      	bne.n	800b1c4 <__sflush_r+0x7c>
 800b1c0:	682b      	ldr	r3, [r5, #0]
 800b1c2:	b903      	cbnz	r3, 800b1c6 <__sflush_r+0x7e>
 800b1c4:	6560      	str	r0, [r4, #84]	; 0x54
 800b1c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1c8:	602f      	str	r7, [r5, #0]
 800b1ca:	2900      	cmp	r1, #0
 800b1cc:	d0c9      	beq.n	800b162 <__sflush_r+0x1a>
 800b1ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1d2:	4299      	cmp	r1, r3
 800b1d4:	d002      	beq.n	800b1dc <__sflush_r+0x94>
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	f7ff fdc2 	bl	800ad60 <_free_r>
 800b1dc:	2000      	movs	r0, #0
 800b1de:	6360      	str	r0, [r4, #52]	; 0x34
 800b1e0:	e7c0      	b.n	800b164 <__sflush_r+0x1c>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	47b0      	blx	r6
 800b1e8:	1c41      	adds	r1, r0, #1
 800b1ea:	d1c8      	bne.n	800b17e <__sflush_r+0x36>
 800b1ec:	682b      	ldr	r3, [r5, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d0c5      	beq.n	800b17e <__sflush_r+0x36>
 800b1f2:	2b1d      	cmp	r3, #29
 800b1f4:	d001      	beq.n	800b1fa <__sflush_r+0xb2>
 800b1f6:	2b16      	cmp	r3, #22
 800b1f8:	d101      	bne.n	800b1fe <__sflush_r+0xb6>
 800b1fa:	602f      	str	r7, [r5, #0]
 800b1fc:	e7b1      	b.n	800b162 <__sflush_r+0x1a>
 800b1fe:	89a3      	ldrh	r3, [r4, #12]
 800b200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b204:	81a3      	strh	r3, [r4, #12]
 800b206:	e7ad      	b.n	800b164 <__sflush_r+0x1c>
 800b208:	690f      	ldr	r7, [r1, #16]
 800b20a:	2f00      	cmp	r7, #0
 800b20c:	d0a9      	beq.n	800b162 <__sflush_r+0x1a>
 800b20e:	0793      	lsls	r3, r2, #30
 800b210:	680e      	ldr	r6, [r1, #0]
 800b212:	bf08      	it	eq
 800b214:	694b      	ldreq	r3, [r1, #20]
 800b216:	600f      	str	r7, [r1, #0]
 800b218:	bf18      	it	ne
 800b21a:	2300      	movne	r3, #0
 800b21c:	eba6 0807 	sub.w	r8, r6, r7
 800b220:	608b      	str	r3, [r1, #8]
 800b222:	f1b8 0f00 	cmp.w	r8, #0
 800b226:	dd9c      	ble.n	800b162 <__sflush_r+0x1a>
 800b228:	4643      	mov	r3, r8
 800b22a:	463a      	mov	r2, r7
 800b22c:	6a21      	ldr	r1, [r4, #32]
 800b22e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b230:	4628      	mov	r0, r5
 800b232:	47b0      	blx	r6
 800b234:	2800      	cmp	r0, #0
 800b236:	dc06      	bgt.n	800b246 <__sflush_r+0xfe>
 800b238:	89a3      	ldrh	r3, [r4, #12]
 800b23a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b23e:	81a3      	strh	r3, [r4, #12]
 800b240:	f04f 30ff 	mov.w	r0, #4294967295
 800b244:	e78e      	b.n	800b164 <__sflush_r+0x1c>
 800b246:	4407      	add	r7, r0
 800b248:	eba8 0800 	sub.w	r8, r8, r0
 800b24c:	e7e9      	b.n	800b222 <__sflush_r+0xda>
 800b24e:	bf00      	nop
 800b250:	20400001 	.word	0x20400001

0800b254 <_fflush_r>:
 800b254:	b538      	push	{r3, r4, r5, lr}
 800b256:	690b      	ldr	r3, [r1, #16]
 800b258:	4605      	mov	r5, r0
 800b25a:	460c      	mov	r4, r1
 800b25c:	b1db      	cbz	r3, 800b296 <_fflush_r+0x42>
 800b25e:	b118      	cbz	r0, 800b268 <_fflush_r+0x14>
 800b260:	6983      	ldr	r3, [r0, #24]
 800b262:	b90b      	cbnz	r3, 800b268 <_fflush_r+0x14>
 800b264:	f000 f860 	bl	800b328 <__sinit>
 800b268:	4b0c      	ldr	r3, [pc, #48]	; (800b29c <_fflush_r+0x48>)
 800b26a:	429c      	cmp	r4, r3
 800b26c:	d109      	bne.n	800b282 <_fflush_r+0x2e>
 800b26e:	686c      	ldr	r4, [r5, #4]
 800b270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b274:	b17b      	cbz	r3, 800b296 <_fflush_r+0x42>
 800b276:	4621      	mov	r1, r4
 800b278:	4628      	mov	r0, r5
 800b27a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b27e:	f7ff bf63 	b.w	800b148 <__sflush_r>
 800b282:	4b07      	ldr	r3, [pc, #28]	; (800b2a0 <_fflush_r+0x4c>)
 800b284:	429c      	cmp	r4, r3
 800b286:	d101      	bne.n	800b28c <_fflush_r+0x38>
 800b288:	68ac      	ldr	r4, [r5, #8]
 800b28a:	e7f1      	b.n	800b270 <_fflush_r+0x1c>
 800b28c:	4b05      	ldr	r3, [pc, #20]	; (800b2a4 <_fflush_r+0x50>)
 800b28e:	429c      	cmp	r4, r3
 800b290:	bf08      	it	eq
 800b292:	68ec      	ldreq	r4, [r5, #12]
 800b294:	e7ec      	b.n	800b270 <_fflush_r+0x1c>
 800b296:	2000      	movs	r0, #0
 800b298:	bd38      	pop	{r3, r4, r5, pc}
 800b29a:	bf00      	nop
 800b29c:	0800c158 	.word	0x0800c158
 800b2a0:	0800c178 	.word	0x0800c178
 800b2a4:	0800c138 	.word	0x0800c138

0800b2a8 <std>:
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	b510      	push	{r4, lr}
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	e9c0 3300 	strd	r3, r3, [r0]
 800b2b2:	6083      	str	r3, [r0, #8]
 800b2b4:	8181      	strh	r1, [r0, #12]
 800b2b6:	6643      	str	r3, [r0, #100]	; 0x64
 800b2b8:	81c2      	strh	r2, [r0, #14]
 800b2ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2be:	6183      	str	r3, [r0, #24]
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	2208      	movs	r2, #8
 800b2c4:	305c      	adds	r0, #92	; 0x5c
 800b2c6:	f7ff fd43 	bl	800ad50 <memset>
 800b2ca:	4b05      	ldr	r3, [pc, #20]	; (800b2e0 <std+0x38>)
 800b2cc:	6263      	str	r3, [r4, #36]	; 0x24
 800b2ce:	4b05      	ldr	r3, [pc, #20]	; (800b2e4 <std+0x3c>)
 800b2d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2d2:	4b05      	ldr	r3, [pc, #20]	; (800b2e8 <std+0x40>)
 800b2d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2d6:	4b05      	ldr	r3, [pc, #20]	; (800b2ec <std+0x44>)
 800b2d8:	6224      	str	r4, [r4, #32]
 800b2da:	6323      	str	r3, [r4, #48]	; 0x30
 800b2dc:	bd10      	pop	{r4, pc}
 800b2de:	bf00      	nop
 800b2e0:	0800ba99 	.word	0x0800ba99
 800b2e4:	0800babb 	.word	0x0800babb
 800b2e8:	0800baf3 	.word	0x0800baf3
 800b2ec:	0800bb17 	.word	0x0800bb17

0800b2f0 <_cleanup_r>:
 800b2f0:	4901      	ldr	r1, [pc, #4]	; (800b2f8 <_cleanup_r+0x8>)
 800b2f2:	f000 b885 	b.w	800b400 <_fwalk_reent>
 800b2f6:	bf00      	nop
 800b2f8:	0800b255 	.word	0x0800b255

0800b2fc <__sfmoreglue>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	1e4a      	subs	r2, r1, #1
 800b300:	2568      	movs	r5, #104	; 0x68
 800b302:	4355      	muls	r5, r2
 800b304:	460e      	mov	r6, r1
 800b306:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b30a:	f7ff fd77 	bl	800adfc <_malloc_r>
 800b30e:	4604      	mov	r4, r0
 800b310:	b140      	cbz	r0, 800b324 <__sfmoreglue+0x28>
 800b312:	2100      	movs	r1, #0
 800b314:	e9c0 1600 	strd	r1, r6, [r0]
 800b318:	300c      	adds	r0, #12
 800b31a:	60a0      	str	r0, [r4, #8]
 800b31c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b320:	f7ff fd16 	bl	800ad50 <memset>
 800b324:	4620      	mov	r0, r4
 800b326:	bd70      	pop	{r4, r5, r6, pc}

0800b328 <__sinit>:
 800b328:	6983      	ldr	r3, [r0, #24]
 800b32a:	b510      	push	{r4, lr}
 800b32c:	4604      	mov	r4, r0
 800b32e:	bb33      	cbnz	r3, 800b37e <__sinit+0x56>
 800b330:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b334:	6503      	str	r3, [r0, #80]	; 0x50
 800b336:	4b12      	ldr	r3, [pc, #72]	; (800b380 <__sinit+0x58>)
 800b338:	4a12      	ldr	r2, [pc, #72]	; (800b384 <__sinit+0x5c>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	6282      	str	r2, [r0, #40]	; 0x28
 800b33e:	4298      	cmp	r0, r3
 800b340:	bf04      	itt	eq
 800b342:	2301      	moveq	r3, #1
 800b344:	6183      	streq	r3, [r0, #24]
 800b346:	f000 f81f 	bl	800b388 <__sfp>
 800b34a:	6060      	str	r0, [r4, #4]
 800b34c:	4620      	mov	r0, r4
 800b34e:	f000 f81b 	bl	800b388 <__sfp>
 800b352:	60a0      	str	r0, [r4, #8]
 800b354:	4620      	mov	r0, r4
 800b356:	f000 f817 	bl	800b388 <__sfp>
 800b35a:	2200      	movs	r2, #0
 800b35c:	60e0      	str	r0, [r4, #12]
 800b35e:	2104      	movs	r1, #4
 800b360:	6860      	ldr	r0, [r4, #4]
 800b362:	f7ff ffa1 	bl	800b2a8 <std>
 800b366:	2201      	movs	r2, #1
 800b368:	2109      	movs	r1, #9
 800b36a:	68a0      	ldr	r0, [r4, #8]
 800b36c:	f7ff ff9c 	bl	800b2a8 <std>
 800b370:	2202      	movs	r2, #2
 800b372:	2112      	movs	r1, #18
 800b374:	68e0      	ldr	r0, [r4, #12]
 800b376:	f7ff ff97 	bl	800b2a8 <std>
 800b37a:	2301      	movs	r3, #1
 800b37c:	61a3      	str	r3, [r4, #24]
 800b37e:	bd10      	pop	{r4, pc}
 800b380:	0800c134 	.word	0x0800c134
 800b384:	0800b2f1 	.word	0x0800b2f1

0800b388 <__sfp>:
 800b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38a:	4b1b      	ldr	r3, [pc, #108]	; (800b3f8 <__sfp+0x70>)
 800b38c:	681e      	ldr	r6, [r3, #0]
 800b38e:	69b3      	ldr	r3, [r6, #24]
 800b390:	4607      	mov	r7, r0
 800b392:	b913      	cbnz	r3, 800b39a <__sfp+0x12>
 800b394:	4630      	mov	r0, r6
 800b396:	f7ff ffc7 	bl	800b328 <__sinit>
 800b39a:	3648      	adds	r6, #72	; 0x48
 800b39c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b3a0:	3b01      	subs	r3, #1
 800b3a2:	d503      	bpl.n	800b3ac <__sfp+0x24>
 800b3a4:	6833      	ldr	r3, [r6, #0]
 800b3a6:	b133      	cbz	r3, 800b3b6 <__sfp+0x2e>
 800b3a8:	6836      	ldr	r6, [r6, #0]
 800b3aa:	e7f7      	b.n	800b39c <__sfp+0x14>
 800b3ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3b0:	b16d      	cbz	r5, 800b3ce <__sfp+0x46>
 800b3b2:	3468      	adds	r4, #104	; 0x68
 800b3b4:	e7f4      	b.n	800b3a0 <__sfp+0x18>
 800b3b6:	2104      	movs	r1, #4
 800b3b8:	4638      	mov	r0, r7
 800b3ba:	f7ff ff9f 	bl	800b2fc <__sfmoreglue>
 800b3be:	6030      	str	r0, [r6, #0]
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d1f1      	bne.n	800b3a8 <__sfp+0x20>
 800b3c4:	230c      	movs	r3, #12
 800b3c6:	603b      	str	r3, [r7, #0]
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3ce:	4b0b      	ldr	r3, [pc, #44]	; (800b3fc <__sfp+0x74>)
 800b3d0:	6665      	str	r5, [r4, #100]	; 0x64
 800b3d2:	e9c4 5500 	strd	r5, r5, [r4]
 800b3d6:	60a5      	str	r5, [r4, #8]
 800b3d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b3dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b3e0:	2208      	movs	r2, #8
 800b3e2:	4629      	mov	r1, r5
 800b3e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b3e8:	f7ff fcb2 	bl	800ad50 <memset>
 800b3ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b3f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b3f4:	e7e9      	b.n	800b3ca <__sfp+0x42>
 800b3f6:	bf00      	nop
 800b3f8:	0800c134 	.word	0x0800c134
 800b3fc:	ffff0001 	.word	0xffff0001

0800b400 <_fwalk_reent>:
 800b400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b404:	4680      	mov	r8, r0
 800b406:	4689      	mov	r9, r1
 800b408:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b40c:	2600      	movs	r6, #0
 800b40e:	b914      	cbnz	r4, 800b416 <_fwalk_reent+0x16>
 800b410:	4630      	mov	r0, r6
 800b412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b416:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b41a:	3f01      	subs	r7, #1
 800b41c:	d501      	bpl.n	800b422 <_fwalk_reent+0x22>
 800b41e:	6824      	ldr	r4, [r4, #0]
 800b420:	e7f5      	b.n	800b40e <_fwalk_reent+0xe>
 800b422:	89ab      	ldrh	r3, [r5, #12]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d907      	bls.n	800b438 <_fwalk_reent+0x38>
 800b428:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b42c:	3301      	adds	r3, #1
 800b42e:	d003      	beq.n	800b438 <_fwalk_reent+0x38>
 800b430:	4629      	mov	r1, r5
 800b432:	4640      	mov	r0, r8
 800b434:	47c8      	blx	r9
 800b436:	4306      	orrs	r6, r0
 800b438:	3568      	adds	r5, #104	; 0x68
 800b43a:	e7ee      	b.n	800b41a <_fwalk_reent+0x1a>

0800b43c <__swhatbuf_r>:
 800b43c:	b570      	push	{r4, r5, r6, lr}
 800b43e:	460e      	mov	r6, r1
 800b440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b444:	2900      	cmp	r1, #0
 800b446:	b096      	sub	sp, #88	; 0x58
 800b448:	4614      	mov	r4, r2
 800b44a:	461d      	mov	r5, r3
 800b44c:	da07      	bge.n	800b45e <__swhatbuf_r+0x22>
 800b44e:	2300      	movs	r3, #0
 800b450:	602b      	str	r3, [r5, #0]
 800b452:	89b3      	ldrh	r3, [r6, #12]
 800b454:	061a      	lsls	r2, r3, #24
 800b456:	d410      	bmi.n	800b47a <__swhatbuf_r+0x3e>
 800b458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b45c:	e00e      	b.n	800b47c <__swhatbuf_r+0x40>
 800b45e:	466a      	mov	r2, sp
 800b460:	f000 fb80 	bl	800bb64 <_fstat_r>
 800b464:	2800      	cmp	r0, #0
 800b466:	dbf2      	blt.n	800b44e <__swhatbuf_r+0x12>
 800b468:	9a01      	ldr	r2, [sp, #4]
 800b46a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b46e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b472:	425a      	negs	r2, r3
 800b474:	415a      	adcs	r2, r3
 800b476:	602a      	str	r2, [r5, #0]
 800b478:	e7ee      	b.n	800b458 <__swhatbuf_r+0x1c>
 800b47a:	2340      	movs	r3, #64	; 0x40
 800b47c:	2000      	movs	r0, #0
 800b47e:	6023      	str	r3, [r4, #0]
 800b480:	b016      	add	sp, #88	; 0x58
 800b482:	bd70      	pop	{r4, r5, r6, pc}

0800b484 <__smakebuf_r>:
 800b484:	898b      	ldrh	r3, [r1, #12]
 800b486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b488:	079d      	lsls	r5, r3, #30
 800b48a:	4606      	mov	r6, r0
 800b48c:	460c      	mov	r4, r1
 800b48e:	d507      	bpl.n	800b4a0 <__smakebuf_r+0x1c>
 800b490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b494:	6023      	str	r3, [r4, #0]
 800b496:	6123      	str	r3, [r4, #16]
 800b498:	2301      	movs	r3, #1
 800b49a:	6163      	str	r3, [r4, #20]
 800b49c:	b002      	add	sp, #8
 800b49e:	bd70      	pop	{r4, r5, r6, pc}
 800b4a0:	ab01      	add	r3, sp, #4
 800b4a2:	466a      	mov	r2, sp
 800b4a4:	f7ff ffca 	bl	800b43c <__swhatbuf_r>
 800b4a8:	9900      	ldr	r1, [sp, #0]
 800b4aa:	4605      	mov	r5, r0
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	f7ff fca5 	bl	800adfc <_malloc_r>
 800b4b2:	b948      	cbnz	r0, 800b4c8 <__smakebuf_r+0x44>
 800b4b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4b8:	059a      	lsls	r2, r3, #22
 800b4ba:	d4ef      	bmi.n	800b49c <__smakebuf_r+0x18>
 800b4bc:	f023 0303 	bic.w	r3, r3, #3
 800b4c0:	f043 0302 	orr.w	r3, r3, #2
 800b4c4:	81a3      	strh	r3, [r4, #12]
 800b4c6:	e7e3      	b.n	800b490 <__smakebuf_r+0xc>
 800b4c8:	4b0d      	ldr	r3, [pc, #52]	; (800b500 <__smakebuf_r+0x7c>)
 800b4ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800b4cc:	89a3      	ldrh	r3, [r4, #12]
 800b4ce:	6020      	str	r0, [r4, #0]
 800b4d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4d4:	81a3      	strh	r3, [r4, #12]
 800b4d6:	9b00      	ldr	r3, [sp, #0]
 800b4d8:	6163      	str	r3, [r4, #20]
 800b4da:	9b01      	ldr	r3, [sp, #4]
 800b4dc:	6120      	str	r0, [r4, #16]
 800b4de:	b15b      	cbz	r3, 800b4f8 <__smakebuf_r+0x74>
 800b4e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	f000 fb4f 	bl	800bb88 <_isatty_r>
 800b4ea:	b128      	cbz	r0, 800b4f8 <__smakebuf_r+0x74>
 800b4ec:	89a3      	ldrh	r3, [r4, #12]
 800b4ee:	f023 0303 	bic.w	r3, r3, #3
 800b4f2:	f043 0301 	orr.w	r3, r3, #1
 800b4f6:	81a3      	strh	r3, [r4, #12]
 800b4f8:	89a3      	ldrh	r3, [r4, #12]
 800b4fa:	431d      	orrs	r5, r3
 800b4fc:	81a5      	strh	r5, [r4, #12]
 800b4fe:	e7cd      	b.n	800b49c <__smakebuf_r+0x18>
 800b500:	0800b2f1 	.word	0x0800b2f1

0800b504 <__malloc_lock>:
 800b504:	4770      	bx	lr

0800b506 <__malloc_unlock>:
 800b506:	4770      	bx	lr

0800b508 <__sfputc_r>:
 800b508:	6893      	ldr	r3, [r2, #8]
 800b50a:	3b01      	subs	r3, #1
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	b410      	push	{r4}
 800b510:	6093      	str	r3, [r2, #8]
 800b512:	da08      	bge.n	800b526 <__sfputc_r+0x1e>
 800b514:	6994      	ldr	r4, [r2, #24]
 800b516:	42a3      	cmp	r3, r4
 800b518:	db01      	blt.n	800b51e <__sfputc_r+0x16>
 800b51a:	290a      	cmp	r1, #10
 800b51c:	d103      	bne.n	800b526 <__sfputc_r+0x1e>
 800b51e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b522:	f7ff bd51 	b.w	800afc8 <__swbuf_r>
 800b526:	6813      	ldr	r3, [r2, #0]
 800b528:	1c58      	adds	r0, r3, #1
 800b52a:	6010      	str	r0, [r2, #0]
 800b52c:	7019      	strb	r1, [r3, #0]
 800b52e:	4608      	mov	r0, r1
 800b530:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b534:	4770      	bx	lr

0800b536 <__sfputs_r>:
 800b536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b538:	4606      	mov	r6, r0
 800b53a:	460f      	mov	r7, r1
 800b53c:	4614      	mov	r4, r2
 800b53e:	18d5      	adds	r5, r2, r3
 800b540:	42ac      	cmp	r4, r5
 800b542:	d101      	bne.n	800b548 <__sfputs_r+0x12>
 800b544:	2000      	movs	r0, #0
 800b546:	e007      	b.n	800b558 <__sfputs_r+0x22>
 800b548:	463a      	mov	r2, r7
 800b54a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b54e:	4630      	mov	r0, r6
 800b550:	f7ff ffda 	bl	800b508 <__sfputc_r>
 800b554:	1c43      	adds	r3, r0, #1
 800b556:	d1f3      	bne.n	800b540 <__sfputs_r+0xa>
 800b558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b55c <_vfiprintf_r>:
 800b55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b560:	460c      	mov	r4, r1
 800b562:	b09d      	sub	sp, #116	; 0x74
 800b564:	4617      	mov	r7, r2
 800b566:	461d      	mov	r5, r3
 800b568:	4606      	mov	r6, r0
 800b56a:	b118      	cbz	r0, 800b574 <_vfiprintf_r+0x18>
 800b56c:	6983      	ldr	r3, [r0, #24]
 800b56e:	b90b      	cbnz	r3, 800b574 <_vfiprintf_r+0x18>
 800b570:	f7ff feda 	bl	800b328 <__sinit>
 800b574:	4b7c      	ldr	r3, [pc, #496]	; (800b768 <_vfiprintf_r+0x20c>)
 800b576:	429c      	cmp	r4, r3
 800b578:	d158      	bne.n	800b62c <_vfiprintf_r+0xd0>
 800b57a:	6874      	ldr	r4, [r6, #4]
 800b57c:	89a3      	ldrh	r3, [r4, #12]
 800b57e:	0718      	lsls	r0, r3, #28
 800b580:	d55e      	bpl.n	800b640 <_vfiprintf_r+0xe4>
 800b582:	6923      	ldr	r3, [r4, #16]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d05b      	beq.n	800b640 <_vfiprintf_r+0xe4>
 800b588:	2300      	movs	r3, #0
 800b58a:	9309      	str	r3, [sp, #36]	; 0x24
 800b58c:	2320      	movs	r3, #32
 800b58e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b592:	2330      	movs	r3, #48	; 0x30
 800b594:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b598:	9503      	str	r5, [sp, #12]
 800b59a:	f04f 0b01 	mov.w	fp, #1
 800b59e:	46b8      	mov	r8, r7
 800b5a0:	4645      	mov	r5, r8
 800b5a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b5a6:	b10b      	cbz	r3, 800b5ac <_vfiprintf_r+0x50>
 800b5a8:	2b25      	cmp	r3, #37	; 0x25
 800b5aa:	d154      	bne.n	800b656 <_vfiprintf_r+0xfa>
 800b5ac:	ebb8 0a07 	subs.w	sl, r8, r7
 800b5b0:	d00b      	beq.n	800b5ca <_vfiprintf_r+0x6e>
 800b5b2:	4653      	mov	r3, sl
 800b5b4:	463a      	mov	r2, r7
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	f7ff ffbc 	bl	800b536 <__sfputs_r>
 800b5be:	3001      	adds	r0, #1
 800b5c0:	f000 80c2 	beq.w	800b748 <_vfiprintf_r+0x1ec>
 800b5c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5c6:	4453      	add	r3, sl
 800b5c8:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ca:	f898 3000 	ldrb.w	r3, [r8]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f000 80ba 	beq.w	800b748 <_vfiprintf_r+0x1ec>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5de:	9304      	str	r3, [sp, #16]
 800b5e0:	9307      	str	r3, [sp, #28]
 800b5e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5e6:	931a      	str	r3, [sp, #104]	; 0x68
 800b5e8:	46a8      	mov	r8, r5
 800b5ea:	2205      	movs	r2, #5
 800b5ec:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b5f0:	485e      	ldr	r0, [pc, #376]	; (800b76c <_vfiprintf_r+0x210>)
 800b5f2:	f7f4 fe15 	bl	8000220 <memchr>
 800b5f6:	9b04      	ldr	r3, [sp, #16]
 800b5f8:	bb78      	cbnz	r0, 800b65a <_vfiprintf_r+0xfe>
 800b5fa:	06d9      	lsls	r1, r3, #27
 800b5fc:	bf44      	itt	mi
 800b5fe:	2220      	movmi	r2, #32
 800b600:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b604:	071a      	lsls	r2, r3, #28
 800b606:	bf44      	itt	mi
 800b608:	222b      	movmi	r2, #43	; 0x2b
 800b60a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b60e:	782a      	ldrb	r2, [r5, #0]
 800b610:	2a2a      	cmp	r2, #42	; 0x2a
 800b612:	d02a      	beq.n	800b66a <_vfiprintf_r+0x10e>
 800b614:	9a07      	ldr	r2, [sp, #28]
 800b616:	46a8      	mov	r8, r5
 800b618:	2000      	movs	r0, #0
 800b61a:	250a      	movs	r5, #10
 800b61c:	4641      	mov	r1, r8
 800b61e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b622:	3b30      	subs	r3, #48	; 0x30
 800b624:	2b09      	cmp	r3, #9
 800b626:	d969      	bls.n	800b6fc <_vfiprintf_r+0x1a0>
 800b628:	b360      	cbz	r0, 800b684 <_vfiprintf_r+0x128>
 800b62a:	e024      	b.n	800b676 <_vfiprintf_r+0x11a>
 800b62c:	4b50      	ldr	r3, [pc, #320]	; (800b770 <_vfiprintf_r+0x214>)
 800b62e:	429c      	cmp	r4, r3
 800b630:	d101      	bne.n	800b636 <_vfiprintf_r+0xda>
 800b632:	68b4      	ldr	r4, [r6, #8]
 800b634:	e7a2      	b.n	800b57c <_vfiprintf_r+0x20>
 800b636:	4b4f      	ldr	r3, [pc, #316]	; (800b774 <_vfiprintf_r+0x218>)
 800b638:	429c      	cmp	r4, r3
 800b63a:	bf08      	it	eq
 800b63c:	68f4      	ldreq	r4, [r6, #12]
 800b63e:	e79d      	b.n	800b57c <_vfiprintf_r+0x20>
 800b640:	4621      	mov	r1, r4
 800b642:	4630      	mov	r0, r6
 800b644:	f7ff fd12 	bl	800b06c <__swsetup_r>
 800b648:	2800      	cmp	r0, #0
 800b64a:	d09d      	beq.n	800b588 <_vfiprintf_r+0x2c>
 800b64c:	f04f 30ff 	mov.w	r0, #4294967295
 800b650:	b01d      	add	sp, #116	; 0x74
 800b652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b656:	46a8      	mov	r8, r5
 800b658:	e7a2      	b.n	800b5a0 <_vfiprintf_r+0x44>
 800b65a:	4a44      	ldr	r2, [pc, #272]	; (800b76c <_vfiprintf_r+0x210>)
 800b65c:	1a80      	subs	r0, r0, r2
 800b65e:	fa0b f000 	lsl.w	r0, fp, r0
 800b662:	4318      	orrs	r0, r3
 800b664:	9004      	str	r0, [sp, #16]
 800b666:	4645      	mov	r5, r8
 800b668:	e7be      	b.n	800b5e8 <_vfiprintf_r+0x8c>
 800b66a:	9a03      	ldr	r2, [sp, #12]
 800b66c:	1d11      	adds	r1, r2, #4
 800b66e:	6812      	ldr	r2, [r2, #0]
 800b670:	9103      	str	r1, [sp, #12]
 800b672:	2a00      	cmp	r2, #0
 800b674:	db01      	blt.n	800b67a <_vfiprintf_r+0x11e>
 800b676:	9207      	str	r2, [sp, #28]
 800b678:	e004      	b.n	800b684 <_vfiprintf_r+0x128>
 800b67a:	4252      	negs	r2, r2
 800b67c:	f043 0302 	orr.w	r3, r3, #2
 800b680:	9207      	str	r2, [sp, #28]
 800b682:	9304      	str	r3, [sp, #16]
 800b684:	f898 3000 	ldrb.w	r3, [r8]
 800b688:	2b2e      	cmp	r3, #46	; 0x2e
 800b68a:	d10e      	bne.n	800b6aa <_vfiprintf_r+0x14e>
 800b68c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b690:	2b2a      	cmp	r3, #42	; 0x2a
 800b692:	d138      	bne.n	800b706 <_vfiprintf_r+0x1aa>
 800b694:	9b03      	ldr	r3, [sp, #12]
 800b696:	1d1a      	adds	r2, r3, #4
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	9203      	str	r2, [sp, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	bfb8      	it	lt
 800b6a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6a4:	f108 0802 	add.w	r8, r8, #2
 800b6a8:	9305      	str	r3, [sp, #20]
 800b6aa:	4d33      	ldr	r5, [pc, #204]	; (800b778 <_vfiprintf_r+0x21c>)
 800b6ac:	f898 1000 	ldrb.w	r1, [r8]
 800b6b0:	2203      	movs	r2, #3
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	f7f4 fdb4 	bl	8000220 <memchr>
 800b6b8:	b140      	cbz	r0, 800b6cc <_vfiprintf_r+0x170>
 800b6ba:	2340      	movs	r3, #64	; 0x40
 800b6bc:	1b40      	subs	r0, r0, r5
 800b6be:	fa03 f000 	lsl.w	r0, r3, r0
 800b6c2:	9b04      	ldr	r3, [sp, #16]
 800b6c4:	4303      	orrs	r3, r0
 800b6c6:	f108 0801 	add.w	r8, r8, #1
 800b6ca:	9304      	str	r3, [sp, #16]
 800b6cc:	f898 1000 	ldrb.w	r1, [r8]
 800b6d0:	482a      	ldr	r0, [pc, #168]	; (800b77c <_vfiprintf_r+0x220>)
 800b6d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6d6:	2206      	movs	r2, #6
 800b6d8:	f108 0701 	add.w	r7, r8, #1
 800b6dc:	f7f4 fda0 	bl	8000220 <memchr>
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d037      	beq.n	800b754 <_vfiprintf_r+0x1f8>
 800b6e4:	4b26      	ldr	r3, [pc, #152]	; (800b780 <_vfiprintf_r+0x224>)
 800b6e6:	bb1b      	cbnz	r3, 800b730 <_vfiprintf_r+0x1d4>
 800b6e8:	9b03      	ldr	r3, [sp, #12]
 800b6ea:	3307      	adds	r3, #7
 800b6ec:	f023 0307 	bic.w	r3, r3, #7
 800b6f0:	3308      	adds	r3, #8
 800b6f2:	9303      	str	r3, [sp, #12]
 800b6f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6f6:	444b      	add	r3, r9
 800b6f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b6fa:	e750      	b.n	800b59e <_vfiprintf_r+0x42>
 800b6fc:	fb05 3202 	mla	r2, r5, r2, r3
 800b700:	2001      	movs	r0, #1
 800b702:	4688      	mov	r8, r1
 800b704:	e78a      	b.n	800b61c <_vfiprintf_r+0xc0>
 800b706:	2300      	movs	r3, #0
 800b708:	f108 0801 	add.w	r8, r8, #1
 800b70c:	9305      	str	r3, [sp, #20]
 800b70e:	4619      	mov	r1, r3
 800b710:	250a      	movs	r5, #10
 800b712:	4640      	mov	r0, r8
 800b714:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b718:	3a30      	subs	r2, #48	; 0x30
 800b71a:	2a09      	cmp	r2, #9
 800b71c:	d903      	bls.n	800b726 <_vfiprintf_r+0x1ca>
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d0c3      	beq.n	800b6aa <_vfiprintf_r+0x14e>
 800b722:	9105      	str	r1, [sp, #20]
 800b724:	e7c1      	b.n	800b6aa <_vfiprintf_r+0x14e>
 800b726:	fb05 2101 	mla	r1, r5, r1, r2
 800b72a:	2301      	movs	r3, #1
 800b72c:	4680      	mov	r8, r0
 800b72e:	e7f0      	b.n	800b712 <_vfiprintf_r+0x1b6>
 800b730:	ab03      	add	r3, sp, #12
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	4622      	mov	r2, r4
 800b736:	4b13      	ldr	r3, [pc, #76]	; (800b784 <_vfiprintf_r+0x228>)
 800b738:	a904      	add	r1, sp, #16
 800b73a:	4630      	mov	r0, r6
 800b73c:	f3af 8000 	nop.w
 800b740:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b744:	4681      	mov	r9, r0
 800b746:	d1d5      	bne.n	800b6f4 <_vfiprintf_r+0x198>
 800b748:	89a3      	ldrh	r3, [r4, #12]
 800b74a:	065b      	lsls	r3, r3, #25
 800b74c:	f53f af7e 	bmi.w	800b64c <_vfiprintf_r+0xf0>
 800b750:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b752:	e77d      	b.n	800b650 <_vfiprintf_r+0xf4>
 800b754:	ab03      	add	r3, sp, #12
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	4622      	mov	r2, r4
 800b75a:	4b0a      	ldr	r3, [pc, #40]	; (800b784 <_vfiprintf_r+0x228>)
 800b75c:	a904      	add	r1, sp, #16
 800b75e:	4630      	mov	r0, r6
 800b760:	f000 f888 	bl	800b874 <_printf_i>
 800b764:	e7ec      	b.n	800b740 <_vfiprintf_r+0x1e4>
 800b766:	bf00      	nop
 800b768:	0800c158 	.word	0x0800c158
 800b76c:	0800c198 	.word	0x0800c198
 800b770:	0800c178 	.word	0x0800c178
 800b774:	0800c138 	.word	0x0800c138
 800b778:	0800c19e 	.word	0x0800c19e
 800b77c:	0800c1a2 	.word	0x0800c1a2
 800b780:	00000000 	.word	0x00000000
 800b784:	0800b537 	.word	0x0800b537

0800b788 <_printf_common>:
 800b788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b78c:	4691      	mov	r9, r2
 800b78e:	461f      	mov	r7, r3
 800b790:	688a      	ldr	r2, [r1, #8]
 800b792:	690b      	ldr	r3, [r1, #16]
 800b794:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b798:	4293      	cmp	r3, r2
 800b79a:	bfb8      	it	lt
 800b79c:	4613      	movlt	r3, r2
 800b79e:	f8c9 3000 	str.w	r3, [r9]
 800b7a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b7a6:	4606      	mov	r6, r0
 800b7a8:	460c      	mov	r4, r1
 800b7aa:	b112      	cbz	r2, 800b7b2 <_printf_common+0x2a>
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	f8c9 3000 	str.w	r3, [r9]
 800b7b2:	6823      	ldr	r3, [r4, #0]
 800b7b4:	0699      	lsls	r1, r3, #26
 800b7b6:	bf42      	ittt	mi
 800b7b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b7bc:	3302      	addmi	r3, #2
 800b7be:	f8c9 3000 	strmi.w	r3, [r9]
 800b7c2:	6825      	ldr	r5, [r4, #0]
 800b7c4:	f015 0506 	ands.w	r5, r5, #6
 800b7c8:	d107      	bne.n	800b7da <_printf_common+0x52>
 800b7ca:	f104 0a19 	add.w	sl, r4, #25
 800b7ce:	68e3      	ldr	r3, [r4, #12]
 800b7d0:	f8d9 2000 	ldr.w	r2, [r9]
 800b7d4:	1a9b      	subs	r3, r3, r2
 800b7d6:	42ab      	cmp	r3, r5
 800b7d8:	dc28      	bgt.n	800b82c <_printf_common+0xa4>
 800b7da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b7de:	6822      	ldr	r2, [r4, #0]
 800b7e0:	3300      	adds	r3, #0
 800b7e2:	bf18      	it	ne
 800b7e4:	2301      	movne	r3, #1
 800b7e6:	0692      	lsls	r2, r2, #26
 800b7e8:	d42d      	bmi.n	800b846 <_printf_common+0xbe>
 800b7ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7ee:	4639      	mov	r1, r7
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	47c0      	blx	r8
 800b7f4:	3001      	adds	r0, #1
 800b7f6:	d020      	beq.n	800b83a <_printf_common+0xb2>
 800b7f8:	6823      	ldr	r3, [r4, #0]
 800b7fa:	68e5      	ldr	r5, [r4, #12]
 800b7fc:	f8d9 2000 	ldr.w	r2, [r9]
 800b800:	f003 0306 	and.w	r3, r3, #6
 800b804:	2b04      	cmp	r3, #4
 800b806:	bf08      	it	eq
 800b808:	1aad      	subeq	r5, r5, r2
 800b80a:	68a3      	ldr	r3, [r4, #8]
 800b80c:	6922      	ldr	r2, [r4, #16]
 800b80e:	bf0c      	ite	eq
 800b810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b814:	2500      	movne	r5, #0
 800b816:	4293      	cmp	r3, r2
 800b818:	bfc4      	itt	gt
 800b81a:	1a9b      	subgt	r3, r3, r2
 800b81c:	18ed      	addgt	r5, r5, r3
 800b81e:	f04f 0900 	mov.w	r9, #0
 800b822:	341a      	adds	r4, #26
 800b824:	454d      	cmp	r5, r9
 800b826:	d11a      	bne.n	800b85e <_printf_common+0xd6>
 800b828:	2000      	movs	r0, #0
 800b82a:	e008      	b.n	800b83e <_printf_common+0xb6>
 800b82c:	2301      	movs	r3, #1
 800b82e:	4652      	mov	r2, sl
 800b830:	4639      	mov	r1, r7
 800b832:	4630      	mov	r0, r6
 800b834:	47c0      	blx	r8
 800b836:	3001      	adds	r0, #1
 800b838:	d103      	bne.n	800b842 <_printf_common+0xba>
 800b83a:	f04f 30ff 	mov.w	r0, #4294967295
 800b83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b842:	3501      	adds	r5, #1
 800b844:	e7c3      	b.n	800b7ce <_printf_common+0x46>
 800b846:	18e1      	adds	r1, r4, r3
 800b848:	1c5a      	adds	r2, r3, #1
 800b84a:	2030      	movs	r0, #48	; 0x30
 800b84c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b850:	4422      	add	r2, r4
 800b852:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b856:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b85a:	3302      	adds	r3, #2
 800b85c:	e7c5      	b.n	800b7ea <_printf_common+0x62>
 800b85e:	2301      	movs	r3, #1
 800b860:	4622      	mov	r2, r4
 800b862:	4639      	mov	r1, r7
 800b864:	4630      	mov	r0, r6
 800b866:	47c0      	blx	r8
 800b868:	3001      	adds	r0, #1
 800b86a:	d0e6      	beq.n	800b83a <_printf_common+0xb2>
 800b86c:	f109 0901 	add.w	r9, r9, #1
 800b870:	e7d8      	b.n	800b824 <_printf_common+0x9c>
	...

0800b874 <_printf_i>:
 800b874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b878:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b87c:	460c      	mov	r4, r1
 800b87e:	7e09      	ldrb	r1, [r1, #24]
 800b880:	b085      	sub	sp, #20
 800b882:	296e      	cmp	r1, #110	; 0x6e
 800b884:	4617      	mov	r7, r2
 800b886:	4606      	mov	r6, r0
 800b888:	4698      	mov	r8, r3
 800b88a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b88c:	f000 80b3 	beq.w	800b9f6 <_printf_i+0x182>
 800b890:	d822      	bhi.n	800b8d8 <_printf_i+0x64>
 800b892:	2963      	cmp	r1, #99	; 0x63
 800b894:	d036      	beq.n	800b904 <_printf_i+0x90>
 800b896:	d80a      	bhi.n	800b8ae <_printf_i+0x3a>
 800b898:	2900      	cmp	r1, #0
 800b89a:	f000 80b9 	beq.w	800ba10 <_printf_i+0x19c>
 800b89e:	2958      	cmp	r1, #88	; 0x58
 800b8a0:	f000 8083 	beq.w	800b9aa <_printf_i+0x136>
 800b8a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b8ac:	e032      	b.n	800b914 <_printf_i+0xa0>
 800b8ae:	2964      	cmp	r1, #100	; 0x64
 800b8b0:	d001      	beq.n	800b8b6 <_printf_i+0x42>
 800b8b2:	2969      	cmp	r1, #105	; 0x69
 800b8b4:	d1f6      	bne.n	800b8a4 <_printf_i+0x30>
 800b8b6:	6820      	ldr	r0, [r4, #0]
 800b8b8:	6813      	ldr	r3, [r2, #0]
 800b8ba:	0605      	lsls	r5, r0, #24
 800b8bc:	f103 0104 	add.w	r1, r3, #4
 800b8c0:	d52a      	bpl.n	800b918 <_printf_i+0xa4>
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	6011      	str	r1, [r2, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	da03      	bge.n	800b8d2 <_printf_i+0x5e>
 800b8ca:	222d      	movs	r2, #45	; 0x2d
 800b8cc:	425b      	negs	r3, r3
 800b8ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b8d2:	486f      	ldr	r0, [pc, #444]	; (800ba90 <_printf_i+0x21c>)
 800b8d4:	220a      	movs	r2, #10
 800b8d6:	e039      	b.n	800b94c <_printf_i+0xd8>
 800b8d8:	2973      	cmp	r1, #115	; 0x73
 800b8da:	f000 809d 	beq.w	800ba18 <_printf_i+0x1a4>
 800b8de:	d808      	bhi.n	800b8f2 <_printf_i+0x7e>
 800b8e0:	296f      	cmp	r1, #111	; 0x6f
 800b8e2:	d020      	beq.n	800b926 <_printf_i+0xb2>
 800b8e4:	2970      	cmp	r1, #112	; 0x70
 800b8e6:	d1dd      	bne.n	800b8a4 <_printf_i+0x30>
 800b8e8:	6823      	ldr	r3, [r4, #0]
 800b8ea:	f043 0320 	orr.w	r3, r3, #32
 800b8ee:	6023      	str	r3, [r4, #0]
 800b8f0:	e003      	b.n	800b8fa <_printf_i+0x86>
 800b8f2:	2975      	cmp	r1, #117	; 0x75
 800b8f4:	d017      	beq.n	800b926 <_printf_i+0xb2>
 800b8f6:	2978      	cmp	r1, #120	; 0x78
 800b8f8:	d1d4      	bne.n	800b8a4 <_printf_i+0x30>
 800b8fa:	2378      	movs	r3, #120	; 0x78
 800b8fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b900:	4864      	ldr	r0, [pc, #400]	; (800ba94 <_printf_i+0x220>)
 800b902:	e055      	b.n	800b9b0 <_printf_i+0x13c>
 800b904:	6813      	ldr	r3, [r2, #0]
 800b906:	1d19      	adds	r1, r3, #4
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	6011      	str	r1, [r2, #0]
 800b90c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b910:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b914:	2301      	movs	r3, #1
 800b916:	e08c      	b.n	800ba32 <_printf_i+0x1be>
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	6011      	str	r1, [r2, #0]
 800b91c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b920:	bf18      	it	ne
 800b922:	b21b      	sxthne	r3, r3
 800b924:	e7cf      	b.n	800b8c6 <_printf_i+0x52>
 800b926:	6813      	ldr	r3, [r2, #0]
 800b928:	6825      	ldr	r5, [r4, #0]
 800b92a:	1d18      	adds	r0, r3, #4
 800b92c:	6010      	str	r0, [r2, #0]
 800b92e:	0628      	lsls	r0, r5, #24
 800b930:	d501      	bpl.n	800b936 <_printf_i+0xc2>
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	e002      	b.n	800b93c <_printf_i+0xc8>
 800b936:	0668      	lsls	r0, r5, #25
 800b938:	d5fb      	bpl.n	800b932 <_printf_i+0xbe>
 800b93a:	881b      	ldrh	r3, [r3, #0]
 800b93c:	4854      	ldr	r0, [pc, #336]	; (800ba90 <_printf_i+0x21c>)
 800b93e:	296f      	cmp	r1, #111	; 0x6f
 800b940:	bf14      	ite	ne
 800b942:	220a      	movne	r2, #10
 800b944:	2208      	moveq	r2, #8
 800b946:	2100      	movs	r1, #0
 800b948:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b94c:	6865      	ldr	r5, [r4, #4]
 800b94e:	60a5      	str	r5, [r4, #8]
 800b950:	2d00      	cmp	r5, #0
 800b952:	f2c0 8095 	blt.w	800ba80 <_printf_i+0x20c>
 800b956:	6821      	ldr	r1, [r4, #0]
 800b958:	f021 0104 	bic.w	r1, r1, #4
 800b95c:	6021      	str	r1, [r4, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d13d      	bne.n	800b9de <_printf_i+0x16a>
 800b962:	2d00      	cmp	r5, #0
 800b964:	f040 808e 	bne.w	800ba84 <_printf_i+0x210>
 800b968:	4665      	mov	r5, ip
 800b96a:	2a08      	cmp	r2, #8
 800b96c:	d10b      	bne.n	800b986 <_printf_i+0x112>
 800b96e:	6823      	ldr	r3, [r4, #0]
 800b970:	07db      	lsls	r3, r3, #31
 800b972:	d508      	bpl.n	800b986 <_printf_i+0x112>
 800b974:	6923      	ldr	r3, [r4, #16]
 800b976:	6862      	ldr	r2, [r4, #4]
 800b978:	429a      	cmp	r2, r3
 800b97a:	bfde      	ittt	le
 800b97c:	2330      	movle	r3, #48	; 0x30
 800b97e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b982:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b986:	ebac 0305 	sub.w	r3, ip, r5
 800b98a:	6123      	str	r3, [r4, #16]
 800b98c:	f8cd 8000 	str.w	r8, [sp]
 800b990:	463b      	mov	r3, r7
 800b992:	aa03      	add	r2, sp, #12
 800b994:	4621      	mov	r1, r4
 800b996:	4630      	mov	r0, r6
 800b998:	f7ff fef6 	bl	800b788 <_printf_common>
 800b99c:	3001      	adds	r0, #1
 800b99e:	d14d      	bne.n	800ba3c <_printf_i+0x1c8>
 800b9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a4:	b005      	add	sp, #20
 800b9a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9aa:	4839      	ldr	r0, [pc, #228]	; (800ba90 <_printf_i+0x21c>)
 800b9ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b9b0:	6813      	ldr	r3, [r2, #0]
 800b9b2:	6821      	ldr	r1, [r4, #0]
 800b9b4:	1d1d      	adds	r5, r3, #4
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	6015      	str	r5, [r2, #0]
 800b9ba:	060a      	lsls	r2, r1, #24
 800b9bc:	d50b      	bpl.n	800b9d6 <_printf_i+0x162>
 800b9be:	07ca      	lsls	r2, r1, #31
 800b9c0:	bf44      	itt	mi
 800b9c2:	f041 0120 	orrmi.w	r1, r1, #32
 800b9c6:	6021      	strmi	r1, [r4, #0]
 800b9c8:	b91b      	cbnz	r3, 800b9d2 <_printf_i+0x15e>
 800b9ca:	6822      	ldr	r2, [r4, #0]
 800b9cc:	f022 0220 	bic.w	r2, r2, #32
 800b9d0:	6022      	str	r2, [r4, #0]
 800b9d2:	2210      	movs	r2, #16
 800b9d4:	e7b7      	b.n	800b946 <_printf_i+0xd2>
 800b9d6:	064d      	lsls	r5, r1, #25
 800b9d8:	bf48      	it	mi
 800b9da:	b29b      	uxthmi	r3, r3
 800b9dc:	e7ef      	b.n	800b9be <_printf_i+0x14a>
 800b9de:	4665      	mov	r5, ip
 800b9e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b9e4:	fb02 3311 	mls	r3, r2, r1, r3
 800b9e8:	5cc3      	ldrb	r3, [r0, r3]
 800b9ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b9ee:	460b      	mov	r3, r1
 800b9f0:	2900      	cmp	r1, #0
 800b9f2:	d1f5      	bne.n	800b9e0 <_printf_i+0x16c>
 800b9f4:	e7b9      	b.n	800b96a <_printf_i+0xf6>
 800b9f6:	6813      	ldr	r3, [r2, #0]
 800b9f8:	6825      	ldr	r5, [r4, #0]
 800b9fa:	6961      	ldr	r1, [r4, #20]
 800b9fc:	1d18      	adds	r0, r3, #4
 800b9fe:	6010      	str	r0, [r2, #0]
 800ba00:	0628      	lsls	r0, r5, #24
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	d501      	bpl.n	800ba0a <_printf_i+0x196>
 800ba06:	6019      	str	r1, [r3, #0]
 800ba08:	e002      	b.n	800ba10 <_printf_i+0x19c>
 800ba0a:	066a      	lsls	r2, r5, #25
 800ba0c:	d5fb      	bpl.n	800ba06 <_printf_i+0x192>
 800ba0e:	8019      	strh	r1, [r3, #0]
 800ba10:	2300      	movs	r3, #0
 800ba12:	6123      	str	r3, [r4, #16]
 800ba14:	4665      	mov	r5, ip
 800ba16:	e7b9      	b.n	800b98c <_printf_i+0x118>
 800ba18:	6813      	ldr	r3, [r2, #0]
 800ba1a:	1d19      	adds	r1, r3, #4
 800ba1c:	6011      	str	r1, [r2, #0]
 800ba1e:	681d      	ldr	r5, [r3, #0]
 800ba20:	6862      	ldr	r2, [r4, #4]
 800ba22:	2100      	movs	r1, #0
 800ba24:	4628      	mov	r0, r5
 800ba26:	f7f4 fbfb 	bl	8000220 <memchr>
 800ba2a:	b108      	cbz	r0, 800ba30 <_printf_i+0x1bc>
 800ba2c:	1b40      	subs	r0, r0, r5
 800ba2e:	6060      	str	r0, [r4, #4]
 800ba30:	6863      	ldr	r3, [r4, #4]
 800ba32:	6123      	str	r3, [r4, #16]
 800ba34:	2300      	movs	r3, #0
 800ba36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba3a:	e7a7      	b.n	800b98c <_printf_i+0x118>
 800ba3c:	6923      	ldr	r3, [r4, #16]
 800ba3e:	462a      	mov	r2, r5
 800ba40:	4639      	mov	r1, r7
 800ba42:	4630      	mov	r0, r6
 800ba44:	47c0      	blx	r8
 800ba46:	3001      	adds	r0, #1
 800ba48:	d0aa      	beq.n	800b9a0 <_printf_i+0x12c>
 800ba4a:	6823      	ldr	r3, [r4, #0]
 800ba4c:	079b      	lsls	r3, r3, #30
 800ba4e:	d413      	bmi.n	800ba78 <_printf_i+0x204>
 800ba50:	68e0      	ldr	r0, [r4, #12]
 800ba52:	9b03      	ldr	r3, [sp, #12]
 800ba54:	4298      	cmp	r0, r3
 800ba56:	bfb8      	it	lt
 800ba58:	4618      	movlt	r0, r3
 800ba5a:	e7a3      	b.n	800b9a4 <_printf_i+0x130>
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	464a      	mov	r2, r9
 800ba60:	4639      	mov	r1, r7
 800ba62:	4630      	mov	r0, r6
 800ba64:	47c0      	blx	r8
 800ba66:	3001      	adds	r0, #1
 800ba68:	d09a      	beq.n	800b9a0 <_printf_i+0x12c>
 800ba6a:	3501      	adds	r5, #1
 800ba6c:	68e3      	ldr	r3, [r4, #12]
 800ba6e:	9a03      	ldr	r2, [sp, #12]
 800ba70:	1a9b      	subs	r3, r3, r2
 800ba72:	42ab      	cmp	r3, r5
 800ba74:	dcf2      	bgt.n	800ba5c <_printf_i+0x1e8>
 800ba76:	e7eb      	b.n	800ba50 <_printf_i+0x1dc>
 800ba78:	2500      	movs	r5, #0
 800ba7a:	f104 0919 	add.w	r9, r4, #25
 800ba7e:	e7f5      	b.n	800ba6c <_printf_i+0x1f8>
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1ac      	bne.n	800b9de <_printf_i+0x16a>
 800ba84:	7803      	ldrb	r3, [r0, #0]
 800ba86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba8a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba8e:	e76c      	b.n	800b96a <_printf_i+0xf6>
 800ba90:	0800c1a9 	.word	0x0800c1a9
 800ba94:	0800c1ba 	.word	0x0800c1ba

0800ba98 <__sread>:
 800ba98:	b510      	push	{r4, lr}
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa0:	f000 f894 	bl	800bbcc <_read_r>
 800baa4:	2800      	cmp	r0, #0
 800baa6:	bfab      	itete	ge
 800baa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800baaa:	89a3      	ldrhlt	r3, [r4, #12]
 800baac:	181b      	addge	r3, r3, r0
 800baae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bab2:	bfac      	ite	ge
 800bab4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bab6:	81a3      	strhlt	r3, [r4, #12]
 800bab8:	bd10      	pop	{r4, pc}

0800baba <__swrite>:
 800baba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800babe:	461f      	mov	r7, r3
 800bac0:	898b      	ldrh	r3, [r1, #12]
 800bac2:	05db      	lsls	r3, r3, #23
 800bac4:	4605      	mov	r5, r0
 800bac6:	460c      	mov	r4, r1
 800bac8:	4616      	mov	r6, r2
 800baca:	d505      	bpl.n	800bad8 <__swrite+0x1e>
 800bacc:	2302      	movs	r3, #2
 800bace:	2200      	movs	r2, #0
 800bad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bad4:	f000 f868 	bl	800bba8 <_lseek_r>
 800bad8:	89a3      	ldrh	r3, [r4, #12]
 800bada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bae2:	81a3      	strh	r3, [r4, #12]
 800bae4:	4632      	mov	r2, r6
 800bae6:	463b      	mov	r3, r7
 800bae8:	4628      	mov	r0, r5
 800baea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baee:	f000 b817 	b.w	800bb20 <_write_r>

0800baf2 <__sseek>:
 800baf2:	b510      	push	{r4, lr}
 800baf4:	460c      	mov	r4, r1
 800baf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bafa:	f000 f855 	bl	800bba8 <_lseek_r>
 800bafe:	1c43      	adds	r3, r0, #1
 800bb00:	89a3      	ldrh	r3, [r4, #12]
 800bb02:	bf15      	itete	ne
 800bb04:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb0e:	81a3      	strheq	r3, [r4, #12]
 800bb10:	bf18      	it	ne
 800bb12:	81a3      	strhne	r3, [r4, #12]
 800bb14:	bd10      	pop	{r4, pc}

0800bb16 <__sclose>:
 800bb16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb1a:	f000 b813 	b.w	800bb44 <_close_r>
	...

0800bb20 <_write_r>:
 800bb20:	b538      	push	{r3, r4, r5, lr}
 800bb22:	4c07      	ldr	r4, [pc, #28]	; (800bb40 <_write_r+0x20>)
 800bb24:	4605      	mov	r5, r0
 800bb26:	4608      	mov	r0, r1
 800bb28:	4611      	mov	r1, r2
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	6022      	str	r2, [r4, #0]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	f7f6 f9c9 	bl	8001ec6 <_write>
 800bb34:	1c43      	adds	r3, r0, #1
 800bb36:	d102      	bne.n	800bb3e <_write_r+0x1e>
 800bb38:	6823      	ldr	r3, [r4, #0]
 800bb3a:	b103      	cbz	r3, 800bb3e <_write_r+0x1e>
 800bb3c:	602b      	str	r3, [r5, #0]
 800bb3e:	bd38      	pop	{r3, r4, r5, pc}
 800bb40:	2000a7cc 	.word	0x2000a7cc

0800bb44 <_close_r>:
 800bb44:	b538      	push	{r3, r4, r5, lr}
 800bb46:	4c06      	ldr	r4, [pc, #24]	; (800bb60 <_close_r+0x1c>)
 800bb48:	2300      	movs	r3, #0
 800bb4a:	4605      	mov	r5, r0
 800bb4c:	4608      	mov	r0, r1
 800bb4e:	6023      	str	r3, [r4, #0]
 800bb50:	f7f6 f9d5 	bl	8001efe <_close>
 800bb54:	1c43      	adds	r3, r0, #1
 800bb56:	d102      	bne.n	800bb5e <_close_r+0x1a>
 800bb58:	6823      	ldr	r3, [r4, #0]
 800bb5a:	b103      	cbz	r3, 800bb5e <_close_r+0x1a>
 800bb5c:	602b      	str	r3, [r5, #0]
 800bb5e:	bd38      	pop	{r3, r4, r5, pc}
 800bb60:	2000a7cc 	.word	0x2000a7cc

0800bb64 <_fstat_r>:
 800bb64:	b538      	push	{r3, r4, r5, lr}
 800bb66:	4c07      	ldr	r4, [pc, #28]	; (800bb84 <_fstat_r+0x20>)
 800bb68:	2300      	movs	r3, #0
 800bb6a:	4605      	mov	r5, r0
 800bb6c:	4608      	mov	r0, r1
 800bb6e:	4611      	mov	r1, r2
 800bb70:	6023      	str	r3, [r4, #0]
 800bb72:	f7f6 f9d0 	bl	8001f16 <_fstat>
 800bb76:	1c43      	adds	r3, r0, #1
 800bb78:	d102      	bne.n	800bb80 <_fstat_r+0x1c>
 800bb7a:	6823      	ldr	r3, [r4, #0]
 800bb7c:	b103      	cbz	r3, 800bb80 <_fstat_r+0x1c>
 800bb7e:	602b      	str	r3, [r5, #0]
 800bb80:	bd38      	pop	{r3, r4, r5, pc}
 800bb82:	bf00      	nop
 800bb84:	2000a7cc 	.word	0x2000a7cc

0800bb88 <_isatty_r>:
 800bb88:	b538      	push	{r3, r4, r5, lr}
 800bb8a:	4c06      	ldr	r4, [pc, #24]	; (800bba4 <_isatty_r+0x1c>)
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	4605      	mov	r5, r0
 800bb90:	4608      	mov	r0, r1
 800bb92:	6023      	str	r3, [r4, #0]
 800bb94:	f7f6 f9cf 	bl	8001f36 <_isatty>
 800bb98:	1c43      	adds	r3, r0, #1
 800bb9a:	d102      	bne.n	800bba2 <_isatty_r+0x1a>
 800bb9c:	6823      	ldr	r3, [r4, #0]
 800bb9e:	b103      	cbz	r3, 800bba2 <_isatty_r+0x1a>
 800bba0:	602b      	str	r3, [r5, #0]
 800bba2:	bd38      	pop	{r3, r4, r5, pc}
 800bba4:	2000a7cc 	.word	0x2000a7cc

0800bba8 <_lseek_r>:
 800bba8:	b538      	push	{r3, r4, r5, lr}
 800bbaa:	4c07      	ldr	r4, [pc, #28]	; (800bbc8 <_lseek_r+0x20>)
 800bbac:	4605      	mov	r5, r0
 800bbae:	4608      	mov	r0, r1
 800bbb0:	4611      	mov	r1, r2
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	6022      	str	r2, [r4, #0]
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	f7f6 f9c8 	bl	8001f4c <_lseek>
 800bbbc:	1c43      	adds	r3, r0, #1
 800bbbe:	d102      	bne.n	800bbc6 <_lseek_r+0x1e>
 800bbc0:	6823      	ldr	r3, [r4, #0]
 800bbc2:	b103      	cbz	r3, 800bbc6 <_lseek_r+0x1e>
 800bbc4:	602b      	str	r3, [r5, #0]
 800bbc6:	bd38      	pop	{r3, r4, r5, pc}
 800bbc8:	2000a7cc 	.word	0x2000a7cc

0800bbcc <_read_r>:
 800bbcc:	b538      	push	{r3, r4, r5, lr}
 800bbce:	4c07      	ldr	r4, [pc, #28]	; (800bbec <_read_r+0x20>)
 800bbd0:	4605      	mov	r5, r0
 800bbd2:	4608      	mov	r0, r1
 800bbd4:	4611      	mov	r1, r2
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	6022      	str	r2, [r4, #0]
 800bbda:	461a      	mov	r2, r3
 800bbdc:	f7f6 f956 	bl	8001e8c <_read>
 800bbe0:	1c43      	adds	r3, r0, #1
 800bbe2:	d102      	bne.n	800bbea <_read_r+0x1e>
 800bbe4:	6823      	ldr	r3, [r4, #0]
 800bbe6:	b103      	cbz	r3, 800bbea <_read_r+0x1e>
 800bbe8:	602b      	str	r3, [r5, #0]
 800bbea:	bd38      	pop	{r3, r4, r5, pc}
 800bbec:	2000a7cc 	.word	0x2000a7cc

0800bbf0 <_init>:
 800bbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbf2:	bf00      	nop
 800bbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbf6:	bc08      	pop	{r3}
 800bbf8:	469e      	mov	lr, r3
 800bbfa:	4770      	bx	lr

0800bbfc <_fini>:
 800bbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbfe:	bf00      	nop
 800bc00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc02:	bc08      	pop	{r3}
 800bc04:	469e      	mov	lr, r3
 800bc06:	4770      	bx	lr
