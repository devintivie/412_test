
413_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bea0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800c080  0800c080  0001c080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c638  0800c638  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800c638  0800c638  0001c638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c640  0800c640  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c640  0800c640  0001c640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c644  0800c644  0001c644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800c648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c900  20000078  0800c6c0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c978  0800c6c0  0002c978  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021ca9  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000043eb  00000000  00000000  00041d51  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ac8  00000000  00000000  00046140  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018a0  00000000  00000000  00047c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028b62  00000000  00000000  000494a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c728  00000000  00000000  0007200a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e2a97  00000000  00000000  0008e732  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001711c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007788  00000000  00000000  00171244  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c068 	.word	0x0800c068

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	0800c068 	.word	0x0800c068

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <write_PCM16_stereo_header>:

#include "fatfs.h"

/*Return 0 on success and -1 on failure*/
int write_PCM16_stereo_header(  FILE*   file_p, int32_t SampleRate, int32_t FrameCount)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
    int32_t subchunk2_size;
    int32_t chunk_size;

    size_t write_count;

    subchunk2_size  = FrameCount * NUM_CHANNELS * BITS_PER_SAMPLE/8;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	015b      	lsls	r3, r3, #5
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	da00      	bge.n	80005d6 <write_PCM16_stereo_header+0x16>
 80005d4:	3307      	adds	r3, #7
 80005d6:	10db      	asrs	r3, r3, #3
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    chunk_size      = 4 + (8 + SUBCHUNK1SIZE) + (8 + subchunk2_size);
 80005da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005dc:	3324      	adds	r3, #36	; 0x24
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48

    wav_header.ChunkID[0] = 'R';
 80005e0:	2352      	movs	r3, #82	; 0x52
 80005e2:	763b      	strb	r3, [r7, #24]
    wav_header.ChunkID[1] = 'I';
 80005e4:	2349      	movs	r3, #73	; 0x49
 80005e6:	767b      	strb	r3, [r7, #25]
    wav_header.ChunkID[2] = 'F';
 80005e8:	2346      	movs	r3, #70	; 0x46
 80005ea:	76bb      	strb	r3, [r7, #26]
    wav_header.ChunkID[3] = 'F';
 80005ec:	2346      	movs	r3, #70	; 0x46
 80005ee:	76fb      	strb	r3, [r7, #27]

    wav_header.ChunkSize = chunk_size;
 80005f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005f2:	61fb      	str	r3, [r7, #28]

    wav_header.Format[0] = 'W';
 80005f4:	2357      	movs	r3, #87	; 0x57
 80005f6:	f887 3020 	strb.w	r3, [r7, #32]
    wav_header.Format[1] = 'A';
 80005fa:	2341      	movs	r3, #65	; 0x41
 80005fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    wav_header.Format[2] = 'V';
 8000600:	2356      	movs	r3, #86	; 0x56
 8000602:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    wav_header.Format[3] = 'E';
 8000606:	2345      	movs	r3, #69	; 0x45
 8000608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    wav_header.Subchunk1ID[0] = 'f';
 800060c:	2366      	movs	r3, #102	; 0x66
 800060e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    wav_header.Subchunk1ID[1] = 'm';
 8000612:	236d      	movs	r3, #109	; 0x6d
 8000614:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    wav_header.Subchunk1ID[2] = 't';
 8000618:	2374      	movs	r3, #116	; 0x74
 800061a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    wav_header.Subchunk1ID[3] = ' ';
 800061e:	2320      	movs	r3, #32
 8000620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    wav_header.Subchunk1Size = SUBCHUNK1SIZE;
 8000624:	2310      	movs	r3, #16
 8000626:	62bb      	str	r3, [r7, #40]	; 0x28
    wav_header.AudioFormat = AUDIO_FORMAT;
 8000628:	2301      	movs	r3, #1
 800062a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    wav_header.NumChannels = NUM_CHANNELS;
 800062c:	2302      	movs	r3, #2
 800062e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    wav_header.SampleRate = SampleRate;
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
    wav_header.ByteRate = BYTE_RATE;
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <write_PCM16_stereo_header+0xcc>)
 8000636:	637b      	str	r3, [r7, #52]	; 0x34
    wav_header.BlockAlign = BLOCK_ALIGN;
 8000638:	2304      	movs	r3, #4
 800063a:	873b      	strh	r3, [r7, #56]	; 0x38
    wav_header.BitsPerSample = BITS_PER_SAMPLE;
 800063c:	2310      	movs	r3, #16
 800063e:	877b      	strh	r3, [r7, #58]	; 0x3a

    wav_header.Subchunk2ID[0] = 'd';
 8000640:	2364      	movs	r3, #100	; 0x64
 8000642:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    wav_header.Subchunk2ID[1] = 'a';
 8000646:	2361      	movs	r3, #97	; 0x61
 8000648:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    wav_header.Subchunk2ID[2] = 't';
 800064c:	2374      	movs	r3, #116	; 0x74
 800064e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    wav_header.Subchunk2ID[3] = 'a';
 8000652:	2361      	movs	r3, #97	; 0x61
 8000654:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    wav_header.Subchunk2Size = subchunk2_size;
 8000658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800065a:	643b      	str	r3, [r7, #64]	; 0x40

    UINT byteCount;
	ret = f_write(file_p, &wav_header, sizeof(wavfile_header_t), &byteCount);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	f107 0118 	add.w	r1, r7, #24
 8000664:	222c      	movs	r2, #44	; 0x2c
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	f00a faec 	bl	800ac44 <f_write>
 800066c:	4603      	mov	r3, r0
 800066e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ret = f_close(file_p);
 8000672:	68f8      	ldr	r0, [r7, #12]
 8000674:	f00a fcf8 	bl	800b068 <f_close>
 8000678:	4603      	mov	r3, r0
 800067a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    return ret;
 800067e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000682:	4618      	mov	r0, r3
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	0002ee00 	.word	0x0002ee00

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b092      	sub	sp, #72	; 0x48
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef ret;
	uint8_t myWrite[30] = "TEST STRING";
 8000696:	4a60      	ldr	r2, [pc, #384]	; (8000818 <main+0x188>)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	ca07      	ldmia	r2, {r0, r1, r2}
 800069e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80006a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	821a      	strh	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b2:	f001 ff01 	bl	80024b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b6:	f000 f8d3 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ba:	f000 fc13 	bl	8000ee4 <MX_GPIO_Init>
  MX_DMA_Init();
 80006be:	f000 fbe1 	bl	8000e84 <MX_DMA_Init>
  MX_ADC1_Init();
 80006c2:	f000 f967 	bl	8000994 <MX_ADC1_Init>
  MX_DAC_Init();
 80006c6:	f000 f9b7 	bl	8000a38 <MX_DAC_Init>
  MX_DFSDM1_Init();
 80006ca:	f000 f9df 	bl	8000a8c <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 80006ce:	f000 fa43 	bl	8000b58 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 80006d2:	f000 fad3 	bl	8000c7c <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 80006d6:	f000 fdc1 	bl	800125c <MX_FSMC_Init>
  MX_I2S2_Init();
 80006da:	f000 fb05 	bl	8000ce8 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 80006de:	f000 fb31 	bl	8000d44 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 80006e2:	f000 fb5b 	bl	8000d9c <MX_SDIO_SD_Init>
  MX_UART10_Init();
 80006e6:	f000 fb79 	bl	8000ddc <MX_UART10_Init>
  MX_USART6_UART_Init();
 80006ea:	f000 fba1 	bl	8000e30 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80006ee:	f007 fc67 	bl	8007fc0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2120      	movs	r1, #32
 80006f6:	4849      	ldr	r0, [pc, #292]	; (800081c <main+0x18c>)
 80006f8:	f003 fcee 	bl	80040d8 <HAL_GPIO_WritePin>


	printf("path: '%s'\r\n", SDPath);
 80006fc:	4948      	ldr	r1, [pc, #288]	; (8000820 <main+0x190>)
 80006fe:	4849      	ldr	r0, [pc, #292]	; (8000824 <main+0x194>)
 8000700:	f00a fe12 	bl	800b328 <iprintf>
//	double duration = 10; /*seconds*/


	fRet = f_mount(&myFAT, SDPath, 1);
 8000704:	2201      	movs	r2, #1
 8000706:	4946      	ldr	r1, [pc, #280]	; (8000820 <main+0x190>)
 8000708:	4847      	ldr	r0, [pc, #284]	; (8000828 <main+0x198>)
 800070a:	f00a f889 	bl	800a820 <f_mount>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	4b46      	ldr	r3, [pc, #280]	; (800082c <main+0x19c>)
 8000714:	701a      	strb	r2, [r3, #0]


	f_open(&myFile, fname, FA_WRITE | FA_CREATE_ALWAYS);
 8000716:	4b46      	ldr	r3, [pc, #280]	; (8000830 <main+0x1a0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	220a      	movs	r2, #10
 800071c:	4619      	mov	r1, r3
 800071e:	4845      	ldr	r0, [pc, #276]	; (8000834 <main+0x1a4>)
 8000720:	f00a f8c4 	bl	800a8ac <f_open>

	write_PCM16_stereo_header(&myFile, SAMPLE_RATE, FrameCount * AUDIO_REC);
 8000724:	4b44      	ldr	r3, [pc, #272]	; (8000838 <main+0x1a8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	02db      	lsls	r3, r3, #11
 800072a:	461a      	mov	r2, r3
 800072c:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8000730:	4840      	ldr	r0, [pc, #256]	; (8000834 <main+0x1a4>)
 8000732:	f7ff ff45 	bl	80005c0 <write_PCM16_stereo_header>


  ret = HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, Rec1Buf, AUDIO_REC);
 8000736:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800073a:	4940      	ldr	r1, [pc, #256]	; (800083c <main+0x1ac>)
 800073c:	4840      	ldr	r0, [pc, #256]	; (8000840 <main+0x1b0>)
 800073e:	f002 fd63 	bl	8003208 <HAL_DFSDM_FilterRegularStart_DMA>
 8000742:	4603      	mov	r3, r0
 8000744:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if(ret != HAL_OK)
 8000748:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800074c:	2b00      	cmp	r3, #0
 800074e:	d002      	beq.n	8000756 <main+0xc6>
  {
	  printf("DMA on filter not started");
 8000750:	483c      	ldr	r0, [pc, #240]	; (8000844 <main+0x1b4>)
 8000752:	f00a fde9 	bl	800b328 <iprintf>
//  ret = HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm2_filter0, Rec2Buf, AUDIO_REC);
//   if(ret != HAL_OK)
//   {
// 	  printf("DMA on filter not started");
//   }
   HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2120      	movs	r1, #32
 800075a:	4830      	ldr	r0, [pc, #192]	; (800081c <main+0x18c>)
 800075c:	f003 fcbc 	bl	80040d8 <HAL_GPIO_WritePin>
//	  int data = 1;
//	  HAL_DFSDM_Channel_StateTypeDef status = HAL_DFSDM_ChannelGetState(&hdfsdm1_channel1);
//	  HAL_StatusTypeDef clk_pres = HAL_DFSDM_ChannelPollForCkab(&hdfsdm1_channel1, 1000);
//	  data = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0, 1);
//	  printf("data = %ld\r\n", data);
	  if(DmaRecHalfBuffCplt == 1)
 8000760:	4b39      	ldr	r3, [pc, #228]	; (8000848 <main+0x1b8>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d114      	bne.n	8000792 <main+0x102>
	  {
		  for(int i = 0; i < AUDIO_REC/2; i++)
 8000768:	2300      	movs	r3, #0
 800076a:	647b      	str	r3, [r7, #68]	; 0x44
 800076c:	e00a      	b.n	8000784 <main+0xf4>
		  {
//			  tmpBuf[i] = Rec1Buf[i];
			  Value1Buf[i] = Rec1Buf[i];//(Rec1Buf[i] >> 8) & 0xffff;
 800076e:	4a33      	ldr	r2, [pc, #204]	; (800083c <main+0x1ac>)
 8000770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000772:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000776:	4935      	ldr	r1, [pc, #212]	; (800084c <main+0x1bc>)
 8000778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800077a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for(int i = 0; i < AUDIO_REC/2; i++)
 800077e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000780:	3301      	adds	r3, #1
 8000782:	647b      	str	r3, [r7, #68]	; 0x44
 8000784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800078a:	dbf0      	blt.n	800076e <main+0xde>
		  }
		  DmaRecHalfBuffCplt = 0;
 800078c:	4b2e      	ldr	r3, [pc, #184]	; (8000848 <main+0x1b8>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
	  }
	  if(DmaRecBuffCplt == 1)
 8000792:	4b2f      	ldr	r3, [pc, #188]	; (8000850 <main+0x1c0>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d1e2      	bne.n	8000760 <main+0xd0>
	  {
		  printf("ooo wee\r\n");
 800079a:	482e      	ldr	r0, [pc, #184]	; (8000854 <main+0x1c4>)
 800079c:	f00a fe38 	bl	800b410 <puts>
		  for(int i = AUDIO_REC/2; i < AUDIO_REC; i++)
 80007a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a4:	643b      	str	r3, [r7, #64]	; 0x40
 80007a6:	e00a      	b.n	80007be <main+0x12e>
		  {
//			  tmpBuf[i] = Rec1Buf[i];
			  Value1Buf[i] = Rec1Buf[i];//(Rec1Buf[i] >> 8) & 0xffff;
 80007a8:	4a24      	ldr	r2, [pc, #144]	; (800083c <main+0x1ac>)
 80007aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007b0:	4926      	ldr	r1, [pc, #152]	; (800084c <main+0x1bc>)
 80007b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for(int i = AUDIO_REC/2; i < AUDIO_REC; i++)
 80007b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007ba:	3301      	adds	r3, #1
 80007bc:	643b      	str	r3, [r7, #64]	; 0x40
 80007be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007c4:	dbf0      	blt.n	80007a8 <main+0x118>
		  }
		  DmaRecBuffCplt = 0;
 80007c6:	4b22      	ldr	r3, [pc, #136]	; (8000850 <main+0x1c0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]

		  if(pass++ <= FrameCount)
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <main+0x1c8>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	1c5a      	adds	r2, r3, #1
 80007d2:	4921      	ldr	r1, [pc, #132]	; (8000858 <main+0x1c8>)
 80007d4:	600a      	str	r2, [r1, #0]
 80007d6:	4a18      	ldr	r2, [pc, #96]	; (8000838 <main+0x1a8>)
 80007d8:	6812      	ldr	r2, [r2, #0]
 80007da:	4293      	cmp	r3, r2
 80007dc:	dc10      	bgt.n	8000800 <main+0x170>
		  {
			  f_open(&myFile, fname, FA_WRITE | FA_OPEN_APPEND);// | FA_CREATE_ALWAYS);
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <main+0x1a0>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2232      	movs	r2, #50	; 0x32
 80007e4:	4619      	mov	r1, r3
 80007e6:	4813      	ldr	r0, [pc, #76]	; (8000834 <main+0x1a4>)
 80007e8:	f00a f860 	bl	800a8ac <f_open>
				f_write(&myFile, Value1Buf, AUDIO_REC, &byteCount);
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <main+0x1cc>)
 80007ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007f2:	4916      	ldr	r1, [pc, #88]	; (800084c <main+0x1bc>)
 80007f4:	480f      	ldr	r0, [pc, #60]	; (8000834 <main+0x1a4>)
 80007f6:	f00a fa25 	bl	800ac44 <f_write>
				f_close(&myFile);
 80007fa:	480e      	ldr	r0, [pc, #56]	; (8000834 <main+0x1a4>)
 80007fc:	f00a fc34 	bl	800b068 <f_close>
		  }
		  if(pass >= FrameCount)
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <main+0x1c8>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <main+0x1a8>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	429a      	cmp	r2, r3
 800080a:	dba9      	blt.n	8000760 <main+0xd0>
		  {
			  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	2120      	movs	r1, #32
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <main+0x18c>)
 8000812:	f003 fc61 	bl	80040d8 <HAL_GPIO_WritePin>
	  if(DmaRecHalfBuffCplt == 1)
 8000816:	e7a3      	b.n	8000760 <main+0xd0>
 8000818:	0800c0c4 	.word	0x0800c0c4
 800081c:	40020800 	.word	0x40020800
 8000820:	2000a908 	.word	0x2000a908
 8000824:	0800c08c 	.word	0x0800c08c
 8000828:	20007834 	.word	0x20007834
 800082c:	20000096 	.word	0x20000096
 8000830:	20000004 	.word	0x20000004
 8000834:	20004360 	.word	0x20004360
 8000838:	20000000 	.word	0x20000000
 800083c:	20005390 	.word	0x20005390
 8000840:	20007390 	.word	0x20007390
 8000844:	0800c09c 	.word	0x0800c09c
 8000848:	20000094 	.word	0x20000094
 800084c:	20000328 	.word	0x20000328
 8000850:	20000095 	.word	0x20000095
 8000854:	0800c0b8 	.word	0x0800c0b8
 8000858:	20000098 	.word	0x20000098
 800085c:	200073e4 	.word	0x200073e4

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b0aa      	sub	sp, #168	; 0xa8
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800086a:	2234      	movs	r2, #52	; 0x34
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f00a fcaa 	bl	800b1c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	2258      	movs	r2, #88	; 0x58
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f00a fc9b 	bl	800b1c8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b3d      	ldr	r3, [pc, #244]	; (800098c <SystemClock_Config+0x12c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a3c      	ldr	r2, [pc, #240]	; (800098c <SystemClock_Config+0x12c>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
 80008a2:	4b3a      	ldr	r3, [pc, #232]	; (800098c <SystemClock_Config+0x12c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b37      	ldr	r3, [pc, #220]	; (8000990 <SystemClock_Config+0x130>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a36      	ldr	r2, [pc, #216]	; (8000990 <SystemClock_Config+0x130>)
 80008b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008bc:	6013      	str	r3, [r2, #0]
 80008be:	4b34      	ldr	r3, [pc, #208]	; (8000990 <SystemClock_Config+0x130>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ca:	2301      	movs	r3, #1
 80008cc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008ce:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008d2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d4:	2302      	movs	r3, #2
 80008d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008e2:	2319      	movs	r3, #25
 80008e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008e8:	23c0      	movs	r3, #192	; 0xc0
 80008ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80008f4:	2308      	movs	r3, #8
 80008f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000904:	4618      	mov	r0, r3
 8000906:	f004 ff2d 	bl	8005764 <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000910:	f000 fd76 	bl	8001400 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000914:	230f      	movs	r3, #15
 8000916:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000918:	2302      	movs	r3, #2
 800091a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000924:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800092a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800092e:	2103      	movs	r1, #3
 8000930:	4618      	mov	r0, r3
 8000932:	f004 f96f 	bl	8004c14 <HAL_RCC_ClockConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 800093c:	f000 fd60 	bl	8001400 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 8000940:	f240 1371 	movw	r3, #369	; 0x171
 8000944:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000946:	2332      	movs	r3, #50	; 0x32
 8000948:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 800094a:	230c      	movs	r3, #12
 800094c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800094e:	2302      	movs	r3, #2
 8000950:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000952:	2302      	movs	r3, #2
 8000954:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000956:	2300      	movs	r3, #0
 8000958:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 800095a:	2300      	movs	r3, #0
 800095c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800095e:	2300      	movs	r3, #0
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8000962:	2300      	movs	r3, #0
 8000964:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 800096a:	2300      	movs	r3, #0
 800096c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	4618      	mov	r0, r3
 8000974:	f004 fb1a 	bl	8004fac <HAL_RCCEx_PeriphCLKConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x122>
  {
    Error_Handler();
 800097e:	f000 fd3f 	bl	8001400 <Error_Handler>
  }
}
 8000982:	bf00      	nop
 8000984:	37a8      	adds	r7, #168	; 0xa8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40007000 	.word	0x40007000

08000994 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800099a:	463b      	mov	r3, r7
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80009a6:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009a8:	4a21      	ldr	r2, [pc, #132]	; (8000a30 <MX_ADC1_Init+0x9c>)
 80009aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009ac:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009d6:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <MX_ADC1_Init+0xa0>)
 80009d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009dc:	2200      	movs	r2, #0
 80009de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009f6:	f001 fdf3 	bl	80025e0 <HAL_ADC_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a00:	f000 fcfe 	bl	8001400 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a04:	230a      	movs	r3, #10
 8000a06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a10:	463b      	mov	r3, r7
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_ADC1_Init+0x98>)
 8000a16:	f001 fe27 	bl	8002668 <HAL_ADC_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a20:	f000 fcee 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200074b0 	.word	0x200074b0
 8000a30:	40012000 	.word	0x40012000
 8000a34:	0f000001 	.word	0x0f000001

08000a38 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a3e:	463b      	mov	r3, r7
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_DAC_Init+0x4c>)
 8000a48:	4a0f      	ldr	r2, [pc, #60]	; (8000a88 <MX_DAC_Init+0x50>)
 8000a4a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <MX_DAC_Init+0x4c>)
 8000a4e:	f002 f94a 	bl	8002ce6 <HAL_DAC_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000a58:	f000 fcd2 	bl	8001400 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	2200      	movs	r2, #0
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4806      	ldr	r0, [pc, #24]	; (8000a84 <MX_DAC_Init+0x4c>)
 8000a6c:	f002 f95d 	bl	8002d2a <HAL_DAC_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000a76:	f000 fcc3 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20007558 	.word	0x20007558
 8000a88:	40007400 	.word	0x40007400

08000a8c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000a90:	4b2c      	ldr	r3, [pc, #176]	; (8000b44 <MX_DFSDM1_Init+0xb8>)
 8000a92:	4a2d      	ldr	r2, [pc, #180]	; (8000b48 <MX_DFSDM1_Init+0xbc>)
 8000a94:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000a96:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <MX_DFSDM1_Init+0xb8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000a9c:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <MX_DFSDM1_Init+0xb8>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000aa2:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <MX_DFSDM1_Init+0xb8>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000aa8:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <MX_DFSDM1_Init+0xb8>)
 8000aaa:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000aae:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 50;
 8000ab0:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <MX_DFSDM1_Init+0xb8>)
 8000ab2:	2232      	movs	r2, #50	; 0x32
 8000ab4:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000ab6:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <MX_DFSDM1_Init+0xb8>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000abc:	4821      	ldr	r0, [pc, #132]	; (8000b44 <MX_DFSDM1_Init+0xb8>)
 8000abe:	f002 fa71 	bl	8002fa4 <HAL_DFSDM_FilterInit>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000ac8:	f000 fc9a 	bl	8001400 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <MX_DFSDM1_Init+0xc0>)
 8000ace:	4a20      	ldr	r2, [pc, #128]	; (8000b50 <MX_DFSDM1_Init+0xc4>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <MX_DFSDM1_Init+0xc0>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <MX_DFSDM1_Init+0xc0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 40;
 8000ade:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <MX_DFSDM1_Init+0xc0>)
 8000ae0:	2228      	movs	r2, #40	; 0x28
 8000ae2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000ae4:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <MX_DFSDM1_Init+0xc0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <MX_DFSDM1_Init+0xc0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <MX_DFSDM1_Init+0xc0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <MX_DFSDM1_Init+0xc0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <MX_DFSDM1_Init+0xc0>)
 8000afe:	2204      	movs	r2, #4
 8000b00:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <MX_DFSDM1_Init+0xc0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000b08:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_DFSDM1_Init+0xc0>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_DFSDM1_Init+0xc0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x0;
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <MX_DFSDM1_Init+0xc0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000b1a:	480c      	ldr	r0, [pc, #48]	; (8000b4c <MX_DFSDM1_Init+0xc0>)
 8000b1c:	f002 f952 	bl	8002dc4 <HAL_DFSDM_ChannelInit>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000b26:	f000 fc6b 	bl	8001400 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4909      	ldr	r1, [pc, #36]	; (8000b54 <MX_DFSDM1_Init+0xc8>)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_DFSDM1_Init+0xb8>)
 8000b30:	f002 fb24 	bl	800317c <HAL_DFSDM_FilterConfigRegChannel>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000b3a:	f000 fc61 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20007390 	.word	0x20007390
 8000b48:	40016100 	.word	0x40016100
 8000b4c:	20002328 	.word	0x20002328
 8000b50:	40016020 	.word	0x40016020
 8000b54:	00010002 	.word	0x00010002

08000b58 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_filter0.Instance = DFSDM2_Filter0;
 8000b5c:	4b40      	ldr	r3, [pc, #256]	; (8000c60 <MX_DFSDM2_Init+0x108>)
 8000b5e:	4a41      	ldr	r2, [pc, #260]	; (8000c64 <MX_DFSDM2_Init+0x10c>)
 8000b60:	601a      	str	r2, [r3, #0]
  hdfsdm2_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000b62:	4b3f      	ldr	r3, [pc, #252]	; (8000c60 <MX_DFSDM2_Init+0x108>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
  hdfsdm2_filter0.Init.RegularParam.FastMode = ENABLE;
 8000b68:	4b3d      	ldr	r3, [pc, #244]	; (8000c60 <MX_DFSDM2_Init+0x108>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	721a      	strb	r2, [r3, #8]
  hdfsdm2_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000b6e:	4b3c      	ldr	r3, [pc, #240]	; (8000c60 <MX_DFSDM2_Init+0x108>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	725a      	strb	r2, [r3, #9]
  hdfsdm2_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000b74:	4b3a      	ldr	r3, [pc, #232]	; (8000c60 <MX_DFSDM2_Init+0x108>)
 8000b76:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000b7a:	61da      	str	r2, [r3, #28]
  hdfsdm2_filter0.Init.FilterParam.Oversampling = 50;
 8000b7c:	4b38      	ldr	r3, [pc, #224]	; (8000c60 <MX_DFSDM2_Init+0x108>)
 8000b7e:	2232      	movs	r2, #50	; 0x32
 8000b80:	621a      	str	r2, [r3, #32]
  hdfsdm2_filter0.Init.FilterParam.IntOversampling = 1;
 8000b82:	4b37      	ldr	r3, [pc, #220]	; (8000c60 <MX_DFSDM2_Init+0x108>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm2_filter0) != HAL_OK)
 8000b88:	4835      	ldr	r0, [pc, #212]	; (8000c60 <MX_DFSDM2_Init+0x108>)
 8000b8a:	f002 fa0b 	bl	8002fa4 <HAL_DFSDM_FilterInit>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_DFSDM2_Init+0x40>
  {
    Error_Handler();
 8000b94:	f000 fc34 	bl	8001400 <Error_Handler>
  }
  hdfsdm2_filter1.Instance = DFSDM2_Filter1;
 8000b98:	4b33      	ldr	r3, [pc, #204]	; (8000c68 <MX_DFSDM2_Init+0x110>)
 8000b9a:	4a34      	ldr	r2, [pc, #208]	; (8000c6c <MX_DFSDM2_Init+0x114>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hdfsdm2_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000b9e:	4b32      	ldr	r3, [pc, #200]	; (8000c68 <MX_DFSDM2_Init+0x110>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	605a      	str	r2, [r3, #4]
  hdfsdm2_filter1.Init.RegularParam.FastMode = ENABLE;
 8000ba4:	4b30      	ldr	r3, [pc, #192]	; (8000c68 <MX_DFSDM2_Init+0x110>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	721a      	strb	r2, [r3, #8]
  hdfsdm2_filter1.Init.RegularParam.DmaMode = ENABLE;
 8000baa:	4b2f      	ldr	r3, [pc, #188]	; (8000c68 <MX_DFSDM2_Init+0x110>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	725a      	strb	r2, [r3, #9]
  hdfsdm2_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8000bb0:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <MX_DFSDM2_Init+0x110>)
 8000bb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000bb6:	61da      	str	r2, [r3, #28]
  hdfsdm2_filter1.Init.FilterParam.Oversampling = 50;
 8000bb8:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <MX_DFSDM2_Init+0x110>)
 8000bba:	2232      	movs	r2, #50	; 0x32
 8000bbc:	621a      	str	r2, [r3, #32]
  hdfsdm2_filter1.Init.FilterParam.IntOversampling = 1;
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	; (8000c68 <MX_DFSDM2_Init+0x110>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm2_filter1) != HAL_OK)
 8000bc4:	4828      	ldr	r0, [pc, #160]	; (8000c68 <MX_DFSDM2_Init+0x110>)
 8000bc6:	f002 f9ed 	bl	8002fa4 <HAL_DFSDM_FilterInit>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_DFSDM2_Init+0x7c>
  {
    Error_Handler();
 8000bd0:	f000 fc16 	bl	8001400 <Error_Handler>
  }
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8000bd4:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <MX_DFSDM2_Init+0x118>)
 8000bd6:	4a27      	ldr	r2, [pc, #156]	; (8000c74 <MX_DFSDM2_Init+0x11c>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8000bda:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <MX_DFSDM2_Init+0x118>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000be0:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <MX_DFSDM2_Init+0x118>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 40;
 8000be6:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <MX_DFSDM2_Init+0x118>)
 8000be8:	2228      	movs	r2, #40	; 0x28
 8000bea:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000bec:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <MX_DFSDM2_Init+0x118>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <MX_DFSDM2_Init+0x118>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <MX_DFSDM2_Init+0x118>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <MX_DFSDM2_Init+0x118>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_DFSDM2_Init+0x118>)
 8000c06:	2204      	movs	r2, #4
 8000c08:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <MX_DFSDM2_Init+0x118>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_DFSDM2_Init+0x118>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_DFSDM2_Init+0x118>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_DFSDM2_Init+0x118>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 8000c22:	4813      	ldr	r0, [pc, #76]	; (8000c70 <MX_DFSDM2_Init+0x118>)
 8000c24:	f002 f8ce 	bl	8002dc4 <HAL_DFSDM_ChannelInit>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_DFSDM2_Init+0xda>
  {
    Error_Handler();
 8000c2e:	f000 fbe7 	bl	8001400 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm2_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000c32:	2201      	movs	r2, #1
 8000c34:	4910      	ldr	r1, [pc, #64]	; (8000c78 <MX_DFSDM2_Init+0x120>)
 8000c36:	480a      	ldr	r0, [pc, #40]	; (8000c60 <MX_DFSDM2_Init+0x108>)
 8000c38:	f002 faa0 	bl	800317c <HAL_DFSDM_FilterConfigRegChannel>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_DFSDM2_Init+0xee>
  {
    Error_Handler();
 8000c42:	f000 fbdd 	bl	8001400 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm2_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000c46:	2201      	movs	r2, #1
 8000c48:	490b      	ldr	r1, [pc, #44]	; (8000c78 <MX_DFSDM2_Init+0x120>)
 8000c4a:	4807      	ldr	r0, [pc, #28]	; (8000c68 <MX_DFSDM2_Init+0x110>)
 8000c4c:	f002 fa96 	bl	800317c <HAL_DFSDM_FilterConfigRegChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_DFSDM2_Init+0x102>
  {
    Error_Handler();
 8000c56:	f000 fbd3 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200075b8 	.word	0x200075b8
 8000c64:	40016500 	.word	0x40016500
 8000c68:	200077a0 	.word	0x200077a0
 8000c6c:	40016580 	.word	0x40016580
 8000c70:	20007478 	.word	0x20007478
 8000c74:	40016420 	.word	0x40016420
 8000c78:	00010002 	.word	0x00010002

08000c7c <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <MX_FMPI2C1_Init+0x60>)
 8000c82:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <MX_FMPI2C1_Init+0x64>)
 8000c84:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x20303E5D;
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <MX_FMPI2C1_Init+0x60>)
 8000c88:	4a16      	ldr	r2, [pc, #88]	; (8000ce4 <MX_FMPI2C1_Init+0x68>)
 8000c8a:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <MX_FMPI2C1_Init+0x60>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <MX_FMPI2C1_Init+0x60>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000c98:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_FMPI2C1_Init+0x60>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_FMPI2C1_Init+0x60>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <MX_FMPI2C1_Init+0x60>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_FMPI2C1_Init+0x60>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <MX_FMPI2C1_Init+0x60>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000cb6:	4809      	ldr	r0, [pc, #36]	; (8000cdc <MX_FMPI2C1_Init+0x60>)
 8000cb8:	f002 ff8a 	bl	8003bd0 <HAL_FMPI2C_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000cc2:	f000 fb9d 	bl	8001400 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_FMPI2C1_Init+0x60>)
 8000cca:	f003 f810 	bl	8003cee <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000cd4:	f000 fb94 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	2000756c 	.word	0x2000756c
 8000ce0:	40006000 	.word	0x40006000
 8000ce4:	20303e5d 	.word	0x20303e5d

08000ce8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <MX_I2S2_Init+0x54>)
 8000cee:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <MX_I2S2_Init+0x58>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_I2S2_Init+0x54>)
 8000cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_I2S2_Init+0x54>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_I2S2_Init+0x54>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <MX_I2S2_Init+0x54>)
 8000d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d0c:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_I2S2_Init+0x54>)
 8000d10:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000d14:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_I2S2_Init+0x54>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <MX_I2S2_Init+0x54>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_I2S2_Init+0x54>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_I2S2_Init+0x54>)
 8000d2a:	f003 f9ef 	bl	800410c <HAL_I2S_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000d34:	f000 fb64 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2000a86c 	.word	0x2000a86c
 8000d40:	40003800 	.word	0x40003800

08000d44 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d4a:	4a13      	ldr	r2, [pc, #76]	; (8000d98 <MX_QUADSPI_Init+0x54>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d50:	22ff      	movs	r2, #255	; 0xff
 8000d52:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d80:	f003 fe86 	bl	8004a90 <HAL_QSPI_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000d8a:	f000 fb39 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000a8b4 	.word	0x2000a8b4
 8000d98:	a0001000 	.word	0xa0001000

08000d9c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_SDIO_SD_Init+0x38>)
 8000da2:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <MX_SDIO_SD_Init+0x3c>)
 8000da4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <MX_SDIO_SD_Init+0x38>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_SDIO_SD_Init+0x38>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <MX_SDIO_SD_Init+0x38>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_SDIO_SD_Init+0x38>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <MX_SDIO_SD_Init+0x38>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <MX_SDIO_SD_Init+0x38>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	2000771c 	.word	0x2000771c
 8000dd8:	40012c00 	.word	0x40012c00

08000ddc <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_UART10_Init+0x4c>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <MX_UART10_Init+0x50>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_UART10_Init+0x4c>)
 8000de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dec:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_UART10_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_UART10_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_UART10_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_UART10_Init+0x4c>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_UART10_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_UART10_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_UART10_Init+0x4c>)
 8000e14:	f005 fec8 	bl	8006ba8 <HAL_UART_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000e1e:	f000 faef 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200073e8 	.word	0x200073e8
 8000e2c:	40011c00 	.word	0x40011c00

08000e30 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_USART6_UART_Init+0x4c>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <MX_USART6_UART_Init+0x50>)
 8000e38:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <MX_USART6_UART_Init+0x4c>)
 8000e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e40:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <MX_USART6_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_USART6_UART_Init+0x4c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <MX_USART6_UART_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_USART6_UART_Init+0x4c>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <MX_USART6_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_USART6_UART_Init+0x4c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_USART6_UART_Init+0x4c>)
 8000e68:	f005 fe9e 	bl	8006ba8 <HAL_UART_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000e72:	f000 fac5 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200077f4 	.word	0x200077f4
 8000e80:	40011400 	.word	0x40011400

08000e84 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_DMA_Init+0x5c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a13      	ldr	r2, [pc, #76]	; (8000ee0 <MX_DMA_Init+0x5c>)
 8000e94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_DMA_Init+0x5c>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2038      	movs	r0, #56	; 0x38
 8000eac:	f001 fee5 	bl	8002c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000eb0:	2038      	movs	r0, #56	; 0x38
 8000eb2:	f001 fefe 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	203c      	movs	r0, #60	; 0x3c
 8000ebc:	f001 fedd 	bl	8002c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000ec0:	203c      	movs	r0, #60	; 0x3c
 8000ec2:	f001 fef6 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2044      	movs	r0, #68	; 0x44
 8000ecc:	f001 fed5 	bl	8002c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000ed0:	2044      	movs	r0, #68	; 0x44
 8000ed2:	f001 feee 	bl	8002cb2 <HAL_NVIC_EnableIRQ>

}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08e      	sub	sp, #56	; 0x38
 8000ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
 8000efe:	4bb1      	ldr	r3, [pc, #708]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4ab0      	ldr	r2, [pc, #704]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000f04:	f043 0310 	orr.w	r3, r3, #16
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4bae      	ldr	r3, [pc, #696]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	623b      	str	r3, [r7, #32]
 8000f14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	4baa      	ldr	r3, [pc, #680]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4aa9      	ldr	r2, [pc, #676]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4ba7      	ldr	r3, [pc, #668]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	61fb      	str	r3, [r7, #28]
 8000f30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
 8000f36:	4ba3      	ldr	r3, [pc, #652]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4aa2      	ldr	r2, [pc, #648]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000f3c:	f043 0320 	orr.w	r3, r3, #32
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4ba0      	ldr	r3, [pc, #640]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0320 	and.w	r3, r3, #32
 8000f4a:	61bb      	str	r3, [r7, #24]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	4b9c      	ldr	r3, [pc, #624]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a9b      	ldr	r2, [pc, #620]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b99      	ldr	r3, [pc, #612]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b95      	ldr	r3, [pc, #596]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a94      	ldr	r2, [pc, #592]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b92      	ldr	r3, [pc, #584]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b8e      	ldr	r3, [pc, #568]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a8d      	ldr	r2, [pc, #564]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b8b      	ldr	r3, [pc, #556]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	4b87      	ldr	r3, [pc, #540]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a86      	ldr	r2, [pc, #536]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b84      	ldr	r3, [pc, #528]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b80      	ldr	r3, [pc, #512]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a7f      	ldr	r2, [pc, #508]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000fc8:	f043 0308 	orr.w	r3, r3, #8
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b7d      	ldr	r3, [pc, #500]	; (80011c4 <MX_GPIO_Init+0x2e0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0308 	and.w	r3, r3, #8
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2138      	movs	r1, #56	; 0x38
 8000fde:	487a      	ldr	r0, [pc, #488]	; (80011c8 <MX_GPIO_Init+0x2e4>)
 8000fe0:	f003 f87a 	bl	80040d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2120      	movs	r1, #32
 8000fe8:	4878      	ldr	r0, [pc, #480]	; (80011cc <MX_GPIO_Init+0x2e8>)
 8000fea:	f003 f875 	bl	80040d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000ff4:	4876      	ldr	r0, [pc, #472]	; (80011d0 <MX_GPIO_Init+0x2ec>)
 8000ff6:	f003 f86f 	bl	80040d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8001000:	4874      	ldr	r0, [pc, #464]	; (80011d4 <MX_GPIO_Init+0x2f0>)
 8001002:	f003 f869 	bl	80040d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8001006:	2338      	movs	r3, #56	; 0x38
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100a:	2301      	movs	r3, #1
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101a:	4619      	mov	r1, r3
 800101c:	486a      	ldr	r0, [pc, #424]	; (80011c8 <MX_GPIO_Init+0x2e4>)
 800101e:	f002 feb1 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001022:	2340      	movs	r3, #64	; 0x40
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001032:	2303      	movs	r3, #3
 8001034:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	4619      	mov	r1, r3
 800103c:	4862      	ldr	r0, [pc, #392]	; (80011c8 <MX_GPIO_Init+0x2e4>)
 800103e:	f002 fea1 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001054:	2302      	movs	r3, #2
 8001056:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	4619      	mov	r1, r3
 800105e:	485e      	ldr	r0, [pc, #376]	; (80011d8 <MX_GPIO_Init+0x2f4>)
 8001060:	f002 fe90 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001064:	2302      	movs	r3, #2
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001068:	4b5c      	ldr	r3, [pc, #368]	; (80011dc <MX_GPIO_Init+0x2f8>)
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001074:	4619      	mov	r1, r3
 8001076:	4855      	ldr	r0, [pc, #340]	; (80011cc <MX_GPIO_Init+0x2e8>)
 8001078:	f002 fe84 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 800107c:	2301      	movs	r3, #1
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001080:	4b56      	ldr	r3, [pc, #344]	; (80011dc <MX_GPIO_Init+0x2f8>)
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108c:	4619      	mov	r1, r3
 800108e:	4854      	ldr	r0, [pc, #336]	; (80011e0 <MX_GPIO_Init+0x2fc>)
 8001090:	f002 fe78 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8001094:	2320      	movs	r3, #32
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	4848      	ldr	r0, [pc, #288]	; (80011cc <MX_GPIO_Init+0x2e8>)
 80010ac:	f002 fe6a 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80010b0:	2301      	movs	r3, #1
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010c0:	2302      	movs	r3, #2
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c8:	4619      	mov	r1, r3
 80010ca:	4841      	ldr	r0, [pc, #260]	; (80011d0 <MX_GPIO_Init+0x2ec>)
 80010cc:	f002 fe5a 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 80010d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e2:	4619      	mov	r1, r3
 80010e4:	483c      	ldr	r0, [pc, #240]	; (80011d8 <MX_GPIO_Init+0x2f4>)
 80010e6:	f002 fe4d 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80010ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f0:	2312      	movs	r3, #18
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010fc:	2304      	movs	r3, #4
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001104:	4619      	mov	r1, r3
 8001106:	4832      	ldr	r0, [pc, #200]	; (80011d0 <MX_GPIO_Init+0x2ec>)
 8001108:	f002 fe3c 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 800110c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800111e:	2307      	movs	r3, #7
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001126:	4619      	mov	r1, r3
 8001128:	4829      	ldr	r0, [pc, #164]	; (80011d0 <MX_GPIO_Init+0x2ec>)
 800112a:	f002 fe2b 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 800112e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001144:	4619      	mov	r1, r3
 8001146:	4822      	ldr	r0, [pc, #136]	; (80011d0 <MX_GPIO_Init+0x2ec>)
 8001148:	f002 fe1c 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 800114c:	f248 0380 	movw	r3, #32896	; 0x8080
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001152:	4b22      	ldr	r3, [pc, #136]	; (80011dc <MX_GPIO_Init+0x2f8>)
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	4619      	mov	r1, r3
 8001160:	481c      	ldr	r0, [pc, #112]	; (80011d4 <MX_GPIO_Init+0x2f0>)
 8001162:	f002 fe0f 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 8001166:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117c:	4619      	mov	r1, r3
 800117e:	4815      	ldr	r0, [pc, #84]	; (80011d4 <MX_GPIO_Init+0x2f0>)
 8001180:	f002 fe00 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001184:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001196:	230a      	movs	r3, #10
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	480f      	ldr	r0, [pc, #60]	; (80011e0 <MX_GPIO_Init+0x2fc>)
 80011a2:	f002 fdef 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 80011a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011b8:	2301      	movs	r3, #1
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c0:	e010      	b.n	80011e4 <MX_GPIO_Init+0x300>
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40020800 	.word	0x40020800
 80011d0:	40020400 	.word	0x40020400
 80011d4:	40021800 	.word	0x40021800
 80011d8:	40021400 	.word	0x40021400
 80011dc:	10110000 	.word	0x10110000
 80011e0:	40020000 	.word	0x40020000
 80011e4:	4619      	mov	r1, r3
 80011e6:	481a      	ldr	r0, [pc, #104]	; (8001250 <MX_GPIO_Init+0x36c>)
 80011e8:	f002 fdcc 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80011ec:	2330      	movs	r3, #48	; 0x30
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f8:	2303      	movs	r3, #3
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011fc:	2306      	movs	r3, #6
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001204:	4619      	mov	r1, r3
 8001206:	4813      	ldr	r0, [pc, #76]	; (8001254 <MX_GPIO_Init+0x370>)
 8001208:	f002 fdbc 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800120c:	2340      	movs	r3, #64	; 0x40
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_GPIO_Init+0x374>)
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	4619      	mov	r1, r3
 800121e:	480d      	ldr	r0, [pc, #52]	; (8001254 <MX_GPIO_Init+0x370>)
 8001220:	f002 fdb0 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001224:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001236:	2302      	movs	r3, #2
 8001238:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123e:	4619      	mov	r1, r3
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_GPIO_Init+0x370>)
 8001242:	f002 fd9f 	bl	8003d84 <HAL_GPIO_Init>

}
 8001246:	bf00      	nop
 8001248:	3738      	adds	r7, #56	; 0x38
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40020000 	.word	0x40020000
 8001254:	40020400 	.word	0x40020400
 8001258:	10110000 	.word	0x10110000

0800125c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	615a      	str	r2, [r3, #20]
 8001272:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001274:	4b4f      	ldr	r3, [pc, #316]	; (80013b4 <MX_FSMC_Init+0x158>)
 8001276:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800127a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800127c:	4b4d      	ldr	r3, [pc, #308]	; (80013b4 <MX_FSMC_Init+0x158>)
 800127e:	4a4e      	ldr	r2, [pc, #312]	; (80013b8 <MX_FSMC_Init+0x15c>)
 8001280:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001282:	4b4c      	ldr	r3, [pc, #304]	; (80013b4 <MX_FSMC_Init+0x158>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001288:	4b4a      	ldr	r3, [pc, #296]	; (80013b4 <MX_FSMC_Init+0x158>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800128e:	4b49      	ldr	r3, [pc, #292]	; (80013b4 <MX_FSMC_Init+0x158>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001294:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <MX_FSMC_Init+0x158>)
 8001296:	2210      	movs	r2, #16
 8001298:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800129a:	4b46      	ldr	r3, [pc, #280]	; (80013b4 <MX_FSMC_Init+0x158>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80012a0:	4b44      	ldr	r3, [pc, #272]	; (80013b4 <MX_FSMC_Init+0x158>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80012a6:	4b43      	ldr	r3, [pc, #268]	; (80013b4 <MX_FSMC_Init+0x158>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 80012ac:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <MX_FSMC_Init+0x158>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80012b2:	4b40      	ldr	r3, [pc, #256]	; (80013b4 <MX_FSMC_Init+0x158>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80012b8:	4b3e      	ldr	r3, [pc, #248]	; (80013b4 <MX_FSMC_Init+0x158>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012be:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <MX_FSMC_Init+0x158>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80012c4:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <MX_FSMC_Init+0x158>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80012ca:	4b3a      	ldr	r3, [pc, #232]	; (80013b4 <MX_FSMC_Init+0x158>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80012d0:	4b38      	ldr	r3, [pc, #224]	; (80013b4 <MX_FSMC_Init+0x158>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80012d6:	4b37      	ldr	r3, [pc, #220]	; (80013b4 <MX_FSMC_Init+0x158>)
 80012d8:	2200      	movs	r2, #0
 80012da:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80012dc:	230f      	movs	r3, #15
 80012de:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80012e0:	230f      	movs	r3, #15
 80012e2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80012e4:	23ff      	movs	r3, #255	; 0xff
 80012e6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80012e8:	230f      	movs	r3, #15
 80012ea:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80012ec:	2310      	movs	r3, #16
 80012ee:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80012f0:	2311      	movs	r3, #17
 80012f2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2200      	movs	r2, #0
 80012fc:	4619      	mov	r1, r3
 80012fe:	482d      	ldr	r0, [pc, #180]	; (80013b4 <MX_FSMC_Init+0x158>)
 8001300:	f005 fc0e 	bl	8006b20 <HAL_SRAM_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 800130a:	f000 f879 	bl	8001400 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 800130e:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <MX_FSMC_Init+0x160>)
 8001310:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001314:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001316:	4b29      	ldr	r3, [pc, #164]	; (80013bc <MX_FSMC_Init+0x160>)
 8001318:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <MX_FSMC_Init+0x15c>)
 800131a:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 800131c:	4b27      	ldr	r3, [pc, #156]	; (80013bc <MX_FSMC_Init+0x160>)
 800131e:	2204      	movs	r2, #4
 8001320:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001322:	4b26      	ldr	r3, [pc, #152]	; (80013bc <MX_FSMC_Init+0x160>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001328:	4b24      	ldr	r3, [pc, #144]	; (80013bc <MX_FSMC_Init+0x160>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800132e:	4b23      	ldr	r3, [pc, #140]	; (80013bc <MX_FSMC_Init+0x160>)
 8001330:	2210      	movs	r2, #16
 8001332:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001334:	4b21      	ldr	r3, [pc, #132]	; (80013bc <MX_FSMC_Init+0x160>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800133a:	4b20      	ldr	r3, [pc, #128]	; (80013bc <MX_FSMC_Init+0x160>)
 800133c:	2200      	movs	r2, #0
 800133e:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <MX_FSMC_Init+0x160>)
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <MX_FSMC_Init+0x160>)
 8001348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800134c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <MX_FSMC_Init+0x160>)
 8001350:	2200      	movs	r2, #0
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <MX_FSMC_Init+0x160>)
 8001356:	2200      	movs	r2, #0
 8001358:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <MX_FSMC_Init+0x160>)
 800135c:	2200      	movs	r2, #0
 800135e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <MX_FSMC_Init+0x160>)
 8001362:	2200      	movs	r2, #0
 8001364:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <MX_FSMC_Init+0x160>)
 8001368:	2200      	movs	r2, #0
 800136a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <MX_FSMC_Init+0x160>)
 800136e:	2200      	movs	r2, #0
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <MX_FSMC_Init+0x160>)
 8001374:	2200      	movs	r2, #0
 8001376:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001378:	230f      	movs	r3, #15
 800137a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800137c:	230f      	movs	r3, #15
 800137e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001380:	23ff      	movs	r3, #255	; 0xff
 8001382:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001384:	230f      	movs	r3, #15
 8001386:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001388:	2310      	movs	r3, #16
 800138a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800138c:	2311      	movs	r3, #17
 800138e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2200      	movs	r2, #0
 8001398:	4619      	mov	r1, r3
 800139a:	4808      	ldr	r0, [pc, #32]	; (80013bc <MX_FSMC_Init+0x160>)
 800139c:	f005 fbc0 	bl	8006b20 <HAL_SRAM_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_FSMC_Init+0x14e>
  {
    Error_Handler( );
 80013a6:	f000 f82b 	bl	8001400 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80013aa:	bf00      	nop
 80013ac:	3720      	adds	r7, #32
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20007428 	.word	0x20007428
 80013b8:	a0000104 	.word	0xa0000104
 80013bc:	200076cc 	.word	0x200076cc

080013c0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

	DmaRecHalfBuffCplt=1;
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]



}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000094 	.word	0x20000094

080013e0 <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	DmaRecBuffCplt=1;
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	701a      	strb	r2, [r3, #0]

}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000095 	.word	0x20000095

08001400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_MspInit+0x4c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a0f      	ldr	r2, [pc, #60]	; (800145c <HAL_MspInit+0x4c>)
 8001420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <HAL_MspInit+0x4c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_MspInit+0x4c>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <HAL_MspInit+0x4c>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_MspInit+0x4c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08c      	sub	sp, #48	; 0x30
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a31      	ldr	r2, [pc, #196]	; (8001544 <HAL_ADC_MspInit+0xe4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d15b      	bne.n	800153a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
 8001486:	4b30      	ldr	r3, [pc, #192]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a2f      	ldr	r2, [pc, #188]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 800148c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149a:	61bb      	str	r3, [r7, #24]
 800149c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	4b29      	ldr	r3, [pc, #164]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a28      	ldr	r2, [pc, #160]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b26      	ldr	r3, [pc, #152]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b22      	ldr	r3, [pc, #136]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a21      	ldr	r2, [pc, #132]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a1a      	ldr	r2, [pc, #104]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 80014f2:	2311      	movs	r3, #17
 80014f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f6:	2303      	movs	r3, #3
 80014f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	4811      	ldr	r0, [pc, #68]	; (800154c <HAL_ADC_MspInit+0xec>)
 8001506:	f002 fc3d 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 800150a:	2326      	movs	r3, #38	; 0x26
 800150c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150e:	2303      	movs	r3, #3
 8001510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <HAL_ADC_MspInit+0xf0>)
 800151e:	f002 fc31 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 8001522:	2302      	movs	r3, #2
 8001524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001526:	2303      	movs	r3, #3
 8001528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	4807      	ldr	r0, [pc, #28]	; (8001554 <HAL_ADC_MspInit+0xf4>)
 8001536:	f002 fc25 	bl	8003d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800153a:	bf00      	nop
 800153c:	3730      	adds	r7, #48	; 0x30
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40012000 	.word	0x40012000
 8001548:	40023800 	.word	0x40023800
 800154c:	40020800 	.word	0x40020800
 8001550:	40020000 	.word	0x40020000
 8001554:	40020400 	.word	0x40020400

08001558 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <HAL_DAC_MspInit+0x7c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d127      	bne.n	80015ca <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <HAL_DAC_MspInit+0x80>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <HAL_DAC_MspInit+0x80>)
 8001584:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <HAL_DAC_MspInit+0x80>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_DAC_MspInit+0x80>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <HAL_DAC_MspInit+0x80>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_DAC_MspInit+0x80>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 80015b2:	2310      	movs	r3, #16
 80015b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b6:	2303      	movs	r3, #3
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	; (80015dc <HAL_DAC_MspInit+0x84>)
 80015c6:	f002 fbdd 	bl	8003d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	; 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40007400 	.word	0x40007400
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020000 	.word	0x40020000

080015e0 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08e      	sub	sp, #56	; 0x38
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_FILTER_INSTANCE(hdfsdm_filter->Instance))&&(DFSDM1_Init == 0))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a32      	ldr	r2, [pc, #200]	; (80016c8 <HAL_DFSDM_FilterMspInit+0xe8>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d004      	beq.n	800160c <HAL_DFSDM_FilterMspInit+0x2c>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a31      	ldr	r2, [pc, #196]	; (80016cc <HAL_DFSDM_FilterMspInit+0xec>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d16b      	bne.n	80016e4 <HAL_DFSDM_FilterMspInit+0x104>
 800160c:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <HAL_DFSDM_FilterMspInit+0xf0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d167      	bne.n	80016e4 <HAL_DFSDM_FilterMspInit+0x104>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001614:	4b2f      	ldr	r3, [pc, #188]	; (80016d4 <HAL_DFSDM_FilterMspInit+0xf4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	4a2e      	ldr	r2, [pc, #184]	; (80016d4 <HAL_DFSDM_FilterMspInit+0xf4>)
 800161c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800161e:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <HAL_DFSDM_FilterMspInit+0xf4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d10d      	bne.n	8001642 <HAL_DFSDM_FilterMspInit+0x62>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
 800162a:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <HAL_DFSDM_FilterMspInit+0xf8>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	4a2a      	ldr	r2, [pc, #168]	; (80016d8 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001630:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001634:	6453      	str	r3, [r2, #68]	; 0x44
 8001636:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800163e:	623b      	str	r3, [r7, #32]
 8001640:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a23      	ldr	r2, [pc, #140]	; (80016d8 <HAL_DFSDM_FilterMspInit+0xf8>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001668:	f043 0308 	orr.w	r3, r3, #8
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration    
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 800167a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800168c:	2306      	movs	r3, #6
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	4811      	ldr	r0, [pc, #68]	; (80016dc <HAL_DFSDM_FilterMspInit+0xfc>)
 8001698:	f002 fb74 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 800169c:	2340      	movs	r3, #64	; 0x40
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80016ac:	2306      	movs	r3, #6
 80016ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80016b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b4:	4619      	mov	r1, r3
 80016b6:	480a      	ldr	r0, [pc, #40]	; (80016e0 <HAL_DFSDM_FilterMspInit+0x100>)
 80016b8:	f002 fb64 	bl	8003d84 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <HAL_DFSDM_FilterMspInit+0xf0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	4a03      	ldr	r2, [pc, #12]	; (80016d0 <HAL_DFSDM_FilterMspInit+0xf0>)
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e091      	b.n	80017ec <HAL_DFSDM_FilterMspInit+0x20c>
 80016c8:	40016100 	.word	0x40016100
 80016cc:	40016180 	.word	0x40016180
 80016d0:	200000a4 	.word	0x200000a4
 80016d4:	2000009c 	.word	0x2000009c
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020000 	.word	0x40020000
 80016e0:	40020c00 	.word	0x40020c00
  }
  else if(!(IS_DFSDM1_FILTER_INSTANCE(hdfsdm_filter->Instance))&&(DFSDM2_Init == 0))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a9c      	ldr	r2, [pc, #624]	; (800195c <HAL_DFSDM_FilterMspInit+0x37c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d07e      	beq.n	80017ec <HAL_DFSDM_FilterMspInit+0x20c>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a9b      	ldr	r2, [pc, #620]	; (8001960 <HAL_DFSDM_FilterMspInit+0x380>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d079      	beq.n	80017ec <HAL_DFSDM_FilterMspInit+0x20c>
 80016f8:	4b9a      	ldr	r3, [pc, #616]	; (8001964 <HAL_DFSDM_FilterMspInit+0x384>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d175      	bne.n	80017ec <HAL_DFSDM_FilterMspInit+0x20c>
  {
  /* USER CODE BEGIN DFSDM2_MspInit 0 */

  /* USER CODE END DFSDM2_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM2_CLK_ENABLED++;
 8001700:	4b99      	ldr	r3, [pc, #612]	; (8001968 <HAL_DFSDM_FilterMspInit+0x388>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	3301      	adds	r3, #1
 8001706:	4a98      	ldr	r2, [pc, #608]	; (8001968 <HAL_DFSDM_FilterMspInit+0x388>)
 8001708:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM2_CLK_ENABLED==1){
 800170a:	4b97      	ldr	r3, [pc, #604]	; (8001968 <HAL_DFSDM_FilterMspInit+0x388>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d10d      	bne.n	800172e <HAL_DFSDM_FilterMspInit+0x14e>
      __HAL_RCC_DFSDM2_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	4b95      	ldr	r3, [pc, #596]	; (800196c <HAL_DFSDM_FilterMspInit+0x38c>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	4a94      	ldr	r2, [pc, #592]	; (800196c <HAL_DFSDM_FilterMspInit+0x38c>)
 800171c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001720:	6453      	str	r3, [r2, #68]	; 0x44
 8001722:	4b92      	ldr	r3, [pc, #584]	; (800196c <HAL_DFSDM_FilterMspInit+0x38c>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697b      	ldr	r3, [r7, #20]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b8e      	ldr	r3, [pc, #568]	; (800196c <HAL_DFSDM_FilterMspInit+0x38c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a8d      	ldr	r2, [pc, #564]	; (800196c <HAL_DFSDM_FilterMspInit+0x38c>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b8b      	ldr	r3, [pc, #556]	; (800196c <HAL_DFSDM_FilterMspInit+0x38c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b87      	ldr	r3, [pc, #540]	; (800196c <HAL_DFSDM_FilterMspInit+0x38c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a86      	ldr	r2, [pc, #536]	; (800196c <HAL_DFSDM_FilterMspInit+0x38c>)
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b84      	ldr	r3, [pc, #528]	; (800196c <HAL_DFSDM_FilterMspInit+0x38c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b80      	ldr	r3, [pc, #512]	; (800196c <HAL_DFSDM_FilterMspInit+0x38c>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a7f      	ldr	r2, [pc, #508]	; (800196c <HAL_DFSDM_FilterMspInit+0x38c>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b7d      	ldr	r3, [pc, #500]	; (800196c <HAL_DFSDM_FilterMspInit+0x38c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM2 GPIO Configuration    
    PA7     ------> DFSDM2_DATIN1
    PD2     ------> DFSDM2_CKOUT
    PB7     ------> DFSDM2_DATIN7 
    */
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001792:	2307      	movs	r3, #7
 8001794:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179a:	4619      	mov	r1, r3
 800179c:	4874      	ldr	r0, [pc, #464]	; (8001970 <HAL_DFSDM_FilterMspInit+0x390>)
 800179e:	f002 faf1 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 80017a2:	2304      	movs	r3, #4
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 80017b2:	2303      	movs	r3, #3
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80017b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ba:	4619      	mov	r1, r3
 80017bc:	486d      	ldr	r0, [pc, #436]	; (8001974 <HAL_DFSDM_FilterMspInit+0x394>)
 80017be:	f002 fae1 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 80017d2:	2306      	movs	r3, #6
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 80017d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017da:	4619      	mov	r1, r3
 80017dc:	4866      	ldr	r0, [pc, #408]	; (8001978 <HAL_DFSDM_FilterMspInit+0x398>)
 80017de:	f002 fad1 	bl	8003d84 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM2_MspInit 1 */

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
 80017e2:	4b60      	ldr	r3, [pc, #384]	; (8001964 <HAL_DFSDM_FilterMspInit+0x384>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	4a5e      	ldr	r2, [pc, #376]	; (8001964 <HAL_DFSDM_FilterMspInit+0x384>)
 80017ea:	6013      	str	r3, [r2, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a5a      	ldr	r2, [pc, #360]	; (800195c <HAL_DFSDM_FilterMspInit+0x37c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d136      	bne.n	8001864 <HAL_DFSDM_FilterMspInit+0x284>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80017f6:	4b61      	ldr	r3, [pc, #388]	; (800197c <HAL_DFSDM_FilterMspInit+0x39c>)
 80017f8:	4a61      	ldr	r2, [pc, #388]	; (8001980 <HAL_DFSDM_FilterMspInit+0x3a0>)
 80017fa:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_7;
 80017fc:	4b5f      	ldr	r3, [pc, #380]	; (800197c <HAL_DFSDM_FilterMspInit+0x39c>)
 80017fe:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001802:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001804:	4b5d      	ldr	r3, [pc, #372]	; (800197c <HAL_DFSDM_FilterMspInit+0x39c>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800180a:	4b5c      	ldr	r3, [pc, #368]	; (800197c <HAL_DFSDM_FilterMspInit+0x39c>)
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001810:	4b5a      	ldr	r3, [pc, #360]	; (800197c <HAL_DFSDM_FilterMspInit+0x39c>)
 8001812:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001816:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001818:	4b58      	ldr	r3, [pc, #352]	; (800197c <HAL_DFSDM_FilterMspInit+0x39c>)
 800181a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800181e:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001820:	4b56      	ldr	r3, [pc, #344]	; (800197c <HAL_DFSDM_FilterMspInit+0x39c>)
 8001822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001826:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001828:	4b54      	ldr	r3, [pc, #336]	; (800197c <HAL_DFSDM_FilterMspInit+0x39c>)
 800182a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800182e:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8001830:	4b52      	ldr	r3, [pc, #328]	; (800197c <HAL_DFSDM_FilterMspInit+0x39c>)
 8001832:	2200      	movs	r2, #0
 8001834:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001836:	4b51      	ldr	r3, [pc, #324]	; (800197c <HAL_DFSDM_FilterMspInit+0x39c>)
 8001838:	2200      	movs	r2, #0
 800183a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800183c:	484f      	ldr	r0, [pc, #316]	; (800197c <HAL_DFSDM_FilterMspInit+0x39c>)
 800183e:	f001 fe59 	bl	80034f4 <HAL_DMA_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_DFSDM_FilterMspInit+0x26c>
    {
      Error_Handler();
 8001848:	f7ff fdda 	bl	8001400 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a4b      	ldr	r2, [pc, #300]	; (800197c <HAL_DFSDM_FilterMspInit+0x39c>)
 8001850:	62da      	str	r2, [r3, #44]	; 0x2c
 8001852:	4a4a      	ldr	r2, [pc, #296]	; (800197c <HAL_DFSDM_FilterMspInit+0x39c>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a48      	ldr	r2, [pc, #288]	; (800197c <HAL_DFSDM_FilterMspInit+0x39c>)
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
 800185e:	4a47      	ldr	r2, [pc, #284]	; (800197c <HAL_DFSDM_FilterMspInit+0x39c>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM2 DMA Init */
    /* DFSDM2_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM2_Filter0){
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a46      	ldr	r2, [pc, #280]	; (8001984 <HAL_DFSDM_FilterMspInit+0x3a4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d136      	bne.n	80018dc <HAL_DFSDM_FilterMspInit+0x2fc>
    hdma_dfsdm2_flt0.Instance = DMA2_Stream4;
 800186e:	4b46      	ldr	r3, [pc, #280]	; (8001988 <HAL_DFSDM_FilterMspInit+0x3a8>)
 8001870:	4a46      	ldr	r2, [pc, #280]	; (800198c <HAL_DFSDM_FilterMspInit+0x3ac>)
 8001872:	601a      	str	r2, [r3, #0]
    hdma_dfsdm2_flt0.Init.Channel = DMA_CHANNEL_8;
 8001874:	4b44      	ldr	r3, [pc, #272]	; (8001988 <HAL_DFSDM_FilterMspInit+0x3a8>)
 8001876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800187a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm2_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800187c:	4b42      	ldr	r3, [pc, #264]	; (8001988 <HAL_DFSDM_FilterMspInit+0x3a8>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
    hdma_dfsdm2_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001882:	4b41      	ldr	r3, [pc, #260]	; (8001988 <HAL_DFSDM_FilterMspInit+0x3a8>)
 8001884:	2200      	movs	r2, #0
 8001886:	60da      	str	r2, [r3, #12]
    hdma_dfsdm2_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001888:	4b3f      	ldr	r3, [pc, #252]	; (8001988 <HAL_DFSDM_FilterMspInit+0x3a8>)
 800188a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800188e:	611a      	str	r2, [r3, #16]
    hdma_dfsdm2_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001890:	4b3d      	ldr	r3, [pc, #244]	; (8001988 <HAL_DFSDM_FilterMspInit+0x3a8>)
 8001892:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001896:	615a      	str	r2, [r3, #20]
    hdma_dfsdm2_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001898:	4b3b      	ldr	r3, [pc, #236]	; (8001988 <HAL_DFSDM_FilterMspInit+0x3a8>)
 800189a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800189e:	619a      	str	r2, [r3, #24]
    hdma_dfsdm2_flt0.Init.Mode = DMA_CIRCULAR;
 80018a0:	4b39      	ldr	r3, [pc, #228]	; (8001988 <HAL_DFSDM_FilterMspInit+0x3a8>)
 80018a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a6:	61da      	str	r2, [r3, #28]
    hdma_dfsdm2_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80018a8:	4b37      	ldr	r3, [pc, #220]	; (8001988 <HAL_DFSDM_FilterMspInit+0x3a8>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	621a      	str	r2, [r3, #32]
    hdma_dfsdm2_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ae:	4b36      	ldr	r3, [pc, #216]	; (8001988 <HAL_DFSDM_FilterMspInit+0x3a8>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm2_flt0) != HAL_OK)
 80018b4:	4834      	ldr	r0, [pc, #208]	; (8001988 <HAL_DFSDM_FilterMspInit+0x3a8>)
 80018b6:	f001 fe1d 	bl	80034f4 <HAL_DMA_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_DFSDM_FilterMspInit+0x2e4>
    {
      Error_Handler();
 80018c0:	f7ff fd9e 	bl	8001400 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm2_flt0);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a30      	ldr	r2, [pc, #192]	; (8001988 <HAL_DFSDM_FilterMspInit+0x3a8>)
 80018c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80018ca:	4a2f      	ldr	r2, [pc, #188]	; (8001988 <HAL_DFSDM_FilterMspInit+0x3a8>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm2_flt0);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a2d      	ldr	r2, [pc, #180]	; (8001988 <HAL_DFSDM_FilterMspInit+0x3a8>)
 80018d4:	629a      	str	r2, [r3, #40]	; 0x28
 80018d6:	4a2c      	ldr	r2, [pc, #176]	; (8001988 <HAL_DFSDM_FilterMspInit+0x3a8>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM2_FLT1 Init */
  if(hdfsdm_filter->Instance == DFSDM2_Filter1){
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a2b      	ldr	r2, [pc, #172]	; (8001990 <HAL_DFSDM_FilterMspInit+0x3b0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d136      	bne.n	8001954 <HAL_DFSDM_FilterMspInit+0x374>
    hdma_dfsdm2_flt1.Instance = DMA2_Stream5;
 80018e6:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <HAL_DFSDM_FilterMspInit+0x3b4>)
 80018e8:	4a2b      	ldr	r2, [pc, #172]	; (8001998 <HAL_DFSDM_FilterMspInit+0x3b8>)
 80018ea:	601a      	str	r2, [r3, #0]
    hdma_dfsdm2_flt1.Init.Channel = DMA_CHANNEL_8;
 80018ec:	4b29      	ldr	r3, [pc, #164]	; (8001994 <HAL_DFSDM_FilterMspInit+0x3b4>)
 80018ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018f2:	605a      	str	r2, [r3, #4]
    hdma_dfsdm2_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018f4:	4b27      	ldr	r3, [pc, #156]	; (8001994 <HAL_DFSDM_FilterMspInit+0x3b4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
    hdma_dfsdm2_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fa:	4b26      	ldr	r3, [pc, #152]	; (8001994 <HAL_DFSDM_FilterMspInit+0x3b4>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
    hdma_dfsdm2_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_DFSDM_FilterMspInit+0x3b4>)
 8001902:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001906:	611a      	str	r2, [r3, #16]
    hdma_dfsdm2_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001908:	4b22      	ldr	r3, [pc, #136]	; (8001994 <HAL_DFSDM_FilterMspInit+0x3b4>)
 800190a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800190e:	615a      	str	r2, [r3, #20]
    hdma_dfsdm2_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001910:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_DFSDM_FilterMspInit+0x3b4>)
 8001912:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001916:	619a      	str	r2, [r3, #24]
    hdma_dfsdm2_flt1.Init.Mode = DMA_CIRCULAR;
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <HAL_DFSDM_FilterMspInit+0x3b4>)
 800191a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800191e:	61da      	str	r2, [r3, #28]
    hdma_dfsdm2_flt1.Init.Priority = DMA_PRIORITY_LOW;
 8001920:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <HAL_DFSDM_FilterMspInit+0x3b4>)
 8001922:	2200      	movs	r2, #0
 8001924:	621a      	str	r2, [r3, #32]
    hdma_dfsdm2_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <HAL_DFSDM_FilterMspInit+0x3b4>)
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm2_flt1) != HAL_OK)
 800192c:	4819      	ldr	r0, [pc, #100]	; (8001994 <HAL_DFSDM_FilterMspInit+0x3b4>)
 800192e:	f001 fde1 	bl	80034f4 <HAL_DMA_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_DFSDM_FilterMspInit+0x35c>
    {
      Error_Handler();
 8001938:	f7ff fd62 	bl	8001400 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm2_flt1);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a15      	ldr	r2, [pc, #84]	; (8001994 <HAL_DFSDM_FilterMspInit+0x3b4>)
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c
 8001942:	4a14      	ldr	r2, [pc, #80]	; (8001994 <HAL_DFSDM_FilterMspInit+0x3b4>)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm2_flt1);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a12      	ldr	r2, [pc, #72]	; (8001994 <HAL_DFSDM_FilterMspInit+0x3b4>)
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
 800194e:	4a11      	ldr	r2, [pc, #68]	; (8001994 <HAL_DFSDM_FilterMspInit+0x3b4>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8001954:	bf00      	nop
 8001956:	3738      	adds	r7, #56	; 0x38
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40016100 	.word	0x40016100
 8001960:	40016180 	.word	0x40016180
 8001964:	200000a8 	.word	0x200000a8
 8001968:	200000a0 	.word	0x200000a0
 800196c:	40023800 	.word	0x40023800
 8001970:	40020000 	.word	0x40020000
 8001974:	40020c00 	.word	0x40020c00
 8001978:	40020400 	.word	0x40020400
 800197c:	200074f8 	.word	0x200074f8
 8001980:	40026410 	.word	0x40026410
 8001984:	40016500 	.word	0x40016500
 8001988:	2000766c 	.word	0x2000766c
 800198c:	40026470 	.word	0x40026470
 8001990:	40016580 	.word	0x40016580
 8001994:	2000760c 	.word	0x2000760c
 8001998:	40026488 	.word	0x40026488

0800199c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08e      	sub	sp, #56	; 0x38
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a81      	ldr	r2, [pc, #516]	; (8001bc0 <HAL_DFSDM_ChannelMspInit+0x224>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00e      	beq.n	80019dc <HAL_DFSDM_ChannelMspInit+0x40>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a80      	ldr	r2, [pc, #512]	; (8001bc4 <HAL_DFSDM_ChannelMspInit+0x228>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d009      	beq.n	80019dc <HAL_DFSDM_ChannelMspInit+0x40>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a7e      	ldr	r2, [pc, #504]	; (8001bc8 <HAL_DFSDM_ChannelMspInit+0x22c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d004      	beq.n	80019dc <HAL_DFSDM_ChannelMspInit+0x40>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a7d      	ldr	r2, [pc, #500]	; (8001bcc <HAL_DFSDM_ChannelMspInit+0x230>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d15d      	bne.n	8001a98 <HAL_DFSDM_ChannelMspInit+0xfc>
 80019dc:	4b7c      	ldr	r3, [pc, #496]	; (8001bd0 <HAL_DFSDM_ChannelMspInit+0x234>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d159      	bne.n	8001a98 <HAL_DFSDM_ChannelMspInit+0xfc>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80019e4:	4b7b      	ldr	r3, [pc, #492]	; (8001bd4 <HAL_DFSDM_ChannelMspInit+0x238>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	4a7a      	ldr	r2, [pc, #488]	; (8001bd4 <HAL_DFSDM_ChannelMspInit+0x238>)
 80019ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80019ee:	4b79      	ldr	r3, [pc, #484]	; (8001bd4 <HAL_DFSDM_ChannelMspInit+0x238>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d10d      	bne.n	8001a12 <HAL_DFSDM_ChannelMspInit+0x76>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
 80019fa:	4b77      	ldr	r3, [pc, #476]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	4a76      	ldr	r2, [pc, #472]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001a00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a04:	6453      	str	r3, [r2, #68]	; 0x44
 8001a06:	4b74      	ldr	r3, [pc, #464]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a0e:	623b      	str	r3, [r7, #32]
 8001a10:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
 8001a16:	4b70      	ldr	r3, [pc, #448]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a6f      	ldr	r2, [pc, #444]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b6d      	ldr	r3, [pc, #436]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	61fb      	str	r3, [r7, #28]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	4b69      	ldr	r3, [pc, #420]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a68      	ldr	r2, [pc, #416]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001a38:	f043 0308 	orr.w	r3, r3, #8
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b66      	ldr	r3, [pc, #408]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	61bb      	str	r3, [r7, #24]
 8001a48:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration    
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001a5c:	2306      	movs	r3, #6
 8001a5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a64:	4619      	mov	r1, r3
 8001a66:	485d      	ldr	r0, [pc, #372]	; (8001bdc <HAL_DFSDM_ChannelMspInit+0x240>)
 8001a68:	f002 f98c 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001a6c:	2340      	movs	r3, #64	; 0x40
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001a7c:	2306      	movs	r3, #6
 8001a7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a84:	4619      	mov	r1, r3
 8001a86:	4856      	ldr	r0, [pc, #344]	; (8001be0 <HAL_DFSDM_ChannelMspInit+0x244>)
 8001a88:	f002 f97c 	bl	8003d84 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001a8c:	4b50      	ldr	r3, [pc, #320]	; (8001bd0 <HAL_DFSDM_ChannelMspInit+0x234>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	3301      	adds	r3, #1
 8001a92:	4a4f      	ldr	r2, [pc, #316]	; (8001bd0 <HAL_DFSDM_ChannelMspInit+0x234>)
 8001a94:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8001a96:	e08f      	b.n	8001bb8 <HAL_DFSDM_ChannelMspInit+0x21c>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a48      	ldr	r2, [pc, #288]	; (8001bc0 <HAL_DFSDM_ChannelMspInit+0x224>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	f000 808a 	beq.w	8001bb8 <HAL_DFSDM_ChannelMspInit+0x21c>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a46      	ldr	r2, [pc, #280]	; (8001bc4 <HAL_DFSDM_ChannelMspInit+0x228>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	f000 8084 	beq.w	8001bb8 <HAL_DFSDM_ChannelMspInit+0x21c>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a44      	ldr	r2, [pc, #272]	; (8001bc8 <HAL_DFSDM_ChannelMspInit+0x22c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d07e      	beq.n	8001bb8 <HAL_DFSDM_ChannelMspInit+0x21c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a43      	ldr	r2, [pc, #268]	; (8001bcc <HAL_DFSDM_ChannelMspInit+0x230>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d079      	beq.n	8001bb8 <HAL_DFSDM_ChannelMspInit+0x21c>
 8001ac4:	4b47      	ldr	r3, [pc, #284]	; (8001be4 <HAL_DFSDM_ChannelMspInit+0x248>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d175      	bne.n	8001bb8 <HAL_DFSDM_ChannelMspInit+0x21c>
    HAL_RCC_DFSDM2_CLK_ENABLED++;
 8001acc:	4b46      	ldr	r3, [pc, #280]	; (8001be8 <HAL_DFSDM_ChannelMspInit+0x24c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	4a45      	ldr	r2, [pc, #276]	; (8001be8 <HAL_DFSDM_ChannelMspInit+0x24c>)
 8001ad4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM2_CLK_ENABLED==1){
 8001ad6:	4b44      	ldr	r3, [pc, #272]	; (8001be8 <HAL_DFSDM_ChannelMspInit+0x24c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d10d      	bne.n	8001afa <HAL_DFSDM_ChannelMspInit+0x15e>
      __HAL_RCC_DFSDM2_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	4a3c      	ldr	r2, [pc, #240]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001ae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aec:	6453      	str	r3, [r2, #68]	; 0x44
 8001aee:	4b3a      	ldr	r3, [pc, #232]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a35      	ldr	r2, [pc, #212]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b33      	ldr	r3, [pc, #204]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a2e      	ldr	r2, [pc, #184]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001b20:	f043 0308 	orr.w	r3, r3, #8
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a27      	ldr	r2, [pc, #156]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001b5e:	2307      	movs	r3, #7
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b66:	4619      	mov	r1, r3
 8001b68:	481c      	ldr	r0, [pc, #112]	; (8001bdc <HAL_DFSDM_ChannelMspInit+0x240>)
 8001b6a:	f002 f90b 	bl	8003d84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001b6e:	2304      	movs	r3, #4
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b86:	4619      	mov	r1, r3
 8001b88:	4815      	ldr	r0, [pc, #84]	; (8001be0 <HAL_DFSDM_ChannelMspInit+0x244>)
 8001b8a:	f002 f8fb 	bl	8003d84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001b9e:	2306      	movs	r3, #6
 8001ba0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4810      	ldr	r0, [pc, #64]	; (8001bec <HAL_DFSDM_ChannelMspInit+0x250>)
 8001baa:	f002 f8eb 	bl	8003d84 <HAL_GPIO_Init>
  DFSDM2_Init++;
 8001bae:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <HAL_DFSDM_ChannelMspInit+0x248>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <HAL_DFSDM_ChannelMspInit+0x248>)
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	3738      	adds	r7, #56	; 0x38
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40016000 	.word	0x40016000
 8001bc4:	40016020 	.word	0x40016020
 8001bc8:	40016040 	.word	0x40016040
 8001bcc:	40016060 	.word	0x40016060
 8001bd0:	200000a4 	.word	0x200000a4
 8001bd4:	2000009c 	.word	0x2000009c
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40020c00 	.word	0x40020c00
 8001be4:	200000a8 	.word	0x200000a8
 8001be8:	200000a0 	.word	0x200000a0
 8001bec:	40020400 	.word	0x40020400

08001bf0 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <HAL_FMPI2C_MspInit+0x84>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d12b      	bne.n	8001c6a <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <HAL_FMPI2C_MspInit+0x88>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <HAL_FMPI2C_MspInit+0x88>)
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_FMPI2C_MspInit+0x88>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration    
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8001c2e:	23c0      	movs	r3, #192	; 0xc0
 8001c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c32:	2312      	movs	r3, #18
 8001c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001c3e:	2304      	movs	r3, #4
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	480c      	ldr	r0, [pc, #48]	; (8001c7c <HAL_FMPI2C_MspInit+0x8c>)
 8001c4a:	f002 f89b 	bl	8003d84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_FMPI2C_MspInit+0x88>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <HAL_FMPI2C_MspInit+0x88>)
 8001c58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_FMPI2C_MspInit+0x88>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8001c6a:	bf00      	nop
 8001c6c:	3728      	adds	r7, #40	; 0x28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40006000 	.word	0x40006000
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020800 	.word	0x40020800

08001c80 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08c      	sub	sp, #48	; 0x30
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 031c 	add.w	r3, r7, #28
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a4f      	ldr	r2, [pc, #316]	; (8001ddc <HAL_I2S_MspInit+0x15c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	f040 8097 	bne.w	8001dd2 <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	4b4d      	ldr	r3, [pc, #308]	; (8001de0 <HAL_I2S_MspInit+0x160>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	4a4c      	ldr	r2, [pc, #304]	; (8001de0 <HAL_I2S_MspInit+0x160>)
 8001cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb4:	4b4a      	ldr	r3, [pc, #296]	; (8001de0 <HAL_I2S_MspInit+0x160>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	4b46      	ldr	r3, [pc, #280]	; (8001de0 <HAL_I2S_MspInit+0x160>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	4a45      	ldr	r2, [pc, #276]	; (8001de0 <HAL_I2S_MspInit+0x160>)
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd0:	4b43      	ldr	r3, [pc, #268]	; (8001de0 <HAL_I2S_MspInit+0x160>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <HAL_I2S_MspInit+0x160>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	4a3e      	ldr	r2, [pc, #248]	; (8001de0 <HAL_I2S_MspInit+0x160>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6313      	str	r3, [r2, #48]	; 0x30
 8001cec:	4b3c      	ldr	r3, [pc, #240]	; (8001de0 <HAL_I2S_MspInit+0x160>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	4b38      	ldr	r3, [pc, #224]	; (8001de0 <HAL_I2S_MspInit+0x160>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	4a37      	ldr	r2, [pc, #220]	; (8001de0 <HAL_I2S_MspInit+0x160>)
 8001d02:	f043 0308 	orr.w	r3, r3, #8
 8001d06:	6313      	str	r3, [r2, #48]	; 0x30
 8001d08:	4b35      	ldr	r3, [pc, #212]	; (8001de0 <HAL_I2S_MspInit+0x160>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d14:	2300      	movs	r3, #0
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	4b31      	ldr	r3, [pc, #196]	; (8001de0 <HAL_I2S_MspInit+0x160>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	4a30      	ldr	r2, [pc, #192]	; (8001de0 <HAL_I2S_MspInit+0x160>)
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	6313      	str	r3, [r2, #48]	; 0x30
 8001d24:	4b2e      	ldr	r3, [pc, #184]	; (8001de0 <HAL_I2S_MspInit+0x160>)
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8001d30:	2304      	movs	r3, #4
 8001d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001d40:	2306      	movs	r3, #6
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 031c 	add.w	r3, r7, #28
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4826      	ldr	r0, [pc, #152]	; (8001de4 <HAL_I2S_MspInit+0x164>)
 8001d4c:	f002 f81a 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8001d50:	2308      	movs	r3, #8
 8001d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d60:	2305      	movs	r3, #5
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	4619      	mov	r1, r3
 8001d6a:	481e      	ldr	r0, [pc, #120]	; (8001de4 <HAL_I2S_MspInit+0x164>)
 8001d6c:	f002 f80a 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001d70:	2308      	movs	r3, #8
 8001d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d80:	2305      	movs	r3, #5
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001d84:	f107 031c 	add.w	r3, r7, #28
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4817      	ldr	r0, [pc, #92]	; (8001de8 <HAL_I2S_MspInit+0x168>)
 8001d8c:	f001 fffa 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8001d90:	2308      	movs	r3, #8
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001da0:	2305      	movs	r3, #5
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	4619      	mov	r1, r3
 8001daa:	4810      	ldr	r0, [pc, #64]	; (8001dec <HAL_I2S_MspInit+0x16c>)
 8001dac:	f001 ffea 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dc2:	2305      	movs	r3, #5
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8001dc6:	f107 031c 	add.w	r3, r7, #28
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4808      	ldr	r0, [pc, #32]	; (8001df0 <HAL_I2S_MspInit+0x170>)
 8001dce:	f001 ffd9 	bl	8003d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001dd2:	bf00      	nop
 8001dd4:	3730      	adds	r7, #48	; 0x30
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40003800 	.word	0x40003800
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020800 	.word	0x40020800
 8001de8:	40020000 	.word	0x40020000
 8001dec:	40020c00 	.word	0x40020c00
 8001df0:	40020400 	.word	0x40020400

08001df4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08e      	sub	sp, #56	; 0x38
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a56      	ldr	r2, [pc, #344]	; (8001f6c <HAL_QSPI_MspInit+0x178>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	f040 80a6 	bne.w	8001f64 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001e18:	2300      	movs	r3, #0
 8001e1a:	623b      	str	r3, [r7, #32]
 8001e1c:	4b54      	ldr	r3, [pc, #336]	; (8001f70 <HAL_QSPI_MspInit+0x17c>)
 8001e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e20:	4a53      	ldr	r2, [pc, #332]	; (8001f70 <HAL_QSPI_MspInit+0x17c>)
 8001e22:	f043 0302 	orr.w	r3, r3, #2
 8001e26:	6393      	str	r3, [r2, #56]	; 0x38
 8001e28:	4b51      	ldr	r3, [pc, #324]	; (8001f70 <HAL_QSPI_MspInit+0x17c>)
 8001e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	623b      	str	r3, [r7, #32]
 8001e32:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	4b4d      	ldr	r3, [pc, #308]	; (8001f70 <HAL_QSPI_MspInit+0x17c>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	4a4c      	ldr	r2, [pc, #304]	; (8001f70 <HAL_QSPI_MspInit+0x17c>)
 8001e3e:	f043 0310 	orr.w	r3, r3, #16
 8001e42:	6313      	str	r3, [r2, #48]	; 0x30
 8001e44:	4b4a      	ldr	r3, [pc, #296]	; (8001f70 <HAL_QSPI_MspInit+0x17c>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e50:	2300      	movs	r3, #0
 8001e52:	61bb      	str	r3, [r7, #24]
 8001e54:	4b46      	ldr	r3, [pc, #280]	; (8001f70 <HAL_QSPI_MspInit+0x17c>)
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	4a45      	ldr	r2, [pc, #276]	; (8001f70 <HAL_QSPI_MspInit+0x17c>)
 8001e5a:	f043 0320 	orr.w	r3, r3, #32
 8001e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e60:	4b43      	ldr	r3, [pc, #268]	; (8001f70 <HAL_QSPI_MspInit+0x17c>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	4b3f      	ldr	r3, [pc, #252]	; (8001f70 <HAL_QSPI_MspInit+0x17c>)
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	4a3e      	ldr	r2, [pc, #248]	; (8001f70 <HAL_QSPI_MspInit+0x17c>)
 8001e76:	f043 0302 	orr.w	r3, r3, #2
 8001e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7c:	4b3c      	ldr	r3, [pc, #240]	; (8001f70 <HAL_QSPI_MspInit+0x17c>)
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	4b38      	ldr	r3, [pc, #224]	; (8001f70 <HAL_QSPI_MspInit+0x17c>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	4a37      	ldr	r2, [pc, #220]	; (8001f70 <HAL_QSPI_MspInit+0x17c>)
 8001e92:	f043 0308 	orr.w	r3, r3, #8
 8001e96:	6313      	str	r3, [r2, #48]	; 0x30
 8001e98:	4b35      	ldr	r3, [pc, #212]	; (8001f70 <HAL_QSPI_MspInit+0x17c>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <HAL_QSPI_MspInit+0x17c>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4a30      	ldr	r2, [pc, #192]	; (8001f70 <HAL_QSPI_MspInit+0x17c>)
 8001eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <HAL_QSPI_MspInit+0x17c>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001ed0:	2309      	movs	r3, #9
 8001ed2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4826      	ldr	r0, [pc, #152]	; (8001f74 <HAL_QSPI_MspInit+0x180>)
 8001edc:	f001 ff52 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001ee0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ef2:	230a      	movs	r3, #10
 8001ef4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efa:	4619      	mov	r1, r3
 8001efc:	481e      	ldr	r0, [pc, #120]	; (8001f78 <HAL_QSPI_MspInit+0x184>)
 8001efe:	f001 ff41 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001f02:	2304      	movs	r3, #4
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001f12:	2309      	movs	r3, #9
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4817      	ldr	r0, [pc, #92]	; (8001f7c <HAL_QSPI_MspInit+0x188>)
 8001f1e:	f001 ff31 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001f22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001f34:	2309      	movs	r3, #9
 8001f36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4810      	ldr	r0, [pc, #64]	; (8001f80 <HAL_QSPI_MspInit+0x18c>)
 8001f40:	f001 ff20 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001f44:	2340      	movs	r3, #64	; 0x40
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f50:	2303      	movs	r3, #3
 8001f52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f54:	230a      	movs	r3, #10
 8001f56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4809      	ldr	r0, [pc, #36]	; (8001f84 <HAL_QSPI_MspInit+0x190>)
 8001f60:	f001 ff10 	bl	8003d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001f64:	bf00      	nop
 8001f66:	3738      	adds	r7, #56	; 0x38
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	a0001000 	.word	0xa0001000
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40021400 	.word	0x40021400
 8001f7c:	40020400 	.word	0x40020400
 8001f80:	40020c00 	.word	0x40020c00
 8001f84:	40021800 	.word	0x40021800

08001f88 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	; 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a31      	ldr	r2, [pc, #196]	; (800206c <HAL_SD_MspInit+0xe4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d15b      	bne.n	8002062 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	4b30      	ldr	r3, [pc, #192]	; (8002070 <HAL_SD_MspInit+0xe8>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	4a2f      	ldr	r2, [pc, #188]	; (8002070 <HAL_SD_MspInit+0xe8>)
 8001fb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fba:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_SD_MspInit+0xe8>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b29      	ldr	r3, [pc, #164]	; (8002070 <HAL_SD_MspInit+0xe8>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a28      	ldr	r2, [pc, #160]	; (8002070 <HAL_SD_MspInit+0xe8>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_SD_MspInit+0xe8>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	4b22      	ldr	r3, [pc, #136]	; (8002070 <HAL_SD_MspInit+0xe8>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a21      	ldr	r2, [pc, #132]	; (8002070 <HAL_SD_MspInit+0xe8>)
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <HAL_SD_MspInit+0xe8>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK 
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001ffe:	2340      	movs	r3, #64	; 0x40
 8002000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800200e:	230c      	movs	r3, #12
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	4816      	ldr	r0, [pc, #88]	; (8002074 <HAL_SD_MspInit+0xec>)
 800201a:	f001 feb3 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin;
 800201e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202c:	2303      	movs	r3, #3
 800202e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002030:	230c      	movs	r3, #12
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	4619      	mov	r1, r3
 800203a:	480f      	ldr	r0, [pc, #60]	; (8002078 <HAL_SD_MspInit+0xf0>)
 800203c:	f001 fea2 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_CLK_Pin;
 8002040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800204a:	2301      	movs	r3, #1
 800204c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204e:	2303      	movs	r3, #3
 8002050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002052:	230c      	movs	r3, #12
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CLK_GPIO_Port, &GPIO_InitStruct);
 8002056:	f107 0314 	add.w	r3, r7, #20
 800205a:	4619      	mov	r1, r3
 800205c:	4806      	ldr	r0, [pc, #24]	; (8002078 <HAL_SD_MspInit+0xf0>)
 800205e:	f001 fe91 	bl	8003d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002062:	bf00      	nop
 8002064:	3728      	adds	r7, #40	; 0x28
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40012c00 	.word	0x40012c00
 8002070:	40023800 	.word	0x40023800
 8002074:	40020000 	.word	0x40020000
 8002078:	40020800 	.word	0x40020800

0800207c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08c      	sub	sp, #48	; 0x30
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a33      	ldr	r2, [pc, #204]	; (8002168 <HAL_UART_MspInit+0xec>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d12d      	bne.n	80020fa <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	4b32      	ldr	r3, [pc, #200]	; (800216c <HAL_UART_MspInit+0xf0>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	4a31      	ldr	r2, [pc, #196]	; (800216c <HAL_UART_MspInit+0xf0>)
 80020a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ac:	6453      	str	r3, [r2, #68]	; 0x44
 80020ae:	4b2f      	ldr	r3, [pc, #188]	; (800216c <HAL_UART_MspInit+0xf0>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b6:	61bb      	str	r3, [r7, #24]
 80020b8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	4b2b      	ldr	r3, [pc, #172]	; (800216c <HAL_UART_MspInit+0xf0>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a2a      	ldr	r2, [pc, #168]	; (800216c <HAL_UART_MspInit+0xf0>)
 80020c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b28      	ldr	r3, [pc, #160]	; (800216c <HAL_UART_MspInit+0xf0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration    
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX 
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 80020d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80020da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020e0:	2301      	movs	r3, #1
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e4:	2303      	movs	r3, #3
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 80020e8:	230b      	movs	r3, #11
 80020ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020ec:	f107 031c 	add.w	r3, r7, #28
 80020f0:	4619      	mov	r1, r3
 80020f2:	481f      	ldr	r0, [pc, #124]	; (8002170 <HAL_UART_MspInit+0xf4>)
 80020f4:	f001 fe46 	bl	8003d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80020f8:	e031      	b.n	800215e <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_UART_MspInit+0xf8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d12c      	bne.n	800215e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	4b18      	ldr	r3, [pc, #96]	; (800216c <HAL_UART_MspInit+0xf0>)
 800210a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210c:	4a17      	ldr	r2, [pc, #92]	; (800216c <HAL_UART_MspInit+0xf0>)
 800210e:	f043 0320 	orr.w	r3, r3, #32
 8002112:	6453      	str	r3, [r2, #68]	; 0x44
 8002114:	4b15      	ldr	r3, [pc, #84]	; (800216c <HAL_UART_MspInit+0xf0>)
 8002116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_UART_MspInit+0xf0>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	4a10      	ldr	r2, [pc, #64]	; (800216c <HAL_UART_MspInit+0xf0>)
 800212a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800212e:	6313      	str	r3, [r2, #48]	; 0x30
 8002130:	4b0e      	ldr	r3, [pc, #56]	; (800216c <HAL_UART_MspInit+0xf0>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 800213c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214a:	2303      	movs	r3, #3
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800214e:	2308      	movs	r3, #8
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002152:	f107 031c 	add.w	r3, r7, #28
 8002156:	4619      	mov	r1, r3
 8002158:	4805      	ldr	r0, [pc, #20]	; (8002170 <HAL_UART_MspInit+0xf4>)
 800215a:	f001 fe13 	bl	8003d84 <HAL_GPIO_Init>
}
 800215e:	bf00      	nop
 8002160:	3730      	adds	r7, #48	; 0x30
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40011c00 	.word	0x40011c00
 800216c:	40023800 	.word	0x40023800
 8002170:	40021800 	.word	0x40021800
 8002174:	40011400 	.word	0x40011400

08002178 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800218c:	4b2c      	ldr	r3, [pc, #176]	; (8002240 <HAL_FSMC_MspInit+0xc8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d151      	bne.n	8002238 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8002194:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <HAL_FSMC_MspInit+0xc8>)
 8002196:	2201      	movs	r2, #1
 8002198:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	4b29      	ldr	r3, [pc, #164]	; (8002244 <HAL_FSMC_MspInit+0xcc>)
 80021a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a2:	4a28      	ldr	r2, [pc, #160]	; (8002244 <HAL_FSMC_MspInit+0xcc>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6393      	str	r3, [r2, #56]	; 0x38
 80021aa:	4b26      	ldr	r3, [pc, #152]	; (8002244 <HAL_FSMC_MspInit+0xcc>)
 80021ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin 
 80021b6:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80021ba:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin 
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80021c8:	230c      	movs	r3, #12
 80021ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	4619      	mov	r1, r3
 80021d0:	481d      	ldr	r0, [pc, #116]	; (8002248 <HAL_FSMC_MspInit+0xd0>)
 80021d2:	f001 fdd7 	bl	8003d84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin 
 80021d6:	f240 433f 	movw	r3, #1087	; 0x43f
 80021da:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e4:	2303      	movs	r3, #3
 80021e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80021e8:	230c      	movs	r3, #12
 80021ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	4619      	mov	r1, r3
 80021f0:	4816      	ldr	r0, [pc, #88]	; (800224c <HAL_FSMC_MspInit+0xd4>)
 80021f2:	f001 fdc7 	bl	8003d84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin 
 80021f6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80021fa:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin 
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002204:	2303      	movs	r3, #3
 8002206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002208:	230c      	movs	r3, #12
 800220a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	4619      	mov	r1, r3
 8002210:	480f      	ldr	r0, [pc, #60]	; (8002250 <HAL_FSMC_MspInit+0xd8>)
 8002212:	f001 fdb7 	bl	8003d84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin 
 8002216:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 800221a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin 
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002224:	2303      	movs	r3, #3
 8002226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002228:	230c      	movs	r3, #12
 800222a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800222c:	1d3b      	adds	r3, r7, #4
 800222e:	4619      	mov	r1, r3
 8002230:	4808      	ldr	r0, [pc, #32]	; (8002254 <HAL_FSMC_MspInit+0xdc>)
 8002232:	f001 fda7 	bl	8003d84 <HAL_GPIO_Init>
 8002236:	e000      	b.n	800223a <HAL_FSMC_MspInit+0xc2>
    return;
 8002238:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	200000ac 	.word	0x200000ac
 8002244:	40023800 	.word	0x40023800
 8002248:	40021400 	.word	0x40021400
 800224c:	40021800 	.word	0x40021800
 8002250:	40021000 	.word	0x40021000
 8002254:	40020c00 	.word	0x40020c00

08002258 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002260:	f7ff ff8a 	bl	8002178 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227e:	e7fe      	b.n	800227e <HardFault_Handler+0x4>

08002280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <MemManage_Handler+0x4>

08002286 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800228a:	e7fe      	b.n	800228a <BusFault_Handler+0x4>

0800228c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002290:	e7fe      	b.n	8002290 <UsageFault_Handler+0x4>

08002292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c0:	f000 f94c 	bl	800255c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <DMA2_Stream0_IRQHandler+0x10>)
 80022ce:	f001 fa17 	bl	8003700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200074f8 	.word	0x200074f8

080022dc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm2_flt0);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <DMA2_Stream4_IRQHandler+0x10>)
 80022e2:	f001 fa0d 	bl	8003700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	2000766c 	.word	0x2000766c

080022f0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm2_flt1);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <DMA2_Stream5_IRQHandler+0x10>)
 80022f6:	f001 fa03 	bl	8003700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	2000760c 	.word	0x2000760c

08002304 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	e00a      	b.n	800232c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002316:	f3af 8000 	nop.w
 800231a:	4601      	mov	r1, r0
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	60ba      	str	r2, [r7, #8]
 8002322:	b2ca      	uxtb	r2, r1
 8002324:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	3301      	adds	r3, #1
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	429a      	cmp	r2, r3
 8002332:	dbf0      	blt.n	8002316 <_read+0x12>
	}

return len;
 8002334:	687b      	ldr	r3, [r7, #4]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e009      	b.n	8002364 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	60ba      	str	r2, [r7, #8]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3301      	adds	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	dbf1      	blt.n	8002350 <_write+0x12>
	}
	return len;
 800236c:	687b      	ldr	r3, [r7, #4]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <_close>:

int _close(int file)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
	return -1;
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800239e:	605a      	str	r2, [r3, #4]
	return 0;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <_isatty>:

int _isatty(int file)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
	return 1;
 80023b6:	2301      	movs	r3, #1
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
	return 0;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <_sbrk+0x50>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <_sbrk+0x16>
		heap_end = &end;
 80023f0:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <_sbrk+0x50>)
 80023f2:	4a10      	ldr	r2, [pc, #64]	; (8002434 <_sbrk+0x54>)
 80023f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80023f6:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <_sbrk+0x50>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <_sbrk+0x50>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4413      	add	r3, r2
 8002404:	466a      	mov	r2, sp
 8002406:	4293      	cmp	r3, r2
 8002408:	d907      	bls.n	800241a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800240a:	f008 feb3 	bl	800b174 <__errno>
 800240e:	4602      	mov	r2, r0
 8002410:	230c      	movs	r3, #12
 8002412:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002414:	f04f 33ff 	mov.w	r3, #4294967295
 8002418:	e006      	b.n	8002428 <_sbrk+0x48>
	}

	heap_end += incr;
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <_sbrk+0x50>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	4a03      	ldr	r2, [pc, #12]	; (8002430 <_sbrk+0x50>)
 8002424:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002426:	68fb      	ldr	r3, [r7, #12]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	200000b0 	.word	0x200000b0
 8002434:	2000c978 	.word	0x2000c978

08002438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <SystemInit+0x28>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002442:	4a07      	ldr	r2, [pc, #28]	; (8002460 <SystemInit+0x28>)
 8002444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <SystemInit+0x28>)
 800244e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002452:	609a      	str	r2, [r3, #8]
#endif
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002464:	f8df d034 	ldr.w	sp, [pc, #52]	; 800249c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002468:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800246a:	e003      	b.n	8002474 <LoopCopyDataInit>

0800246c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800246e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002470:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002472:	3104      	adds	r1, #4

08002474 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002474:	480b      	ldr	r0, [pc, #44]	; (80024a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002476:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002478:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800247a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800247c:	d3f6      	bcc.n	800246c <CopyDataInit>
  ldr  r2, =_sbss
 800247e:	4a0b      	ldr	r2, [pc, #44]	; (80024ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002480:	e002      	b.n	8002488 <LoopFillZerobss>

08002482 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002482:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002484:	f842 3b04 	str.w	r3, [r2], #4

08002488 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800248a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800248c:	d3f9      	bcc.n	8002482 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800248e:	f7ff ffd3 	bl	8002438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002492:	f008 fe75 	bl	800b180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002496:	f7fe f8fb 	bl	8000690 <main>
  bx  lr    
 800249a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800249c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80024a0:	0800c648 	.word	0x0800c648
  ldr  r0, =_sdata
 80024a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024a8:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80024ac:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80024b0:	2000c978 	.word	0x2000c978

080024b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024b4:	e7fe      	b.n	80024b4 <ADC_IRQHandler>
	...

080024b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024bc:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <HAL_Init+0x40>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0d      	ldr	r2, [pc, #52]	; (80024f8 <HAL_Init+0x40>)
 80024c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_Init+0x40>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <HAL_Init+0x40>)
 80024ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <HAL_Init+0x40>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a07      	ldr	r2, [pc, #28]	; (80024f8 <HAL_Init+0x40>)
 80024da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e0:	2003      	movs	r0, #3
 80024e2:	f000 fbbf 	bl	8002c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024e6:	2000      	movs	r0, #0
 80024e8:	f000 f808 	bl	80024fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024ec:	f7fe ff90 	bl	8001410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40023c00 	.word	0x40023c00

080024fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_InitTick+0x54>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_InitTick+0x58>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4619      	mov	r1, r3
 800250e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002512:	fbb3 f3f1 	udiv	r3, r3, r1
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fbd7 	bl	8002cce <HAL_SYSTICK_Config>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e00e      	b.n	8002548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b0f      	cmp	r3, #15
 800252e:	d80a      	bhi.n	8002546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002530:	2200      	movs	r2, #0
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
 8002538:	f000 fb9f 	bl	8002c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800253c:	4a06      	ldr	r2, [pc, #24]	; (8002558 <HAL_InitTick+0x5c>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e000      	b.n	8002548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000008 	.word	0x20000008
 8002554:	20000010 	.word	0x20000010
 8002558:	2000000c 	.word	0x2000000c

0800255c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_IncTick+0x20>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_IncTick+0x24>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4413      	add	r3, r2
 800256c:	4a04      	ldr	r2, [pc, #16]	; (8002580 <HAL_IncTick+0x24>)
 800256e:	6013      	str	r3, [r2, #0]
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000010 	.word	0x20000010
 8002580:	2000a900 	.word	0x2000a900

08002584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return uwTick;
 8002588:	4b03      	ldr	r3, [pc, #12]	; (8002598 <HAL_GetTick+0x14>)
 800258a:	681b      	ldr	r3, [r3, #0]
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	2000a900 	.word	0x2000a900

0800259c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025a4:	f7ff ffee 	bl	8002584 <HAL_GetTick>
 80025a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d005      	beq.n	80025c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <HAL_Delay+0x40>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4413      	add	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025c2:	bf00      	nop
 80025c4:	f7ff ffde 	bl	8002584 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d8f7      	bhi.n	80025c4 <HAL_Delay+0x28>
  {
  }
}
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000010 	.word	0x20000010

080025e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e033      	b.n	800265e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fe ff2e 	bl	8001460 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	d118      	bne.n	8002650 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002626:	f023 0302 	bic.w	r3, r3, #2
 800262a:	f043 0202 	orr.w	r2, r3, #2
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f94a 	bl	80028cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f023 0303 	bic.w	r3, r3, #3
 8002646:	f043 0201 	orr.w	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	641a      	str	r2, [r3, #64]	; 0x40
 800264e:	e001      	b.n	8002654 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800265c:	7bfb      	ldrb	r3, [r7, #15]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x1c>
 8002680:	2302      	movs	r3, #2
 8002682:	e113      	b.n	80028ac <HAL_ADC_ConfigChannel+0x244>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b09      	cmp	r3, #9
 8002692:	d925      	bls.n	80026e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68d9      	ldr	r1, [r3, #12]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	4613      	mov	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	3b1e      	subs	r3, #30
 80026aa:	2207      	movs	r2, #7
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43da      	mvns	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	400a      	ands	r2, r1
 80026b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68d9      	ldr	r1, [r3, #12]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	4618      	mov	r0, r3
 80026cc:	4603      	mov	r3, r0
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4403      	add	r3, r0
 80026d2:	3b1e      	subs	r3, #30
 80026d4:	409a      	lsls	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	e022      	b.n	8002726 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6919      	ldr	r1, [r3, #16]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	4613      	mov	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	2207      	movs	r2, #7
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43da      	mvns	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	400a      	ands	r2, r1
 8002702:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6919      	ldr	r1, [r3, #16]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	4618      	mov	r0, r3
 8002716:	4603      	mov	r3, r0
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4403      	add	r3, r0
 800271c:	409a      	lsls	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b06      	cmp	r3, #6
 800272c:	d824      	bhi.n	8002778 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	3b05      	subs	r3, #5
 8002740:	221f      	movs	r2, #31
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	400a      	ands	r2, r1
 800274e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	4618      	mov	r0, r3
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	3b05      	subs	r3, #5
 800276a:	fa00 f203 	lsl.w	r2, r0, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
 8002776:	e04c      	b.n	8002812 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b0c      	cmp	r3, #12
 800277e:	d824      	bhi.n	80027ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	3b23      	subs	r3, #35	; 0x23
 8002792:	221f      	movs	r2, #31
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43da      	mvns	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	400a      	ands	r2, r1
 80027a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	4618      	mov	r0, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	3b23      	subs	r3, #35	; 0x23
 80027bc:	fa00 f203 	lsl.w	r2, r0, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30
 80027c8:	e023      	b.n	8002812 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	3b41      	subs	r3, #65	; 0x41
 80027dc:	221f      	movs	r2, #31
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	400a      	ands	r2, r1
 80027ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	4618      	mov	r0, r3
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	3b41      	subs	r3, #65	; 0x41
 8002806:	fa00 f203 	lsl.w	r2, r0, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002812:	4b29      	ldr	r3, [pc, #164]	; (80028b8 <HAL_ADC_ConfigChannel+0x250>)
 8002814:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a28      	ldr	r2, [pc, #160]	; (80028bc <HAL_ADC_ConfigChannel+0x254>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d10f      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x1d8>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b12      	cmp	r3, #18
 8002826:	d10b      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1d      	ldr	r2, [pc, #116]	; (80028bc <HAL_ADC_ConfigChannel+0x254>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d12b      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x23a>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a1c      	ldr	r2, [pc, #112]	; (80028c0 <HAL_ADC_ConfigChannel+0x258>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d003      	beq.n	800285c <HAL_ADC_ConfigChannel+0x1f4>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b11      	cmp	r3, #17
 800285a:	d122      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <HAL_ADC_ConfigChannel+0x258>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d111      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_ADC_ConfigChannel+0x25c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a11      	ldr	r2, [pc, #68]	; (80028c8 <HAL_ADC_ConfigChannel+0x260>)
 8002884:	fba2 2303 	umull	r2, r3, r2, r3
 8002888:	0c9a      	lsrs	r2, r3, #18
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002894:	e002      	b.n	800289c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	3b01      	subs	r3, #1
 800289a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f9      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	40012300 	.word	0x40012300
 80028bc:	40012000 	.word	0x40012000
 80028c0:	10000012 	.word	0x10000012
 80028c4:	20000008 	.word	0x20000008
 80028c8:	431bde83 	.word	0x431bde83

080028cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028d4:	4b79      	ldr	r3, [pc, #484]	; (8002abc <ADC_Init+0x1f0>)
 80028d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002900:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	021a      	lsls	r2, r3, #8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002924:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002946:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6899      	ldr	r1, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295e:	4a58      	ldr	r2, [pc, #352]	; (8002ac0 <ADC_Init+0x1f4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d022      	beq.n	80029aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002972:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6899      	ldr	r1, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002994:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6899      	ldr	r1, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	e00f      	b.n	80029ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0202 	bic.w	r2, r2, #2
 80029d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6899      	ldr	r1, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	7e1b      	ldrb	r3, [r3, #24]
 80029e4:	005a      	lsls	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01b      	beq.n	8002a30 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a06:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6859      	ldr	r1, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	3b01      	subs	r3, #1
 8002a24:	035a      	lsls	r2, r3, #13
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	e007      	b.n	8002a40 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a3e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	051a      	lsls	r2, r3, #20
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6899      	ldr	r1, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a82:	025a      	lsls	r2, r3, #9
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6899      	ldr	r1, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	029a      	lsls	r2, r3, #10
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	609a      	str	r2, [r3, #8]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	40012300 	.word	0x40012300
 8002ac0:	0f000001 	.word	0x0f000001

08002ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002af6:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <__NVIC_SetPriorityGrouping+0x44>)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	60d3      	str	r3, [r2, #12]
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <__NVIC_GetPriorityGrouping+0x18>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	f003 0307 	and.w	r3, r3, #7
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	db0b      	blt.n	8002b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	f003 021f 	and.w	r2, r3, #31
 8002b40:	4907      	ldr	r1, [pc, #28]	; (8002b60 <__NVIC_EnableIRQ+0x38>)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	2001      	movs	r0, #1
 8002b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	e000e100 	.word	0xe000e100

08002b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	6039      	str	r1, [r7, #0]
 8002b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	db0a      	blt.n	8002b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	490c      	ldr	r1, [pc, #48]	; (8002bb0 <__NVIC_SetPriority+0x4c>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	0112      	lsls	r2, r2, #4
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	440b      	add	r3, r1
 8002b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b8c:	e00a      	b.n	8002ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4908      	ldr	r1, [pc, #32]	; (8002bb4 <__NVIC_SetPriority+0x50>)
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	3b04      	subs	r3, #4
 8002b9c:	0112      	lsls	r2, r2, #4
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	761a      	strb	r2, [r3, #24]
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	e000e100 	.word	0xe000e100
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b089      	sub	sp, #36	; 0x24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f1c3 0307 	rsb	r3, r3, #7
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	bf28      	it	cs
 8002bd6:	2304      	movcs	r3, #4
 8002bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	2b06      	cmp	r3, #6
 8002be0:	d902      	bls.n	8002be8 <NVIC_EncodePriority+0x30>
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3b03      	subs	r3, #3
 8002be6:	e000      	b.n	8002bea <NVIC_EncodePriority+0x32>
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bec:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c00:	f04f 31ff 	mov.w	r1, #4294967295
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0a:	43d9      	mvns	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c10:	4313      	orrs	r3, r2
         );
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3724      	adds	r7, #36	; 0x24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
	...

08002c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c30:	d301      	bcc.n	8002c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c32:	2301      	movs	r3, #1
 8002c34:	e00f      	b.n	8002c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c36:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <SysTick_Config+0x40>)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c3e:	210f      	movs	r1, #15
 8002c40:	f04f 30ff 	mov.w	r0, #4294967295
 8002c44:	f7ff ff8e 	bl	8002b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <SysTick_Config+0x40>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c4e:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <SysTick_Config+0x40>)
 8002c50:	2207      	movs	r2, #7
 8002c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	e000e010 	.word	0xe000e010

08002c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff ff29 	bl	8002ac4 <__NVIC_SetPriorityGrouping>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b086      	sub	sp, #24
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	4603      	mov	r3, r0
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
 8002c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c8c:	f7ff ff3e 	bl	8002b0c <__NVIC_GetPriorityGrouping>
 8002c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	6978      	ldr	r0, [r7, #20]
 8002c98:	f7ff ff8e 	bl	8002bb8 <NVIC_EncodePriority>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff5d 	bl	8002b64 <__NVIC_SetPriority>
}
 8002caa:	bf00      	nop
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	4603      	mov	r3, r0
 8002cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff ff31 	bl	8002b28 <__NVIC_EnableIRQ>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff ffa2 	bl	8002c20 <SysTick_Config>
 8002cdc:	4603      	mov	r3, r0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e014      	b.n	8002d22 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	791b      	ldrb	r3, [r3, #4]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d105      	bne.n	8002d0e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7fe fc25 	bl	8001558 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2202      	movs	r2, #2
 8002d12:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b087      	sub	sp, #28
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	795b      	ldrb	r3, [r3, #5]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_DAC_ConfigChannel+0x20>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e036      	b.n	8002db8 <HAL_DAC_ConfigChannel+0x8e>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2202      	movs	r2, #2
 8002d54:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002d5e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6819      	ldr	r1, [r3, #0]
 8002d98:	22c0      	movs	r2, #192	; 0xc0
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43da      	mvns	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	400a      	ands	r2, r1
 8002da8:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e0cf      	b.n	8002f76 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a69      	ldr	r2, [pc, #420]	; (8002f80 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00e      	beq.n	8002dfe <HAL_DFSDM_ChannelInit+0x3a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a67      	ldr	r2, [pc, #412]	; (8002f84 <HAL_DFSDM_ChannelInit+0x1c0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d009      	beq.n	8002dfe <HAL_DFSDM_ChannelInit+0x3a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a66      	ldr	r2, [pc, #408]	; (8002f88 <HAL_DFSDM_ChannelInit+0x1c4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d004      	beq.n	8002dfe <HAL_DFSDM_ChannelInit+0x3a>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a64      	ldr	r2, [pc, #400]	; (8002f8c <HAL_DFSDM_ChannelInit+0x1c8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d106      	bne.n	8002e0c <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8002dfe:	4b64      	ldr	r3, [pc, #400]	; (8002f90 <HAL_DFSDM_ChannelInit+0x1cc>)
 8002e00:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8002e02:	4b64      	ldr	r3, [pc, #400]	; (8002f94 <HAL_DFSDM_ChannelInit+0x1d0>)
 8002e04:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8002e06:	4b5e      	ldr	r3, [pc, #376]	; (8002f80 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	e005      	b.n	8002e18 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8002e0c:	4b62      	ldr	r3, [pc, #392]	; (8002f98 <HAL_DFSDM_ChannelInit+0x1d4>)
 8002e0e:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8002e10:	4b62      	ldr	r3, [pc, #392]	; (8002f9c <HAL_DFSDM_ChannelInit+0x1d8>)
 8002e12:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8002e14:	4b62      	ldr	r3, [pc, #392]	; (8002fa0 <HAL_DFSDM_ChannelInit+0x1dc>)
 8002e16:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 faaf 	bl	8003380 <DFSDM_GetChannelFromInstance>
 8002e22:	4603      	mov	r3, r0
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4413      	add	r3, r2
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0a0      	b.n	8002f76 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7fe fdb1 	bl	800199c <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d125      	bne.n	8002e98 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	791b      	ldrb	r3, [r3, #4]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d108      	bne.n	8002e8c <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	041b      	lsls	r3, r3, #16
 8002e86:	431a      	orrs	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002ea6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6819      	ldr	r1, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002eb6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002ebc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 020f 	bic.w	r2, r2, #15
 8002ed4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6819      	ldr	r1, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002efc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6899      	ldr	r1, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f002 0207 	and.w	r2, r2, #7
 8002f28:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6859      	ldr	r1, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f54:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fa0c 	bl	8003380 <DFSDM_GetChannelFromInstance>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4413      	add	r3, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40016000 	.word	0x40016000
 8002f84:	40016020 	.word	0x40016020
 8002f88:	40016040 	.word	0x40016040
 8002f8c:	40016060 	.word	0x40016060
 8002f90:	200000b4 	.word	0x200000b4
 8002f94:	200000b8 	.word	0x200000b8
 8002f98:	200000c8 	.word	0x200000c8
 8002f9c:	200000cc 	.word	0x200000cc
 8002fa0:	40016400 	.word	0x40016400

08002fa4 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e0d9      	b.n	800316a <HAL_DFSDM_FilterInit+0x1c6>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a6e      	ldr	r2, [pc, #440]	; (8003174 <HAL_DFSDM_FilterInit+0x1d0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d109      	bne.n	8002fd4 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d003      	beq.n	8002fd0 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0ca      	b.n	800316a <HAL_DFSDM_FilterInit+0x1c6>
  }
#if defined (DFSDM2_Channel0)  
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a67      	ldr	r2, [pc, #412]	; (8003178 <HAL_DFSDM_FilterInit+0x1d4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d109      	bne.n	8002ff2 <HAL_DFSDM_FilterInit+0x4e>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d003      	beq.n	8002fee <HAL_DFSDM_FilterInit+0x4a>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_DFSDM_FilterInit+0x4e>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e0bb      	b.n	800316a <HAL_DFSDM_FilterInit+0x1c6>
  }  
#endif /* DFSDM2_Channel0 */
       
  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1U;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1U;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fe fae8 	bl	80015e0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800301e:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	7a1b      	ldrb	r3, [r3, #8]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d108      	bne.n	800303a <HAL_DFSDM_FilterInit+0x96>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	e007      	b.n	800304a <HAL_DFSDM_FilterInit+0xa6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003048:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	7a5b      	ldrb	r3, [r3, #9]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d108      	bne.n	8003064 <HAL_DFSDM_FilterInit+0xc0>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	e007      	b.n	8003074 <HAL_DFSDM_FilterInit+0xd0>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003072:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8003082:	f023 0308 	bic.w	r3, r3, #8
 8003086:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d108      	bne.n	80030a2 <HAL_DFSDM_FilterInit+0xfe>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6819      	ldr	r1, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	7c1b      	ldrb	r3, [r3, #16]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d108      	bne.n	80030bc <HAL_DFSDM_FilterInit+0x118>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0210 	orr.w	r2, r2, #16
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e007      	b.n	80030cc <HAL_DFSDM_FilterInit+0x128>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0210 	bic.w	r2, r2, #16
 80030ca:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	7c5b      	ldrb	r3, [r3, #17]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d108      	bne.n	80030e6 <HAL_DFSDM_FilterInit+0x142>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0220 	orr.w	r2, r2, #32
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	e007      	b.n	80030f6 <HAL_DFSDM_FilterInit+0x152>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0220 	bic.w	r2, r2, #32
 80030f4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8003104:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8003108:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6959      	ldr	r1, [r3, #20]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	3b01      	subs	r3, #1
 800311a:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800311c:	431a      	orrs	r2, r3
                                     (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003124:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	7c1a      	ldrb	r2, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40016100 	.word	0x40016100
 8003178:	40016500 	.word	0x40016500

0800317c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003192:	2b00      	cmp	r3, #0
 8003194:	d02e      	beq.n	80031f4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 800319c:	2bff      	cmp	r3, #255	; 0xff
 800319e:	d029      	beq.n	80031f4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80031ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b2:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d10d      	bne.n	80031d6 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80031c8:	431a      	orrs	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	e00a      	b.n	80031ec <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6819      	ldr	r1, [r3, #0]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
 80031f2:	e001      	b.n	80031f8 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }  
  else
  {
    status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80031f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0U))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d102      	bne.n	800322a <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	75fb      	strb	r3, [r7, #23]
 8003228:	e066      	b.n	80032f8 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003234:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003238:	d002      	beq.n	8003240 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	75fb      	strb	r3, [r7, #23]
 800323e:	e05b      	b.n	80032f8 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10e      	bne.n	8003266 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10a      	bne.n	8003266 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003256:	2b00      	cmp	r3, #0
 8003258:	d105      	bne.n	8003266 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d002      	beq.n	8003266 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1U))
  {
    status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	75fb      	strb	r3, [r7, #23]
 8003264:	e048      	b.n	80032f8 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10c      	bne.n	8003288 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003272:	2b00      	cmp	r3, #0
 8003274:	d108      	bne.n	8003288 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800327c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003280:	d102      	bne.n	8003288 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	75fb      	strb	r3, [r7, #23]
 8003286:	e037      	b.n	80032f8 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800328e:	2b01      	cmp	r3, #1
 8003290:	d004      	beq.n	800329c <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003298:	2b03      	cmp	r3, #3
 800329a:	d12b      	bne.n	80032f4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	4a18      	ldr	r2, [pc, #96]	; (8003304 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 80032a2:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	4a17      	ldr	r2, [pc, #92]	; (8003308 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 80032aa:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80032b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b6:	d101      	bne.n	80032bc <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 80032b8:	4a14      	ldr	r2, [pc, #80]	; (800330c <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 80032ba:	e000      	b.n	80032be <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 80032bc:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	331c      	adds	r3, #28
 80032ce:	4619      	mov	r1, r3
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f000 f9bc 	bl	8003650 <HAL_DMA_Start_IT>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d006      	beq.n	80032ec <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	22ff      	movs	r2, #255	; 0xff
 80032e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80032ea:	e005      	b.n	80032f8 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f8ab 	bl	8003448 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80032f2:	e001      	b.n	80032f8 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80032f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	08003341 	.word	0x08003341
 8003308:	0800335d 	.word	0x0800335d
 800330c:	08003325 	.word	0x08003325

08003310 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdfsdm_filter);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f7fe f844 	bl	80013c0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334c:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f7fe f846 	bl	80013e0 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003368:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2203      	movs	r2, #3
 800336e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f7ff ffcd 	bl	8003310 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8003376:	bf00      	nop
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a24      	ldr	r2, [pc, #144]	; (800341c <DFSDM_GetChannelFromInstance+0x9c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d003      	beq.n	8003398 <DFSDM_GetChannelFromInstance+0x18>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a23      	ldr	r2, [pc, #140]	; (8003420 <DFSDM_GetChannelFromInstance+0xa0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d102      	bne.n	800339e <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	e037      	b.n	800340e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a20      	ldr	r2, [pc, #128]	; (8003424 <DFSDM_GetChannelFromInstance+0xa4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d003      	beq.n	80033ae <DFSDM_GetChannelFromInstance+0x2e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a1f      	ldr	r2, [pc, #124]	; (8003428 <DFSDM_GetChannelFromInstance+0xa8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d102      	bne.n	80033b4 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 80033ae:	2301      	movs	r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	e02c      	b.n	800340e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a1d      	ldr	r2, [pc, #116]	; (800342c <DFSDM_GetChannelFromInstance+0xac>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d003      	beq.n	80033c4 <DFSDM_GetChannelFromInstance+0x44>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a1c      	ldr	r2, [pc, #112]	; (8003430 <DFSDM_GetChannelFromInstance+0xb0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d102      	bne.n	80033ca <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 80033c4:	2302      	movs	r3, #2
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	e021      	b.n	800340e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a19      	ldr	r2, [pc, #100]	; (8003434 <DFSDM_GetChannelFromInstance+0xb4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d003      	beq.n	80033da <DFSDM_GetChannelFromInstance+0x5a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a18      	ldr	r2, [pc, #96]	; (8003438 <DFSDM_GetChannelFromInstance+0xb8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d102      	bne.n	80033e0 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 80033da:	2303      	movs	r3, #3
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	e016      	b.n	800340e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a16      	ldr	r2, [pc, #88]	; (800343c <DFSDM_GetChannelFromInstance+0xbc>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d102      	bne.n	80033ee <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 80033e8:	2304      	movs	r3, #4
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	e00f      	b.n	800340e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a13      	ldr	r2, [pc, #76]	; (8003440 <DFSDM_GetChannelFromInstance+0xc0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d102      	bne.n	80033fc <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 80033f6:	2305      	movs	r3, #5
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	e008      	b.n	800340e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a11      	ldr	r2, [pc, #68]	; (8003444 <DFSDM_GetChannelFromInstance+0xc4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d102      	bne.n	800340a <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8003404:	2306      	movs	r3, #6
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	e001      	b.n	800340e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 800340a:	2307      	movs	r3, #7
 800340c:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 800340e:	68fb      	ldr	r3, [r7, #12]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	40016000 	.word	0x40016000
 8003420:	40016400 	.word	0x40016400
 8003424:	40016020 	.word	0x40016020
 8003428:	40016420 	.word	0x40016420
 800342c:	40016040 	.word	0x40016040
 8003430:	40016440 	.word	0x40016440
 8003434:	40016060 	.word	0x40016060
 8003438:	40016460 	.word	0x40016460
 800343c:	40016480 	.word	0x40016480
 8003440:	400164a0 	.word	0x400164a0
 8003444:	400164c0 	.word	0x400164c0

08003448 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003454:	2b00      	cmp	r3, #0
 8003456:	d108      	bne.n	800346a <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	e033      	b.n	80034d2 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0201 	bic.w	r2, r2, #1
 8003478:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003488:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0201 	orr.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d116      	bne.n	80034d2 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d107      	bne.n	80034bc <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0202 	orr.w	r2, r2, #2
 80034ba:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1U;
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d102      	bne.n	80034cc <DFSDM_RegConvStart+0x84>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	e000      	b.n	80034ce <DFSDM_RegConvStart+0x86>
 80034cc:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <DFSDM_RegConvStart+0x98>
 80034dc:	2202      	movs	r2, #2
 80034de:	e000      	b.n	80034e2 <DFSDM_RegConvStart+0x9a>
 80034e0:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003500:	f7ff f840 	bl	8002584 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e099      	b.n	8003644 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0201 	bic.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003530:	e00f      	b.n	8003552 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003532:	f7ff f827 	bl	8002584 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b05      	cmp	r3, #5
 800353e:	d908      	bls.n	8003552 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2203      	movs	r2, #3
 800354a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e078      	b.n	8003644 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e8      	bne.n	8003532 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4b38      	ldr	r3, [pc, #224]	; (800364c <HAL_DMA_Init+0x158>)
 800356c:	4013      	ands	r3, r2
 800356e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800357e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800358a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003596:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d107      	bne.n	80035bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	4313      	orrs	r3, r2
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f023 0307 	bic.w	r3, r3, #7
 80035d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d117      	bne.n	8003616 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00e      	beq.n	8003616 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 fa6f 	bl	8003adc <DMA_CheckFifoParam>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2240      	movs	r2, #64	; 0x40
 8003608:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003612:	2301      	movs	r3, #1
 8003614:	e016      	b.n	8003644 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fa26 	bl	8003a70 <DMA_CalcBaseAndBitshift>
 8003624:	4603      	mov	r3, r0
 8003626:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362c:	223f      	movs	r2, #63	; 0x3f
 800362e:	409a      	lsls	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	e010803f 	.word	0xe010803f

08003650 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003666:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_DMA_Start_IT+0x26>
 8003672:	2302      	movs	r3, #2
 8003674:	e040      	b.n	80036f8 <HAL_DMA_Start_IT+0xa8>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	d12f      	bne.n	80036ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2202      	movs	r2, #2
 800368e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f9b8 	bl	8003a14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a8:	223f      	movs	r2, #63	; 0x3f
 80036aa:	409a      	lsls	r2, r3
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0216 	orr.w	r2, r2, #22
 80036be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d007      	beq.n	80036d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0208 	orr.w	r2, r2, #8
 80036d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	e005      	b.n	80036f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036f2:	2302      	movs	r3, #2
 80036f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800370c:	4b92      	ldr	r3, [pc, #584]	; (8003958 <HAL_DMA_IRQHandler+0x258>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a92      	ldr	r2, [pc, #584]	; (800395c <HAL_DMA_IRQHandler+0x25c>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0a9b      	lsrs	r3, r3, #10
 8003718:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372a:	2208      	movs	r2, #8
 800372c:	409a      	lsls	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4013      	ands	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01a      	beq.n	800376c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d013      	beq.n	800376c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0204 	bic.w	r2, r2, #4
 8003752:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003758:	2208      	movs	r2, #8
 800375a:	409a      	lsls	r2, r3
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003764:	f043 0201 	orr.w	r2, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003770:	2201      	movs	r2, #1
 8003772:	409a      	lsls	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d012      	beq.n	80037a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378e:	2201      	movs	r2, #1
 8003790:	409a      	lsls	r2, r3
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379a:	f043 0202 	orr.w	r2, r3, #2
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a6:	2204      	movs	r2, #4
 80037a8:	409a      	lsls	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d012      	beq.n	80037d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00b      	beq.n	80037d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c4:	2204      	movs	r2, #4
 80037c6:	409a      	lsls	r2, r3
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d0:	f043 0204 	orr.w	r2, r3, #4
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037dc:	2210      	movs	r2, #16
 80037de:	409a      	lsls	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d043      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d03c      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fa:	2210      	movs	r2, #16
 80037fc:	409a      	lsls	r2, r3
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d018      	beq.n	8003842 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d108      	bne.n	8003830 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d024      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4798      	blx	r3
 800382e:	e01f      	b.n	8003870 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01b      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
 8003840:	e016      	b.n	8003870 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d107      	bne.n	8003860 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0208 	bic.w	r2, r2, #8
 800385e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003874:	2220      	movs	r2, #32
 8003876:	409a      	lsls	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 808e 	beq.w	800399e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8086 	beq.w	800399e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003896:	2220      	movs	r2, #32
 8003898:	409a      	lsls	r2, r3
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b05      	cmp	r3, #5
 80038a8:	d136      	bne.n	8003918 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0216 	bic.w	r2, r2, #22
 80038b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d103      	bne.n	80038da <HAL_DMA_IRQHandler+0x1da>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d007      	beq.n	80038ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0208 	bic.w	r2, r2, #8
 80038e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ee:	223f      	movs	r2, #63	; 0x3f
 80038f0:	409a      	lsls	r2, r3
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800390a:	2b00      	cmp	r3, #0
 800390c:	d07d      	beq.n	8003a0a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	4798      	blx	r3
        }
        return;
 8003916:	e078      	b.n	8003a0a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01c      	beq.n	8003960 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d108      	bne.n	8003946 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003938:	2b00      	cmp	r3, #0
 800393a:	d030      	beq.n	800399e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
 8003944:	e02b      	b.n	800399e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d027      	beq.n	800399e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	4798      	blx	r3
 8003956:	e022      	b.n	800399e <HAL_DMA_IRQHandler+0x29e>
 8003958:	20000008 	.word	0x20000008
 800395c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10f      	bne.n	800398e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0210 	bic.w	r2, r2, #16
 800397c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d032      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d022      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2205      	movs	r2, #5
 80039b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0201 	bic.w	r2, r2, #1
 80039c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	3301      	adds	r3, #1
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d307      	bcc.n	80039e6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1f2      	bne.n	80039ca <HAL_DMA_IRQHandler+0x2ca>
 80039e4:	e000      	b.n	80039e8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80039e6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
 8003a08:	e000      	b.n	8003a0c <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a0a:	bf00      	nop
    }
  }
}
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop

08003a14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b40      	cmp	r3, #64	; 0x40
 8003a40:	d108      	bne.n	8003a54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a52:	e007      	b.n	8003a64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	60da      	str	r2, [r3, #12]
}
 8003a64:	bf00      	nop
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	3b10      	subs	r3, #16
 8003a80:	4a14      	ldr	r2, [pc, #80]	; (8003ad4 <DMA_CalcBaseAndBitshift+0x64>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	091b      	lsrs	r3, r3, #4
 8003a88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a8a:	4a13      	ldr	r2, [pc, #76]	; (8003ad8 <DMA_CalcBaseAndBitshift+0x68>)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4413      	add	r3, r2
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d909      	bls.n	8003ab2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003aa6:	f023 0303 	bic.w	r3, r3, #3
 8003aaa:	1d1a      	adds	r2, r3, #4
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	659a      	str	r2, [r3, #88]	; 0x58
 8003ab0:	e007      	b.n	8003ac2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003aba:	f023 0303 	bic.w	r3, r3, #3
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	aaaaaaab 	.word	0xaaaaaaab
 8003ad8:	0800c144 	.word	0x0800c144

08003adc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d11f      	bne.n	8003b36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d855      	bhi.n	8003ba8 <DMA_CheckFifoParam+0xcc>
 8003afc:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <DMA_CheckFifoParam+0x28>)
 8003afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b02:	bf00      	nop
 8003b04:	08003b15 	.word	0x08003b15
 8003b08:	08003b27 	.word	0x08003b27
 8003b0c:	08003b15 	.word	0x08003b15
 8003b10:	08003ba9 	.word	0x08003ba9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d045      	beq.n	8003bac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b24:	e042      	b.n	8003bac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b2e:	d13f      	bne.n	8003bb0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b34:	e03c      	b.n	8003bb0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b3e:	d121      	bne.n	8003b84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d836      	bhi.n	8003bb4 <DMA_CheckFifoParam+0xd8>
 8003b46:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <DMA_CheckFifoParam+0x70>)
 8003b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4c:	08003b5d 	.word	0x08003b5d
 8003b50:	08003b63 	.word	0x08003b63
 8003b54:	08003b5d 	.word	0x08003b5d
 8003b58:	08003b75 	.word	0x08003b75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b60:	e02f      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d024      	beq.n	8003bb8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b72:	e021      	b.n	8003bb8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b7c:	d11e      	bne.n	8003bbc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b82:	e01b      	b.n	8003bbc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d902      	bls.n	8003b90 <DMA_CheckFifoParam+0xb4>
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d003      	beq.n	8003b96 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b8e:	e018      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
      break;
 8003b94:	e015      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00e      	beq.n	8003bc0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba6:	e00b      	b.n	8003bc0 <DMA_CheckFifoParam+0xe4>
      break;
 8003ba8:	bf00      	nop
 8003baa:	e00a      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003bac:	bf00      	nop
 8003bae:	e008      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003bb0:	bf00      	nop
 8003bb2:	e006      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003bb4:	bf00      	nop
 8003bb6:	e004      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003bb8:	bf00      	nop
 8003bba:	e002      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
      break;   
 8003bbc:	bf00      	nop
 8003bbe:	e000      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003bc0:	bf00      	nop
    }
  } 
  
  return status; 
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e081      	b.n	8003ce6 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7fd fffa 	bl	8001bf0 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2224      	movs	r2, #36	; 0x24
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0201 	bic.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c20:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c30:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d107      	bne.n	8003c4a <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	e006      	b.n	8003c58 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d104      	bne.n	8003c6a <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c8c:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	ea42 0103 	orr.w	r1, r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	021a      	lsls	r2, r3, #8
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69d9      	ldr	r1, [r3, #28]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1a      	ldr	r2, [r3, #32]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d138      	bne.n	8003d76 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e032      	b.n	8003d78 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2224      	movs	r2, #36	; 0x24
 8003d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0201 	bic.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d40:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6819      	ldr	r1, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 0201 	orr.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	e000      	b.n	8003d78 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d76:	2302      	movs	r3, #2
  }
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b089      	sub	sp, #36	; 0x24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61fb      	str	r3, [r7, #28]
 8003d9e:	e165      	b.n	800406c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003da0:	2201      	movs	r2, #1
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4013      	ands	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	f040 8154 	bne.w	8004066 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d00b      	beq.n	8003dde <HAL_GPIO_Init+0x5a>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d007      	beq.n	8003dde <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dd2:	2b11      	cmp	r3, #17
 8003dd4:	d003      	beq.n	8003dde <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b12      	cmp	r3, #18
 8003ddc:	d130      	bne.n	8003e40 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	2203      	movs	r2, #3
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43db      	mvns	r3, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4013      	ands	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e14:	2201      	movs	r2, #1
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4013      	ands	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	f003 0201 	and.w	r2, r3, #1
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	2203      	movs	r2, #3
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	43db      	mvns	r3, r3
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	4013      	ands	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d003      	beq.n	8003e80 <HAL_GPIO_Init+0xfc>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b12      	cmp	r3, #18
 8003e7e:	d123      	bne.n	8003ec8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	08da      	lsrs	r2, r3, #3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3208      	adds	r2, #8
 8003e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	220f      	movs	r2, #15
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	08da      	lsrs	r2, r3, #3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3208      	adds	r2, #8
 8003ec2:	69b9      	ldr	r1, [r7, #24]
 8003ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4013      	ands	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f003 0203 	and.w	r2, r3, #3
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 80ae 	beq.w	8004066 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	4b5c      	ldr	r3, [pc, #368]	; (8004080 <HAL_GPIO_Init+0x2fc>)
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	4a5b      	ldr	r2, [pc, #364]	; (8004080 <HAL_GPIO_Init+0x2fc>)
 8003f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f18:	6453      	str	r3, [r2, #68]	; 0x44
 8003f1a:	4b59      	ldr	r3, [pc, #356]	; (8004080 <HAL_GPIO_Init+0x2fc>)
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f26:	4a57      	ldr	r2, [pc, #348]	; (8004084 <HAL_GPIO_Init+0x300>)
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	089b      	lsrs	r3, r3, #2
 8003f2c:	3302      	adds	r3, #2
 8003f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	220f      	movs	r2, #15
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43db      	mvns	r3, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4013      	ands	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a4e      	ldr	r2, [pc, #312]	; (8004088 <HAL_GPIO_Init+0x304>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d025      	beq.n	8003f9e <HAL_GPIO_Init+0x21a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a4d      	ldr	r2, [pc, #308]	; (800408c <HAL_GPIO_Init+0x308>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d01f      	beq.n	8003f9a <HAL_GPIO_Init+0x216>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a4c      	ldr	r2, [pc, #304]	; (8004090 <HAL_GPIO_Init+0x30c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d019      	beq.n	8003f96 <HAL_GPIO_Init+0x212>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a4b      	ldr	r2, [pc, #300]	; (8004094 <HAL_GPIO_Init+0x310>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d013      	beq.n	8003f92 <HAL_GPIO_Init+0x20e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a4a      	ldr	r2, [pc, #296]	; (8004098 <HAL_GPIO_Init+0x314>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00d      	beq.n	8003f8e <HAL_GPIO_Init+0x20a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a49      	ldr	r2, [pc, #292]	; (800409c <HAL_GPIO_Init+0x318>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d007      	beq.n	8003f8a <HAL_GPIO_Init+0x206>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a48      	ldr	r2, [pc, #288]	; (80040a0 <HAL_GPIO_Init+0x31c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d101      	bne.n	8003f86 <HAL_GPIO_Init+0x202>
 8003f82:	2306      	movs	r3, #6
 8003f84:	e00c      	b.n	8003fa0 <HAL_GPIO_Init+0x21c>
 8003f86:	2307      	movs	r3, #7
 8003f88:	e00a      	b.n	8003fa0 <HAL_GPIO_Init+0x21c>
 8003f8a:	2305      	movs	r3, #5
 8003f8c:	e008      	b.n	8003fa0 <HAL_GPIO_Init+0x21c>
 8003f8e:	2304      	movs	r3, #4
 8003f90:	e006      	b.n	8003fa0 <HAL_GPIO_Init+0x21c>
 8003f92:	2303      	movs	r3, #3
 8003f94:	e004      	b.n	8003fa0 <HAL_GPIO_Init+0x21c>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e002      	b.n	8003fa0 <HAL_GPIO_Init+0x21c>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <HAL_GPIO_Init+0x21c>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	f002 0203 	and.w	r2, r2, #3
 8003fa6:	0092      	lsls	r2, r2, #2
 8003fa8:	4093      	lsls	r3, r2
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fb0:	4934      	ldr	r1, [pc, #208]	; (8004084 <HAL_GPIO_Init+0x300>)
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	089b      	lsrs	r3, r3, #2
 8003fb6:	3302      	adds	r3, #2
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fbe:	4b39      	ldr	r3, [pc, #228]	; (80040a4 <HAL_GPIO_Init+0x320>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fe2:	4a30      	ldr	r2, [pc, #192]	; (80040a4 <HAL_GPIO_Init+0x320>)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fe8:	4b2e      	ldr	r3, [pc, #184]	; (80040a4 <HAL_GPIO_Init+0x320>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800400c:	4a25      	ldr	r2, [pc, #148]	; (80040a4 <HAL_GPIO_Init+0x320>)
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004012:	4b24      	ldr	r3, [pc, #144]	; (80040a4 <HAL_GPIO_Init+0x320>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	43db      	mvns	r3, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4013      	ands	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004036:	4a1b      	ldr	r2, [pc, #108]	; (80040a4 <HAL_GPIO_Init+0x320>)
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800403c:	4b19      	ldr	r3, [pc, #100]	; (80040a4 <HAL_GPIO_Init+0x320>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	43db      	mvns	r3, r3
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4013      	ands	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004060:	4a10      	ldr	r2, [pc, #64]	; (80040a4 <HAL_GPIO_Init+0x320>)
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	3301      	adds	r3, #1
 800406a:	61fb      	str	r3, [r7, #28]
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	2b0f      	cmp	r3, #15
 8004070:	f67f ae96 	bls.w	8003da0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004074:	bf00      	nop
 8004076:	3724      	adds	r7, #36	; 0x24
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	40023800 	.word	0x40023800
 8004084:	40013800 	.word	0x40013800
 8004088:	40020000 	.word	0x40020000
 800408c:	40020400 	.word	0x40020400
 8004090:	40020800 	.word	0x40020800
 8004094:	40020c00 	.word	0x40020c00
 8004098:	40021000 	.word	0x40021000
 800409c:	40021400 	.word	0x40021400
 80040a0:	40021800 	.word	0x40021800
 80040a4:	40013c00 	.word	0x40013c00

080040a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	887b      	ldrh	r3, [r7, #2]
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
 80040c4:	e001      	b.n	80040ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	807b      	strh	r3, [r7, #2]
 80040e4:	4613      	mov	r3, r2
 80040e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040e8:	787b      	ldrb	r3, [r7, #1]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040ee:	887a      	ldrh	r2, [r7, #2]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040f4:	e003      	b.n	80040fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040f6:	887b      	ldrh	r3, [r7, #2]
 80040f8:	041a      	lsls	r2, r3, #16
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	619a      	str	r2, [r3, #24]
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e154      	b.n	80043c8 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d109      	bne.n	800413e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a98      	ldr	r2, [pc, #608]	; (8004398 <HAL_I2S_Init+0x28c>)
 8004136:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7fd fda1 	bl	8001c80 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2202      	movs	r2, #2
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6812      	ldr	r2, [r2, #0]
 8004150:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004154:	f023 030f 	bic.w	r3, r3, #15
 8004158:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2202      	movs	r2, #2
 8004160:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d06f      	beq.n	800424a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d102      	bne.n	8004178 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004172:	2310      	movs	r3, #16
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	e001      	b.n	800417c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004178:	2320      	movs	r3, #32
 800417a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	2b20      	cmp	r3, #32
 8004182:	d802      	bhi.n	800418a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a83      	ldr	r2, [pc, #524]	; (800439c <HAL_I2S_Init+0x290>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d004      	beq.n	800419e <HAL_I2S_Init+0x92>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a81      	ldr	r2, [pc, #516]	; (80043a0 <HAL_I2S_Init+0x294>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d104      	bne.n	80041a8 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800419e:	2001      	movs	r0, #1
 80041a0:	f001 f990 	bl	80054c4 <HAL_RCCEx_GetPeriphCLKFreq>
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	e003      	b.n	80041b0 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80041a8:	2002      	movs	r0, #2
 80041aa:	f001 f98b 	bl	80054c4 <HAL_RCCEx_GetPeriphCLKFreq>
 80041ae:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b8:	d125      	bne.n	8004206 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d010      	beq.n	80041e4 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	461a      	mov	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	fbb2 f3f3 	udiv	r3, r2, r3
 80041de:	3305      	adds	r3, #5
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	e01f      	b.n	8004224 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	461a      	mov	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004200:	3305      	adds	r3, #5
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	e00e      	b.n	8004224 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	fbb2 f2f3 	udiv	r2, r2, r3
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	461a      	mov	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004220:	3305      	adds	r3, #5
 8004222:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	4a5f      	ldr	r2, [pc, #380]	; (80043a4 <HAL_I2S_Init+0x298>)
 8004228:	fba2 2303 	umull	r2, r3, r2, r3
 800422c:	08db      	lsrs	r3, r3, #3
 800422e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	085b      	lsrs	r3, r3, #1
 8004240:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	61bb      	str	r3, [r7, #24]
 8004248:	e003      	b.n	8004252 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800424a:	2302      	movs	r3, #2
 800424c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d902      	bls.n	800425e <HAL_I2S_Init+0x152>
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	2bff      	cmp	r3, #255	; 0xff
 800425c:	d907      	bls.n	800426e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	f043 0210 	orr.w	r2, r3, #16
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e0ac      	b.n	80043c8 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	ea42 0103 	orr.w	r1, r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	430a      	orrs	r2, r1
 8004280:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800428c:	f023 030f 	bic.w	r3, r3, #15
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6851      	ldr	r1, [r2, #4]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6892      	ldr	r2, [r2, #8]
 8004298:	4311      	orrs	r1, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68d2      	ldr	r2, [r2, #12]
 800429e:	4311      	orrs	r1, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6992      	ldr	r2, [r2, #24]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b0:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2b30      	cmp	r3, #48	; 0x30
 80042b8:	d003      	beq.n	80042c2 <HAL_I2S_Init+0x1b6>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2bb0      	cmp	r3, #176	; 0xb0
 80042c0:	d107      	bne.n	80042d2 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042d0:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d16e      	bne.n	80043b8 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a32      	ldr	r2, [pc, #200]	; (80043a8 <HAL_I2S_Init+0x29c>)
 80042de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a2d      	ldr	r2, [pc, #180]	; (800439c <HAL_I2S_Init+0x290>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d101      	bne.n	80042ee <HAL_I2S_Init+0x1e2>
 80042ea:	4b30      	ldr	r3, [pc, #192]	; (80043ac <HAL_I2S_Init+0x2a0>)
 80042ec:	e001      	b.n	80042f2 <HAL_I2S_Init+0x1e6>
 80042ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	4928      	ldr	r1, [pc, #160]	; (800439c <HAL_I2S_Init+0x290>)
 80042fa:	428a      	cmp	r2, r1
 80042fc:	d101      	bne.n	8004302 <HAL_I2S_Init+0x1f6>
 80042fe:	4a2b      	ldr	r2, [pc, #172]	; (80043ac <HAL_I2S_Init+0x2a0>)
 8004300:	e001      	b.n	8004306 <HAL_I2S_Init+0x1fa>
 8004302:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004306:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800430a:	f023 030f 	bic.w	r3, r3, #15
 800430e:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a21      	ldr	r2, [pc, #132]	; (800439c <HAL_I2S_Init+0x290>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d101      	bne.n	800431e <HAL_I2S_Init+0x212>
 800431a:	4b24      	ldr	r3, [pc, #144]	; (80043ac <HAL_I2S_Init+0x2a0>)
 800431c:	e001      	b.n	8004322 <HAL_I2S_Init+0x216>
 800431e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004322:	2202      	movs	r2, #2
 8004324:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a1c      	ldr	r2, [pc, #112]	; (800439c <HAL_I2S_Init+0x290>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d101      	bne.n	8004334 <HAL_I2S_Init+0x228>
 8004330:	4b1e      	ldr	r3, [pc, #120]	; (80043ac <HAL_I2S_Init+0x2a0>)
 8004332:	e001      	b.n	8004338 <HAL_I2S_Init+0x22c>
 8004334:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004344:	d003      	beq.n	800434e <HAL_I2S_Init+0x242>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d103      	bne.n	8004356 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800434e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	e001      	b.n	800435a <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004356:	2300      	movs	r3, #0
 8004358:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	b299      	uxth	r1, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004370:	4303      	orrs	r3, r0
 8004372:	b29b      	uxth	r3, r3
 8004374:	430b      	orrs	r3, r1
 8004376:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004378:	4313      	orrs	r3, r2
 800437a:	b29a      	uxth	r2, r3
 800437c:	897b      	ldrh	r3, [r7, #10]
 800437e:	4313      	orrs	r3, r2
 8004380:	b29b      	uxth	r3, r3
 8004382:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004386:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a03      	ldr	r2, [pc, #12]	; (800439c <HAL_I2S_Init+0x290>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d10e      	bne.n	80043b0 <HAL_I2S_Init+0x2a4>
 8004392:	4b06      	ldr	r3, [pc, #24]	; (80043ac <HAL_I2S_Init+0x2a0>)
 8004394:	e00e      	b.n	80043b4 <HAL_I2S_Init+0x2a8>
 8004396:	bf00      	nop
 8004398:	080044c7 	.word	0x080044c7
 800439c:	40003800 	.word	0x40003800
 80043a0:	40003c00 	.word	0x40003c00
 80043a4:	cccccccd 	.word	0xcccccccd
 80043a8:	080045dd 	.word	0x080045dd
 80043ac:	40003400 	.word	0x40003400
 80043b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043b4:	897a      	ldrh	r2, [r7, #10]
 80043b6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3720      	adds	r7, #32
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	881a      	ldrh	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	1c9a      	adds	r2, r3, #2
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	b29a      	uxth	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10e      	bne.n	8004460 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004450:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff ffb8 	bl	80043d0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004460:	bf00      	nop
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	b292      	uxth	r2, r2
 800447c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	1c9a      	adds	r2, r3, #2
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800448c:	b29b      	uxth	r3, r3
 800448e:	3b01      	subs	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10e      	bne.n	80044be <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044ae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7ff ff93 	bl	80043e4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80044be:	bf00      	nop
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b086      	sub	sp, #24
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d13a      	bne.n	8004558 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d109      	bne.n	8004500 <I2S_IRQHandler+0x3a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f6:	2b40      	cmp	r3, #64	; 0x40
 80044f8:	d102      	bne.n	8004500 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff ffb4 	bl	8004468 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004506:	2b40      	cmp	r3, #64	; 0x40
 8004508:	d126      	bne.n	8004558 <I2S_IRQHandler+0x92>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b20      	cmp	r3, #32
 8004516:	d11f      	bne.n	8004558 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004526:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004528:	2300      	movs	r3, #0
 800452a:	613b      	str	r3, [r7, #16]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	613b      	str	r3, [r7, #16]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454a:	f043 0202 	orr.w	r2, r3, #2
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff ff50 	bl	80043f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b03      	cmp	r3, #3
 8004562:	d136      	bne.n	80045d2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b02      	cmp	r3, #2
 800456c:	d109      	bne.n	8004582 <I2S_IRQHandler+0xbc>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004578:	2b80      	cmp	r3, #128	; 0x80
 800457a:	d102      	bne.n	8004582 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff ff45 	bl	800440c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b08      	cmp	r3, #8
 800458a:	d122      	bne.n	80045d2 <I2S_IRQHandler+0x10c>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b20      	cmp	r3, #32
 8004598:	d11b      	bne.n	80045d2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045a8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c4:	f043 0204 	orr.w	r2, r3, #4
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff ff13 	bl	80043f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045d2:	bf00      	nop
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4aa2      	ldr	r2, [pc, #648]	; (800487c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d101      	bne.n	80045fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80045f6:	4ba2      	ldr	r3, [pc, #648]	; (8004880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045f8:	e001      	b.n	80045fe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80045fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a9b      	ldr	r2, [pc, #620]	; (800487c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d101      	bne.n	8004618 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004614:	4b9a      	ldr	r3, [pc, #616]	; (8004880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004616:	e001      	b.n	800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004618:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004628:	d004      	beq.n	8004634 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f040 8099 	bne.w	8004766 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b02      	cmp	r3, #2
 800463c:	d107      	bne.n	800464e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f925 	bl	8004898 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b01      	cmp	r3, #1
 8004656:	d107      	bne.n	8004668 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f9c8 	bl	80049f8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466e:	2b40      	cmp	r3, #64	; 0x40
 8004670:	d13a      	bne.n	80046e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f003 0320 	and.w	r3, r3, #32
 8004678:	2b00      	cmp	r3, #0
 800467a:	d035      	beq.n	80046e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a7e      	ldr	r2, [pc, #504]	; (800487c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d101      	bne.n	800468a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004686:	4b7e      	ldr	r3, [pc, #504]	; (8004880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004688:	e001      	b.n	800468e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800468a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4979      	ldr	r1, [pc, #484]	; (800487c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004696:	428b      	cmp	r3, r1
 8004698:	d101      	bne.n	800469e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800469a:	4b79      	ldr	r3, [pc, #484]	; (8004880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800469c:	e001      	b.n	80046a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800469e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046a6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046da:	f043 0202 	orr.w	r2, r3, #2
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff fe88 	bl	80043f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	f040 80be 	bne.w	8004870 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 80b8 	beq.w	8004870 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800470e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a59      	ldr	r2, [pc, #356]	; (800487c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d101      	bne.n	800471e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800471a:	4b59      	ldr	r3, [pc, #356]	; (8004880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800471c:	e001      	b.n	8004722 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800471e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4954      	ldr	r1, [pc, #336]	; (800487c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800472a:	428b      	cmp	r3, r1
 800472c:	d101      	bne.n	8004732 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800472e:	4b54      	ldr	r3, [pc, #336]	; (8004880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004730:	e001      	b.n	8004736 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004732:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004736:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800473a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800473c:	2300      	movs	r3, #0
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004756:	f043 0204 	orr.w	r2, r3, #4
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff fe4a 	bl	80043f8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004764:	e084      	b.n	8004870 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b02      	cmp	r3, #2
 800476e:	d107      	bne.n	8004780 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f8be 	bl	80048fc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b01      	cmp	r3, #1
 8004788:	d107      	bne.n	800479a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f8fd 	bl	8004994 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a0:	2b40      	cmp	r3, #64	; 0x40
 80047a2:	d12f      	bne.n	8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d02a      	beq.n	8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047bc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a2e      	ldr	r2, [pc, #184]	; (800487c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d101      	bne.n	80047cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80047c8:	4b2d      	ldr	r3, [pc, #180]	; (8004880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047ca:	e001      	b.n	80047d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80047cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4929      	ldr	r1, [pc, #164]	; (800487c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047d8:	428b      	cmp	r3, r1
 80047da:	d101      	bne.n	80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80047dc:	4b28      	ldr	r3, [pc, #160]	; (8004880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047de:	e001      	b.n	80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80047e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	f043 0202 	orr.w	r2, r3, #2
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff fdfa 	bl	80043f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b08      	cmp	r3, #8
 800480c:	d131      	bne.n	8004872 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d02c      	beq.n	8004872 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a17      	ldr	r2, [pc, #92]	; (800487c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d101      	bne.n	8004826 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004822:	4b17      	ldr	r3, [pc, #92]	; (8004880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004824:	e001      	b.n	800482a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004826:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4912      	ldr	r1, [pc, #72]	; (800487c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004832:	428b      	cmp	r3, r1
 8004834:	d101      	bne.n	800483a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004836:	4b12      	ldr	r3, [pc, #72]	; (8004880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004838:	e001      	b.n	800483e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800483a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800483e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004842:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004852:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004860:	f043 0204 	orr.w	r2, r3, #4
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff fdc5 	bl	80043f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800486e:	e000      	b.n	8004872 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004870:	bf00      	nop
}
 8004872:	bf00      	nop
 8004874:	3720      	adds	r7, #32
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40003800 	.word	0x40003800
 8004880:	40003400 	.word	0x40003400

08004884 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	1c99      	adds	r1, r3, #2
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6251      	str	r1, [r2, #36]	; 0x24
 80048aa:	881a      	ldrh	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d113      	bne.n	80048f2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d106      	bne.n	80048f2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff ffc9 	bl	8004884 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048f2:	bf00      	nop
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	1c99      	adds	r1, r3, #2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6251      	str	r1, [r2, #36]	; 0x24
 800490e:	8819      	ldrh	r1, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a1d      	ldr	r2, [pc, #116]	; (800498c <I2SEx_TxISR_I2SExt+0x90>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d101      	bne.n	800491e <I2SEx_TxISR_I2SExt+0x22>
 800491a:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <I2SEx_TxISR_I2SExt+0x94>)
 800491c:	e001      	b.n	8004922 <I2SEx_TxISR_I2SExt+0x26>
 800491e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004922:	460a      	mov	r2, r1
 8004924:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492a:	b29b      	uxth	r3, r3
 800492c:	3b01      	subs	r3, #1
 800492e:	b29a      	uxth	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d121      	bne.n	8004982 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a12      	ldr	r2, [pc, #72]	; (800498c <I2SEx_TxISR_I2SExt+0x90>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d101      	bne.n	800494c <I2SEx_TxISR_I2SExt+0x50>
 8004948:	4b11      	ldr	r3, [pc, #68]	; (8004990 <I2SEx_TxISR_I2SExt+0x94>)
 800494a:	e001      	b.n	8004950 <I2SEx_TxISR_I2SExt+0x54>
 800494c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	490d      	ldr	r1, [pc, #52]	; (800498c <I2SEx_TxISR_I2SExt+0x90>)
 8004958:	428b      	cmp	r3, r1
 800495a:	d101      	bne.n	8004960 <I2SEx_TxISR_I2SExt+0x64>
 800495c:	4b0c      	ldr	r3, [pc, #48]	; (8004990 <I2SEx_TxISR_I2SExt+0x94>)
 800495e:	e001      	b.n	8004964 <I2SEx_TxISR_I2SExt+0x68>
 8004960:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004964:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004968:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d106      	bne.n	8004982 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff ff81 	bl	8004884 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40003800 	.word	0x40003800
 8004990:	40003400 	.word	0x40003400

08004994 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68d8      	ldr	r0, [r3, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	1c99      	adds	r1, r3, #2
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80049ac:	b282      	uxth	r2, r0
 80049ae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d113      	bne.n	80049f0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049d6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff ff4a 	bl	8004884 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a20      	ldr	r2, [pc, #128]	; (8004a88 <I2SEx_RxISR_I2SExt+0x90>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d101      	bne.n	8004a0e <I2SEx_RxISR_I2SExt+0x16>
 8004a0a:	4b20      	ldr	r3, [pc, #128]	; (8004a8c <I2SEx_RxISR_I2SExt+0x94>)
 8004a0c:	e001      	b.n	8004a12 <I2SEx_RxISR_I2SExt+0x1a>
 8004a0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a12:	68d8      	ldr	r0, [r3, #12]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	1c99      	adds	r1, r3, #2
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004a1e:	b282      	uxth	r2, r0
 8004a20:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d121      	bne.n	8004a7e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a12      	ldr	r2, [pc, #72]	; (8004a88 <I2SEx_RxISR_I2SExt+0x90>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d101      	bne.n	8004a48 <I2SEx_RxISR_I2SExt+0x50>
 8004a44:	4b11      	ldr	r3, [pc, #68]	; (8004a8c <I2SEx_RxISR_I2SExt+0x94>)
 8004a46:	e001      	b.n	8004a4c <I2SEx_RxISR_I2SExt+0x54>
 8004a48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	490d      	ldr	r1, [pc, #52]	; (8004a88 <I2SEx_RxISR_I2SExt+0x90>)
 8004a54:	428b      	cmp	r3, r1
 8004a56:	d101      	bne.n	8004a5c <I2SEx_RxISR_I2SExt+0x64>
 8004a58:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <I2SEx_RxISR_I2SExt+0x94>)
 8004a5a:	e001      	b.n	8004a60 <I2SEx_RxISR_I2SExt+0x68>
 8004a5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a64:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d106      	bne.n	8004a7e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff ff03 	bl	8004884 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40003800 	.word	0x40003800
 8004a8c:	40003400 	.word	0x40003400

08004a90 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af02      	add	r7, sp, #8
 8004a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004a98:	f7fd fd74 	bl	8002584 <HAL_GetTick>
 8004a9c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e069      	b.n	8004b7c <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10b      	bne.n	8004acc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7fd f999 	bl	8001df4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004ac2:	f241 3188 	movw	r1, #5000	; 0x1388
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f85e 	bl	8004b88 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	021a      	lsls	r2, r3, #8
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	2120      	movs	r1, #32
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f856 	bl	8004ba4 <QSPI_WaitFlagStateUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004afc:	7afb      	ldrb	r3, [r7, #11]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d137      	bne.n	8004b72 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004b0c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6852      	ldr	r2, [r2, #4]
 8004b14:	0611      	lsls	r1, r2, #24
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68d2      	ldr	r2, [r2, #12]
 8004b1a:	4311      	orrs	r1, r2
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	69d2      	ldr	r2, [r2, #28]
 8004b20:	4311      	orrs	r1, r2
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6a12      	ldr	r2, [r2, #32]
 8004b26:	4311      	orrs	r1, r2
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	4b13      	ldr	r3, [pc, #76]	; (8004b84 <HAL_QSPI_Init+0xf4>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6912      	ldr	r2, [r2, #16]
 8004b3e:	0411      	lsls	r1, r2, #16
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6952      	ldr	r2, [r2, #20]
 8004b44:	4311      	orrs	r1, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6992      	ldr	r2, [r2, #24]
 8004b4a:	4311      	orrs	r1, r2
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6812      	ldr	r2, [r2, #0]
 8004b50:	430b      	orrs	r3, r1
 8004b52:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004b7a:	7afb      	ldrb	r3, [r7, #11]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	ffe0f8fe 	.word	0xffe0f8fe

08004b88 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004bb4:	e01a      	b.n	8004bec <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d016      	beq.n	8004bec <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbe:	f7fd fce1 	bl	8002584 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d302      	bcc.n	8004bd4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10b      	bne.n	8004bec <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2204      	movs	r2, #4
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be0:	f043 0201 	orr.w	r2, r3, #1
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e00e      	b.n	8004c0a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	bf14      	ite	ne
 8004bfa:	2301      	movne	r3, #1
 8004bfc:	2300      	moveq	r3, #0
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	461a      	mov	r2, r3
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d1d6      	bne.n	8004bb6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
	...

08004c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0cc      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c28:	4b68      	ldr	r3, [pc, #416]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d90c      	bls.n	8004c50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c36:	4b65      	ldr	r3, [pc, #404]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3e:	4b63      	ldr	r3, [pc, #396]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d001      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e0b8      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d020      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d005      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c68:	4b59      	ldr	r3, [pc, #356]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	4a58      	ldr	r2, [pc, #352]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c80:	4b53      	ldr	r3, [pc, #332]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	4a52      	ldr	r2, [pc, #328]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c8c:	4b50      	ldr	r3, [pc, #320]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	494d      	ldr	r1, [pc, #308]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d044      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d107      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb2:	4b47      	ldr	r3, [pc, #284]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d119      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e07f      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d003      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d107      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd2:	4b3f      	ldr	r3, [pc, #252]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d109      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e06f      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce2:	4b3b      	ldr	r3, [pc, #236]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e067      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cf2:	4b37      	ldr	r3, [pc, #220]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f023 0203 	bic.w	r2, r3, #3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	4934      	ldr	r1, [pc, #208]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d04:	f7fd fc3e 	bl	8002584 <HAL_GetTick>
 8004d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d0a:	e00a      	b.n	8004d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d0c:	f7fd fc3a 	bl	8002584 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e04f      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d22:	4b2b      	ldr	r3, [pc, #172]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 020c 	and.w	r2, r3, #12
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d1eb      	bne.n	8004d0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d34:	4b25      	ldr	r3, [pc, #148]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 030f 	and.w	r3, r3, #15
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d20c      	bcs.n	8004d5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d42:	4b22      	ldr	r3, [pc, #136]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d4a:	4b20      	ldr	r3, [pc, #128]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d001      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e032      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d008      	beq.n	8004d7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d68:	4b19      	ldr	r3, [pc, #100]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	4916      	ldr	r1, [pc, #88]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d009      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d86:	4b12      	ldr	r3, [pc, #72]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	490e      	ldr	r1, [pc, #56]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d9a:	f000 f821 	bl	8004de0 <HAL_RCC_GetSysClockFreq>
 8004d9e:	4601      	mov	r1, r0
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	091b      	lsrs	r3, r3, #4
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	4a0a      	ldr	r2, [pc, #40]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004dac:	5cd3      	ldrb	r3, [r2, r3]
 8004dae:	fa21 f303 	lsr.w	r3, r1, r3
 8004db2:	4a09      	ldr	r2, [pc, #36]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004db6:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <HAL_RCC_ClockConfig+0x1c8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fd fb9e 	bl	80024fc <HAL_InitTick>

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40023c00 	.word	0x40023c00
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	0800c12c 	.word	0x0800c12c
 8004dd8:	20000008 	.word	0x20000008
 8004ddc:	2000000c 	.word	0x2000000c

08004de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	2300      	movs	r3, #0
 8004df0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004df6:	4b50      	ldr	r3, [pc, #320]	; (8004f38 <HAL_RCC_GetSysClockFreq+0x158>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 030c 	and.w	r3, r3, #12
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d007      	beq.n	8004e12 <HAL_RCC_GetSysClockFreq+0x32>
 8004e02:	2b08      	cmp	r3, #8
 8004e04:	d008      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0x38>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f040 808d 	bne.w	8004f26 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e0c:	4b4b      	ldr	r3, [pc, #300]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004e0e:	60bb      	str	r3, [r7, #8]
       break;
 8004e10:	e08c      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e12:	4b4b      	ldr	r3, [pc, #300]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e14:	60bb      	str	r3, [r7, #8]
      break;
 8004e16:	e089      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e18:	4b47      	ldr	r3, [pc, #284]	; (8004f38 <HAL_RCC_GetSysClockFreq+0x158>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e22:	4b45      	ldr	r3, [pc, #276]	; (8004f38 <HAL_RCC_GetSysClockFreq+0x158>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d023      	beq.n	8004e76 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2e:	4b42      	ldr	r3, [pc, #264]	; (8004f38 <HAL_RCC_GetSysClockFreq+0x158>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	099b      	lsrs	r3, r3, #6
 8004e34:	f04f 0400 	mov.w	r4, #0
 8004e38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	ea03 0501 	and.w	r5, r3, r1
 8004e44:	ea04 0602 	and.w	r6, r4, r2
 8004e48:	4a3d      	ldr	r2, [pc, #244]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e4a:	fb02 f106 	mul.w	r1, r2, r6
 8004e4e:	2200      	movs	r2, #0
 8004e50:	fb02 f205 	mul.w	r2, r2, r5
 8004e54:	440a      	add	r2, r1
 8004e56:	493a      	ldr	r1, [pc, #232]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e58:	fba5 0101 	umull	r0, r1, r5, r1
 8004e5c:	1853      	adds	r3, r2, r1
 8004e5e:	4619      	mov	r1, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f04f 0400 	mov.w	r4, #0
 8004e66:	461a      	mov	r2, r3
 8004e68:	4623      	mov	r3, r4
 8004e6a:	f7fb fa29 	bl	80002c0 <__aeabi_uldivmod>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	460c      	mov	r4, r1
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	e049      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e76:	4b30      	ldr	r3, [pc, #192]	; (8004f38 <HAL_RCC_GetSysClockFreq+0x158>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	099b      	lsrs	r3, r3, #6
 8004e7c:	f04f 0400 	mov.w	r4, #0
 8004e80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	ea03 0501 	and.w	r5, r3, r1
 8004e8c:	ea04 0602 	and.w	r6, r4, r2
 8004e90:	4629      	mov	r1, r5
 8004e92:	4632      	mov	r2, r6
 8004e94:	f04f 0300 	mov.w	r3, #0
 8004e98:	f04f 0400 	mov.w	r4, #0
 8004e9c:	0154      	lsls	r4, r2, #5
 8004e9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ea2:	014b      	lsls	r3, r1, #5
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4622      	mov	r2, r4
 8004ea8:	1b49      	subs	r1, r1, r5
 8004eaa:	eb62 0206 	sbc.w	r2, r2, r6
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	f04f 0400 	mov.w	r4, #0
 8004eb6:	0194      	lsls	r4, r2, #6
 8004eb8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ebc:	018b      	lsls	r3, r1, #6
 8004ebe:	1a5b      	subs	r3, r3, r1
 8004ec0:	eb64 0402 	sbc.w	r4, r4, r2
 8004ec4:	f04f 0100 	mov.w	r1, #0
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	00e2      	lsls	r2, r4, #3
 8004ece:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ed2:	00d9      	lsls	r1, r3, #3
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4614      	mov	r4, r2
 8004ed8:	195b      	adds	r3, r3, r5
 8004eda:	eb44 0406 	adc.w	r4, r4, r6
 8004ede:	f04f 0100 	mov.w	r1, #0
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	02a2      	lsls	r2, r4, #10
 8004ee8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004eec:	0299      	lsls	r1, r3, #10
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4614      	mov	r4, r2
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f04f 0400 	mov.w	r4, #0
 8004efc:	461a      	mov	r2, r3
 8004efe:	4623      	mov	r3, r4
 8004f00:	f7fb f9de 	bl	80002c0 <__aeabi_uldivmod>
 8004f04:	4603      	mov	r3, r0
 8004f06:	460c      	mov	r4, r1
 8004f08:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	0c1b      	lsrs	r3, r3, #16
 8004f10:	f003 0303 	and.w	r3, r3, #3
 8004f14:	3301      	adds	r3, #1
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f22:	60bb      	str	r3, [r7, #8]
      break;
 8004f24:	e002      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f26:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004f28:	60bb      	str	r3, [r7, #8]
      break;
 8004f2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	00f42400 	.word	0x00f42400
 8004f40:	017d7840 	.word	0x017d7840

08004f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f48:	4b03      	ldr	r3, [pc, #12]	; (8004f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	20000008 	.word	0x20000008

08004f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f60:	f7ff fff0 	bl	8004f44 <HAL_RCC_GetHCLKFreq>
 8004f64:	4601      	mov	r1, r0
 8004f66:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	0a9b      	lsrs	r3, r3, #10
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	4a03      	ldr	r2, [pc, #12]	; (8004f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f72:	5cd3      	ldrb	r3, [r2, r3]
 8004f74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	0800c13c 	.word	0x0800c13c

08004f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f88:	f7ff ffdc 	bl	8004f44 <HAL_RCC_GetHCLKFreq>
 8004f8c:	4601      	mov	r1, r0
 8004f8e:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	0b5b      	lsrs	r3, r3, #13
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	4a03      	ldr	r2, [pc, #12]	; (8004fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f9a:	5cd3      	ldrb	r3, [r2, r3]
 8004f9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	0800c13c 	.word	0x0800c13c

08004fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d010      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004fd0:	4b7a      	ldr	r3, [pc, #488]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fd6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	4977      	ldr	r1, [pc, #476]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d010      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004ffe:	4b6f      	ldr	r3, [pc, #444]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005004:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	496b      	ldr	r1, [pc, #428]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 800501c:	2301      	movs	r3, #1
 800501e:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d022      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 800502c:	4b63      	ldr	r3, [pc, #396]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800502e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005032:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800503a:	4960      	ldr	r1, [pc, #384]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 800504a:	2301      	movs	r3, #1
 800504c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005052:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005056:	d10c      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8005058:	4b58      	ldr	r3, [pc, #352]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800505a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800505e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	3b01      	subs	r3, #1
 8005068:	021b      	lsls	r3, r3, #8
 800506a:	4954      	ldr	r1, [pc, #336]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d022      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 800507e:	4b4f      	ldr	r3, [pc, #316]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005084:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800508c:	494b      	ldr	r1, [pc, #300]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800509c:	2301      	movs	r3, #1
 800509e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050a8:	d10c      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80050aa:	4b44      	ldr	r3, [pc, #272]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80050ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	3b01      	subs	r3, #1
 80050ba:	021b      	lsls	r3, r3, #8
 80050bc:	493f      	ldr	r1, [pc, #252]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 808a 	beq.w	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	4b39      	ldr	r3, [pc, #228]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	4a38      	ldr	r2, [pc, #224]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80050dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e0:	6413      	str	r3, [r2, #64]	; 0x40
 80050e2:	4b36      	ldr	r3, [pc, #216]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050ee:	4b34      	ldr	r3, [pc, #208]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a33      	ldr	r2, [pc, #204]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80050f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050fa:	f7fd fa43 	bl	8002584 <HAL_GetTick>
 80050fe:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005100:	e008      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005102:	f7fd fa3f 	bl	8002584 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e1d1      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005114:	4b2a      	ldr	r3, [pc, #168]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0f0      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005120:	4b26      	ldr	r3, [pc, #152]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005128:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d02f      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	429a      	cmp	r2, r3
 800513c:	d028      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800513e:	4b1f      	ldr	r3, [pc, #124]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005146:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005148:	4b1e      	ldr	r3, [pc, #120]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800514a:	2201      	movs	r2, #1
 800514c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800514e:	4b1d      	ldr	r3, [pc, #116]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005154:	4a19      	ldr	r2, [pc, #100]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800515a:	4b18      	ldr	r3, [pc, #96]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800515c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b01      	cmp	r3, #1
 8005164:	d114      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005166:	f7fd fa0d 	bl	8002584 <HAL_GetTick>
 800516a:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800516c:	e00a      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800516e:	f7fd fa09 	bl	8002584 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	f241 3288 	movw	r2, #5000	; 0x1388
 800517c:	4293      	cmp	r3, r2
 800517e:	d901      	bls.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e199      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005184:	4b0d      	ldr	r3, [pc, #52]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0ee      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005198:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800519c:	d114      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800519e:	4b07      	ldr	r3, [pc, #28]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80051ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b2:	4902      	ldr	r1, [pc, #8]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	608b      	str	r3, [r1, #8]
 80051b8:	e00c      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80051ba:	bf00      	nop
 80051bc:	40023800 	.word	0x40023800
 80051c0:	40007000 	.word	0x40007000
 80051c4:	42470e40 	.word	0x42470e40
 80051c8:	4b89      	ldr	r3, [pc, #548]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	4a88      	ldr	r2, [pc, #544]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80051ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051d2:	6093      	str	r3, [r2, #8]
 80051d4:	4b86      	ldr	r3, [pc, #536]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80051d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051e0:	4983      	ldr	r1, [pc, #524]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d004      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80051f8:	4b7e      	ldr	r3, [pc, #504]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80051fa:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005208:	4b79      	ldr	r3, [pc, #484]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800520a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800520e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	4976      	ldr	r1, [pc, #472]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0320 	and.w	r3, r3, #32
 8005226:	2b00      	cmp	r3, #0
 8005228:	d011      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800522a:	4b71      	ldr	r3, [pc, #452]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800522c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005230:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005238:	496d      	ldr	r1, [pc, #436]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005248:	d101      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 800524a:	2301      	movs	r3, #1
 800524c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800525a:	4b65      	ldr	r3, [pc, #404]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800525c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005260:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005268:	4961      	ldr	r1, [pc, #388]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d004      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b80      	cmp	r3, #128	; 0x80
 800527c:	f040 80c6 	bne.w	800540c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005280:	4b5d      	ldr	r3, [pc, #372]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005286:	f7fd f97d 	bl	8002584 <HAL_GetTick>
 800528a:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800528c:	e008      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800528e:	f7fd f979 	bl	8002584 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e10b      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052a0:	4b53      	ldr	r3, [pc, #332]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1f0      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80052ac:	4a53      	ldr	r2, [pc, #332]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b2:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d023      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d019      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d004      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052f0:	d00e      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d019      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	2b00      	cmp	r3, #0
 8005304:	d115      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800530e:	d110      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	019b      	lsls	r3, r3, #6
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	061b      	lsls	r3, r3, #24
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	071b      	lsls	r3, r3, #28
 800532a:	4931      	ldr	r1, [pc, #196]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005342:	2b00      	cmp	r3, #0
 8005344:	d009      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800534e:	2b00      	cmp	r3, #0
 8005350:	d026      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005356:	2b00      	cmp	r3, #0
 8005358:	d122      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800535a:	4b25      	ldr	r3, [pc, #148]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800535c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005360:	0e1b      	lsrs	r3, r3, #24
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	019b      	lsls	r3, r3, #6
 8005372:	431a      	orrs	r2, r3
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	061b      	lsls	r3, r3, #24
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	071b      	lsls	r3, r3, #28
 8005380:	491b      	ldr	r1, [pc, #108]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8005388:	4b19      	ldr	r3, [pc, #100]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800538a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800538e:	f023 021f 	bic.w	r2, r3, #31
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	3b01      	subs	r3, #1
 8005398:	4915      	ldr	r1, [pc, #84]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d010      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	019b      	lsls	r3, r3, #6
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	061b      	lsls	r3, r3, #24
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	071b      	lsls	r3, r3, #28
 80053c6:	490a      	ldr	r1, [pc, #40]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053ce:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80053d0:	2201      	movs	r2, #1
 80053d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053d4:	f7fd f8d6 	bl	8002584 <HAL_GetTick>
 80053d8:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053da:	e011      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80053dc:	f7fd f8d2 	bl	8002584 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d90a      	bls.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e064      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80053ee:	bf00      	nop
 80053f0:	40023800 	.word	0x40023800
 80053f4:	424711e0 	.word	0x424711e0
 80053f8:	42470068 	.word	0x42470068
 80053fc:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005400:	4b2f      	ldr	r3, [pc, #188]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0e7      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005418:	4b29      	ldr	r3, [pc, #164]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800541a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800541e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005426:	4926      	ldr	r1, [pc, #152]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800543a:	4b21      	ldr	r3, [pc, #132]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800543c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005440:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	491d      	ldr	r1, [pc, #116]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800545c:	4b18      	ldr	r3, [pc, #96]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800545e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005462:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546a:	4915      	ldr	r1, [pc, #84]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 800547e:	4b10      	ldr	r3, [pc, #64]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005484:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	490c      	ldr	r1, [pc, #48]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054a0:	4b07      	ldr	r3, [pc, #28]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80054a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054a6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ae:	4904      	ldr	r1, [pc, #16]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3720      	adds	r7, #32
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40023800 	.word	0x40023800

080054c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d003      	beq.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	f000 8098 	beq.w	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80054e8:	e12d      	b.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80054ea:	4b9a      	ldr	r3, [pc, #616]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80054ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054f0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80054f4:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054fc:	d00c      	beq.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 80054fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005502:	d802      	bhi.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005508:	e082      	b.n	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800550a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800550e:	d047      	beq.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005510:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005514:	d06f      	beq.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 8005516:	e07b      	b.n	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005518:	4b8f      	ldr	r3, [pc, #572]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800551a:	617b      	str	r3, [r7, #20]
          break;
 800551c:	e07b      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 800551e:	4b8d      	ldr	r3, [pc, #564]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800552c:	d109      	bne.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800552e:	4b89      	ldr	r3, [pc, #548]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005538:	4a87      	ldr	r2, [pc, #540]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800553a:	fbb2 f3f3 	udiv	r3, r2, r3
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	e019      	b.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005542:	4b84      	ldr	r3, [pc, #528]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800554a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800554e:	d109      	bne.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005550:	4b80      	ldr	r3, [pc, #512]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005556:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800555a:	4a80      	ldr	r2, [pc, #512]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800555c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005560:	613b      	str	r3, [r7, #16]
 8005562:	e008      	b.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005564:	4b7b      	ldr	r3, [pc, #492]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800556a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800556e:	4a7c      	ldr	r2, [pc, #496]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005570:	fbb2 f3f3 	udiv	r3, r2, r3
 8005574:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005576:	4b77      	ldr	r3, [pc, #476]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800557c:	099b      	lsrs	r3, r3, #6
 800557e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	fb02 f303 	mul.w	r3, r2, r3
 8005588:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800558a:	4b72      	ldr	r3, [pc, #456]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800558c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005590:	0f1b      	lsrs	r3, r3, #28
 8005592:	f003 0307 	and.w	r3, r3, #7
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	fbb2 f3f3 	udiv	r3, r2, r3
 800559c:	617b      	str	r3, [r7, #20]
          break;
 800559e:	e03a      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80055a0:	4b6c      	ldr	r3, [pc, #432]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055ac:	d108      	bne.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80055ae:	4b69      	ldr	r3, [pc, #420]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055b6:	4a69      	ldr	r2, [pc, #420]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80055b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	e007      	b.n	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80055c0:	4b64      	ldr	r3, [pc, #400]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055c8:	4a65      	ldr	r2, [pc, #404]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80055ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ce:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80055d0:	4b60      	ldr	r3, [pc, #384]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	099b      	lsrs	r3, r3, #6
 80055d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	fb02 f303 	mul.w	r3, r2, r3
 80055e0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80055e2:	4b5c      	ldr	r3, [pc, #368]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	0f1b      	lsrs	r3, r3, #28
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f2:	617b      	str	r3, [r7, #20]
          break;
 80055f4:	e00f      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80055f6:	4b57      	ldr	r3, [pc, #348]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005602:	d102      	bne.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8005604:	4b55      	ldr	r3, [pc, #340]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005606:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005608:	e005      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 800560a:	4b55      	ldr	r3, [pc, #340]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800560c:	617b      	str	r3, [r7, #20]
          break;
 800560e:	e002      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	617b      	str	r3, [r7, #20]
          break;
 8005614:	bf00      	nop
        }
      }
      break;
 8005616:	e096      	b.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8005618:	4b4e      	ldr	r3, [pc, #312]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800561a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800561e:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8005622:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800562a:	d00c      	beq.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 800562c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005630:	d802      	bhi.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005636:	e082      	b.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8005638:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800563c:	d047      	beq.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800563e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005642:	d06f      	beq.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8005644:	e07b      	b.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005646:	4b44      	ldr	r3, [pc, #272]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005648:	617b      	str	r3, [r7, #20]
          break;
 800564a:	e07b      	b.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 800564c:	4b41      	ldr	r3, [pc, #260]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800564e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800565a:	d109      	bne.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800565c:	4b3d      	ldr	r3, [pc, #244]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800565e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005662:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005666:	4a3c      	ldr	r2, [pc, #240]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005668:	fbb2 f3f3 	udiv	r3, r2, r3
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	e019      	b.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005670:	4b38      	ldr	r3, [pc, #224]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005678:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800567c:	d109      	bne.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800567e:	4b35      	ldr	r3, [pc, #212]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005688:	4a34      	ldr	r2, [pc, #208]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800568a:	fbb2 f3f3 	udiv	r3, r2, r3
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	e008      	b.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005692:	4b30      	ldr	r3, [pc, #192]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800569c:	4a30      	ldr	r2, [pc, #192]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800569e:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a2:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80056a4:	4b2b      	ldr	r3, [pc, #172]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80056a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056aa:	099b      	lsrs	r3, r3, #6
 80056ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	fb02 f303 	mul.w	r3, r2, r3
 80056b6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80056b8:	4b26      	ldr	r3, [pc, #152]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80056ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056be:	0f1b      	lsrs	r3, r3, #28
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ca:	617b      	str	r3, [r7, #20]
          break;
 80056cc:	e03a      	b.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80056ce:	4b21      	ldr	r3, [pc, #132]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056da:	d108      	bne.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056dc:	4b1d      	ldr	r3, [pc, #116]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056e4:	4a1d      	ldr	r2, [pc, #116]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80056e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	e007      	b.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056ee:	4b19      	ldr	r3, [pc, #100]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056f6:	4a1a      	ldr	r2, [pc, #104]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80056f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fc:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80056fe:	4b15      	ldr	r3, [pc, #84]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	099b      	lsrs	r3, r3, #6
 8005704:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	fb02 f303 	mul.w	r3, r2, r3
 800570e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005710:	4b10      	ldr	r3, [pc, #64]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	0f1b      	lsrs	r3, r3, #28
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005720:	617b      	str	r3, [r7, #20]
          break;
 8005722:	e00f      	b.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005724:	4b0b      	ldr	r3, [pc, #44]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800572c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005730:	d102      	bne.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 8005732:	4b0a      	ldr	r3, [pc, #40]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005734:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005736:	e005      	b.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8005738:	4b09      	ldr	r3, [pc, #36]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800573a:	617b      	str	r3, [r7, #20]
          break;
 800573c:	e002      	b.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	617b      	str	r3, [r7, #20]
          break;
 8005742:	bf00      	nop
        }
      }
      break;
 8005744:	bf00      	nop
    }
  }
  return frequency;
 8005746:	697b      	ldr	r3, [r7, #20]
}
 8005748:	4618      	mov	r0, r3
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	40023800 	.word	0x40023800
 8005758:	00bb8000 	.word	0x00bb8000
 800575c:	017d7840 	.word	0x017d7840
 8005760:	00f42400 	.word	0x00f42400

08005764 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d075      	beq.n	8005868 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800577c:	4ba2      	ldr	r3, [pc, #648]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 030c 	and.w	r3, r3, #12
 8005784:	2b04      	cmp	r3, #4
 8005786:	d00c      	beq.n	80057a2 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005788:	4b9f      	ldr	r3, [pc, #636]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005790:	2b08      	cmp	r3, #8
 8005792:	d112      	bne.n	80057ba <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005794:	4b9c      	ldr	r3, [pc, #624]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800579c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057a0:	d10b      	bne.n	80057ba <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a2:	4b99      	ldr	r3, [pc, #612]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d05b      	beq.n	8005866 <HAL_RCC_OscConfig+0x102>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d157      	bne.n	8005866 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e20b      	b.n	8005bd2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c2:	d106      	bne.n	80057d2 <HAL_RCC_OscConfig+0x6e>
 80057c4:	4b90      	ldr	r3, [pc, #576]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a8f      	ldr	r2, [pc, #572]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 80057ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ce:	6013      	str	r3, [r2, #0]
 80057d0:	e01d      	b.n	800580e <HAL_RCC_OscConfig+0xaa>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057da:	d10c      	bne.n	80057f6 <HAL_RCC_OscConfig+0x92>
 80057dc:	4b8a      	ldr	r3, [pc, #552]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a89      	ldr	r2, [pc, #548]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 80057e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	4b87      	ldr	r3, [pc, #540]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a86      	ldr	r2, [pc, #536]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 80057ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	e00b      	b.n	800580e <HAL_RCC_OscConfig+0xaa>
 80057f6:	4b84      	ldr	r3, [pc, #528]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a83      	ldr	r2, [pc, #524]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 80057fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	4b81      	ldr	r3, [pc, #516]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a80      	ldr	r2, [pc, #512]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 8005808:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800580c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d013      	beq.n	800583e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005816:	f7fc feb5 	bl	8002584 <HAL_GetTick>
 800581a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800581c:	e008      	b.n	8005830 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800581e:	f7fc feb1 	bl	8002584 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b64      	cmp	r3, #100	; 0x64
 800582a:	d901      	bls.n	8005830 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e1d0      	b.n	8005bd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005830:	4b75      	ldr	r3, [pc, #468]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d0f0      	beq.n	800581e <HAL_RCC_OscConfig+0xba>
 800583c:	e014      	b.n	8005868 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583e:	f7fc fea1 	bl	8002584 <HAL_GetTick>
 8005842:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005844:	e008      	b.n	8005858 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005846:	f7fc fe9d 	bl	8002584 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b64      	cmp	r3, #100	; 0x64
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e1bc      	b.n	8005bd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005858:	4b6b      	ldr	r3, [pc, #428]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1f0      	bne.n	8005846 <HAL_RCC_OscConfig+0xe2>
 8005864:	e000      	b.n	8005868 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005866:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d063      	beq.n	800593c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005874:	4b64      	ldr	r3, [pc, #400]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f003 030c 	and.w	r3, r3, #12
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00b      	beq.n	8005898 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005880:	4b61      	ldr	r3, [pc, #388]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005888:	2b08      	cmp	r3, #8
 800588a:	d11c      	bne.n	80058c6 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800588c:	4b5e      	ldr	r3, [pc, #376]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d116      	bne.n	80058c6 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005898:	4b5b      	ldr	r3, [pc, #364]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d005      	beq.n	80058b0 <HAL_RCC_OscConfig+0x14c>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d001      	beq.n	80058b0 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e190      	b.n	8005bd2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b0:	4b55      	ldr	r3, [pc, #340]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	4952      	ldr	r1, [pc, #328]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058c4:	e03a      	b.n	800593c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d020      	beq.n	8005910 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058ce:	4b4f      	ldr	r3, [pc, #316]	; (8005a0c <HAL_RCC_OscConfig+0x2a8>)
 80058d0:	2201      	movs	r2, #1
 80058d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d4:	f7fc fe56 	bl	8002584 <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058dc:	f7fc fe52 	bl	8002584 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e171      	b.n	8005bd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ee:	4b46      	ldr	r3, [pc, #280]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0f0      	beq.n	80058dc <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058fa:	4b43      	ldr	r3, [pc, #268]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	493f      	ldr	r1, [pc, #252]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 800590a:	4313      	orrs	r3, r2
 800590c:	600b      	str	r3, [r1, #0]
 800590e:	e015      	b.n	800593c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005910:	4b3e      	ldr	r3, [pc, #248]	; (8005a0c <HAL_RCC_OscConfig+0x2a8>)
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005916:	f7fc fe35 	bl	8002584 <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800591c:	e008      	b.n	8005930 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800591e:	f7fc fe31 	bl	8002584 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e150      	b.n	8005bd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005930:	4b35      	ldr	r3, [pc, #212]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f0      	bne.n	800591e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0308 	and.w	r3, r3, #8
 8005944:	2b00      	cmp	r3, #0
 8005946:	d030      	beq.n	80059aa <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d016      	beq.n	800597e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005950:	4b2f      	ldr	r3, [pc, #188]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 8005952:	2201      	movs	r2, #1
 8005954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005956:	f7fc fe15 	bl	8002584 <HAL_GetTick>
 800595a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800595c:	e008      	b.n	8005970 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800595e:	f7fc fe11 	bl	8002584 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e130      	b.n	8005bd2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005970:	4b25      	ldr	r3, [pc, #148]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 8005972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0f0      	beq.n	800595e <HAL_RCC_OscConfig+0x1fa>
 800597c:	e015      	b.n	80059aa <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800597e:	4b24      	ldr	r3, [pc, #144]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005984:	f7fc fdfe 	bl	8002584 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800598c:	f7fc fdfa 	bl	8002584 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e119      	b.n	8005bd2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800599e:	4b1a      	ldr	r3, [pc, #104]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 80059a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f0      	bne.n	800598c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0304 	and.w	r3, r3, #4
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 809f 	beq.w	8005af6 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059b8:	2300      	movs	r3, #0
 80059ba:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059bc:	4b12      	ldr	r3, [pc, #72]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10f      	bne.n	80059e8 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	4b0e      	ldr	r3, [pc, #56]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 80059ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d0:	4a0d      	ldr	r2, [pc, #52]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 80059d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d6:	6413      	str	r3, [r2, #64]	; 0x40
 80059d8:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <HAL_RCC_OscConfig+0x2a4>)
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80059e4:	2301      	movs	r3, #1
 80059e6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e8:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <HAL_RCC_OscConfig+0x2b0>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d120      	bne.n	8005a36 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059f4:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <HAL_RCC_OscConfig+0x2b0>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a06      	ldr	r2, [pc, #24]	; (8005a14 <HAL_RCC_OscConfig+0x2b0>)
 80059fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a00:	f7fc fdc0 	bl	8002584 <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a06:	e010      	b.n	8005a2a <HAL_RCC_OscConfig+0x2c6>
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	42470000 	.word	0x42470000
 8005a10:	42470e80 	.word	0x42470e80
 8005a14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a18:	f7fc fdb4 	bl	8002584 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e0d3      	b.n	8005bd2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a2a:	4b6c      	ldr	r3, [pc, #432]	; (8005bdc <HAL_RCC_OscConfig+0x478>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d0f0      	beq.n	8005a18 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d106      	bne.n	8005a4c <HAL_RCC_OscConfig+0x2e8>
 8005a3e:	4b68      	ldr	r3, [pc, #416]	; (8005be0 <HAL_RCC_OscConfig+0x47c>)
 8005a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a42:	4a67      	ldr	r2, [pc, #412]	; (8005be0 <HAL_RCC_OscConfig+0x47c>)
 8005a44:	f043 0301 	orr.w	r3, r3, #1
 8005a48:	6713      	str	r3, [r2, #112]	; 0x70
 8005a4a:	e01c      	b.n	8005a86 <HAL_RCC_OscConfig+0x322>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	2b05      	cmp	r3, #5
 8005a52:	d10c      	bne.n	8005a6e <HAL_RCC_OscConfig+0x30a>
 8005a54:	4b62      	ldr	r3, [pc, #392]	; (8005be0 <HAL_RCC_OscConfig+0x47c>)
 8005a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a58:	4a61      	ldr	r2, [pc, #388]	; (8005be0 <HAL_RCC_OscConfig+0x47c>)
 8005a5a:	f043 0304 	orr.w	r3, r3, #4
 8005a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a60:	4b5f      	ldr	r3, [pc, #380]	; (8005be0 <HAL_RCC_OscConfig+0x47c>)
 8005a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a64:	4a5e      	ldr	r2, [pc, #376]	; (8005be0 <HAL_RCC_OscConfig+0x47c>)
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a6c:	e00b      	b.n	8005a86 <HAL_RCC_OscConfig+0x322>
 8005a6e:	4b5c      	ldr	r3, [pc, #368]	; (8005be0 <HAL_RCC_OscConfig+0x47c>)
 8005a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a72:	4a5b      	ldr	r2, [pc, #364]	; (8005be0 <HAL_RCC_OscConfig+0x47c>)
 8005a74:	f023 0301 	bic.w	r3, r3, #1
 8005a78:	6713      	str	r3, [r2, #112]	; 0x70
 8005a7a:	4b59      	ldr	r3, [pc, #356]	; (8005be0 <HAL_RCC_OscConfig+0x47c>)
 8005a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7e:	4a58      	ldr	r2, [pc, #352]	; (8005be0 <HAL_RCC_OscConfig+0x47c>)
 8005a80:	f023 0304 	bic.w	r3, r3, #4
 8005a84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d015      	beq.n	8005aba <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a8e:	f7fc fd79 	bl	8002584 <HAL_GetTick>
 8005a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a94:	e00a      	b.n	8005aac <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a96:	f7fc fd75 	bl	8002584 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e092      	b.n	8005bd2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aac:	4b4c      	ldr	r3, [pc, #304]	; (8005be0 <HAL_RCC_OscConfig+0x47c>)
 8005aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0ee      	beq.n	8005a96 <HAL_RCC_OscConfig+0x332>
 8005ab8:	e014      	b.n	8005ae4 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aba:	f7fc fd63 	bl	8002584 <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ac0:	e00a      	b.n	8005ad8 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ac2:	f7fc fd5f 	bl	8002584 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e07c      	b.n	8005bd2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ad8:	4b41      	ldr	r3, [pc, #260]	; (8005be0 <HAL_RCC_OscConfig+0x47c>)
 8005ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1ee      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d105      	bne.n	8005af6 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aea:	4b3d      	ldr	r3, [pc, #244]	; (8005be0 <HAL_RCC_OscConfig+0x47c>)
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	4a3c      	ldr	r2, [pc, #240]	; (8005be0 <HAL_RCC_OscConfig+0x47c>)
 8005af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005af4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d068      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005afe:	4b38      	ldr	r3, [pc, #224]	; (8005be0 <HAL_RCC_OscConfig+0x47c>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 030c 	and.w	r3, r3, #12
 8005b06:	2b08      	cmp	r3, #8
 8005b08:	d060      	beq.n	8005bcc <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d145      	bne.n	8005b9e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b12:	4b34      	ldr	r3, [pc, #208]	; (8005be4 <HAL_RCC_OscConfig+0x480>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b18:	f7fc fd34 	bl	8002584 <HAL_GetTick>
 8005b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b1e:	e008      	b.n	8005b32 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b20:	f7fc fd30 	bl	8002584 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e04f      	b.n	8005bd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b32:	4b2b      	ldr	r3, [pc, #172]	; (8005be0 <HAL_RCC_OscConfig+0x47c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1f0      	bne.n	8005b20 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	69da      	ldr	r2, [r3, #28]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	019b      	lsls	r3, r3, #6
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	3b01      	subs	r3, #1
 8005b58:	041b      	lsls	r3, r3, #16
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	061b      	lsls	r3, r3, #24
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b68:	071b      	lsls	r3, r3, #28
 8005b6a:	491d      	ldr	r1, [pc, #116]	; (8005be0 <HAL_RCC_OscConfig+0x47c>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b70:	4b1c      	ldr	r3, [pc, #112]	; (8005be4 <HAL_RCC_OscConfig+0x480>)
 8005b72:	2201      	movs	r2, #1
 8005b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b76:	f7fc fd05 	bl	8002584 <HAL_GetTick>
 8005b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b7c:	e008      	b.n	8005b90 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b7e:	f7fc fd01 	bl	8002584 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e020      	b.n	8005bd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b90:	4b13      	ldr	r3, [pc, #76]	; (8005be0 <HAL_RCC_OscConfig+0x47c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0f0      	beq.n	8005b7e <HAL_RCC_OscConfig+0x41a>
 8005b9c:	e018      	b.n	8005bd0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b9e:	4b11      	ldr	r3, [pc, #68]	; (8005be4 <HAL_RCC_OscConfig+0x480>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba4:	f7fc fcee 	bl	8002584 <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bac:	f7fc fcea 	bl	8002584 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e009      	b.n	8005bd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bbe:	4b08      	ldr	r3, [pc, #32]	; (8005be0 <HAL_RCC_OscConfig+0x47c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1f0      	bne.n	8005bac <HAL_RCC_OscConfig+0x448>
 8005bca:	e001      	b.n	8005bd0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	40007000 	.word	0x40007000
 8005be0:	40023800 	.word	0x40023800
 8005be4:	42470060 	.word	0x42470060

08005be8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e022      	b.n	8005c40 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d105      	bne.n	8005c12 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7fc f9bb 	bl	8001f88 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2203      	movs	r2, #3
 8005c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f814 	bl	8005c48 <HAL_SD_InitCard>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e00a      	b.n	8005c40 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005c48:	b5b0      	push	{r4, r5, r7, lr}
 8005c4a:	b08e      	sub	sp, #56	; 0x38
 8005c4c:	af04      	add	r7, sp, #16
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005c50:	2300      	movs	r3, #0
 8005c52:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005c64:	2376      	movs	r3, #118	; 0x76
 8005c66:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681d      	ldr	r5, [r3, #0]
 8005c6c:	466c      	mov	r4, sp
 8005c6e:	f107 0314 	add.w	r3, r7, #20
 8005c72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005c7a:	f107 0308 	add.w	r3, r7, #8
 8005c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c80:	4628      	mov	r0, r5
 8005c82:	f001 fc7b 	bl	800757c <SDIO_Init>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e031      	b.n	8005cfc <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005c98:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <HAL_SD_InitCard+0xbc>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 fcb3 	bl	800760e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005ca8:	4b16      	ldr	r3, [pc, #88]	; (8005d04 <HAL_SD_InitCard+0xbc>)
 8005caa:	2201      	movs	r2, #1
 8005cac:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fe80 	bl	80069b4 <SD_PowerON>
 8005cb4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00b      	beq.n	8005cd4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e013      	b.n	8005cfc <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fd9f 	bl	8006818 <SD_InitCard>
 8005cda:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e000      	b.n	8005cfc <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3728      	adds	r7, #40	; 0x28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bdb0      	pop	{r4, r5, r7, pc}
 8005d04:	422580a0 	.word	0x422580a0

08005d08 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b092      	sub	sp, #72	; 0x48
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d16:	f7fc fc35 	bl	8002584 <HAL_GetTick>
 8005d1a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d107      	bne.n	8005d3a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e1d7      	b.n	80060ea <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	f040 81ca 	bne.w	80060dc <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	441a      	add	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d907      	bls.n	8005d6c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e1be      	b.n	80060ea <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2203      	movs	r2, #3
 8005d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d002      	beq.n	8005d8a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d86:	025b      	lsls	r3, r3, #9
 8005d88:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d92:	4618      	mov	r0, r3
 8005d94:	f001 fcce 	bl	8007734 <SDMMC_CmdBlockLength>
 8005d98:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00f      	beq.n	8005dc0 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a9a      	ldr	r2, [pc, #616]	; (8006010 <HAL_SD_ReadBlocks+0x308>)
 8005da6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dae:	431a      	orrs	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e194      	b.n	80060ea <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc4:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	025b      	lsls	r3, r3, #9
 8005dca:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005dcc:	2390      	movs	r3, #144	; 0x90
 8005dce:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f107 0214 	add.w	r2, r7, #20
 8005de4:	4611      	mov	r1, r2
 8005de6:	4618      	mov	r0, r3
 8005de8:	f001 fc78 	bl	80076dc <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d90a      	bls.n	8005e08 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2202      	movs	r2, #2
 8005df6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f001 fcdc 	bl	80077bc <SDMMC_CmdReadMultiBlock>
 8005e04:	6478      	str	r0, [r7, #68]	; 0x44
 8005e06:	e009      	b.n	8005e1c <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e14:	4618      	mov	r0, r3
 8005e16:	f001 fcaf 	bl	8007778 <SDMMC_CmdReadSingleBlock>
 8005e1a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d012      	beq.n	8005e48 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a7a      	ldr	r2, [pc, #488]	; (8006010 <HAL_SD_ReadBlocks+0x308>)
 8005e28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e30:	431a      	orrs	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e150      	b.n	80060ea <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005e4c:	e061      	b.n	8005f12 <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d03c      	beq.n	8005ed6 <HAL_SD_ReadBlocks+0x1ce>
 8005e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d039      	beq.n	8005ed6 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005e62:	2300      	movs	r3, #0
 8005e64:	643b      	str	r3, [r7, #64]	; 0x40
 8005e66:	e033      	b.n	8005ed0 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f001 fbb0 	bl	80075d2 <SDIO_ReadFIFO>
 8005e72:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7e:	3301      	adds	r3, #1
 8005e80:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e84:	3b01      	subs	r3, #1
 8005e86:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8a:	0a1b      	lsrs	r3, r3, #8
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e90:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e94:	3301      	adds	r3, #1
 8005e96:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea0:	0c1b      	lsrs	r3, r3, #16
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eaa:	3301      	adds	r3, #1
 8005eac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb6:	0e1b      	lsrs	r3, r3, #24
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ecc:	3301      	adds	r3, #1
 8005ece:	643b      	str	r3, [r7, #64]	; 0x40
 8005ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ed2:	2b07      	cmp	r3, #7
 8005ed4:	d9c8      	bls.n	8005e68 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005ed6:	f7fc fb55 	bl	8002584 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d902      	bls.n	8005eec <HAL_SD_ReadBlocks+0x1e4>
 8005ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d112      	bne.n	8005f12 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a47      	ldr	r2, [pc, #284]	; (8006010 <HAL_SD_ReadBlocks+0x308>)
 8005ef2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e0eb      	b.n	80060ea <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f18:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d096      	beq.n	8005e4e <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d022      	beq.n	8005f74 <HAL_SD_ReadBlocks+0x26c>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d91f      	bls.n	8005f74 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	d01b      	beq.n	8005f74 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 fca1 	bl	8007888 <SDMMC_CmdStopTransfer>
 8005f46:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d012      	beq.n	8005f74 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a2f      	ldr	r2, [pc, #188]	; (8006010 <HAL_SD_ReadBlocks+0x308>)
 8005f54:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e0ba      	b.n	80060ea <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d012      	beq.n	8005fa8 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a22      	ldr	r2, [pc, #136]	; (8006010 <HAL_SD_ReadBlocks+0x308>)
 8005f88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8e:	f043 0208 	orr.w	r2, r3, #8
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e0a0      	b.n	80060ea <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d012      	beq.n	8005fdc <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a15      	ldr	r2, [pc, #84]	; (8006010 <HAL_SD_ReadBlocks+0x308>)
 8005fbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	f043 0202 	orr.w	r2, r3, #2
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e086      	b.n	80060ea <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe2:	f003 0320 	and.w	r3, r3, #32
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d063      	beq.n	80060b2 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a08      	ldr	r2, [pc, #32]	; (8006010 <HAL_SD_ReadBlocks+0x308>)
 8005ff0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	f043 0220 	orr.w	r2, r3, #32
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e06c      	b.n	80060ea <HAL_SD_ReadBlocks+0x3e2>
 8006010:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4618      	mov	r0, r3
 800601a:	f001 fada 	bl	80075d2 <SDIO_ReadFIFO>
 800601e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006022:	b2da      	uxtb	r2, r3
 8006024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006026:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602a:	3301      	adds	r3, #1
 800602c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800602e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006030:	3b01      	subs	r3, #1
 8006032:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006036:	0a1b      	lsrs	r3, r3, #8
 8006038:	b2da      	uxtb	r2, r3
 800603a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800603e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006040:	3301      	adds	r3, #1
 8006042:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006046:	3b01      	subs	r3, #1
 8006048:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800604a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604c:	0c1b      	lsrs	r3, r3, #16
 800604e:	b2da      	uxtb	r2, r3
 8006050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006052:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006056:	3301      	adds	r3, #1
 8006058:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800605a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800605c:	3b01      	subs	r3, #1
 800605e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006062:	0e1b      	lsrs	r3, r3, #24
 8006064:	b2da      	uxtb	r2, r3
 8006066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006068:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800606a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606c:	3301      	adds	r3, #1
 800606e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006072:	3b01      	subs	r3, #1
 8006074:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006076:	f7fc fa85 	bl	8002584 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006082:	429a      	cmp	r2, r3
 8006084:	d902      	bls.n	800608c <HAL_SD_ReadBlocks+0x384>
 8006086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006088:	2b00      	cmp	r3, #0
 800608a:	d112      	bne.n	80060b2 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a18      	ldr	r2, [pc, #96]	; (80060f4 <HAL_SD_ReadBlocks+0x3ec>)
 8006092:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e01b      	b.n	80060ea <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <HAL_SD_ReadBlocks+0x3be>
 80060c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1a6      	bne.n	8006014 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f240 523a 	movw	r2, #1338	; 0x53a
 80060ce:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	e006      	b.n	80060ea <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
  }
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3748      	adds	r7, #72	; 0x48
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	004005ff 	.word	0x004005ff

080060f8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b092      	sub	sp, #72	; 0x48
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006106:	f7fc fa3d 	bl	8002584 <HAL_GetTick>
 800610a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d107      	bne.n	800612a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e182      	b.n	8006430 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b01      	cmp	r3, #1
 8006134:	f040 8175 	bne.w	8006422 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800613e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	441a      	add	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006148:	429a      	cmp	r2, r3
 800614a:	d907      	bls.n	800615c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006150:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e169      	b.n	8006430 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2203      	movs	r2, #3
 8006160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2200      	movs	r2, #0
 800616a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006170:	2b01      	cmp	r3, #1
 8006172:	d002      	beq.n	800617a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006176:	025b      	lsls	r3, r3, #9
 8006178:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006182:	4618      	mov	r0, r3
 8006184:	f001 fad6 	bl	8007734 <SDMMC_CmdBlockLength>
 8006188:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800618a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00f      	beq.n	80061b0 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a9c      	ldr	r2, [pc, #624]	; (8006408 <HAL_SD_WriteBlocks+0x310>)
 8006196:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800619c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800619e:	431a      	orrs	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e13f      	b.n	8006430 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80061b0:	f04f 33ff 	mov.w	r3, #4294967295
 80061b4:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	025b      	lsls	r3, r3, #9
 80061ba:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80061bc:	2390      	movs	r3, #144	; 0x90
 80061be:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80061c0:	2300      	movs	r3, #0
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80061c4:	2300      	movs	r3, #0
 80061c6:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80061c8:	2301      	movs	r3, #1
 80061ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f107 0218 	add.w	r2, r7, #24
 80061d4:	4611      	mov	r1, r2
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 fa80 	bl	80076dc <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d90a      	bls.n	80061f8 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2220      	movs	r2, #32
 80061e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061ee:	4618      	mov	r0, r3
 80061f0:	f001 fb28 	bl	8007844 <SDMMC_CmdWriteMultiBlock>
 80061f4:	6478      	str	r0, [r7, #68]	; 0x44
 80061f6:	e009      	b.n	800620c <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2210      	movs	r2, #16
 80061fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006204:	4618      	mov	r0, r3
 8006206:	f001 fafb 	bl	8007800 <SDMMC_CmdWriteSingleBlock>
 800620a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800620c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800620e:	2b00      	cmp	r3, #0
 8006210:	d012      	beq.n	8006238 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a7c      	ldr	r2, [pc, #496]	; (8006408 <HAL_SD_WriteBlocks+0x310>)
 8006218:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800621e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006220:	431a      	orrs	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e0fb      	b.n	8006430 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800623c:	e065      	b.n	800630a <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d040      	beq.n	80062ce <HAL_SD_WriteBlocks+0x1d6>
 800624c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d03d      	beq.n	80062ce <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006252:	2300      	movs	r3, #0
 8006254:	643b      	str	r3, [r7, #64]	; 0x40
 8006256:	e037      	b.n	80062c8 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8006258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800625e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006260:	3301      	adds	r3, #1
 8006262:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006266:	3b01      	subs	r3, #1
 8006268:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800626a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	021a      	lsls	r2, r3, #8
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	4313      	orrs	r3, r2
 8006274:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006278:	3301      	adds	r3, #1
 800627a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800627c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627e:	3b01      	subs	r3, #1
 8006280:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	041a      	lsls	r2, r3, #16
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	4313      	orrs	r3, r2
 800628c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800628e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006290:	3301      	adds	r3, #1
 8006292:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006296:	3b01      	subs	r3, #1
 8006298:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800629a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	061a      	lsls	r2, r3, #24
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80062a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a8:	3301      	adds	r3, #1
 80062aa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80062ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ae:	3b01      	subs	r3, #1
 80062b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f107 0214 	add.w	r2, r7, #20
 80062ba:	4611      	mov	r1, r2
 80062bc:	4618      	mov	r0, r3
 80062be:	f001 f995 	bl	80075ec <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80062c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062c4:	3301      	adds	r3, #1
 80062c6:	643b      	str	r3, [r7, #64]	; 0x40
 80062c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ca:	2b07      	cmp	r3, #7
 80062cc:	d9c4      	bls.n	8006258 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80062ce:	f7fc f959 	bl	8002584 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062da:	429a      	cmp	r2, r3
 80062dc:	d902      	bls.n	80062e4 <HAL_SD_WriteBlocks+0x1ec>
 80062de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d112      	bne.n	800630a <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a47      	ldr	r2, [pc, #284]	; (8006408 <HAL_SD_WriteBlocks+0x310>)
 80062ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f2:	431a      	orrs	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e092      	b.n	8006430 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006310:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006314:	2b00      	cmp	r3, #0
 8006316:	d092      	beq.n	800623e <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006322:	2b00      	cmp	r3, #0
 8006324:	d022      	beq.n	800636c <HAL_SD_WriteBlocks+0x274>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d91f      	bls.n	800636c <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006330:	2b03      	cmp	r3, #3
 8006332:	d01b      	beq.n	800636c <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4618      	mov	r0, r3
 800633a:	f001 faa5 	bl	8007888 <SDMMC_CmdStopTransfer>
 800633e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006342:	2b00      	cmp	r3, #0
 8006344:	d012      	beq.n	800636c <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a2f      	ldr	r2, [pc, #188]	; (8006408 <HAL_SD_WriteBlocks+0x310>)
 800634c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006354:	431a      	orrs	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e061      	b.n	8006430 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006372:	f003 0308 	and.w	r3, r3, #8
 8006376:	2b00      	cmp	r3, #0
 8006378:	d012      	beq.n	80063a0 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a22      	ldr	r2, [pc, #136]	; (8006408 <HAL_SD_WriteBlocks+0x310>)
 8006380:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006386:	f043 0208 	orr.w	r2, r3, #8
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e047      	b.n	8006430 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d012      	beq.n	80063d4 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a15      	ldr	r2, [pc, #84]	; (8006408 <HAL_SD_WriteBlocks+0x310>)
 80063b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	f043 0202 	orr.w	r2, r3, #2
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e02d      	b.n	8006430 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063da:	f003 0310 	and.w	r3, r3, #16
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d014      	beq.n	800640c <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a08      	ldr	r2, [pc, #32]	; (8006408 <HAL_SD_WriteBlocks+0x310>)
 80063e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ee:	f043 0210 	orr.w	r2, r3, #16
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e013      	b.n	8006430 <HAL_SD_WriteBlocks+0x338>
 8006408:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f240 523a 	movw	r2, #1338	; 0x53a
 8006414:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	e006      	b.n	8006430 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006426:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
  }
}
 8006430:	4618      	mov	r0, r3
 8006432:	3748      	adds	r7, #72	; 0x48
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006446:	0f9b      	lsrs	r3, r3, #30
 8006448:	b2da      	uxtb	r2, r3
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006452:	0e9b      	lsrs	r3, r3, #26
 8006454:	b2db      	uxtb	r3, r3
 8006456:	f003 030f 	and.w	r3, r3, #15
 800645a:	b2da      	uxtb	r2, r3
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006464:	0e1b      	lsrs	r3, r3, #24
 8006466:	b2db      	uxtb	r3, r3
 8006468:	f003 0303 	and.w	r3, r3, #3
 800646c:	b2da      	uxtb	r2, r3
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006476:	0c1b      	lsrs	r3, r3, #16
 8006478:	b2da      	uxtb	r2, r3
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006482:	0a1b      	lsrs	r3, r3, #8
 8006484:	b2da      	uxtb	r2, r3
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800648e:	b2da      	uxtb	r2, r3
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006498:	0d1b      	lsrs	r3, r3, #20
 800649a:	b29a      	uxth	r2, r3
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064a4:	0c1b      	lsrs	r3, r3, #16
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	f003 030f 	and.w	r3, r3, #15
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064b6:	0bdb      	lsrs	r3, r3, #15
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064c8:	0b9b      	lsrs	r3, r3, #14
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064da:	0b5b      	lsrs	r3, r3, #13
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064ec:	0b1b      	lsrs	r3, r3, #12
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2200      	movs	r2, #0
 80064fe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006504:	2b00      	cmp	r3, #0
 8006506:	d163      	bne.n	80065d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800650c:	009a      	lsls	r2, r3, #2
 800650e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006512:	4013      	ands	r3, r2
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006518:	0f92      	lsrs	r2, r2, #30
 800651a:	431a      	orrs	r2, r3
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006524:	0edb      	lsrs	r3, r3, #27
 8006526:	b2db      	uxtb	r3, r3
 8006528:	f003 0307 	and.w	r3, r3, #7
 800652c:	b2da      	uxtb	r2, r3
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006536:	0e1b      	lsrs	r3, r3, #24
 8006538:	b2db      	uxtb	r3, r3
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	b2da      	uxtb	r2, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006548:	0d5b      	lsrs	r3, r3, #21
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f003 0307 	and.w	r3, r3, #7
 8006550:	b2da      	uxtb	r2, r3
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800655a:	0c9b      	lsrs	r3, r3, #18
 800655c:	b2db      	uxtb	r3, r3
 800655e:	f003 0307 	and.w	r3, r3, #7
 8006562:	b2da      	uxtb	r2, r3
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800656c:	0bdb      	lsrs	r3, r3, #15
 800656e:	b2db      	uxtb	r3, r3
 8006570:	f003 0307 	and.w	r3, r3, #7
 8006574:	b2da      	uxtb	r2, r3
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	7e1b      	ldrb	r3, [r3, #24]
 8006588:	b2db      	uxtb	r3, r3
 800658a:	f003 0307 	and.w	r3, r3, #7
 800658e:	3302      	adds	r3, #2
 8006590:	2201      	movs	r2, #1
 8006592:	fa02 f303 	lsl.w	r3, r2, r3
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800659a:	fb02 f203 	mul.w	r2, r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	7a1b      	ldrb	r3, [r3, #8]
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	f003 030f 	and.w	r3, r3, #15
 80065ac:	2201      	movs	r2, #1
 80065ae:	409a      	lsls	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80065bc:	0a52      	lsrs	r2, r2, #9
 80065be:	fb02 f203 	mul.w	r2, r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065cc:	661a      	str	r2, [r3, #96]	; 0x60
 80065ce:	e031      	b.n	8006634 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d11d      	bne.n	8006614 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065dc:	041b      	lsls	r3, r3, #16
 80065de:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065e6:	0c1b      	lsrs	r3, r3, #16
 80065e8:	431a      	orrs	r2, r3
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	3301      	adds	r3, #1
 80065f4:	029a      	lsls	r2, r3, #10
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006608:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	661a      	str	r2, [r3, #96]	; 0x60
 8006612:	e00f      	b.n	8006634 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a58      	ldr	r2, [pc, #352]	; (800677c <HAL_SD_GetCardCSD+0x344>)
 800661a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e09d      	b.n	8006770 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006638:	0b9b      	lsrs	r3, r3, #14
 800663a:	b2db      	uxtb	r3, r3
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	b2da      	uxtb	r2, r3
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800664a:	09db      	lsrs	r3, r3, #7
 800664c:	b2db      	uxtb	r3, r3
 800664e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006652:	b2da      	uxtb	r2, r3
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800665c:	b2db      	uxtb	r3, r3
 800665e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006662:	b2da      	uxtb	r2, r3
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666c:	0fdb      	lsrs	r3, r3, #31
 800666e:	b2da      	uxtb	r2, r3
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006678:	0f5b      	lsrs	r3, r3, #29
 800667a:	b2db      	uxtb	r3, r3
 800667c:	f003 0303 	and.w	r3, r3, #3
 8006680:	b2da      	uxtb	r2, r3
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668a:	0e9b      	lsrs	r3, r3, #26
 800668c:	b2db      	uxtb	r3, r3
 800668e:	f003 0307 	and.w	r3, r3, #7
 8006692:	b2da      	uxtb	r2, r3
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669c:	0d9b      	lsrs	r3, r3, #22
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	f003 030f 	and.w	r3, r3, #15
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ae:	0d5b      	lsrs	r3, r3, #21
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ca:	0c1b      	lsrs	r3, r3, #16
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066de:	0bdb      	lsrs	r3, r3, #15
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f2:	0b9b      	lsrs	r3, r3, #14
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006706:	0b5b      	lsrs	r3, r3, #13
 8006708:	b2db      	uxtb	r3, r3
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	b2da      	uxtb	r2, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671a:	0b1b      	lsrs	r3, r3, #12
 800671c:	b2db      	uxtb	r3, r3
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	b2da      	uxtb	r2, r3
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672e:	0a9b      	lsrs	r3, r3, #10
 8006730:	b2db      	uxtb	r3, r3
 8006732:	f003 0303 	and.w	r3, r3, #3
 8006736:	b2da      	uxtb	r2, r3
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006742:	0a1b      	lsrs	r3, r3, #8
 8006744:	b2db      	uxtb	r3, r3
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	b2da      	uxtb	r2, r3
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006756:	085b      	lsrs	r3, r3, #1
 8006758:	b2db      	uxtb	r3, r3
 800675a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800675e:	b2da      	uxtb	r2, r3
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	004005ff 	.word	0x004005ff

08006780 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80067e4:	f107 030c 	add.w	r3, r7, #12
 80067e8:	4619      	mov	r1, r3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f970 	bl	8006ad0 <SD_SendStatus>
 80067f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d005      	beq.n	8006804 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	431a      	orrs	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	0a5b      	lsrs	r3, r3, #9
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800680e:	693b      	ldr	r3, [r7, #16]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006818:	b5b0      	push	{r4, r5, r7, lr}
 800681a:	b094      	sub	sp, #80	; 0x50
 800681c:	af04      	add	r7, sp, #16
 800681e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006820:	2301      	movs	r3, #1
 8006822:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4618      	mov	r0, r3
 800682a:	f000 feff 	bl	800762c <SDIO_GetPowerState>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d102      	bne.n	800683a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006834:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006838:	e0b7      	b.n	80069aa <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683e:	2b03      	cmp	r3, #3
 8006840:	d02f      	beq.n	80068a2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4618      	mov	r0, r3
 8006848:	f001 f8e5 	bl	8007a16 <SDMMC_CmdSendCID>
 800684c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800684e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <SD_InitCard+0x40>
    {
      return errorstate;
 8006854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006856:	e0a8      	b.n	80069aa <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2100      	movs	r1, #0
 800685e:	4618      	mov	r0, r3
 8006860:	f000 ff29 	bl	80076b6 <SDIO_GetResponse>
 8006864:	4602      	mov	r2, r0
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2104      	movs	r1, #4
 8006870:	4618      	mov	r0, r3
 8006872:	f000 ff20 	bl	80076b6 <SDIO_GetResponse>
 8006876:	4602      	mov	r2, r0
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2108      	movs	r1, #8
 8006882:	4618      	mov	r0, r3
 8006884:	f000 ff17 	bl	80076b6 <SDIO_GetResponse>
 8006888:	4602      	mov	r2, r0
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	210c      	movs	r1, #12
 8006894:	4618      	mov	r0, r3
 8006896:	f000 ff0e 	bl	80076b6 <SDIO_GetResponse>
 800689a:	4602      	mov	r2, r0
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d00d      	beq.n	80068c6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f107 020e 	add.w	r2, r7, #14
 80068b2:	4611      	mov	r1, r2
 80068b4:	4618      	mov	r0, r3
 80068b6:	f001 f8eb 	bl	8007a90 <SDMMC_CmdSetRelAdd>
 80068ba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80068bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <SD_InitCard+0xae>
    {
      return errorstate;
 80068c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c4:	e071      	b.n	80069aa <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d036      	beq.n	800693c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80068ce:	89fb      	ldrh	r3, [r7, #14]
 80068d0:	461a      	mov	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068de:	041b      	lsls	r3, r3, #16
 80068e0:	4619      	mov	r1, r3
 80068e2:	4610      	mov	r0, r2
 80068e4:	f001 f8b5 	bl	8007a52 <SDMMC_CmdSendCSD>
 80068e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80068ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80068f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f2:	e05a      	b.n	80069aa <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2100      	movs	r1, #0
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 fedb 	bl	80076b6 <SDIO_GetResponse>
 8006900:	4602      	mov	r2, r0
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2104      	movs	r1, #4
 800690c:	4618      	mov	r0, r3
 800690e:	f000 fed2 	bl	80076b6 <SDIO_GetResponse>
 8006912:	4602      	mov	r2, r0
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2108      	movs	r1, #8
 800691e:	4618      	mov	r0, r3
 8006920:	f000 fec9 	bl	80076b6 <SDIO_GetResponse>
 8006924:	4602      	mov	r2, r0
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	210c      	movs	r1, #12
 8006930:	4618      	mov	r0, r3
 8006932:	f000 fec0 	bl	80076b6 <SDIO_GetResponse>
 8006936:	4602      	mov	r2, r0
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2104      	movs	r1, #4
 8006942:	4618      	mov	r0, r3
 8006944:	f000 feb7 	bl	80076b6 <SDIO_GetResponse>
 8006948:	4603      	mov	r3, r0
 800694a:	0d1a      	lsrs	r2, r3, #20
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006950:	f107 0310 	add.w	r3, r7, #16
 8006954:	4619      	mov	r1, r3
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7ff fd6e 	bl	8006438 <HAL_SD_GetCardCSD>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006962:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006966:	e020      	b.n	80069aa <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6819      	ldr	r1, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006970:	041b      	lsls	r3, r3, #16
 8006972:	f04f 0400 	mov.w	r4, #0
 8006976:	461a      	mov	r2, r3
 8006978:	4623      	mov	r3, r4
 800697a:	4608      	mov	r0, r1
 800697c:	f000 ffa6 	bl	80078cc <SDMMC_CmdSelDesel>
 8006980:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <SD_InitCard+0x174>
  {
    return errorstate;
 8006988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800698a:	e00e      	b.n	80069aa <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681d      	ldr	r5, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	466c      	mov	r4, sp
 8006994:	f103 0210 	add.w	r2, r3, #16
 8006998:	ca07      	ldmia	r2, {r0, r1, r2}
 800699a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800699e:	3304      	adds	r3, #4
 80069a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069a2:	4628      	mov	r0, r5
 80069a4:	f000 fdea 	bl	800757c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3740      	adds	r7, #64	; 0x40
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080069b4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	2300      	movs	r3, #0
 80069c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 ffa0 	bl	8007912 <SDMMC_CmdGoIdleState>
 80069d2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <SD_PowerON+0x2a>
  {
    return errorstate;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	e072      	b.n	8006ac4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 ffb3 	bl	800794e <SDMMC_CmdOperCond>
 80069e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00d      	beq.n	8006a0c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 ff89 	bl	8007912 <SDMMC_CmdGoIdleState>
 8006a00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d004      	beq.n	8006a12 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	e05b      	b.n	8006ac4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d137      	bne.n	8006a8a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2100      	movs	r1, #0
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 ffb3 	bl	800798c <SDMMC_CmdAppCommand>
 8006a26:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d02d      	beq.n	8006a8a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a32:	e047      	b.n	8006ac4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2100      	movs	r1, #0
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 ffa6 	bl	800798c <SDMMC_CmdAppCommand>
 8006a40:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <SD_PowerON+0x98>
    {
      return errorstate;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	e03b      	b.n	8006ac4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	491e      	ldr	r1, [pc, #120]	; (8006acc <SD_PowerON+0x118>)
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 ffbc 	bl	80079d0 <SDMMC_CmdAppOperCommand>
 8006a58:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a64:	e02e      	b.n	8006ac4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 fe22 	bl	80076b6 <SDIO_GetResponse>
 8006a72:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	0fdb      	lsrs	r3, r3, #31
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <SD_PowerON+0xcc>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e000      	b.n	8006a82 <SD_PowerON+0xce>
 8006a80:	2300      	movs	r3, #0
 8006a82:	613b      	str	r3, [r7, #16]

    count++;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	3301      	adds	r3, #1
 8006a88:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d802      	bhi.n	8006a9a <SD_PowerON+0xe6>
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0cc      	beq.n	8006a34 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d902      	bls.n	8006aaa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006aa8:	e00c      	b.n	8006ac4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d003      	beq.n	8006abc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	645a      	str	r2, [r3, #68]	; 0x44
 8006aba:	e002      	b.n	8006ac2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3718      	adds	r7, #24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	c1100000 	.word	0xc1100000

08006ad0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d102      	bne.n	8006ae6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006ae0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ae4:	e018      	b.n	8006b18 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aee:	041b      	lsls	r3, r3, #16
 8006af0:	4619      	mov	r1, r3
 8006af2:	4610      	mov	r0, r2
 8006af4:	f000 ffed 	bl	8007ad2 <SDMMC_CmdSendStatus>
 8006af8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	e009      	b.n	8006b18 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2100      	movs	r1, #0
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fdd3 	bl	80076b6 <SDIO_GetResponse>
 8006b10:	4602      	mov	r2, r0
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e034      	b.n	8006ba0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d106      	bne.n	8006b50 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f7fb fb84 	bl	8002258 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3308      	adds	r3, #8
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	f000 fc0a 	bl	8007374 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6818      	ldr	r0, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	68b9      	ldr	r1, [r7, #8]
 8006b6c:	f000 fc72 	bl	8007454 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6858      	ldr	r0, [r3, #4]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	f000 fcbd 	bl	80074fc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	6892      	ldr	r2, [r2, #8]
 8006b8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	6892      	ldr	r2, [r2, #8]
 8006b96:	f041 0101 	orr.w	r1, r1, #1
 8006b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e03f      	b.n	8006c3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d106      	bne.n	8006bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7fb fa54 	bl	800207c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2224      	movs	r2, #36	; 0x24
 8006bd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f829 	bl	8006c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	691a      	ldr	r2, [r3, #16]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	695a      	ldr	r2, [r3, #20]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68da      	ldr	r2, [r3, #12]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c48:	b085      	sub	sp, #20
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	431a      	orrs	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006c86:	f023 030c 	bic.w	r3, r3, #12
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6812      	ldr	r2, [r2, #0]
 8006c8e:	68f9      	ldr	r1, [r7, #12]
 8006c90:	430b      	orrs	r3, r1
 8006c92:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	699a      	ldr	r2, [r3, #24]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cb2:	f040 8199 	bne.w	8006fe8 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4ac6      	ldr	r2, [pc, #792]	; (8006fd4 <UART_SetConfig+0x390>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00f      	beq.n	8006ce0 <UART_SetConfig+0x9c>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4ac4      	ldr	r2, [pc, #784]	; (8006fd8 <UART_SetConfig+0x394>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d00a      	beq.n	8006ce0 <UART_SetConfig+0x9c>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4ac3      	ldr	r2, [pc, #780]	; (8006fdc <UART_SetConfig+0x398>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d005      	beq.n	8006ce0 <UART_SetConfig+0x9c>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4ac1      	ldr	r2, [pc, #772]	; (8006fe0 <UART_SetConfig+0x39c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	f040 80bd 	bne.w	8006e5a <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ce0:	f7fe f950 	bl	8004f84 <HAL_RCC_GetPCLK2Freq>
 8006ce4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	461d      	mov	r5, r3
 8006cea:	f04f 0600 	mov.w	r6, #0
 8006cee:	46a8      	mov	r8, r5
 8006cf0:	46b1      	mov	r9, r6
 8006cf2:	eb18 0308 	adds.w	r3, r8, r8
 8006cf6:	eb49 0409 	adc.w	r4, r9, r9
 8006cfa:	4698      	mov	r8, r3
 8006cfc:	46a1      	mov	r9, r4
 8006cfe:	eb18 0805 	adds.w	r8, r8, r5
 8006d02:	eb49 0906 	adc.w	r9, r9, r6
 8006d06:	f04f 0100 	mov.w	r1, #0
 8006d0a:	f04f 0200 	mov.w	r2, #0
 8006d0e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d12:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d16:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d1a:	4688      	mov	r8, r1
 8006d1c:	4691      	mov	r9, r2
 8006d1e:	eb18 0005 	adds.w	r0, r8, r5
 8006d22:	eb49 0106 	adc.w	r1, r9, r6
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	461d      	mov	r5, r3
 8006d2c:	f04f 0600 	mov.w	r6, #0
 8006d30:	196b      	adds	r3, r5, r5
 8006d32:	eb46 0406 	adc.w	r4, r6, r6
 8006d36:	461a      	mov	r2, r3
 8006d38:	4623      	mov	r3, r4
 8006d3a:	f7f9 fac1 	bl	80002c0 <__aeabi_uldivmod>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	460c      	mov	r4, r1
 8006d42:	461a      	mov	r2, r3
 8006d44:	4ba7      	ldr	r3, [pc, #668]	; (8006fe4 <UART_SetConfig+0x3a0>)
 8006d46:	fba3 2302 	umull	r2, r3, r3, r2
 8006d4a:	095b      	lsrs	r3, r3, #5
 8006d4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	461d      	mov	r5, r3
 8006d54:	f04f 0600 	mov.w	r6, #0
 8006d58:	46a9      	mov	r9, r5
 8006d5a:	46b2      	mov	sl, r6
 8006d5c:	eb19 0309 	adds.w	r3, r9, r9
 8006d60:	eb4a 040a 	adc.w	r4, sl, sl
 8006d64:	4699      	mov	r9, r3
 8006d66:	46a2      	mov	sl, r4
 8006d68:	eb19 0905 	adds.w	r9, r9, r5
 8006d6c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d70:	f04f 0100 	mov.w	r1, #0
 8006d74:	f04f 0200 	mov.w	r2, #0
 8006d78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d84:	4689      	mov	r9, r1
 8006d86:	4692      	mov	sl, r2
 8006d88:	eb19 0005 	adds.w	r0, r9, r5
 8006d8c:	eb4a 0106 	adc.w	r1, sl, r6
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	461d      	mov	r5, r3
 8006d96:	f04f 0600 	mov.w	r6, #0
 8006d9a:	196b      	adds	r3, r5, r5
 8006d9c:	eb46 0406 	adc.w	r4, r6, r6
 8006da0:	461a      	mov	r2, r3
 8006da2:	4623      	mov	r3, r4
 8006da4:	f7f9 fa8c 	bl	80002c0 <__aeabi_uldivmod>
 8006da8:	4603      	mov	r3, r0
 8006daa:	460c      	mov	r4, r1
 8006dac:	461a      	mov	r2, r3
 8006dae:	4b8d      	ldr	r3, [pc, #564]	; (8006fe4 <UART_SetConfig+0x3a0>)
 8006db0:	fba3 1302 	umull	r1, r3, r3, r2
 8006db4:	095b      	lsrs	r3, r3, #5
 8006db6:	2164      	movs	r1, #100	; 0x64
 8006db8:	fb01 f303 	mul.w	r3, r1, r3
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	00db      	lsls	r3, r3, #3
 8006dc0:	3332      	adds	r3, #50	; 0x32
 8006dc2:	4a88      	ldr	r2, [pc, #544]	; (8006fe4 <UART_SetConfig+0x3a0>)
 8006dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc8:	095b      	lsrs	r3, r3, #5
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006dd0:	4498      	add	r8, r3
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	461d      	mov	r5, r3
 8006dd6:	f04f 0600 	mov.w	r6, #0
 8006dda:	46a9      	mov	r9, r5
 8006ddc:	46b2      	mov	sl, r6
 8006dde:	eb19 0309 	adds.w	r3, r9, r9
 8006de2:	eb4a 040a 	adc.w	r4, sl, sl
 8006de6:	4699      	mov	r9, r3
 8006de8:	46a2      	mov	sl, r4
 8006dea:	eb19 0905 	adds.w	r9, r9, r5
 8006dee:	eb4a 0a06 	adc.w	sl, sl, r6
 8006df2:	f04f 0100 	mov.w	r1, #0
 8006df6:	f04f 0200 	mov.w	r2, #0
 8006dfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dfe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e06:	4689      	mov	r9, r1
 8006e08:	4692      	mov	sl, r2
 8006e0a:	eb19 0005 	adds.w	r0, r9, r5
 8006e0e:	eb4a 0106 	adc.w	r1, sl, r6
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	461d      	mov	r5, r3
 8006e18:	f04f 0600 	mov.w	r6, #0
 8006e1c:	196b      	adds	r3, r5, r5
 8006e1e:	eb46 0406 	adc.w	r4, r6, r6
 8006e22:	461a      	mov	r2, r3
 8006e24:	4623      	mov	r3, r4
 8006e26:	f7f9 fa4b 	bl	80002c0 <__aeabi_uldivmod>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	461a      	mov	r2, r3
 8006e30:	4b6c      	ldr	r3, [pc, #432]	; (8006fe4 <UART_SetConfig+0x3a0>)
 8006e32:	fba3 1302 	umull	r1, r3, r3, r2
 8006e36:	095b      	lsrs	r3, r3, #5
 8006e38:	2164      	movs	r1, #100	; 0x64
 8006e3a:	fb01 f303 	mul.w	r3, r1, r3
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	00db      	lsls	r3, r3, #3
 8006e42:	3332      	adds	r3, #50	; 0x32
 8006e44:	4a67      	ldr	r2, [pc, #412]	; (8006fe4 <UART_SetConfig+0x3a0>)
 8006e46:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4a:	095b      	lsrs	r3, r3, #5
 8006e4c:	f003 0207 	and.w	r2, r3, #7
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4442      	add	r2, r8
 8006e56:	609a      	str	r2, [r3, #8]
 8006e58:	e27d      	b.n	8007356 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e5a:	f7fe f87f 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8006e5e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	461d      	mov	r5, r3
 8006e64:	f04f 0600 	mov.w	r6, #0
 8006e68:	46a8      	mov	r8, r5
 8006e6a:	46b1      	mov	r9, r6
 8006e6c:	eb18 0308 	adds.w	r3, r8, r8
 8006e70:	eb49 0409 	adc.w	r4, r9, r9
 8006e74:	4698      	mov	r8, r3
 8006e76:	46a1      	mov	r9, r4
 8006e78:	eb18 0805 	adds.w	r8, r8, r5
 8006e7c:	eb49 0906 	adc.w	r9, r9, r6
 8006e80:	f04f 0100 	mov.w	r1, #0
 8006e84:	f04f 0200 	mov.w	r2, #0
 8006e88:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e8c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e90:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e94:	4688      	mov	r8, r1
 8006e96:	4691      	mov	r9, r2
 8006e98:	eb18 0005 	adds.w	r0, r8, r5
 8006e9c:	eb49 0106 	adc.w	r1, r9, r6
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	461d      	mov	r5, r3
 8006ea6:	f04f 0600 	mov.w	r6, #0
 8006eaa:	196b      	adds	r3, r5, r5
 8006eac:	eb46 0406 	adc.w	r4, r6, r6
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	4623      	mov	r3, r4
 8006eb4:	f7f9 fa04 	bl	80002c0 <__aeabi_uldivmod>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	460c      	mov	r4, r1
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	4b49      	ldr	r3, [pc, #292]	; (8006fe4 <UART_SetConfig+0x3a0>)
 8006ec0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ec4:	095b      	lsrs	r3, r3, #5
 8006ec6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	461d      	mov	r5, r3
 8006ece:	f04f 0600 	mov.w	r6, #0
 8006ed2:	46a9      	mov	r9, r5
 8006ed4:	46b2      	mov	sl, r6
 8006ed6:	eb19 0309 	adds.w	r3, r9, r9
 8006eda:	eb4a 040a 	adc.w	r4, sl, sl
 8006ede:	4699      	mov	r9, r3
 8006ee0:	46a2      	mov	sl, r4
 8006ee2:	eb19 0905 	adds.w	r9, r9, r5
 8006ee6:	eb4a 0a06 	adc.w	sl, sl, r6
 8006eea:	f04f 0100 	mov.w	r1, #0
 8006eee:	f04f 0200 	mov.w	r2, #0
 8006ef2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ef6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006efa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006efe:	4689      	mov	r9, r1
 8006f00:	4692      	mov	sl, r2
 8006f02:	eb19 0005 	adds.w	r0, r9, r5
 8006f06:	eb4a 0106 	adc.w	r1, sl, r6
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	461d      	mov	r5, r3
 8006f10:	f04f 0600 	mov.w	r6, #0
 8006f14:	196b      	adds	r3, r5, r5
 8006f16:	eb46 0406 	adc.w	r4, r6, r6
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	4623      	mov	r3, r4
 8006f1e:	f7f9 f9cf 	bl	80002c0 <__aeabi_uldivmod>
 8006f22:	4603      	mov	r3, r0
 8006f24:	460c      	mov	r4, r1
 8006f26:	461a      	mov	r2, r3
 8006f28:	4b2e      	ldr	r3, [pc, #184]	; (8006fe4 <UART_SetConfig+0x3a0>)
 8006f2a:	fba3 1302 	umull	r1, r3, r3, r2
 8006f2e:	095b      	lsrs	r3, r3, #5
 8006f30:	2164      	movs	r1, #100	; 0x64
 8006f32:	fb01 f303 	mul.w	r3, r1, r3
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	3332      	adds	r3, #50	; 0x32
 8006f3c:	4a29      	ldr	r2, [pc, #164]	; (8006fe4 <UART_SetConfig+0x3a0>)
 8006f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f4a:	4498      	add	r8, r3
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	461d      	mov	r5, r3
 8006f50:	f04f 0600 	mov.w	r6, #0
 8006f54:	46a9      	mov	r9, r5
 8006f56:	46b2      	mov	sl, r6
 8006f58:	eb19 0309 	adds.w	r3, r9, r9
 8006f5c:	eb4a 040a 	adc.w	r4, sl, sl
 8006f60:	4699      	mov	r9, r3
 8006f62:	46a2      	mov	sl, r4
 8006f64:	eb19 0905 	adds.w	r9, r9, r5
 8006f68:	eb4a 0a06 	adc.w	sl, sl, r6
 8006f6c:	f04f 0100 	mov.w	r1, #0
 8006f70:	f04f 0200 	mov.w	r2, #0
 8006f74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f80:	4689      	mov	r9, r1
 8006f82:	4692      	mov	sl, r2
 8006f84:	eb19 0005 	adds.w	r0, r9, r5
 8006f88:	eb4a 0106 	adc.w	r1, sl, r6
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	461d      	mov	r5, r3
 8006f92:	f04f 0600 	mov.w	r6, #0
 8006f96:	196b      	adds	r3, r5, r5
 8006f98:	eb46 0406 	adc.w	r4, r6, r6
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4623      	mov	r3, r4
 8006fa0:	f7f9 f98e 	bl	80002c0 <__aeabi_uldivmod>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	461a      	mov	r2, r3
 8006faa:	4b0e      	ldr	r3, [pc, #56]	; (8006fe4 <UART_SetConfig+0x3a0>)
 8006fac:	fba3 1302 	umull	r1, r3, r3, r2
 8006fb0:	095b      	lsrs	r3, r3, #5
 8006fb2:	2164      	movs	r1, #100	; 0x64
 8006fb4:	fb01 f303 	mul.w	r3, r1, r3
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	3332      	adds	r3, #50	; 0x32
 8006fbe:	4a09      	ldr	r2, [pc, #36]	; (8006fe4 <UART_SetConfig+0x3a0>)
 8006fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc4:	095b      	lsrs	r3, r3, #5
 8006fc6:	f003 0207 	and.w	r2, r3, #7
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4442      	add	r2, r8
 8006fd0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006fd2:	e1c0      	b.n	8007356 <UART_SetConfig+0x712>
 8006fd4:	40011000 	.word	0x40011000
 8006fd8:	40011400 	.word	0x40011400
 8006fdc:	40011800 	.word	0x40011800
 8006fe0:	40011c00 	.word	0x40011c00
 8006fe4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4adc      	ldr	r2, [pc, #880]	; (8007360 <UART_SetConfig+0x71c>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00f      	beq.n	8007012 <UART_SetConfig+0x3ce>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4adb      	ldr	r2, [pc, #876]	; (8007364 <UART_SetConfig+0x720>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d00a      	beq.n	8007012 <UART_SetConfig+0x3ce>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4ad9      	ldr	r2, [pc, #868]	; (8007368 <UART_SetConfig+0x724>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d005      	beq.n	8007012 <UART_SetConfig+0x3ce>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4ad8      	ldr	r2, [pc, #864]	; (800736c <UART_SetConfig+0x728>)
 800700c:	4293      	cmp	r3, r2
 800700e:	f040 80d1 	bne.w	80071b4 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007012:	f7fd ffb7 	bl	8004f84 <HAL_RCC_GetPCLK2Freq>
 8007016:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	469a      	mov	sl, r3
 800701c:	f04f 0b00 	mov.w	fp, #0
 8007020:	46d0      	mov	r8, sl
 8007022:	46d9      	mov	r9, fp
 8007024:	eb18 0308 	adds.w	r3, r8, r8
 8007028:	eb49 0409 	adc.w	r4, r9, r9
 800702c:	4698      	mov	r8, r3
 800702e:	46a1      	mov	r9, r4
 8007030:	eb18 080a 	adds.w	r8, r8, sl
 8007034:	eb49 090b 	adc.w	r9, r9, fp
 8007038:	f04f 0100 	mov.w	r1, #0
 800703c:	f04f 0200 	mov.w	r2, #0
 8007040:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007044:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007048:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800704c:	4688      	mov	r8, r1
 800704e:	4691      	mov	r9, r2
 8007050:	eb1a 0508 	adds.w	r5, sl, r8
 8007054:	eb4b 0609 	adc.w	r6, fp, r9
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	4619      	mov	r1, r3
 800705e:	f04f 0200 	mov.w	r2, #0
 8007062:	f04f 0300 	mov.w	r3, #0
 8007066:	f04f 0400 	mov.w	r4, #0
 800706a:	0094      	lsls	r4, r2, #2
 800706c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007070:	008b      	lsls	r3, r1, #2
 8007072:	461a      	mov	r2, r3
 8007074:	4623      	mov	r3, r4
 8007076:	4628      	mov	r0, r5
 8007078:	4631      	mov	r1, r6
 800707a:	f7f9 f921 	bl	80002c0 <__aeabi_uldivmod>
 800707e:	4603      	mov	r3, r0
 8007080:	460c      	mov	r4, r1
 8007082:	461a      	mov	r2, r3
 8007084:	4bba      	ldr	r3, [pc, #744]	; (8007370 <UART_SetConfig+0x72c>)
 8007086:	fba3 2302 	umull	r2, r3, r3, r2
 800708a:	095b      	lsrs	r3, r3, #5
 800708c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	469b      	mov	fp, r3
 8007094:	f04f 0c00 	mov.w	ip, #0
 8007098:	46d9      	mov	r9, fp
 800709a:	46e2      	mov	sl, ip
 800709c:	eb19 0309 	adds.w	r3, r9, r9
 80070a0:	eb4a 040a 	adc.w	r4, sl, sl
 80070a4:	4699      	mov	r9, r3
 80070a6:	46a2      	mov	sl, r4
 80070a8:	eb19 090b 	adds.w	r9, r9, fp
 80070ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 80070b0:	f04f 0100 	mov.w	r1, #0
 80070b4:	f04f 0200 	mov.w	r2, #0
 80070b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070c4:	4689      	mov	r9, r1
 80070c6:	4692      	mov	sl, r2
 80070c8:	eb1b 0509 	adds.w	r5, fp, r9
 80070cc:	eb4c 060a 	adc.w	r6, ip, sl
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	4619      	mov	r1, r3
 80070d6:	f04f 0200 	mov.w	r2, #0
 80070da:	f04f 0300 	mov.w	r3, #0
 80070de:	f04f 0400 	mov.w	r4, #0
 80070e2:	0094      	lsls	r4, r2, #2
 80070e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070e8:	008b      	lsls	r3, r1, #2
 80070ea:	461a      	mov	r2, r3
 80070ec:	4623      	mov	r3, r4
 80070ee:	4628      	mov	r0, r5
 80070f0:	4631      	mov	r1, r6
 80070f2:	f7f9 f8e5 	bl	80002c0 <__aeabi_uldivmod>
 80070f6:	4603      	mov	r3, r0
 80070f8:	460c      	mov	r4, r1
 80070fa:	461a      	mov	r2, r3
 80070fc:	4b9c      	ldr	r3, [pc, #624]	; (8007370 <UART_SetConfig+0x72c>)
 80070fe:	fba3 1302 	umull	r1, r3, r3, r2
 8007102:	095b      	lsrs	r3, r3, #5
 8007104:	2164      	movs	r1, #100	; 0x64
 8007106:	fb01 f303 	mul.w	r3, r1, r3
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	011b      	lsls	r3, r3, #4
 800710e:	3332      	adds	r3, #50	; 0x32
 8007110:	4a97      	ldr	r2, [pc, #604]	; (8007370 <UART_SetConfig+0x72c>)
 8007112:	fba2 2303 	umull	r2, r3, r2, r3
 8007116:	095b      	lsrs	r3, r3, #5
 8007118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800711c:	4498      	add	r8, r3
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	469b      	mov	fp, r3
 8007122:	f04f 0c00 	mov.w	ip, #0
 8007126:	46d9      	mov	r9, fp
 8007128:	46e2      	mov	sl, ip
 800712a:	eb19 0309 	adds.w	r3, r9, r9
 800712e:	eb4a 040a 	adc.w	r4, sl, sl
 8007132:	4699      	mov	r9, r3
 8007134:	46a2      	mov	sl, r4
 8007136:	eb19 090b 	adds.w	r9, r9, fp
 800713a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800713e:	f04f 0100 	mov.w	r1, #0
 8007142:	f04f 0200 	mov.w	r2, #0
 8007146:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800714a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800714e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007152:	4689      	mov	r9, r1
 8007154:	4692      	mov	sl, r2
 8007156:	eb1b 0509 	adds.w	r5, fp, r9
 800715a:	eb4c 060a 	adc.w	r6, ip, sl
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	4619      	mov	r1, r3
 8007164:	f04f 0200 	mov.w	r2, #0
 8007168:	f04f 0300 	mov.w	r3, #0
 800716c:	f04f 0400 	mov.w	r4, #0
 8007170:	0094      	lsls	r4, r2, #2
 8007172:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007176:	008b      	lsls	r3, r1, #2
 8007178:	461a      	mov	r2, r3
 800717a:	4623      	mov	r3, r4
 800717c:	4628      	mov	r0, r5
 800717e:	4631      	mov	r1, r6
 8007180:	f7f9 f89e 	bl	80002c0 <__aeabi_uldivmod>
 8007184:	4603      	mov	r3, r0
 8007186:	460c      	mov	r4, r1
 8007188:	461a      	mov	r2, r3
 800718a:	4b79      	ldr	r3, [pc, #484]	; (8007370 <UART_SetConfig+0x72c>)
 800718c:	fba3 1302 	umull	r1, r3, r3, r2
 8007190:	095b      	lsrs	r3, r3, #5
 8007192:	2164      	movs	r1, #100	; 0x64
 8007194:	fb01 f303 	mul.w	r3, r1, r3
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	011b      	lsls	r3, r3, #4
 800719c:	3332      	adds	r3, #50	; 0x32
 800719e:	4a74      	ldr	r2, [pc, #464]	; (8007370 <UART_SetConfig+0x72c>)
 80071a0:	fba2 2303 	umull	r2, r3, r2, r3
 80071a4:	095b      	lsrs	r3, r3, #5
 80071a6:	f003 020f 	and.w	r2, r3, #15
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4442      	add	r2, r8
 80071b0:	609a      	str	r2, [r3, #8]
 80071b2:	e0d0      	b.n	8007356 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 80071b4:	f7fd fed2 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 80071b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	469a      	mov	sl, r3
 80071be:	f04f 0b00 	mov.w	fp, #0
 80071c2:	46d0      	mov	r8, sl
 80071c4:	46d9      	mov	r9, fp
 80071c6:	eb18 0308 	adds.w	r3, r8, r8
 80071ca:	eb49 0409 	adc.w	r4, r9, r9
 80071ce:	4698      	mov	r8, r3
 80071d0:	46a1      	mov	r9, r4
 80071d2:	eb18 080a 	adds.w	r8, r8, sl
 80071d6:	eb49 090b 	adc.w	r9, r9, fp
 80071da:	f04f 0100 	mov.w	r1, #0
 80071de:	f04f 0200 	mov.w	r2, #0
 80071e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80071e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80071ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80071ee:	4688      	mov	r8, r1
 80071f0:	4691      	mov	r9, r2
 80071f2:	eb1a 0508 	adds.w	r5, sl, r8
 80071f6:	eb4b 0609 	adc.w	r6, fp, r9
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	4619      	mov	r1, r3
 8007200:	f04f 0200 	mov.w	r2, #0
 8007204:	f04f 0300 	mov.w	r3, #0
 8007208:	f04f 0400 	mov.w	r4, #0
 800720c:	0094      	lsls	r4, r2, #2
 800720e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007212:	008b      	lsls	r3, r1, #2
 8007214:	461a      	mov	r2, r3
 8007216:	4623      	mov	r3, r4
 8007218:	4628      	mov	r0, r5
 800721a:	4631      	mov	r1, r6
 800721c:	f7f9 f850 	bl	80002c0 <__aeabi_uldivmod>
 8007220:	4603      	mov	r3, r0
 8007222:	460c      	mov	r4, r1
 8007224:	461a      	mov	r2, r3
 8007226:	4b52      	ldr	r3, [pc, #328]	; (8007370 <UART_SetConfig+0x72c>)
 8007228:	fba3 2302 	umull	r2, r3, r3, r2
 800722c:	095b      	lsrs	r3, r3, #5
 800722e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	469b      	mov	fp, r3
 8007236:	f04f 0c00 	mov.w	ip, #0
 800723a:	46d9      	mov	r9, fp
 800723c:	46e2      	mov	sl, ip
 800723e:	eb19 0309 	adds.w	r3, r9, r9
 8007242:	eb4a 040a 	adc.w	r4, sl, sl
 8007246:	4699      	mov	r9, r3
 8007248:	46a2      	mov	sl, r4
 800724a:	eb19 090b 	adds.w	r9, r9, fp
 800724e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007252:	f04f 0100 	mov.w	r1, #0
 8007256:	f04f 0200 	mov.w	r2, #0
 800725a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800725e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007262:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007266:	4689      	mov	r9, r1
 8007268:	4692      	mov	sl, r2
 800726a:	eb1b 0509 	adds.w	r5, fp, r9
 800726e:	eb4c 060a 	adc.w	r6, ip, sl
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	4619      	mov	r1, r3
 8007278:	f04f 0200 	mov.w	r2, #0
 800727c:	f04f 0300 	mov.w	r3, #0
 8007280:	f04f 0400 	mov.w	r4, #0
 8007284:	0094      	lsls	r4, r2, #2
 8007286:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800728a:	008b      	lsls	r3, r1, #2
 800728c:	461a      	mov	r2, r3
 800728e:	4623      	mov	r3, r4
 8007290:	4628      	mov	r0, r5
 8007292:	4631      	mov	r1, r6
 8007294:	f7f9 f814 	bl	80002c0 <__aeabi_uldivmod>
 8007298:	4603      	mov	r3, r0
 800729a:	460c      	mov	r4, r1
 800729c:	461a      	mov	r2, r3
 800729e:	4b34      	ldr	r3, [pc, #208]	; (8007370 <UART_SetConfig+0x72c>)
 80072a0:	fba3 1302 	umull	r1, r3, r3, r2
 80072a4:	095b      	lsrs	r3, r3, #5
 80072a6:	2164      	movs	r1, #100	; 0x64
 80072a8:	fb01 f303 	mul.w	r3, r1, r3
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	011b      	lsls	r3, r3, #4
 80072b0:	3332      	adds	r3, #50	; 0x32
 80072b2:	4a2f      	ldr	r2, [pc, #188]	; (8007370 <UART_SetConfig+0x72c>)
 80072b4:	fba2 2303 	umull	r2, r3, r2, r3
 80072b8:	095b      	lsrs	r3, r3, #5
 80072ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072be:	4498      	add	r8, r3
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	469b      	mov	fp, r3
 80072c4:	f04f 0c00 	mov.w	ip, #0
 80072c8:	46d9      	mov	r9, fp
 80072ca:	46e2      	mov	sl, ip
 80072cc:	eb19 0309 	adds.w	r3, r9, r9
 80072d0:	eb4a 040a 	adc.w	r4, sl, sl
 80072d4:	4699      	mov	r9, r3
 80072d6:	46a2      	mov	sl, r4
 80072d8:	eb19 090b 	adds.w	r9, r9, fp
 80072dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80072e0:	f04f 0100 	mov.w	r1, #0
 80072e4:	f04f 0200 	mov.w	r2, #0
 80072e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072f4:	4689      	mov	r9, r1
 80072f6:	4692      	mov	sl, r2
 80072f8:	eb1b 0509 	adds.w	r5, fp, r9
 80072fc:	eb4c 060a 	adc.w	r6, ip, sl
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	4619      	mov	r1, r3
 8007306:	f04f 0200 	mov.w	r2, #0
 800730a:	f04f 0300 	mov.w	r3, #0
 800730e:	f04f 0400 	mov.w	r4, #0
 8007312:	0094      	lsls	r4, r2, #2
 8007314:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007318:	008b      	lsls	r3, r1, #2
 800731a:	461a      	mov	r2, r3
 800731c:	4623      	mov	r3, r4
 800731e:	4628      	mov	r0, r5
 8007320:	4631      	mov	r1, r6
 8007322:	f7f8 ffcd 	bl	80002c0 <__aeabi_uldivmod>
 8007326:	4603      	mov	r3, r0
 8007328:	460c      	mov	r4, r1
 800732a:	461a      	mov	r2, r3
 800732c:	4b10      	ldr	r3, [pc, #64]	; (8007370 <UART_SetConfig+0x72c>)
 800732e:	fba3 1302 	umull	r1, r3, r3, r2
 8007332:	095b      	lsrs	r3, r3, #5
 8007334:	2164      	movs	r1, #100	; 0x64
 8007336:	fb01 f303 	mul.w	r3, r1, r3
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	011b      	lsls	r3, r3, #4
 800733e:	3332      	adds	r3, #50	; 0x32
 8007340:	4a0b      	ldr	r2, [pc, #44]	; (8007370 <UART_SetConfig+0x72c>)
 8007342:	fba2 2303 	umull	r2, r3, r2, r3
 8007346:	095b      	lsrs	r3, r3, #5
 8007348:	f003 020f 	and.w	r2, r3, #15
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4442      	add	r2, r8
 8007352:	609a      	str	r2, [r3, #8]
}
 8007354:	e7ff      	b.n	8007356 <UART_SetConfig+0x712>
 8007356:	bf00      	nop
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007360:	40011000 	.word	0x40011000
 8007364:	40011400 	.word	0x40011400
 8007368:	40011800 	.word	0x40011800
 800736c:	40011c00 	.word	0x40011c00
 8007370:	51eb851f 	.word	0x51eb851f

08007374 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800738c:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4b2f      	ldr	r3, [pc, #188]	; (8007450 <FSMC_NORSRAM_Init+0xdc>)
 8007392:	4013      	ands	r3, r2
 8007394:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800739e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80073a4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80073aa:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80073b0:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 80073b6:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80073bc:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80073c2:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80073c8:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80073ce:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 80073d4:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 80073da:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 80073e0:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 80073e6:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	2b08      	cmp	r3, #8
 80073f4:	d103      	bne.n	80073fe <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073fc:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68f9      	ldr	r1, [r7, #12]
 8007406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007412:	d10a      	bne.n	800742a <FSMC_NORSRAM_Init+0xb6>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d006      	beq.n	800742a <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007424:	431a      	orrs	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d006      	beq.n	8007440 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743a:	431a      	orrs	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3714      	adds	r7, #20
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	ffc00480 	.word	0xffc00480

08007454 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007460:	2300      	movs	r3, #0
 8007462:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	1c5a      	adds	r2, r3, #1
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800746e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007476:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007482:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800748a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007492:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	3b01      	subs	r3, #1
 800749a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800749c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	3b02      	subs	r3, #2
 80074a4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80074a6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80074ac:	4313      	orrs	r3, r2
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	1c5a      	adds	r2, r3, #1
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6979      	ldr	r1, [r7, #20]
 80074bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074cc:	d10e      	bne.n	80074ec <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80074d6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	3b01      	subs	r3, #1
 80074de:	051b      	lsls	r3, r3, #20
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	371c      	adds	r7, #28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
	...

080074fc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
 8007508:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800750a:	2300      	movs	r3, #0
 800750c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007514:	d122      	bne.n	800755c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	4b15      	ldr	r3, [pc, #84]	; (8007578 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007524:	4013      	ands	r3, r2
 8007526:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007532:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800753a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007542:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007548:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	4313      	orrs	r3, r2
 800754e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	6979      	ldr	r1, [r7, #20]
 8007556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800755a:	e005      	b.n	8007568 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	371c      	adds	r7, #28
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	cff00000 	.word	0xcff00000

0800757c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800757c:	b084      	sub	sp, #16
 800757e:	b480      	push	{r7}
 8007580:	b085      	sub	sp, #20
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	f107 001c 	add.w	r0, r7, #28
 800758a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800758e:	2300      	movs	r3, #0
 8007590:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007592:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007594:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007596:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800759a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800759c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800759e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80075a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80075a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80075a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80075b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	b004      	add	sp, #16
 80075d0:	4770      	bx	lr

080075d2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800760e:	b580      	push	{r7, lr}
 8007610:	b082      	sub	sp, #8
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2203      	movs	r2, #3
 800761a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800761c:	2002      	movs	r0, #2
 800761e:	f7fa ffbd 	bl	800259c <HAL_Delay>
  
  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0303 	and.w	r3, r3, #3
}
 800763c:	4618      	mov	r0, r3
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007666:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800766c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007672:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007682:	f023 030f 	bic.w	r3, r3, #15
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	431a      	orrs	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	b2db      	uxtb	r3, r3
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b085      	sub	sp, #20
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	3314      	adds	r3, #20
 80076c4:	461a      	mov	r2, r3
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	4413      	add	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
}  
 80076d0:	4618      	mov	r0, r3
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80076e6:	2300      	movs	r3, #0
 80076e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007702:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007708:	431a      	orrs	r2, r3
                       Data->DPSM);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800770e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	4313      	orrs	r3, r2
 8007714:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	431a      	orrs	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007726:	2300      	movs	r3, #0

}
 8007728:	4618      	mov	r0, r3
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007742:	2310      	movs	r3, #16
 8007744:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007746:	2340      	movs	r3, #64	; 0x40
 8007748:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800774a:	2300      	movs	r3, #0
 800774c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800774e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007752:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007754:	f107 0308 	add.w	r3, r7, #8
 8007758:	4619      	mov	r1, r3
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7ff ff74 	bl	8007648 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007760:	f241 3288 	movw	r2, #5000	; 0x1388
 8007764:	2110      	movs	r1, #16
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f9fe 	bl	8007b68 <SDMMC_GetCmdResp1>
 800776c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800776e:	69fb      	ldr	r3, [r7, #28]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3720      	adds	r7, #32
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b088      	sub	sp, #32
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007786:	2311      	movs	r3, #17
 8007788:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800778a:	2340      	movs	r3, #64	; 0x40
 800778c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800778e:	2300      	movs	r3, #0
 8007790:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007796:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007798:	f107 0308 	add.w	r3, r7, #8
 800779c:	4619      	mov	r1, r3
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7ff ff52 	bl	8007648 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80077a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80077a8:	2111      	movs	r1, #17
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f9dc 	bl	8007b68 <SDMMC_GetCmdResp1>
 80077b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077b2:	69fb      	ldr	r3, [r7, #28]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3720      	adds	r7, #32
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b088      	sub	sp, #32
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80077ca:	2312      	movs	r3, #18
 80077cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077ce:	2340      	movs	r3, #64	; 0x40
 80077d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077dc:	f107 0308 	add.w	r3, r7, #8
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7ff ff30 	bl	8007648 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80077e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077ec:	2112      	movs	r1, #18
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f9ba 	bl	8007b68 <SDMMC_GetCmdResp1>
 80077f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077f6:	69fb      	ldr	r3, [r7, #28]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3720      	adds	r7, #32
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800780e:	2318      	movs	r3, #24
 8007810:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007812:	2340      	movs	r3, #64	; 0x40
 8007814:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007816:	2300      	movs	r3, #0
 8007818:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800781a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800781e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007820:	f107 0308 	add.w	r3, r7, #8
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff ff0e 	bl	8007648 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800782c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007830:	2118      	movs	r1, #24
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f998 	bl	8007b68 <SDMMC_GetCmdResp1>
 8007838:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800783a:	69fb      	ldr	r3, [r7, #28]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3720      	adds	r7, #32
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b088      	sub	sp, #32
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007852:	2319      	movs	r3, #25
 8007854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007856:	2340      	movs	r3, #64	; 0x40
 8007858:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800785a:	2300      	movs	r3, #0
 800785c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800785e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007862:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007864:	f107 0308 	add.w	r3, r7, #8
 8007868:	4619      	mov	r1, r3
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7ff feec 	bl	8007648 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007870:	f241 3288 	movw	r2, #5000	; 0x1388
 8007874:	2119      	movs	r1, #25
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f976 	bl	8007b68 <SDMMC_GetCmdResp1>
 800787c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800787e:	69fb      	ldr	r3, [r7, #28]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3720      	adds	r7, #32
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007890:	2300      	movs	r3, #0
 8007892:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007894:	230c      	movs	r3, #12
 8007896:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007898:	2340      	movs	r3, #64	; 0x40
 800789a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800789c:	2300      	movs	r3, #0
 800789e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078a6:	f107 0308 	add.w	r3, r7, #8
 80078aa:	4619      	mov	r1, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7ff fecb 	bl	8007648 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80078b2:	4a05      	ldr	r2, [pc, #20]	; (80078c8 <SDMMC_CmdStopTransfer+0x40>)
 80078b4:	210c      	movs	r1, #12
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f956 	bl	8007b68 <SDMMC_GetCmdResp1>
 80078bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078be:	69fb      	ldr	r3, [r7, #28]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3720      	adds	r7, #32
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	05f5e100 	.word	0x05f5e100

080078cc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b08a      	sub	sp, #40	; 0x28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80078dc:	2307      	movs	r3, #7
 80078de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078e0:	2340      	movs	r3, #64	; 0x40
 80078e2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078e4:	2300      	movs	r3, #0
 80078e6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078ec:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078ee:	f107 0310 	add.w	r3, r7, #16
 80078f2:	4619      	mov	r1, r3
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f7ff fea7 	bl	8007648 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80078fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80078fe:	2107      	movs	r1, #7
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 f931 	bl	8007b68 <SDMMC_GetCmdResp1>
 8007906:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800790a:	4618      	mov	r0, r3
 800790c:	3728      	adds	r7, #40	; 0x28
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b088      	sub	sp, #32
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800791a:	2300      	movs	r3, #0
 800791c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800791e:	2300      	movs	r3, #0
 8007920:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007922:	2300      	movs	r3, #0
 8007924:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007926:	2300      	movs	r3, #0
 8007928:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800792a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800792e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007930:	f107 0308 	add.w	r3, r7, #8
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7ff fe86 	bl	8007648 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f8eb 	bl	8007b18 <SDMMC_GetCmdError>
 8007942:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007944:	69fb      	ldr	r3, [r7, #28]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3720      	adds	r7, #32
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b088      	sub	sp, #32
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007956:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800795a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800795c:	2308      	movs	r3, #8
 800795e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007960:	2340      	movs	r3, #64	; 0x40
 8007962:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007964:	2300      	movs	r3, #0
 8007966:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800796c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800796e:	f107 0308 	add.w	r3, r7, #8
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f7ff fe67 	bl	8007648 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fad4 	bl	8007f28 <SDMMC_GetCmdResp7>
 8007980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007982:	69fb      	ldr	r3, [r7, #28]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3720      	adds	r7, #32
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b088      	sub	sp, #32
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800799a:	2337      	movs	r3, #55	; 0x37
 800799c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800799e:	2340      	movs	r3, #64	; 0x40
 80079a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079a2:	2300      	movs	r3, #0
 80079a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079ac:	f107 0308 	add.w	r3, r7, #8
 80079b0:	4619      	mov	r1, r3
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7ff fe48 	bl	8007648 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80079b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80079bc:	2137      	movs	r1, #55	; 0x37
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f8d2 	bl	8007b68 <SDMMC_GetCmdResp1>
 80079c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079c6:	69fb      	ldr	r3, [r7, #28]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3720      	adds	r7, #32
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b088      	sub	sp, #32
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80079e6:	2329      	movs	r3, #41	; 0x29
 80079e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079ea:	2340      	movs	r3, #64	; 0x40
 80079ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079ee:	2300      	movs	r3, #0
 80079f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079f8:	f107 0308 	add.w	r3, r7, #8
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7ff fe22 	bl	8007648 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f9e1 	bl	8007dcc <SDMMC_GetCmdResp3>
 8007a0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3720      	adds	r7, #32
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b088      	sub	sp, #32
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007a22:	2302      	movs	r3, #2
 8007a24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007a26:	23c0      	movs	r3, #192	; 0xc0
 8007a28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a34:	f107 0308 	add.w	r3, r7, #8
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7ff fe04 	bl	8007648 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f97d 	bl	8007d40 <SDMMC_GetCmdResp2>
 8007a46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a48:	69fb      	ldr	r3, [r7, #28]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3720      	adds	r7, #32
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b088      	sub	sp, #32
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007a60:	2309      	movs	r3, #9
 8007a62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007a64:	23c0      	movs	r3, #192	; 0xc0
 8007a66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a72:	f107 0308 	add.w	r3, r7, #8
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f7ff fde5 	bl	8007648 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f95e 	bl	8007d40 <SDMMC_GetCmdResp2>
 8007a84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a86:	69fb      	ldr	r3, [r7, #28]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3720      	adds	r7, #32
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007aa2:	2340      	movs	r3, #64	; 0x40
 8007aa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ab0:	f107 0308 	add.w	r3, r7, #8
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7ff fdc6 	bl	8007648 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	2103      	movs	r1, #3
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f9bd 	bl	8007e40 <SDMMC_GetCmdResp6>
 8007ac6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ac8:	69fb      	ldr	r3, [r7, #28]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3720      	adds	r7, #32
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b088      	sub	sp, #32
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007ae0:	230d      	movs	r3, #13
 8007ae2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ae4:	2340      	movs	r3, #64	; 0x40
 8007ae6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007af0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007af2:	f107 0308 	add.w	r3, r7, #8
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff fda5 	bl	8007648 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b02:	210d      	movs	r1, #13
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f82f 	bl	8007b68 <SDMMC_GetCmdResp1>
 8007b0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b0c:	69fb      	ldr	r3, [r7, #28]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3720      	adds	r7, #32
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007b18:	b490      	push	{r4, r7}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b20:	4b0f      	ldr	r3, [pc, #60]	; (8007b60 <SDMMC_GetCmdError+0x48>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a0f      	ldr	r2, [pc, #60]	; (8007b64 <SDMMC_GetCmdError+0x4c>)
 8007b26:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2a:	0a5b      	lsrs	r3, r3, #9
 8007b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b30:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007b34:	4623      	mov	r3, r4
 8007b36:	1e5c      	subs	r4, r3, #1
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d102      	bne.n	8007b42 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b40:	e009      	b.n	8007b56 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0f2      	beq.n	8007b34 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	22c5      	movs	r2, #197	; 0xc5
 8007b52:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bc90      	pop	{r4, r7}
 8007b5e:	4770      	bx	lr
 8007b60:	20000008 	.word	0x20000008
 8007b64:	10624dd3 	.word	0x10624dd3

08007b68 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007b68:	b590      	push	{r4, r7, lr}
 8007b6a:	b087      	sub	sp, #28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	460b      	mov	r3, r1
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b76:	4b6f      	ldr	r3, [pc, #444]	; (8007d34 <SDMMC_GetCmdResp1+0x1cc>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a6f      	ldr	r2, [pc, #444]	; (8007d38 <SDMMC_GetCmdResp1+0x1d0>)
 8007b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b80:	0a5b      	lsrs	r3, r3, #9
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007b88:	4623      	mov	r3, r4
 8007b8a:	1e5c      	subs	r4, r3, #1
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d102      	bne.n	8007b96 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b94:	e0c9      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b9a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0f0      	beq.n	8007b88 <SDMMC_GetCmdResp1+0x20>
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1eb      	bne.n	8007b88 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb4:	f003 0304 	and.w	r3, r3, #4
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d004      	beq.n	8007bc6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2204      	movs	r2, #4
 8007bc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bc2:	2304      	movs	r3, #4
 8007bc4:	e0b1      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d004      	beq.n	8007bdc <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e0a6      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	22c5      	movs	r2, #197	; 0xc5
 8007be0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f7ff fd5a 	bl	800769c <SDIO_GetCommandResponse>
 8007be8:	4603      	mov	r3, r0
 8007bea:	461a      	mov	r2, r3
 8007bec:	7afb      	ldrb	r3, [r7, #11]
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d001      	beq.n	8007bf6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e099      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f7ff fd5c 	bl	80076b6 <SDIO_GetResponse>
 8007bfe:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	4b4e      	ldr	r3, [pc, #312]	; (8007d3c <SDMMC_GetCmdResp1+0x1d4>)
 8007c04:	4013      	ands	r3, r2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	e08d      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	da02      	bge.n	8007c1a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007c14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c18:	e087      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007c24:	2340      	movs	r3, #64	; 0x40
 8007c26:	e080      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d001      	beq.n	8007c36 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007c32:	2380      	movs	r3, #128	; 0x80
 8007c34:	e079      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d002      	beq.n	8007c46 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c44:	e071      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c54:	e069      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c64:	e061      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007c70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c74:	e059      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c84:	e051      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d002      	beq.n	8007c96 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c94:	e049      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007ca0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ca4:	e041      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8007cb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cb4:	e039      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007cc4:	e031      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007cd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007cd4:	e029      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d002      	beq.n	8007ce6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007ce0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ce4:	e021      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d002      	beq.n	8007cf6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007cf0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007cf4:	e019      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007d00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007d04:	e011      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007d10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007d14:	e009      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f003 0308 	and.w	r3, r3, #8
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007d20:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007d24:	e001      	b.n	8007d2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	371c      	adds	r7, #28
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd90      	pop	{r4, r7, pc}
 8007d32:	bf00      	nop
 8007d34:	20000008 	.word	0x20000008
 8007d38:	10624dd3 	.word	0x10624dd3
 8007d3c:	fdffe008 	.word	0xfdffe008

08007d40 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007d40:	b490      	push	{r4, r7}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d48:	4b1e      	ldr	r3, [pc, #120]	; (8007dc4 <SDMMC_GetCmdResp2+0x84>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a1e      	ldr	r2, [pc, #120]	; (8007dc8 <SDMMC_GetCmdResp2+0x88>)
 8007d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d52:	0a5b      	lsrs	r3, r3, #9
 8007d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d58:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007d5c:	4623      	mov	r3, r4
 8007d5e:	1e5c      	subs	r4, r3, #1
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d102      	bne.n	8007d6a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d68:	e026      	b.n	8007db8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d6e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d0f0      	beq.n	8007d5c <SDMMC_GetCmdResp2+0x1c>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1eb      	bne.n	8007d5c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d88:	f003 0304 	and.w	r3, r3, #4
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d004      	beq.n	8007d9a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2204      	movs	r2, #4
 8007d94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d96:	2304      	movs	r3, #4
 8007d98:	e00e      	b.n	8007db8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d004      	beq.n	8007db0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e003      	b.n	8007db8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	22c5      	movs	r2, #197	; 0xc5
 8007db4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bc90      	pop	{r4, r7}
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	20000008 	.word	0x20000008
 8007dc8:	10624dd3 	.word	0x10624dd3

08007dcc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007dcc:	b490      	push	{r4, r7}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007dd4:	4b18      	ldr	r3, [pc, #96]	; (8007e38 <SDMMC_GetCmdResp3+0x6c>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a18      	ldr	r2, [pc, #96]	; (8007e3c <SDMMC_GetCmdResp3+0x70>)
 8007dda:	fba2 2303 	umull	r2, r3, r2, r3
 8007dde:	0a5b      	lsrs	r3, r3, #9
 8007de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007de4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007de8:	4623      	mov	r3, r4
 8007dea:	1e5c      	subs	r4, r3, #1
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d102      	bne.n	8007df6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007df0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007df4:	e01b      	b.n	8007e2e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dfa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d0f0      	beq.n	8007de8 <SDMMC_GetCmdResp3+0x1c>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1eb      	bne.n	8007de8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e14:	f003 0304 	and.w	r3, r3, #4
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d004      	beq.n	8007e26 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2204      	movs	r2, #4
 8007e20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e22:	2304      	movs	r3, #4
 8007e24:	e003      	b.n	8007e2e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	22c5      	movs	r2, #197	; 0xc5
 8007e2a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bc90      	pop	{r4, r7}
 8007e36:	4770      	bx	lr
 8007e38:	20000008 	.word	0x20000008
 8007e3c:	10624dd3 	.word	0x10624dd3

08007e40 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007e40:	b590      	push	{r4, r7, lr}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e4e:	4b34      	ldr	r3, [pc, #208]	; (8007f20 <SDMMC_GetCmdResp6+0xe0>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a34      	ldr	r2, [pc, #208]	; (8007f24 <SDMMC_GetCmdResp6+0xe4>)
 8007e54:	fba2 2303 	umull	r2, r3, r2, r3
 8007e58:	0a5b      	lsrs	r3, r3, #9
 8007e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e5e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007e62:	4623      	mov	r3, r4
 8007e64:	1e5c      	subs	r4, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d102      	bne.n	8007e70 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e6e:	e052      	b.n	8007f16 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e74:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d0f0      	beq.n	8007e62 <SDMMC_GetCmdResp6+0x22>
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1eb      	bne.n	8007e62 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e8e:	f003 0304 	and.w	r3, r3, #4
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d004      	beq.n	8007ea0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2204      	movs	r2, #4
 8007e9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e9c:	2304      	movs	r3, #4
 8007e9e:	e03a      	b.n	8007f16 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d004      	beq.n	8007eb6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e02f      	b.n	8007f16 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f7ff fbf0 	bl	800769c <SDIO_GetCommandResponse>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	7afb      	ldrb	r3, [r7, #11]
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d001      	beq.n	8007eca <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e025      	b.n	8007f16 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	22c5      	movs	r2, #197	; 0xc5
 8007ece:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f7ff fbef 	bl	80076b6 <SDIO_GetResponse>
 8007ed8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d106      	bne.n	8007ef2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	0c1b      	lsrs	r3, r3, #16
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	e011      	b.n	8007f16 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d002      	beq.n	8007f02 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f00:	e009      	b.n	8007f16 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f10:	e001      	b.n	8007f16 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007f12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd90      	pop	{r4, r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	20000008 	.word	0x20000008
 8007f24:	10624dd3 	.word	0x10624dd3

08007f28 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007f28:	b490      	push	{r4, r7}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f30:	4b21      	ldr	r3, [pc, #132]	; (8007fb8 <SDMMC_GetCmdResp7+0x90>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a21      	ldr	r2, [pc, #132]	; (8007fbc <SDMMC_GetCmdResp7+0x94>)
 8007f36:	fba2 2303 	umull	r2, r3, r2, r3
 8007f3a:	0a5b      	lsrs	r3, r3, #9
 8007f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f40:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007f44:	4623      	mov	r3, r4
 8007f46:	1e5c      	subs	r4, r3, #1
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d102      	bne.n	8007f52 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f50:	e02c      	b.n	8007fac <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f56:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d0f0      	beq.n	8007f44 <SDMMC_GetCmdResp7+0x1c>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1eb      	bne.n	8007f44 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f70:	f003 0304 	and.w	r3, r3, #4
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d004      	beq.n	8007f82 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2204      	movs	r2, #4
 8007f7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f7e:	2304      	movs	r3, #4
 8007f80:	e014      	b.n	8007fac <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d004      	beq.n	8007f98 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f94:	2301      	movs	r3, #1
 8007f96:	e009      	b.n	8007fac <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d002      	beq.n	8007faa <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2240      	movs	r2, #64	; 0x40
 8007fa8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007faa:	2300      	movs	r3, #0
  
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bc90      	pop	{r4, r7}
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	20000008 	.word	0x20000008
 8007fbc:	10624dd3 	.word	0x10624dd3

08007fc0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007fc4:	4904      	ldr	r1, [pc, #16]	; (8007fd8 <MX_FATFS_Init+0x18>)
 8007fc6:	4805      	ldr	r0, [pc, #20]	; (8007fdc <MX_FATFS_Init+0x1c>)
 8007fc8:	f003 f8c4 	bl	800b154 <FATFS_LinkDriver>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	461a      	mov	r2, r3
 8007fd0:	4b03      	ldr	r3, [pc, #12]	; (8007fe0 <MX_FATFS_Init+0x20>)
 8007fd2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007fd4:	bf00      	nop
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	2000a908 	.word	0x2000a908
 8007fdc:	0800c14c 	.word	0x0800c14c
 8007fe0:	2000a904 	.word	0x2000a904

08007fe4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007fe8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007ffe:	f000 f86b 	bl	80080d8 <BSP_SD_IsDetected>
 8008002:	4603      	mov	r3, r0
 8008004:	2b01      	cmp	r3, #1
 8008006:	d001      	beq.n	800800c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e005      	b.n	8008018 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <BSP_SD_Init+0x2c>)
 800800e:	f7fd fdeb 	bl	8005be8 <HAL_SD_Init>
 8008012:	4603      	mov	r3, r0
 8008014:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8008016:	79fb      	ldrb	r3, [r7, #7]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	2000771c 	.word	0x2000771c

08008024 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b088      	sub	sp, #32
 8008028:	af02      	add	r7, sp, #8
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	68f9      	ldr	r1, [r7, #12]
 8008040:	4806      	ldr	r0, [pc, #24]	; (800805c <BSP_SD_ReadBlocks+0x38>)
 8008042:	f7fd fe61 	bl	8005d08 <HAL_SD_ReadBlocks>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8008050:	7dfb      	ldrb	r3, [r7, #23]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3718      	adds	r7, #24
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	2000771c 	.word	0x2000771c

08008060 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b088      	sub	sp, #32
 8008064:	af02      	add	r7, sp, #8
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	68f9      	ldr	r1, [r7, #12]
 800807c:	4806      	ldr	r0, [pc, #24]	; (8008098 <BSP_SD_WriteBlocks+0x38>)
 800807e:	f7fe f83b 	bl	80060f8 <HAL_SD_WriteBlocks>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800808c:	7dfb      	ldrb	r3, [r7, #23]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3718      	adds	r7, #24
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	2000771c 	.word	0x2000771c

0800809c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80080a0:	4805      	ldr	r0, [pc, #20]	; (80080b8 <BSP_SD_GetCardState+0x1c>)
 80080a2:	f7fe fb99 	bl	80067d8 <HAL_SD_GetCardState>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	bf14      	ite	ne
 80080ac:	2301      	movne	r3, #1
 80080ae:	2300      	moveq	r3, #0
 80080b0:	b2db      	uxtb	r3, r3
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	2000771c 	.word	0x2000771c

080080bc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80080c4:	6879      	ldr	r1, [r7, #4]
 80080c6:	4803      	ldr	r0, [pc, #12]	; (80080d4 <BSP_SD_GetCardInfo+0x18>)
 80080c8:	f7fe fb5a 	bl	8006780 <HAL_SD_GetCardInfo>
}
 80080cc:	bf00      	nop
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	2000771c 	.word	0x2000771c

080080d8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80080de:	2301      	movs	r3, #1
 80080e0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80080e2:	f000 f80b 	bl	80080fc <BSP_PlatformIsDetected>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d101      	bne.n	80080f0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80080ec:	2300      	movs	r3, #0
 80080ee:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80080f0:	79fb      	ldrb	r3, [r7, #7]
 80080f2:	b2db      	uxtb	r3, r3
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008102:	2301      	movs	r3, #1
 8008104:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008106:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800810a:	4806      	ldr	r0, [pc, #24]	; (8008124 <BSP_PlatformIsDetected+0x28>)
 800810c:	f7fb ffcc 	bl	80040a8 <HAL_GPIO_ReadPin>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8008116:	2300      	movs	r3, #0
 8008118:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800811a:	79fb      	ldrb	r3, [r7, #7]
}  
 800811c:	4618      	mov	r0, r3
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	40021400 	.word	0x40021400

08008128 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	4603      	mov	r3, r0
 8008130:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008132:	4b0b      	ldr	r3, [pc, #44]	; (8008160 <SD_CheckStatus+0x38>)
 8008134:	2201      	movs	r2, #1
 8008136:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008138:	f7ff ffb0 	bl	800809c <BSP_SD_GetCardState>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d107      	bne.n	8008152 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008142:	4b07      	ldr	r3, [pc, #28]	; (8008160 <SD_CheckStatus+0x38>)
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	b2db      	uxtb	r3, r3
 8008148:	f023 0301 	bic.w	r3, r3, #1
 800814c:	b2da      	uxtb	r2, r3
 800814e:	4b04      	ldr	r3, [pc, #16]	; (8008160 <SD_CheckStatus+0x38>)
 8008150:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008152:	4b03      	ldr	r3, [pc, #12]	; (8008160 <SD_CheckStatus+0x38>)
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	b2db      	uxtb	r3, r3
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	20000011 	.word	0x20000011

08008164 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	4603      	mov	r3, r0
 800816c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800816e:	4b0b      	ldr	r3, [pc, #44]	; (800819c <SD_initialize+0x38>)
 8008170:	2201      	movs	r2, #1
 8008172:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008174:	f7ff ff3e 	bl	8007ff4 <BSP_SD_Init>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d107      	bne.n	800818e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800817e:	79fb      	ldrb	r3, [r7, #7]
 8008180:	4618      	mov	r0, r3
 8008182:	f7ff ffd1 	bl	8008128 <SD_CheckStatus>
 8008186:	4603      	mov	r3, r0
 8008188:	461a      	mov	r2, r3
 800818a:	4b04      	ldr	r3, [pc, #16]	; (800819c <SD_initialize+0x38>)
 800818c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800818e:	4b03      	ldr	r3, [pc, #12]	; (800819c <SD_initialize+0x38>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	b2db      	uxtb	r3, r3
}
 8008194:	4618      	mov	r0, r3
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	20000011 	.word	0x20000011

080081a0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	4603      	mov	r3, r0
 80081a8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80081aa:	79fb      	ldrb	r3, [r7, #7]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7ff ffbb 	bl	8008128 <SD_CheckStatus>
 80081b2:	4603      	mov	r3, r0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60b9      	str	r1, [r7, #8]
 80081c4:	607a      	str	r2, [r7, #4]
 80081c6:	603b      	str	r3, [r7, #0]
 80081c8:	4603      	mov	r3, r0
 80081ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80081d0:	f04f 33ff 	mov.w	r3, #4294967295
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	6879      	ldr	r1, [r7, #4]
 80081d8:	68b8      	ldr	r0, [r7, #8]
 80081da:	f7ff ff23 	bl	8008024 <BSP_SD_ReadBlocks>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d107      	bne.n	80081f4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80081e4:	bf00      	nop
 80081e6:	f7ff ff59 	bl	800809c <BSP_SD_GetCardState>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1fa      	bne.n	80081e6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80081f0:	2300      	movs	r3, #0
 80081f2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80081f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b086      	sub	sp, #24
 8008202:	af00      	add	r7, sp, #0
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	603b      	str	r3, [r7, #0]
 800820a:	4603      	mov	r3, r0
 800820c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8008212:	f04f 33ff 	mov.w	r3, #4294967295
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	6879      	ldr	r1, [r7, #4]
 800821a:	68b8      	ldr	r0, [r7, #8]
 800821c:	f7ff ff20 	bl	8008060 <BSP_SD_WriteBlocks>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d107      	bne.n	8008236 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8008226:	bf00      	nop
 8008228:	f7ff ff38 	bl	800809c <BSP_SD_GetCardState>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1fa      	bne.n	8008228 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008236:	7dfb      	ldrb	r3, [r7, #23]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b08c      	sub	sp, #48	; 0x30
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	603a      	str	r2, [r7, #0]
 800824a:	71fb      	strb	r3, [r7, #7]
 800824c:	460b      	mov	r3, r1
 800824e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008256:	4b25      	ldr	r3, [pc, #148]	; (80082ec <SD_ioctl+0xac>)
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	b2db      	uxtb	r3, r3
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <SD_ioctl+0x28>
 8008264:	2303      	movs	r3, #3
 8008266:	e03c      	b.n	80082e2 <SD_ioctl+0xa2>

  switch (cmd)
 8008268:	79bb      	ldrb	r3, [r7, #6]
 800826a:	2b03      	cmp	r3, #3
 800826c:	d834      	bhi.n	80082d8 <SD_ioctl+0x98>
 800826e:	a201      	add	r2, pc, #4	; (adr r2, 8008274 <SD_ioctl+0x34>)
 8008270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008274:	08008285 	.word	0x08008285
 8008278:	0800828d 	.word	0x0800828d
 800827c:	080082a5 	.word	0x080082a5
 8008280:	080082bf 	.word	0x080082bf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800828a:	e028      	b.n	80082de <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800828c:	f107 030c 	add.w	r3, r7, #12
 8008290:	4618      	mov	r0, r3
 8008292:	f7ff ff13 	bl	80080bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80082a2:	e01c      	b.n	80082de <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80082a4:	f107 030c 	add.w	r3, r7, #12
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7ff ff07 	bl	80080bc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80082ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80082bc:	e00f      	b.n	80082de <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80082be:	f107 030c 	add.w	r3, r7, #12
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff fefa 	bl	80080bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	0a5a      	lsrs	r2, r3, #9
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80082d0:	2300      	movs	r3, #0
 80082d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80082d6:	e002      	b.n	80082de <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80082d8:	2304      	movs	r3, #4
 80082da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80082de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3730      	adds	r7, #48	; 0x30
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	20000011 	.word	0x20000011

080082f0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	6039      	str	r1, [r7, #0]
 80082fa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80082fc:	88fb      	ldrh	r3, [r7, #6]
 80082fe:	2b7f      	cmp	r3, #127	; 0x7f
 8008300:	d802      	bhi.n	8008308 <ff_convert+0x18>
		c = chr;
 8008302:	88fb      	ldrh	r3, [r7, #6]
 8008304:	81fb      	strh	r3, [r7, #14]
 8008306:	e025      	b.n	8008354 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00b      	beq.n	8008326 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800830e:	88fb      	ldrh	r3, [r7, #6]
 8008310:	2bff      	cmp	r3, #255	; 0xff
 8008312:	d805      	bhi.n	8008320 <ff_convert+0x30>
 8008314:	88fb      	ldrh	r3, [r7, #6]
 8008316:	3b80      	subs	r3, #128	; 0x80
 8008318:	4a12      	ldr	r2, [pc, #72]	; (8008364 <ff_convert+0x74>)
 800831a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800831e:	e000      	b.n	8008322 <ff_convert+0x32>
 8008320:	2300      	movs	r3, #0
 8008322:	81fb      	strh	r3, [r7, #14]
 8008324:	e016      	b.n	8008354 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008326:	2300      	movs	r3, #0
 8008328:	81fb      	strh	r3, [r7, #14]
 800832a:	e009      	b.n	8008340 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800832c:	89fb      	ldrh	r3, [r7, #14]
 800832e:	4a0d      	ldr	r2, [pc, #52]	; (8008364 <ff_convert+0x74>)
 8008330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008334:	88fa      	ldrh	r2, [r7, #6]
 8008336:	429a      	cmp	r2, r3
 8008338:	d006      	beq.n	8008348 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800833a:	89fb      	ldrh	r3, [r7, #14]
 800833c:	3301      	adds	r3, #1
 800833e:	81fb      	strh	r3, [r7, #14]
 8008340:	89fb      	ldrh	r3, [r7, #14]
 8008342:	2b7f      	cmp	r3, #127	; 0x7f
 8008344:	d9f2      	bls.n	800832c <ff_convert+0x3c>
 8008346:	e000      	b.n	800834a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008348:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800834a:	89fb      	ldrh	r3, [r7, #14]
 800834c:	3380      	adds	r3, #128	; 0x80
 800834e:	b29b      	uxth	r3, r3
 8008350:	b2db      	uxtb	r3, r3
 8008352:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008354:	89fb      	ldrh	r3, [r7, #14]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	0800c160 	.word	0x0800c160

08008368 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
 800836e:	4603      	mov	r3, r0
 8008370:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008372:	88fb      	ldrh	r3, [r7, #6]
 8008374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008378:	d201      	bcs.n	800837e <ff_wtoupper+0x16>
 800837a:	4b3e      	ldr	r3, [pc, #248]	; (8008474 <ff_wtoupper+0x10c>)
 800837c:	e000      	b.n	8008380 <ff_wtoupper+0x18>
 800837e:	4b3e      	ldr	r3, [pc, #248]	; (8008478 <ff_wtoupper+0x110>)
 8008380:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	1c9a      	adds	r2, r3, #2
 8008386:	617a      	str	r2, [r7, #20]
 8008388:	881b      	ldrh	r3, [r3, #0]
 800838a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800838c:	8a7b      	ldrh	r3, [r7, #18]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d068      	beq.n	8008464 <ff_wtoupper+0xfc>
 8008392:	88fa      	ldrh	r2, [r7, #6]
 8008394:	8a7b      	ldrh	r3, [r7, #18]
 8008396:	429a      	cmp	r2, r3
 8008398:	d364      	bcc.n	8008464 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	1c9a      	adds	r2, r3, #2
 800839e:	617a      	str	r2, [r7, #20]
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	823b      	strh	r3, [r7, #16]
 80083a4:	8a3b      	ldrh	r3, [r7, #16]
 80083a6:	0a1b      	lsrs	r3, r3, #8
 80083a8:	81fb      	strh	r3, [r7, #14]
 80083aa:	8a3b      	ldrh	r3, [r7, #16]
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80083b0:	88fa      	ldrh	r2, [r7, #6]
 80083b2:	8a79      	ldrh	r1, [r7, #18]
 80083b4:	8a3b      	ldrh	r3, [r7, #16]
 80083b6:	440b      	add	r3, r1
 80083b8:	429a      	cmp	r2, r3
 80083ba:	da49      	bge.n	8008450 <ff_wtoupper+0xe8>
			switch (cmd) {
 80083bc:	89fb      	ldrh	r3, [r7, #14]
 80083be:	2b08      	cmp	r3, #8
 80083c0:	d84f      	bhi.n	8008462 <ff_wtoupper+0xfa>
 80083c2:	a201      	add	r2, pc, #4	; (adr r2, 80083c8 <ff_wtoupper+0x60>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	080083ed 	.word	0x080083ed
 80083cc:	080083ff 	.word	0x080083ff
 80083d0:	08008415 	.word	0x08008415
 80083d4:	0800841d 	.word	0x0800841d
 80083d8:	08008425 	.word	0x08008425
 80083dc:	0800842d 	.word	0x0800842d
 80083e0:	08008435 	.word	0x08008435
 80083e4:	0800843d 	.word	0x0800843d
 80083e8:	08008445 	.word	0x08008445
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80083ec:	88fa      	ldrh	r2, [r7, #6]
 80083ee:	8a7b      	ldrh	r3, [r7, #18]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	4413      	add	r3, r2
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	80fb      	strh	r3, [r7, #6]
 80083fc:	e027      	b.n	800844e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80083fe:	88fa      	ldrh	r2, [r7, #6]
 8008400:	8a7b      	ldrh	r3, [r7, #18]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	b29b      	uxth	r3, r3
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	b29b      	uxth	r3, r3
 800840c:	88fa      	ldrh	r2, [r7, #6]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	80fb      	strh	r3, [r7, #6]
 8008412:	e01c      	b.n	800844e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008414:	88fb      	ldrh	r3, [r7, #6]
 8008416:	3b10      	subs	r3, #16
 8008418:	80fb      	strh	r3, [r7, #6]
 800841a:	e018      	b.n	800844e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800841c:	88fb      	ldrh	r3, [r7, #6]
 800841e:	3b20      	subs	r3, #32
 8008420:	80fb      	strh	r3, [r7, #6]
 8008422:	e014      	b.n	800844e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008424:	88fb      	ldrh	r3, [r7, #6]
 8008426:	3b30      	subs	r3, #48	; 0x30
 8008428:	80fb      	strh	r3, [r7, #6]
 800842a:	e010      	b.n	800844e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800842c:	88fb      	ldrh	r3, [r7, #6]
 800842e:	3b1a      	subs	r3, #26
 8008430:	80fb      	strh	r3, [r7, #6]
 8008432:	e00c      	b.n	800844e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008434:	88fb      	ldrh	r3, [r7, #6]
 8008436:	3308      	adds	r3, #8
 8008438:	80fb      	strh	r3, [r7, #6]
 800843a:	e008      	b.n	800844e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800843c:	88fb      	ldrh	r3, [r7, #6]
 800843e:	3b50      	subs	r3, #80	; 0x50
 8008440:	80fb      	strh	r3, [r7, #6]
 8008442:	e004      	b.n	800844e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008444:	88fb      	ldrh	r3, [r7, #6]
 8008446:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800844a:	80fb      	strh	r3, [r7, #6]
 800844c:	bf00      	nop
			}
			break;
 800844e:	e008      	b.n	8008462 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008450:	89fb      	ldrh	r3, [r7, #14]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d195      	bne.n	8008382 <ff_wtoupper+0x1a>
 8008456:	8a3b      	ldrh	r3, [r7, #16]
 8008458:	005b      	lsls	r3, r3, #1
 800845a:	697a      	ldr	r2, [r7, #20]
 800845c:	4413      	add	r3, r2
 800845e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008460:	e78f      	b.n	8008382 <ff_wtoupper+0x1a>
			break;
 8008462:	bf00      	nop
	}

	return chr;
 8008464:	88fb      	ldrh	r3, [r7, #6]
}
 8008466:	4618      	mov	r0, r3
 8008468:	371c      	adds	r7, #28
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	0800c260 	.word	0x0800c260
 8008478:	0800c454 	.word	0x0800c454

0800847c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	4603      	mov	r3, r0
 8008484:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008486:	79fb      	ldrb	r3, [r7, #7]
 8008488:	4a08      	ldr	r2, [pc, #32]	; (80084ac <disk_status+0x30>)
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	79fa      	ldrb	r2, [r7, #7]
 8008494:	4905      	ldr	r1, [pc, #20]	; (80084ac <disk_status+0x30>)
 8008496:	440a      	add	r2, r1
 8008498:	7a12      	ldrb	r2, [r2, #8]
 800849a:	4610      	mov	r0, r2
 800849c:	4798      	blx	r3
 800849e:	4603      	mov	r3, r0
 80084a0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	20000314 	.word	0x20000314

080084b0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	4603      	mov	r3, r0
 80084b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80084be:	79fb      	ldrb	r3, [r7, #7]
 80084c0:	4a0d      	ldr	r2, [pc, #52]	; (80084f8 <disk_initialize+0x48>)
 80084c2:	5cd3      	ldrb	r3, [r2, r3]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d111      	bne.n	80084ec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80084c8:	79fb      	ldrb	r3, [r7, #7]
 80084ca:	4a0b      	ldr	r2, [pc, #44]	; (80084f8 <disk_initialize+0x48>)
 80084cc:	2101      	movs	r1, #1
 80084ce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	4a09      	ldr	r2, [pc, #36]	; (80084f8 <disk_initialize+0x48>)
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	79fa      	ldrb	r2, [r7, #7]
 80084de:	4906      	ldr	r1, [pc, #24]	; (80084f8 <disk_initialize+0x48>)
 80084e0:	440a      	add	r2, r1
 80084e2:	7a12      	ldrb	r2, [r2, #8]
 80084e4:	4610      	mov	r0, r2
 80084e6:	4798      	blx	r3
 80084e8:	4603      	mov	r3, r0
 80084ea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	20000314 	.word	0x20000314

080084fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80084fc:	b590      	push	{r4, r7, lr}
 80084fe:	b087      	sub	sp, #28
 8008500:	af00      	add	r7, sp, #0
 8008502:	60b9      	str	r1, [r7, #8]
 8008504:	607a      	str	r2, [r7, #4]
 8008506:	603b      	str	r3, [r7, #0]
 8008508:	4603      	mov	r3, r0
 800850a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	4a0a      	ldr	r2, [pc, #40]	; (8008538 <disk_read+0x3c>)
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	689c      	ldr	r4, [r3, #8]
 8008518:	7bfb      	ldrb	r3, [r7, #15]
 800851a:	4a07      	ldr	r2, [pc, #28]	; (8008538 <disk_read+0x3c>)
 800851c:	4413      	add	r3, r2
 800851e:	7a18      	ldrb	r0, [r3, #8]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	68b9      	ldr	r1, [r7, #8]
 8008526:	47a0      	blx	r4
 8008528:	4603      	mov	r3, r0
 800852a:	75fb      	strb	r3, [r7, #23]
  return res;
 800852c:	7dfb      	ldrb	r3, [r7, #23]
}
 800852e:	4618      	mov	r0, r3
 8008530:	371c      	adds	r7, #28
 8008532:	46bd      	mov	sp, r7
 8008534:	bd90      	pop	{r4, r7, pc}
 8008536:	bf00      	nop
 8008538:	20000314 	.word	0x20000314

0800853c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800853c:	b590      	push	{r4, r7, lr}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	60b9      	str	r1, [r7, #8]
 8008544:	607a      	str	r2, [r7, #4]
 8008546:	603b      	str	r3, [r7, #0]
 8008548:	4603      	mov	r3, r0
 800854a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	4a0a      	ldr	r2, [pc, #40]	; (8008578 <disk_write+0x3c>)
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	68dc      	ldr	r4, [r3, #12]
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	4a07      	ldr	r2, [pc, #28]	; (8008578 <disk_write+0x3c>)
 800855c:	4413      	add	r3, r2
 800855e:	7a18      	ldrb	r0, [r3, #8]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	68b9      	ldr	r1, [r7, #8]
 8008566:	47a0      	blx	r4
 8008568:	4603      	mov	r3, r0
 800856a:	75fb      	strb	r3, [r7, #23]
  return res;
 800856c:	7dfb      	ldrb	r3, [r7, #23]
}
 800856e:	4618      	mov	r0, r3
 8008570:	371c      	adds	r7, #28
 8008572:	46bd      	mov	sp, r7
 8008574:	bd90      	pop	{r4, r7, pc}
 8008576:	bf00      	nop
 8008578:	20000314 	.word	0x20000314

0800857c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	4603      	mov	r3, r0
 8008584:	603a      	str	r2, [r7, #0]
 8008586:	71fb      	strb	r3, [r7, #7]
 8008588:	460b      	mov	r3, r1
 800858a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	4a09      	ldr	r2, [pc, #36]	; (80085b4 <disk_ioctl+0x38>)
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	79fa      	ldrb	r2, [r7, #7]
 800859a:	4906      	ldr	r1, [pc, #24]	; (80085b4 <disk_ioctl+0x38>)
 800859c:	440a      	add	r2, r1
 800859e:	7a10      	ldrb	r0, [r2, #8]
 80085a0:	79b9      	ldrb	r1, [r7, #6]
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	4798      	blx	r3
 80085a6:	4603      	mov	r3, r0
 80085a8:	73fb      	strb	r3, [r7, #15]
  return res;
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	20000314 	.word	0x20000314

080085b8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	3301      	adds	r3, #1
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80085c8:	89fb      	ldrh	r3, [r7, #14]
 80085ca:	021b      	lsls	r3, r3, #8
 80085cc:	b21a      	sxth	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	b21b      	sxth	r3, r3
 80085d4:	4313      	orrs	r3, r2
 80085d6:	b21b      	sxth	r3, r3
 80085d8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80085da:	89fb      	ldrh	r3, [r7, #14]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3303      	adds	r3, #3
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	021b      	lsls	r3, r3, #8
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	3202      	adds	r2, #2
 8008600:	7812      	ldrb	r2, [r2, #0]
 8008602:	4313      	orrs	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	021b      	lsls	r3, r3, #8
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	3201      	adds	r2, #1
 800860e:	7812      	ldrb	r2, [r2, #0]
 8008610:	4313      	orrs	r3, r2
 8008612:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	021b      	lsls	r3, r3, #8
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	7812      	ldrb	r2, [r2, #0]
 800861c:	4313      	orrs	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]
	return rv;
 8008620:	68fb      	ldr	r3, [r7, #12]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800862e:	b480      	push	{r7}
 8008630:	b083      	sub	sp, #12
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	460b      	mov	r3, r1
 8008638:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	1c5a      	adds	r2, r3, #1
 800863e:	607a      	str	r2, [r7, #4]
 8008640:	887a      	ldrh	r2, [r7, #2]
 8008642:	b2d2      	uxtb	r2, r2
 8008644:	701a      	strb	r2, [r3, #0]
 8008646:	887b      	ldrh	r3, [r7, #2]
 8008648:	0a1b      	lsrs	r3, r3, #8
 800864a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	1c5a      	adds	r2, r3, #1
 8008650:	607a      	str	r2, [r7, #4]
 8008652:	887a      	ldrh	r2, [r7, #2]
 8008654:	b2d2      	uxtb	r2, r2
 8008656:	701a      	strb	r2, [r3, #0]
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	1c5a      	adds	r2, r3, #1
 8008672:	607a      	str	r2, [r7, #4]
 8008674:	683a      	ldr	r2, [r7, #0]
 8008676:	b2d2      	uxtb	r2, r2
 8008678:	701a      	strb	r2, [r3, #0]
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	0a1b      	lsrs	r3, r3, #8
 800867e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	1c5a      	adds	r2, r3, #1
 8008684:	607a      	str	r2, [r7, #4]
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	b2d2      	uxtb	r2, r2
 800868a:	701a      	strb	r2, [r3, #0]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	0a1b      	lsrs	r3, r3, #8
 8008690:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	1c5a      	adds	r2, r3, #1
 8008696:	607a      	str	r2, [r7, #4]
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	b2d2      	uxtb	r2, r2
 800869c:	701a      	strb	r2, [r3, #0]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	0a1b      	lsrs	r3, r3, #8
 80086a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	1c5a      	adds	r2, r3, #1
 80086a8:	607a      	str	r2, [r7, #4]
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	b2d2      	uxtb	r2, r2
 80086ae:	701a      	strb	r2, [r3, #0]
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00d      	beq.n	80086f2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	1c53      	adds	r3, r2, #1
 80086da:	613b      	str	r3, [r7, #16]
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	1c59      	adds	r1, r3, #1
 80086e0:	6179      	str	r1, [r7, #20]
 80086e2:	7812      	ldrb	r2, [r2, #0]
 80086e4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	607b      	str	r3, [r7, #4]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1f1      	bne.n	80086d6 <mem_cpy+0x1a>
	}
}
 80086f2:	bf00      	nop
 80086f4:	371c      	adds	r7, #28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80086fe:	b480      	push	{r7}
 8008700:	b087      	sub	sp, #28
 8008702:	af00      	add	r7, sp, #0
 8008704:	60f8      	str	r0, [r7, #12]
 8008706:	60b9      	str	r1, [r7, #8]
 8008708:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	1c5a      	adds	r2, r3, #1
 8008712:	617a      	str	r2, [r7, #20]
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	b2d2      	uxtb	r2, r2
 8008718:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	3b01      	subs	r3, #1
 800871e:	607b      	str	r3, [r7, #4]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1f3      	bne.n	800870e <mem_set+0x10>
}
 8008726:	bf00      	nop
 8008728:	371c      	adds	r7, #28
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008732:	b480      	push	{r7}
 8008734:	b089      	sub	sp, #36	; 0x24
 8008736:	af00      	add	r7, sp, #0
 8008738:	60f8      	str	r0, [r7, #12]
 800873a:	60b9      	str	r1, [r7, #8]
 800873c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	61fb      	str	r3, [r7, #28]
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008746:	2300      	movs	r3, #0
 8008748:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	1c5a      	adds	r2, r3, #1
 800874e:	61fa      	str	r2, [r7, #28]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	4619      	mov	r1, r3
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	1c5a      	adds	r2, r3, #1
 8008758:	61ba      	str	r2, [r7, #24]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	1acb      	subs	r3, r1, r3
 800875e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	3b01      	subs	r3, #1
 8008764:	607b      	str	r3, [r7, #4]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d002      	beq.n	8008772 <mem_cmp+0x40>
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d0eb      	beq.n	800874a <mem_cmp+0x18>

	return r;
 8008772:	697b      	ldr	r3, [r7, #20]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3724      	adds	r7, #36	; 0x24
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800878a:	e002      	b.n	8008792 <chk_chr+0x12>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3301      	adds	r3, #1
 8008790:	607b      	str	r3, [r7, #4]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d005      	beq.n	80087a6 <chk_chr+0x26>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	461a      	mov	r2, r3
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d1f2      	bne.n	800878c <chk_chr+0xc>
	return *str;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	781b      	ldrb	r3, [r3, #0]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
	...

080087b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80087c2:	2300      	movs	r3, #0
 80087c4:	60bb      	str	r3, [r7, #8]
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	60fb      	str	r3, [r7, #12]
 80087ca:	e029      	b.n	8008820 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80087cc:	4a27      	ldr	r2, [pc, #156]	; (800886c <chk_lock+0xb4>)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	011b      	lsls	r3, r3, #4
 80087d2:	4413      	add	r3, r2
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d01d      	beq.n	8008816 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80087da:	4a24      	ldr	r2, [pc, #144]	; (800886c <chk_lock+0xb4>)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	011b      	lsls	r3, r3, #4
 80087e0:	4413      	add	r3, r2
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d116      	bne.n	800881a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80087ec:	4a1f      	ldr	r2, [pc, #124]	; (800886c <chk_lock+0xb4>)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	4413      	add	r3, r2
 80087f4:	3304      	adds	r3, #4
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d10c      	bne.n	800881a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008800:	4a1a      	ldr	r2, [pc, #104]	; (800886c <chk_lock+0xb4>)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	011b      	lsls	r3, r3, #4
 8008806:	4413      	add	r3, r2
 8008808:	3308      	adds	r3, #8
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008810:	429a      	cmp	r2, r3
 8008812:	d102      	bne.n	800881a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008814:	e007      	b.n	8008826 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008816:	2301      	movs	r3, #1
 8008818:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3301      	adds	r3, #1
 800881e:	60fb      	str	r3, [r7, #12]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d9d2      	bls.n	80087cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2b02      	cmp	r3, #2
 800882a:	d109      	bne.n	8008840 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d102      	bne.n	8008838 <chk_lock+0x80>
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b02      	cmp	r3, #2
 8008836:	d101      	bne.n	800883c <chk_lock+0x84>
 8008838:	2300      	movs	r3, #0
 800883a:	e010      	b.n	800885e <chk_lock+0xa6>
 800883c:	2312      	movs	r3, #18
 800883e:	e00e      	b.n	800885e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d108      	bne.n	8008858 <chk_lock+0xa0>
 8008846:	4a09      	ldr	r2, [pc, #36]	; (800886c <chk_lock+0xb4>)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	011b      	lsls	r3, r3, #4
 800884c:	4413      	add	r3, r2
 800884e:	330c      	adds	r3, #12
 8008850:	881b      	ldrh	r3, [r3, #0]
 8008852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008856:	d101      	bne.n	800885c <chk_lock+0xa4>
 8008858:	2310      	movs	r3, #16
 800885a:	e000      	b.n	800885e <chk_lock+0xa6>
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	200000f4 	.word	0x200000f4

08008870 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008876:	2300      	movs	r3, #0
 8008878:	607b      	str	r3, [r7, #4]
 800887a:	e002      	b.n	8008882 <enq_lock+0x12>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3301      	adds	r3, #1
 8008880:	607b      	str	r3, [r7, #4]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d806      	bhi.n	8008896 <enq_lock+0x26>
 8008888:	4a09      	ldr	r2, [pc, #36]	; (80088b0 <enq_lock+0x40>)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	011b      	lsls	r3, r3, #4
 800888e:	4413      	add	r3, r2
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1f2      	bne.n	800887c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2b02      	cmp	r3, #2
 800889a:	bf14      	ite	ne
 800889c:	2301      	movne	r3, #1
 800889e:	2300      	moveq	r3, #0
 80088a0:	b2db      	uxtb	r3, r3
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	200000f4 	.word	0x200000f4

080088b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80088be:	2300      	movs	r3, #0
 80088c0:	60fb      	str	r3, [r7, #12]
 80088c2:	e01f      	b.n	8008904 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80088c4:	4a41      	ldr	r2, [pc, #260]	; (80089cc <inc_lock+0x118>)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	011b      	lsls	r3, r3, #4
 80088ca:	4413      	add	r3, r2
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d113      	bne.n	80088fe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80088d6:	4a3d      	ldr	r2, [pc, #244]	; (80089cc <inc_lock+0x118>)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	011b      	lsls	r3, r3, #4
 80088dc:	4413      	add	r3, r2
 80088de:	3304      	adds	r3, #4
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d109      	bne.n	80088fe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80088ea:	4a38      	ldr	r2, [pc, #224]	; (80089cc <inc_lock+0x118>)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	011b      	lsls	r3, r3, #4
 80088f0:	4413      	add	r3, r2
 80088f2:	3308      	adds	r3, #8
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d006      	beq.n	800890c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3301      	adds	r3, #1
 8008902:	60fb      	str	r3, [r7, #12]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d9dc      	bls.n	80088c4 <inc_lock+0x10>
 800890a:	e000      	b.n	800890e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800890c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2b02      	cmp	r3, #2
 8008912:	d132      	bne.n	800897a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008914:	2300      	movs	r3, #0
 8008916:	60fb      	str	r3, [r7, #12]
 8008918:	e002      	b.n	8008920 <inc_lock+0x6c>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3301      	adds	r3, #1
 800891e:	60fb      	str	r3, [r7, #12]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d806      	bhi.n	8008934 <inc_lock+0x80>
 8008926:	4a29      	ldr	r2, [pc, #164]	; (80089cc <inc_lock+0x118>)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	011b      	lsls	r3, r3, #4
 800892c:	4413      	add	r3, r2
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1f2      	bne.n	800891a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2b02      	cmp	r3, #2
 8008938:	d101      	bne.n	800893e <inc_lock+0x8a>
 800893a:	2300      	movs	r3, #0
 800893c:	e040      	b.n	80089c0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	4922      	ldr	r1, [pc, #136]	; (80089cc <inc_lock+0x118>)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	011b      	lsls	r3, r3, #4
 8008948:	440b      	add	r3, r1
 800894a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	689a      	ldr	r2, [r3, #8]
 8008950:	491e      	ldr	r1, [pc, #120]	; (80089cc <inc_lock+0x118>)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	011b      	lsls	r3, r3, #4
 8008956:	440b      	add	r3, r1
 8008958:	3304      	adds	r3, #4
 800895a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	695a      	ldr	r2, [r3, #20]
 8008960:	491a      	ldr	r1, [pc, #104]	; (80089cc <inc_lock+0x118>)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	011b      	lsls	r3, r3, #4
 8008966:	440b      	add	r3, r1
 8008968:	3308      	adds	r3, #8
 800896a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800896c:	4a17      	ldr	r2, [pc, #92]	; (80089cc <inc_lock+0x118>)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	011b      	lsls	r3, r3, #4
 8008972:	4413      	add	r3, r2
 8008974:	330c      	adds	r3, #12
 8008976:	2200      	movs	r2, #0
 8008978:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d009      	beq.n	8008994 <inc_lock+0xe0>
 8008980:	4a12      	ldr	r2, [pc, #72]	; (80089cc <inc_lock+0x118>)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	011b      	lsls	r3, r3, #4
 8008986:	4413      	add	r3, r2
 8008988:	330c      	adds	r3, #12
 800898a:	881b      	ldrh	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <inc_lock+0xe0>
 8008990:	2300      	movs	r3, #0
 8008992:	e015      	b.n	80089c0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d108      	bne.n	80089ac <inc_lock+0xf8>
 800899a:	4a0c      	ldr	r2, [pc, #48]	; (80089cc <inc_lock+0x118>)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	011b      	lsls	r3, r3, #4
 80089a0:	4413      	add	r3, r2
 80089a2:	330c      	adds	r3, #12
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	3301      	adds	r3, #1
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	e001      	b.n	80089b0 <inc_lock+0xfc>
 80089ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089b0:	4906      	ldr	r1, [pc, #24]	; (80089cc <inc_lock+0x118>)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	011b      	lsls	r3, r3, #4
 80089b6:	440b      	add	r3, r1
 80089b8:	330c      	adds	r3, #12
 80089ba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	3301      	adds	r3, #1
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	200000f4 	.word	0x200000f4

080089d0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	3b01      	subs	r3, #1
 80089dc:	607b      	str	r3, [r7, #4]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d825      	bhi.n	8008a30 <dec_lock+0x60>
		n = Files[i].ctr;
 80089e4:	4a17      	ldr	r2, [pc, #92]	; (8008a44 <dec_lock+0x74>)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	011b      	lsls	r3, r3, #4
 80089ea:	4413      	add	r3, r2
 80089ec:	330c      	adds	r3, #12
 80089ee:	881b      	ldrh	r3, [r3, #0]
 80089f0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80089f2:	89fb      	ldrh	r3, [r7, #14]
 80089f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089f8:	d101      	bne.n	80089fe <dec_lock+0x2e>
 80089fa:	2300      	movs	r3, #0
 80089fc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80089fe:	89fb      	ldrh	r3, [r7, #14]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <dec_lock+0x3a>
 8008a04:	89fb      	ldrh	r3, [r7, #14]
 8008a06:	3b01      	subs	r3, #1
 8008a08:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008a0a:	4a0e      	ldr	r2, [pc, #56]	; (8008a44 <dec_lock+0x74>)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	011b      	lsls	r3, r3, #4
 8008a10:	4413      	add	r3, r2
 8008a12:	330c      	adds	r3, #12
 8008a14:	89fa      	ldrh	r2, [r7, #14]
 8008a16:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008a18:	89fb      	ldrh	r3, [r7, #14]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d105      	bne.n	8008a2a <dec_lock+0x5a>
 8008a1e:	4a09      	ldr	r2, [pc, #36]	; (8008a44 <dec_lock+0x74>)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	011b      	lsls	r3, r3, #4
 8008a24:	4413      	add	r3, r2
 8008a26:	2200      	movs	r2, #0
 8008a28:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	737b      	strb	r3, [r7, #13]
 8008a2e:	e001      	b.n	8008a34 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008a30:	2302      	movs	r3, #2
 8008a32:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008a34:	7b7b      	ldrb	r3, [r7, #13]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	200000f4 	.word	0x200000f4

08008a48 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008a50:	2300      	movs	r3, #0
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	e010      	b.n	8008a78 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008a56:	4a0d      	ldr	r2, [pc, #52]	; (8008a8c <clear_lock+0x44>)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	011b      	lsls	r3, r3, #4
 8008a5c:	4413      	add	r3, r2
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d105      	bne.n	8008a72 <clear_lock+0x2a>
 8008a66:	4a09      	ldr	r2, [pc, #36]	; (8008a8c <clear_lock+0x44>)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	011b      	lsls	r3, r3, #4
 8008a6c:	4413      	add	r3, r2
 8008a6e:	2200      	movs	r2, #0
 8008a70:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	3301      	adds	r3, #1
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d9eb      	bls.n	8008a56 <clear_lock+0xe>
	}
}
 8008a7e:	bf00      	nop
 8008a80:	3714      	adds	r7, #20
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	200000f4 	.word	0x200000f4

08008a90 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	78db      	ldrb	r3, [r3, #3]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d034      	beq.n	8008b0e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	7858      	ldrb	r0, [r3, #1]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	f7ff fd40 	bl	800853c <disk_write>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d002      	beq.n	8008ac8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	73fb      	strb	r3, [r7, #15]
 8008ac6:	e022      	b.n	8008b0e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	1ad2      	subs	r2, r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d217      	bcs.n	8008b0e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	789b      	ldrb	r3, [r3, #2]
 8008ae2:	613b      	str	r3, [r7, #16]
 8008ae4:	e010      	b.n	8008b08 <sync_window+0x78>
					wsect += fs->fsize;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a1b      	ldr	r3, [r3, #32]
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	4413      	add	r3, r2
 8008aee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	7858      	ldrb	r0, [r3, #1]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008afa:	2301      	movs	r3, #1
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	f7ff fd1d 	bl	800853c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	3b01      	subs	r3, #1
 8008b06:	613b      	str	r3, [r7, #16]
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d8eb      	bhi.n	8008ae6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3718      	adds	r7, #24
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d01b      	beq.n	8008b68 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7ff ffad 	bl	8008a90 <sync_window>
 8008b36:	4603      	mov	r3, r0
 8008b38:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d113      	bne.n	8008b68 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	7858      	ldrb	r0, [r3, #1]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	f7ff fcd5 	bl	80084fc <disk_read>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d004      	beq.n	8008b62 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008b58:	f04f 33ff 	mov.w	r3, #4294967295
 8008b5c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	683a      	ldr	r2, [r7, #0]
 8008b66:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
	...

08008b74 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7ff ff87 	bl	8008a90 <sync_window>
 8008b82:	4603      	mov	r3, r0
 8008b84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d159      	bne.n	8008c40 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	2b03      	cmp	r3, #3
 8008b92:	d149      	bne.n	8008c28 <sync_fs+0xb4>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	791b      	ldrb	r3, [r3, #4]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d145      	bne.n	8008c28 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	899b      	ldrh	r3, [r3, #12]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	2100      	movs	r1, #0
 8008baa:	f7ff fda8 	bl	80086fe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	3338      	adds	r3, #56	; 0x38
 8008bb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008bb6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7ff fd37 	bl	800862e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	3338      	adds	r3, #56	; 0x38
 8008bc4:	4921      	ldr	r1, [pc, #132]	; (8008c4c <sync_fs+0xd8>)
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7ff fd4c 	bl	8008664 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	3338      	adds	r3, #56	; 0x38
 8008bd0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008bd4:	491e      	ldr	r1, [pc, #120]	; (8008c50 <sync_fs+0xdc>)
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7ff fd44 	bl	8008664 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	3338      	adds	r3, #56	; 0x38
 8008be0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	4619      	mov	r1, r3
 8008bea:	4610      	mov	r0, r2
 8008bec:	f7ff fd3a 	bl	8008664 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3338      	adds	r3, #56	; 0x38
 8008bf4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	695b      	ldr	r3, [r3, #20]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4610      	mov	r0, r2
 8008c00:	f7ff fd30 	bl	8008664 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c08:	1c5a      	adds	r2, r3, #1
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	7858      	ldrb	r0, [r3, #1]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	f7ff fc8d 	bl	800853c <disk_write>
			fs->fsi_flag = 0;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	785b      	ldrb	r3, [r3, #1]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	2100      	movs	r1, #0
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7ff fca3 	bl	800857c <disk_ioctl>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <sync_fs+0xcc>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	41615252 	.word	0x41615252
 8008c50:	61417272 	.word	0x61417272

08008c54 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	3b02      	subs	r3, #2
 8008c62:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	69db      	ldr	r3, [r3, #28]
 8008c68:	3b02      	subs	r3, #2
 8008c6a:	683a      	ldr	r2, [r7, #0]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d301      	bcc.n	8008c74 <clust2sect+0x20>
 8008c70:	2300      	movs	r3, #0
 8008c72:	e008      	b.n	8008c86 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	895b      	ldrh	r3, [r3, #10]
 8008c78:	461a      	mov	r2, r3
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	fb03 f202 	mul.w	r2, r3, r2
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c84:	4413      	add	r3, r2
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b086      	sub	sp, #24
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d904      	bls.n	8008cb2 <get_fat+0x20>
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	69db      	ldr	r3, [r3, #28]
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d302      	bcc.n	8008cb8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	617b      	str	r3, [r7, #20]
 8008cb6:	e0b7      	b.n	8008e28 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8008cbc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d05a      	beq.n	8008d7c <get_fat+0xea>
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d07d      	beq.n	8008dc6 <get_fat+0x134>
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	f040 80a2 	bne.w	8008e14 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	60fb      	str	r3, [r7, #12]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	085b      	lsrs	r3, r3, #1
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	4413      	add	r3, r2
 8008cdc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	899b      	ldrh	r3, [r3, #12]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8008cee:	4413      	add	r3, r2
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6938      	ldr	r0, [r7, #16]
 8008cf4:	f7ff ff10 	bl	8008b18 <move_window>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f040 808d 	bne.w	8008e1a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	1c5a      	adds	r2, r3, #1
 8008d04:	60fa      	str	r2, [r7, #12]
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	8992      	ldrh	r2, [r2, #12]
 8008d0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d0e:	fb02 f201 	mul.w	r2, r2, r1
 8008d12:	1a9b      	subs	r3, r3, r2
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	4413      	add	r3, r2
 8008d18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008d1c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	899b      	ldrh	r3, [r3, #12]
 8008d26:	4619      	mov	r1, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d2e:	4413      	add	r3, r2
 8008d30:	4619      	mov	r1, r3
 8008d32:	6938      	ldr	r0, [r7, #16]
 8008d34:	f7ff fef0 	bl	8008b18 <move_window>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d16f      	bne.n	8008e1e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	899b      	ldrh	r3, [r3, #12]
 8008d42:	461a      	mov	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d4a:	fb02 f201 	mul.w	r2, r2, r1
 8008d4e:	1a9b      	subs	r3, r3, r2
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	4413      	add	r3, r2
 8008d54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008d58:	021b      	lsls	r3, r3, #8
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	f003 0301 	and.w	r3, r3, #1
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d002      	beq.n	8008d72 <get_fat+0xe0>
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	091b      	lsrs	r3, r3, #4
 8008d70:	e002      	b.n	8008d78 <get_fat+0xe6>
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d78:	617b      	str	r3, [r7, #20]
			break;
 8008d7a:	e055      	b.n	8008e28 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	899b      	ldrh	r3, [r3, #12]
 8008d84:	085b      	lsrs	r3, r3, #1
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	4619      	mov	r1, r3
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d90:	4413      	add	r3, r2
 8008d92:	4619      	mov	r1, r3
 8008d94:	6938      	ldr	r0, [r7, #16]
 8008d96:	f7ff febf 	bl	8008b18 <move_window>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d140      	bne.n	8008e22 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	8992      	ldrh	r2, [r2, #12]
 8008dae:	fbb3 f0f2 	udiv	r0, r3, r2
 8008db2:	fb02 f200 	mul.w	r2, r2, r0
 8008db6:	1a9b      	subs	r3, r3, r2
 8008db8:	440b      	add	r3, r1
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7ff fbfc 	bl	80085b8 <ld_word>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	617b      	str	r3, [r7, #20]
			break;
 8008dc4:	e030      	b.n	8008e28 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	899b      	ldrh	r3, [r3, #12]
 8008dce:	089b      	lsrs	r3, r3, #2
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dda:	4413      	add	r3, r2
 8008ddc:	4619      	mov	r1, r3
 8008dde:	6938      	ldr	r0, [r7, #16]
 8008de0:	f7ff fe9a 	bl	8008b18 <move_window>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d11d      	bne.n	8008e26 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	8992      	ldrh	r2, [r2, #12]
 8008df8:	fbb3 f0f2 	udiv	r0, r3, r2
 8008dfc:	fb02 f200 	mul.w	r2, r2, r0
 8008e00:	1a9b      	subs	r3, r3, r2
 8008e02:	440b      	add	r3, r1
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7ff fbef 	bl	80085e8 <ld_dword>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008e10:	617b      	str	r3, [r7, #20]
			break;
 8008e12:	e009      	b.n	8008e28 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008e14:	2301      	movs	r3, #1
 8008e16:	617b      	str	r3, [r7, #20]
 8008e18:	e006      	b.n	8008e28 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e1a:	bf00      	nop
 8008e1c:	e004      	b.n	8008e28 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e1e:	bf00      	nop
 8008e20:	e002      	b.n	8008e28 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008e22:	bf00      	nop
 8008e24:	e000      	b.n	8008e28 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008e26:	bf00      	nop
		}
	}

	return val;
 8008e28:	697b      	ldr	r3, [r7, #20]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3718      	adds	r7, #24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008e32:	b590      	push	{r4, r7, lr}
 8008e34:	b089      	sub	sp, #36	; 0x24
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008e3e:	2302      	movs	r3, #2
 8008e40:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	f240 8106 	bls.w	8009056 <put_fat+0x224>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	69db      	ldr	r3, [r3, #28]
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	f080 8100 	bcs.w	8009056 <put_fat+0x224>
		switch (fs->fs_type) {
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	f000 8088 	beq.w	8008f70 <put_fat+0x13e>
 8008e60:	2b03      	cmp	r3, #3
 8008e62:	f000 80b0 	beq.w	8008fc6 <put_fat+0x194>
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	f040 80f5 	bne.w	8009056 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	61bb      	str	r3, [r7, #24]
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	085b      	lsrs	r3, r3, #1
 8008e74:	69ba      	ldr	r2, [r7, #24]
 8008e76:	4413      	add	r3, r2
 8008e78:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	899b      	ldrh	r3, [r3, #12]
 8008e82:	4619      	mov	r1, r3
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e8a:	4413      	add	r3, r2
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f7ff fe42 	bl	8008b18 <move_window>
 8008e94:	4603      	mov	r3, r0
 8008e96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e98:	7ffb      	ldrb	r3, [r7, #31]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f040 80d4 	bne.w	8009048 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	1c5a      	adds	r2, r3, #1
 8008eaa:	61ba      	str	r2, [r7, #24]
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	8992      	ldrh	r2, [r2, #12]
 8008eb0:	fbb3 f0f2 	udiv	r0, r3, r2
 8008eb4:	fb02 f200 	mul.w	r2, r2, r0
 8008eb8:	1a9b      	subs	r3, r3, r2
 8008eba:	440b      	add	r3, r1
 8008ebc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	f003 0301 	and.w	r3, r3, #1
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00d      	beq.n	8008ee4 <put_fat+0xb2>
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	b25b      	sxtb	r3, r3
 8008ece:	f003 030f 	and.w	r3, r3, #15
 8008ed2:	b25a      	sxtb	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	011b      	lsls	r3, r3, #4
 8008eda:	b25b      	sxtb	r3, r3
 8008edc:	4313      	orrs	r3, r2
 8008ede:	b25b      	sxtb	r3, r3
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	e001      	b.n	8008ee8 <put_fat+0xb6>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	697a      	ldr	r2, [r7, #20]
 8008eea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	899b      	ldrh	r3, [r3, #12]
 8008efa:	4619      	mov	r1, r3
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f02:	4413      	add	r3, r2
 8008f04:	4619      	mov	r1, r3
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f7ff fe06 	bl	8008b18 <move_window>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f10:	7ffb      	ldrb	r3, [r7, #31]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f040 809a 	bne.w	800904c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	899b      	ldrh	r3, [r3, #12]
 8008f22:	461a      	mov	r2, r3
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f2a:	fb02 f200 	mul.w	r2, r2, r0
 8008f2e:	1a9b      	subs	r3, r3, r2
 8008f30:	440b      	add	r3, r1
 8008f32:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d003      	beq.n	8008f46 <put_fat+0x114>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	091b      	lsrs	r3, r3, #4
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	e00e      	b.n	8008f64 <put_fat+0x132>
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	b25b      	sxtb	r3, r3
 8008f4c:	f023 030f 	bic.w	r3, r3, #15
 8008f50:	b25a      	sxtb	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	0a1b      	lsrs	r3, r3, #8
 8008f56:	b25b      	sxtb	r3, r3
 8008f58:	f003 030f 	and.w	r3, r3, #15
 8008f5c:	b25b      	sxtb	r3, r3
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	b25b      	sxtb	r3, r3
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	70da      	strb	r2, [r3, #3]
			break;
 8008f6e:	e072      	b.n	8009056 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	899b      	ldrh	r3, [r3, #12]
 8008f78:	085b      	lsrs	r3, r3, #1
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f84:	4413      	add	r3, r2
 8008f86:	4619      	mov	r1, r3
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f7ff fdc5 	bl	8008b18 <move_window>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f92:	7ffb      	ldrb	r3, [r7, #31]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d15b      	bne.n	8009050 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	005b      	lsls	r3, r3, #1
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	8992      	ldrh	r2, [r2, #12]
 8008fa6:	fbb3 f0f2 	udiv	r0, r3, r2
 8008faa:	fb02 f200 	mul.w	r2, r2, r0
 8008fae:	1a9b      	subs	r3, r3, r2
 8008fb0:	440b      	add	r3, r1
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	b292      	uxth	r2, r2
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7ff fb38 	bl	800862e <st_word>
			fs->wflag = 1;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	70da      	strb	r2, [r3, #3]
			break;
 8008fc4:	e047      	b.n	8009056 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	899b      	ldrh	r3, [r3, #12]
 8008fce:	089b      	lsrs	r3, r3, #2
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fda:	4413      	add	r3, r2
 8008fdc:	4619      	mov	r1, r3
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f7ff fd9a 	bl	8008b18 <move_window>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008fe8:	7ffb      	ldrb	r3, [r7, #31]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d132      	bne.n	8009054 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	8992      	ldrh	r2, [r2, #12]
 8009002:	fbb3 f0f2 	udiv	r0, r3, r2
 8009006:	fb02 f200 	mul.w	r2, r2, r0
 800900a:	1a9b      	subs	r3, r3, r2
 800900c:	440b      	add	r3, r1
 800900e:	4618      	mov	r0, r3
 8009010:	f7ff faea 	bl	80085e8 <ld_dword>
 8009014:	4603      	mov	r3, r0
 8009016:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800901a:	4323      	orrs	r3, r4
 800901c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	8992      	ldrh	r2, [r2, #12]
 800902c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009030:	fb02 f200 	mul.w	r2, r2, r0
 8009034:	1a9b      	subs	r3, r3, r2
 8009036:	440b      	add	r3, r1
 8009038:	6879      	ldr	r1, [r7, #4]
 800903a:	4618      	mov	r0, r3
 800903c:	f7ff fb12 	bl	8008664 <st_dword>
			fs->wflag = 1;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2201      	movs	r2, #1
 8009044:	70da      	strb	r2, [r3, #3]
			break;
 8009046:	e006      	b.n	8009056 <put_fat+0x224>
			if (res != FR_OK) break;
 8009048:	bf00      	nop
 800904a:	e004      	b.n	8009056 <put_fat+0x224>
			if (res != FR_OK) break;
 800904c:	bf00      	nop
 800904e:	e002      	b.n	8009056 <put_fat+0x224>
			if (res != FR_OK) break;
 8009050:	bf00      	nop
 8009052:	e000      	b.n	8009056 <put_fat+0x224>
			if (res != FR_OK) break;
 8009054:	bf00      	nop
		}
	}
	return res;
 8009056:	7ffb      	ldrb	r3, [r7, #31]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3724      	adds	r7, #36	; 0x24
 800905c:	46bd      	mov	sp, r7
 800905e:	bd90      	pop	{r4, r7, pc}

08009060 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b088      	sub	sp, #32
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d904      	bls.n	8009086 <remove_chain+0x26>
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	69db      	ldr	r3, [r3, #28]
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	429a      	cmp	r2, r3
 8009084:	d301      	bcc.n	800908a <remove_chain+0x2a>
 8009086:	2302      	movs	r3, #2
 8009088:	e04b      	b.n	8009122 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00c      	beq.n	80090aa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009090:	f04f 32ff 	mov.w	r2, #4294967295
 8009094:	6879      	ldr	r1, [r7, #4]
 8009096:	69b8      	ldr	r0, [r7, #24]
 8009098:	f7ff fecb 	bl	8008e32 <put_fat>
 800909c:	4603      	mov	r3, r0
 800909e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80090a0:	7ffb      	ldrb	r3, [r7, #31]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d001      	beq.n	80090aa <remove_chain+0x4a>
 80090a6:	7ffb      	ldrb	r3, [r7, #31]
 80090a8:	e03b      	b.n	8009122 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80090aa:	68b9      	ldr	r1, [r7, #8]
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f7ff fdf0 	bl	8008c92 <get_fat>
 80090b2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d031      	beq.n	800911e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d101      	bne.n	80090c4 <remove_chain+0x64>
 80090c0:	2302      	movs	r3, #2
 80090c2:	e02e      	b.n	8009122 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ca:	d101      	bne.n	80090d0 <remove_chain+0x70>
 80090cc:	2301      	movs	r3, #1
 80090ce:	e028      	b.n	8009122 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80090d0:	2200      	movs	r2, #0
 80090d2:	68b9      	ldr	r1, [r7, #8]
 80090d4:	69b8      	ldr	r0, [r7, #24]
 80090d6:	f7ff feac 	bl	8008e32 <put_fat>
 80090da:	4603      	mov	r3, r0
 80090dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80090de:	7ffb      	ldrb	r3, [r7, #31]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <remove_chain+0x88>
 80090e4:	7ffb      	ldrb	r3, [r7, #31]
 80090e6:	e01c      	b.n	8009122 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	699a      	ldr	r2, [r3, #24]
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	69db      	ldr	r3, [r3, #28]
 80090f0:	3b02      	subs	r3, #2
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d20b      	bcs.n	800910e <remove_chain+0xae>
			fs->free_clst++;
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	791b      	ldrb	r3, [r3, #4]
 8009104:	f043 0301 	orr.w	r3, r3, #1
 8009108:	b2da      	uxtb	r2, r3
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	69db      	ldr	r3, [r3, #28]
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	429a      	cmp	r2, r3
 800911a:	d3c6      	bcc.n	80090aa <remove_chain+0x4a>
 800911c:	e000      	b.n	8009120 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800911e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3720      	adds	r7, #32
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b088      	sub	sp, #32
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10d      	bne.n	800915c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	695b      	ldr	r3, [r3, #20]
 8009144:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d004      	beq.n	8009156 <create_chain+0x2c>
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	69db      	ldr	r3, [r3, #28]
 8009150:	69ba      	ldr	r2, [r7, #24]
 8009152:	429a      	cmp	r2, r3
 8009154:	d31b      	bcc.n	800918e <create_chain+0x64>
 8009156:	2301      	movs	r3, #1
 8009158:	61bb      	str	r3, [r7, #24]
 800915a:	e018      	b.n	800918e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7ff fd97 	bl	8008c92 <get_fat>
 8009164:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d801      	bhi.n	8009170 <create_chain+0x46>
 800916c:	2301      	movs	r3, #1
 800916e:	e070      	b.n	8009252 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009176:	d101      	bne.n	800917c <create_chain+0x52>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	e06a      	b.n	8009252 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	69db      	ldr	r3, [r3, #28]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	429a      	cmp	r2, r3
 8009184:	d201      	bcs.n	800918a <create_chain+0x60>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	e063      	b.n	8009252 <create_chain+0x128>
		scl = clst;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	3301      	adds	r3, #1
 8009196:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	69db      	ldr	r3, [r3, #28]
 800919c:	69fa      	ldr	r2, [r7, #28]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d307      	bcc.n	80091b2 <create_chain+0x88>
				ncl = 2;
 80091a2:	2302      	movs	r3, #2
 80091a4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80091a6:	69fa      	ldr	r2, [r7, #28]
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d901      	bls.n	80091b2 <create_chain+0x88>
 80091ae:	2300      	movs	r3, #0
 80091b0:	e04f      	b.n	8009252 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80091b2:	69f9      	ldr	r1, [r7, #28]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f7ff fd6c 	bl	8008c92 <get_fat>
 80091ba:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00e      	beq.n	80091e0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d003      	beq.n	80091d0 <create_chain+0xa6>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ce:	d101      	bne.n	80091d4 <create_chain+0xaa>
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	e03e      	b.n	8009252 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80091d4:	69fa      	ldr	r2, [r7, #28]
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d1da      	bne.n	8009192 <create_chain+0x68>
 80091dc:	2300      	movs	r3, #0
 80091de:	e038      	b.n	8009252 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80091e0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80091e2:	f04f 32ff 	mov.w	r2, #4294967295
 80091e6:	69f9      	ldr	r1, [r7, #28]
 80091e8:	6938      	ldr	r0, [r7, #16]
 80091ea:	f7ff fe22 	bl	8008e32 <put_fat>
 80091ee:	4603      	mov	r3, r0
 80091f0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80091f2:	7dfb      	ldrb	r3, [r7, #23]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d109      	bne.n	800920c <create_chain+0xe2>
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d006      	beq.n	800920c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80091fe:	69fa      	ldr	r2, [r7, #28]
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6938      	ldr	r0, [r7, #16]
 8009204:	f7ff fe15 	bl	8008e32 <put_fat>
 8009208:	4603      	mov	r3, r0
 800920a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800920c:	7dfb      	ldrb	r3, [r7, #23]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d116      	bne.n	8009240 <create_chain+0x116>
		fs->last_clst = ncl;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	69fa      	ldr	r2, [r7, #28]
 8009216:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	699a      	ldr	r2, [r3, #24]
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	3b02      	subs	r3, #2
 8009222:	429a      	cmp	r2, r3
 8009224:	d804      	bhi.n	8009230 <create_chain+0x106>
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	1e5a      	subs	r2, r3, #1
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	791b      	ldrb	r3, [r3, #4]
 8009234:	f043 0301 	orr.w	r3, r3, #1
 8009238:	b2da      	uxtb	r2, r3
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	711a      	strb	r2, [r3, #4]
 800923e:	e007      	b.n	8009250 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009240:	7dfb      	ldrb	r3, [r7, #23]
 8009242:	2b01      	cmp	r3, #1
 8009244:	d102      	bne.n	800924c <create_chain+0x122>
 8009246:	f04f 33ff 	mov.w	r3, #4294967295
 800924a:	e000      	b.n	800924e <create_chain+0x124>
 800924c:	2301      	movs	r3, #1
 800924e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009250:	69fb      	ldr	r3, [r7, #28]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3720      	adds	r7, #32
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800925a:	b480      	push	{r7}
 800925c:	b087      	sub	sp, #28
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926e:	3304      	adds	r3, #4
 8009270:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	899b      	ldrh	r3, [r3, #12]
 8009276:	461a      	mov	r2, r3
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	fbb3 f3f2 	udiv	r3, r3, r2
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	8952      	ldrh	r2, [r2, #10]
 8009282:	fbb3 f3f2 	udiv	r3, r3, r2
 8009286:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	1d1a      	adds	r2, r3, #4
 800928c:	613a      	str	r2, [r7, #16]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <clmt_clust+0x42>
 8009298:	2300      	movs	r3, #0
 800929a:	e010      	b.n	80092be <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800929c:	697a      	ldr	r2, [r7, #20]
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d307      	bcc.n	80092b4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	617b      	str	r3, [r7, #20]
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	3304      	adds	r3, #4
 80092b0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80092b2:	e7e9      	b.n	8009288 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80092b4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	4413      	add	r3, r2
}
 80092be:	4618      	mov	r0, r3
 80092c0:	371c      	adds	r7, #28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr

080092ca <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b086      	sub	sp, #24
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092e0:	d204      	bcs.n	80092ec <dir_sdi+0x22>
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	f003 031f 	and.w	r3, r3, #31
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80092ec:	2302      	movs	r3, #2
 80092ee:	e071      	b.n	80093d4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d106      	bne.n	8009310 <dir_sdi+0x46>
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	2b02      	cmp	r3, #2
 8009308:	d902      	bls.n	8009310 <dir_sdi+0x46>
		clst = fs->dirbase;
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10c      	bne.n	8009330 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	095b      	lsrs	r3, r3, #5
 800931a:	693a      	ldr	r2, [r7, #16]
 800931c:	8912      	ldrh	r2, [r2, #8]
 800931e:	4293      	cmp	r3, r2
 8009320:	d301      	bcc.n	8009326 <dir_sdi+0x5c>
 8009322:	2302      	movs	r3, #2
 8009324:	e056      	b.n	80093d4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	61da      	str	r2, [r3, #28]
 800932e:	e02d      	b.n	800938c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	895b      	ldrh	r3, [r3, #10]
 8009334:	461a      	mov	r2, r3
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	899b      	ldrh	r3, [r3, #12]
 800933a:	fb03 f302 	mul.w	r3, r3, r2
 800933e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009340:	e019      	b.n	8009376 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6979      	ldr	r1, [r7, #20]
 8009346:	4618      	mov	r0, r3
 8009348:	f7ff fca3 	bl	8008c92 <get_fat>
 800934c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009354:	d101      	bne.n	800935a <dir_sdi+0x90>
 8009356:	2301      	movs	r3, #1
 8009358:	e03c      	b.n	80093d4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d904      	bls.n	800936a <dir_sdi+0xa0>
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	69db      	ldr	r3, [r3, #28]
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	429a      	cmp	r2, r3
 8009368:	d301      	bcc.n	800936e <dir_sdi+0xa4>
 800936a:	2302      	movs	r3, #2
 800936c:	e032      	b.n	80093d4 <dir_sdi+0x10a>
			ofs -= csz;
 800936e:	683a      	ldr	r2, [r7, #0]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	429a      	cmp	r2, r3
 800937c:	d2e1      	bcs.n	8009342 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800937e:	6979      	ldr	r1, [r7, #20]
 8009380:	6938      	ldr	r0, [r7, #16]
 8009382:	f7ff fc67 	bl	8008c54 <clust2sect>
 8009386:	4602      	mov	r2, r0
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	697a      	ldr	r2, [r7, #20]
 8009390:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	69db      	ldr	r3, [r3, #28]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <dir_sdi+0xd4>
 800939a:	2302      	movs	r3, #2
 800939c:	e01a      	b.n	80093d4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	69da      	ldr	r2, [r3, #28]
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	899b      	ldrh	r3, [r3, #12]
 80093a6:	4619      	mov	r1, r3
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80093ae:	441a      	add	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	899b      	ldrh	r3, [r3, #12]
 80093be:	461a      	mov	r2, r3
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80093c6:	fb02 f200 	mul.w	r2, r2, r0
 80093ca:	1a9b      	subs	r3, r3, r2
 80093cc:	18ca      	adds	r2, r1, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3718      	adds	r7, #24
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	695b      	ldr	r3, [r3, #20]
 80093f0:	3320      	adds	r3, #32
 80093f2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	69db      	ldr	r3, [r3, #28]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d003      	beq.n	8009404 <dir_next+0x28>
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009402:	d301      	bcc.n	8009408 <dir_next+0x2c>
 8009404:	2304      	movs	r3, #4
 8009406:	e0bb      	b.n	8009580 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	899b      	ldrh	r3, [r3, #12]
 800940c:	461a      	mov	r2, r3
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	fbb3 f1f2 	udiv	r1, r3, r2
 8009414:	fb02 f201 	mul.w	r2, r2, r1
 8009418:	1a9b      	subs	r3, r3, r2
 800941a:	2b00      	cmp	r3, #0
 800941c:	f040 809d 	bne.w	800955a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	69db      	ldr	r3, [r3, #28]
 8009424:	1c5a      	adds	r2, r3, #1
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10b      	bne.n	800944a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	095b      	lsrs	r3, r3, #5
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	8912      	ldrh	r2, [r2, #8]
 800943a:	4293      	cmp	r3, r2
 800943c:	f0c0 808d 	bcc.w	800955a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	61da      	str	r2, [r3, #28]
 8009446:	2304      	movs	r3, #4
 8009448:	e09a      	b.n	8009580 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	899b      	ldrh	r3, [r3, #12]
 800944e:	461a      	mov	r2, r3
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	fbb3 f3f2 	udiv	r3, r3, r2
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	8952      	ldrh	r2, [r2, #10]
 800945a:	3a01      	subs	r2, #1
 800945c:	4013      	ands	r3, r2
 800945e:	2b00      	cmp	r3, #0
 8009460:	d17b      	bne.n	800955a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	4619      	mov	r1, r3
 800946a:	4610      	mov	r0, r2
 800946c:	f7ff fc11 	bl	8008c92 <get_fat>
 8009470:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	2b01      	cmp	r3, #1
 8009476:	d801      	bhi.n	800947c <dir_next+0xa0>
 8009478:	2302      	movs	r3, #2
 800947a:	e081      	b.n	8009580 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009482:	d101      	bne.n	8009488 <dir_next+0xac>
 8009484:	2301      	movs	r3, #1
 8009486:	e07b      	b.n	8009580 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	69db      	ldr	r3, [r3, #28]
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	429a      	cmp	r2, r3
 8009490:	d359      	bcc.n	8009546 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d104      	bne.n	80094a2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	61da      	str	r2, [r3, #28]
 800949e:	2304      	movs	r3, #4
 80094a0:	e06e      	b.n	8009580 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	4619      	mov	r1, r3
 80094aa:	4610      	mov	r0, r2
 80094ac:	f7ff fe3d 	bl	800912a <create_chain>
 80094b0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d101      	bne.n	80094bc <dir_next+0xe0>
 80094b8:	2307      	movs	r3, #7
 80094ba:	e061      	b.n	8009580 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d101      	bne.n	80094c6 <dir_next+0xea>
 80094c2:	2302      	movs	r3, #2
 80094c4:	e05c      	b.n	8009580 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094cc:	d101      	bne.n	80094d2 <dir_next+0xf6>
 80094ce:	2301      	movs	r3, #1
 80094d0:	e056      	b.n	8009580 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f7ff fadc 	bl	8008a90 <sync_window>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <dir_next+0x106>
 80094de:	2301      	movs	r3, #1
 80094e0:	e04e      	b.n	8009580 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	899b      	ldrh	r3, [r3, #12]
 80094ec:	461a      	mov	r2, r3
 80094ee:	2100      	movs	r1, #0
 80094f0:	f7ff f905 	bl	80086fe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80094f4:	2300      	movs	r3, #0
 80094f6:	613b      	str	r3, [r7, #16]
 80094f8:	6979      	ldr	r1, [r7, #20]
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f7ff fbaa 	bl	8008c54 <clust2sect>
 8009500:	4602      	mov	r2, r0
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	635a      	str	r2, [r3, #52]	; 0x34
 8009506:	e012      	b.n	800952e <dir_next+0x152>
						fs->wflag = 1;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2201      	movs	r2, #1
 800950c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f7ff fabe 	bl	8008a90 <sync_window>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <dir_next+0x142>
 800951a:	2301      	movs	r3, #1
 800951c:	e030      	b.n	8009580 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	3301      	adds	r3, #1
 8009522:	613b      	str	r3, [r7, #16]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009528:	1c5a      	adds	r2, r3, #1
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	635a      	str	r2, [r3, #52]	; 0x34
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	895b      	ldrh	r3, [r3, #10]
 8009532:	461a      	mov	r2, r3
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	4293      	cmp	r3, r2
 8009538:	d3e6      	bcc.n	8009508 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	1ad2      	subs	r2, r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	697a      	ldr	r2, [r7, #20]
 800954a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800954c:	6979      	ldr	r1, [r7, #20]
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f7ff fb80 	bl	8008c54 <clust2sect>
 8009554:	4602      	mov	r2, r0
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	899b      	ldrh	r3, [r3, #12]
 800956a:	461a      	mov	r2, r3
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009572:	fb02 f200 	mul.w	r2, r2, r0
 8009576:	1a9b      	subs	r3, r3, r2
 8009578:	18ca      	adds	r2, r1, r3
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3718      	adds	r7, #24
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009598:	2100      	movs	r1, #0
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7ff fe95 	bl	80092ca <dir_sdi>
 80095a0:	4603      	mov	r3, r0
 80095a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80095a4:	7dfb      	ldrb	r3, [r7, #23]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d12b      	bne.n	8009602 <dir_alloc+0x7a>
		n = 0;
 80095aa:	2300      	movs	r3, #0
 80095ac:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	69db      	ldr	r3, [r3, #28]
 80095b2:	4619      	mov	r1, r3
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f7ff faaf 	bl	8008b18 <move_window>
 80095ba:	4603      	mov	r3, r0
 80095bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80095be:	7dfb      	ldrb	r3, [r7, #23]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d11d      	bne.n	8009600 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a1b      	ldr	r3, [r3, #32]
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	2be5      	cmp	r3, #229	; 0xe5
 80095cc:	d004      	beq.n	80095d8 <dir_alloc+0x50>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a1b      	ldr	r3, [r3, #32]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d107      	bne.n	80095e8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	3301      	adds	r3, #1
 80095dc:	613b      	str	r3, [r7, #16]
 80095de:	693a      	ldr	r2, [r7, #16]
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d102      	bne.n	80095ec <dir_alloc+0x64>
 80095e6:	e00c      	b.n	8009602 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80095e8:	2300      	movs	r3, #0
 80095ea:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80095ec:	2101      	movs	r1, #1
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7ff fef4 	bl	80093dc <dir_next>
 80095f4:	4603      	mov	r3, r0
 80095f6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80095f8:	7dfb      	ldrb	r3, [r7, #23]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d0d7      	beq.n	80095ae <dir_alloc+0x26>
 80095fe:	e000      	b.n	8009602 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009600:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009602:	7dfb      	ldrb	r3, [r7, #23]
 8009604:	2b04      	cmp	r3, #4
 8009606:	d101      	bne.n	800960c <dir_alloc+0x84>
 8009608:	2307      	movs	r3, #7
 800960a:	75fb      	strb	r3, [r7, #23]
	return res;
 800960c:	7dfb      	ldrb	r3, [r7, #23]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3718      	adds	r7, #24
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b084      	sub	sp, #16
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
 800961e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	331a      	adds	r3, #26
 8009624:	4618      	mov	r0, r3
 8009626:	f7fe ffc7 	bl	80085b8 <ld_word>
 800962a:	4603      	mov	r3, r0
 800962c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	2b03      	cmp	r3, #3
 8009634:	d109      	bne.n	800964a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	3314      	adds	r3, #20
 800963a:	4618      	mov	r0, r3
 800963c:	f7fe ffbc 	bl	80085b8 <ld_word>
 8009640:	4603      	mov	r3, r0
 8009642:	041b      	lsls	r3, r3, #16
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	4313      	orrs	r3, r2
 8009648:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800964a:	68fb      	ldr	r3, [r7, #12]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	331a      	adds	r3, #26
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	b292      	uxth	r2, r2
 8009668:	4611      	mov	r1, r2
 800966a:	4618      	mov	r0, r3
 800966c:	f7fe ffdf 	bl	800862e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	2b03      	cmp	r3, #3
 8009676:	d109      	bne.n	800968c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	f103 0214 	add.w	r2, r3, #20
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	0c1b      	lsrs	r3, r3, #16
 8009682:	b29b      	uxth	r3, r3
 8009684:	4619      	mov	r1, r3
 8009686:	4610      	mov	r0, r2
 8009688:	f7fe ffd1 	bl	800862e <st_word>
	}
}
 800968c:	bf00      	nop
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009694:	b590      	push	{r4, r7, lr}
 8009696:	b087      	sub	sp, #28
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	331a      	adds	r3, #26
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fe ff88 	bl	80085b8 <ld_word>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d001      	beq.n	80096b2 <cmp_lfn+0x1e>
 80096ae:	2300      	movs	r3, #0
 80096b0:	e059      	b.n	8009766 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096ba:	1e5a      	subs	r2, r3, #1
 80096bc:	4613      	mov	r3, r2
 80096be:	005b      	lsls	r3, r3, #1
 80096c0:	4413      	add	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80096c8:	2301      	movs	r3, #1
 80096ca:	81fb      	strh	r3, [r7, #14]
 80096cc:	2300      	movs	r3, #0
 80096ce:	613b      	str	r3, [r7, #16]
 80096d0:	e033      	b.n	800973a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80096d2:	4a27      	ldr	r2, [pc, #156]	; (8009770 <cmp_lfn+0xdc>)
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	4413      	add	r3, r2
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	461a      	mov	r2, r3
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	4413      	add	r3, r2
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fe ff69 	bl	80085b8 <ld_word>
 80096e6:	4603      	mov	r3, r0
 80096e8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80096ea:	89fb      	ldrh	r3, [r7, #14]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d01a      	beq.n	8009726 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	2bfe      	cmp	r3, #254	; 0xfe
 80096f4:	d812      	bhi.n	800971c <cmp_lfn+0x88>
 80096f6:	89bb      	ldrh	r3, [r7, #12]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fe fe35 	bl	8008368 <ff_wtoupper>
 80096fe:	4603      	mov	r3, r0
 8009700:	461c      	mov	r4, r3
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	1c5a      	adds	r2, r3, #1
 8009706:	617a      	str	r2, [r7, #20]
 8009708:	005b      	lsls	r3, r3, #1
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	4413      	add	r3, r2
 800970e:	881b      	ldrh	r3, [r3, #0]
 8009710:	4618      	mov	r0, r3
 8009712:	f7fe fe29 	bl	8008368 <ff_wtoupper>
 8009716:	4603      	mov	r3, r0
 8009718:	429c      	cmp	r4, r3
 800971a:	d001      	beq.n	8009720 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800971c:	2300      	movs	r3, #0
 800971e:	e022      	b.n	8009766 <cmp_lfn+0xd2>
			}
			wc = uc;
 8009720:	89bb      	ldrh	r3, [r7, #12]
 8009722:	81fb      	strh	r3, [r7, #14]
 8009724:	e006      	b.n	8009734 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009726:	89bb      	ldrh	r3, [r7, #12]
 8009728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800972c:	4293      	cmp	r3, r2
 800972e:	d001      	beq.n	8009734 <cmp_lfn+0xa0>
 8009730:	2300      	movs	r3, #0
 8009732:	e018      	b.n	8009766 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	3301      	adds	r3, #1
 8009738:	613b      	str	r3, [r7, #16]
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	2b0c      	cmp	r3, #12
 800973e:	d9c8      	bls.n	80096d2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00b      	beq.n	8009764 <cmp_lfn+0xd0>
 800974c:	89fb      	ldrh	r3, [r7, #14]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d008      	beq.n	8009764 <cmp_lfn+0xd0>
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	005b      	lsls	r3, r3, #1
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	4413      	add	r3, r2
 800975a:	881b      	ldrh	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <cmp_lfn+0xd0>
 8009760:	2300      	movs	r3, #0
 8009762:	e000      	b.n	8009766 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009764:	2301      	movs	r3, #1
}
 8009766:	4618      	mov	r0, r3
 8009768:	371c      	adds	r7, #28
 800976a:	46bd      	mov	sp, r7
 800976c:	bd90      	pop	{r4, r7, pc}
 800976e:	bf00      	nop
 8009770:	0800c590 	.word	0x0800c590

08009774 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b088      	sub	sp, #32
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	4611      	mov	r1, r2
 8009780:	461a      	mov	r2, r3
 8009782:	460b      	mov	r3, r1
 8009784:	71fb      	strb	r3, [r7, #7]
 8009786:	4613      	mov	r3, r2
 8009788:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	330d      	adds	r3, #13
 800978e:	79ba      	ldrb	r2, [r7, #6]
 8009790:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	330b      	adds	r3, #11
 8009796:	220f      	movs	r2, #15
 8009798:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	330c      	adds	r3, #12
 800979e:	2200      	movs	r2, #0
 80097a0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	331a      	adds	r3, #26
 80097a6:	2100      	movs	r1, #0
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fe ff40 	bl	800862e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80097ae:	79fb      	ldrb	r3, [r7, #7]
 80097b0:	1e5a      	subs	r2, r3, #1
 80097b2:	4613      	mov	r3, r2
 80097b4:	005b      	lsls	r3, r3, #1
 80097b6:	4413      	add	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80097be:	2300      	movs	r3, #0
 80097c0:	82fb      	strh	r3, [r7, #22]
 80097c2:	2300      	movs	r3, #0
 80097c4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80097c6:	8afb      	ldrh	r3, [r7, #22]
 80097c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d007      	beq.n	80097e0 <put_lfn+0x6c>
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	61fa      	str	r2, [r7, #28]
 80097d6:	005b      	lsls	r3, r3, #1
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	4413      	add	r3, r2
 80097dc:	881b      	ldrh	r3, [r3, #0]
 80097de:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80097e0:	4a17      	ldr	r2, [pc, #92]	; (8009840 <put_lfn+0xcc>)
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	4413      	add	r3, r2
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	461a      	mov	r2, r3
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	4413      	add	r3, r2
 80097ee:	8afa      	ldrh	r2, [r7, #22]
 80097f0:	4611      	mov	r1, r2
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7fe ff1b 	bl	800862e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80097f8:	8afb      	ldrh	r3, [r7, #22]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d102      	bne.n	8009804 <put_lfn+0x90>
 80097fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009802:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	3301      	adds	r3, #1
 8009808:	61bb      	str	r3, [r7, #24]
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	2b0c      	cmp	r3, #12
 800980e:	d9da      	bls.n	80097c6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009810:	8afb      	ldrh	r3, [r7, #22]
 8009812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009816:	4293      	cmp	r3, r2
 8009818:	d006      	beq.n	8009828 <put_lfn+0xb4>
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	005b      	lsls	r3, r3, #1
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	4413      	add	r3, r2
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d103      	bne.n	8009830 <put_lfn+0xbc>
 8009828:	79fb      	ldrb	r3, [r7, #7]
 800982a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800982e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	79fa      	ldrb	r2, [r7, #7]
 8009834:	701a      	strb	r2, [r3, #0]
}
 8009836:	bf00      	nop
 8009838:	3720      	adds	r7, #32
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	0800c590 	.word	0x0800c590

08009844 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b08c      	sub	sp, #48	; 0x30
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
 8009850:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009852:	220b      	movs	r2, #11
 8009854:	68b9      	ldr	r1, [r7, #8]
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f7fe ff30 	bl	80086bc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	2b05      	cmp	r3, #5
 8009860:	d92b      	bls.n	80098ba <gen_numname+0x76>
		sr = seq;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009866:	e022      	b.n	80098ae <gen_numname+0x6a>
			wc = *lfn++;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	1c9a      	adds	r2, r3, #2
 800986c:	607a      	str	r2, [r7, #4]
 800986e:	881b      	ldrh	r3, [r3, #0]
 8009870:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009872:	2300      	movs	r3, #0
 8009874:	62bb      	str	r3, [r7, #40]	; 0x28
 8009876:	e017      	b.n	80098a8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	005a      	lsls	r2, r3, #1
 800987c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800987e:	f003 0301 	and.w	r3, r3, #1
 8009882:	4413      	add	r3, r2
 8009884:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009886:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009888:	085b      	lsrs	r3, r3, #1
 800988a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009892:	2b00      	cmp	r3, #0
 8009894:	d005      	beq.n	80098a2 <gen_numname+0x5e>
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800989c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80098a0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80098a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a4:	3301      	adds	r3, #1
 80098a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80098a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098aa:	2b0f      	cmp	r3, #15
 80098ac:	d9e4      	bls.n	8009878 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	881b      	ldrh	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1d8      	bne.n	8009868 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80098ba:	2307      	movs	r3, #7
 80098bc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	f003 030f 	and.w	r3, r3, #15
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	3330      	adds	r3, #48	; 0x30
 80098ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80098ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098d2:	2b39      	cmp	r3, #57	; 0x39
 80098d4:	d904      	bls.n	80098e0 <gen_numname+0x9c>
 80098d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098da:	3307      	adds	r3, #7
 80098dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80098e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e2:	1e5a      	subs	r2, r3, #1
 80098e4:	62ba      	str	r2, [r7, #40]	; 0x28
 80098e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80098ea:	4413      	add	r3, r2
 80098ec:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80098f0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	091b      	lsrs	r3, r3, #4
 80098f8:	603b      	str	r3, [r7, #0]
	} while (seq);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1de      	bne.n	80098be <gen_numname+0x7a>
	ns[i] = '~';
 8009900:	f107 0214 	add.w	r2, r7, #20
 8009904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009906:	4413      	add	r3, r2
 8009908:	227e      	movs	r2, #126	; 0x7e
 800990a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800990c:	2300      	movs	r3, #0
 800990e:	627b      	str	r3, [r7, #36]	; 0x24
 8009910:	e002      	b.n	8009918 <gen_numname+0xd4>
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009914:	3301      	adds	r3, #1
 8009916:	627b      	str	r3, [r7, #36]	; 0x24
 8009918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800991a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991c:	429a      	cmp	r2, r3
 800991e:	d205      	bcs.n	800992c <gen_numname+0xe8>
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009924:	4413      	add	r3, r2
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	2b20      	cmp	r3, #32
 800992a:	d1f2      	bne.n	8009912 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800992c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992e:	2b07      	cmp	r3, #7
 8009930:	d808      	bhi.n	8009944 <gen_numname+0x100>
 8009932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009934:	1c5a      	adds	r2, r3, #1
 8009936:	62ba      	str	r2, [r7, #40]	; 0x28
 8009938:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800993c:	4413      	add	r3, r2
 800993e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009942:	e000      	b.n	8009946 <gen_numname+0x102>
 8009944:	2120      	movs	r1, #32
 8009946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009948:	1c5a      	adds	r2, r3, #1
 800994a:	627a      	str	r2, [r7, #36]	; 0x24
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	4413      	add	r3, r2
 8009950:	460a      	mov	r2, r1
 8009952:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	2b07      	cmp	r3, #7
 8009958:	d9e8      	bls.n	800992c <gen_numname+0xe8>
}
 800995a:	bf00      	nop
 800995c:	3730      	adds	r7, #48	; 0x30
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009962:	b480      	push	{r7}
 8009964:	b085      	sub	sp, #20
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800996a:	2300      	movs	r3, #0
 800996c:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800996e:	230b      	movs	r3, #11
 8009970:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009972:	7bfb      	ldrb	r3, [r7, #15]
 8009974:	b2da      	uxtb	r2, r3
 8009976:	0852      	lsrs	r2, r2, #1
 8009978:	01db      	lsls	r3, r3, #7
 800997a:	4313      	orrs	r3, r2
 800997c:	b2da      	uxtb	r2, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	1c59      	adds	r1, r3, #1
 8009982:	6079      	str	r1, [r7, #4]
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	4413      	add	r3, r2
 8009988:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	3b01      	subs	r3, #1
 800998e:	60bb      	str	r3, [r7, #8]
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1ed      	bne.n	8009972 <sum_sfn+0x10>
	return sum;
 8009996:	7bfb      	ldrb	r3, [r7, #15]
}
 8009998:	4618      	mov	r0, r3
 800999a:	3714      	adds	r7, #20
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80099b2:	2100      	movs	r1, #0
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7ff fc88 	bl	80092ca <dir_sdi>
 80099ba:	4603      	mov	r3, r0
 80099bc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80099be:	7dfb      	ldrb	r3, [r7, #23]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <dir_find+0x24>
 80099c4:	7dfb      	ldrb	r3, [r7, #23]
 80099c6:	e0a9      	b.n	8009b1c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80099c8:	23ff      	movs	r3, #255	; 0xff
 80099ca:	753b      	strb	r3, [r7, #20]
 80099cc:	7d3b      	ldrb	r3, [r7, #20]
 80099ce:	757b      	strb	r3, [r7, #21]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f04f 32ff 	mov.w	r2, #4294967295
 80099d6:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	69db      	ldr	r3, [r3, #28]
 80099dc:	4619      	mov	r1, r3
 80099de:	6938      	ldr	r0, [r7, #16]
 80099e0:	f7ff f89a 	bl	8008b18 <move_window>
 80099e4:	4603      	mov	r3, r0
 80099e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80099e8:	7dfb      	ldrb	r3, [r7, #23]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f040 8090 	bne.w	8009b10 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6a1b      	ldr	r3, [r3, #32]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80099f8:	7dbb      	ldrb	r3, [r7, #22]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d102      	bne.n	8009a04 <dir_find+0x60>
 80099fe:	2304      	movs	r3, #4
 8009a00:	75fb      	strb	r3, [r7, #23]
 8009a02:	e08a      	b.n	8009b1a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
 8009a08:	330b      	adds	r3, #11
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a10:	73fb      	strb	r3, [r7, #15]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	7bfa      	ldrb	r2, [r7, #15]
 8009a16:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009a18:	7dbb      	ldrb	r3, [r7, #22]
 8009a1a:	2be5      	cmp	r3, #229	; 0xe5
 8009a1c:	d007      	beq.n	8009a2e <dir_find+0x8a>
 8009a1e:	7bfb      	ldrb	r3, [r7, #15]
 8009a20:	f003 0308 	and.w	r3, r3, #8
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d009      	beq.n	8009a3c <dir_find+0x98>
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	2b0f      	cmp	r3, #15
 8009a2c:	d006      	beq.n	8009a3c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009a2e:	23ff      	movs	r3, #255	; 0xff
 8009a30:	757b      	strb	r3, [r7, #21]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f04f 32ff 	mov.w	r2, #4294967295
 8009a38:	631a      	str	r2, [r3, #48]	; 0x30
 8009a3a:	e05e      	b.n	8009afa <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
 8009a3e:	2b0f      	cmp	r3, #15
 8009a40:	d136      	bne.n	8009ab0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d154      	bne.n	8009afa <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009a50:	7dbb      	ldrb	r3, [r7, #22]
 8009a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00d      	beq.n	8009a76 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	7b5b      	ldrb	r3, [r3, #13]
 8009a60:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009a62:	7dbb      	ldrb	r3, [r7, #22]
 8009a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a68:	75bb      	strb	r3, [r7, #22]
 8009a6a:	7dbb      	ldrb	r3, [r7, #22]
 8009a6c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	695a      	ldr	r2, [r3, #20]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009a76:	7dba      	ldrb	r2, [r7, #22]
 8009a78:	7d7b      	ldrb	r3, [r7, #21]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d115      	bne.n	8009aaa <dir_find+0x106>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	330d      	adds	r3, #13
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	7d3a      	ldrb	r2, [r7, #20]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d10e      	bne.n	8009aaa <dir_find+0x106>
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	691a      	ldr	r2, [r3, #16]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6a1b      	ldr	r3, [r3, #32]
 8009a94:	4619      	mov	r1, r3
 8009a96:	4610      	mov	r0, r2
 8009a98:	f7ff fdfc 	bl	8009694 <cmp_lfn>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d003      	beq.n	8009aaa <dir_find+0x106>
 8009aa2:	7d7b      	ldrb	r3, [r7, #21]
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	e000      	b.n	8009aac <dir_find+0x108>
 8009aaa:	23ff      	movs	r3, #255	; 0xff
 8009aac:	757b      	strb	r3, [r7, #21]
 8009aae:	e024      	b.n	8009afa <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009ab0:	7d7b      	ldrb	r3, [r7, #21]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d109      	bne.n	8009aca <dir_find+0x126>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7ff ff51 	bl	8009962 <sum_sfn>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	7d3b      	ldrb	r3, [r7, #20]
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d024      	beq.n	8009b14 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10a      	bne.n	8009aee <dir_find+0x14a>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6a18      	ldr	r0, [r3, #32]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	3324      	adds	r3, #36	; 0x24
 8009ae0:	220b      	movs	r2, #11
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	f7fe fe25 	bl	8008732 <mem_cmp>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d014      	beq.n	8009b18 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009aee:	23ff      	movs	r3, #255	; 0xff
 8009af0:	757b      	strb	r3, [r7, #21]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f04f 32ff 	mov.w	r2, #4294967295
 8009af8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009afa:	2100      	movs	r1, #0
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7ff fc6d 	bl	80093dc <dir_next>
 8009b02:	4603      	mov	r3, r0
 8009b04:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009b06:	7dfb      	ldrb	r3, [r7, #23]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f43f af65 	beq.w	80099d8 <dir_find+0x34>
 8009b0e:	e004      	b.n	8009b1a <dir_find+0x176>
		if (res != FR_OK) break;
 8009b10:	bf00      	nop
 8009b12:	e002      	b.n	8009b1a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009b14:	bf00      	nop
 8009b16:	e000      	b.n	8009b1a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009b18:	bf00      	nop

	return res;
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3718      	adds	r7, #24
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b08c      	sub	sp, #48	; 0x30
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009b38:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d001      	beq.n	8009b44 <dir_register+0x20>
 8009b40:	2306      	movs	r3, #6
 8009b42:	e0e0      	b.n	8009d06 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009b44:	2300      	movs	r3, #0
 8009b46:	627b      	str	r3, [r7, #36]	; 0x24
 8009b48:	e002      	b.n	8009b50 <dir_register+0x2c>
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	691a      	ldr	r2, [r3, #16]
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	005b      	lsls	r3, r3, #1
 8009b58:	4413      	add	r3, r2
 8009b5a:	881b      	ldrh	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1f4      	bne.n	8009b4a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009b66:	f107 030c 	add.w	r3, r7, #12
 8009b6a:	220c      	movs	r2, #12
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7fe fda5 	bl	80086bc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009b72:	7dfb      	ldrb	r3, [r7, #23]
 8009b74:	f003 0301 	and.w	r3, r3, #1
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d032      	beq.n	8009be2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2240      	movs	r2, #64	; 0x40
 8009b80:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009b84:	2301      	movs	r3, #1
 8009b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b88:	e016      	b.n	8009bb8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	691a      	ldr	r2, [r3, #16]
 8009b94:	f107 010c 	add.w	r1, r7, #12
 8009b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9a:	f7ff fe53 	bl	8009844 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f7ff ff00 	bl	80099a4 <dir_find>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009baa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d106      	bne.n	8009bc0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bba:	2b63      	cmp	r3, #99	; 0x63
 8009bbc:	d9e5      	bls.n	8009b8a <dir_register+0x66>
 8009bbe:	e000      	b.n	8009bc2 <dir_register+0x9e>
			if (res != FR_OK) break;
 8009bc0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc4:	2b64      	cmp	r3, #100	; 0x64
 8009bc6:	d101      	bne.n	8009bcc <dir_register+0xa8>
 8009bc8:	2307      	movs	r3, #7
 8009bca:	e09c      	b.n	8009d06 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009bcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bd0:	2b04      	cmp	r3, #4
 8009bd2:	d002      	beq.n	8009bda <dir_register+0xb6>
 8009bd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bd8:	e095      	b.n	8009d06 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009bda:	7dfa      	ldrb	r2, [r7, #23]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009be2:	7dfb      	ldrb	r3, [r7, #23]
 8009be4:	f003 0302 	and.w	r3, r3, #2
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d007      	beq.n	8009bfc <dir_register+0xd8>
 8009bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bee:	330c      	adds	r3, #12
 8009bf0:	4a47      	ldr	r2, [pc, #284]	; (8009d10 <dir_register+0x1ec>)
 8009bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf6:	089b      	lsrs	r3, r3, #2
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	e000      	b.n	8009bfe <dir_register+0xda>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009c00:	6a39      	ldr	r1, [r7, #32]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7ff fcc0 	bl	8009588 <dir_alloc>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009c0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d148      	bne.n	8009ca8 <dir_register+0x184>
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	623b      	str	r3, [r7, #32]
 8009c1c:	6a3b      	ldr	r3, [r7, #32]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d042      	beq.n	8009ca8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	695a      	ldr	r2, [r3, #20]
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	015b      	lsls	r3, r3, #5
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f7ff fb4b 	bl	80092ca <dir_sdi>
 8009c34:	4603      	mov	r3, r0
 8009c36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009c3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d132      	bne.n	8009ca8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	3324      	adds	r3, #36	; 0x24
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7ff fe8b 	bl	8009962 <sum_sfn>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	69db      	ldr	r3, [r3, #28]
 8009c54:	4619      	mov	r1, r3
 8009c56:	69f8      	ldr	r0, [r7, #28]
 8009c58:	f7fe ff5e 	bl	8008b18 <move_window>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009c62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d11d      	bne.n	8009ca6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	6918      	ldr	r0, [r3, #16]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a19      	ldr	r1, [r3, #32]
 8009c72:	6a3b      	ldr	r3, [r7, #32]
 8009c74:	b2da      	uxtb	r2, r3
 8009c76:	7efb      	ldrb	r3, [r7, #27]
 8009c78:	f7ff fd7c 	bl	8009774 <put_lfn>
				fs->wflag = 1;
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009c82:	2100      	movs	r1, #0
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7ff fba9 	bl	80093dc <dir_next>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009c90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d107      	bne.n	8009ca8 <dir_register+0x184>
 8009c98:	6a3b      	ldr	r3, [r7, #32]
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	623b      	str	r3, [r7, #32]
 8009c9e:	6a3b      	ldr	r3, [r7, #32]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1d5      	bne.n	8009c50 <dir_register+0x12c>
 8009ca4:	e000      	b.n	8009ca8 <dir_register+0x184>
				if (res != FR_OK) break;
 8009ca6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009ca8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d128      	bne.n	8009d02 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	69db      	ldr	r3, [r3, #28]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	69f8      	ldr	r0, [r7, #28]
 8009cb8:	f7fe ff2e 	bl	8008b18 <move_window>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009cc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d11b      	bne.n	8009d02 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	2220      	movs	r2, #32
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7fe fd13 	bl	80086fe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6a18      	ldr	r0, [r3, #32]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	3324      	adds	r3, #36	; 0x24
 8009ce0:	220b      	movs	r2, #11
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	f7fe fcea 	bl	80086bc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a1b      	ldr	r3, [r3, #32]
 8009cf2:	330c      	adds	r3, #12
 8009cf4:	f002 0218 	and.w	r2, r2, #24
 8009cf8:	b2d2      	uxtb	r2, r2
 8009cfa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009d02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3730      	adds	r7, #48	; 0x30
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	4ec4ec4f 	.word	0x4ec4ec4f

08009d14 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b08a      	sub	sp, #40	; 0x28
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	613b      	str	r3, [r7, #16]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	60fb      	str	r3, [r7, #12]
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	617b      	str	r3, [r7, #20]
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	1c5a      	adds	r2, r3, #1
 8009d38:	61ba      	str	r2, [r7, #24]
 8009d3a:	693a      	ldr	r2, [r7, #16]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009d42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d44:	2b1f      	cmp	r3, #31
 8009d46:	d940      	bls.n	8009dca <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009d48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d4a:	2b2f      	cmp	r3, #47	; 0x2f
 8009d4c:	d006      	beq.n	8009d5c <create_name+0x48>
 8009d4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d50:	2b5c      	cmp	r3, #92	; 0x5c
 8009d52:	d110      	bne.n	8009d76 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009d54:	e002      	b.n	8009d5c <create_name+0x48>
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	61bb      	str	r3, [r7, #24]
 8009d5c:	693a      	ldr	r2, [r7, #16]
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	4413      	add	r3, r2
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	2b2f      	cmp	r3, #47	; 0x2f
 8009d66:	d0f6      	beq.n	8009d56 <create_name+0x42>
 8009d68:	693a      	ldr	r2, [r7, #16]
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	2b5c      	cmp	r3, #92	; 0x5c
 8009d72:	d0f0      	beq.n	8009d56 <create_name+0x42>
			break;
 8009d74:	e02a      	b.n	8009dcc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	2bfe      	cmp	r3, #254	; 0xfe
 8009d7a:	d901      	bls.n	8009d80 <create_name+0x6c>
 8009d7c:	2306      	movs	r3, #6
 8009d7e:	e177      	b.n	800a070 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009d80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009d86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d88:	2101      	movs	r1, #1
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7fe fab0 	bl	80082f0 <ff_convert>
 8009d90:	4603      	mov	r3, r0
 8009d92:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009d94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d101      	bne.n	8009d9e <create_name+0x8a>
 8009d9a:	2306      	movs	r3, #6
 8009d9c:	e168      	b.n	800a070 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009d9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009da0:	2b7f      	cmp	r3, #127	; 0x7f
 8009da2:	d809      	bhi.n	8009db8 <create_name+0xa4>
 8009da4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009da6:	4619      	mov	r1, r3
 8009da8:	48b3      	ldr	r0, [pc, #716]	; (800a078 <create_name+0x364>)
 8009daa:	f7fe fce9 	bl	8008780 <chk_chr>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <create_name+0xa4>
 8009db4:	2306      	movs	r3, #6
 8009db6:	e15b      	b.n	800a070 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	1c5a      	adds	r2, r3, #1
 8009dbc:	617a      	str	r2, [r7, #20]
 8009dbe:	005b      	lsls	r3, r3, #1
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009dc6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009dc8:	e7b4      	b.n	8009d34 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009dca:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009dcc:	693a      	ldr	r2, [r7, #16]
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	441a      	add	r2, r3
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009dd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dd8:	2b1f      	cmp	r3, #31
 8009dda:	d801      	bhi.n	8009de0 <create_name+0xcc>
 8009ddc:	2304      	movs	r3, #4
 8009dde:	e000      	b.n	8009de2 <create_name+0xce>
 8009de0:	2300      	movs	r3, #0
 8009de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009de6:	e011      	b.n	8009e0c <create_name+0xf8>
		w = lfn[di - 1];
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009dee:	3b01      	subs	r3, #1
 8009df0:	005b      	lsls	r3, r3, #1
 8009df2:	68fa      	ldr	r2, [r7, #12]
 8009df4:	4413      	add	r3, r2
 8009df6:	881b      	ldrh	r3, [r3, #0]
 8009df8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009dfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dfc:	2b20      	cmp	r3, #32
 8009dfe:	d002      	beq.n	8009e06 <create_name+0xf2>
 8009e00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e02:	2b2e      	cmp	r3, #46	; 0x2e
 8009e04:	d106      	bne.n	8009e14 <create_name+0x100>
		di--;
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1ea      	bne.n	8009de8 <create_name+0xd4>
 8009e12:	e000      	b.n	8009e16 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009e14:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	005b      	lsls	r3, r3, #1
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	2200      	movs	r2, #0
 8009e20:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d101      	bne.n	8009e2c <create_name+0x118>
 8009e28:	2306      	movs	r3, #6
 8009e2a:	e121      	b.n	800a070 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	3324      	adds	r3, #36	; 0x24
 8009e30:	220b      	movs	r2, #11
 8009e32:	2120      	movs	r1, #32
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7fe fc62 	bl	80086fe <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	61bb      	str	r3, [r7, #24]
 8009e3e:	e002      	b.n	8009e46 <create_name+0x132>
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	3301      	adds	r3, #1
 8009e44:	61bb      	str	r3, [r7, #24]
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	005b      	lsls	r3, r3, #1
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	881b      	ldrh	r3, [r3, #0]
 8009e50:	2b20      	cmp	r3, #32
 8009e52:	d0f5      	beq.n	8009e40 <create_name+0x12c>
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	005b      	lsls	r3, r3, #1
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	881b      	ldrh	r3, [r3, #0]
 8009e5e:	2b2e      	cmp	r3, #46	; 0x2e
 8009e60:	d0ee      	beq.n	8009e40 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d009      	beq.n	8009e7c <create_name+0x168>
 8009e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e6c:	f043 0303 	orr.w	r3, r3, #3
 8009e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009e74:	e002      	b.n	8009e7c <create_name+0x168>
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	617b      	str	r3, [r7, #20]
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d009      	beq.n	8009e96 <create_name+0x182>
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	005b      	lsls	r3, r3, #1
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	4413      	add	r3, r2
 8009e90:	881b      	ldrh	r3, [r3, #0]
 8009e92:	2b2e      	cmp	r3, #46	; 0x2e
 8009e94:	d1ef      	bne.n	8009e76 <create_name+0x162>

	i = b = 0; ni = 8;
 8009e96:	2300      	movs	r3, #0
 8009e98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	623b      	str	r3, [r7, #32]
 8009ea0:	2308      	movs	r3, #8
 8009ea2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	1c5a      	adds	r2, r3, #1
 8009ea8:	61ba      	str	r2, [r7, #24]
 8009eaa:	005b      	lsls	r3, r3, #1
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	4413      	add	r3, r2
 8009eb0:	881b      	ldrh	r3, [r3, #0]
 8009eb2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009eb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f000 8090 	beq.w	8009fdc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009ebc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ebe:	2b20      	cmp	r3, #32
 8009ec0:	d006      	beq.n	8009ed0 <create_name+0x1bc>
 8009ec2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ec4:	2b2e      	cmp	r3, #46	; 0x2e
 8009ec6:	d10a      	bne.n	8009ede <create_name+0x1ca>
 8009ec8:	69ba      	ldr	r2, [r7, #24]
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d006      	beq.n	8009ede <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ed4:	f043 0303 	orr.w	r3, r3, #3
 8009ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009edc:	e07d      	b.n	8009fda <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009ede:	6a3a      	ldr	r2, [r7, #32]
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d203      	bcs.n	8009eee <create_name+0x1da>
 8009ee6:	69ba      	ldr	r2, [r7, #24]
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d123      	bne.n	8009f36 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	2b0b      	cmp	r3, #11
 8009ef2:	d106      	bne.n	8009f02 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ef8:	f043 0303 	orr.w	r3, r3, #3
 8009efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f00:	e06f      	b.n	8009fe2 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009f02:	69ba      	ldr	r2, [r7, #24]
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d005      	beq.n	8009f16 <create_name+0x202>
 8009f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f0e:	f043 0303 	orr.w	r3, r3, #3
 8009f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009f16:	69ba      	ldr	r2, [r7, #24]
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d860      	bhi.n	8009fe0 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	61bb      	str	r3, [r7, #24]
 8009f22:	2308      	movs	r3, #8
 8009f24:	623b      	str	r3, [r7, #32]
 8009f26:	230b      	movs	r3, #11
 8009f28:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009f2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009f34:	e051      	b.n	8009fda <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009f36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f38:	2b7f      	cmp	r3, #127	; 0x7f
 8009f3a:	d914      	bls.n	8009f66 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009f3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f3e:	2100      	movs	r1, #0
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7fe f9d5 	bl	80082f0 <ff_convert>
 8009f46:	4603      	mov	r3, r0
 8009f48:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009f4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d004      	beq.n	8009f5a <create_name+0x246>
 8009f50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f52:	3b80      	subs	r3, #128	; 0x80
 8009f54:	4a49      	ldr	r2, [pc, #292]	; (800a07c <create_name+0x368>)
 8009f56:	5cd3      	ldrb	r3, [r2, r3]
 8009f58:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f5e:	f043 0302 	orr.w	r3, r3, #2
 8009f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009f66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d007      	beq.n	8009f7c <create_name+0x268>
 8009f6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f6e:	4619      	mov	r1, r3
 8009f70:	4843      	ldr	r0, [pc, #268]	; (800a080 <create_name+0x36c>)
 8009f72:	f7fe fc05 	bl	8008780 <chk_chr>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d008      	beq.n	8009f8e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009f7c:	235f      	movs	r3, #95	; 0x5f
 8009f7e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f84:	f043 0303 	orr.w	r3, r3, #3
 8009f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f8c:	e01b      	b.n	8009fc6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009f8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f90:	2b40      	cmp	r3, #64	; 0x40
 8009f92:	d909      	bls.n	8009fa8 <create_name+0x294>
 8009f94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f96:	2b5a      	cmp	r3, #90	; 0x5a
 8009f98:	d806      	bhi.n	8009fa8 <create_name+0x294>
					b |= 2;
 8009f9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f9e:	f043 0302 	orr.w	r3, r3, #2
 8009fa2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009fa6:	e00e      	b.n	8009fc6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009fa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009faa:	2b60      	cmp	r3, #96	; 0x60
 8009fac:	d90b      	bls.n	8009fc6 <create_name+0x2b2>
 8009fae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fb0:	2b7a      	cmp	r3, #122	; 0x7a
 8009fb2:	d808      	bhi.n	8009fc6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009fb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fb8:	f043 0301 	orr.w	r3, r3, #1
 8009fbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009fc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fc2:	3b20      	subs	r3, #32
 8009fc4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009fc6:	6a3b      	ldr	r3, [r7, #32]
 8009fc8:	1c5a      	adds	r2, r3, #1
 8009fca:	623a      	str	r2, [r7, #32]
 8009fcc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009fce:	b2d1      	uxtb	r1, r2
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	460a      	mov	r2, r1
 8009fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009fda:	e763      	b.n	8009ea4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009fdc:	bf00      	nop
 8009fde:	e000      	b.n	8009fe2 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8009fe0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009fe8:	2be5      	cmp	r3, #229	; 0xe5
 8009fea:	d103      	bne.n	8009ff4 <create_name+0x2e0>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2205      	movs	r2, #5
 8009ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	2b08      	cmp	r3, #8
 8009ff8:	d104      	bne.n	800a004 <create_name+0x2f0>
 8009ffa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a004:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a008:	f003 030c 	and.w	r3, r3, #12
 800a00c:	2b0c      	cmp	r3, #12
 800a00e:	d005      	beq.n	800a01c <create_name+0x308>
 800a010:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a014:	f003 0303 	and.w	r3, r3, #3
 800a018:	2b03      	cmp	r3, #3
 800a01a:	d105      	bne.n	800a028 <create_name+0x314>
 800a01c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a020:	f043 0302 	orr.w	r3, r3, #2
 800a024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a02c:	f003 0302 	and.w	r3, r3, #2
 800a030:	2b00      	cmp	r3, #0
 800a032:	d117      	bne.n	800a064 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a034:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a038:	f003 0303 	and.w	r3, r3, #3
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d105      	bne.n	800a04c <create_name+0x338>
 800a040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a044:	f043 0310 	orr.w	r3, r3, #16
 800a048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a04c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a050:	f003 030c 	and.w	r3, r3, #12
 800a054:	2b04      	cmp	r3, #4
 800a056:	d105      	bne.n	800a064 <create_name+0x350>
 800a058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a05c:	f043 0308 	orr.w	r3, r3, #8
 800a060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a06a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800a06e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a070:	4618      	mov	r0, r3
 800a072:	3728      	adds	r7, #40	; 0x28
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	0800c0e4 	.word	0x0800c0e4
 800a07c:	0800c510 	.word	0x0800c510
 800a080:	0800c0f0 	.word	0x0800c0f0

0800a084 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a098:	e002      	b.n	800a0a0 <follow_path+0x1c>
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	3301      	adds	r3, #1
 800a09e:	603b      	str	r3, [r7, #0]
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	2b2f      	cmp	r3, #47	; 0x2f
 800a0a6:	d0f8      	beq.n	800a09a <follow_path+0x16>
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	2b5c      	cmp	r3, #92	; 0x5c
 800a0ae:	d0f4      	beq.n	800a09a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	2b1f      	cmp	r3, #31
 800a0bc:	d80a      	bhi.n	800a0d4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2280      	movs	r2, #128	; 0x80
 800a0c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f7ff f8fe 	bl	80092ca <dir_sdi>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	75fb      	strb	r3, [r7, #23]
 800a0d2:	e048      	b.n	800a166 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a0d4:	463b      	mov	r3, r7
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f7ff fe1b 	bl	8009d14 <create_name>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a0e2:	7dfb      	ldrb	r3, [r7, #23]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d139      	bne.n	800a15c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7ff fc5b 	bl	80099a4 <dir_find>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a0f8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a0fa:	7dfb      	ldrb	r3, [r7, #23]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00a      	beq.n	800a116 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a100:	7dfb      	ldrb	r3, [r7, #23]
 800a102:	2b04      	cmp	r3, #4
 800a104:	d12c      	bne.n	800a160 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a106:	7afb      	ldrb	r3, [r7, #11]
 800a108:	f003 0304 	and.w	r3, r3, #4
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d127      	bne.n	800a160 <follow_path+0xdc>
 800a110:	2305      	movs	r3, #5
 800a112:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a114:	e024      	b.n	800a160 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a116:	7afb      	ldrb	r3, [r7, #11]
 800a118:	f003 0304 	and.w	r3, r3, #4
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d121      	bne.n	800a164 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	799b      	ldrb	r3, [r3, #6]
 800a124:	f003 0310 	and.w	r3, r3, #16
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d102      	bne.n	800a132 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a12c:	2305      	movs	r3, #5
 800a12e:	75fb      	strb	r3, [r7, #23]
 800a130:	e019      	b.n	800a166 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	695b      	ldr	r3, [r3, #20]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	8992      	ldrh	r2, [r2, #12]
 800a140:	fbb3 f0f2 	udiv	r0, r3, r2
 800a144:	fb02 f200 	mul.w	r2, r2, r0
 800a148:	1a9b      	subs	r3, r3, r2
 800a14a:	440b      	add	r3, r1
 800a14c:	4619      	mov	r1, r3
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f7ff fa61 	bl	8009616 <ld_clust>
 800a154:	4602      	mov	r2, r0
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a15a:	e7bb      	b.n	800a0d4 <follow_path+0x50>
			if (res != FR_OK) break;
 800a15c:	bf00      	nop
 800a15e:	e002      	b.n	800a166 <follow_path+0xe2>
				break;
 800a160:	bf00      	nop
 800a162:	e000      	b.n	800a166 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a164:	bf00      	nop
			}
		}
	}

	return res;
 800a166:	7dfb      	ldrb	r3, [r7, #23]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3718      	adds	r7, #24
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a170:	b480      	push	{r7}
 800a172:	b087      	sub	sp, #28
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a178:	f04f 33ff 	mov.w	r3, #4294967295
 800a17c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d031      	beq.n	800a1ea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	617b      	str	r3, [r7, #20]
 800a18c:	e002      	b.n	800a194 <get_ldnumber+0x24>
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	3301      	adds	r3, #1
 800a192:	617b      	str	r3, [r7, #20]
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	2b1f      	cmp	r3, #31
 800a19a:	d903      	bls.n	800a1a4 <get_ldnumber+0x34>
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	2b3a      	cmp	r3, #58	; 0x3a
 800a1a2:	d1f4      	bne.n	800a18e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	2b3a      	cmp	r3, #58	; 0x3a
 800a1aa:	d11c      	bne.n	800a1e6 <get_ldnumber+0x76>
			tp = *path;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	1c5a      	adds	r2, r3, #1
 800a1b6:	60fa      	str	r2, [r7, #12]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	3b30      	subs	r3, #48	; 0x30
 800a1bc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2b09      	cmp	r3, #9
 800a1c2:	d80e      	bhi.n	800a1e2 <get_ldnumber+0x72>
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d10a      	bne.n	800a1e2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d107      	bne.n	800a1e2 <get_ldnumber+0x72>
					vol = (int)i;
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	617b      	str	r3, [r7, #20]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	697a      	ldr	r2, [r7, #20]
 800a1e0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	e002      	b.n	800a1ec <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a1ea:	693b      	ldr	r3, [r7, #16]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	371c      	adds	r7, #28
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	70da      	strb	r2, [r3, #3]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f04f 32ff 	mov.w	r2, #4294967295
 800a20e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a210:	6839      	ldr	r1, [r7, #0]
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f7fe fc80 	bl	8008b18 <move_window>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d001      	beq.n	800a222 <check_fs+0x2a>
 800a21e:	2304      	movs	r3, #4
 800a220:	e038      	b.n	800a294 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	3338      	adds	r3, #56	; 0x38
 800a226:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7fe f9c4 	bl	80085b8 <ld_word>
 800a230:	4603      	mov	r3, r0
 800a232:	461a      	mov	r2, r3
 800a234:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a238:	429a      	cmp	r2, r3
 800a23a:	d001      	beq.n	800a240 <check_fs+0x48>
 800a23c:	2303      	movs	r3, #3
 800a23e:	e029      	b.n	800a294 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a246:	2be9      	cmp	r3, #233	; 0xe9
 800a248:	d009      	beq.n	800a25e <check_fs+0x66>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a250:	2beb      	cmp	r3, #235	; 0xeb
 800a252:	d11e      	bne.n	800a292 <check_fs+0x9a>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a25a:	2b90      	cmp	r3, #144	; 0x90
 800a25c:	d119      	bne.n	800a292 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	3338      	adds	r3, #56	; 0x38
 800a262:	3336      	adds	r3, #54	; 0x36
 800a264:	4618      	mov	r0, r3
 800a266:	f7fe f9bf 	bl	80085e8 <ld_dword>
 800a26a:	4603      	mov	r3, r0
 800a26c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a270:	4a0a      	ldr	r2, [pc, #40]	; (800a29c <check_fs+0xa4>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d101      	bne.n	800a27a <check_fs+0x82>
 800a276:	2300      	movs	r3, #0
 800a278:	e00c      	b.n	800a294 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	3338      	adds	r3, #56	; 0x38
 800a27e:	3352      	adds	r3, #82	; 0x52
 800a280:	4618      	mov	r0, r3
 800a282:	f7fe f9b1 	bl	80085e8 <ld_dword>
 800a286:	4602      	mov	r2, r0
 800a288:	4b05      	ldr	r3, [pc, #20]	; (800a2a0 <check_fs+0xa8>)
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d101      	bne.n	800a292 <check_fs+0x9a>
 800a28e:	2300      	movs	r3, #0
 800a290:	e000      	b.n	800a294 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a292:	2302      	movs	r3, #2
}
 800a294:	4618      	mov	r0, r3
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	00544146 	.word	0x00544146
 800a2a0:	33544146 	.word	0x33544146

0800a2a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b096      	sub	sp, #88	; 0x58
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f7ff ff59 	bl	800a170 <get_ldnumber>
 800a2be:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	da01      	bge.n	800a2ca <find_volume+0x26>
 800a2c6:	230b      	movs	r3, #11
 800a2c8:	e268      	b.n	800a79c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a2ca:	4ab0      	ldr	r2, [pc, #704]	; (800a58c <find_volume+0x2e8>)
 800a2cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2d2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d101      	bne.n	800a2de <find_volume+0x3a>
 800a2da:	230c      	movs	r3, #12
 800a2dc:	e25e      	b.n	800a79c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a2e4:	79fb      	ldrb	r3, [r7, #7]
 800a2e6:	f023 0301 	bic.w	r3, r3, #1
 800a2ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d01a      	beq.n	800a32a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f6:	785b      	ldrb	r3, [r3, #1]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7fe f8bf 	bl	800847c <disk_status>
 800a2fe:	4603      	mov	r3, r0
 800a300:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a304:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a308:	f003 0301 	and.w	r3, r3, #1
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d10c      	bne.n	800a32a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a310:	79fb      	ldrb	r3, [r7, #7]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d007      	beq.n	800a326 <find_volume+0x82>
 800a316:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a31a:	f003 0304 	and.w	r3, r3, #4
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d001      	beq.n	800a326 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a322:	230a      	movs	r3, #10
 800a324:	e23a      	b.n	800a79c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800a326:	2300      	movs	r3, #0
 800a328:	e238      	b.n	800a79c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32c:	2200      	movs	r2, #0
 800a32e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a332:	b2da      	uxtb	r2, r3
 800a334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a336:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33a:	785b      	ldrb	r3, [r3, #1]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7fe f8b7 	bl	80084b0 <disk_initialize>
 800a342:	4603      	mov	r3, r0
 800a344:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a348:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a34c:	f003 0301 	and.w	r3, r3, #1
 800a350:	2b00      	cmp	r3, #0
 800a352:	d001      	beq.n	800a358 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a354:	2303      	movs	r3, #3
 800a356:	e221      	b.n	800a79c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a358:	79fb      	ldrb	r3, [r7, #7]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d007      	beq.n	800a36e <find_volume+0xca>
 800a35e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a362:	f003 0304 	and.w	r3, r3, #4
 800a366:	2b00      	cmp	r3, #0
 800a368:	d001      	beq.n	800a36e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a36a:	230a      	movs	r3, #10
 800a36c:	e216      	b.n	800a79c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a370:	7858      	ldrb	r0, [r3, #1]
 800a372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a374:	330c      	adds	r3, #12
 800a376:	461a      	mov	r2, r3
 800a378:	2102      	movs	r1, #2
 800a37a:	f7fe f8ff 	bl	800857c <disk_ioctl>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d001      	beq.n	800a388 <find_volume+0xe4>
 800a384:	2301      	movs	r3, #1
 800a386:	e209      	b.n	800a79c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38a:	899b      	ldrh	r3, [r3, #12]
 800a38c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a390:	d80d      	bhi.n	800a3ae <find_volume+0x10a>
 800a392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a394:	899b      	ldrh	r3, [r3, #12]
 800a396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a39a:	d308      	bcc.n	800a3ae <find_volume+0x10a>
 800a39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39e:	899b      	ldrh	r3, [r3, #12]
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a4:	899b      	ldrh	r3, [r3, #12]
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d001      	beq.n	800a3b2 <find_volume+0x10e>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e1f4      	b.n	800a79c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a3b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a3ba:	f7ff ff1d 	bl	800a1f8 <check_fs>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a3c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d14b      	bne.n	800a464 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	643b      	str	r3, [r7, #64]	; 0x40
 800a3d0:	e01f      	b.n	800a412 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a3d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3da:	011b      	lsls	r3, r3, #4
 800a3dc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a3e0:	4413      	add	r3, r2
 800a3e2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e6:	3304      	adds	r3, #4
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d006      	beq.n	800a3fc <find_volume+0x158>
 800a3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f0:	3308      	adds	r3, #8
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fe f8f8 	bl	80085e8 <ld_dword>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	e000      	b.n	800a3fe <find_volume+0x15a>
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a406:	440b      	add	r3, r1
 800a408:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a40c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a40e:	3301      	adds	r3, #1
 800a410:	643b      	str	r3, [r7, #64]	; 0x40
 800a412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a414:	2b03      	cmp	r3, #3
 800a416:	d9dc      	bls.n	800a3d2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a418:	2300      	movs	r3, #0
 800a41a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a41c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d002      	beq.n	800a428 <find_volume+0x184>
 800a422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a424:	3b01      	subs	r3, #1
 800a426:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a430:	4413      	add	r3, r2
 800a432:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a436:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d005      	beq.n	800a44a <find_volume+0x1a6>
 800a43e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a440:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a442:	f7ff fed9 	bl	800a1f8 <check_fs>
 800a446:	4603      	mov	r3, r0
 800a448:	e000      	b.n	800a44c <find_volume+0x1a8>
 800a44a:	2303      	movs	r3, #3
 800a44c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a450:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a454:	2b01      	cmp	r3, #1
 800a456:	d905      	bls.n	800a464 <find_volume+0x1c0>
 800a458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a45a:	3301      	adds	r3, #1
 800a45c:	643b      	str	r3, [r7, #64]	; 0x40
 800a45e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a460:	2b03      	cmp	r3, #3
 800a462:	d9e1      	bls.n	800a428 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a464:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a468:	2b04      	cmp	r3, #4
 800a46a:	d101      	bne.n	800a470 <find_volume+0x1cc>
 800a46c:	2301      	movs	r3, #1
 800a46e:	e195      	b.n	800a79c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a470:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a474:	2b01      	cmp	r3, #1
 800a476:	d901      	bls.n	800a47c <find_volume+0x1d8>
 800a478:	230d      	movs	r3, #13
 800a47a:	e18f      	b.n	800a79c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47e:	3338      	adds	r3, #56	; 0x38
 800a480:	330b      	adds	r3, #11
 800a482:	4618      	mov	r0, r3
 800a484:	f7fe f898 	bl	80085b8 <ld_word>
 800a488:	4603      	mov	r3, r0
 800a48a:	461a      	mov	r2, r3
 800a48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48e:	899b      	ldrh	r3, [r3, #12]
 800a490:	429a      	cmp	r2, r3
 800a492:	d001      	beq.n	800a498 <find_volume+0x1f4>
 800a494:	230d      	movs	r3, #13
 800a496:	e181      	b.n	800a79c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49a:	3338      	adds	r3, #56	; 0x38
 800a49c:	3316      	adds	r3, #22
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fe f88a 	bl	80085b8 <ld_word>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a4a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d106      	bne.n	800a4bc <find_volume+0x218>
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b0:	3338      	adds	r3, #56	; 0x38
 800a4b2:	3324      	adds	r3, #36	; 0x24
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7fe f897 	bl	80085e8 <ld_dword>
 800a4ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4c0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ce:	789b      	ldrb	r3, [r3, #2]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d005      	beq.n	800a4e0 <find_volume+0x23c>
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d6:	789b      	ldrb	r3, [r3, #2]
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d001      	beq.n	800a4e0 <find_volume+0x23c>
 800a4dc:	230d      	movs	r3, #13
 800a4de:	e15d      	b.n	800a79c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e2:	789b      	ldrb	r3, [r3, #2]
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4e8:	fb02 f303 	mul.w	r3, r2, r3
 800a4ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fc:	895b      	ldrh	r3, [r3, #10]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d008      	beq.n	800a514 <find_volume+0x270>
 800a502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a504:	895b      	ldrh	r3, [r3, #10]
 800a506:	461a      	mov	r2, r3
 800a508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50a:	895b      	ldrh	r3, [r3, #10]
 800a50c:	3b01      	subs	r3, #1
 800a50e:	4013      	ands	r3, r2
 800a510:	2b00      	cmp	r3, #0
 800a512:	d001      	beq.n	800a518 <find_volume+0x274>
 800a514:	230d      	movs	r3, #13
 800a516:	e141      	b.n	800a79c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51a:	3338      	adds	r3, #56	; 0x38
 800a51c:	3311      	adds	r3, #17
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fe f84a 	bl	80085b8 <ld_word>
 800a524:	4603      	mov	r3, r0
 800a526:	461a      	mov	r2, r3
 800a528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52e:	891b      	ldrh	r3, [r3, #8]
 800a530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a532:	8992      	ldrh	r2, [r2, #12]
 800a534:	0952      	lsrs	r2, r2, #5
 800a536:	b292      	uxth	r2, r2
 800a538:	fbb3 f1f2 	udiv	r1, r3, r2
 800a53c:	fb02 f201 	mul.w	r2, r2, r1
 800a540:	1a9b      	subs	r3, r3, r2
 800a542:	b29b      	uxth	r3, r3
 800a544:	2b00      	cmp	r3, #0
 800a546:	d001      	beq.n	800a54c <find_volume+0x2a8>
 800a548:	230d      	movs	r3, #13
 800a54a:	e127      	b.n	800a79c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54e:	3338      	adds	r3, #56	; 0x38
 800a550:	3313      	adds	r3, #19
 800a552:	4618      	mov	r0, r3
 800a554:	f7fe f830 	bl	80085b8 <ld_word>
 800a558:	4603      	mov	r3, r0
 800a55a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a55c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d106      	bne.n	800a570 <find_volume+0x2cc>
 800a562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a564:	3338      	adds	r3, #56	; 0x38
 800a566:	3320      	adds	r3, #32
 800a568:	4618      	mov	r0, r3
 800a56a:	f7fe f83d 	bl	80085e8 <ld_dword>
 800a56e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a572:	3338      	adds	r3, #56	; 0x38
 800a574:	330e      	adds	r3, #14
 800a576:	4618      	mov	r0, r3
 800a578:	f7fe f81e 	bl	80085b8 <ld_word>
 800a57c:	4603      	mov	r3, r0
 800a57e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a580:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a582:	2b00      	cmp	r3, #0
 800a584:	d104      	bne.n	800a590 <find_volume+0x2ec>
 800a586:	230d      	movs	r3, #13
 800a588:	e108      	b.n	800a79c <find_volume+0x4f8>
 800a58a:	bf00      	nop
 800a58c:	200000ec 	.word	0x200000ec

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a590:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a594:	4413      	add	r3, r2
 800a596:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a598:	8911      	ldrh	r1, [r2, #8]
 800a59a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a59c:	8992      	ldrh	r2, [r2, #12]
 800a59e:	0952      	lsrs	r2, r2, #5
 800a5a0:	b292      	uxth	r2, r2
 800a5a2:	fbb1 f2f2 	udiv	r2, r1, r2
 800a5a6:	b292      	uxth	r2, r2
 800a5a8:	4413      	add	r3, r2
 800a5aa:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a5ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d201      	bcs.n	800a5b8 <find_volume+0x314>
 800a5b4:	230d      	movs	r3, #13
 800a5b6:	e0f1      	b.n	800a79c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a5b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5bc:	1ad3      	subs	r3, r2, r3
 800a5be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5c0:	8952      	ldrh	r2, [r2, #10]
 800a5c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5c6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d101      	bne.n	800a5d2 <find_volume+0x32e>
 800a5ce:	230d      	movs	r3, #13
 800a5d0:	e0e4      	b.n	800a79c <find_volume+0x4f8>
		fmt = FS_FAT32;
 800a5d2:	2303      	movs	r3, #3
 800a5d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5da:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d802      	bhi.n	800a5e8 <find_volume+0x344>
 800a5e2:	2302      	movs	r3, #2
 800a5e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ea:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d802      	bhi.n	800a5f8 <find_volume+0x354>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fa:	1c9a      	adds	r2, r3, #2
 800a5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fe:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a602:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a604:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a606:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a60a:	441a      	add	r2, r3
 800a60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a610:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a614:	441a      	add	r2, r3
 800a616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a618:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a61a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a61e:	2b03      	cmp	r3, #3
 800a620:	d11e      	bne.n	800a660 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a624:	3338      	adds	r3, #56	; 0x38
 800a626:	332a      	adds	r3, #42	; 0x2a
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fd ffc5 	bl	80085b8 <ld_word>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d001      	beq.n	800a638 <find_volume+0x394>
 800a634:	230d      	movs	r3, #13
 800a636:	e0b1      	b.n	800a79c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63a:	891b      	ldrh	r3, [r3, #8]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d001      	beq.n	800a644 <find_volume+0x3a0>
 800a640:	230d      	movs	r3, #13
 800a642:	e0ab      	b.n	800a79c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a646:	3338      	adds	r3, #56	; 0x38
 800a648:	332c      	adds	r3, #44	; 0x2c
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fd ffcc 	bl	80085e8 <ld_dword>
 800a650:	4602      	mov	r2, r0
 800a652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a654:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a658:	69db      	ldr	r3, [r3, #28]
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	647b      	str	r3, [r7, #68]	; 0x44
 800a65e:	e01f      	b.n	800a6a0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a662:	891b      	ldrh	r3, [r3, #8]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d101      	bne.n	800a66c <find_volume+0x3c8>
 800a668:	230d      	movs	r3, #13
 800a66a:	e097      	b.n	800a79c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a672:	441a      	add	r2, r3
 800a674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a676:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a678:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d103      	bne.n	800a688 <find_volume+0x3e4>
 800a680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a682:	69db      	ldr	r3, [r3, #28]
 800a684:	005b      	lsls	r3, r3, #1
 800a686:	e00a      	b.n	800a69e <find_volume+0x3fa>
 800a688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68a:	69da      	ldr	r2, [r3, #28]
 800a68c:	4613      	mov	r3, r2
 800a68e:	005b      	lsls	r3, r3, #1
 800a690:	4413      	add	r3, r2
 800a692:	085a      	lsrs	r2, r3, #1
 800a694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a696:	69db      	ldr	r3, [r3, #28]
 800a698:	f003 0301 	and.w	r3, r3, #1
 800a69c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a69e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a2:	6a1a      	ldr	r2, [r3, #32]
 800a6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a6:	899b      	ldrh	r3, [r3, #12]
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6ac:	440b      	add	r3, r1
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a6b2:	8989      	ldrh	r1, [r1, #12]
 800a6b4:	fbb3 f3f1 	udiv	r3, r3, r1
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d201      	bcs.n	800a6c0 <find_volume+0x41c>
 800a6bc:	230d      	movs	r3, #13
 800a6be:	e06d      	b.n	800a79c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c6:	619a      	str	r2, [r3, #24]
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ca:	699a      	ldr	r2, [r3, #24]
 800a6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ce:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d2:	2280      	movs	r2, #128	; 0x80
 800a6d4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a6d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6da:	2b03      	cmp	r3, #3
 800a6dc:	d149      	bne.n	800a772 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e0:	3338      	adds	r3, #56	; 0x38
 800a6e2:	3330      	adds	r3, #48	; 0x30
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7fd ff67 	bl	80085b8 <ld_word>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d140      	bne.n	800a772 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a6f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6f8:	f7fe fa0e 	bl	8008b18 <move_window>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d137      	bne.n	800a772 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800a702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a704:	2200      	movs	r2, #0
 800a706:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70a:	3338      	adds	r3, #56	; 0x38
 800a70c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a710:	4618      	mov	r0, r3
 800a712:	f7fd ff51 	bl	80085b8 <ld_word>
 800a716:	4603      	mov	r3, r0
 800a718:	461a      	mov	r2, r3
 800a71a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a71e:	429a      	cmp	r2, r3
 800a720:	d127      	bne.n	800a772 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a724:	3338      	adds	r3, #56	; 0x38
 800a726:	4618      	mov	r0, r3
 800a728:	f7fd ff5e 	bl	80085e8 <ld_dword>
 800a72c:	4602      	mov	r2, r0
 800a72e:	4b1d      	ldr	r3, [pc, #116]	; (800a7a4 <find_volume+0x500>)
 800a730:	429a      	cmp	r2, r3
 800a732:	d11e      	bne.n	800a772 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a736:	3338      	adds	r3, #56	; 0x38
 800a738:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fd ff53 	bl	80085e8 <ld_dword>
 800a742:	4602      	mov	r2, r0
 800a744:	4b18      	ldr	r3, [pc, #96]	; (800a7a8 <find_volume+0x504>)
 800a746:	429a      	cmp	r2, r3
 800a748:	d113      	bne.n	800a772 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a74c:	3338      	adds	r3, #56	; 0x38
 800a74e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a752:	4618      	mov	r0, r3
 800a754:	f7fd ff48 	bl	80085e8 <ld_dword>
 800a758:	4602      	mov	r2, r0
 800a75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75c:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a760:	3338      	adds	r3, #56	; 0x38
 800a762:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a766:	4618      	mov	r0, r3
 800a768:	f7fd ff3e 	bl	80085e8 <ld_dword>
 800a76c:	4602      	mov	r2, r0
 800a76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a770:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a774:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a778:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a77a:	4b0c      	ldr	r3, [pc, #48]	; (800a7ac <find_volume+0x508>)
 800a77c:	881b      	ldrh	r3, [r3, #0]
 800a77e:	3301      	adds	r3, #1
 800a780:	b29a      	uxth	r2, r3
 800a782:	4b0a      	ldr	r3, [pc, #40]	; (800a7ac <find_volume+0x508>)
 800a784:	801a      	strh	r2, [r3, #0]
 800a786:	4b09      	ldr	r3, [pc, #36]	; (800a7ac <find_volume+0x508>)
 800a788:	881a      	ldrh	r2, [r3, #0]
 800a78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a790:	4a07      	ldr	r2, [pc, #28]	; (800a7b0 <find_volume+0x50c>)
 800a792:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a794:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a796:	f7fe f957 	bl	8008a48 <clear_lock>
#endif
	return FR_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3758      	adds	r7, #88	; 0x58
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	41615252 	.word	0x41615252
 800a7a8:	61417272 	.word	0x61417272
 800a7ac:	200000f0 	.word	0x200000f0
 800a7b0:	20000114 	.word	0x20000114

0800a7b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a7be:	2309      	movs	r3, #9
 800a7c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d01c      	beq.n	800a802 <validate+0x4e>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d018      	beq.n	800a802 <validate+0x4e>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d013      	beq.n	800a802 <validate+0x4e>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	889a      	ldrh	r2, [r3, #4]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	88db      	ldrh	r3, [r3, #6]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d10c      	bne.n	800a802 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	785b      	ldrb	r3, [r3, #1]
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fd fe44 	bl	800847c <disk_status>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	f003 0301 	and.w	r3, r3, #1
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d101      	bne.n	800a802 <validate+0x4e>
			res = FR_OK;
 800a7fe:	2300      	movs	r3, #0
 800a800:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a802:	7bfb      	ldrb	r3, [r7, #15]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d102      	bne.n	800a80e <validate+0x5a>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	e000      	b.n	800a810 <validate+0x5c>
 800a80e:	2300      	movs	r3, #0
 800a810:	683a      	ldr	r2, [r7, #0]
 800a812:	6013      	str	r3, [r2, #0]
	return res;
 800a814:	7bfb      	ldrb	r3, [r7, #15]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
	...

0800a820 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b088      	sub	sp, #32
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	4613      	mov	r3, r2
 800a82c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a832:	f107 0310 	add.w	r3, r7, #16
 800a836:	4618      	mov	r0, r3
 800a838:	f7ff fc9a 	bl	800a170 <get_ldnumber>
 800a83c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	2b00      	cmp	r3, #0
 800a842:	da01      	bge.n	800a848 <f_mount+0x28>
 800a844:	230b      	movs	r3, #11
 800a846:	e02b      	b.n	800a8a0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a848:	4a17      	ldr	r2, [pc, #92]	; (800a8a8 <f_mount+0x88>)
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a850:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d005      	beq.n	800a864 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a858:	69b8      	ldr	r0, [r7, #24]
 800a85a:	f7fe f8f5 	bl	8008a48 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	2200      	movs	r2, #0
 800a862:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d002      	beq.n	800a870 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2200      	movs	r2, #0
 800a86e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	490d      	ldr	r1, [pc, #52]	; (800a8a8 <f_mount+0x88>)
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d002      	beq.n	800a886 <f_mount+0x66>
 800a880:	79fb      	ldrb	r3, [r7, #7]
 800a882:	2b01      	cmp	r3, #1
 800a884:	d001      	beq.n	800a88a <f_mount+0x6a>
 800a886:	2300      	movs	r3, #0
 800a888:	e00a      	b.n	800a8a0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a88a:	f107 010c 	add.w	r1, r7, #12
 800a88e:	f107 0308 	add.w	r3, r7, #8
 800a892:	2200      	movs	r2, #0
 800a894:	4618      	mov	r0, r3
 800a896:	f7ff fd05 	bl	800a2a4 <find_volume>
 800a89a:	4603      	mov	r3, r0
 800a89c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a89e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3720      	adds	r7, #32
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	200000ec 	.word	0x200000ec

0800a8ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b09a      	sub	sp, #104	; 0x68
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <f_open+0x18>
 800a8c0:	2309      	movs	r3, #9
 800a8c2:	e1bb      	b.n	800ac3c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a8c4:	79fb      	ldrb	r3, [r7, #7]
 800a8c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a8cc:	79fa      	ldrb	r2, [r7, #7]
 800a8ce:	f107 0114 	add.w	r1, r7, #20
 800a8d2:	f107 0308 	add.w	r3, r7, #8
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7ff fce4 	bl	800a2a4 <find_volume>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a8e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f040 819f 	bne.w	800ac2a <f_open+0x37e>
		dj.obj.fs = fs;
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a8f0:	68ba      	ldr	r2, [r7, #8]
 800a8f2:	f107 0318 	add.w	r3, r7, #24
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7ff fbc3 	bl	800a084 <follow_path>
 800a8fe:	4603      	mov	r3, r0
 800a900:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a904:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d11a      	bne.n	800a942 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a90c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a910:	b25b      	sxtb	r3, r3
 800a912:	2b00      	cmp	r3, #0
 800a914:	da03      	bge.n	800a91e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a916:	2306      	movs	r3, #6
 800a918:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a91c:	e011      	b.n	800a942 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a91e:	79fb      	ldrb	r3, [r7, #7]
 800a920:	f023 0301 	bic.w	r3, r3, #1
 800a924:	2b00      	cmp	r3, #0
 800a926:	bf14      	ite	ne
 800a928:	2301      	movne	r3, #1
 800a92a:	2300      	moveq	r3, #0
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	461a      	mov	r2, r3
 800a930:	f107 0318 	add.w	r3, r7, #24
 800a934:	4611      	mov	r1, r2
 800a936:	4618      	mov	r0, r3
 800a938:	f7fd ff3e 	bl	80087b8 <chk_lock>
 800a93c:	4603      	mov	r3, r0
 800a93e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a942:	79fb      	ldrb	r3, [r7, #7]
 800a944:	f003 031c 	and.w	r3, r3, #28
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d07f      	beq.n	800aa4c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a94c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a950:	2b00      	cmp	r3, #0
 800a952:	d017      	beq.n	800a984 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a954:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a958:	2b04      	cmp	r3, #4
 800a95a:	d10e      	bne.n	800a97a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a95c:	f7fd ff88 	bl	8008870 <enq_lock>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d006      	beq.n	800a974 <f_open+0xc8>
 800a966:	f107 0318 	add.w	r3, r7, #24
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7ff f8da 	bl	8009b24 <dir_register>
 800a970:	4603      	mov	r3, r0
 800a972:	e000      	b.n	800a976 <f_open+0xca>
 800a974:	2312      	movs	r3, #18
 800a976:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a97a:	79fb      	ldrb	r3, [r7, #7]
 800a97c:	f043 0308 	orr.w	r3, r3, #8
 800a980:	71fb      	strb	r3, [r7, #7]
 800a982:	e010      	b.n	800a9a6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a984:	7fbb      	ldrb	r3, [r7, #30]
 800a986:	f003 0311 	and.w	r3, r3, #17
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d003      	beq.n	800a996 <f_open+0xea>
					res = FR_DENIED;
 800a98e:	2307      	movs	r3, #7
 800a990:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a994:	e007      	b.n	800a9a6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a996:	79fb      	ldrb	r3, [r7, #7]
 800a998:	f003 0304 	and.w	r3, r3, #4
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d002      	beq.n	800a9a6 <f_open+0xfa>
 800a9a0:	2308      	movs	r3, #8
 800a9a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a9a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d168      	bne.n	800aa80 <f_open+0x1d4>
 800a9ae:	79fb      	ldrb	r3, [r7, #7]
 800a9b0:	f003 0308 	and.w	r3, r3, #8
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d063      	beq.n	800aa80 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a9b8:	f7fd fb14 	bl	8007fe4 <get_fattime>
 800a9bc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c0:	330e      	adds	r3, #14
 800a9c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7fd fe4d 	bl	8008664 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9cc:	3316      	adds	r3, #22
 800a9ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7fd fe47 	bl	8008664 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d8:	330b      	adds	r3, #11
 800a9da:	2220      	movs	r2, #32
 800a9dc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9e2:	4611      	mov	r1, r2
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7fe fe16 	bl	8009616 <ld_clust>
 800a9ea:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7fe fe2e 	bl	8009654 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fa:	331c      	adds	r3, #28
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fd fe30 	bl	8008664 <st_dword>
					fs->wflag = 1;
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	2201      	movs	r2, #1
 800aa08:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800aa0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d037      	beq.n	800aa80 <f_open+0x1d4>
						dw = fs->winsect;
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa14:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800aa16:	f107 0318 	add.w	r3, r7, #24
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7fe fb1e 	bl	8009060 <remove_chain>
 800aa24:	4603      	mov	r3, r0
 800aa26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800aa2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d126      	bne.n	800aa80 <f_open+0x1d4>
							res = move_window(fs, dw);
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7fe f86e 	bl	8008b18 <move_window>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa46:	3a01      	subs	r2, #1
 800aa48:	615a      	str	r2, [r3, #20]
 800aa4a:	e019      	b.n	800aa80 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800aa4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d115      	bne.n	800aa80 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800aa54:	7fbb      	ldrb	r3, [r7, #30]
 800aa56:	f003 0310 	and.w	r3, r3, #16
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d003      	beq.n	800aa66 <f_open+0x1ba>
					res = FR_NO_FILE;
 800aa5e:	2304      	movs	r3, #4
 800aa60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800aa64:	e00c      	b.n	800aa80 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800aa66:	79fb      	ldrb	r3, [r7, #7]
 800aa68:	f003 0302 	and.w	r3, r3, #2
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d007      	beq.n	800aa80 <f_open+0x1d4>
 800aa70:	7fbb      	ldrb	r3, [r7, #30]
 800aa72:	f003 0301 	and.w	r3, r3, #1
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d002      	beq.n	800aa80 <f_open+0x1d4>
						res = FR_DENIED;
 800aa7a:	2307      	movs	r3, #7
 800aa7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800aa80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d128      	bne.n	800aada <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800aa88:	79fb      	ldrb	r3, [r7, #7]
 800aa8a:	f003 0308 	and.w	r3, r3, #8
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d003      	beq.n	800aa9a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800aa92:	79fb      	ldrb	r3, [r7, #7]
 800aa94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa98:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800aaa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aaa8:	79fb      	ldrb	r3, [r7, #7]
 800aaaa:	f023 0301 	bic.w	r3, r3, #1
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	bf14      	ite	ne
 800aab2:	2301      	movne	r3, #1
 800aab4:	2300      	moveq	r3, #0
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	461a      	mov	r2, r3
 800aaba:	f107 0318 	add.w	r3, r7, #24
 800aabe:	4611      	mov	r1, r2
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7fd fef7 	bl	80088b4 <inc_lock>
 800aac6:	4602      	mov	r2, r0
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	691b      	ldr	r3, [r3, #16]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d102      	bne.n	800aada <f_open+0x22e>
 800aad4:	2302      	movs	r3, #2
 800aad6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800aada:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f040 80a3 	bne.w	800ac2a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aae8:	4611      	mov	r1, r2
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fe fd93 	bl	8009616 <ld_clust>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aaf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf8:	331c      	adds	r3, #28
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7fd fd74 	bl	80085e8 <ld_dword>
 800ab00:	4602      	mov	r2, r0
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ab0c:	697a      	ldr	r2, [r7, #20]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	88da      	ldrh	r2, [r3, #6]
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	79fa      	ldrb	r2, [r7, #7]
 800ab1e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2200      	movs	r2, #0
 800ab24:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	3330      	adds	r3, #48	; 0x30
 800ab36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7fd fdde 	bl	80086fe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ab42:	79fb      	ldrb	r3, [r7, #7]
 800ab44:	f003 0320 	and.w	r3, r3, #32
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d06e      	beq.n	800ac2a <f_open+0x37e>
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d06a      	beq.n	800ac2a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	68da      	ldr	r2, [r3, #12]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	895b      	ldrh	r3, [r3, #10]
 800ab60:	461a      	mov	r2, r3
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	899b      	ldrh	r3, [r3, #12]
 800ab66:	fb03 f302 	mul.w	r3, r3, r2
 800ab6a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab78:	e016      	b.n	800aba8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fe f887 	bl	8008c92 <get_fat>
 800ab84:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ab86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d802      	bhi.n	800ab92 <f_open+0x2e6>
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ab92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab98:	d102      	bne.n	800aba0 <f_open+0x2f4>
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aba0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aba4:	1ad3      	subs	r3, r2, r3
 800aba6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aba8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800abac:	2b00      	cmp	r3, #0
 800abae:	d103      	bne.n	800abb8 <f_open+0x30c>
 800abb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800abb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d8e0      	bhi.n	800ab7a <f_open+0x2ce>
				}
				fp->clust = clst;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800abbc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800abbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d131      	bne.n	800ac2a <f_open+0x37e>
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	899b      	ldrh	r3, [r3, #12]
 800abca:	461a      	mov	r2, r3
 800abcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abce:	fbb3 f1f2 	udiv	r1, r3, r2
 800abd2:	fb02 f201 	mul.w	r2, r2, r1
 800abd6:	1a9b      	subs	r3, r3, r2
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d026      	beq.n	800ac2a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800abe0:	4618      	mov	r0, r3
 800abe2:	f7fe f837 	bl	8008c54 <clust2sect>
 800abe6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800abe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abea:	2b00      	cmp	r3, #0
 800abec:	d103      	bne.n	800abf6 <f_open+0x34a>
						res = FR_INT_ERR;
 800abee:	2302      	movs	r3, #2
 800abf0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800abf4:	e019      	b.n	800ac2a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	899b      	ldrh	r3, [r3, #12]
 800abfa:	461a      	mov	r2, r3
 800abfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abfe:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac04:	441a      	add	r2, r3
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	7858      	ldrb	r0, [r3, #1]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6a1a      	ldr	r2, [r3, #32]
 800ac18:	2301      	movs	r3, #1
 800ac1a:	f7fd fc6f 	bl	80084fc <disk_read>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d002      	beq.n	800ac2a <f_open+0x37e>
 800ac24:	2301      	movs	r3, #1
 800ac26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ac2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d002      	beq.n	800ac38 <f_open+0x38c>
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ac38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3768      	adds	r7, #104	; 0x68
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b08c      	sub	sp, #48	; 0x30
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	607a      	str	r2, [r7, #4]
 800ac50:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f107 0210 	add.w	r2, r7, #16
 800ac62:	4611      	mov	r1, r2
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7ff fda5 	bl	800a7b4 <validate>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ac70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d107      	bne.n	800ac88 <f_write+0x44>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	7d5b      	ldrb	r3, [r3, #21]
 800ac7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ac80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d002      	beq.n	800ac8e <f_write+0x4a>
 800ac88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac8c:	e16a      	b.n	800af64 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	7d1b      	ldrb	r3, [r3, #20]
 800ac92:	f003 0302 	and.w	r3, r3, #2
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d101      	bne.n	800ac9e <f_write+0x5a>
 800ac9a:	2307      	movs	r3, #7
 800ac9c:	e162      	b.n	800af64 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	699a      	ldr	r2, [r3, #24]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	441a      	add	r2, r3
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	699b      	ldr	r3, [r3, #24]
 800acaa:	429a      	cmp	r2, r3
 800acac:	f080 814c 	bcs.w	800af48 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	699b      	ldr	r3, [r3, #24]
 800acb4:	43db      	mvns	r3, r3
 800acb6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800acb8:	e146      	b.n	800af48 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	699b      	ldr	r3, [r3, #24]
 800acbe:	693a      	ldr	r2, [r7, #16]
 800acc0:	8992      	ldrh	r2, [r2, #12]
 800acc2:	fbb3 f1f2 	udiv	r1, r3, r2
 800acc6:	fb02 f201 	mul.w	r2, r2, r1
 800acca:	1a9b      	subs	r3, r3, r2
 800accc:	2b00      	cmp	r3, #0
 800acce:	f040 80f1 	bne.w	800aeb4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	693a      	ldr	r2, [r7, #16]
 800acd8:	8992      	ldrh	r2, [r2, #12]
 800acda:	fbb3 f3f2 	udiv	r3, r3, r2
 800acde:	693a      	ldr	r2, [r7, #16]
 800ace0:	8952      	ldrh	r2, [r2, #10]
 800ace2:	3a01      	subs	r2, #1
 800ace4:	4013      	ands	r3, r2
 800ace6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d143      	bne.n	800ad76 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	699b      	ldr	r3, [r3, #24]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d10c      	bne.n	800ad10 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800acfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d11a      	bne.n	800ad38 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2100      	movs	r1, #0
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7fe fa0f 	bl	800912a <create_chain>
 800ad0c:	62b8      	str	r0, [r7, #40]	; 0x28
 800ad0e:	e013      	b.n	800ad38 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d007      	beq.n	800ad28 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	699b      	ldr	r3, [r3, #24]
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	68f8      	ldr	r0, [r7, #12]
 800ad20:	f7fe fa9b 	bl	800925a <clmt_clust>
 800ad24:	62b8      	str	r0, [r7, #40]	; 0x28
 800ad26:	e007      	b.n	800ad38 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	69db      	ldr	r3, [r3, #28]
 800ad2e:	4619      	mov	r1, r3
 800ad30:	4610      	mov	r0, r2
 800ad32:	f7fe f9fa 	bl	800912a <create_chain>
 800ad36:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ad38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f000 8109 	beq.w	800af52 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ad40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d104      	bne.n	800ad50 <f_write+0x10c>
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2202      	movs	r2, #2
 800ad4a:	755a      	strb	r2, [r3, #21]
 800ad4c:	2302      	movs	r3, #2
 800ad4e:	e109      	b.n	800af64 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ad50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad56:	d104      	bne.n	800ad62 <f_write+0x11e>
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	755a      	strb	r2, [r3, #21]
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e100      	b.n	800af64 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad66:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d102      	bne.n	800ad76 <f_write+0x132>
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad74:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	7d1b      	ldrb	r3, [r3, #20]
 800ad7a:	b25b      	sxtb	r3, r3
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	da18      	bge.n	800adb2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	7858      	ldrb	r0, [r3, #1]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6a1a      	ldr	r2, [r3, #32]
 800ad8e:	2301      	movs	r3, #1
 800ad90:	f7fd fbd4 	bl	800853c <disk_write>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d004      	beq.n	800ada4 <f_write+0x160>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	755a      	strb	r2, [r3, #21]
 800ada0:	2301      	movs	r3, #1
 800ada2:	e0df      	b.n	800af64 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	7d1b      	ldrb	r3, [r3, #20]
 800ada8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adac:	b2da      	uxtb	r2, r3
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800adb2:	693a      	ldr	r2, [r7, #16]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	69db      	ldr	r3, [r3, #28]
 800adb8:	4619      	mov	r1, r3
 800adba:	4610      	mov	r0, r2
 800adbc:	f7fd ff4a 	bl	8008c54 <clust2sect>
 800adc0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d104      	bne.n	800add2 <f_write+0x18e>
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2202      	movs	r2, #2
 800adcc:	755a      	strb	r2, [r3, #21]
 800adce:	2302      	movs	r3, #2
 800add0:	e0c8      	b.n	800af64 <f_write+0x320>
			sect += csect;
 800add2:	697a      	ldr	r2, [r7, #20]
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	4413      	add	r3, r2
 800add8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	899b      	ldrh	r3, [r3, #12]
 800adde:	461a      	mov	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	fbb3 f3f2 	udiv	r3, r3, r2
 800ade6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ade8:	6a3b      	ldr	r3, [r7, #32]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d043      	beq.n	800ae76 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800adee:	69ba      	ldr	r2, [r7, #24]
 800adf0:	6a3b      	ldr	r3, [r7, #32]
 800adf2:	4413      	add	r3, r2
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	8952      	ldrh	r2, [r2, #10]
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d905      	bls.n	800ae08 <f_write+0x1c4>
					cc = fs->csize - csect;
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	895b      	ldrh	r3, [r3, #10]
 800ae00:	461a      	mov	r2, r3
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	1ad3      	subs	r3, r2, r3
 800ae06:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	7858      	ldrb	r0, [r3, #1]
 800ae0c:	6a3b      	ldr	r3, [r7, #32]
 800ae0e:	697a      	ldr	r2, [r7, #20]
 800ae10:	69f9      	ldr	r1, [r7, #28]
 800ae12:	f7fd fb93 	bl	800853c <disk_write>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d004      	beq.n	800ae26 <f_write+0x1e2>
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	755a      	strb	r2, [r3, #21]
 800ae22:	2301      	movs	r3, #1
 800ae24:	e09e      	b.n	800af64 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6a1a      	ldr	r2, [r3, #32]
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	1ad3      	subs	r3, r2, r3
 800ae2e:	6a3a      	ldr	r2, [r7, #32]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d918      	bls.n	800ae66 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	6a1a      	ldr	r2, [r3, #32]
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	1ad3      	subs	r3, r2, r3
 800ae42:	693a      	ldr	r2, [r7, #16]
 800ae44:	8992      	ldrh	r2, [r2, #12]
 800ae46:	fb02 f303 	mul.w	r3, r2, r3
 800ae4a:	69fa      	ldr	r2, [r7, #28]
 800ae4c:	18d1      	adds	r1, r2, r3
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	899b      	ldrh	r3, [r3, #12]
 800ae52:	461a      	mov	r2, r3
 800ae54:	f7fd fc32 	bl	80086bc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	7d1b      	ldrb	r3, [r3, #20]
 800ae5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae60:	b2da      	uxtb	r2, r3
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	899b      	ldrh	r3, [r3, #12]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	6a3b      	ldr	r3, [r7, #32]
 800ae6e:	fb02 f303 	mul.w	r3, r2, r3
 800ae72:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ae74:	e04b      	b.n	800af0e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	6a1b      	ldr	r3, [r3, #32]
 800ae7a:	697a      	ldr	r2, [r7, #20]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d016      	beq.n	800aeae <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	699a      	ldr	r2, [r3, #24]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d210      	bcs.n	800aeae <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	7858      	ldrb	r0, [r3, #1]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae96:	2301      	movs	r3, #1
 800ae98:	697a      	ldr	r2, [r7, #20]
 800ae9a:	f7fd fb2f 	bl	80084fc <disk_read>
 800ae9e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d004      	beq.n	800aeae <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2201      	movs	r2, #1
 800aea8:	755a      	strb	r2, [r3, #21]
 800aeaa:	2301      	movs	r3, #1
 800aeac:	e05a      	b.n	800af64 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	697a      	ldr	r2, [r7, #20]
 800aeb2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	899b      	ldrh	r3, [r3, #12]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	699b      	ldr	r3, [r3, #24]
 800aebe:	693a      	ldr	r2, [r7, #16]
 800aec0:	8992      	ldrh	r2, [r2, #12]
 800aec2:	fbb3 f1f2 	udiv	r1, r3, r2
 800aec6:	fb02 f201 	mul.w	r2, r2, r1
 800aeca:	1a9b      	subs	r3, r3, r2
 800aecc:	1ac3      	subs	r3, r0, r3
 800aece:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800aed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d901      	bls.n	800aedc <f_write+0x298>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	699b      	ldr	r3, [r3, #24]
 800aee6:	693a      	ldr	r2, [r7, #16]
 800aee8:	8992      	ldrh	r2, [r2, #12]
 800aeea:	fbb3 f0f2 	udiv	r0, r3, r2
 800aeee:	fb02 f200 	mul.w	r2, r2, r0
 800aef2:	1a9b      	subs	r3, r3, r2
 800aef4:	440b      	add	r3, r1
 800aef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aef8:	69f9      	ldr	r1, [r7, #28]
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fd fbde 	bl	80086bc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	7d1b      	ldrb	r3, [r3, #20]
 800af04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af08:	b2da      	uxtb	r2, r3
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800af0e:	69fa      	ldr	r2, [r7, #28]
 800af10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af12:	4413      	add	r3, r2
 800af14:	61fb      	str	r3, [r7, #28]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	699a      	ldr	r2, [r3, #24]
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	441a      	add	r2, r3
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	619a      	str	r2, [r3, #24]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	68da      	ldr	r2, [r3, #12]
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	699b      	ldr	r3, [r3, #24]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	bf38      	it	cc
 800af2e:	461a      	movcc	r2, r3
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	60da      	str	r2, [r3, #12]
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3a:	441a      	add	r2, r3
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	601a      	str	r2, [r3, #0]
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af44:	1ad3      	subs	r3, r2, r3
 800af46:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f47f aeb5 	bne.w	800acba <f_write+0x76>
 800af50:	e000      	b.n	800af54 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800af52:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	7d1b      	ldrb	r3, [r3, #20]
 800af58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af5c:	b2da      	uxtb	r2, r3
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800af62:	2300      	movs	r3, #0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3730      	adds	r7, #48	; 0x30
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b086      	sub	sp, #24
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f107 0208 	add.w	r2, r7, #8
 800af7a:	4611      	mov	r1, r2
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7ff fc19 	bl	800a7b4 <validate>
 800af82:	4603      	mov	r3, r0
 800af84:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af86:	7dfb      	ldrb	r3, [r7, #23]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d168      	bne.n	800b05e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	7d1b      	ldrb	r3, [r3, #20]
 800af90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af94:	2b00      	cmp	r3, #0
 800af96:	d062      	beq.n	800b05e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	7d1b      	ldrb	r3, [r3, #20]
 800af9c:	b25b      	sxtb	r3, r3
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	da15      	bge.n	800afce <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	7858      	ldrb	r0, [r3, #1]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a1a      	ldr	r2, [r3, #32]
 800afb0:	2301      	movs	r3, #1
 800afb2:	f7fd fac3 	bl	800853c <disk_write>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d001      	beq.n	800afc0 <f_sync+0x54>
 800afbc:	2301      	movs	r3, #1
 800afbe:	e04f      	b.n	800b060 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	7d1b      	ldrb	r3, [r3, #20]
 800afc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800afce:	f7fd f809 	bl	8007fe4 <get_fattime>
 800afd2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800afd4:	68ba      	ldr	r2, [r7, #8]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afda:	4619      	mov	r1, r3
 800afdc:	4610      	mov	r0, r2
 800afde:	f7fd fd9b 	bl	8008b18 <move_window>
 800afe2:	4603      	mov	r3, r0
 800afe4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800afe6:	7dfb      	ldrb	r3, [r7, #23]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d138      	bne.n	800b05e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	330b      	adds	r3, #11
 800aff6:	781a      	ldrb	r2, [r3, #0]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	330b      	adds	r3, #11
 800affc:	f042 0220 	orr.w	r2, r2, #32
 800b000:	b2d2      	uxtb	r2, r2
 800b002:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6818      	ldr	r0, [r3, #0]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	461a      	mov	r2, r3
 800b00e:	68f9      	ldr	r1, [r7, #12]
 800b010:	f7fe fb20 	bl	8009654 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f103 021c 	add.w	r2, r3, #28
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	4619      	mov	r1, r3
 800b020:	4610      	mov	r0, r2
 800b022:	f7fd fb1f 	bl	8008664 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	3316      	adds	r3, #22
 800b02a:	6939      	ldr	r1, [r7, #16]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7fd fb19 	bl	8008664 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	3312      	adds	r3, #18
 800b036:	2100      	movs	r1, #0
 800b038:	4618      	mov	r0, r3
 800b03a:	f7fd faf8 	bl	800862e <st_word>
					fs->wflag = 1;
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	2201      	movs	r2, #1
 800b042:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	4618      	mov	r0, r3
 800b048:	f7fd fd94 	bl	8008b74 <sync_fs>
 800b04c:	4603      	mov	r3, r0
 800b04e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	7d1b      	ldrb	r3, [r3, #20]
 800b054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b058:	b2da      	uxtb	r2, r3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b05e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b060:	4618      	mov	r0, r3
 800b062:	3718      	adds	r7, #24
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f7ff ff7b 	bl	800af6c <f_sync>
 800b076:	4603      	mov	r3, r0
 800b078:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b07a:	7bfb      	ldrb	r3, [r7, #15]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d118      	bne.n	800b0b2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f107 0208 	add.w	r2, r7, #8
 800b086:	4611      	mov	r1, r2
 800b088:	4618      	mov	r0, r3
 800b08a:	f7ff fb93 	bl	800a7b4 <validate>
 800b08e:	4603      	mov	r3, r0
 800b090:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b092:	7bfb      	ldrb	r3, [r7, #15]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d10c      	bne.n	800b0b2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	691b      	ldr	r3, [r3, #16]
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7fd fc97 	bl	80089d0 <dec_lock>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b0a6:	7bfb      	ldrb	r3, [r7, #15]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d102      	bne.n	800b0b2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3710      	adds	r7, #16
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b087      	sub	sp, #28
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b0d2:	4b1f      	ldr	r3, [pc, #124]	; (800b150 <FATFS_LinkDriverEx+0x94>)
 800b0d4:	7a5b      	ldrb	r3, [r3, #9]
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d131      	bne.n	800b140 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b0dc:	4b1c      	ldr	r3, [pc, #112]	; (800b150 <FATFS_LinkDriverEx+0x94>)
 800b0de:	7a5b      	ldrb	r3, [r3, #9]
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	4b1a      	ldr	r3, [pc, #104]	; (800b150 <FATFS_LinkDriverEx+0x94>)
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b0ea:	4b19      	ldr	r3, [pc, #100]	; (800b150 <FATFS_LinkDriverEx+0x94>)
 800b0ec:	7a5b      	ldrb	r3, [r3, #9]
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	4a17      	ldr	r2, [pc, #92]	; (800b150 <FATFS_LinkDriverEx+0x94>)
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	4413      	add	r3, r2
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b0fa:	4b15      	ldr	r3, [pc, #84]	; (800b150 <FATFS_LinkDriverEx+0x94>)
 800b0fc:	7a5b      	ldrb	r3, [r3, #9]
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	461a      	mov	r2, r3
 800b102:	4b13      	ldr	r3, [pc, #76]	; (800b150 <FATFS_LinkDriverEx+0x94>)
 800b104:	4413      	add	r3, r2
 800b106:	79fa      	ldrb	r2, [r7, #7]
 800b108:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b10a:	4b11      	ldr	r3, [pc, #68]	; (800b150 <FATFS_LinkDriverEx+0x94>)
 800b10c:	7a5b      	ldrb	r3, [r3, #9]
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	1c5a      	adds	r2, r3, #1
 800b112:	b2d1      	uxtb	r1, r2
 800b114:	4a0e      	ldr	r2, [pc, #56]	; (800b150 <FATFS_LinkDriverEx+0x94>)
 800b116:	7251      	strb	r1, [r2, #9]
 800b118:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b11a:	7dbb      	ldrb	r3, [r7, #22]
 800b11c:	3330      	adds	r3, #48	; 0x30
 800b11e:	b2da      	uxtb	r2, r3
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	3301      	adds	r3, #1
 800b128:	223a      	movs	r2, #58	; 0x3a
 800b12a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	3302      	adds	r3, #2
 800b130:	222f      	movs	r2, #47	; 0x2f
 800b132:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	3303      	adds	r3, #3
 800b138:	2200      	movs	r2, #0
 800b13a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b13c:	2300      	movs	r3, #0
 800b13e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b140:	7dfb      	ldrb	r3, [r7, #23]
}
 800b142:	4618      	mov	r0, r3
 800b144:	371c      	adds	r7, #28
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop
 800b150:	20000314 	.word	0x20000314

0800b154 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b15e:	2200      	movs	r2, #0
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f7ff ffaa 	bl	800b0bc <FATFS_LinkDriverEx>
 800b168:	4603      	mov	r3, r0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
	...

0800b174 <__errno>:
 800b174:	4b01      	ldr	r3, [pc, #4]	; (800b17c <__errno+0x8>)
 800b176:	6818      	ldr	r0, [r3, #0]
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	20000014 	.word	0x20000014

0800b180 <__libc_init_array>:
 800b180:	b570      	push	{r4, r5, r6, lr}
 800b182:	4e0d      	ldr	r6, [pc, #52]	; (800b1b8 <__libc_init_array+0x38>)
 800b184:	4c0d      	ldr	r4, [pc, #52]	; (800b1bc <__libc_init_array+0x3c>)
 800b186:	1ba4      	subs	r4, r4, r6
 800b188:	10a4      	asrs	r4, r4, #2
 800b18a:	2500      	movs	r5, #0
 800b18c:	42a5      	cmp	r5, r4
 800b18e:	d109      	bne.n	800b1a4 <__libc_init_array+0x24>
 800b190:	4e0b      	ldr	r6, [pc, #44]	; (800b1c0 <__libc_init_array+0x40>)
 800b192:	4c0c      	ldr	r4, [pc, #48]	; (800b1c4 <__libc_init_array+0x44>)
 800b194:	f000 ff68 	bl	800c068 <_init>
 800b198:	1ba4      	subs	r4, r4, r6
 800b19a:	10a4      	asrs	r4, r4, #2
 800b19c:	2500      	movs	r5, #0
 800b19e:	42a5      	cmp	r5, r4
 800b1a0:	d105      	bne.n	800b1ae <__libc_init_array+0x2e>
 800b1a2:	bd70      	pop	{r4, r5, r6, pc}
 800b1a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b1a8:	4798      	blx	r3
 800b1aa:	3501      	adds	r5, #1
 800b1ac:	e7ee      	b.n	800b18c <__libc_init_array+0xc>
 800b1ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b1b2:	4798      	blx	r3
 800b1b4:	3501      	adds	r5, #1
 800b1b6:	e7f2      	b.n	800b19e <__libc_init_array+0x1e>
 800b1b8:	0800c640 	.word	0x0800c640
 800b1bc:	0800c640 	.word	0x0800c640
 800b1c0:	0800c640 	.word	0x0800c640
 800b1c4:	0800c644 	.word	0x0800c644

0800b1c8 <memset>:
 800b1c8:	4402      	add	r2, r0
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d100      	bne.n	800b1d2 <memset+0xa>
 800b1d0:	4770      	bx	lr
 800b1d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b1d6:	e7f9      	b.n	800b1cc <memset+0x4>

0800b1d8 <_free_r>:
 800b1d8:	b538      	push	{r3, r4, r5, lr}
 800b1da:	4605      	mov	r5, r0
 800b1dc:	2900      	cmp	r1, #0
 800b1de:	d045      	beq.n	800b26c <_free_r+0x94>
 800b1e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1e4:	1f0c      	subs	r4, r1, #4
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	bfb8      	it	lt
 800b1ea:	18e4      	addlt	r4, r4, r3
 800b1ec:	f000 fbc6 	bl	800b97c <__malloc_lock>
 800b1f0:	4a1f      	ldr	r2, [pc, #124]	; (800b270 <_free_r+0x98>)
 800b1f2:	6813      	ldr	r3, [r2, #0]
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	b933      	cbnz	r3, 800b206 <_free_r+0x2e>
 800b1f8:	6063      	str	r3, [r4, #4]
 800b1fa:	6014      	str	r4, [r2, #0]
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b202:	f000 bbbc 	b.w	800b97e <__malloc_unlock>
 800b206:	42a3      	cmp	r3, r4
 800b208:	d90c      	bls.n	800b224 <_free_r+0x4c>
 800b20a:	6821      	ldr	r1, [r4, #0]
 800b20c:	1862      	adds	r2, r4, r1
 800b20e:	4293      	cmp	r3, r2
 800b210:	bf04      	itt	eq
 800b212:	681a      	ldreq	r2, [r3, #0]
 800b214:	685b      	ldreq	r3, [r3, #4]
 800b216:	6063      	str	r3, [r4, #4]
 800b218:	bf04      	itt	eq
 800b21a:	1852      	addeq	r2, r2, r1
 800b21c:	6022      	streq	r2, [r4, #0]
 800b21e:	6004      	str	r4, [r0, #0]
 800b220:	e7ec      	b.n	800b1fc <_free_r+0x24>
 800b222:	4613      	mov	r3, r2
 800b224:	685a      	ldr	r2, [r3, #4]
 800b226:	b10a      	cbz	r2, 800b22c <_free_r+0x54>
 800b228:	42a2      	cmp	r2, r4
 800b22a:	d9fa      	bls.n	800b222 <_free_r+0x4a>
 800b22c:	6819      	ldr	r1, [r3, #0]
 800b22e:	1858      	adds	r0, r3, r1
 800b230:	42a0      	cmp	r0, r4
 800b232:	d10b      	bne.n	800b24c <_free_r+0x74>
 800b234:	6820      	ldr	r0, [r4, #0]
 800b236:	4401      	add	r1, r0
 800b238:	1858      	adds	r0, r3, r1
 800b23a:	4282      	cmp	r2, r0
 800b23c:	6019      	str	r1, [r3, #0]
 800b23e:	d1dd      	bne.n	800b1fc <_free_r+0x24>
 800b240:	6810      	ldr	r0, [r2, #0]
 800b242:	6852      	ldr	r2, [r2, #4]
 800b244:	605a      	str	r2, [r3, #4]
 800b246:	4401      	add	r1, r0
 800b248:	6019      	str	r1, [r3, #0]
 800b24a:	e7d7      	b.n	800b1fc <_free_r+0x24>
 800b24c:	d902      	bls.n	800b254 <_free_r+0x7c>
 800b24e:	230c      	movs	r3, #12
 800b250:	602b      	str	r3, [r5, #0]
 800b252:	e7d3      	b.n	800b1fc <_free_r+0x24>
 800b254:	6820      	ldr	r0, [r4, #0]
 800b256:	1821      	adds	r1, r4, r0
 800b258:	428a      	cmp	r2, r1
 800b25a:	bf04      	itt	eq
 800b25c:	6811      	ldreq	r1, [r2, #0]
 800b25e:	6852      	ldreq	r2, [r2, #4]
 800b260:	6062      	str	r2, [r4, #4]
 800b262:	bf04      	itt	eq
 800b264:	1809      	addeq	r1, r1, r0
 800b266:	6021      	streq	r1, [r4, #0]
 800b268:	605c      	str	r4, [r3, #4]
 800b26a:	e7c7      	b.n	800b1fc <_free_r+0x24>
 800b26c:	bd38      	pop	{r3, r4, r5, pc}
 800b26e:	bf00      	nop
 800b270:	20000320 	.word	0x20000320

0800b274 <_malloc_r>:
 800b274:	b570      	push	{r4, r5, r6, lr}
 800b276:	1ccd      	adds	r5, r1, #3
 800b278:	f025 0503 	bic.w	r5, r5, #3
 800b27c:	3508      	adds	r5, #8
 800b27e:	2d0c      	cmp	r5, #12
 800b280:	bf38      	it	cc
 800b282:	250c      	movcc	r5, #12
 800b284:	2d00      	cmp	r5, #0
 800b286:	4606      	mov	r6, r0
 800b288:	db01      	blt.n	800b28e <_malloc_r+0x1a>
 800b28a:	42a9      	cmp	r1, r5
 800b28c:	d903      	bls.n	800b296 <_malloc_r+0x22>
 800b28e:	230c      	movs	r3, #12
 800b290:	6033      	str	r3, [r6, #0]
 800b292:	2000      	movs	r0, #0
 800b294:	bd70      	pop	{r4, r5, r6, pc}
 800b296:	f000 fb71 	bl	800b97c <__malloc_lock>
 800b29a:	4a21      	ldr	r2, [pc, #132]	; (800b320 <_malloc_r+0xac>)
 800b29c:	6814      	ldr	r4, [r2, #0]
 800b29e:	4621      	mov	r1, r4
 800b2a0:	b991      	cbnz	r1, 800b2c8 <_malloc_r+0x54>
 800b2a2:	4c20      	ldr	r4, [pc, #128]	; (800b324 <_malloc_r+0xb0>)
 800b2a4:	6823      	ldr	r3, [r4, #0]
 800b2a6:	b91b      	cbnz	r3, 800b2b0 <_malloc_r+0x3c>
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	f000 f8b9 	bl	800b420 <_sbrk_r>
 800b2ae:	6020      	str	r0, [r4, #0]
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	f000 f8b4 	bl	800b420 <_sbrk_r>
 800b2b8:	1c43      	adds	r3, r0, #1
 800b2ba:	d124      	bne.n	800b306 <_malloc_r+0x92>
 800b2bc:	230c      	movs	r3, #12
 800b2be:	6033      	str	r3, [r6, #0]
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	f000 fb5c 	bl	800b97e <__malloc_unlock>
 800b2c6:	e7e4      	b.n	800b292 <_malloc_r+0x1e>
 800b2c8:	680b      	ldr	r3, [r1, #0]
 800b2ca:	1b5b      	subs	r3, r3, r5
 800b2cc:	d418      	bmi.n	800b300 <_malloc_r+0x8c>
 800b2ce:	2b0b      	cmp	r3, #11
 800b2d0:	d90f      	bls.n	800b2f2 <_malloc_r+0x7e>
 800b2d2:	600b      	str	r3, [r1, #0]
 800b2d4:	50cd      	str	r5, [r1, r3]
 800b2d6:	18cc      	adds	r4, r1, r3
 800b2d8:	4630      	mov	r0, r6
 800b2da:	f000 fb50 	bl	800b97e <__malloc_unlock>
 800b2de:	f104 000b 	add.w	r0, r4, #11
 800b2e2:	1d23      	adds	r3, r4, #4
 800b2e4:	f020 0007 	bic.w	r0, r0, #7
 800b2e8:	1ac3      	subs	r3, r0, r3
 800b2ea:	d0d3      	beq.n	800b294 <_malloc_r+0x20>
 800b2ec:	425a      	negs	r2, r3
 800b2ee:	50e2      	str	r2, [r4, r3]
 800b2f0:	e7d0      	b.n	800b294 <_malloc_r+0x20>
 800b2f2:	428c      	cmp	r4, r1
 800b2f4:	684b      	ldr	r3, [r1, #4]
 800b2f6:	bf16      	itet	ne
 800b2f8:	6063      	strne	r3, [r4, #4]
 800b2fa:	6013      	streq	r3, [r2, #0]
 800b2fc:	460c      	movne	r4, r1
 800b2fe:	e7eb      	b.n	800b2d8 <_malloc_r+0x64>
 800b300:	460c      	mov	r4, r1
 800b302:	6849      	ldr	r1, [r1, #4]
 800b304:	e7cc      	b.n	800b2a0 <_malloc_r+0x2c>
 800b306:	1cc4      	adds	r4, r0, #3
 800b308:	f024 0403 	bic.w	r4, r4, #3
 800b30c:	42a0      	cmp	r0, r4
 800b30e:	d005      	beq.n	800b31c <_malloc_r+0xa8>
 800b310:	1a21      	subs	r1, r4, r0
 800b312:	4630      	mov	r0, r6
 800b314:	f000 f884 	bl	800b420 <_sbrk_r>
 800b318:	3001      	adds	r0, #1
 800b31a:	d0cf      	beq.n	800b2bc <_malloc_r+0x48>
 800b31c:	6025      	str	r5, [r4, #0]
 800b31e:	e7db      	b.n	800b2d8 <_malloc_r+0x64>
 800b320:	20000320 	.word	0x20000320
 800b324:	20000324 	.word	0x20000324

0800b328 <iprintf>:
 800b328:	b40f      	push	{r0, r1, r2, r3}
 800b32a:	4b0a      	ldr	r3, [pc, #40]	; (800b354 <iprintf+0x2c>)
 800b32c:	b513      	push	{r0, r1, r4, lr}
 800b32e:	681c      	ldr	r4, [r3, #0]
 800b330:	b124      	cbz	r4, 800b33c <iprintf+0x14>
 800b332:	69a3      	ldr	r3, [r4, #24]
 800b334:	b913      	cbnz	r3, 800b33c <iprintf+0x14>
 800b336:	4620      	mov	r0, r4
 800b338:	f000 fa32 	bl	800b7a0 <__sinit>
 800b33c:	ab05      	add	r3, sp, #20
 800b33e:	9a04      	ldr	r2, [sp, #16]
 800b340:	68a1      	ldr	r1, [r4, #8]
 800b342:	9301      	str	r3, [sp, #4]
 800b344:	4620      	mov	r0, r4
 800b346:	f000 fb45 	bl	800b9d4 <_vfiprintf_r>
 800b34a:	b002      	add	sp, #8
 800b34c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b350:	b004      	add	sp, #16
 800b352:	4770      	bx	lr
 800b354:	20000014 	.word	0x20000014

0800b358 <_puts_r>:
 800b358:	b570      	push	{r4, r5, r6, lr}
 800b35a:	460e      	mov	r6, r1
 800b35c:	4605      	mov	r5, r0
 800b35e:	b118      	cbz	r0, 800b368 <_puts_r+0x10>
 800b360:	6983      	ldr	r3, [r0, #24]
 800b362:	b90b      	cbnz	r3, 800b368 <_puts_r+0x10>
 800b364:	f000 fa1c 	bl	800b7a0 <__sinit>
 800b368:	69ab      	ldr	r3, [r5, #24]
 800b36a:	68ac      	ldr	r4, [r5, #8]
 800b36c:	b913      	cbnz	r3, 800b374 <_puts_r+0x1c>
 800b36e:	4628      	mov	r0, r5
 800b370:	f000 fa16 	bl	800b7a0 <__sinit>
 800b374:	4b23      	ldr	r3, [pc, #140]	; (800b404 <_puts_r+0xac>)
 800b376:	429c      	cmp	r4, r3
 800b378:	d117      	bne.n	800b3aa <_puts_r+0x52>
 800b37a:	686c      	ldr	r4, [r5, #4]
 800b37c:	89a3      	ldrh	r3, [r4, #12]
 800b37e:	071b      	lsls	r3, r3, #28
 800b380:	d51d      	bpl.n	800b3be <_puts_r+0x66>
 800b382:	6923      	ldr	r3, [r4, #16]
 800b384:	b1db      	cbz	r3, 800b3be <_puts_r+0x66>
 800b386:	3e01      	subs	r6, #1
 800b388:	68a3      	ldr	r3, [r4, #8]
 800b38a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b38e:	3b01      	subs	r3, #1
 800b390:	60a3      	str	r3, [r4, #8]
 800b392:	b9e9      	cbnz	r1, 800b3d0 <_puts_r+0x78>
 800b394:	2b00      	cmp	r3, #0
 800b396:	da2e      	bge.n	800b3f6 <_puts_r+0x9e>
 800b398:	4622      	mov	r2, r4
 800b39a:	210a      	movs	r1, #10
 800b39c:	4628      	mov	r0, r5
 800b39e:	f000 f84f 	bl	800b440 <__swbuf_r>
 800b3a2:	3001      	adds	r0, #1
 800b3a4:	d011      	beq.n	800b3ca <_puts_r+0x72>
 800b3a6:	200a      	movs	r0, #10
 800b3a8:	e011      	b.n	800b3ce <_puts_r+0x76>
 800b3aa:	4b17      	ldr	r3, [pc, #92]	; (800b408 <_puts_r+0xb0>)
 800b3ac:	429c      	cmp	r4, r3
 800b3ae:	d101      	bne.n	800b3b4 <_puts_r+0x5c>
 800b3b0:	68ac      	ldr	r4, [r5, #8]
 800b3b2:	e7e3      	b.n	800b37c <_puts_r+0x24>
 800b3b4:	4b15      	ldr	r3, [pc, #84]	; (800b40c <_puts_r+0xb4>)
 800b3b6:	429c      	cmp	r4, r3
 800b3b8:	bf08      	it	eq
 800b3ba:	68ec      	ldreq	r4, [r5, #12]
 800b3bc:	e7de      	b.n	800b37c <_puts_r+0x24>
 800b3be:	4621      	mov	r1, r4
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	f000 f88f 	bl	800b4e4 <__swsetup_r>
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	d0dd      	beq.n	800b386 <_puts_r+0x2e>
 800b3ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ce:	bd70      	pop	{r4, r5, r6, pc}
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	da04      	bge.n	800b3de <_puts_r+0x86>
 800b3d4:	69a2      	ldr	r2, [r4, #24]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	dc06      	bgt.n	800b3e8 <_puts_r+0x90>
 800b3da:	290a      	cmp	r1, #10
 800b3dc:	d004      	beq.n	800b3e8 <_puts_r+0x90>
 800b3de:	6823      	ldr	r3, [r4, #0]
 800b3e0:	1c5a      	adds	r2, r3, #1
 800b3e2:	6022      	str	r2, [r4, #0]
 800b3e4:	7019      	strb	r1, [r3, #0]
 800b3e6:	e7cf      	b.n	800b388 <_puts_r+0x30>
 800b3e8:	4622      	mov	r2, r4
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	f000 f828 	bl	800b440 <__swbuf_r>
 800b3f0:	3001      	adds	r0, #1
 800b3f2:	d1c9      	bne.n	800b388 <_puts_r+0x30>
 800b3f4:	e7e9      	b.n	800b3ca <_puts_r+0x72>
 800b3f6:	6823      	ldr	r3, [r4, #0]
 800b3f8:	200a      	movs	r0, #10
 800b3fa:	1c5a      	adds	r2, r3, #1
 800b3fc:	6022      	str	r2, [r4, #0]
 800b3fe:	7018      	strb	r0, [r3, #0]
 800b400:	e7e5      	b.n	800b3ce <_puts_r+0x76>
 800b402:	bf00      	nop
 800b404:	0800c5c4 	.word	0x0800c5c4
 800b408:	0800c5e4 	.word	0x0800c5e4
 800b40c:	0800c5a4 	.word	0x0800c5a4

0800b410 <puts>:
 800b410:	4b02      	ldr	r3, [pc, #8]	; (800b41c <puts+0xc>)
 800b412:	4601      	mov	r1, r0
 800b414:	6818      	ldr	r0, [r3, #0]
 800b416:	f7ff bf9f 	b.w	800b358 <_puts_r>
 800b41a:	bf00      	nop
 800b41c:	20000014 	.word	0x20000014

0800b420 <_sbrk_r>:
 800b420:	b538      	push	{r3, r4, r5, lr}
 800b422:	4c06      	ldr	r4, [pc, #24]	; (800b43c <_sbrk_r+0x1c>)
 800b424:	2300      	movs	r3, #0
 800b426:	4605      	mov	r5, r0
 800b428:	4608      	mov	r0, r1
 800b42a:	6023      	str	r3, [r4, #0]
 800b42c:	f7f6 ffd8 	bl	80023e0 <_sbrk>
 800b430:	1c43      	adds	r3, r0, #1
 800b432:	d102      	bne.n	800b43a <_sbrk_r+0x1a>
 800b434:	6823      	ldr	r3, [r4, #0]
 800b436:	b103      	cbz	r3, 800b43a <_sbrk_r+0x1a>
 800b438:	602b      	str	r3, [r5, #0]
 800b43a:	bd38      	pop	{r3, r4, r5, pc}
 800b43c:	2000c974 	.word	0x2000c974

0800b440 <__swbuf_r>:
 800b440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b442:	460e      	mov	r6, r1
 800b444:	4614      	mov	r4, r2
 800b446:	4605      	mov	r5, r0
 800b448:	b118      	cbz	r0, 800b452 <__swbuf_r+0x12>
 800b44a:	6983      	ldr	r3, [r0, #24]
 800b44c:	b90b      	cbnz	r3, 800b452 <__swbuf_r+0x12>
 800b44e:	f000 f9a7 	bl	800b7a0 <__sinit>
 800b452:	4b21      	ldr	r3, [pc, #132]	; (800b4d8 <__swbuf_r+0x98>)
 800b454:	429c      	cmp	r4, r3
 800b456:	d12a      	bne.n	800b4ae <__swbuf_r+0x6e>
 800b458:	686c      	ldr	r4, [r5, #4]
 800b45a:	69a3      	ldr	r3, [r4, #24]
 800b45c:	60a3      	str	r3, [r4, #8]
 800b45e:	89a3      	ldrh	r3, [r4, #12]
 800b460:	071a      	lsls	r2, r3, #28
 800b462:	d52e      	bpl.n	800b4c2 <__swbuf_r+0x82>
 800b464:	6923      	ldr	r3, [r4, #16]
 800b466:	b363      	cbz	r3, 800b4c2 <__swbuf_r+0x82>
 800b468:	6923      	ldr	r3, [r4, #16]
 800b46a:	6820      	ldr	r0, [r4, #0]
 800b46c:	1ac0      	subs	r0, r0, r3
 800b46e:	6963      	ldr	r3, [r4, #20]
 800b470:	b2f6      	uxtb	r6, r6
 800b472:	4283      	cmp	r3, r0
 800b474:	4637      	mov	r7, r6
 800b476:	dc04      	bgt.n	800b482 <__swbuf_r+0x42>
 800b478:	4621      	mov	r1, r4
 800b47a:	4628      	mov	r0, r5
 800b47c:	f000 f926 	bl	800b6cc <_fflush_r>
 800b480:	bb28      	cbnz	r0, 800b4ce <__swbuf_r+0x8e>
 800b482:	68a3      	ldr	r3, [r4, #8]
 800b484:	3b01      	subs	r3, #1
 800b486:	60a3      	str	r3, [r4, #8]
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	1c5a      	adds	r2, r3, #1
 800b48c:	6022      	str	r2, [r4, #0]
 800b48e:	701e      	strb	r6, [r3, #0]
 800b490:	6963      	ldr	r3, [r4, #20]
 800b492:	3001      	adds	r0, #1
 800b494:	4283      	cmp	r3, r0
 800b496:	d004      	beq.n	800b4a2 <__swbuf_r+0x62>
 800b498:	89a3      	ldrh	r3, [r4, #12]
 800b49a:	07db      	lsls	r3, r3, #31
 800b49c:	d519      	bpl.n	800b4d2 <__swbuf_r+0x92>
 800b49e:	2e0a      	cmp	r6, #10
 800b4a0:	d117      	bne.n	800b4d2 <__swbuf_r+0x92>
 800b4a2:	4621      	mov	r1, r4
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	f000 f911 	bl	800b6cc <_fflush_r>
 800b4aa:	b190      	cbz	r0, 800b4d2 <__swbuf_r+0x92>
 800b4ac:	e00f      	b.n	800b4ce <__swbuf_r+0x8e>
 800b4ae:	4b0b      	ldr	r3, [pc, #44]	; (800b4dc <__swbuf_r+0x9c>)
 800b4b0:	429c      	cmp	r4, r3
 800b4b2:	d101      	bne.n	800b4b8 <__swbuf_r+0x78>
 800b4b4:	68ac      	ldr	r4, [r5, #8]
 800b4b6:	e7d0      	b.n	800b45a <__swbuf_r+0x1a>
 800b4b8:	4b09      	ldr	r3, [pc, #36]	; (800b4e0 <__swbuf_r+0xa0>)
 800b4ba:	429c      	cmp	r4, r3
 800b4bc:	bf08      	it	eq
 800b4be:	68ec      	ldreq	r4, [r5, #12]
 800b4c0:	e7cb      	b.n	800b45a <__swbuf_r+0x1a>
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	f000 f80d 	bl	800b4e4 <__swsetup_r>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	d0cc      	beq.n	800b468 <__swbuf_r+0x28>
 800b4ce:	f04f 37ff 	mov.w	r7, #4294967295
 800b4d2:	4638      	mov	r0, r7
 800b4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	0800c5c4 	.word	0x0800c5c4
 800b4dc:	0800c5e4 	.word	0x0800c5e4
 800b4e0:	0800c5a4 	.word	0x0800c5a4

0800b4e4 <__swsetup_r>:
 800b4e4:	4b32      	ldr	r3, [pc, #200]	; (800b5b0 <__swsetup_r+0xcc>)
 800b4e6:	b570      	push	{r4, r5, r6, lr}
 800b4e8:	681d      	ldr	r5, [r3, #0]
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	460c      	mov	r4, r1
 800b4ee:	b125      	cbz	r5, 800b4fa <__swsetup_r+0x16>
 800b4f0:	69ab      	ldr	r3, [r5, #24]
 800b4f2:	b913      	cbnz	r3, 800b4fa <__swsetup_r+0x16>
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	f000 f953 	bl	800b7a0 <__sinit>
 800b4fa:	4b2e      	ldr	r3, [pc, #184]	; (800b5b4 <__swsetup_r+0xd0>)
 800b4fc:	429c      	cmp	r4, r3
 800b4fe:	d10f      	bne.n	800b520 <__swsetup_r+0x3c>
 800b500:	686c      	ldr	r4, [r5, #4]
 800b502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b506:	b29a      	uxth	r2, r3
 800b508:	0715      	lsls	r5, r2, #28
 800b50a:	d42c      	bmi.n	800b566 <__swsetup_r+0x82>
 800b50c:	06d0      	lsls	r0, r2, #27
 800b50e:	d411      	bmi.n	800b534 <__swsetup_r+0x50>
 800b510:	2209      	movs	r2, #9
 800b512:	6032      	str	r2, [r6, #0]
 800b514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b518:	81a3      	strh	r3, [r4, #12]
 800b51a:	f04f 30ff 	mov.w	r0, #4294967295
 800b51e:	e03e      	b.n	800b59e <__swsetup_r+0xba>
 800b520:	4b25      	ldr	r3, [pc, #148]	; (800b5b8 <__swsetup_r+0xd4>)
 800b522:	429c      	cmp	r4, r3
 800b524:	d101      	bne.n	800b52a <__swsetup_r+0x46>
 800b526:	68ac      	ldr	r4, [r5, #8]
 800b528:	e7eb      	b.n	800b502 <__swsetup_r+0x1e>
 800b52a:	4b24      	ldr	r3, [pc, #144]	; (800b5bc <__swsetup_r+0xd8>)
 800b52c:	429c      	cmp	r4, r3
 800b52e:	bf08      	it	eq
 800b530:	68ec      	ldreq	r4, [r5, #12]
 800b532:	e7e6      	b.n	800b502 <__swsetup_r+0x1e>
 800b534:	0751      	lsls	r1, r2, #29
 800b536:	d512      	bpl.n	800b55e <__swsetup_r+0x7a>
 800b538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b53a:	b141      	cbz	r1, 800b54e <__swsetup_r+0x6a>
 800b53c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b540:	4299      	cmp	r1, r3
 800b542:	d002      	beq.n	800b54a <__swsetup_r+0x66>
 800b544:	4630      	mov	r0, r6
 800b546:	f7ff fe47 	bl	800b1d8 <_free_r>
 800b54a:	2300      	movs	r3, #0
 800b54c:	6363      	str	r3, [r4, #52]	; 0x34
 800b54e:	89a3      	ldrh	r3, [r4, #12]
 800b550:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b554:	81a3      	strh	r3, [r4, #12]
 800b556:	2300      	movs	r3, #0
 800b558:	6063      	str	r3, [r4, #4]
 800b55a:	6923      	ldr	r3, [r4, #16]
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	89a3      	ldrh	r3, [r4, #12]
 800b560:	f043 0308 	orr.w	r3, r3, #8
 800b564:	81a3      	strh	r3, [r4, #12]
 800b566:	6923      	ldr	r3, [r4, #16]
 800b568:	b94b      	cbnz	r3, 800b57e <__swsetup_r+0x9a>
 800b56a:	89a3      	ldrh	r3, [r4, #12]
 800b56c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b574:	d003      	beq.n	800b57e <__swsetup_r+0x9a>
 800b576:	4621      	mov	r1, r4
 800b578:	4630      	mov	r0, r6
 800b57a:	f000 f9bf 	bl	800b8fc <__smakebuf_r>
 800b57e:	89a2      	ldrh	r2, [r4, #12]
 800b580:	f012 0301 	ands.w	r3, r2, #1
 800b584:	d00c      	beq.n	800b5a0 <__swsetup_r+0xbc>
 800b586:	2300      	movs	r3, #0
 800b588:	60a3      	str	r3, [r4, #8]
 800b58a:	6963      	ldr	r3, [r4, #20]
 800b58c:	425b      	negs	r3, r3
 800b58e:	61a3      	str	r3, [r4, #24]
 800b590:	6923      	ldr	r3, [r4, #16]
 800b592:	b953      	cbnz	r3, 800b5aa <__swsetup_r+0xc6>
 800b594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b598:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b59c:	d1ba      	bne.n	800b514 <__swsetup_r+0x30>
 800b59e:	bd70      	pop	{r4, r5, r6, pc}
 800b5a0:	0792      	lsls	r2, r2, #30
 800b5a2:	bf58      	it	pl
 800b5a4:	6963      	ldrpl	r3, [r4, #20]
 800b5a6:	60a3      	str	r3, [r4, #8]
 800b5a8:	e7f2      	b.n	800b590 <__swsetup_r+0xac>
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	e7f7      	b.n	800b59e <__swsetup_r+0xba>
 800b5ae:	bf00      	nop
 800b5b0:	20000014 	.word	0x20000014
 800b5b4:	0800c5c4 	.word	0x0800c5c4
 800b5b8:	0800c5e4 	.word	0x0800c5e4
 800b5bc:	0800c5a4 	.word	0x0800c5a4

0800b5c0 <__sflush_r>:
 800b5c0:	898a      	ldrh	r2, [r1, #12]
 800b5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	0710      	lsls	r0, r2, #28
 800b5ca:	460c      	mov	r4, r1
 800b5cc:	d458      	bmi.n	800b680 <__sflush_r+0xc0>
 800b5ce:	684b      	ldr	r3, [r1, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	dc05      	bgt.n	800b5e0 <__sflush_r+0x20>
 800b5d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	dc02      	bgt.n	800b5e0 <__sflush_r+0x20>
 800b5da:	2000      	movs	r0, #0
 800b5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5e2:	2e00      	cmp	r6, #0
 800b5e4:	d0f9      	beq.n	800b5da <__sflush_r+0x1a>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5ec:	682f      	ldr	r7, [r5, #0]
 800b5ee:	6a21      	ldr	r1, [r4, #32]
 800b5f0:	602b      	str	r3, [r5, #0]
 800b5f2:	d032      	beq.n	800b65a <__sflush_r+0x9a>
 800b5f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5f6:	89a3      	ldrh	r3, [r4, #12]
 800b5f8:	075a      	lsls	r2, r3, #29
 800b5fa:	d505      	bpl.n	800b608 <__sflush_r+0x48>
 800b5fc:	6863      	ldr	r3, [r4, #4]
 800b5fe:	1ac0      	subs	r0, r0, r3
 800b600:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b602:	b10b      	cbz	r3, 800b608 <__sflush_r+0x48>
 800b604:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b606:	1ac0      	subs	r0, r0, r3
 800b608:	2300      	movs	r3, #0
 800b60a:	4602      	mov	r2, r0
 800b60c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b60e:	6a21      	ldr	r1, [r4, #32]
 800b610:	4628      	mov	r0, r5
 800b612:	47b0      	blx	r6
 800b614:	1c43      	adds	r3, r0, #1
 800b616:	89a3      	ldrh	r3, [r4, #12]
 800b618:	d106      	bne.n	800b628 <__sflush_r+0x68>
 800b61a:	6829      	ldr	r1, [r5, #0]
 800b61c:	291d      	cmp	r1, #29
 800b61e:	d848      	bhi.n	800b6b2 <__sflush_r+0xf2>
 800b620:	4a29      	ldr	r2, [pc, #164]	; (800b6c8 <__sflush_r+0x108>)
 800b622:	40ca      	lsrs	r2, r1
 800b624:	07d6      	lsls	r6, r2, #31
 800b626:	d544      	bpl.n	800b6b2 <__sflush_r+0xf2>
 800b628:	2200      	movs	r2, #0
 800b62a:	6062      	str	r2, [r4, #4]
 800b62c:	04d9      	lsls	r1, r3, #19
 800b62e:	6922      	ldr	r2, [r4, #16]
 800b630:	6022      	str	r2, [r4, #0]
 800b632:	d504      	bpl.n	800b63e <__sflush_r+0x7e>
 800b634:	1c42      	adds	r2, r0, #1
 800b636:	d101      	bne.n	800b63c <__sflush_r+0x7c>
 800b638:	682b      	ldr	r3, [r5, #0]
 800b63a:	b903      	cbnz	r3, 800b63e <__sflush_r+0x7e>
 800b63c:	6560      	str	r0, [r4, #84]	; 0x54
 800b63e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b640:	602f      	str	r7, [r5, #0]
 800b642:	2900      	cmp	r1, #0
 800b644:	d0c9      	beq.n	800b5da <__sflush_r+0x1a>
 800b646:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b64a:	4299      	cmp	r1, r3
 800b64c:	d002      	beq.n	800b654 <__sflush_r+0x94>
 800b64e:	4628      	mov	r0, r5
 800b650:	f7ff fdc2 	bl	800b1d8 <_free_r>
 800b654:	2000      	movs	r0, #0
 800b656:	6360      	str	r0, [r4, #52]	; 0x34
 800b658:	e7c0      	b.n	800b5dc <__sflush_r+0x1c>
 800b65a:	2301      	movs	r3, #1
 800b65c:	4628      	mov	r0, r5
 800b65e:	47b0      	blx	r6
 800b660:	1c41      	adds	r1, r0, #1
 800b662:	d1c8      	bne.n	800b5f6 <__sflush_r+0x36>
 800b664:	682b      	ldr	r3, [r5, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d0c5      	beq.n	800b5f6 <__sflush_r+0x36>
 800b66a:	2b1d      	cmp	r3, #29
 800b66c:	d001      	beq.n	800b672 <__sflush_r+0xb2>
 800b66e:	2b16      	cmp	r3, #22
 800b670:	d101      	bne.n	800b676 <__sflush_r+0xb6>
 800b672:	602f      	str	r7, [r5, #0]
 800b674:	e7b1      	b.n	800b5da <__sflush_r+0x1a>
 800b676:	89a3      	ldrh	r3, [r4, #12]
 800b678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b67c:	81a3      	strh	r3, [r4, #12]
 800b67e:	e7ad      	b.n	800b5dc <__sflush_r+0x1c>
 800b680:	690f      	ldr	r7, [r1, #16]
 800b682:	2f00      	cmp	r7, #0
 800b684:	d0a9      	beq.n	800b5da <__sflush_r+0x1a>
 800b686:	0793      	lsls	r3, r2, #30
 800b688:	680e      	ldr	r6, [r1, #0]
 800b68a:	bf08      	it	eq
 800b68c:	694b      	ldreq	r3, [r1, #20]
 800b68e:	600f      	str	r7, [r1, #0]
 800b690:	bf18      	it	ne
 800b692:	2300      	movne	r3, #0
 800b694:	eba6 0807 	sub.w	r8, r6, r7
 800b698:	608b      	str	r3, [r1, #8]
 800b69a:	f1b8 0f00 	cmp.w	r8, #0
 800b69e:	dd9c      	ble.n	800b5da <__sflush_r+0x1a>
 800b6a0:	4643      	mov	r3, r8
 800b6a2:	463a      	mov	r2, r7
 800b6a4:	6a21      	ldr	r1, [r4, #32]
 800b6a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	47b0      	blx	r6
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	dc06      	bgt.n	800b6be <__sflush_r+0xfe>
 800b6b0:	89a3      	ldrh	r3, [r4, #12]
 800b6b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6b6:	81a3      	strh	r3, [r4, #12]
 800b6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6bc:	e78e      	b.n	800b5dc <__sflush_r+0x1c>
 800b6be:	4407      	add	r7, r0
 800b6c0:	eba8 0800 	sub.w	r8, r8, r0
 800b6c4:	e7e9      	b.n	800b69a <__sflush_r+0xda>
 800b6c6:	bf00      	nop
 800b6c8:	20400001 	.word	0x20400001

0800b6cc <_fflush_r>:
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	690b      	ldr	r3, [r1, #16]
 800b6d0:	4605      	mov	r5, r0
 800b6d2:	460c      	mov	r4, r1
 800b6d4:	b1db      	cbz	r3, 800b70e <_fflush_r+0x42>
 800b6d6:	b118      	cbz	r0, 800b6e0 <_fflush_r+0x14>
 800b6d8:	6983      	ldr	r3, [r0, #24]
 800b6da:	b90b      	cbnz	r3, 800b6e0 <_fflush_r+0x14>
 800b6dc:	f000 f860 	bl	800b7a0 <__sinit>
 800b6e0:	4b0c      	ldr	r3, [pc, #48]	; (800b714 <_fflush_r+0x48>)
 800b6e2:	429c      	cmp	r4, r3
 800b6e4:	d109      	bne.n	800b6fa <_fflush_r+0x2e>
 800b6e6:	686c      	ldr	r4, [r5, #4]
 800b6e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6ec:	b17b      	cbz	r3, 800b70e <_fflush_r+0x42>
 800b6ee:	4621      	mov	r1, r4
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6f6:	f7ff bf63 	b.w	800b5c0 <__sflush_r>
 800b6fa:	4b07      	ldr	r3, [pc, #28]	; (800b718 <_fflush_r+0x4c>)
 800b6fc:	429c      	cmp	r4, r3
 800b6fe:	d101      	bne.n	800b704 <_fflush_r+0x38>
 800b700:	68ac      	ldr	r4, [r5, #8]
 800b702:	e7f1      	b.n	800b6e8 <_fflush_r+0x1c>
 800b704:	4b05      	ldr	r3, [pc, #20]	; (800b71c <_fflush_r+0x50>)
 800b706:	429c      	cmp	r4, r3
 800b708:	bf08      	it	eq
 800b70a:	68ec      	ldreq	r4, [r5, #12]
 800b70c:	e7ec      	b.n	800b6e8 <_fflush_r+0x1c>
 800b70e:	2000      	movs	r0, #0
 800b710:	bd38      	pop	{r3, r4, r5, pc}
 800b712:	bf00      	nop
 800b714:	0800c5c4 	.word	0x0800c5c4
 800b718:	0800c5e4 	.word	0x0800c5e4
 800b71c:	0800c5a4 	.word	0x0800c5a4

0800b720 <std>:
 800b720:	2300      	movs	r3, #0
 800b722:	b510      	push	{r4, lr}
 800b724:	4604      	mov	r4, r0
 800b726:	e9c0 3300 	strd	r3, r3, [r0]
 800b72a:	6083      	str	r3, [r0, #8]
 800b72c:	8181      	strh	r1, [r0, #12]
 800b72e:	6643      	str	r3, [r0, #100]	; 0x64
 800b730:	81c2      	strh	r2, [r0, #14]
 800b732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b736:	6183      	str	r3, [r0, #24]
 800b738:	4619      	mov	r1, r3
 800b73a:	2208      	movs	r2, #8
 800b73c:	305c      	adds	r0, #92	; 0x5c
 800b73e:	f7ff fd43 	bl	800b1c8 <memset>
 800b742:	4b05      	ldr	r3, [pc, #20]	; (800b758 <std+0x38>)
 800b744:	6263      	str	r3, [r4, #36]	; 0x24
 800b746:	4b05      	ldr	r3, [pc, #20]	; (800b75c <std+0x3c>)
 800b748:	62a3      	str	r3, [r4, #40]	; 0x28
 800b74a:	4b05      	ldr	r3, [pc, #20]	; (800b760 <std+0x40>)
 800b74c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b74e:	4b05      	ldr	r3, [pc, #20]	; (800b764 <std+0x44>)
 800b750:	6224      	str	r4, [r4, #32]
 800b752:	6323      	str	r3, [r4, #48]	; 0x30
 800b754:	bd10      	pop	{r4, pc}
 800b756:	bf00      	nop
 800b758:	0800bf11 	.word	0x0800bf11
 800b75c:	0800bf33 	.word	0x0800bf33
 800b760:	0800bf6b 	.word	0x0800bf6b
 800b764:	0800bf8f 	.word	0x0800bf8f

0800b768 <_cleanup_r>:
 800b768:	4901      	ldr	r1, [pc, #4]	; (800b770 <_cleanup_r+0x8>)
 800b76a:	f000 b885 	b.w	800b878 <_fwalk_reent>
 800b76e:	bf00      	nop
 800b770:	0800b6cd 	.word	0x0800b6cd

0800b774 <__sfmoreglue>:
 800b774:	b570      	push	{r4, r5, r6, lr}
 800b776:	1e4a      	subs	r2, r1, #1
 800b778:	2568      	movs	r5, #104	; 0x68
 800b77a:	4355      	muls	r5, r2
 800b77c:	460e      	mov	r6, r1
 800b77e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b782:	f7ff fd77 	bl	800b274 <_malloc_r>
 800b786:	4604      	mov	r4, r0
 800b788:	b140      	cbz	r0, 800b79c <__sfmoreglue+0x28>
 800b78a:	2100      	movs	r1, #0
 800b78c:	e9c0 1600 	strd	r1, r6, [r0]
 800b790:	300c      	adds	r0, #12
 800b792:	60a0      	str	r0, [r4, #8]
 800b794:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b798:	f7ff fd16 	bl	800b1c8 <memset>
 800b79c:	4620      	mov	r0, r4
 800b79e:	bd70      	pop	{r4, r5, r6, pc}

0800b7a0 <__sinit>:
 800b7a0:	6983      	ldr	r3, [r0, #24]
 800b7a2:	b510      	push	{r4, lr}
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	bb33      	cbnz	r3, 800b7f6 <__sinit+0x56>
 800b7a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b7ac:	6503      	str	r3, [r0, #80]	; 0x50
 800b7ae:	4b12      	ldr	r3, [pc, #72]	; (800b7f8 <__sinit+0x58>)
 800b7b0:	4a12      	ldr	r2, [pc, #72]	; (800b7fc <__sinit+0x5c>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	6282      	str	r2, [r0, #40]	; 0x28
 800b7b6:	4298      	cmp	r0, r3
 800b7b8:	bf04      	itt	eq
 800b7ba:	2301      	moveq	r3, #1
 800b7bc:	6183      	streq	r3, [r0, #24]
 800b7be:	f000 f81f 	bl	800b800 <__sfp>
 800b7c2:	6060      	str	r0, [r4, #4]
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f000 f81b 	bl	800b800 <__sfp>
 800b7ca:	60a0      	str	r0, [r4, #8]
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f000 f817 	bl	800b800 <__sfp>
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	60e0      	str	r0, [r4, #12]
 800b7d6:	2104      	movs	r1, #4
 800b7d8:	6860      	ldr	r0, [r4, #4]
 800b7da:	f7ff ffa1 	bl	800b720 <std>
 800b7de:	2201      	movs	r2, #1
 800b7e0:	2109      	movs	r1, #9
 800b7e2:	68a0      	ldr	r0, [r4, #8]
 800b7e4:	f7ff ff9c 	bl	800b720 <std>
 800b7e8:	2202      	movs	r2, #2
 800b7ea:	2112      	movs	r1, #18
 800b7ec:	68e0      	ldr	r0, [r4, #12]
 800b7ee:	f7ff ff97 	bl	800b720 <std>
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	61a3      	str	r3, [r4, #24]
 800b7f6:	bd10      	pop	{r4, pc}
 800b7f8:	0800c5a0 	.word	0x0800c5a0
 800b7fc:	0800b769 	.word	0x0800b769

0800b800 <__sfp>:
 800b800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b802:	4b1b      	ldr	r3, [pc, #108]	; (800b870 <__sfp+0x70>)
 800b804:	681e      	ldr	r6, [r3, #0]
 800b806:	69b3      	ldr	r3, [r6, #24]
 800b808:	4607      	mov	r7, r0
 800b80a:	b913      	cbnz	r3, 800b812 <__sfp+0x12>
 800b80c:	4630      	mov	r0, r6
 800b80e:	f7ff ffc7 	bl	800b7a0 <__sinit>
 800b812:	3648      	adds	r6, #72	; 0x48
 800b814:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b818:	3b01      	subs	r3, #1
 800b81a:	d503      	bpl.n	800b824 <__sfp+0x24>
 800b81c:	6833      	ldr	r3, [r6, #0]
 800b81e:	b133      	cbz	r3, 800b82e <__sfp+0x2e>
 800b820:	6836      	ldr	r6, [r6, #0]
 800b822:	e7f7      	b.n	800b814 <__sfp+0x14>
 800b824:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b828:	b16d      	cbz	r5, 800b846 <__sfp+0x46>
 800b82a:	3468      	adds	r4, #104	; 0x68
 800b82c:	e7f4      	b.n	800b818 <__sfp+0x18>
 800b82e:	2104      	movs	r1, #4
 800b830:	4638      	mov	r0, r7
 800b832:	f7ff ff9f 	bl	800b774 <__sfmoreglue>
 800b836:	6030      	str	r0, [r6, #0]
 800b838:	2800      	cmp	r0, #0
 800b83a:	d1f1      	bne.n	800b820 <__sfp+0x20>
 800b83c:	230c      	movs	r3, #12
 800b83e:	603b      	str	r3, [r7, #0]
 800b840:	4604      	mov	r4, r0
 800b842:	4620      	mov	r0, r4
 800b844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b846:	4b0b      	ldr	r3, [pc, #44]	; (800b874 <__sfp+0x74>)
 800b848:	6665      	str	r5, [r4, #100]	; 0x64
 800b84a:	e9c4 5500 	strd	r5, r5, [r4]
 800b84e:	60a5      	str	r5, [r4, #8]
 800b850:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b854:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b858:	2208      	movs	r2, #8
 800b85a:	4629      	mov	r1, r5
 800b85c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b860:	f7ff fcb2 	bl	800b1c8 <memset>
 800b864:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b868:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b86c:	e7e9      	b.n	800b842 <__sfp+0x42>
 800b86e:	bf00      	nop
 800b870:	0800c5a0 	.word	0x0800c5a0
 800b874:	ffff0001 	.word	0xffff0001

0800b878 <_fwalk_reent>:
 800b878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b87c:	4680      	mov	r8, r0
 800b87e:	4689      	mov	r9, r1
 800b880:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b884:	2600      	movs	r6, #0
 800b886:	b914      	cbnz	r4, 800b88e <_fwalk_reent+0x16>
 800b888:	4630      	mov	r0, r6
 800b88a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b88e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b892:	3f01      	subs	r7, #1
 800b894:	d501      	bpl.n	800b89a <_fwalk_reent+0x22>
 800b896:	6824      	ldr	r4, [r4, #0]
 800b898:	e7f5      	b.n	800b886 <_fwalk_reent+0xe>
 800b89a:	89ab      	ldrh	r3, [r5, #12]
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d907      	bls.n	800b8b0 <_fwalk_reent+0x38>
 800b8a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	d003      	beq.n	800b8b0 <_fwalk_reent+0x38>
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	4640      	mov	r0, r8
 800b8ac:	47c8      	blx	r9
 800b8ae:	4306      	orrs	r6, r0
 800b8b0:	3568      	adds	r5, #104	; 0x68
 800b8b2:	e7ee      	b.n	800b892 <_fwalk_reent+0x1a>

0800b8b4 <__swhatbuf_r>:
 800b8b4:	b570      	push	{r4, r5, r6, lr}
 800b8b6:	460e      	mov	r6, r1
 800b8b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8bc:	2900      	cmp	r1, #0
 800b8be:	b096      	sub	sp, #88	; 0x58
 800b8c0:	4614      	mov	r4, r2
 800b8c2:	461d      	mov	r5, r3
 800b8c4:	da07      	bge.n	800b8d6 <__swhatbuf_r+0x22>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	602b      	str	r3, [r5, #0]
 800b8ca:	89b3      	ldrh	r3, [r6, #12]
 800b8cc:	061a      	lsls	r2, r3, #24
 800b8ce:	d410      	bmi.n	800b8f2 <__swhatbuf_r+0x3e>
 800b8d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8d4:	e00e      	b.n	800b8f4 <__swhatbuf_r+0x40>
 800b8d6:	466a      	mov	r2, sp
 800b8d8:	f000 fb80 	bl	800bfdc <_fstat_r>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	dbf2      	blt.n	800b8c6 <__swhatbuf_r+0x12>
 800b8e0:	9a01      	ldr	r2, [sp, #4]
 800b8e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8ea:	425a      	negs	r2, r3
 800b8ec:	415a      	adcs	r2, r3
 800b8ee:	602a      	str	r2, [r5, #0]
 800b8f0:	e7ee      	b.n	800b8d0 <__swhatbuf_r+0x1c>
 800b8f2:	2340      	movs	r3, #64	; 0x40
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	6023      	str	r3, [r4, #0]
 800b8f8:	b016      	add	sp, #88	; 0x58
 800b8fa:	bd70      	pop	{r4, r5, r6, pc}

0800b8fc <__smakebuf_r>:
 800b8fc:	898b      	ldrh	r3, [r1, #12]
 800b8fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b900:	079d      	lsls	r5, r3, #30
 800b902:	4606      	mov	r6, r0
 800b904:	460c      	mov	r4, r1
 800b906:	d507      	bpl.n	800b918 <__smakebuf_r+0x1c>
 800b908:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b90c:	6023      	str	r3, [r4, #0]
 800b90e:	6123      	str	r3, [r4, #16]
 800b910:	2301      	movs	r3, #1
 800b912:	6163      	str	r3, [r4, #20]
 800b914:	b002      	add	sp, #8
 800b916:	bd70      	pop	{r4, r5, r6, pc}
 800b918:	ab01      	add	r3, sp, #4
 800b91a:	466a      	mov	r2, sp
 800b91c:	f7ff ffca 	bl	800b8b4 <__swhatbuf_r>
 800b920:	9900      	ldr	r1, [sp, #0]
 800b922:	4605      	mov	r5, r0
 800b924:	4630      	mov	r0, r6
 800b926:	f7ff fca5 	bl	800b274 <_malloc_r>
 800b92a:	b948      	cbnz	r0, 800b940 <__smakebuf_r+0x44>
 800b92c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b930:	059a      	lsls	r2, r3, #22
 800b932:	d4ef      	bmi.n	800b914 <__smakebuf_r+0x18>
 800b934:	f023 0303 	bic.w	r3, r3, #3
 800b938:	f043 0302 	orr.w	r3, r3, #2
 800b93c:	81a3      	strh	r3, [r4, #12]
 800b93e:	e7e3      	b.n	800b908 <__smakebuf_r+0xc>
 800b940:	4b0d      	ldr	r3, [pc, #52]	; (800b978 <__smakebuf_r+0x7c>)
 800b942:	62b3      	str	r3, [r6, #40]	; 0x28
 800b944:	89a3      	ldrh	r3, [r4, #12]
 800b946:	6020      	str	r0, [r4, #0]
 800b948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b94c:	81a3      	strh	r3, [r4, #12]
 800b94e:	9b00      	ldr	r3, [sp, #0]
 800b950:	6163      	str	r3, [r4, #20]
 800b952:	9b01      	ldr	r3, [sp, #4]
 800b954:	6120      	str	r0, [r4, #16]
 800b956:	b15b      	cbz	r3, 800b970 <__smakebuf_r+0x74>
 800b958:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b95c:	4630      	mov	r0, r6
 800b95e:	f000 fb4f 	bl	800c000 <_isatty_r>
 800b962:	b128      	cbz	r0, 800b970 <__smakebuf_r+0x74>
 800b964:	89a3      	ldrh	r3, [r4, #12]
 800b966:	f023 0303 	bic.w	r3, r3, #3
 800b96a:	f043 0301 	orr.w	r3, r3, #1
 800b96e:	81a3      	strh	r3, [r4, #12]
 800b970:	89a3      	ldrh	r3, [r4, #12]
 800b972:	431d      	orrs	r5, r3
 800b974:	81a5      	strh	r5, [r4, #12]
 800b976:	e7cd      	b.n	800b914 <__smakebuf_r+0x18>
 800b978:	0800b769 	.word	0x0800b769

0800b97c <__malloc_lock>:
 800b97c:	4770      	bx	lr

0800b97e <__malloc_unlock>:
 800b97e:	4770      	bx	lr

0800b980 <__sfputc_r>:
 800b980:	6893      	ldr	r3, [r2, #8]
 800b982:	3b01      	subs	r3, #1
 800b984:	2b00      	cmp	r3, #0
 800b986:	b410      	push	{r4}
 800b988:	6093      	str	r3, [r2, #8]
 800b98a:	da08      	bge.n	800b99e <__sfputc_r+0x1e>
 800b98c:	6994      	ldr	r4, [r2, #24]
 800b98e:	42a3      	cmp	r3, r4
 800b990:	db01      	blt.n	800b996 <__sfputc_r+0x16>
 800b992:	290a      	cmp	r1, #10
 800b994:	d103      	bne.n	800b99e <__sfputc_r+0x1e>
 800b996:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b99a:	f7ff bd51 	b.w	800b440 <__swbuf_r>
 800b99e:	6813      	ldr	r3, [r2, #0]
 800b9a0:	1c58      	adds	r0, r3, #1
 800b9a2:	6010      	str	r0, [r2, #0]
 800b9a4:	7019      	strb	r1, [r3, #0]
 800b9a6:	4608      	mov	r0, r1
 800b9a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <__sfputs_r>:
 800b9ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b0:	4606      	mov	r6, r0
 800b9b2:	460f      	mov	r7, r1
 800b9b4:	4614      	mov	r4, r2
 800b9b6:	18d5      	adds	r5, r2, r3
 800b9b8:	42ac      	cmp	r4, r5
 800b9ba:	d101      	bne.n	800b9c0 <__sfputs_r+0x12>
 800b9bc:	2000      	movs	r0, #0
 800b9be:	e007      	b.n	800b9d0 <__sfputs_r+0x22>
 800b9c0:	463a      	mov	r2, r7
 800b9c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	f7ff ffda 	bl	800b980 <__sfputc_r>
 800b9cc:	1c43      	adds	r3, r0, #1
 800b9ce:	d1f3      	bne.n	800b9b8 <__sfputs_r+0xa>
 800b9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b9d4 <_vfiprintf_r>:
 800b9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d8:	460c      	mov	r4, r1
 800b9da:	b09d      	sub	sp, #116	; 0x74
 800b9dc:	4617      	mov	r7, r2
 800b9de:	461d      	mov	r5, r3
 800b9e0:	4606      	mov	r6, r0
 800b9e2:	b118      	cbz	r0, 800b9ec <_vfiprintf_r+0x18>
 800b9e4:	6983      	ldr	r3, [r0, #24]
 800b9e6:	b90b      	cbnz	r3, 800b9ec <_vfiprintf_r+0x18>
 800b9e8:	f7ff feda 	bl	800b7a0 <__sinit>
 800b9ec:	4b7c      	ldr	r3, [pc, #496]	; (800bbe0 <_vfiprintf_r+0x20c>)
 800b9ee:	429c      	cmp	r4, r3
 800b9f0:	d158      	bne.n	800baa4 <_vfiprintf_r+0xd0>
 800b9f2:	6874      	ldr	r4, [r6, #4]
 800b9f4:	89a3      	ldrh	r3, [r4, #12]
 800b9f6:	0718      	lsls	r0, r3, #28
 800b9f8:	d55e      	bpl.n	800bab8 <_vfiprintf_r+0xe4>
 800b9fa:	6923      	ldr	r3, [r4, #16]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d05b      	beq.n	800bab8 <_vfiprintf_r+0xe4>
 800ba00:	2300      	movs	r3, #0
 800ba02:	9309      	str	r3, [sp, #36]	; 0x24
 800ba04:	2320      	movs	r3, #32
 800ba06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba0a:	2330      	movs	r3, #48	; 0x30
 800ba0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba10:	9503      	str	r5, [sp, #12]
 800ba12:	f04f 0b01 	mov.w	fp, #1
 800ba16:	46b8      	mov	r8, r7
 800ba18:	4645      	mov	r5, r8
 800ba1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ba1e:	b10b      	cbz	r3, 800ba24 <_vfiprintf_r+0x50>
 800ba20:	2b25      	cmp	r3, #37	; 0x25
 800ba22:	d154      	bne.n	800bace <_vfiprintf_r+0xfa>
 800ba24:	ebb8 0a07 	subs.w	sl, r8, r7
 800ba28:	d00b      	beq.n	800ba42 <_vfiprintf_r+0x6e>
 800ba2a:	4653      	mov	r3, sl
 800ba2c:	463a      	mov	r2, r7
 800ba2e:	4621      	mov	r1, r4
 800ba30:	4630      	mov	r0, r6
 800ba32:	f7ff ffbc 	bl	800b9ae <__sfputs_r>
 800ba36:	3001      	adds	r0, #1
 800ba38:	f000 80c2 	beq.w	800bbc0 <_vfiprintf_r+0x1ec>
 800ba3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba3e:	4453      	add	r3, sl
 800ba40:	9309      	str	r3, [sp, #36]	; 0x24
 800ba42:	f898 3000 	ldrb.w	r3, [r8]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	f000 80ba 	beq.w	800bbc0 <_vfiprintf_r+0x1ec>
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba56:	9304      	str	r3, [sp, #16]
 800ba58:	9307      	str	r3, [sp, #28]
 800ba5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba5e:	931a      	str	r3, [sp, #104]	; 0x68
 800ba60:	46a8      	mov	r8, r5
 800ba62:	2205      	movs	r2, #5
 800ba64:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ba68:	485e      	ldr	r0, [pc, #376]	; (800bbe4 <_vfiprintf_r+0x210>)
 800ba6a:	f7f4 fbd9 	bl	8000220 <memchr>
 800ba6e:	9b04      	ldr	r3, [sp, #16]
 800ba70:	bb78      	cbnz	r0, 800bad2 <_vfiprintf_r+0xfe>
 800ba72:	06d9      	lsls	r1, r3, #27
 800ba74:	bf44      	itt	mi
 800ba76:	2220      	movmi	r2, #32
 800ba78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ba7c:	071a      	lsls	r2, r3, #28
 800ba7e:	bf44      	itt	mi
 800ba80:	222b      	movmi	r2, #43	; 0x2b
 800ba82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ba86:	782a      	ldrb	r2, [r5, #0]
 800ba88:	2a2a      	cmp	r2, #42	; 0x2a
 800ba8a:	d02a      	beq.n	800bae2 <_vfiprintf_r+0x10e>
 800ba8c:	9a07      	ldr	r2, [sp, #28]
 800ba8e:	46a8      	mov	r8, r5
 800ba90:	2000      	movs	r0, #0
 800ba92:	250a      	movs	r5, #10
 800ba94:	4641      	mov	r1, r8
 800ba96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba9a:	3b30      	subs	r3, #48	; 0x30
 800ba9c:	2b09      	cmp	r3, #9
 800ba9e:	d969      	bls.n	800bb74 <_vfiprintf_r+0x1a0>
 800baa0:	b360      	cbz	r0, 800bafc <_vfiprintf_r+0x128>
 800baa2:	e024      	b.n	800baee <_vfiprintf_r+0x11a>
 800baa4:	4b50      	ldr	r3, [pc, #320]	; (800bbe8 <_vfiprintf_r+0x214>)
 800baa6:	429c      	cmp	r4, r3
 800baa8:	d101      	bne.n	800baae <_vfiprintf_r+0xda>
 800baaa:	68b4      	ldr	r4, [r6, #8]
 800baac:	e7a2      	b.n	800b9f4 <_vfiprintf_r+0x20>
 800baae:	4b4f      	ldr	r3, [pc, #316]	; (800bbec <_vfiprintf_r+0x218>)
 800bab0:	429c      	cmp	r4, r3
 800bab2:	bf08      	it	eq
 800bab4:	68f4      	ldreq	r4, [r6, #12]
 800bab6:	e79d      	b.n	800b9f4 <_vfiprintf_r+0x20>
 800bab8:	4621      	mov	r1, r4
 800baba:	4630      	mov	r0, r6
 800babc:	f7ff fd12 	bl	800b4e4 <__swsetup_r>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	d09d      	beq.n	800ba00 <_vfiprintf_r+0x2c>
 800bac4:	f04f 30ff 	mov.w	r0, #4294967295
 800bac8:	b01d      	add	sp, #116	; 0x74
 800baca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bace:	46a8      	mov	r8, r5
 800bad0:	e7a2      	b.n	800ba18 <_vfiprintf_r+0x44>
 800bad2:	4a44      	ldr	r2, [pc, #272]	; (800bbe4 <_vfiprintf_r+0x210>)
 800bad4:	1a80      	subs	r0, r0, r2
 800bad6:	fa0b f000 	lsl.w	r0, fp, r0
 800bada:	4318      	orrs	r0, r3
 800badc:	9004      	str	r0, [sp, #16]
 800bade:	4645      	mov	r5, r8
 800bae0:	e7be      	b.n	800ba60 <_vfiprintf_r+0x8c>
 800bae2:	9a03      	ldr	r2, [sp, #12]
 800bae4:	1d11      	adds	r1, r2, #4
 800bae6:	6812      	ldr	r2, [r2, #0]
 800bae8:	9103      	str	r1, [sp, #12]
 800baea:	2a00      	cmp	r2, #0
 800baec:	db01      	blt.n	800baf2 <_vfiprintf_r+0x11e>
 800baee:	9207      	str	r2, [sp, #28]
 800baf0:	e004      	b.n	800bafc <_vfiprintf_r+0x128>
 800baf2:	4252      	negs	r2, r2
 800baf4:	f043 0302 	orr.w	r3, r3, #2
 800baf8:	9207      	str	r2, [sp, #28]
 800bafa:	9304      	str	r3, [sp, #16]
 800bafc:	f898 3000 	ldrb.w	r3, [r8]
 800bb00:	2b2e      	cmp	r3, #46	; 0x2e
 800bb02:	d10e      	bne.n	800bb22 <_vfiprintf_r+0x14e>
 800bb04:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bb08:	2b2a      	cmp	r3, #42	; 0x2a
 800bb0a:	d138      	bne.n	800bb7e <_vfiprintf_r+0x1aa>
 800bb0c:	9b03      	ldr	r3, [sp, #12]
 800bb0e:	1d1a      	adds	r2, r3, #4
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	9203      	str	r2, [sp, #12]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	bfb8      	it	lt
 800bb18:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb1c:	f108 0802 	add.w	r8, r8, #2
 800bb20:	9305      	str	r3, [sp, #20]
 800bb22:	4d33      	ldr	r5, [pc, #204]	; (800bbf0 <_vfiprintf_r+0x21c>)
 800bb24:	f898 1000 	ldrb.w	r1, [r8]
 800bb28:	2203      	movs	r2, #3
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	f7f4 fb78 	bl	8000220 <memchr>
 800bb30:	b140      	cbz	r0, 800bb44 <_vfiprintf_r+0x170>
 800bb32:	2340      	movs	r3, #64	; 0x40
 800bb34:	1b40      	subs	r0, r0, r5
 800bb36:	fa03 f000 	lsl.w	r0, r3, r0
 800bb3a:	9b04      	ldr	r3, [sp, #16]
 800bb3c:	4303      	orrs	r3, r0
 800bb3e:	f108 0801 	add.w	r8, r8, #1
 800bb42:	9304      	str	r3, [sp, #16]
 800bb44:	f898 1000 	ldrb.w	r1, [r8]
 800bb48:	482a      	ldr	r0, [pc, #168]	; (800bbf4 <_vfiprintf_r+0x220>)
 800bb4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb4e:	2206      	movs	r2, #6
 800bb50:	f108 0701 	add.w	r7, r8, #1
 800bb54:	f7f4 fb64 	bl	8000220 <memchr>
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d037      	beq.n	800bbcc <_vfiprintf_r+0x1f8>
 800bb5c:	4b26      	ldr	r3, [pc, #152]	; (800bbf8 <_vfiprintf_r+0x224>)
 800bb5e:	bb1b      	cbnz	r3, 800bba8 <_vfiprintf_r+0x1d4>
 800bb60:	9b03      	ldr	r3, [sp, #12]
 800bb62:	3307      	adds	r3, #7
 800bb64:	f023 0307 	bic.w	r3, r3, #7
 800bb68:	3308      	adds	r3, #8
 800bb6a:	9303      	str	r3, [sp, #12]
 800bb6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb6e:	444b      	add	r3, r9
 800bb70:	9309      	str	r3, [sp, #36]	; 0x24
 800bb72:	e750      	b.n	800ba16 <_vfiprintf_r+0x42>
 800bb74:	fb05 3202 	mla	r2, r5, r2, r3
 800bb78:	2001      	movs	r0, #1
 800bb7a:	4688      	mov	r8, r1
 800bb7c:	e78a      	b.n	800ba94 <_vfiprintf_r+0xc0>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	f108 0801 	add.w	r8, r8, #1
 800bb84:	9305      	str	r3, [sp, #20]
 800bb86:	4619      	mov	r1, r3
 800bb88:	250a      	movs	r5, #10
 800bb8a:	4640      	mov	r0, r8
 800bb8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb90:	3a30      	subs	r2, #48	; 0x30
 800bb92:	2a09      	cmp	r2, #9
 800bb94:	d903      	bls.n	800bb9e <_vfiprintf_r+0x1ca>
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d0c3      	beq.n	800bb22 <_vfiprintf_r+0x14e>
 800bb9a:	9105      	str	r1, [sp, #20]
 800bb9c:	e7c1      	b.n	800bb22 <_vfiprintf_r+0x14e>
 800bb9e:	fb05 2101 	mla	r1, r5, r1, r2
 800bba2:	2301      	movs	r3, #1
 800bba4:	4680      	mov	r8, r0
 800bba6:	e7f0      	b.n	800bb8a <_vfiprintf_r+0x1b6>
 800bba8:	ab03      	add	r3, sp, #12
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	4622      	mov	r2, r4
 800bbae:	4b13      	ldr	r3, [pc, #76]	; (800bbfc <_vfiprintf_r+0x228>)
 800bbb0:	a904      	add	r1, sp, #16
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	f3af 8000 	nop.w
 800bbb8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bbbc:	4681      	mov	r9, r0
 800bbbe:	d1d5      	bne.n	800bb6c <_vfiprintf_r+0x198>
 800bbc0:	89a3      	ldrh	r3, [r4, #12]
 800bbc2:	065b      	lsls	r3, r3, #25
 800bbc4:	f53f af7e 	bmi.w	800bac4 <_vfiprintf_r+0xf0>
 800bbc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbca:	e77d      	b.n	800bac8 <_vfiprintf_r+0xf4>
 800bbcc:	ab03      	add	r3, sp, #12
 800bbce:	9300      	str	r3, [sp, #0]
 800bbd0:	4622      	mov	r2, r4
 800bbd2:	4b0a      	ldr	r3, [pc, #40]	; (800bbfc <_vfiprintf_r+0x228>)
 800bbd4:	a904      	add	r1, sp, #16
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	f000 f888 	bl	800bcec <_printf_i>
 800bbdc:	e7ec      	b.n	800bbb8 <_vfiprintf_r+0x1e4>
 800bbde:	bf00      	nop
 800bbe0:	0800c5c4 	.word	0x0800c5c4
 800bbe4:	0800c604 	.word	0x0800c604
 800bbe8:	0800c5e4 	.word	0x0800c5e4
 800bbec:	0800c5a4 	.word	0x0800c5a4
 800bbf0:	0800c60a 	.word	0x0800c60a
 800bbf4:	0800c60e 	.word	0x0800c60e
 800bbf8:	00000000 	.word	0x00000000
 800bbfc:	0800b9af 	.word	0x0800b9af

0800bc00 <_printf_common>:
 800bc00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc04:	4691      	mov	r9, r2
 800bc06:	461f      	mov	r7, r3
 800bc08:	688a      	ldr	r2, [r1, #8]
 800bc0a:	690b      	ldr	r3, [r1, #16]
 800bc0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc10:	4293      	cmp	r3, r2
 800bc12:	bfb8      	it	lt
 800bc14:	4613      	movlt	r3, r2
 800bc16:	f8c9 3000 	str.w	r3, [r9]
 800bc1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc1e:	4606      	mov	r6, r0
 800bc20:	460c      	mov	r4, r1
 800bc22:	b112      	cbz	r2, 800bc2a <_printf_common+0x2a>
 800bc24:	3301      	adds	r3, #1
 800bc26:	f8c9 3000 	str.w	r3, [r9]
 800bc2a:	6823      	ldr	r3, [r4, #0]
 800bc2c:	0699      	lsls	r1, r3, #26
 800bc2e:	bf42      	ittt	mi
 800bc30:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bc34:	3302      	addmi	r3, #2
 800bc36:	f8c9 3000 	strmi.w	r3, [r9]
 800bc3a:	6825      	ldr	r5, [r4, #0]
 800bc3c:	f015 0506 	ands.w	r5, r5, #6
 800bc40:	d107      	bne.n	800bc52 <_printf_common+0x52>
 800bc42:	f104 0a19 	add.w	sl, r4, #25
 800bc46:	68e3      	ldr	r3, [r4, #12]
 800bc48:	f8d9 2000 	ldr.w	r2, [r9]
 800bc4c:	1a9b      	subs	r3, r3, r2
 800bc4e:	42ab      	cmp	r3, r5
 800bc50:	dc28      	bgt.n	800bca4 <_printf_common+0xa4>
 800bc52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bc56:	6822      	ldr	r2, [r4, #0]
 800bc58:	3300      	adds	r3, #0
 800bc5a:	bf18      	it	ne
 800bc5c:	2301      	movne	r3, #1
 800bc5e:	0692      	lsls	r2, r2, #26
 800bc60:	d42d      	bmi.n	800bcbe <_printf_common+0xbe>
 800bc62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc66:	4639      	mov	r1, r7
 800bc68:	4630      	mov	r0, r6
 800bc6a:	47c0      	blx	r8
 800bc6c:	3001      	adds	r0, #1
 800bc6e:	d020      	beq.n	800bcb2 <_printf_common+0xb2>
 800bc70:	6823      	ldr	r3, [r4, #0]
 800bc72:	68e5      	ldr	r5, [r4, #12]
 800bc74:	f8d9 2000 	ldr.w	r2, [r9]
 800bc78:	f003 0306 	and.w	r3, r3, #6
 800bc7c:	2b04      	cmp	r3, #4
 800bc7e:	bf08      	it	eq
 800bc80:	1aad      	subeq	r5, r5, r2
 800bc82:	68a3      	ldr	r3, [r4, #8]
 800bc84:	6922      	ldr	r2, [r4, #16]
 800bc86:	bf0c      	ite	eq
 800bc88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc8c:	2500      	movne	r5, #0
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	bfc4      	itt	gt
 800bc92:	1a9b      	subgt	r3, r3, r2
 800bc94:	18ed      	addgt	r5, r5, r3
 800bc96:	f04f 0900 	mov.w	r9, #0
 800bc9a:	341a      	adds	r4, #26
 800bc9c:	454d      	cmp	r5, r9
 800bc9e:	d11a      	bne.n	800bcd6 <_printf_common+0xd6>
 800bca0:	2000      	movs	r0, #0
 800bca2:	e008      	b.n	800bcb6 <_printf_common+0xb6>
 800bca4:	2301      	movs	r3, #1
 800bca6:	4652      	mov	r2, sl
 800bca8:	4639      	mov	r1, r7
 800bcaa:	4630      	mov	r0, r6
 800bcac:	47c0      	blx	r8
 800bcae:	3001      	adds	r0, #1
 800bcb0:	d103      	bne.n	800bcba <_printf_common+0xba>
 800bcb2:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcba:	3501      	adds	r5, #1
 800bcbc:	e7c3      	b.n	800bc46 <_printf_common+0x46>
 800bcbe:	18e1      	adds	r1, r4, r3
 800bcc0:	1c5a      	adds	r2, r3, #1
 800bcc2:	2030      	movs	r0, #48	; 0x30
 800bcc4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bcc8:	4422      	add	r2, r4
 800bcca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bcce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bcd2:	3302      	adds	r3, #2
 800bcd4:	e7c5      	b.n	800bc62 <_printf_common+0x62>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	4622      	mov	r2, r4
 800bcda:	4639      	mov	r1, r7
 800bcdc:	4630      	mov	r0, r6
 800bcde:	47c0      	blx	r8
 800bce0:	3001      	adds	r0, #1
 800bce2:	d0e6      	beq.n	800bcb2 <_printf_common+0xb2>
 800bce4:	f109 0901 	add.w	r9, r9, #1
 800bce8:	e7d8      	b.n	800bc9c <_printf_common+0x9c>
	...

0800bcec <_printf_i>:
 800bcec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bcf0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bcf4:	460c      	mov	r4, r1
 800bcf6:	7e09      	ldrb	r1, [r1, #24]
 800bcf8:	b085      	sub	sp, #20
 800bcfa:	296e      	cmp	r1, #110	; 0x6e
 800bcfc:	4617      	mov	r7, r2
 800bcfe:	4606      	mov	r6, r0
 800bd00:	4698      	mov	r8, r3
 800bd02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd04:	f000 80b3 	beq.w	800be6e <_printf_i+0x182>
 800bd08:	d822      	bhi.n	800bd50 <_printf_i+0x64>
 800bd0a:	2963      	cmp	r1, #99	; 0x63
 800bd0c:	d036      	beq.n	800bd7c <_printf_i+0x90>
 800bd0e:	d80a      	bhi.n	800bd26 <_printf_i+0x3a>
 800bd10:	2900      	cmp	r1, #0
 800bd12:	f000 80b9 	beq.w	800be88 <_printf_i+0x19c>
 800bd16:	2958      	cmp	r1, #88	; 0x58
 800bd18:	f000 8083 	beq.w	800be22 <_printf_i+0x136>
 800bd1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bd24:	e032      	b.n	800bd8c <_printf_i+0xa0>
 800bd26:	2964      	cmp	r1, #100	; 0x64
 800bd28:	d001      	beq.n	800bd2e <_printf_i+0x42>
 800bd2a:	2969      	cmp	r1, #105	; 0x69
 800bd2c:	d1f6      	bne.n	800bd1c <_printf_i+0x30>
 800bd2e:	6820      	ldr	r0, [r4, #0]
 800bd30:	6813      	ldr	r3, [r2, #0]
 800bd32:	0605      	lsls	r5, r0, #24
 800bd34:	f103 0104 	add.w	r1, r3, #4
 800bd38:	d52a      	bpl.n	800bd90 <_printf_i+0xa4>
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	6011      	str	r1, [r2, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	da03      	bge.n	800bd4a <_printf_i+0x5e>
 800bd42:	222d      	movs	r2, #45	; 0x2d
 800bd44:	425b      	negs	r3, r3
 800bd46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bd4a:	486f      	ldr	r0, [pc, #444]	; (800bf08 <_printf_i+0x21c>)
 800bd4c:	220a      	movs	r2, #10
 800bd4e:	e039      	b.n	800bdc4 <_printf_i+0xd8>
 800bd50:	2973      	cmp	r1, #115	; 0x73
 800bd52:	f000 809d 	beq.w	800be90 <_printf_i+0x1a4>
 800bd56:	d808      	bhi.n	800bd6a <_printf_i+0x7e>
 800bd58:	296f      	cmp	r1, #111	; 0x6f
 800bd5a:	d020      	beq.n	800bd9e <_printf_i+0xb2>
 800bd5c:	2970      	cmp	r1, #112	; 0x70
 800bd5e:	d1dd      	bne.n	800bd1c <_printf_i+0x30>
 800bd60:	6823      	ldr	r3, [r4, #0]
 800bd62:	f043 0320 	orr.w	r3, r3, #32
 800bd66:	6023      	str	r3, [r4, #0]
 800bd68:	e003      	b.n	800bd72 <_printf_i+0x86>
 800bd6a:	2975      	cmp	r1, #117	; 0x75
 800bd6c:	d017      	beq.n	800bd9e <_printf_i+0xb2>
 800bd6e:	2978      	cmp	r1, #120	; 0x78
 800bd70:	d1d4      	bne.n	800bd1c <_printf_i+0x30>
 800bd72:	2378      	movs	r3, #120	; 0x78
 800bd74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd78:	4864      	ldr	r0, [pc, #400]	; (800bf0c <_printf_i+0x220>)
 800bd7a:	e055      	b.n	800be28 <_printf_i+0x13c>
 800bd7c:	6813      	ldr	r3, [r2, #0]
 800bd7e:	1d19      	adds	r1, r3, #4
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	6011      	str	r1, [r2, #0]
 800bd84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e08c      	b.n	800beaa <_printf_i+0x1be>
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	6011      	str	r1, [r2, #0]
 800bd94:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bd98:	bf18      	it	ne
 800bd9a:	b21b      	sxthne	r3, r3
 800bd9c:	e7cf      	b.n	800bd3e <_printf_i+0x52>
 800bd9e:	6813      	ldr	r3, [r2, #0]
 800bda0:	6825      	ldr	r5, [r4, #0]
 800bda2:	1d18      	adds	r0, r3, #4
 800bda4:	6010      	str	r0, [r2, #0]
 800bda6:	0628      	lsls	r0, r5, #24
 800bda8:	d501      	bpl.n	800bdae <_printf_i+0xc2>
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	e002      	b.n	800bdb4 <_printf_i+0xc8>
 800bdae:	0668      	lsls	r0, r5, #25
 800bdb0:	d5fb      	bpl.n	800bdaa <_printf_i+0xbe>
 800bdb2:	881b      	ldrh	r3, [r3, #0]
 800bdb4:	4854      	ldr	r0, [pc, #336]	; (800bf08 <_printf_i+0x21c>)
 800bdb6:	296f      	cmp	r1, #111	; 0x6f
 800bdb8:	bf14      	ite	ne
 800bdba:	220a      	movne	r2, #10
 800bdbc:	2208      	moveq	r2, #8
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bdc4:	6865      	ldr	r5, [r4, #4]
 800bdc6:	60a5      	str	r5, [r4, #8]
 800bdc8:	2d00      	cmp	r5, #0
 800bdca:	f2c0 8095 	blt.w	800bef8 <_printf_i+0x20c>
 800bdce:	6821      	ldr	r1, [r4, #0]
 800bdd0:	f021 0104 	bic.w	r1, r1, #4
 800bdd4:	6021      	str	r1, [r4, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d13d      	bne.n	800be56 <_printf_i+0x16a>
 800bdda:	2d00      	cmp	r5, #0
 800bddc:	f040 808e 	bne.w	800befc <_printf_i+0x210>
 800bde0:	4665      	mov	r5, ip
 800bde2:	2a08      	cmp	r2, #8
 800bde4:	d10b      	bne.n	800bdfe <_printf_i+0x112>
 800bde6:	6823      	ldr	r3, [r4, #0]
 800bde8:	07db      	lsls	r3, r3, #31
 800bdea:	d508      	bpl.n	800bdfe <_printf_i+0x112>
 800bdec:	6923      	ldr	r3, [r4, #16]
 800bdee:	6862      	ldr	r2, [r4, #4]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	bfde      	ittt	le
 800bdf4:	2330      	movle	r3, #48	; 0x30
 800bdf6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bdfa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bdfe:	ebac 0305 	sub.w	r3, ip, r5
 800be02:	6123      	str	r3, [r4, #16]
 800be04:	f8cd 8000 	str.w	r8, [sp]
 800be08:	463b      	mov	r3, r7
 800be0a:	aa03      	add	r2, sp, #12
 800be0c:	4621      	mov	r1, r4
 800be0e:	4630      	mov	r0, r6
 800be10:	f7ff fef6 	bl	800bc00 <_printf_common>
 800be14:	3001      	adds	r0, #1
 800be16:	d14d      	bne.n	800beb4 <_printf_i+0x1c8>
 800be18:	f04f 30ff 	mov.w	r0, #4294967295
 800be1c:	b005      	add	sp, #20
 800be1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be22:	4839      	ldr	r0, [pc, #228]	; (800bf08 <_printf_i+0x21c>)
 800be24:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800be28:	6813      	ldr	r3, [r2, #0]
 800be2a:	6821      	ldr	r1, [r4, #0]
 800be2c:	1d1d      	adds	r5, r3, #4
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	6015      	str	r5, [r2, #0]
 800be32:	060a      	lsls	r2, r1, #24
 800be34:	d50b      	bpl.n	800be4e <_printf_i+0x162>
 800be36:	07ca      	lsls	r2, r1, #31
 800be38:	bf44      	itt	mi
 800be3a:	f041 0120 	orrmi.w	r1, r1, #32
 800be3e:	6021      	strmi	r1, [r4, #0]
 800be40:	b91b      	cbnz	r3, 800be4a <_printf_i+0x15e>
 800be42:	6822      	ldr	r2, [r4, #0]
 800be44:	f022 0220 	bic.w	r2, r2, #32
 800be48:	6022      	str	r2, [r4, #0]
 800be4a:	2210      	movs	r2, #16
 800be4c:	e7b7      	b.n	800bdbe <_printf_i+0xd2>
 800be4e:	064d      	lsls	r5, r1, #25
 800be50:	bf48      	it	mi
 800be52:	b29b      	uxthmi	r3, r3
 800be54:	e7ef      	b.n	800be36 <_printf_i+0x14a>
 800be56:	4665      	mov	r5, ip
 800be58:	fbb3 f1f2 	udiv	r1, r3, r2
 800be5c:	fb02 3311 	mls	r3, r2, r1, r3
 800be60:	5cc3      	ldrb	r3, [r0, r3]
 800be62:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800be66:	460b      	mov	r3, r1
 800be68:	2900      	cmp	r1, #0
 800be6a:	d1f5      	bne.n	800be58 <_printf_i+0x16c>
 800be6c:	e7b9      	b.n	800bde2 <_printf_i+0xf6>
 800be6e:	6813      	ldr	r3, [r2, #0]
 800be70:	6825      	ldr	r5, [r4, #0]
 800be72:	6961      	ldr	r1, [r4, #20]
 800be74:	1d18      	adds	r0, r3, #4
 800be76:	6010      	str	r0, [r2, #0]
 800be78:	0628      	lsls	r0, r5, #24
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	d501      	bpl.n	800be82 <_printf_i+0x196>
 800be7e:	6019      	str	r1, [r3, #0]
 800be80:	e002      	b.n	800be88 <_printf_i+0x19c>
 800be82:	066a      	lsls	r2, r5, #25
 800be84:	d5fb      	bpl.n	800be7e <_printf_i+0x192>
 800be86:	8019      	strh	r1, [r3, #0]
 800be88:	2300      	movs	r3, #0
 800be8a:	6123      	str	r3, [r4, #16]
 800be8c:	4665      	mov	r5, ip
 800be8e:	e7b9      	b.n	800be04 <_printf_i+0x118>
 800be90:	6813      	ldr	r3, [r2, #0]
 800be92:	1d19      	adds	r1, r3, #4
 800be94:	6011      	str	r1, [r2, #0]
 800be96:	681d      	ldr	r5, [r3, #0]
 800be98:	6862      	ldr	r2, [r4, #4]
 800be9a:	2100      	movs	r1, #0
 800be9c:	4628      	mov	r0, r5
 800be9e:	f7f4 f9bf 	bl	8000220 <memchr>
 800bea2:	b108      	cbz	r0, 800bea8 <_printf_i+0x1bc>
 800bea4:	1b40      	subs	r0, r0, r5
 800bea6:	6060      	str	r0, [r4, #4]
 800bea8:	6863      	ldr	r3, [r4, #4]
 800beaa:	6123      	str	r3, [r4, #16]
 800beac:	2300      	movs	r3, #0
 800beae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800beb2:	e7a7      	b.n	800be04 <_printf_i+0x118>
 800beb4:	6923      	ldr	r3, [r4, #16]
 800beb6:	462a      	mov	r2, r5
 800beb8:	4639      	mov	r1, r7
 800beba:	4630      	mov	r0, r6
 800bebc:	47c0      	blx	r8
 800bebe:	3001      	adds	r0, #1
 800bec0:	d0aa      	beq.n	800be18 <_printf_i+0x12c>
 800bec2:	6823      	ldr	r3, [r4, #0]
 800bec4:	079b      	lsls	r3, r3, #30
 800bec6:	d413      	bmi.n	800bef0 <_printf_i+0x204>
 800bec8:	68e0      	ldr	r0, [r4, #12]
 800beca:	9b03      	ldr	r3, [sp, #12]
 800becc:	4298      	cmp	r0, r3
 800bece:	bfb8      	it	lt
 800bed0:	4618      	movlt	r0, r3
 800bed2:	e7a3      	b.n	800be1c <_printf_i+0x130>
 800bed4:	2301      	movs	r3, #1
 800bed6:	464a      	mov	r2, r9
 800bed8:	4639      	mov	r1, r7
 800beda:	4630      	mov	r0, r6
 800bedc:	47c0      	blx	r8
 800bede:	3001      	adds	r0, #1
 800bee0:	d09a      	beq.n	800be18 <_printf_i+0x12c>
 800bee2:	3501      	adds	r5, #1
 800bee4:	68e3      	ldr	r3, [r4, #12]
 800bee6:	9a03      	ldr	r2, [sp, #12]
 800bee8:	1a9b      	subs	r3, r3, r2
 800beea:	42ab      	cmp	r3, r5
 800beec:	dcf2      	bgt.n	800bed4 <_printf_i+0x1e8>
 800beee:	e7eb      	b.n	800bec8 <_printf_i+0x1dc>
 800bef0:	2500      	movs	r5, #0
 800bef2:	f104 0919 	add.w	r9, r4, #25
 800bef6:	e7f5      	b.n	800bee4 <_printf_i+0x1f8>
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d1ac      	bne.n	800be56 <_printf_i+0x16a>
 800befc:	7803      	ldrb	r3, [r0, #0]
 800befe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf06:	e76c      	b.n	800bde2 <_printf_i+0xf6>
 800bf08:	0800c615 	.word	0x0800c615
 800bf0c:	0800c626 	.word	0x0800c626

0800bf10 <__sread>:
 800bf10:	b510      	push	{r4, lr}
 800bf12:	460c      	mov	r4, r1
 800bf14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf18:	f000 f894 	bl	800c044 <_read_r>
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	bfab      	itete	ge
 800bf20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf22:	89a3      	ldrhlt	r3, [r4, #12]
 800bf24:	181b      	addge	r3, r3, r0
 800bf26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf2a:	bfac      	ite	ge
 800bf2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf2e:	81a3      	strhlt	r3, [r4, #12]
 800bf30:	bd10      	pop	{r4, pc}

0800bf32 <__swrite>:
 800bf32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf36:	461f      	mov	r7, r3
 800bf38:	898b      	ldrh	r3, [r1, #12]
 800bf3a:	05db      	lsls	r3, r3, #23
 800bf3c:	4605      	mov	r5, r0
 800bf3e:	460c      	mov	r4, r1
 800bf40:	4616      	mov	r6, r2
 800bf42:	d505      	bpl.n	800bf50 <__swrite+0x1e>
 800bf44:	2302      	movs	r3, #2
 800bf46:	2200      	movs	r2, #0
 800bf48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf4c:	f000 f868 	bl	800c020 <_lseek_r>
 800bf50:	89a3      	ldrh	r3, [r4, #12]
 800bf52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf5a:	81a3      	strh	r3, [r4, #12]
 800bf5c:	4632      	mov	r2, r6
 800bf5e:	463b      	mov	r3, r7
 800bf60:	4628      	mov	r0, r5
 800bf62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf66:	f000 b817 	b.w	800bf98 <_write_r>

0800bf6a <__sseek>:
 800bf6a:	b510      	push	{r4, lr}
 800bf6c:	460c      	mov	r4, r1
 800bf6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf72:	f000 f855 	bl	800c020 <_lseek_r>
 800bf76:	1c43      	adds	r3, r0, #1
 800bf78:	89a3      	ldrh	r3, [r4, #12]
 800bf7a:	bf15      	itete	ne
 800bf7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf86:	81a3      	strheq	r3, [r4, #12]
 800bf88:	bf18      	it	ne
 800bf8a:	81a3      	strhne	r3, [r4, #12]
 800bf8c:	bd10      	pop	{r4, pc}

0800bf8e <__sclose>:
 800bf8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf92:	f000 b813 	b.w	800bfbc <_close_r>
	...

0800bf98 <_write_r>:
 800bf98:	b538      	push	{r3, r4, r5, lr}
 800bf9a:	4c07      	ldr	r4, [pc, #28]	; (800bfb8 <_write_r+0x20>)
 800bf9c:	4605      	mov	r5, r0
 800bf9e:	4608      	mov	r0, r1
 800bfa0:	4611      	mov	r1, r2
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	6022      	str	r2, [r4, #0]
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	f7f6 f9c9 	bl	800233e <_write>
 800bfac:	1c43      	adds	r3, r0, #1
 800bfae:	d102      	bne.n	800bfb6 <_write_r+0x1e>
 800bfb0:	6823      	ldr	r3, [r4, #0]
 800bfb2:	b103      	cbz	r3, 800bfb6 <_write_r+0x1e>
 800bfb4:	602b      	str	r3, [r5, #0]
 800bfb6:	bd38      	pop	{r3, r4, r5, pc}
 800bfb8:	2000c974 	.word	0x2000c974

0800bfbc <_close_r>:
 800bfbc:	b538      	push	{r3, r4, r5, lr}
 800bfbe:	4c06      	ldr	r4, [pc, #24]	; (800bfd8 <_close_r+0x1c>)
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	4605      	mov	r5, r0
 800bfc4:	4608      	mov	r0, r1
 800bfc6:	6023      	str	r3, [r4, #0]
 800bfc8:	f7f6 f9d5 	bl	8002376 <_close>
 800bfcc:	1c43      	adds	r3, r0, #1
 800bfce:	d102      	bne.n	800bfd6 <_close_r+0x1a>
 800bfd0:	6823      	ldr	r3, [r4, #0]
 800bfd2:	b103      	cbz	r3, 800bfd6 <_close_r+0x1a>
 800bfd4:	602b      	str	r3, [r5, #0]
 800bfd6:	bd38      	pop	{r3, r4, r5, pc}
 800bfd8:	2000c974 	.word	0x2000c974

0800bfdc <_fstat_r>:
 800bfdc:	b538      	push	{r3, r4, r5, lr}
 800bfde:	4c07      	ldr	r4, [pc, #28]	; (800bffc <_fstat_r+0x20>)
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	4605      	mov	r5, r0
 800bfe4:	4608      	mov	r0, r1
 800bfe6:	4611      	mov	r1, r2
 800bfe8:	6023      	str	r3, [r4, #0]
 800bfea:	f7f6 f9d0 	bl	800238e <_fstat>
 800bfee:	1c43      	adds	r3, r0, #1
 800bff0:	d102      	bne.n	800bff8 <_fstat_r+0x1c>
 800bff2:	6823      	ldr	r3, [r4, #0]
 800bff4:	b103      	cbz	r3, 800bff8 <_fstat_r+0x1c>
 800bff6:	602b      	str	r3, [r5, #0]
 800bff8:	bd38      	pop	{r3, r4, r5, pc}
 800bffa:	bf00      	nop
 800bffc:	2000c974 	.word	0x2000c974

0800c000 <_isatty_r>:
 800c000:	b538      	push	{r3, r4, r5, lr}
 800c002:	4c06      	ldr	r4, [pc, #24]	; (800c01c <_isatty_r+0x1c>)
 800c004:	2300      	movs	r3, #0
 800c006:	4605      	mov	r5, r0
 800c008:	4608      	mov	r0, r1
 800c00a:	6023      	str	r3, [r4, #0]
 800c00c:	f7f6 f9cf 	bl	80023ae <_isatty>
 800c010:	1c43      	adds	r3, r0, #1
 800c012:	d102      	bne.n	800c01a <_isatty_r+0x1a>
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	b103      	cbz	r3, 800c01a <_isatty_r+0x1a>
 800c018:	602b      	str	r3, [r5, #0]
 800c01a:	bd38      	pop	{r3, r4, r5, pc}
 800c01c:	2000c974 	.word	0x2000c974

0800c020 <_lseek_r>:
 800c020:	b538      	push	{r3, r4, r5, lr}
 800c022:	4c07      	ldr	r4, [pc, #28]	; (800c040 <_lseek_r+0x20>)
 800c024:	4605      	mov	r5, r0
 800c026:	4608      	mov	r0, r1
 800c028:	4611      	mov	r1, r2
 800c02a:	2200      	movs	r2, #0
 800c02c:	6022      	str	r2, [r4, #0]
 800c02e:	461a      	mov	r2, r3
 800c030:	f7f6 f9c8 	bl	80023c4 <_lseek>
 800c034:	1c43      	adds	r3, r0, #1
 800c036:	d102      	bne.n	800c03e <_lseek_r+0x1e>
 800c038:	6823      	ldr	r3, [r4, #0]
 800c03a:	b103      	cbz	r3, 800c03e <_lseek_r+0x1e>
 800c03c:	602b      	str	r3, [r5, #0]
 800c03e:	bd38      	pop	{r3, r4, r5, pc}
 800c040:	2000c974 	.word	0x2000c974

0800c044 <_read_r>:
 800c044:	b538      	push	{r3, r4, r5, lr}
 800c046:	4c07      	ldr	r4, [pc, #28]	; (800c064 <_read_r+0x20>)
 800c048:	4605      	mov	r5, r0
 800c04a:	4608      	mov	r0, r1
 800c04c:	4611      	mov	r1, r2
 800c04e:	2200      	movs	r2, #0
 800c050:	6022      	str	r2, [r4, #0]
 800c052:	461a      	mov	r2, r3
 800c054:	f7f6 f956 	bl	8002304 <_read>
 800c058:	1c43      	adds	r3, r0, #1
 800c05a:	d102      	bne.n	800c062 <_read_r+0x1e>
 800c05c:	6823      	ldr	r3, [r4, #0]
 800c05e:	b103      	cbz	r3, 800c062 <_read_r+0x1e>
 800c060:	602b      	str	r3, [r5, #0]
 800c062:	bd38      	pop	{r3, r4, r5, pc}
 800c064:	2000c974 	.word	0x2000c974

0800c068 <_init>:
 800c068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c06a:	bf00      	nop
 800c06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c06e:	bc08      	pop	{r3}
 800c070:	469e      	mov	lr, r3
 800c072:	4770      	bx	lr

0800c074 <_fini>:
 800c074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c076:	bf00      	nop
 800c078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c07a:	bc08      	pop	{r3}
 800c07c:	469e      	mov	lr, r3
 800c07e:	4770      	bx	lr
