
413_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae8c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  0800b06c  0800b06c  0001b06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b660  0800b660  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b660  0800b660  0001b660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b668  0800b668  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b668  0800b668  0001b668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b66c  0800b66c  0001b66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800b670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006f30  2000008c  0800b6fc  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006fbc  0800b6fc  00026fbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020068  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000403c  00000000  00000000  00040124  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001910  00000000  00000000  00044160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001708  00000000  00000000  00045a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002838d  00000000  00000000  00047178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a58d  00000000  00000000  0006f505  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e0d5e  00000000  00000000  00089a92  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016a7f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000700c  00000000  00000000  0016a86c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b054 	.word	0x0800b054

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000090 	.word	0x20000090
 800021c:	0800b054 	.word	0x0800b054

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <write_PCM16_stereo_header>:
#include "fatfs.h"


/*Return 0 on success and -1 on failure*/
int write_PCM16_stereo_header(FILE* file_p, int32_t SampleRate, int32_t FrameCount)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
    int32_t subchunk2_size;
    int32_t chunk_size;

    size_t write_count;

    subchunk2_size  = FrameCount * NUM_CHANNELS * BITS_PER_SAMPLE/8;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	011b      	lsls	r3, r3, #4
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	da00      	bge.n	80005d6 <write_PCM16_stereo_header+0x16>
 80005d4:	3307      	adds	r3, #7
 80005d6:	10db      	asrs	r3, r3, #3
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    chunk_size      = 4 + (8 + SUBCHUNK1SIZE) + (8 + subchunk2_size);
 80005da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005dc:	3324      	adds	r3, #36	; 0x24
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48

    wav_header.ChunkID[0] = 'R';
 80005e0:	2352      	movs	r3, #82	; 0x52
 80005e2:	763b      	strb	r3, [r7, #24]
    wav_header.ChunkID[1] = 'I';
 80005e4:	2349      	movs	r3, #73	; 0x49
 80005e6:	767b      	strb	r3, [r7, #25]
    wav_header.ChunkID[2] = 'F';
 80005e8:	2346      	movs	r3, #70	; 0x46
 80005ea:	76bb      	strb	r3, [r7, #26]
    wav_header.ChunkID[3] = 'F';
 80005ec:	2346      	movs	r3, #70	; 0x46
 80005ee:	76fb      	strb	r3, [r7, #27]

    wav_header.ChunkSize = chunk_size;
 80005f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005f2:	61fb      	str	r3, [r7, #28]

    wav_header.Format[0] = 'W';
 80005f4:	2357      	movs	r3, #87	; 0x57
 80005f6:	f887 3020 	strb.w	r3, [r7, #32]
    wav_header.Format[1] = 'A';
 80005fa:	2341      	movs	r3, #65	; 0x41
 80005fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    wav_header.Format[2] = 'V';
 8000600:	2356      	movs	r3, #86	; 0x56
 8000602:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    wav_header.Format[3] = 'E';
 8000606:	2345      	movs	r3, #69	; 0x45
 8000608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    wav_header.Subchunk1ID[0] = 'f';
 800060c:	2366      	movs	r3, #102	; 0x66
 800060e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    wav_header.Subchunk1ID[1] = 'm';
 8000612:	236d      	movs	r3, #109	; 0x6d
 8000614:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    wav_header.Subchunk1ID[2] = 't';
 8000618:	2374      	movs	r3, #116	; 0x74
 800061a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    wav_header.Subchunk1ID[3] = ' ';
 800061e:	2320      	movs	r3, #32
 8000620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    wav_header.Subchunk1Size = SUBCHUNK1SIZE;
 8000624:	2310      	movs	r3, #16
 8000626:	62bb      	str	r3, [r7, #40]	; 0x28
    wav_header.AudioFormat = AUDIO_FORMAT;
 8000628:	2301      	movs	r3, #1
 800062a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    wav_header.NumChannels = NUM_CHANNELS;
 800062c:	2301      	movs	r3, #1
 800062e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    wav_header.SampleRate = SampleRate;
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
    wav_header.ByteRate = BYTE_RATE;
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <write_PCM16_stereo_header+0xcc>)
 8000636:	637b      	str	r3, [r7, #52]	; 0x34
    wav_header.BlockAlign = BLOCK_ALIGN;
 8000638:	2302      	movs	r3, #2
 800063a:	873b      	strh	r3, [r7, #56]	; 0x38
    wav_header.BitsPerSample = BITS_PER_SAMPLE;
 800063c:	2310      	movs	r3, #16
 800063e:	877b      	strh	r3, [r7, #58]	; 0x3a

    wav_header.Subchunk2ID[0] = 'd';
 8000640:	2364      	movs	r3, #100	; 0x64
 8000642:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    wav_header.Subchunk2ID[1] = 'a';
 8000646:	2361      	movs	r3, #97	; 0x61
 8000648:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    wav_header.Subchunk2ID[2] = 't';
 800064c:	2374      	movs	r3, #116	; 0x74
 800064e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    wav_header.Subchunk2ID[3] = 'a';
 8000652:	2361      	movs	r3, #97	; 0x61
 8000654:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    wav_header.Subchunk2Size = subchunk2_size;
 8000658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800065a:	643b      	str	r3, [r7, #64]	; 0x40

    UINT byteCount;
	ret = f_write(file_p, &wav_header, sizeof(wavfile_header_t), &byteCount);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	f107 0118 	add.w	r1, r7, #24
 8000664:	222c      	movs	r2, #44	; 0x2c
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	f009 fb46 	bl	8009cf8 <f_write>
 800066c:	4603      	mov	r3, r0
 800066e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	printf("header write result = %d\r\n", ret);
 8000672:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000676:	4619      	mov	r1, r3
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <write_PCM16_stereo_header+0xd0>)
 800067a:	f009 feaf 	bl	800a3dc <iprintf>
//	ret = f_close(file_p);
//	printf("header close result = %d\r\n", ret);
    return ret;
 800067e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000682:	4618      	mov	r0, r3
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	00017700 	.word	0x00017700
 8000690:	0800b06c 	.word	0x0800b06c

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f001 fd79 	bl	8002190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f86d 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f000 fad3 	bl	8000c4c <MX_GPIO_Init>
  MX_DMA_Init();
 80006a6:	f000 fab1 	bl	8000c0c <MX_DMA_Init>
  MX_ADC1_Init();
 80006aa:	f000 f8f7 	bl	800089c <MX_ADC1_Init>
  MX_DAC_Init();
 80006ae:	f000 f947 	bl	8000940 <MX_DAC_Init>
  MX_DFSDM1_Init();
 80006b2:	f000 f96f 	bl	8000994 <MX_DFSDM1_Init>
  MX_FMPI2C1_Init();
 80006b6:	f000 f9d3 	bl	8000a60 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 80006ba:	f000 fd07 	bl	80010cc <MX_FSMC_Init>
  MX_QUADSPI_Init();
 80006be:	f000 fa05 	bl	8000acc <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 80006c2:	f000 fa2f 	bl	8000b24 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 80006c6:	f000 fa4d 	bl	8000b64 <MX_UART10_Init>
  MX_USART6_UART_Init();
 80006ca:	f000 fa75 	bl	8000bb8 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80006ce:	f006 fcd1 	bl	8007074 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2120      	movs	r1, #32
 80006d6:	481d      	ldr	r0, [pc, #116]	; (800074c <main+0xb8>)
 80006d8:	f003 fb6a 	bl	8003db0 <HAL_GPIO_WritePin>


	printf("path: '%s'\r\n", SDPath);
 80006dc:	491c      	ldr	r1, [pc, #112]	; (8000750 <main+0xbc>)
 80006de:	481d      	ldr	r0, [pc, #116]	; (8000754 <main+0xc0>)
 80006e0:	f009 fe7c 	bl	800a3dc <iprintf>
//	double duration = 10; /*seconds*/


	fRet = f_mount(&myFAT, SDPath, 1);
 80006e4:	2201      	movs	r2, #1
 80006e6:	491a      	ldr	r1, [pc, #104]	; (8000750 <main+0xbc>)
 80006e8:	481b      	ldr	r0, [pc, #108]	; (8000758 <main+0xc4>)
 80006ea:	f009 f8f3 	bl	80098d4 <f_mount>
 80006ee:	4603      	mov	r3, r0
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <main+0xc8>)
 80006f4:	701a      	strb	r2, [r3, #0]
	printf("header write result = %d\r\n", fRet);
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <main+0xc8>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	4619      	mov	r1, r3
 80006fc:	4818      	ldr	r0, [pc, #96]	; (8000760 <main+0xcc>)
 80006fe:	f009 fe6d 	bl	800a3dc <iprintf>

	f_open(&myFile, fname, FA_WRITE | FA_CREATE_ALWAYS);
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <main+0xd0>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	220a      	movs	r2, #10
 8000708:	4619      	mov	r1, r3
 800070a:	4817      	ldr	r0, [pc, #92]	; (8000768 <main+0xd4>)
 800070c:	f009 f928 	bl	8009960 <f_open>

	write_PCM16_stereo_header(&myFile, SAMPLE_RATE, FrameCount * AUDIO_REC);
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <main+0xd8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	029b      	lsls	r3, r3, #10
 8000716:	461a      	mov	r2, r3
 8000718:	f64b 3180 	movw	r1, #48000	; 0xbb80
 800071c:	4812      	ldr	r0, [pc, #72]	; (8000768 <main+0xd4>)
 800071e:	f7ff ff4f 	bl	80005c0 <write_PCM16_stereo_header>
//	write_PCM16_stereo_header(&myFile, SAMPLE_RATE, 131072);
//	write_PCM_mono_2khz(&myFile);


  ret = HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, Rec1Buf, AUDIO_REC);
 8000722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000726:	4912      	ldr	r1, [pc, #72]	; (8000770 <main+0xdc>)
 8000728:	4812      	ldr	r0, [pc, #72]	; (8000774 <main+0xe0>)
 800072a:	f002 fbd9 	bl	8002ee0 <HAL_DFSDM_FilterRegularStart_DMA>
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
  if(ret != HAL_OK)
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d002      	beq.n	800073e <main+0xaa>
  {
	  printf("DMA on filter not started");
 8000738:	480f      	ldr	r0, [pc, #60]	; (8000778 <main+0xe4>)
 800073a:	f009 fe4f 	bl	800a3dc <iprintf>
//  ret = HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm2_filter0, Rec2Buf, AUDIO_REC);
//   if(ret != HAL_OK)
//   {
// 	  printf("DMA on filter not started");
//   }
   HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	4802      	ldr	r0, [pc, #8]	; (800074c <main+0xb8>)
 8000744:	f003 fb34 	bl	8003db0 <HAL_GPIO_WritePin>
//   	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000748:	e7fe      	b.n	8000748 <main+0xb4>
 800074a:	bf00      	nop
 800074c:	40020800 	.word	0x40020800
 8000750:	20004f4c 	.word	0x20004f4c
 8000754:	0800b094 	.word	0x0800b094
 8000758:	200036c0 	.word	0x200036c0
 800075c:	200000a8 	.word	0x200000a8
 8000760:	0800b0a4 	.word	0x0800b0a4
 8000764:	20000004 	.word	0x20000004
 8000768:	2000138c 	.word	0x2000138c
 800076c:	20000000 	.word	0x20000000
 8000770:	200023bc 	.word	0x200023bc
 8000774:	200033bc 	.word	0x200033bc
 8000778:	0800b0c0 	.word	0x0800b0c0

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b0aa      	sub	sp, #168	; 0xa8
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000786:	2234      	movs	r2, #52	; 0x34
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f009 fd76 	bl	800a27c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2258      	movs	r2, #88	; 0x58
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f009 fd67 	bl	800a27c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b38      	ldr	r3, [pc, #224]	; (8000894 <SystemClock_Config+0x118>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	4a37      	ldr	r2, [pc, #220]	; (8000894 <SystemClock_Config+0x118>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	6413      	str	r3, [r2, #64]	; 0x40
 80007be:	4b35      	ldr	r3, [pc, #212]	; (8000894 <SystemClock_Config+0x118>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	4b32      	ldr	r3, [pc, #200]	; (8000898 <SystemClock_Config+0x11c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a31      	ldr	r2, [pc, #196]	; (8000898 <SystemClock_Config+0x11c>)
 80007d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007d8:	6013      	str	r3, [r2, #0]
 80007da:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <SystemClock_Config+0x11c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e6:	2302      	movs	r3, #2
 80007e8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ea:	2301      	movs	r3, #1
 80007ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f0:	2310      	movs	r3, #16
 80007f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f6:	2302      	movs	r3, #2
 80007f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000802:	2308      	movs	r3, #8
 8000804:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000808:	2360      	movs	r3, #96	; 0x60
 800080a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800080e:	2302      	movs	r3, #2
 8000810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000814:	2304      	movs	r3, #4
 8000816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800081a:	2302      	movs	r3, #2
 800081c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000820:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000824:	4618      	mov	r0, r3
 8000826:	f003 fff7 	bl	8004818 <HAL_RCC_OscConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000830:	f000 feb2 	bl	8001598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000834:	230f      	movs	r3, #15
 8000836:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000838:	2302      	movs	r3, #2
 800083a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000844:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800084a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800084e:	2103      	movs	r1, #3
 8000850:	4618      	mov	r0, r3
 8000852:	f003 fb89 	bl	8003f68 <HAL_RCC_ClockConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800085c:	f000 fe9c 	bl	8001598 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_SDIO
 8000860:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8000864:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000866:	2300      	movs	r3, #0
 8000868:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 800086a:	2300      	movs	r3, #0
 800086c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800086e:	2300      	movs	r3, #0
 8000870:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8000872:	2300      	movs	r3, #0
 8000874:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	4618      	mov	r0, r3
 800087c:	f003 fd40 	bl	8004300 <HAL_RCCEx_PeriphCLKConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8000886:	f000 fe87 	bl	8001598 <Error_Handler>
  }
}
 800088a:	bf00      	nop
 800088c:	37a8      	adds	r7, #168	; 0xa8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40007000 	.word	0x40007000

0800089c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008a2:	463b      	mov	r3, r7
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <MX_ADC1_Init+0x98>)
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <MX_ADC1_Init+0x9c>)
 80008b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MX_ADC1_Init+0x98>)
 80008b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_ADC1_Init+0x98>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_ADC1_Init+0x98>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_ADC1_Init+0x98>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_ADC1_Init+0x98>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_ADC1_Init+0x98>)
 80008d8:	2200      	movs	r2, #0
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_ADC1_Init+0x98>)
 80008de:	4a17      	ldr	r2, [pc, #92]	; (800093c <MX_ADC1_Init+0xa0>)
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_ADC1_Init+0x98>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_ADC1_Init+0x98>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_ADC1_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_ADC1_Init+0x98>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <MX_ADC1_Init+0x98>)
 80008fe:	f001 fcdb 	bl	80022b8 <HAL_ADC_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000908:	f000 fe46 	bl	8001598 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800090c:	230a      	movs	r3, #10
 800090e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000910:	2301      	movs	r3, #1
 8000912:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_ADC1_Init+0x98>)
 800091e:	f001 fd0f 	bl	8002340 <HAL_ADC_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000928:	f000 fe36 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200034a4 	.word	0x200034a4
 8000938:	40012000 	.word	0x40012000
 800093c:	0f000001 	.word	0x0f000001

08000940 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000946:	463b      	mov	r3, r7
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_DAC_Init+0x4c>)
 8000950:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <MX_DAC_Init+0x50>)
 8000952:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000954:	480d      	ldr	r0, [pc, #52]	; (800098c <MX_DAC_Init+0x4c>)
 8000956:	f002 f832 	bl	80029be <HAL_DAC_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000960:	f000 fe1a 	bl	8001598 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000964:	2300      	movs	r3, #0
 8000966:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	2200      	movs	r2, #0
 8000970:	4619      	mov	r1, r3
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <MX_DAC_Init+0x4c>)
 8000974:	f002 f845 	bl	8002a02 <HAL_DAC_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800097e:	f000 fe0b 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000354c 	.word	0x2000354c
 8000990:	40007400 	.word	0x40007400

08000994 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000998:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <MX_DFSDM1_Init+0xb8>)
 800099a:	4a2d      	ldr	r2, [pc, #180]	; (8000a50 <MX_DFSDM1_Init+0xbc>)
 800099c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800099e:	4b2b      	ldr	r3, [pc, #172]	; (8000a4c <MX_DFSDM1_Init+0xb8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80009a4:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <MX_DFSDM1_Init+0xb8>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80009aa:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <MX_DFSDM1_Init+0xb8>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80009b0:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <MX_DFSDM1_Init+0xb8>)
 80009b2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80009b6:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 50;
 80009b8:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <MX_DFSDM1_Init+0xb8>)
 80009ba:	2232      	movs	r2, #50	; 0x32
 80009bc:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <MX_DFSDM1_Init+0xb8>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80009c4:	4821      	ldr	r0, [pc, #132]	; (8000a4c <MX_DFSDM1_Init+0xb8>)
 80009c6:	f002 f959 	bl	8002c7c <HAL_DFSDM_FilterInit>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80009d0:	f000 fde2 	bl	8001598 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80009d4:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <MX_DFSDM1_Init+0xc0>)
 80009d6:	4a20      	ldr	r2, [pc, #128]	; (8000a58 <MX_DFSDM1_Init+0xc4>)
 80009d8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_DFSDM1_Init+0xc0>)
 80009dc:	2201      	movs	r2, #1
 80009de:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_DFSDM1_Init+0xc0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 40;
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_DFSDM1_Init+0xc0>)
 80009e8:	2228      	movs	r2, #40	; 0x28
 80009ea:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80009ec:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <MX_DFSDM1_Init+0xc0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_DFSDM1_Init+0xc0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_DFSDM1_Init+0xc0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_DFSDM1_Init+0xc0>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_DFSDM1_Init+0xc0>)
 8000a06:	2204      	movs	r2, #4
 8000a08:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_DFSDM1_Init+0xc0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MX_DFSDM1_Init+0xc0>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_DFSDM1_Init+0xc0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x0;
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <MX_DFSDM1_Init+0xc0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000a22:	480c      	ldr	r0, [pc, #48]	; (8000a54 <MX_DFSDM1_Init+0xc0>)
 8000a24:	f002 f83a 	bl	8002a9c <HAL_DFSDM_ChannelInit>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000a2e:	f000 fdb3 	bl	8001598 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000a32:	2201      	movs	r2, #1
 8000a34:	4909      	ldr	r1, [pc, #36]	; (8000a5c <MX_DFSDM1_Init+0xc8>)
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_DFSDM1_Init+0xb8>)
 8000a38:	f002 fa0c 	bl	8002e54 <HAL_DFSDM_FilterConfigRegChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000a42:	f000 fda9 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200033bc 	.word	0x200033bc
 8000a50:	40016100 	.word	0x40016100
 8000a54:	20000354 	.word	0x20000354
 8000a58:	40016020 	.word	0x40016020
 8000a5c:	00010002 	.word	0x00010002

08000a60 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_FMPI2C1_Init+0x60>)
 8000a66:	4a17      	ldr	r2, [pc, #92]	; (8000ac4 <MX_FMPI2C1_Init+0x64>)
 8000a68:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x20303E5D;
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_FMPI2C1_Init+0x60>)
 8000a6c:	4a16      	ldr	r2, [pc, #88]	; (8000ac8 <MX_FMPI2C1_Init+0x68>)
 8000a6e:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_FMPI2C1_Init+0x60>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_FMPI2C1_Init+0x60>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000a7c:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <MX_FMPI2C1_Init+0x60>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_FMPI2C1_Init+0x60>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000a88:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <MX_FMPI2C1_Init+0x60>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_FMPI2C1_Init+0x60>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <MX_FMPI2C1_Init+0x60>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000a9a:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <MX_FMPI2C1_Init+0x60>)
 8000a9c:	f002 ff04 	bl	80038a8 <HAL_FMPI2C_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000aa6:	f000 fd77 	bl	8001598 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_FMPI2C1_Init+0x60>)
 8000aae:	f002 ff8a 	bl	80039c6 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000ab8:	f000 fd6e 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20003560 	.word	0x20003560
 8000ac4:	40006000 	.word	0x40006000
 8000ac8:	20303e5d 	.word	0x20303e5d

08000acc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_QUADSPI_Init+0x50>)
 8000ad2:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <MX_QUADSPI_Init+0x54>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_QUADSPI_Init+0x50>)
 8000ad8:	22ff      	movs	r2, #255	; 0xff
 8000ada:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_QUADSPI_Init+0x50>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_QUADSPI_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_QUADSPI_Init+0x50>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_QUADSPI_Init+0x50>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_QUADSPI_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_QUADSPI_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_QUADSPI_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_QUADSPI_Init+0x50>)
 8000b08:	f003 f96c 	bl	8003de4 <HAL_QSPI_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000b12:	f000 fd41 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20004ef8 	.word	0x20004ef8
 8000b20:	a0001000 	.word	0xa0001000

08000b24 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_SDIO_SD_Init+0x38>)
 8000b2a:	4a0d      	ldr	r2, [pc, #52]	; (8000b60 <MX_SDIO_SD_Init+0x3c>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_SDIO_SD_Init+0x38>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_SDIO_SD_Init+0x38>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_SDIO_SD_Init+0x38>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_SDIO_SD_Init+0x38>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <MX_SDIO_SD_Init+0x38>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <MX_SDIO_SD_Init+0x38>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	200035fc 	.word	0x200035fc
 8000b60:	40012c00 	.word	0x40012c00

08000b64 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_UART10_Init+0x4c>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <MX_UART10_Init+0x50>)
 8000b6c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <MX_UART10_Init+0x4c>)
 8000b70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b74:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_UART10_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_UART10_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <MX_UART10_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_UART10_Init+0x4c>)
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MX_UART10_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_UART10_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_UART10_Init+0x4c>)
 8000b9c:	f005 f85e 	bl	8005c5c <HAL_UART_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000ba6:	f000 fcf7 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20003414 	.word	0x20003414
 8000bb4:	40011c00 	.word	0x40011c00

08000bb8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <MX_USART6_UART_Init+0x50>)
 8000bc0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bf0:	f005 f834 	bl	8005c5c <HAL_UART_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000bfa:	f000 fccd 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20003680 	.word	0x20003680
 8000c08:	40011400 	.word	0x40011400

08000c0c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_DMA_Init+0x3c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <MX_DMA_Init+0x3c>)
 8000c1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_DMA_Init+0x3c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2038      	movs	r0, #56	; 0x38
 8000c34:	f001 fe8d 	bl	8002952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c38:	2038      	movs	r0, #56	; 0x38
 8000c3a:	f001 fea6 	bl	800298a <HAL_NVIC_EnableIRQ>

}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800

08000c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
 8000c66:	4bb0      	ldr	r3, [pc, #704]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4aaf      	ldr	r2, [pc, #700]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000c6c:	f043 0310 	orr.w	r3, r3, #16
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4bad      	ldr	r3, [pc, #692]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0310 	and.w	r3, r3, #16
 8000c7a:	623b      	str	r3, [r7, #32]
 8000c7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
 8000c82:	4ba9      	ldr	r3, [pc, #676]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4aa8      	ldr	r2, [pc, #672]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4ba6      	ldr	r3, [pc, #664]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	61fb      	str	r3, [r7, #28]
 8000c98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
 8000c9e:	4ba2      	ldr	r3, [pc, #648]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4aa1      	ldr	r2, [pc, #644]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000ca4:	f043 0320 	orr.w	r3, r3, #32
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b9f      	ldr	r3, [pc, #636]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0320 	and.w	r3, r3, #32
 8000cb2:	61bb      	str	r3, [r7, #24]
 8000cb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	4b9b      	ldr	r3, [pc, #620]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a9a      	ldr	r2, [pc, #616]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b98      	ldr	r3, [pc, #608]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b94      	ldr	r3, [pc, #592]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a93      	ldr	r2, [pc, #588]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b91      	ldr	r3, [pc, #580]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b8d      	ldr	r3, [pc, #564]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a8c      	ldr	r2, [pc, #560]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b8a      	ldr	r3, [pc, #552]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	4b86      	ldr	r3, [pc, #536]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a85      	ldr	r2, [pc, #532]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b83      	ldr	r3, [pc, #524]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b7f      	ldr	r3, [pc, #508]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a7e      	ldr	r2, [pc, #504]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000d30:	f043 0308 	orr.w	r3, r3, #8
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b7c      	ldr	r3, [pc, #496]	; (8000f28 <MX_GPIO_Init+0x2dc>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0308 	and.w	r3, r3, #8
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2138      	movs	r1, #56	; 0x38
 8000d46:	4879      	ldr	r0, [pc, #484]	; (8000f2c <MX_GPIO_Init+0x2e0>)
 8000d48:	f003 f832 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2120      	movs	r1, #32
 8000d50:	4877      	ldr	r0, [pc, #476]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000d52:	f003 f82d 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000d5c:	4875      	ldr	r0, [pc, #468]	; (8000f34 <MX_GPIO_Init+0x2e8>)
 8000d5e:	f003 f827 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000d68:	4873      	ldr	r0, [pc, #460]	; (8000f38 <MX_GPIO_Init+0x2ec>)
 8000d6a:	f003 f821 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000d6e:	2338      	movs	r3, #56	; 0x38
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d82:	4619      	mov	r1, r3
 8000d84:	4869      	ldr	r0, [pc, #420]	; (8000f2c <MX_GPIO_Init+0x2e0>)
 8000d86:	f002 fe69 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000d8a:	2340      	movs	r3, #64	; 0x40
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4861      	ldr	r0, [pc, #388]	; (8000f2c <MX_GPIO_Init+0x2e0>)
 8000da6:	f002 fe59 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	485d      	ldr	r0, [pc, #372]	; (8000f3c <MX_GPIO_Init+0x2f0>)
 8000dc8:	f002 fe48 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd0:	4b5b      	ldr	r3, [pc, #364]	; (8000f40 <MX_GPIO_Init+0x2f4>)
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4854      	ldr	r0, [pc, #336]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000de0:	f002 fe3c 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_ext_SD_Pin */
  GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8000de4:	2304      	movs	r3, #4
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8000df4:	2306      	movs	r3, #6
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	484c      	ldr	r0, [pc, #304]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000e00:	f002 fe2c 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_SD_Pin */
  GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8000e04:	2308      	movs	r3, #8
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e14:	2305      	movs	r3, #5
 8000e16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4844      	ldr	r0, [pc, #272]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000e20:	f002 fe1c 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000e24:	2301      	movs	r3, #1
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e28:	4b45      	ldr	r3, [pc, #276]	; (8000f40 <MX_GPIO_Init+0x2f4>)
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e34:	4619      	mov	r1, r3
 8000e36:	4843      	ldr	r0, [pc, #268]	; (8000f44 <MX_GPIO_Init+0x2f8>)
 8000e38:	f002 fe10 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_MCK_Pin */
  GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e4c:	2305      	movs	r3, #5
 8000e4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	483b      	ldr	r0, [pc, #236]	; (8000f44 <MX_GPIO_Init+0x2f8>)
 8000e58:	f002 fe00 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_DATIN1_Pin */
  GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8000e6c:	2307      	movs	r3, #7
 8000e6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e74:	4619      	mov	r1, r3
 8000e76:	4833      	ldr	r0, [pc, #204]	; (8000f44 <MX_GPIO_Init+0x2f8>)
 8000e78:	f002 fdf0 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000e7c:	2320      	movs	r3, #32
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e90:	4619      	mov	r1, r3
 8000e92:	4827      	ldr	r0, [pc, #156]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000e94:	f002 fde2 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4820      	ldr	r0, [pc, #128]	; (8000f34 <MX_GPIO_Init+0x2e8>)
 8000eb4:	f002 fdd2 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000eb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eca:	4619      	mov	r1, r3
 8000ecc:	481b      	ldr	r0, [pc, #108]	; (8000f3c <MX_GPIO_Init+0x2f0>)
 8000ece:	f002 fdc5 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000ed2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed8:	2312      	movs	r3, #18
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eec:	4619      	mov	r1, r3
 8000eee:	4811      	ldr	r0, [pc, #68]	; (8000f34 <MX_GPIO_Init+0x2e8>)
 8000ef0:	f002 fdb4 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8000ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000f06:	2307      	movs	r3, #7
 8000f08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4808      	ldr	r0, [pc, #32]	; (8000f34 <MX_GPIO_Init+0x2e8>)
 8000f12:	f002 fda3 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8000f16:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	e00f      	b.n	8000f48 <MX_GPIO_Init+0x2fc>
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40020400 	.word	0x40020400
 8000f38:	40021800 	.word	0x40021800
 8000f3c:	40021400 	.word	0x40021400
 8000f40:	10110000 	.word	0x10110000
 8000f44:	40020000 	.word	0x40020000
 8000f48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4859      	ldr	r0, [pc, #356]	; (80010b8 <MX_GPIO_Init+0x46c>)
 8000f52:	f002 fd83 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8000f56:	f248 0380 	movw	r3, #32896	; 0x8080
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f5c:	4b57      	ldr	r3, [pc, #348]	; (80010bc <MX_GPIO_Init+0x470>)
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4855      	ldr	r0, [pc, #340]	; (80010c0 <MX_GPIO_Init+0x474>)
 8000f6c:	f002 fd76 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 8000f70:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f86:	4619      	mov	r1, r3
 8000f88:	484d      	ldr	r0, [pc, #308]	; (80010c0 <MX_GPIO_Init+0x474>)
 8000f8a:	f002 fd67 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000f8e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fa0:	230a      	movs	r3, #10
 8000fa2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4846      	ldr	r0, [pc, #280]	; (80010c4 <MX_GPIO_Init+0x478>)
 8000fac:	f002 fd56 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8000fb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fca:	4619      	mov	r1, r3
 8000fcc:	483d      	ldr	r0, [pc, #244]	; (80010c4 <MX_GPIO_Init+0x478>)
 8000fce:	f002 fd45 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fea:	4619      	mov	r1, r3
 8000fec:	4836      	ldr	r0, [pc, #216]	; (80010c8 <MX_GPIO_Init+0x47c>)
 8000fee:	f002 fd35 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_CK_Pin */
  GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001002:	2305      	movs	r3, #5
 8001004:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100a:	4619      	mov	r1, r3
 800100c:	482e      	ldr	r0, [pc, #184]	; (80010c8 <MX_GPIO_Init+0x47c>)
 800100e:	f002 fd25 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001012:	2330      	movs	r3, #48	; 0x30
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001022:	2306      	movs	r3, #6
 8001024:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102a:	4619      	mov	r1, r3
 800102c:	4822      	ldr	r0, [pc, #136]	; (80010b8 <MX_GPIO_Init+0x46c>)
 800102e:	f002 fd15 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001032:	2340      	movs	r3, #64	; 0x40
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <MX_GPIO_Init+0x470>)
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001042:	4619      	mov	r1, r3
 8001044:	481c      	ldr	r0, [pc, #112]	; (80010b8 <MX_GPIO_Init+0x46c>)
 8001046:	f002 fd09 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_DATIN7_Pin */
  GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 800105a:	2306      	movs	r3, #6
 800105c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001062:	4619      	mov	r1, r3
 8001064:	4814      	ldr	r0, [pc, #80]	; (80010b8 <MX_GPIO_Init+0x46c>)
 8001066:	f002 fcf9 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 800106a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800107c:	2302      	movs	r3, #2
 800107e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001084:	4619      	mov	r1, r3
 8001086:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MX_GPIO_Init+0x46c>)
 8001088:	f002 fce8 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_WS_Pin */
  GPIO_InitStruct.Pin = CODEC_WS_Pin;
 800108c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800109e:	2305      	movs	r3, #5
 80010a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a6:	4619      	mov	r1, r3
 80010a8:	4803      	ldr	r0, [pc, #12]	; (80010b8 <MX_GPIO_Init+0x46c>)
 80010aa:	f002 fcd7 	bl	8003a5c <HAL_GPIO_Init>

}
 80010ae:	bf00      	nop
 80010b0:	3738      	adds	r7, #56	; 0x38
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40020400 	.word	0x40020400
 80010bc:	10110000 	.word	0x10110000
 80010c0:	40021800 	.word	0x40021800
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40020c00 	.word	0x40020c00

080010cc <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
 80010e0:	615a      	str	r2, [r3, #20]
 80010e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80010e4:	4b4f      	ldr	r3, [pc, #316]	; (8001224 <MX_FSMC_Init+0x158>)
 80010e6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80010ea:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80010ec:	4b4d      	ldr	r3, [pc, #308]	; (8001224 <MX_FSMC_Init+0x158>)
 80010ee:	4a4e      	ldr	r2, [pc, #312]	; (8001228 <MX_FSMC_Init+0x15c>)
 80010f0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80010f2:	4b4c      	ldr	r3, [pc, #304]	; (8001224 <MX_FSMC_Init+0x158>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80010f8:	4b4a      	ldr	r3, [pc, #296]	; (8001224 <MX_FSMC_Init+0x158>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80010fe:	4b49      	ldr	r3, [pc, #292]	; (8001224 <MX_FSMC_Init+0x158>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001104:	4b47      	ldr	r3, [pc, #284]	; (8001224 <MX_FSMC_Init+0x158>)
 8001106:	2210      	movs	r2, #16
 8001108:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800110a:	4b46      	ldr	r3, [pc, #280]	; (8001224 <MX_FSMC_Init+0x158>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001110:	4b44      	ldr	r3, [pc, #272]	; (8001224 <MX_FSMC_Init+0x158>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001116:	4b43      	ldr	r3, [pc, #268]	; (8001224 <MX_FSMC_Init+0x158>)
 8001118:	2200      	movs	r2, #0
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 800111c:	4b41      	ldr	r3, [pc, #260]	; (8001224 <MX_FSMC_Init+0x158>)
 800111e:	2200      	movs	r2, #0
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001122:	4b40      	ldr	r3, [pc, #256]	; (8001224 <MX_FSMC_Init+0x158>)
 8001124:	2200      	movs	r2, #0
 8001126:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001128:	4b3e      	ldr	r3, [pc, #248]	; (8001224 <MX_FSMC_Init+0x158>)
 800112a:	2200      	movs	r2, #0
 800112c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800112e:	4b3d      	ldr	r3, [pc, #244]	; (8001224 <MX_FSMC_Init+0x158>)
 8001130:	2200      	movs	r2, #0
 8001132:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001134:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <MX_FSMC_Init+0x158>)
 8001136:	2200      	movs	r2, #0
 8001138:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800113a:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <MX_FSMC_Init+0x158>)
 800113c:	2200      	movs	r2, #0
 800113e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001140:	4b38      	ldr	r3, [pc, #224]	; (8001224 <MX_FSMC_Init+0x158>)
 8001142:	2200      	movs	r2, #0
 8001144:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001146:	4b37      	ldr	r3, [pc, #220]	; (8001224 <MX_FSMC_Init+0x158>)
 8001148:	2200      	movs	r2, #0
 800114a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800114c:	230f      	movs	r3, #15
 800114e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001150:	230f      	movs	r3, #15
 8001152:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001154:	23ff      	movs	r3, #255	; 0xff
 8001156:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001158:	230f      	movs	r3, #15
 800115a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800115c:	2310      	movs	r3, #16
 800115e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001160:	2311      	movs	r3, #17
 8001162:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2200      	movs	r2, #0
 800116c:	4619      	mov	r1, r3
 800116e:	482d      	ldr	r0, [pc, #180]	; (8001224 <MX_FSMC_Init+0x158>)
 8001170:	f004 fd30 	bl	8005bd4 <HAL_SRAM_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 800117a:	f000 fa0d 	bl	8001598 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 800117e:	4b2b      	ldr	r3, [pc, #172]	; (800122c <MX_FSMC_Init+0x160>)
 8001180:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001184:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001186:	4b29      	ldr	r3, [pc, #164]	; (800122c <MX_FSMC_Init+0x160>)
 8001188:	4a27      	ldr	r2, [pc, #156]	; (8001228 <MX_FSMC_Init+0x15c>)
 800118a:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 800118c:	4b27      	ldr	r3, [pc, #156]	; (800122c <MX_FSMC_Init+0x160>)
 800118e:	2204      	movs	r2, #4
 8001190:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001192:	4b26      	ldr	r3, [pc, #152]	; (800122c <MX_FSMC_Init+0x160>)
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001198:	4b24      	ldr	r3, [pc, #144]	; (800122c <MX_FSMC_Init+0x160>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800119e:	4b23      	ldr	r3, [pc, #140]	; (800122c <MX_FSMC_Init+0x160>)
 80011a0:	2210      	movs	r2, #16
 80011a2:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80011a4:	4b21      	ldr	r3, [pc, #132]	; (800122c <MX_FSMC_Init+0x160>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <MX_FSMC_Init+0x160>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80011b0:	4b1e      	ldr	r3, [pc, #120]	; (800122c <MX_FSMC_Init+0x160>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <MX_FSMC_Init+0x160>)
 80011b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_FSMC_Init+0x160>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80011c4:	4b19      	ldr	r3, [pc, #100]	; (800122c <MX_FSMC_Init+0x160>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_FSMC_Init+0x160>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_FSMC_Init+0x160>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_FSMC_Init+0x160>)
 80011d8:	2200      	movs	r2, #0
 80011da:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <MX_FSMC_Init+0x160>)
 80011de:	2200      	movs	r2, #0
 80011e0:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_FSMC_Init+0x160>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80011e8:	230f      	movs	r3, #15
 80011ea:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80011ec:	230f      	movs	r3, #15
 80011ee:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80011f0:	23ff      	movs	r3, #255	; 0xff
 80011f2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80011f4:	230f      	movs	r3, #15
 80011f6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80011f8:	2310      	movs	r3, #16
 80011fa:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80011fc:	2311      	movs	r3, #17
 80011fe:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2200      	movs	r2, #0
 8001208:	4619      	mov	r1, r3
 800120a:	4808      	ldr	r0, [pc, #32]	; (800122c <MX_FSMC_Init+0x160>)
 800120c:	f004 fce2 	bl	8005bd4 <HAL_SRAM_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_FSMC_Init+0x14e>
  {
    Error_Handler( );
 8001216:	f000 f9bf 	bl	8001598 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800121a:	bf00      	nop
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20003454 	.word	0x20003454
 8001228:	a0000104 	.word	0xa0000104
 800122c:	200035ac 	.word	0x200035ac

08001230 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
//	DmaRecHalfBuffCplt=1;
	float lsamp, rsamp;
	float ltmp, rtmp;
	uint16_t lfinal, rfinal;

	for(int i = 0; i < AUDIO_REC/2; i++)
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
 800123c:	e0ab      	b.n	8001396 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x166>
	{
		lsamp = (float)Rec1Buf[i];
 800123e:	4a5b      	ldr	r2, [pc, #364]	; (80013ac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x17c>)
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001246:	ee07 3a90 	vmov	s15, r3
 800124a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800124e:	edc7 7a06 	vstr	s15, [r7, #24]
		rsamp = (float)Rec2Buf[i];
 8001252:	4a57      	ldr	r2, [pc, #348]	; (80013b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x180>)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001262:	edc7 7a05 	vstr	s15, [r7, #20]
		ltmp = a0* lsamp + a1*lin_z1 + a2*lin_z2 - b1*lout_z1 - b2 * lout_z2;
 8001266:	4b53      	ldr	r3, [pc, #332]	; (80013b4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x184>)
 8001268:	ed93 7a00 	vldr	s14, [r3]
 800126c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001270:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001274:	4b50      	ldr	r3, [pc, #320]	; (80013b8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x188>)
 8001276:	edd3 6a00 	vldr	s13, [r3]
 800127a:	4b50      	ldr	r3, [pc, #320]	; (80013bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18c>)
 800127c:	edd3 7a00 	vldr	s15, [r3]
 8001280:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001284:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001288:	4b4d      	ldr	r3, [pc, #308]	; (80013c0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x190>)
 800128a:	edd3 6a00 	vldr	s13, [r3]
 800128e:	4b4d      	ldr	r3, [pc, #308]	; (80013c4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x194>)
 8001290:	edd3 7a00 	vldr	s15, [r3]
 8001294:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001298:	ee37 7a27 	vadd.f32	s14, s14, s15
 800129c:	4b4a      	ldr	r3, [pc, #296]	; (80013c8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x198>)
 800129e:	edd3 6a00 	vldr	s13, [r3]
 80012a2:	4b4a      	ldr	r3, [pc, #296]	; (80013cc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19c>)
 80012a4:	edd3 7a00 	vldr	s15, [r3]
 80012a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012b0:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a0>)
 80012b2:	edd3 6a00 	vldr	s13, [r3]
 80012b6:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a4>)
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c4:	edc7 7a04 	vstr	s15, [r7, #16]
		rtmp = a0* rsamp + a1*rin_z1 + a2*rin_z2 - b1*rout_z1 - b2 * rout_z2;
 80012c8:	4b3a      	ldr	r3, [pc, #232]	; (80013b4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x184>)
 80012ca:	ed93 7a00 	vldr	s14, [r3]
 80012ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80012d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d6:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x188>)
 80012d8:	edd3 6a00 	vldr	s13, [r3]
 80012dc:	4b3e      	ldr	r3, [pc, #248]	; (80013d8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a8>)
 80012de:	edd3 7a00 	vldr	s15, [r3]
 80012e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ea:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x190>)
 80012ec:	edd3 6a00 	vldr	s13, [r3]
 80012f0:	4b3a      	ldr	r3, [pc, #232]	; (80013dc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ac>)
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012fe:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x198>)
 8001300:	edd3 6a00 	vldr	s13, [r3]
 8001304:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b0>)
 8001306:	edd3 7a00 	vldr	s15, [r3]
 800130a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800130e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001312:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a0>)
 8001314:	edd3 6a00 	vldr	s13, [r3]
 8001318:	4b32      	ldr	r3, [pc, #200]	; (80013e4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b4>)
 800131a:	edd3 7a00 	vldr	s15, [r3]
 800131e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001326:	edc7 7a03 	vstr	s15, [r7, #12]

		lin_z2 = lin_z1;
 800132a:	4b24      	ldr	r3, [pc, #144]	; (80013bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a25      	ldr	r2, [pc, #148]	; (80013c4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x194>)
 8001330:	6013      	str	r3, [r2, #0]
		rin_z2 = rin_z1;
 8001332:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a29      	ldr	r2, [pc, #164]	; (80013dc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ac>)
 8001338:	6013      	str	r3, [r2, #0]
		lin_z1 = lsamp;
 800133a:	4a20      	ldr	r2, [pc, #128]	; (80013bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18c>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	6013      	str	r3, [r2, #0]
		rin_z1 = rsamp;
 8001340:	4a25      	ldr	r2, [pc, #148]	; (80013d8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a8>)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	6013      	str	r3, [r2, #0]
		lout_z2 = lout_z1;
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a22      	ldr	r2, [pc, #136]	; (80013d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a4>)
 800134c:	6013      	str	r3, [r2, #0]
		rout_z2 = rout_z1;
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a24      	ldr	r2, [pc, #144]	; (80013e4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b4>)
 8001354:	6013      	str	r3, [r2, #0]
		lout_z1 = ltmp;
 8001356:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19c>)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	6013      	str	r3, [r2, #0]
		rout_z1 = rtmp;
 800135c:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b0>)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6013      	str	r3, [r2, #0]

//			Value1Buf[i] = (uint16_t)(((int32_t)tmp >> 8) & 0xffff);//(Rec1Buf[i] >> 8) & 0xffff;
		lfinal = (uint16_t)(((int32_t)ltmp >> 8) & 0xffff);//(Rec1Buf[i] >> 8) & 0xffff;
 8001362:	edd7 7a04 	vldr	s15, [r7, #16]
 8001366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136a:	ee17 3a90 	vmov	r3, s15
 800136e:	121b      	asrs	r3, r3, #8
 8001370:	817b      	strh	r3, [r7, #10]
		AudioBuf[i*NUM_CHANNELS*2 + 1] = lfinal >> 8;
 8001372:	897b      	ldrh	r3, [r7, #10]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	b29a      	uxth	r2, r3
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	3301      	adds	r3, #1
 800137e:	b2d1      	uxtb	r1, r2
 8001380:	4a19      	ldr	r2, [pc, #100]	; (80013e8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b8>)
 8001382:	54d1      	strb	r1, [r2, r3]
		AudioBuf[i*NUM_CHANNELS*2] = lfinal & 0xff;
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	897a      	ldrh	r2, [r7, #10]
 800138a:	b2d1      	uxtb	r1, r2
 800138c:	4a16      	ldr	r2, [pc, #88]	; (80013e8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b8>)
 800138e:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < AUDIO_REC/2; i++)
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	3301      	adds	r3, #1
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800139c:	f6ff af4f 	blt.w	800123e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xe>
//		//	  {
//		//		  simpleBuf[i*2 +1] = toneBuf[i] >> 8;
//		//		  simpleBuf[i*2] = toneBuf[i];
//		//	  }
	}
}
 80013a0:	bf00      	nop
 80013a2:	3724      	adds	r7, #36	; 0x24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	200023bc 	.word	0x200023bc
 80013b0:	2000038c 	.word	0x2000038c
 80013b4:	20000008 	.word	0x20000008
 80013b8:	2000000c 	.word	0x2000000c
 80013bc:	200000b0 	.word	0x200000b0
 80013c0:	20000010 	.word	0x20000010
 80013c4:	200000b4 	.word	0x200000b4
 80013c8:	20000014 	.word	0x20000014
 80013cc:	200000b8 	.word	0x200000b8
 80013d0:	20000018 	.word	0x20000018
 80013d4:	200000bc 	.word	0x200000bc
 80013d8:	200000c0 	.word	0x200000c0
 80013dc:	200000c4 	.word	0x200000c4
 80013e0:	200000c8 	.word	0x200000c8
 80013e4:	200000cc 	.word	0x200000cc
 80013e8:	200046f8 	.word	0x200046f8

080013ec <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
//	uint16_t finaltmp;
	float lsamp, rsamp;
	float ltmp, rtmp;
	uint16_t lfinal, rfinal;

	for(int i = AUDIO_REC/2; i < AUDIO_REC; i++)
 80013f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	e062      	b.n	80014c2 <HAL_DFSDM_FilterRegConvCpltCallback+0xd6>
	{
		lsamp = (float)Rec1Buf[i];
 80013fc:	4a53      	ldr	r2, [pc, #332]	; (800154c <HAL_DFSDM_FilterRegConvCpltCallback+0x160>)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001404:	ee07 3a90 	vmov	s15, r3
 8001408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140c:	edc7 7a04 	vstr	s15, [r7, #16]
		ltmp = a0* lsamp + a1*lin_z1 + a2*lin_z2 - b1*lout_z1 - b2 * lout_z2;
 8001410:	4b4f      	ldr	r3, [pc, #316]	; (8001550 <HAL_DFSDM_FilterRegConvCpltCallback+0x164>)
 8001412:	ed93 7a00 	vldr	s14, [r3]
 8001416:	edd7 7a04 	vldr	s15, [r7, #16]
 800141a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800141e:	4b4d      	ldr	r3, [pc, #308]	; (8001554 <HAL_DFSDM_FilterRegConvCpltCallback+0x168>)
 8001420:	edd3 6a00 	vldr	s13, [r3]
 8001424:	4b4c      	ldr	r3, [pc, #304]	; (8001558 <HAL_DFSDM_FilterRegConvCpltCallback+0x16c>)
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001432:	4b4a      	ldr	r3, [pc, #296]	; (800155c <HAL_DFSDM_FilterRegConvCpltCallback+0x170>)
 8001434:	edd3 6a00 	vldr	s13, [r3]
 8001438:	4b49      	ldr	r3, [pc, #292]	; (8001560 <HAL_DFSDM_FilterRegConvCpltCallback+0x174>)
 800143a:	edd3 7a00 	vldr	s15, [r3]
 800143e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001442:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001446:	4b47      	ldr	r3, [pc, #284]	; (8001564 <HAL_DFSDM_FilterRegConvCpltCallback+0x178>)
 8001448:	edd3 6a00 	vldr	s13, [r3]
 800144c:	4b46      	ldr	r3, [pc, #280]	; (8001568 <HAL_DFSDM_FilterRegConvCpltCallback+0x17c>)
 800144e:	edd3 7a00 	vldr	s15, [r3]
 8001452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001456:	ee37 7a67 	vsub.f32	s14, s14, s15
 800145a:	4b44      	ldr	r3, [pc, #272]	; (800156c <HAL_DFSDM_FilterRegConvCpltCallback+0x180>)
 800145c:	edd3 6a00 	vldr	s13, [r3]
 8001460:	4b43      	ldr	r3, [pc, #268]	; (8001570 <HAL_DFSDM_FilterRegConvCpltCallback+0x184>)
 8001462:	edd3 7a00 	vldr	s15, [r3]
 8001466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800146e:	edc7 7a03 	vstr	s15, [r7, #12]
		lin_z2 = lin_z1;
 8001472:	4b39      	ldr	r3, [pc, #228]	; (8001558 <HAL_DFSDM_FilterRegConvCpltCallback+0x16c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a3a      	ldr	r2, [pc, #232]	; (8001560 <HAL_DFSDM_FilterRegConvCpltCallback+0x174>)
 8001478:	6013      	str	r3, [r2, #0]
		lin_z1 = lsamp;
 800147a:	4a37      	ldr	r2, [pc, #220]	; (8001558 <HAL_DFSDM_FilterRegConvCpltCallback+0x16c>)
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	6013      	str	r3, [r2, #0]
		lout_z2 = lout_z1;
 8001480:	4b39      	ldr	r3, [pc, #228]	; (8001568 <HAL_DFSDM_FilterRegConvCpltCallback+0x17c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a3a      	ldr	r2, [pc, #232]	; (8001570 <HAL_DFSDM_FilterRegConvCpltCallback+0x184>)
 8001486:	6013      	str	r3, [r2, #0]
		lout_z1 = ltmp;
 8001488:	4a37      	ldr	r2, [pc, #220]	; (8001568 <HAL_DFSDM_FilterRegConvCpltCallback+0x17c>)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6013      	str	r3, [r2, #0]
//		rin_z1 = rsamp;
//		rout_z2 = rout_z1;
//		rout_z1 = rtmp;

//			Value1Buf[i] = (uint16_t)(((int32_t)tmp >> 8) & 0xffff);//(Rec1Buf[i] >> 8) & 0xffff;
		lfinal = (uint16_t)(((int32_t)ltmp >> 8) & 0xffff);//(Rec1Buf[i] >> 8) & 0xffff;
 800148e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001496:	ee17 3a90 	vmov	r3, s15
 800149a:	121b      	asrs	r3, r3, #8
 800149c:	817b      	strh	r3, [r7, #10]
		AudioBuf[i*2 + 1] = lfinal >> 8;
 800149e:	897b      	ldrh	r3, [r7, #10]
 80014a0:	0a1b      	lsrs	r3, r3, #8
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	3301      	adds	r3, #1
 80014aa:	b2d1      	uxtb	r1, r2
 80014ac:	4a31      	ldr	r2, [pc, #196]	; (8001574 <HAL_DFSDM_FilterRegConvCpltCallback+0x188>)
 80014ae:	54d1      	strb	r1, [r2, r3]
		AudioBuf[i*2] = lfinal & 0xff;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	897a      	ldrh	r2, [r7, #10]
 80014b6:	b2d1      	uxtb	r1, r2
 80014b8:	4a2e      	ldr	r2, [pc, #184]	; (8001574 <HAL_DFSDM_FilterRegConvCpltCallback+0x188>)
 80014ba:	54d1      	strb	r1, [r2, r3]
	for(int i = AUDIO_REC/2; i < AUDIO_REC; i++)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c8:	db98      	blt.n	80013fc <HAL_DFSDM_FilterRegConvCpltCallback+0x10>
//		finaltmp = (uint16_t)(((int32_t)tmp >> 8) & 0xffff);//(Rec1Buf[i] >> 8) & 0xffff;
//		AudioBuf[i*2 + 1] = finaltmp >> 8;
//		AudioBuf[i*2] = finaltmp & 0xff;
	}

	if(pass > 20 && pass < FrameCount + 20)
 80014ca:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <HAL_DFSDM_FilterRegConvCpltCallback+0x18c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b14      	cmp	r3, #20
 80014d0:	dd18      	ble.n	8001504 <HAL_DFSDM_FilterRegConvCpltCallback+0x118>
 80014d2:	4b2a      	ldr	r3, [pc, #168]	; (800157c <HAL_DFSDM_FilterRegConvCpltCallback+0x190>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f103 0214 	add.w	r2, r3, #20
 80014da:	4b27      	ldr	r3, [pc, #156]	; (8001578 <HAL_DFSDM_FilterRegConvCpltCallback+0x18c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	dd10      	ble.n	8001504 <HAL_DFSDM_FilterRegConvCpltCallback+0x118>
	{
	//			  fRet = f_open(&myFile, fname, FA_WRITE | FA_OPEN_APPEND);// | FA_CREATE_ALWAYS);
	//			  printf("f_open error == %d\r\n", fRet);
		fRet = f_write(&myFile, AudioBuf, WRITE_LENGTH, &byteCount);
 80014e2:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_DFSDM_FilterRegConvCpltCallback+0x194>)
 80014e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014e8:	4922      	ldr	r1, [pc, #136]	; (8001574 <HAL_DFSDM_FilterRegConvCpltCallback+0x188>)
 80014ea:	4826      	ldr	r0, [pc, #152]	; (8001584 <HAL_DFSDM_FilterRegConvCpltCallback+0x198>)
 80014ec:	f008 fc04 	bl	8009cf8 <f_write>
 80014f0:	4603      	mov	r3, r0
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b24      	ldr	r3, [pc, #144]	; (8001588 <HAL_DFSDM_FilterRegConvCpltCallback+0x19c>)
 80014f6:	701a      	strb	r2, [r3, #0]
		printf("f_write error == %d\r\n", fRet);
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <HAL_DFSDM_FilterRegConvCpltCallback+0x19c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	4823      	ldr	r0, [pc, #140]	; (800158c <HAL_DFSDM_FilterRegConvCpltCallback+0x1a0>)
 8001500:	f008 ff6c 	bl	800a3dc <iprintf>
	//			  fRet = f_close(&myFile);
	//			  printf("f_close error == %d\r\n\n", fRet);
	}
	if(pass == FrameCount + 20)
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_DFSDM_FilterRegConvCpltCallback+0x190>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f103 0214 	add.w	r2, r3, #20
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <HAL_DFSDM_FilterRegConvCpltCallback+0x18c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d111      	bne.n	8001538 <HAL_DFSDM_FilterRegConvCpltCallback+0x14c>
	{
	  fRet = f_close(&myFile);
 8001514:	481b      	ldr	r0, [pc, #108]	; (8001584 <HAL_DFSDM_FilterRegConvCpltCallback+0x198>)
 8001516:	f008 fe01 	bl	800a11c <f_close>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <HAL_DFSDM_FilterRegConvCpltCallback+0x19c>)
 8001520:	701a      	strb	r2, [r3, #0]
	  printf("f_close error == %d\r\n\n", fRet);
 8001522:	4b19      	ldr	r3, [pc, #100]	; (8001588 <HAL_DFSDM_FilterRegConvCpltCallback+0x19c>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	4619      	mov	r1, r3
 8001528:	4819      	ldr	r0, [pc, #100]	; (8001590 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a4>)
 800152a:	f008 ff57 	bl	800a3dc <iprintf>
	  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 800152e:	2201      	movs	r2, #1
 8001530:	2120      	movs	r1, #32
 8001532:	4818      	ldr	r0, [pc, #96]	; (8001594 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a8>)
 8001534:	f002 fc3c 	bl	8003db0 <HAL_GPIO_WritePin>
	}

	pass++;
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_DFSDM_FilterRegConvCpltCallback+0x18c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <HAL_DFSDM_FilterRegConvCpltCallback+0x18c>)
 8001540:	6013      	str	r3, [r2, #0]

}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200023bc 	.word	0x200023bc
 8001550:	20000008 	.word	0x20000008
 8001554:	2000000c 	.word	0x2000000c
 8001558:	200000b0 	.word	0x200000b0
 800155c:	20000010 	.word	0x20000010
 8001560:	200000b4 	.word	0x200000b4
 8001564:	20000014 	.word	0x20000014
 8001568:	200000b8 	.word	0x200000b8
 800156c:	20000018 	.word	0x20000018
 8001570:	200000bc 	.word	0x200000bc
 8001574:	200046f8 	.word	0x200046f8
 8001578:	200000ac 	.word	0x200000ac
 800157c:	20000000 	.word	0x20000000
 8001580:	20003410 	.word	0x20003410
 8001584:	2000138c 	.word	0x2000138c
 8001588:	200000a8 	.word	0x200000a8
 800158c:	0800b0dc 	.word	0x0800b0dc
 8001590:	0800b0f4 	.word	0x0800b0f4
 8001594:	40020800 	.word	0x40020800

08001598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <HAL_MspInit+0x4c>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	4a0f      	ldr	r2, [pc, #60]	; (80015f4 <HAL_MspInit+0x4c>)
 80015b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015bc:	6453      	str	r3, [r2, #68]	; 0x44
 80015be:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <HAL_MspInit+0x4c>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_MspInit+0x4c>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <HAL_MspInit+0x4c>)
 80015d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d8:	6413      	str	r3, [r2, #64]	; 0x40
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_MspInit+0x4c>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800

080015f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08c      	sub	sp, #48	; 0x30
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a31      	ldr	r2, [pc, #196]	; (80016dc <HAL_ADC_MspInit+0xe4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d15b      	bne.n	80016d2 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
 800161e:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <HAL_ADC_MspInit+0xe8>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	4a2f      	ldr	r2, [pc, #188]	; (80016e0 <HAL_ADC_MspInit+0xe8>)
 8001624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001628:	6453      	str	r3, [r2, #68]	; 0x44
 800162a:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <HAL_ADC_MspInit+0xe8>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001632:	61bb      	str	r3, [r7, #24]
 8001634:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <HAL_ADC_MspInit+0xe8>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a28      	ldr	r2, [pc, #160]	; (80016e0 <HAL_ADC_MspInit+0xe8>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <HAL_ADC_MspInit+0xe8>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <HAL_ADC_MspInit+0xe8>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a21      	ldr	r2, [pc, #132]	; (80016e0 <HAL_ADC_MspInit+0xe8>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <HAL_ADC_MspInit+0xe8>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HAL_ADC_MspInit+0xe8>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a1a      	ldr	r2, [pc, #104]	; (80016e0 <HAL_ADC_MspInit+0xe8>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <HAL_ADC_MspInit+0xe8>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 800168a:	2311      	movs	r3, #17
 800168c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800168e:	2303      	movs	r3, #3
 8001690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	4811      	ldr	r0, [pc, #68]	; (80016e4 <HAL_ADC_MspInit+0xec>)
 800169e:	f002 f9dd 	bl	8003a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 80016a2:	2326      	movs	r3, #38	; 0x26
 80016a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a6:	2303      	movs	r3, #3
 80016a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <HAL_ADC_MspInit+0xf0>)
 80016b6:	f002 f9d1 	bl	8003a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 80016ba:	2302      	movs	r3, #2
 80016bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016be:	2303      	movs	r3, #3
 80016c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4619      	mov	r1, r3
 80016cc:	4807      	ldr	r0, [pc, #28]	; (80016ec <HAL_ADC_MspInit+0xf4>)
 80016ce:	f002 f9c5 	bl	8003a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016d2:	bf00      	nop
 80016d4:	3730      	adds	r7, #48	; 0x30
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40012000 	.word	0x40012000
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020800 	.word	0x40020800
 80016e8:	40020000 	.word	0x40020000
 80016ec:	40020400 	.word	0x40020400

080016f0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a17      	ldr	r2, [pc, #92]	; (800176c <HAL_DAC_MspInit+0x7c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d127      	bne.n	8001762 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	4b16      	ldr	r3, [pc, #88]	; (8001770 <HAL_DAC_MspInit+0x80>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	4a15      	ldr	r2, [pc, #84]	; (8001770 <HAL_DAC_MspInit+0x80>)
 800171c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001720:	6413      	str	r3, [r2, #64]	; 0x40
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <HAL_DAC_MspInit+0x80>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <HAL_DAC_MspInit+0x80>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <HAL_DAC_MspInit+0x80>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_DAC_MspInit+0x80>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 800174a:	2310      	movs	r3, #16
 800174c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800174e:	2303      	movs	r3, #3
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <HAL_DAC_MspInit+0x84>)
 800175e:	f002 f97d 	bl	8003a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	; 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40007400 	.word	0x40007400
 8001770:	40023800 	.word	0x40023800
 8001774:	40020000 	.word	0x40020000

08001778 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_FILTER_INSTANCE(hdfsdm_filter->Instance))&&(DFSDM1_Init == 0))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a50      	ldr	r2, [pc, #320]	; (80018d8 <HAL_DFSDM_FilterMspInit+0x160>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d004      	beq.n	80017a4 <HAL_DFSDM_FilterMspInit+0x2c>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a4f      	ldr	r2, [pc, #316]	; (80018dc <HAL_DFSDM_FilterMspInit+0x164>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d157      	bne.n	8001854 <HAL_DFSDM_FilterMspInit+0xdc>
 80017a4:	4b4e      	ldr	r3, [pc, #312]	; (80018e0 <HAL_DFSDM_FilterMspInit+0x168>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d153      	bne.n	8001854 <HAL_DFSDM_FilterMspInit+0xdc>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80017ac:	4b4d      	ldr	r3, [pc, #308]	; (80018e4 <HAL_DFSDM_FilterMspInit+0x16c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	4a4c      	ldr	r2, [pc, #304]	; (80018e4 <HAL_DFSDM_FilterMspInit+0x16c>)
 80017b4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80017b6:	4b4b      	ldr	r3, [pc, #300]	; (80018e4 <HAL_DFSDM_FilterMspInit+0x16c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d10d      	bne.n	80017da <HAL_DFSDM_FilterMspInit+0x62>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b49      	ldr	r3, [pc, #292]	; (80018e8 <HAL_DFSDM_FilterMspInit+0x170>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	4a48      	ldr	r2, [pc, #288]	; (80018e8 <HAL_DFSDM_FilterMspInit+0x170>)
 80017c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	4b46      	ldr	r3, [pc, #280]	; (80018e8 <HAL_DFSDM_FilterMspInit+0x170>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b42      	ldr	r3, [pc, #264]	; (80018e8 <HAL_DFSDM_FilterMspInit+0x170>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a41      	ldr	r2, [pc, #260]	; (80018e8 <HAL_DFSDM_FilterMspInit+0x170>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b3f      	ldr	r3, [pc, #252]	; (80018e8 <HAL_DFSDM_FilterMspInit+0x170>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <HAL_DFSDM_FilterMspInit+0x170>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a3a      	ldr	r2, [pc, #232]	; (80018e8 <HAL_DFSDM_FilterMspInit+0x170>)
 8001800:	f043 0308 	orr.w	r3, r3, #8
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <HAL_DFSDM_FilterMspInit+0x170>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001824:	2306      	movs	r3, #6
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	482f      	ldr	r0, [pc, #188]	; (80018ec <HAL_DFSDM_FilterMspInit+0x174>)
 8001830:	f002 f914 	bl	8003a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001834:	2340      	movs	r3, #64	; 0x40
 8001836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001844:	2306      	movs	r3, #6
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	4828      	ldr	r0, [pc, #160]	; (80018f0 <HAL_DFSDM_FilterMspInit+0x178>)
 8001850:	f002 f904 	bl	8003a5c <HAL_GPIO_Init>
  /* USER CODE END DFSDM1_MspInit 1 */
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a1f      	ldr	r2, [pc, #124]	; (80018d8 <HAL_DFSDM_FilterMspInit+0x160>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d137      	bne.n	80018ce <HAL_DFSDM_FilterMspInit+0x156>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 800185e:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001860:	4a25      	ldr	r2, [pc, #148]	; (80018f8 <HAL_DFSDM_FilterMspInit+0x180>)
 8001862:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_7;
 8001864:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001866:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800186a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x17c>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001872:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001874:	2200      	movs	r2, #0
 8001876:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001878:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x17c>)
 800187a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800187e:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001880:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001882:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001886:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001888:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x17c>)
 800188a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800188e:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001892:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001896:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001898:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x17c>)
 800189a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800189e:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018a0:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x17c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80018a6:	4813      	ldr	r0, [pc, #76]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x17c>)
 80018a8:	f001 fc90 	bl	80031cc <HAL_DMA_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_DFSDM_FilterMspInit+0x13e>
    {
      Error_Handler();
 80018b2:	f7ff fe71 	bl	8001598 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x17c>)
 80018ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80018bc:	4a0d      	ldr	r2, [pc, #52]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x17c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x17c>)
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28
 80018c8:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <HAL_DFSDM_FilterMspInit+0x17c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 80018ce:	bf00      	nop
 80018d0:	3728      	adds	r7, #40	; 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40016100 	.word	0x40016100
 80018dc:	40016180 	.word	0x40016180
 80018e0:	200000d4 	.word	0x200000d4
 80018e4:	200000d0 	.word	0x200000d0
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40020000 	.word	0x40020000
 80018f0:	40020c00 	.word	0x40020c00
 80018f4:	200034ec 	.word	0x200034ec
 80018f8:	40026410 	.word	0x40026410

080018fc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a36      	ldr	r2, [pc, #216]	; (80019f4 <HAL_DFSDM_ChannelMspInit+0xf8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d00e      	beq.n	800193c <HAL_DFSDM_ChannelMspInit+0x40>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a35      	ldr	r2, [pc, #212]	; (80019f8 <HAL_DFSDM_ChannelMspInit+0xfc>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d009      	beq.n	800193c <HAL_DFSDM_ChannelMspInit+0x40>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a33      	ldr	r2, [pc, #204]	; (80019fc <HAL_DFSDM_ChannelMspInit+0x100>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d004      	beq.n	800193c <HAL_DFSDM_ChannelMspInit+0x40>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a32      	ldr	r2, [pc, #200]	; (8001a00 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d157      	bne.n	80019ec <HAL_DFSDM_ChannelMspInit+0xf0>
 800193c:	4b31      	ldr	r3, [pc, #196]	; (8001a04 <HAL_DFSDM_ChannelMspInit+0x108>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d153      	bne.n	80019ec <HAL_DFSDM_ChannelMspInit+0xf0>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001944:	4b30      	ldr	r3, [pc, #192]	; (8001a08 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3301      	adds	r3, #1
 800194a:	4a2f      	ldr	r2, [pc, #188]	; (8001a08 <HAL_DFSDM_ChannelMspInit+0x10c>)
 800194c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800194e:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d10d      	bne.n	8001972 <HAL_DFSDM_ChannelMspInit+0x76>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	4b2c      	ldr	r3, [pc, #176]	; (8001a0c <HAL_DFSDM_ChannelMspInit+0x110>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	4a2b      	ldr	r2, [pc, #172]	; (8001a0c <HAL_DFSDM_ChannelMspInit+0x110>)
 8001960:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001964:	6453      	str	r3, [r2, #68]	; 0x44
 8001966:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <HAL_DFSDM_ChannelMspInit+0x110>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <HAL_DFSDM_ChannelMspInit+0x110>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a24      	ldr	r2, [pc, #144]	; (8001a0c <HAL_DFSDM_ChannelMspInit+0x110>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <HAL_DFSDM_ChannelMspInit+0x110>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <HAL_DFSDM_ChannelMspInit+0x110>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a1d      	ldr	r2, [pc, #116]	; (8001a0c <HAL_DFSDM_ChannelMspInit+0x110>)
 8001998:	f043 0308 	orr.w	r3, r3, #8
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <HAL_DFSDM_ChannelMspInit+0x110>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 80019aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80019bc:	2306      	movs	r3, #6
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4619      	mov	r1, r3
 80019c6:	4812      	ldr	r0, [pc, #72]	; (8001a10 <HAL_DFSDM_ChannelMspInit+0x114>)
 80019c8:	f002 f848 	bl	8003a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 80019cc:	2340      	movs	r3, #64	; 0x40
 80019ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80019dc:	2306      	movs	r3, #6
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	480b      	ldr	r0, [pc, #44]	; (8001a14 <HAL_DFSDM_ChannelMspInit+0x118>)
 80019e8:	f002 f838 	bl	8003a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 80019ec:	bf00      	nop
 80019ee:	3728      	adds	r7, #40	; 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40016000 	.word	0x40016000
 80019f8:	40016020 	.word	0x40016020
 80019fc:	40016040 	.word	0x40016040
 8001a00:	40016060 	.word	0x40016060
 8001a04:	200000d4 	.word	0x200000d4
 8001a08:	200000d0 	.word	0x200000d0
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40020c00 	.word	0x40020c00

08001a18 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a19      	ldr	r2, [pc, #100]	; (8001a9c <HAL_FMPI2C_MspInit+0x84>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d12b      	bne.n	8001a92 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_FMPI2C_MspInit+0x88>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <HAL_FMPI2C_MspInit+0x88>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_FMPI2C_MspInit+0x88>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration    
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8001a56:	23c0      	movs	r3, #192	; 0xc0
 8001a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a5a:	2312      	movs	r3, #18
 8001a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001a66:	2304      	movs	r3, #4
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <HAL_FMPI2C_MspInit+0x8c>)
 8001a72:	f001 fff3 	bl	8003a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_FMPI2C_MspInit+0x88>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a08      	ldr	r2, [pc, #32]	; (8001aa0 <HAL_FMPI2C_MspInit+0x88>)
 8001a80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_FMPI2C_MspInit+0x88>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8001a92:	bf00      	nop
 8001a94:	3728      	adds	r7, #40	; 0x28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40006000 	.word	0x40006000
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020800 	.word	0x40020800

08001aa8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08e      	sub	sp, #56	; 0x38
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a56      	ldr	r2, [pc, #344]	; (8001c20 <HAL_QSPI_MspInit+0x178>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	f040 80a6 	bne.w	8001c18 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
 8001ad0:	4b54      	ldr	r3, [pc, #336]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad4:	4a53      	ldr	r2, [pc, #332]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001ad6:	f043 0302 	orr.w	r3, r3, #2
 8001ada:	6393      	str	r3, [r2, #56]	; 0x38
 8001adc:	4b51      	ldr	r3, [pc, #324]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	623b      	str	r3, [r7, #32]
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	4b4d      	ldr	r3, [pc, #308]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	4a4c      	ldr	r2, [pc, #304]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001af2:	f043 0310 	orr.w	r3, r3, #16
 8001af6:	6313      	str	r3, [r2, #48]	; 0x30
 8001af8:	4b4a      	ldr	r3, [pc, #296]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b04:	2300      	movs	r3, #0
 8001b06:	61bb      	str	r3, [r7, #24]
 8001b08:	4b46      	ldr	r3, [pc, #280]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	4a45      	ldr	r2, [pc, #276]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b0e:	f043 0320 	orr.w	r3, r3, #32
 8001b12:	6313      	str	r3, [r2, #48]	; 0x30
 8001b14:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	4a3e      	ldr	r2, [pc, #248]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b2a:	f043 0302 	orr.w	r3, r3, #2
 8001b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b30:	4b3c      	ldr	r3, [pc, #240]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	4a37      	ldr	r2, [pc, #220]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b46:	f043 0308 	orr.w	r3, r3, #8
 8001b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4c:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b60:	4a30      	ldr	r2, [pc, #192]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b66:	6313      	str	r3, [r2, #48]	; 0x30
 8001b68:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001b74:	2304      	movs	r3, #4
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001b84:	2309      	movs	r3, #9
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4826      	ldr	r0, [pc, #152]	; (8001c28 <HAL_QSPI_MspInit+0x180>)
 8001b90:	f001 ff64 	bl	8003a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001b94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ba6:	230a      	movs	r3, #10
 8001ba8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bae:	4619      	mov	r1, r3
 8001bb0:	481e      	ldr	r0, [pc, #120]	; (8001c2c <HAL_QSPI_MspInit+0x184>)
 8001bb2:	f001 ff53 	bl	8003a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001bc6:	2309      	movs	r3, #9
 8001bc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4817      	ldr	r0, [pc, #92]	; (8001c30 <HAL_QSPI_MspInit+0x188>)
 8001bd2:	f001 ff43 	bl	8003a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001be8:	2309      	movs	r3, #9
 8001bea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4810      	ldr	r0, [pc, #64]	; (8001c34 <HAL_QSPI_MspInit+0x18c>)
 8001bf4:	f001 ff32 	bl	8003a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001bf8:	2340      	movs	r3, #64	; 0x40
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c04:	2303      	movs	r3, #3
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c08:	230a      	movs	r3, #10
 8001c0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c10:	4619      	mov	r1, r3
 8001c12:	4809      	ldr	r0, [pc, #36]	; (8001c38 <HAL_QSPI_MspInit+0x190>)
 8001c14:	f001 ff22 	bl	8003a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001c18:	bf00      	nop
 8001c1a:	3738      	adds	r7, #56	; 0x38
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	a0001000 	.word	0xa0001000
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40021400 	.word	0x40021400
 8001c30:	40020400 	.word	0x40020400
 8001c34:	40020c00 	.word	0x40020c00
 8001c38:	40021800 	.word	0x40021800

08001c3c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a31      	ldr	r2, [pc, #196]	; (8001d20 <HAL_SD_MspInit+0xe4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d15b      	bne.n	8001d16 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b30      	ldr	r3, [pc, #192]	; (8001d24 <HAL_SD_MspInit+0xe8>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	4a2f      	ldr	r2, [pc, #188]	; (8001d24 <HAL_SD_MspInit+0xe8>)
 8001c68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <HAL_SD_MspInit+0xe8>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <HAL_SD_MspInit+0xe8>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a28      	ldr	r2, [pc, #160]	; (8001d24 <HAL_SD_MspInit+0xe8>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <HAL_SD_MspInit+0xe8>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <HAL_SD_MspInit+0xe8>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <HAL_SD_MspInit+0xe8>)
 8001ca0:	f043 0304 	orr.w	r3, r3, #4
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <HAL_SD_MspInit+0xe8>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK 
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001cb2:	2340      	movs	r3, #64	; 0x40
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001cc2:	230c      	movs	r3, #12
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4816      	ldr	r0, [pc, #88]	; (8001d28 <HAL_SD_MspInit+0xec>)
 8001cce:	f001 fec5 	bl	8003a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin;
 8001cd2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001ce4:	230c      	movs	r3, #12
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4619      	mov	r1, r3
 8001cee:	480f      	ldr	r0, [pc, #60]	; (8001d2c <HAL_SD_MspInit+0xf0>)
 8001cf0:	f001 feb4 	bl	8003a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_CLK_Pin;
 8001cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d02:	2303      	movs	r3, #3
 8001d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001d06:	230c      	movs	r3, #12
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CLK_GPIO_Port, &GPIO_InitStruct);
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4806      	ldr	r0, [pc, #24]	; (8001d2c <HAL_SD_MspInit+0xf0>)
 8001d12:	f001 fea3 	bl	8003a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001d16:	bf00      	nop
 8001d18:	3728      	adds	r7, #40	; 0x28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40012c00 	.word	0x40012c00
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020800 	.word	0x40020800

08001d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08c      	sub	sp, #48	; 0x30
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a33      	ldr	r2, [pc, #204]	; (8001e1c <HAL_UART_MspInit+0xec>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d12d      	bne.n	8001dae <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
 8001d56:	4b32      	ldr	r3, [pc, #200]	; (8001e20 <HAL_UART_MspInit+0xf0>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a31      	ldr	r2, [pc, #196]	; (8001e20 <HAL_UART_MspInit+0xf0>)
 8001d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b2f      	ldr	r3, [pc, #188]	; (8001e20 <HAL_UART_MspInit+0xf0>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6a:	61bb      	str	r3, [r7, #24]
 8001d6c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <HAL_UART_MspInit+0xf0>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a2a      	ldr	r2, [pc, #168]	; (8001e20 <HAL_UART_MspInit+0xf0>)
 8001d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <HAL_UART_MspInit+0xf0>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration    
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX 
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8001d8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d94:	2301      	movs	r3, #1
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001d9c:	230b      	movs	r3, #11
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	4619      	mov	r1, r3
 8001da6:	481f      	ldr	r0, [pc, #124]	; (8001e24 <HAL_UART_MspInit+0xf4>)
 8001da8:	f001 fe58 	bl	8003a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001dac:	e031      	b.n	8001e12 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <HAL_UART_MspInit+0xf8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d12c      	bne.n	8001e12 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001db8:	2300      	movs	r3, #0
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <HAL_UART_MspInit+0xf0>)
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc0:	4a17      	ldr	r2, [pc, #92]	; (8001e20 <HAL_UART_MspInit+0xf0>)
 8001dc2:	f043 0320 	orr.w	r3, r3, #32
 8001dc6:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <HAL_UART_MspInit+0xf0>)
 8001dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dcc:	f003 0320 	and.w	r3, r3, #32
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <HAL_UART_MspInit+0xf0>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	4a10      	ldr	r2, [pc, #64]	; (8001e20 <HAL_UART_MspInit+0xf0>)
 8001dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001de2:	6313      	str	r3, [r2, #48]	; 0x30
 8001de4:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <HAL_UART_MspInit+0xf0>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001df0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e02:	2308      	movs	r3, #8
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e06:	f107 031c 	add.w	r3, r7, #28
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4805      	ldr	r0, [pc, #20]	; (8001e24 <HAL_UART_MspInit+0xf4>)
 8001e0e:	f001 fe25 	bl	8003a5c <HAL_GPIO_Init>
}
 8001e12:	bf00      	nop
 8001e14:	3730      	adds	r7, #48	; 0x30
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40011c00 	.word	0x40011c00
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40021800 	.word	0x40021800
 8001e28:	40011400 	.word	0x40011400

08001e2c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001e40:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <HAL_FSMC_MspInit+0xc8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d151      	bne.n	8001eec <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001e48:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <HAL_FSMC_MspInit+0xc8>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	603b      	str	r3, [r7, #0]
 8001e52:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <HAL_FSMC_MspInit+0xcc>)
 8001e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e56:	4a28      	ldr	r2, [pc, #160]	; (8001ef8 <HAL_FSMC_MspInit+0xcc>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6393      	str	r3, [r2, #56]	; 0x38
 8001e5e:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <HAL_FSMC_MspInit+0xcc>)
 8001e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin 
 8001e6a:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001e6e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin 
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e7c:	230c      	movs	r3, #12
 8001e7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	4619      	mov	r1, r3
 8001e84:	481d      	ldr	r0, [pc, #116]	; (8001efc <HAL_FSMC_MspInit+0xd0>)
 8001e86:	f001 fde9 	bl	8003a5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin 
 8001e8a:	f240 433f 	movw	r3, #1087	; 0x43f
 8001e8e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e9c:	230c      	movs	r3, #12
 8001e9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4816      	ldr	r0, [pc, #88]	; (8001f00 <HAL_FSMC_MspInit+0xd4>)
 8001ea6:	f001 fdd9 	bl	8003a5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin 
 8001eaa:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001eae:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin 
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001ebc:	230c      	movs	r3, #12
 8001ebe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	480f      	ldr	r0, [pc, #60]	; (8001f04 <HAL_FSMC_MspInit+0xd8>)
 8001ec6:	f001 fdc9 	bl	8003a5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin 
 8001eca:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001ece:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin 
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001edc:	230c      	movs	r3, #12
 8001ede:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4808      	ldr	r0, [pc, #32]	; (8001f08 <HAL_FSMC_MspInit+0xdc>)
 8001ee6:	f001 fdb9 	bl	8003a5c <HAL_GPIO_Init>
 8001eea:	e000      	b.n	8001eee <HAL_FSMC_MspInit+0xc2>
    return;
 8001eec:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	200000d8 	.word	0x200000d8
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40021400 	.word	0x40021400
 8001f00:	40021800 	.word	0x40021800
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40020c00 	.word	0x40020c00

08001f0c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001f14:	f7ff ff8a 	bl	8001e2c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <HardFault_Handler+0x4>

08001f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <MemManage_Handler+0x4>

08001f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <BusFault_Handler+0x4>

08001f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <UsageFault_Handler+0x4>

08001f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f74:	f000 f95e 	bl	8002234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001f80:	4802      	ldr	r0, [pc, #8]	; (8001f8c <DMA2_Stream0_IRQHandler+0x10>)
 8001f82:	f001 fa29 	bl	80033d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	200034ec 	.word	0x200034ec

08001f90 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001f98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f9c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d013      	beq.n	8001fd0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001fa8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001fac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001fb0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00b      	beq.n	8001fd0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001fb8:	e000      	b.n	8001fbc <ITM_SendChar+0x2c>
    {
      __NOP();
 8001fba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001fbc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f9      	beq.n	8001fba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001fc6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001fd0:	687b      	ldr	r3, [r7, #4]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	e00a      	b.n	8002006 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ff0:	f3af 8000 	nop.w
 8001ff4:	4601      	mov	r1, r0
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	60ba      	str	r2, [r7, #8]
 8001ffc:	b2ca      	uxtb	r2, r1
 8001ffe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	3301      	adds	r3, #1
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	429a      	cmp	r2, r3
 800200c:	dbf0      	blt.n	8001ff0 <_read+0x12>
	}

return len;
 800200e:	687b      	ldr	r3, [r7, #4]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
		for(int i = 0; i < len; i++){
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	e009      	b.n	800203e <_write+0x26>
			ITM_SendChar(*ptr++);
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	60ba      	str	r2, [r7, #8]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ffac 	bl	8001f90 <ITM_SendChar>
		for(int i = 0; i < len; i++){
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	3301      	adds	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	429a      	cmp	r2, r3
 8002044:	dbf1      	blt.n	800202a <_write+0x12>
		}
		return len;
 8002046:	687b      	ldr	r3, [r7, #4]

	//	errno = ENOSYS;
	//	return -1;
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <_close>:

int _close(int file)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	return -1;
 8002058:	f04f 33ff 	mov.w	r3, #4294967295
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002078:	605a      	str	r2, [r3, #4]
	return 0;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <_isatty>:

int _isatty(int file)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
	return 1;
 8002090:	2301      	movs	r3, #1
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800209e:	b480      	push	{r7}
 80020a0:	b085      	sub	sp, #20
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
	return 0;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <_sbrk+0x50>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <_sbrk+0x16>
		heap_end = &end;
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <_sbrk+0x50>)
 80020ca:	4a10      	ldr	r2, [pc, #64]	; (800210c <_sbrk+0x54>)
 80020cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <_sbrk+0x50>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <_sbrk+0x50>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4413      	add	r3, r2
 80020dc:	466a      	mov	r2, sp
 80020de:	4293      	cmp	r3, r2
 80020e0:	d907      	bls.n	80020f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80020e2:	f008 f8a1 	bl	800a228 <__errno>
 80020e6:	4602      	mov	r2, r0
 80020e8:	230c      	movs	r3, #12
 80020ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80020ec:	f04f 33ff 	mov.w	r3, #4294967295
 80020f0:	e006      	b.n	8002100 <_sbrk+0x48>
	}

	heap_end += incr;
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <_sbrk+0x50>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	4a03      	ldr	r2, [pc, #12]	; (8002108 <_sbrk+0x50>)
 80020fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80020fe:	68fb      	ldr	r3, [r7, #12]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	200000dc 	.word	0x200000dc
 800210c:	20006fc0 	.word	0x20006fc0

08002110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <SystemInit+0x28>)
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211a:	4a07      	ldr	r2, [pc, #28]	; (8002138 <SystemInit+0x28>)
 800211c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <SystemInit+0x28>)
 8002126:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800212a:	609a      	str	r2, [r3, #8]
#endif
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800213c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002174 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002140:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002142:	e003      	b.n	800214c <LoopCopyDataInit>

08002144 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002146:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002148:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800214a:	3104      	adds	r1, #4

0800214c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800214c:	480b      	ldr	r0, [pc, #44]	; (800217c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800214e:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002150:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002152:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002154:	d3f6      	bcc.n	8002144 <CopyDataInit>
  ldr  r2, =_sbss
 8002156:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002158:	e002      	b.n	8002160 <LoopFillZerobss>

0800215a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800215a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800215c:	f842 3b04 	str.w	r3, [r2], #4

08002160 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002162:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002164:	d3f9      	bcc.n	800215a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002166:	f7ff ffd3 	bl	8002110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800216a:	f008 f863 	bl	800a234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800216e:	f7fe fa91 	bl	8000694 <main>
  bx  lr    
 8002172:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002174:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002178:	0800b670 	.word	0x0800b670
  ldr  r0, =_sdata
 800217c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002180:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8002184:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8002188:	20006fbc 	.word	0x20006fbc

0800218c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800218c:	e7fe      	b.n	800218c <ADC_IRQHandler>
	...

08002190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002194:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <HAL_Init+0x40>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <HAL_Init+0x40>)
 800219a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800219e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_Init+0x40>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <HAL_Init+0x40>)
 80021a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_Init+0x40>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <HAL_Init+0x40>)
 80021b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b8:	2003      	movs	r0, #3
 80021ba:	f000 fbbf 	bl	800293c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021be:	2000      	movs	r0, #0
 80021c0:	f000 f808 	bl	80021d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021c4:	f7ff f9f0 	bl	80015a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40023c00 	.word	0x40023c00

080021d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_InitTick+0x54>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_InitTick+0x58>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fbd7 	bl	80029a6 <HAL_SYSTICK_Config>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e00e      	b.n	8002220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b0f      	cmp	r3, #15
 8002206:	d80a      	bhi.n	800221e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002208:	2200      	movs	r2, #0
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f000 fb9f 	bl	8002952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002214:	4a06      	ldr	r2, [pc, #24]	; (8002230 <HAL_InitTick+0x5c>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e000      	b.n	8002220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	2000001c 	.word	0x2000001c
 800222c:	20000024 	.word	0x20000024
 8002230:	20000020 	.word	0x20000020

08002234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_IncTick+0x20>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_IncTick+0x24>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4413      	add	r3, r2
 8002244:	4a04      	ldr	r2, [pc, #16]	; (8002258 <HAL_IncTick+0x24>)
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000024 	.word	0x20000024
 8002258:	20004f44 	.word	0x20004f44

0800225c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return uwTick;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <HAL_GetTick+0x14>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20004f44 	.word	0x20004f44

08002274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800227c:	f7ff ffee 	bl	800225c <HAL_GetTick>
 8002280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228c:	d005      	beq.n	800229a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_Delay+0x40>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4413      	add	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800229a:	bf00      	nop
 800229c:	f7ff ffde 	bl	800225c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d8f7      	bhi.n	800229c <HAL_Delay+0x28>
  {
  }
}
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000024 	.word	0x20000024

080022b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e033      	b.n	8002336 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff f98e 	bl	80015f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d118      	bne.n	8002328 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022fe:	f023 0302 	bic.w	r3, r3, #2
 8002302:	f043 0202 	orr.w	r2, r3, #2
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f94a 	bl	80025a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f023 0303 	bic.w	r3, r3, #3
 800231e:	f043 0201 	orr.w	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	641a      	str	r2, [r3, #64]	; 0x40
 8002326:	e001      	b.n	800232c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002334:	7bfb      	ldrb	r3, [r7, #15]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_ADC_ConfigChannel+0x1c>
 8002358:	2302      	movs	r3, #2
 800235a:	e113      	b.n	8002584 <HAL_ADC_ConfigChannel+0x244>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b09      	cmp	r3, #9
 800236a:	d925      	bls.n	80023b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68d9      	ldr	r1, [r3, #12]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	3b1e      	subs	r3, #30
 8002382:	2207      	movs	r2, #7
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43da      	mvns	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	400a      	ands	r2, r1
 8002390:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68d9      	ldr	r1, [r3, #12]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	4603      	mov	r3, r0
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4403      	add	r3, r0
 80023aa:	3b1e      	subs	r3, #30
 80023ac:	409a      	lsls	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	e022      	b.n	80023fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6919      	ldr	r1, [r3, #16]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	2207      	movs	r2, #7
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43da      	mvns	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	400a      	ands	r2, r1
 80023da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6919      	ldr	r1, [r3, #16]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	4618      	mov	r0, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4403      	add	r3, r0
 80023f4:	409a      	lsls	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b06      	cmp	r3, #6
 8002404:	d824      	bhi.n	8002450 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	3b05      	subs	r3, #5
 8002418:	221f      	movs	r2, #31
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	400a      	ands	r2, r1
 8002426:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	4618      	mov	r0, r3
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	3b05      	subs	r3, #5
 8002442:	fa00 f203 	lsl.w	r2, r0, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	635a      	str	r2, [r3, #52]	; 0x34
 800244e:	e04c      	b.n	80024ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b0c      	cmp	r3, #12
 8002456:	d824      	bhi.n	80024a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3b23      	subs	r3, #35	; 0x23
 800246a:	221f      	movs	r2, #31
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43da      	mvns	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	400a      	ands	r2, r1
 8002478:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	4618      	mov	r0, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	3b23      	subs	r3, #35	; 0x23
 8002494:	fa00 f203 	lsl.w	r2, r0, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
 80024a0:	e023      	b.n	80024ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	3b41      	subs	r3, #65	; 0x41
 80024b4:	221f      	movs	r2, #31
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	400a      	ands	r2, r1
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	4618      	mov	r0, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	3b41      	subs	r3, #65	; 0x41
 80024de:	fa00 f203 	lsl.w	r2, r0, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ea:	4b29      	ldr	r3, [pc, #164]	; (8002590 <HAL_ADC_ConfigChannel+0x250>)
 80024ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a28      	ldr	r2, [pc, #160]	; (8002594 <HAL_ADC_ConfigChannel+0x254>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d10f      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x1d8>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b12      	cmp	r3, #18
 80024fe:	d10b      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1d      	ldr	r2, [pc, #116]	; (8002594 <HAL_ADC_ConfigChannel+0x254>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d12b      	bne.n	800257a <HAL_ADC_ConfigChannel+0x23a>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1c      	ldr	r2, [pc, #112]	; (8002598 <HAL_ADC_ConfigChannel+0x258>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d003      	beq.n	8002534 <HAL_ADC_ConfigChannel+0x1f4>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b11      	cmp	r3, #17
 8002532:	d122      	bne.n	800257a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a11      	ldr	r2, [pc, #68]	; (8002598 <HAL_ADC_ConfigChannel+0x258>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d111      	bne.n	800257a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <HAL_ADC_ConfigChannel+0x25c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a11      	ldr	r2, [pc, #68]	; (80025a0 <HAL_ADC_ConfigChannel+0x260>)
 800255c:	fba2 2303 	umull	r2, r3, r2, r3
 8002560:	0c9a      	lsrs	r2, r3, #18
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800256c:	e002      	b.n	8002574 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	3b01      	subs	r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f9      	bne.n	800256e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	40012300 	.word	0x40012300
 8002594:	40012000 	.word	0x40012000
 8002598:	10000012 	.word	0x10000012
 800259c:	2000001c 	.word	0x2000001c
 80025a0:	431bde83 	.word	0x431bde83

080025a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025ac:	4b79      	ldr	r3, [pc, #484]	; (8002794 <ADC_Init+0x1f0>)
 80025ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6859      	ldr	r1, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	021a      	lsls	r2, r3, #8
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6859      	ldr	r1, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800261e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6899      	ldr	r1, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	4a58      	ldr	r2, [pc, #352]	; (8002798 <ADC_Init+0x1f4>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d022      	beq.n	8002682 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800264a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6899      	ldr	r1, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800266c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6899      	ldr	r1, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	e00f      	b.n	80026a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002690:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0202 	bic.w	r2, r2, #2
 80026b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6899      	ldr	r1, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7e1b      	ldrb	r3, [r3, #24]
 80026bc:	005a      	lsls	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01b      	beq.n	8002708 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6859      	ldr	r1, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	3b01      	subs	r3, #1
 80026fc:	035a      	lsls	r2, r3, #13
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	e007      	b.n	8002718 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002716:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002726:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	3b01      	subs	r3, #1
 8002734:	051a      	lsls	r2, r3, #20
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800274c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6899      	ldr	r1, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800275a:	025a      	lsls	r2, r3, #9
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002772:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6899      	ldr	r1, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	029a      	lsls	r2, r3, #10
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	609a      	str	r2, [r3, #8]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	40012300 	.word	0x40012300
 8002798:	0f000001 	.word	0x0f000001

0800279c <__NVIC_SetPriorityGrouping>:
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <__NVIC_SetPriorityGrouping+0x44>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027b8:	4013      	ands	r3, r2
 80027ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ce:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <__NVIC_SetPriorityGrouping+0x44>)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	60d3      	str	r3, [r2, #12]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <__NVIC_GetPriorityGrouping>:
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e8:	4b04      	ldr	r3, [pc, #16]	; (80027fc <__NVIC_GetPriorityGrouping+0x18>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	f003 0307 	and.w	r3, r3, #7
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <__NVIC_EnableIRQ>:
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	2b00      	cmp	r3, #0
 8002810:	db0b      	blt.n	800282a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	f003 021f 	and.w	r2, r3, #31
 8002818:	4907      	ldr	r1, [pc, #28]	; (8002838 <__NVIC_EnableIRQ+0x38>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	2001      	movs	r0, #1
 8002822:	fa00 f202 	lsl.w	r2, r0, r2
 8002826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000e100 	.word	0xe000e100

0800283c <__NVIC_SetPriority>:
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	6039      	str	r1, [r7, #0]
 8002846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	2b00      	cmp	r3, #0
 800284e:	db0a      	blt.n	8002866 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	b2da      	uxtb	r2, r3
 8002854:	490c      	ldr	r1, [pc, #48]	; (8002888 <__NVIC_SetPriority+0x4c>)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	0112      	lsls	r2, r2, #4
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	440b      	add	r3, r1
 8002860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002864:	e00a      	b.n	800287c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4908      	ldr	r1, [pc, #32]	; (800288c <__NVIC_SetPriority+0x50>)
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	3b04      	subs	r3, #4
 8002874:	0112      	lsls	r2, r2, #4
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	440b      	add	r3, r1
 800287a:	761a      	strb	r2, [r3, #24]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000e100 	.word	0xe000e100
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <NVIC_EncodePriority>:
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	; 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f1c3 0307 	rsb	r3, r3, #7
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	bf28      	it	cs
 80028ae:	2304      	movcs	r3, #4
 80028b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	d902      	bls.n	80028c0 <NVIC_EncodePriority+0x30>
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3b03      	subs	r3, #3
 80028be:	e000      	b.n	80028c2 <NVIC_EncodePriority+0x32>
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43da      	mvns	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	401a      	ands	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d8:	f04f 31ff 	mov.w	r1, #4294967295
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa01 f303 	lsl.w	r3, r1, r3
 80028e2:	43d9      	mvns	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	4313      	orrs	r3, r2
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3724      	adds	r7, #36	; 0x24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <SysTick_Config>:
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002908:	d301      	bcc.n	800290e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800290a:	2301      	movs	r3, #1
 800290c:	e00f      	b.n	800292e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800290e:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <SysTick_Config+0x40>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3b01      	subs	r3, #1
 8002914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002916:	210f      	movs	r1, #15
 8002918:	f04f 30ff 	mov.w	r0, #4294967295
 800291c:	f7ff ff8e 	bl	800283c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <SysTick_Config+0x40>)
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <SysTick_Config+0x40>)
 8002928:	2207      	movs	r2, #7
 800292a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	e000e010 	.word	0xe000e010

0800293c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff ff29 	bl	800279c <__NVIC_SetPriorityGrouping>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002952:	b580      	push	{r7, lr}
 8002954:	b086      	sub	sp, #24
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002964:	f7ff ff3e 	bl	80027e4 <__NVIC_GetPriorityGrouping>
 8002968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	6978      	ldr	r0, [r7, #20]
 8002970:	f7ff ff8e 	bl	8002890 <NVIC_EncodePriority>
 8002974:	4602      	mov	r2, r0
 8002976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff5d 	bl	800283c <__NVIC_SetPriority>
}
 8002982:	bf00      	nop
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff31 	bl	8002800 <__NVIC_EnableIRQ>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ffa2 	bl	80028f8 <SysTick_Config>
 80029b4:	4603      	mov	r3, r0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e014      	b.n	80029fa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	791b      	ldrb	r3, [r3, #4]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d105      	bne.n	80029e6 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7fe fe85 	bl	80016f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2202      	movs	r2, #2
 80029ea:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b087      	sub	sp, #28
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	795b      	ldrb	r3, [r3, #5]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_DAC_ConfigChannel+0x20>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e036      	b.n	8002a90 <HAL_DAC_ConfigChannel+0x8e>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002a36:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4013      	ands	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6819      	ldr	r1, [r3, #0]
 8002a70:	22c0      	movs	r2, #192	; 0xc0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	400a      	ands	r2, r1
 8002a80:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2201      	movs	r2, #1
 8002a86:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	371c      	adds	r7, #28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e0cf      	b.n	8002c4e <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a69      	ldr	r2, [pc, #420]	; (8002c58 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00e      	beq.n	8002ad6 <HAL_DFSDM_ChannelInit+0x3a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a67      	ldr	r2, [pc, #412]	; (8002c5c <HAL_DFSDM_ChannelInit+0x1c0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d009      	beq.n	8002ad6 <HAL_DFSDM_ChannelInit+0x3a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a66      	ldr	r2, [pc, #408]	; (8002c60 <HAL_DFSDM_ChannelInit+0x1c4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d004      	beq.n	8002ad6 <HAL_DFSDM_ChannelInit+0x3a>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a64      	ldr	r2, [pc, #400]	; (8002c64 <HAL_DFSDM_ChannelInit+0x1c8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d106      	bne.n	8002ae4 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8002ad6:	4b64      	ldr	r3, [pc, #400]	; (8002c68 <HAL_DFSDM_ChannelInit+0x1cc>)
 8002ad8:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8002ada:	4b64      	ldr	r3, [pc, #400]	; (8002c6c <HAL_DFSDM_ChannelInit+0x1d0>)
 8002adc:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8002ade:	4b5e      	ldr	r3, [pc, #376]	; (8002c58 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	e005      	b.n	8002af0 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8002ae4:	4b62      	ldr	r3, [pc, #392]	; (8002c70 <HAL_DFSDM_ChannelInit+0x1d4>)
 8002ae6:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8002ae8:	4b62      	ldr	r3, [pc, #392]	; (8002c74 <HAL_DFSDM_ChannelInit+0x1d8>)
 8002aea:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8002aec:	4b62      	ldr	r3, [pc, #392]	; (8002c78 <HAL_DFSDM_ChannelInit+0x1dc>)
 8002aee:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 faaf 	bl	8003058 <DFSDM_GetChannelFromInstance>
 8002afa:	4603      	mov	r3, r0
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4413      	add	r3, r2
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0a0      	b.n	8002c4e <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7fe fef5 	bl	80018fc <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d125      	bne.n	8002b70 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	791b      	ldrb	r3, [r3, #4]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d108      	bne.n	8002b64 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	041b      	lsls	r3, r3, #16
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002b7e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6819      	ldr	r1, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002b8e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002b94:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 020f 	bic.w	r2, r2, #15
 8002bac:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6819      	ldr	r1, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002bd4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6899      	ldr	r1, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	3b01      	subs	r3, #1
 8002be6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f002 0207 	and.w	r2, r2, #7
 8002c00:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c2c:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fa0c 	bl	8003058 <DFSDM_GetChannelFromInstance>
 8002c40:	4603      	mov	r3, r0
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4413      	add	r3, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40016000 	.word	0x40016000
 8002c5c:	40016020 	.word	0x40016020
 8002c60:	40016040 	.word	0x40016040
 8002c64:	40016060 	.word	0x40016060
 8002c68:	200000e0 	.word	0x200000e0
 8002c6c:	200000e4 	.word	0x200000e4
 8002c70:	200000f4 	.word	0x200000f4
 8002c74:	200000f8 	.word	0x200000f8
 8002c78:	40016400 	.word	0x40016400

08002c7c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e0d9      	b.n	8002e42 <HAL_DFSDM_FilterInit+0x1c6>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a6e      	ldr	r2, [pc, #440]	; (8002e4c <HAL_DFSDM_FilterInit+0x1d0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d109      	bne.n	8002cac <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d003      	beq.n	8002ca8 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0ca      	b.n	8002e42 <HAL_DFSDM_FilterInit+0x1c6>
  }
#if defined (DFSDM2_Channel0)  
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a67      	ldr	r2, [pc, #412]	; (8002e50 <HAL_DFSDM_FilterInit+0x1d4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d109      	bne.n	8002cca <HAL_DFSDM_FilterInit+0x4e>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d003      	beq.n	8002cc6 <HAL_DFSDM_FilterInit+0x4a>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_DFSDM_FilterInit+0x4e>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0bb      	b.n	8002e42 <HAL_DFSDM_FilterInit+0x1c6>
  }  
#endif /* DFSDM2_Channel0 */
       
  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1U;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fe fd48 	bl	8001778 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002cf6:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7a1b      	ldrb	r3, [r3, #8]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d108      	bne.n	8002d12 <HAL_DFSDM_FilterInit+0x96>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	e007      	b.n	8002d22 <HAL_DFSDM_FilterInit+0xa6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002d20:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	7a5b      	ldrb	r3, [r3, #9]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d108      	bne.n	8002d3c <HAL_DFSDM_FilterInit+0xc0>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	e007      	b.n	8002d4c <HAL_DFSDM_FilterInit+0xd0>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002d4a:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8002d5a:	f023 0308 	bic.w	r3, r3, #8
 8002d5e:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d108      	bne.n	8002d7a <HAL_DFSDM_FilterInit+0xfe>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6819      	ldr	r1, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	7c1b      	ldrb	r3, [r3, #16]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d108      	bne.n	8002d94 <HAL_DFSDM_FilterInit+0x118>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0210 	orr.w	r2, r2, #16
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	e007      	b.n	8002da4 <HAL_DFSDM_FilterInit+0x128>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0210 	bic.w	r2, r2, #16
 8002da2:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	7c5b      	ldrb	r3, [r3, #17]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d108      	bne.n	8002dbe <HAL_DFSDM_FilterInit+0x142>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0220 	orr.w	r2, r2, #32
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e007      	b.n	8002dce <HAL_DFSDM_FilterInit+0x152>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0220 	bic.w	r2, r2, #32
 8002dcc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8002ddc:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8002de0:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6959      	ldr	r1, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	3b01      	subs	r3, #1
 8002df2:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002df4:	431a      	orrs	r2, r3
                                     (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002dfc:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	7c1a      	ldrb	r2, [r3, #16]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40016100 	.word	0x40016100
 8002e50:	40016500 	.word	0x40016500

08002e54 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d02e      	beq.n	8002ecc <HAL_DFSDM_FilterConfigRegChannel+0x78>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8002e74:	2bff      	cmp	r3, #255	; 0xff
 8002e76:	d029      	beq.n	8002ecc <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e8a:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d10d      	bne.n	8002eae <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	e00a      	b.n	8002ec4 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6819      	ldr	r1, [r3, #0]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	631a      	str	r2, [r3, #48]	; 0x30
 8002eca:	e001      	b.n	8002ed0 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }  
  else
  {
    status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0U))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d102      	bne.n	8002f02 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	75fb      	strb	r3, [r7, #23]
 8002f00:	e066      	b.n	8002fd0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f10:	d002      	beq.n	8002f18 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	75fb      	strb	r3, [r7, #23]
 8002f16:	e05b      	b.n	8002fd0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10e      	bne.n	8002f3e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10a      	bne.n	8002f3e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d105      	bne.n	8002f3e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d002      	beq.n	8002f3e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1U))
  {
    status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	75fb      	strb	r3, [r7, #23]
 8002f3c:	e048      	b.n	8002fd0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10c      	bne.n	8002f60 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d108      	bne.n	8002f60 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f58:	d102      	bne.n	8002f60 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	75fb      	strb	r3, [r7, #23]
 8002f5e:	e037      	b.n	8002fd0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d004      	beq.n	8002f74 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d12b      	bne.n	8002fcc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	4a18      	ldr	r2, [pc, #96]	; (8002fdc <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8002f7a:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	4a17      	ldr	r2, [pc, #92]	; (8002fe0 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8002f82:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f8e:	d101      	bne.n	8002f94 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8002f90:	4a14      	ldr	r2, [pc, #80]	; (8002fe4 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8002f92:	e000      	b.n	8002f96 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8002f94:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	331c      	adds	r3, #28
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f000 f9bc 	bl	8003328 <HAL_DMA_Start_IT>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d006      	beq.n	8002fc4 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	22ff      	movs	r2, #255	; 0xff
 8002fba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002fc2:	e005      	b.n	8002fd0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 f8ab 	bl	8003120 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002fca:	e001      	b.n	8002fd0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8002fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	08003019 	.word	0x08003019
 8002fe0:	08003035 	.word	0x08003035
 8002fe4:	08002ffd 	.word	0x08002ffd

08002fe8 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdfsdm_filter);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003008:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f7fe f910 	bl	8001230 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8003010:	bf00      	nop
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f7fe f9e0 	bl	80013ec <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 800302c:	bf00      	nop
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2203      	movs	r2, #3
 8003046:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f7ff ffcd 	bl	8002fe8 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a24      	ldr	r2, [pc, #144]	; (80030f4 <DFSDM_GetChannelFromInstance+0x9c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d003      	beq.n	8003070 <DFSDM_GetChannelFromInstance+0x18>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a23      	ldr	r2, [pc, #140]	; (80030f8 <DFSDM_GetChannelFromInstance+0xa0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d102      	bne.n	8003076 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	e037      	b.n	80030e6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a20      	ldr	r2, [pc, #128]	; (80030fc <DFSDM_GetChannelFromInstance+0xa4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d003      	beq.n	8003086 <DFSDM_GetChannelFromInstance+0x2e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a1f      	ldr	r2, [pc, #124]	; (8003100 <DFSDM_GetChannelFromInstance+0xa8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d102      	bne.n	800308c <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8003086:	2301      	movs	r3, #1
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	e02c      	b.n	80030e6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a1d      	ldr	r2, [pc, #116]	; (8003104 <DFSDM_GetChannelFromInstance+0xac>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d003      	beq.n	800309c <DFSDM_GetChannelFromInstance+0x44>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a1c      	ldr	r2, [pc, #112]	; (8003108 <DFSDM_GetChannelFromInstance+0xb0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d102      	bne.n	80030a2 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 800309c:	2302      	movs	r3, #2
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e021      	b.n	80030e6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a19      	ldr	r2, [pc, #100]	; (800310c <DFSDM_GetChannelFromInstance+0xb4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d003      	beq.n	80030b2 <DFSDM_GetChannelFromInstance+0x5a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a18      	ldr	r2, [pc, #96]	; (8003110 <DFSDM_GetChannelFromInstance+0xb8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d102      	bne.n	80030b8 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 80030b2:	2303      	movs	r3, #3
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	e016      	b.n	80030e6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a16      	ldr	r2, [pc, #88]	; (8003114 <DFSDM_GetChannelFromInstance+0xbc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d102      	bne.n	80030c6 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 80030c0:	2304      	movs	r3, #4
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	e00f      	b.n	80030e6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a13      	ldr	r2, [pc, #76]	; (8003118 <DFSDM_GetChannelFromInstance+0xc0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d102      	bne.n	80030d4 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 80030ce:	2305      	movs	r3, #5
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	e008      	b.n	80030e6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a11      	ldr	r2, [pc, #68]	; (800311c <DFSDM_GetChannelFromInstance+0xc4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d102      	bne.n	80030e2 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 80030dc:	2306      	movs	r3, #6
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e001      	b.n	80030e6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 80030e2:	2307      	movs	r3, #7
 80030e4:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 80030e6:	68fb      	ldr	r3, [r7, #12]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	40016000 	.word	0x40016000
 80030f8:	40016400 	.word	0x40016400
 80030fc:	40016020 	.word	0x40016020
 8003100:	40016420 	.word	0x40016420
 8003104:	40016040 	.word	0x40016040
 8003108:	40016440 	.word	0x40016440
 800310c:	40016060 	.word	0x40016060
 8003110:	40016460 	.word	0x40016460
 8003114:	40016480 	.word	0x40016480
 8003118:	400164a0 	.word	0x400164a0
 800311c:	400164c0 	.word	0x400164c0

08003120 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312c:	2b00      	cmp	r3, #0
 800312e:	d108      	bne.n	8003142 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	e033      	b.n	80031aa <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0201 	bic.w	r2, r2, #1
 8003150:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003160:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0201 	orr.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003178:	2b03      	cmp	r3, #3
 800317a:	d116      	bne.n	80031aa <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	2b00      	cmp	r3, #0
 8003182:	d107      	bne.n	8003194 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0202 	orr.w	r2, r2, #2
 8003192:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1U;
 800319a:	2b01      	cmp	r3, #1
 800319c:	d102      	bne.n	80031a4 <DFSDM_RegConvStart+0x84>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	e000      	b.n	80031a6 <DFSDM_RegConvStart+0x86>
 80031a4:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <DFSDM_RegConvStart+0x98>
 80031b4:	2202      	movs	r2, #2
 80031b6:	e000      	b.n	80031ba <DFSDM_RegConvStart+0x9a>
 80031b8:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031d8:	f7ff f840 	bl	800225c <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e099      	b.n	800331c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0201 	bic.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003208:	e00f      	b.n	800322a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800320a:	f7ff f827 	bl	800225c <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b05      	cmp	r3, #5
 8003216:	d908      	bls.n	800322a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2203      	movs	r2, #3
 8003222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e078      	b.n	800331c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1e8      	bne.n	800320a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	4b38      	ldr	r3, [pc, #224]	; (8003324 <HAL_DMA_Init+0x158>)
 8003244:	4013      	ands	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003256:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800326e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	2b04      	cmp	r3, #4
 8003282:	d107      	bne.n	8003294 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	4313      	orrs	r3, r2
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f023 0307 	bic.w	r3, r3, #7
 80032aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d117      	bne.n	80032ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00e      	beq.n	80032ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 fa6f 	bl	80037b4 <DMA_CheckFifoParam>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2240      	movs	r2, #64	; 0x40
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032ea:	2301      	movs	r3, #1
 80032ec:	e016      	b.n	800331c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fa26 	bl	8003748 <DMA_CalcBaseAndBitshift>
 80032fc:	4603      	mov	r3, r0
 80032fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	223f      	movs	r2, #63	; 0x3f
 8003306:	409a      	lsls	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	e010803f 	.word	0xe010803f

08003328 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_DMA_Start_IT+0x26>
 800334a:	2302      	movs	r3, #2
 800334c:	e040      	b.n	80033d0 <HAL_DMA_Start_IT+0xa8>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b01      	cmp	r3, #1
 8003360:	d12f      	bne.n	80033c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2202      	movs	r2, #2
 8003366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f9b8 	bl	80036ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	223f      	movs	r2, #63	; 0x3f
 8003382:	409a      	lsls	r2, r3
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0216 	orr.w	r2, r2, #22
 8003396:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	2b00      	cmp	r3, #0
 800339e:	d007      	beq.n	80033b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0208 	orr.w	r2, r2, #8
 80033ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	e005      	b.n	80033ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033ca:	2302      	movs	r3, #2
 80033cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033e4:	4b92      	ldr	r3, [pc, #584]	; (8003630 <HAL_DMA_IRQHandler+0x258>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a92      	ldr	r2, [pc, #584]	; (8003634 <HAL_DMA_IRQHandler+0x25c>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	0a9b      	lsrs	r3, r3, #10
 80033f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003402:	2208      	movs	r2, #8
 8003404:	409a      	lsls	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4013      	ands	r3, r2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d01a      	beq.n	8003444 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d013      	beq.n	8003444 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0204 	bic.w	r2, r2, #4
 800342a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	2208      	movs	r2, #8
 8003432:	409a      	lsls	r2, r3
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	f043 0201 	orr.w	r2, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	2201      	movs	r2, #1
 800344a:	409a      	lsls	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d012      	beq.n	800347a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003466:	2201      	movs	r2, #1
 8003468:	409a      	lsls	r2, r3
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	f043 0202 	orr.w	r2, r3, #2
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347e:	2204      	movs	r2, #4
 8003480:	409a      	lsls	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d012      	beq.n	80034b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00b      	beq.n	80034b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	2204      	movs	r2, #4
 800349e:	409a      	lsls	r2, r3
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a8:	f043 0204 	orr.w	r2, r3, #4
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b4:	2210      	movs	r2, #16
 80034b6:	409a      	lsls	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d043      	beq.n	8003548 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d03c      	beq.n	8003548 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d2:	2210      	movs	r2, #16
 80034d4:	409a      	lsls	r2, r3
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d018      	beq.n	800351a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d108      	bne.n	8003508 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d024      	beq.n	8003548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	4798      	blx	r3
 8003506:	e01f      	b.n	8003548 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01b      	beq.n	8003548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	4798      	blx	r3
 8003518:	e016      	b.n	8003548 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d107      	bne.n	8003538 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0208 	bic.w	r2, r2, #8
 8003536:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354c:	2220      	movs	r2, #32
 800354e:	409a      	lsls	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 808e 	beq.w	8003676 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8086 	beq.w	8003676 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356e:	2220      	movs	r2, #32
 8003570:	409a      	lsls	r2, r3
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b05      	cmp	r3, #5
 8003580:	d136      	bne.n	80035f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0216 	bic.w	r2, r2, #22
 8003590:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d103      	bne.n	80035b2 <HAL_DMA_IRQHandler+0x1da>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d007      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0208 	bic.w	r2, r2, #8
 80035c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c6:	223f      	movs	r2, #63	; 0x3f
 80035c8:	409a      	lsls	r2, r3
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d07d      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
        }
        return;
 80035ee:	e078      	b.n	80036e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d01c      	beq.n	8003638 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d108      	bne.n	800361e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003610:	2b00      	cmp	r3, #0
 8003612:	d030      	beq.n	8003676 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	4798      	blx	r3
 800361c:	e02b      	b.n	8003676 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d027      	beq.n	8003676 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	4798      	blx	r3
 800362e:	e022      	b.n	8003676 <HAL_DMA_IRQHandler+0x29e>
 8003630:	2000001c 	.word	0x2000001c
 8003634:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0210 	bic.w	r2, r2, #16
 8003654:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	2b00      	cmp	r3, #0
 800367c:	d032      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d022      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2205      	movs	r2, #5
 800368e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0201 	bic.w	r2, r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	3301      	adds	r3, #1
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d307      	bcc.n	80036be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f2      	bne.n	80036a2 <HAL_DMA_IRQHandler+0x2ca>
 80036bc:	e000      	b.n	80036c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80036be:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	4798      	blx	r3
 80036e0:	e000      	b.n	80036e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80036e2:	bf00      	nop
    }
  }
}
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop

080036ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003708:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b40      	cmp	r3, #64	; 0x40
 8003718:	d108      	bne.n	800372c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800372a:	e007      	b.n	800373c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	60da      	str	r2, [r3, #12]
}
 800373c:	bf00      	nop
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	3b10      	subs	r3, #16
 8003758:	4a14      	ldr	r2, [pc, #80]	; (80037ac <DMA_CalcBaseAndBitshift+0x64>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003762:	4a13      	ldr	r2, [pc, #76]	; (80037b0 <DMA_CalcBaseAndBitshift+0x68>)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4413      	add	r3, r2
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d909      	bls.n	800378a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800377e:	f023 0303 	bic.w	r3, r3, #3
 8003782:	1d1a      	adds	r2, r3, #4
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	659a      	str	r2, [r3, #88]	; 0x58
 8003788:	e007      	b.n	800379a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003792:	f023 0303 	bic.w	r3, r3, #3
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	aaaaaaab 	.word	0xaaaaaaab
 80037b0:	0800b16c 	.word	0x0800b16c

080037b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d11f      	bne.n	800380e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d855      	bhi.n	8003880 <DMA_CheckFifoParam+0xcc>
 80037d4:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <DMA_CheckFifoParam+0x28>)
 80037d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037da:	bf00      	nop
 80037dc:	080037ed 	.word	0x080037ed
 80037e0:	080037ff 	.word	0x080037ff
 80037e4:	080037ed 	.word	0x080037ed
 80037e8:	08003881 	.word	0x08003881
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d045      	beq.n	8003884 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037fc:	e042      	b.n	8003884 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003806:	d13f      	bne.n	8003888 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800380c:	e03c      	b.n	8003888 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003816:	d121      	bne.n	800385c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b03      	cmp	r3, #3
 800381c:	d836      	bhi.n	800388c <DMA_CheckFifoParam+0xd8>
 800381e:	a201      	add	r2, pc, #4	; (adr r2, 8003824 <DMA_CheckFifoParam+0x70>)
 8003820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003824:	08003835 	.word	0x08003835
 8003828:	0800383b 	.word	0x0800383b
 800382c:	08003835 	.word	0x08003835
 8003830:	0800384d 	.word	0x0800384d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      break;
 8003838:	e02f      	b.n	800389a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d024      	beq.n	8003890 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800384a:	e021      	b.n	8003890 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003854:	d11e      	bne.n	8003894 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800385a:	e01b      	b.n	8003894 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d902      	bls.n	8003868 <DMA_CheckFifoParam+0xb4>
 8003862:	2b03      	cmp	r3, #3
 8003864:	d003      	beq.n	800386e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003866:	e018      	b.n	800389a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
      break;
 800386c:	e015      	b.n	800389a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00e      	beq.n	8003898 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
      break;
 800387e:	e00b      	b.n	8003898 <DMA_CheckFifoParam+0xe4>
      break;
 8003880:	bf00      	nop
 8003882:	e00a      	b.n	800389a <DMA_CheckFifoParam+0xe6>
      break;
 8003884:	bf00      	nop
 8003886:	e008      	b.n	800389a <DMA_CheckFifoParam+0xe6>
      break;
 8003888:	bf00      	nop
 800388a:	e006      	b.n	800389a <DMA_CheckFifoParam+0xe6>
      break;
 800388c:	bf00      	nop
 800388e:	e004      	b.n	800389a <DMA_CheckFifoParam+0xe6>
      break;
 8003890:	bf00      	nop
 8003892:	e002      	b.n	800389a <DMA_CheckFifoParam+0xe6>
      break;   
 8003894:	bf00      	nop
 8003896:	e000      	b.n	800389a <DMA_CheckFifoParam+0xe6>
      break;
 8003898:	bf00      	nop
    }
  } 
  
  return status; 
 800389a:	7bfb      	ldrb	r3, [r7, #15]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e081      	b.n	80039be <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fe f8a2 	bl	8001a18 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2224      	movs	r2, #36	; 0x24
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003908:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d107      	bne.n	8003922 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	e006      	b.n	8003930 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800392e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d104      	bne.n	8003942 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003940:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003954:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003964:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	ea42 0103 	orr.w	r1, r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	021a      	lsls	r2, r3, #8
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69d9      	ldr	r1, [r3, #28]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a1a      	ldr	r2, [r3, #32]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b20      	cmp	r3, #32
 80039da:	d138      	bne.n	8003a4e <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e032      	b.n	8003a50 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2224      	movs	r2, #36	; 0x24
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0201 	bic.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a18:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6819      	ldr	r1, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e000      	b.n	8003a50 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a4e:	2302      	movs	r3, #2
  }
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b089      	sub	sp, #36	; 0x24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a72:	2300      	movs	r3, #0
 8003a74:	61fb      	str	r3, [r7, #28]
 8003a76:	e165      	b.n	8003d44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a78:	2201      	movs	r2, #1
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	f040 8154 	bne.w	8003d3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d00b      	beq.n	8003ab6 <HAL_GPIO_Init+0x5a>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d007      	beq.n	8003ab6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003aaa:	2b11      	cmp	r3, #17
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b12      	cmp	r3, #18
 8003ab4:	d130      	bne.n	8003b18 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4013      	ands	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aec:	2201      	movs	r2, #1
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	43db      	mvns	r3, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	4013      	ands	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	f003 0201 	and.w	r2, r3, #1
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	2203      	movs	r2, #3
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d003      	beq.n	8003b58 <HAL_GPIO_Init+0xfc>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b12      	cmp	r3, #18
 8003b56:	d123      	bne.n	8003ba0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	08da      	lsrs	r2, r3, #3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3208      	adds	r2, #8
 8003b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	220f      	movs	r2, #15
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	08da      	lsrs	r2, r3, #3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3208      	adds	r2, #8
 8003b9a:	69b9      	ldr	r1, [r7, #24]
 8003b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	2203      	movs	r2, #3
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0203 	and.w	r2, r3, #3
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80ae 	beq.w	8003d3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	4b5c      	ldr	r3, [pc, #368]	; (8003d58 <HAL_GPIO_Init+0x2fc>)
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	4a5b      	ldr	r2, [pc, #364]	; (8003d58 <HAL_GPIO_Init+0x2fc>)
 8003bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bf2:	4b59      	ldr	r3, [pc, #356]	; (8003d58 <HAL_GPIO_Init+0x2fc>)
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bfe:	4a57      	ldr	r2, [pc, #348]	; (8003d5c <HAL_GPIO_Init+0x300>)
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	3302      	adds	r3, #2
 8003c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	220f      	movs	r2, #15
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a4e      	ldr	r2, [pc, #312]	; (8003d60 <HAL_GPIO_Init+0x304>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d025      	beq.n	8003c76 <HAL_GPIO_Init+0x21a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a4d      	ldr	r2, [pc, #308]	; (8003d64 <HAL_GPIO_Init+0x308>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d01f      	beq.n	8003c72 <HAL_GPIO_Init+0x216>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a4c      	ldr	r2, [pc, #304]	; (8003d68 <HAL_GPIO_Init+0x30c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d019      	beq.n	8003c6e <HAL_GPIO_Init+0x212>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a4b      	ldr	r2, [pc, #300]	; (8003d6c <HAL_GPIO_Init+0x310>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d013      	beq.n	8003c6a <HAL_GPIO_Init+0x20e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a4a      	ldr	r2, [pc, #296]	; (8003d70 <HAL_GPIO_Init+0x314>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00d      	beq.n	8003c66 <HAL_GPIO_Init+0x20a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a49      	ldr	r2, [pc, #292]	; (8003d74 <HAL_GPIO_Init+0x318>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d007      	beq.n	8003c62 <HAL_GPIO_Init+0x206>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a48      	ldr	r2, [pc, #288]	; (8003d78 <HAL_GPIO_Init+0x31c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d101      	bne.n	8003c5e <HAL_GPIO_Init+0x202>
 8003c5a:	2306      	movs	r3, #6
 8003c5c:	e00c      	b.n	8003c78 <HAL_GPIO_Init+0x21c>
 8003c5e:	2307      	movs	r3, #7
 8003c60:	e00a      	b.n	8003c78 <HAL_GPIO_Init+0x21c>
 8003c62:	2305      	movs	r3, #5
 8003c64:	e008      	b.n	8003c78 <HAL_GPIO_Init+0x21c>
 8003c66:	2304      	movs	r3, #4
 8003c68:	e006      	b.n	8003c78 <HAL_GPIO_Init+0x21c>
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e004      	b.n	8003c78 <HAL_GPIO_Init+0x21c>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e002      	b.n	8003c78 <HAL_GPIO_Init+0x21c>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_GPIO_Init+0x21c>
 8003c76:	2300      	movs	r3, #0
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	f002 0203 	and.w	r2, r2, #3
 8003c7e:	0092      	lsls	r2, r2, #2
 8003c80:	4093      	lsls	r3, r2
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c88:	4934      	ldr	r1, [pc, #208]	; (8003d5c <HAL_GPIO_Init+0x300>)
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	089b      	lsrs	r3, r3, #2
 8003c8e:	3302      	adds	r3, #2
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c96:	4b39      	ldr	r3, [pc, #228]	; (8003d7c <HAL_GPIO_Init+0x320>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cba:	4a30      	ldr	r2, [pc, #192]	; (8003d7c <HAL_GPIO_Init+0x320>)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003cc0:	4b2e      	ldr	r3, [pc, #184]	; (8003d7c <HAL_GPIO_Init+0x320>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ce4:	4a25      	ldr	r2, [pc, #148]	; (8003d7c <HAL_GPIO_Init+0x320>)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cea:	4b24      	ldr	r3, [pc, #144]	; (8003d7c <HAL_GPIO_Init+0x320>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d0e:	4a1b      	ldr	r2, [pc, #108]	; (8003d7c <HAL_GPIO_Init+0x320>)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d14:	4b19      	ldr	r3, [pc, #100]	; (8003d7c <HAL_GPIO_Init+0x320>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d38:	4a10      	ldr	r2, [pc, #64]	; (8003d7c <HAL_GPIO_Init+0x320>)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3301      	adds	r3, #1
 8003d42:	61fb      	str	r3, [r7, #28]
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	2b0f      	cmp	r3, #15
 8003d48:	f67f ae96 	bls.w	8003a78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	3724      	adds	r7, #36	; 0x24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	40013800 	.word	0x40013800
 8003d60:	40020000 	.word	0x40020000
 8003d64:	40020400 	.word	0x40020400
 8003d68:	40020800 	.word	0x40020800
 8003d6c:	40020c00 	.word	0x40020c00
 8003d70:	40021000 	.word	0x40021000
 8003d74:	40021400 	.word	0x40021400
 8003d78:	40021800 	.word	0x40021800
 8003d7c:	40013c00 	.word	0x40013c00

08003d80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	887b      	ldrh	r3, [r7, #2]
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
 8003d9c:	e001      	b.n	8003da2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	807b      	strh	r3, [r7, #2]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dc0:	787b      	ldrb	r3, [r7, #1]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dc6:	887a      	ldrh	r2, [r7, #2]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dcc:	e003      	b.n	8003dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dce:	887b      	ldrh	r3, [r7, #2]
 8003dd0:	041a      	lsls	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	619a      	str	r2, [r3, #24]
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003dec:	f7fe fa36 	bl	800225c <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e069      	b.n	8003ed0 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10b      	bne.n	8003e20 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7fd fe49 	bl	8001aa8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003e16:	f241 3188 	movw	r1, #5000	; 0x1388
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f85e 	bl	8003edc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	021a      	lsls	r2, r3, #8
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	2120      	movs	r1, #32
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f856 	bl	8003ef8 <QSPI_WaitFlagStateUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003e50:	7afb      	ldrb	r3, [r7, #11]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d137      	bne.n	8003ec6 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e60:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6852      	ldr	r2, [r2, #4]
 8003e68:	0611      	lsls	r1, r2, #24
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68d2      	ldr	r2, [r2, #12]
 8003e6e:	4311      	orrs	r1, r2
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	69d2      	ldr	r2, [r2, #28]
 8003e74:	4311      	orrs	r1, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6a12      	ldr	r2, [r2, #32]
 8003e7a:	4311      	orrs	r1, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	430b      	orrs	r3, r1
 8003e82:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	4b13      	ldr	r3, [pc, #76]	; (8003ed8 <HAL_QSPI_Init+0xf4>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6912      	ldr	r2, [r2, #16]
 8003e92:	0411      	lsls	r1, r2, #16
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6952      	ldr	r2, [r2, #20]
 8003e98:	4311      	orrs	r1, r2
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6992      	ldr	r2, [r2, #24]
 8003e9e:	4311      	orrs	r1, r2
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003ece:	7afb      	ldrb	r3, [r7, #11]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	ffe0f8fe 	.word	0xffe0f8fe

08003edc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	4613      	mov	r3, r2
 8003f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003f08:	e01a      	b.n	8003f40 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f10:	d016      	beq.n	8003f40 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f12:	f7fe f9a3 	bl	800225c <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d302      	bcc.n	8003f28 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10b      	bne.n	8003f40 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2204      	movs	r2, #4
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f34:	f043 0201 	orr.w	r2, r3, #1
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e00e      	b.n	8003f5e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	bf14      	ite	ne
 8003f4e:	2301      	movne	r3, #1
 8003f50:	2300      	moveq	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d1d6      	bne.n	8003f0a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0cc      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f7c:	4b68      	ldr	r3, [pc, #416]	; (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d90c      	bls.n	8003fa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8a:	4b65      	ldr	r3, [pc, #404]	; (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f92:	4b63      	ldr	r3, [pc, #396]	; (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0b8      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d020      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fbc:	4b59      	ldr	r3, [pc, #356]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	4a58      	ldr	r2, [pc, #352]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fd4:	4b53      	ldr	r3, [pc, #332]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	4a52      	ldr	r2, [pc, #328]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe0:	4b50      	ldr	r3, [pc, #320]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	494d      	ldr	r1, [pc, #308]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d044      	beq.n	8004088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d107      	bne.n	8004016 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004006:	4b47      	ldr	r3, [pc, #284]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d119      	bne.n	8004046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e07f      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d003      	beq.n	8004026 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004022:	2b03      	cmp	r3, #3
 8004024:	d107      	bne.n	8004036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004026:	4b3f      	ldr	r3, [pc, #252]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d109      	bne.n	8004046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e06f      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004036:	4b3b      	ldr	r3, [pc, #236]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e067      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004046:	4b37      	ldr	r3, [pc, #220]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f023 0203 	bic.w	r2, r3, #3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4934      	ldr	r1, [pc, #208]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	4313      	orrs	r3, r2
 8004056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004058:	f7fe f900 	bl	800225c <HAL_GetTick>
 800405c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	e00a      	b.n	8004076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004060:	f7fe f8fc 	bl	800225c <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	f241 3288 	movw	r2, #5000	; 0x1388
 800406e:	4293      	cmp	r3, r2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e04f      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004076:	4b2b      	ldr	r3, [pc, #172]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 020c 	and.w	r2, r3, #12
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	429a      	cmp	r2, r3
 8004086:	d1eb      	bne.n	8004060 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004088:	4b25      	ldr	r3, [pc, #148]	; (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d20c      	bcs.n	80040b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b22      	ldr	r3, [pc, #136]	; (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409e:	4b20      	ldr	r3, [pc, #128]	; (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e032      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040bc:	4b19      	ldr	r3, [pc, #100]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	4916      	ldr	r1, [pc, #88]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d009      	beq.n	80040ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040da:	4b12      	ldr	r3, [pc, #72]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	490e      	ldr	r1, [pc, #56]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040ee:	f000 f821 	bl	8004134 <HAL_RCC_GetSysClockFreq>
 80040f2:	4601      	mov	r1, r0
 80040f4:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	091b      	lsrs	r3, r3, #4
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	4a0a      	ldr	r2, [pc, #40]	; (8004128 <HAL_RCC_ClockConfig+0x1c0>)
 8004100:	5cd3      	ldrb	r3, [r2, r3]
 8004102:	fa21 f303 	lsr.w	r3, r1, r3
 8004106:	4a09      	ldr	r2, [pc, #36]	; (800412c <HAL_RCC_ClockConfig+0x1c4>)
 8004108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800410a:	4b09      	ldr	r3, [pc, #36]	; (8004130 <HAL_RCC_ClockConfig+0x1c8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe f860 	bl	80021d4 <HAL_InitTick>

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40023c00 	.word	0x40023c00
 8004124:	40023800 	.word	0x40023800
 8004128:	0800b154 	.word	0x0800b154
 800412c:	2000001c 	.word	0x2000001c
 8004130:	20000020 	.word	0x20000020

08004134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	2300      	movs	r3, #0
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	2300      	movs	r3, #0
 8004144:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800414a:	4b50      	ldr	r3, [pc, #320]	; (800428c <HAL_RCC_GetSysClockFreq+0x158>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
 8004152:	2b04      	cmp	r3, #4
 8004154:	d007      	beq.n	8004166 <HAL_RCC_GetSysClockFreq+0x32>
 8004156:	2b08      	cmp	r3, #8
 8004158:	d008      	beq.n	800416c <HAL_RCC_GetSysClockFreq+0x38>
 800415a:	2b00      	cmp	r3, #0
 800415c:	f040 808d 	bne.w	800427a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004160:	4b4b      	ldr	r3, [pc, #300]	; (8004290 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004162:	60bb      	str	r3, [r7, #8]
       break;
 8004164:	e08c      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004166:	4b4b      	ldr	r3, [pc, #300]	; (8004294 <HAL_RCC_GetSysClockFreq+0x160>)
 8004168:	60bb      	str	r3, [r7, #8]
      break;
 800416a:	e089      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800416c:	4b47      	ldr	r3, [pc, #284]	; (800428c <HAL_RCC_GetSysClockFreq+0x158>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004174:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004176:	4b45      	ldr	r3, [pc, #276]	; (800428c <HAL_RCC_GetSysClockFreq+0x158>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d023      	beq.n	80041ca <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004182:	4b42      	ldr	r3, [pc, #264]	; (800428c <HAL_RCC_GetSysClockFreq+0x158>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	099b      	lsrs	r3, r3, #6
 8004188:	f04f 0400 	mov.w	r4, #0
 800418c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	ea03 0501 	and.w	r5, r3, r1
 8004198:	ea04 0602 	and.w	r6, r4, r2
 800419c:	4a3d      	ldr	r2, [pc, #244]	; (8004294 <HAL_RCC_GetSysClockFreq+0x160>)
 800419e:	fb02 f106 	mul.w	r1, r2, r6
 80041a2:	2200      	movs	r2, #0
 80041a4:	fb02 f205 	mul.w	r2, r2, r5
 80041a8:	440a      	add	r2, r1
 80041aa:	493a      	ldr	r1, [pc, #232]	; (8004294 <HAL_RCC_GetSysClockFreq+0x160>)
 80041ac:	fba5 0101 	umull	r0, r1, r5, r1
 80041b0:	1853      	adds	r3, r2, r1
 80041b2:	4619      	mov	r1, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f04f 0400 	mov.w	r4, #0
 80041ba:	461a      	mov	r2, r3
 80041bc:	4623      	mov	r3, r4
 80041be:	f7fc f87f 	bl	80002c0 <__aeabi_uldivmod>
 80041c2:	4603      	mov	r3, r0
 80041c4:	460c      	mov	r4, r1
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	e049      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ca:	4b30      	ldr	r3, [pc, #192]	; (800428c <HAL_RCC_GetSysClockFreq+0x158>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	099b      	lsrs	r3, r3, #6
 80041d0:	f04f 0400 	mov.w	r4, #0
 80041d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	ea03 0501 	and.w	r5, r3, r1
 80041e0:	ea04 0602 	and.w	r6, r4, r2
 80041e4:	4629      	mov	r1, r5
 80041e6:	4632      	mov	r2, r6
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	f04f 0400 	mov.w	r4, #0
 80041f0:	0154      	lsls	r4, r2, #5
 80041f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041f6:	014b      	lsls	r3, r1, #5
 80041f8:	4619      	mov	r1, r3
 80041fa:	4622      	mov	r2, r4
 80041fc:	1b49      	subs	r1, r1, r5
 80041fe:	eb62 0206 	sbc.w	r2, r2, r6
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	f04f 0400 	mov.w	r4, #0
 800420a:	0194      	lsls	r4, r2, #6
 800420c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004210:	018b      	lsls	r3, r1, #6
 8004212:	1a5b      	subs	r3, r3, r1
 8004214:	eb64 0402 	sbc.w	r4, r4, r2
 8004218:	f04f 0100 	mov.w	r1, #0
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	00e2      	lsls	r2, r4, #3
 8004222:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004226:	00d9      	lsls	r1, r3, #3
 8004228:	460b      	mov	r3, r1
 800422a:	4614      	mov	r4, r2
 800422c:	195b      	adds	r3, r3, r5
 800422e:	eb44 0406 	adc.w	r4, r4, r6
 8004232:	f04f 0100 	mov.w	r1, #0
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	02a2      	lsls	r2, r4, #10
 800423c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004240:	0299      	lsls	r1, r3, #10
 8004242:	460b      	mov	r3, r1
 8004244:	4614      	mov	r4, r2
 8004246:	4618      	mov	r0, r3
 8004248:	4621      	mov	r1, r4
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f04f 0400 	mov.w	r4, #0
 8004250:	461a      	mov	r2, r3
 8004252:	4623      	mov	r3, r4
 8004254:	f7fc f834 	bl	80002c0 <__aeabi_uldivmod>
 8004258:	4603      	mov	r3, r0
 800425a:	460c      	mov	r4, r1
 800425c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800425e:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HAL_RCC_GetSysClockFreq+0x158>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	0c1b      	lsrs	r3, r3, #16
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	3301      	adds	r3, #1
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	fbb2 f3f3 	udiv	r3, r2, r3
 8004276:	60bb      	str	r3, [r7, #8]
      break;
 8004278:	e002      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800427a:	4b05      	ldr	r3, [pc, #20]	; (8004290 <HAL_RCC_GetSysClockFreq+0x15c>)
 800427c:	60bb      	str	r3, [r7, #8]
      break;
 800427e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004280:	68bb      	ldr	r3, [r7, #8]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800428a:	bf00      	nop
 800428c:	40023800 	.word	0x40023800
 8004290:	00f42400 	.word	0x00f42400
 8004294:	017d7840 	.word	0x017d7840

08004298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800429c:	4b03      	ldr	r3, [pc, #12]	; (80042ac <HAL_RCC_GetHCLKFreq+0x14>)
 800429e:	681b      	ldr	r3, [r3, #0]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	2000001c 	.word	0x2000001c

080042b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042b4:	f7ff fff0 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 80042b8:	4601      	mov	r1, r0
 80042ba:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	0a9b      	lsrs	r3, r3, #10
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	4a03      	ldr	r2, [pc, #12]	; (80042d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042c6:	5cd3      	ldrb	r3, [r2, r3]
 80042c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40023800 	.word	0x40023800
 80042d4:	0800b164 	.word	0x0800b164

080042d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042dc:	f7ff ffdc 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 80042e0:	4601      	mov	r1, r0
 80042e2:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	0b5b      	lsrs	r3, r3, #13
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	4a03      	ldr	r2, [pc, #12]	; (80042fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ee:	5cd3      	ldrb	r3, [r2, r3]
 80042f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40023800 	.word	0x40023800
 80042fc:	0800b164 	.word	0x0800b164

08004300 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d010      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004324:	4b7a      	ldr	r3, [pc, #488]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800432a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	4977      	ldr	r1, [pc, #476]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8004342:	2301      	movs	r3, #1
 8004344:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d010      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004352:	4b6f      	ldr	r3, [pc, #444]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004358:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	496b      	ldr	r1, [pc, #428]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8004370:	2301      	movs	r3, #1
 8004372:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d022      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8004380:	4b63      	ldr	r3, [pc, #396]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004386:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800438e:	4960      	ldr	r1, [pc, #384]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 800439e:	2301      	movs	r3, #1
 80043a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043aa:	d10c      	bne.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80043ac:	4b58      	ldr	r3, [pc, #352]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80043ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043b2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	4954      	ldr	r1, [pc, #336]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d022      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 80043d2:	4b4f      	ldr	r3, [pc, #316]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80043d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e0:	494b      	ldr	r1, [pc, #300]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80043f0:	2301      	movs	r3, #1
 80043f2:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043fc:	d10c      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80043fe:	4b44      	ldr	r3, [pc, #272]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004404:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	3b01      	subs	r3, #1
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	493f      	ldr	r1, [pc, #252]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 808a 	beq.w	800453a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	4b39      	ldr	r3, [pc, #228]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	4a38      	ldr	r2, [pc, #224]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004434:	6413      	str	r3, [r2, #64]	; 0x40
 8004436:	4b36      	ldr	r3, [pc, #216]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004442:	4b34      	ldr	r3, [pc, #208]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a33      	ldr	r2, [pc, #204]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800444e:	f7fd ff05 	bl	800225c <HAL_GetTick>
 8004452:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004456:	f7fd ff01 	bl	800225c <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e1d1      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004468:	4b2a      	ldr	r3, [pc, #168]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004474:	4b26      	ldr	r3, [pc, #152]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447c:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d02f      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	429a      	cmp	r2, r3
 8004490:	d028      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004492:	4b1f      	ldr	r3, [pc, #124]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800449c:	4b1e      	ldr	r3, [pc, #120]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800449e:	2201      	movs	r2, #1
 80044a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044a2:	4b1d      	ldr	r3, [pc, #116]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80044a8:	4a19      	ldr	r2, [pc, #100]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044ae:	4b18      	ldr	r3, [pc, #96]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d114      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044ba:	f7fd fecf 	bl	800225c <HAL_GetTick>
 80044be:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c0:	e00a      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c2:	f7fd fecb 	bl	800225c <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e199      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d8:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0ee      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044f0:	d114      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80044f2:	4b07      	ldr	r3, [pc, #28]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004506:	4902      	ldr	r1, [pc, #8]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004508:	4313      	orrs	r3, r2
 800450a:	608b      	str	r3, [r1, #8]
 800450c:	e00c      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800450e:	bf00      	nop
 8004510:	40023800 	.word	0x40023800
 8004514:	40007000 	.word	0x40007000
 8004518:	42470e40 	.word	0x42470e40
 800451c:	4b89      	ldr	r3, [pc, #548]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	4a88      	ldr	r2, [pc, #544]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004522:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004526:	6093      	str	r3, [r2, #8]
 8004528:	4b86      	ldr	r3, [pc, #536]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800452a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004534:	4983      	ldr	r1, [pc, #524]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004536:	4313      	orrs	r3, r2
 8004538:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	d004      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800454c:	4b7e      	ldr	r3, [pc, #504]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800454e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800455c:	4b79      	ldr	r3, [pc, #484]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800455e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004562:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456a:	4976      	ldr	r1, [pc, #472]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b00      	cmp	r3, #0
 800457c:	d011      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800457e:	4b71      	ldr	r3, [pc, #452]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004584:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	496d      	ldr	r1, [pc, #436]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800459c:	d101      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 800459e:	2301      	movs	r3, #1
 80045a0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80045ae:	4b65      	ldr	r3, [pc, #404]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80045b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045b4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045bc:	4961      	ldr	r1, [pc, #388]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d004      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b80      	cmp	r3, #128	; 0x80
 80045d0:	f040 80c6 	bne.w	8004760 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045d4:	4b5d      	ldr	r3, [pc, #372]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045da:	f7fd fe3f 	bl	800225c <HAL_GetTick>
 80045de:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045e0:	e008      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045e2:	f7fd fe3b 	bl	800225c <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e10b      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045f4:	4b53      	ldr	r3, [pc, #332]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1f0      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004600:	4a53      	ldr	r2, [pc, #332]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004606:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d023      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d019      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004638:	2b00      	cmp	r3, #0
 800463a:	d004      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004644:	d00e      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800464e:	2b00      	cmp	r3, #0
 8004650:	d019      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004656:	2b00      	cmp	r3, #0
 8004658:	d115      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004662:	d110      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	019b      	lsls	r3, r3, #6
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	061b      	lsls	r3, r3, #24
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	071b      	lsls	r3, r3, #28
 800467e:	4931      	ldr	r1, [pc, #196]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004696:	2b00      	cmp	r3, #0
 8004698:	d009      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d026      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d122      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046ae:	4b25      	ldr	r3, [pc, #148]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80046b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b4:	0e1b      	lsrs	r3, r3, #24
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	019b      	lsls	r3, r3, #6
 80046c6:	431a      	orrs	r2, r3
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	061b      	lsls	r3, r3, #24
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	071b      	lsls	r3, r3, #28
 80046d4:	491b      	ldr	r1, [pc, #108]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80046dc:	4b19      	ldr	r3, [pc, #100]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80046de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e2:	f023 021f 	bic.w	r2, r3, #31
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	4915      	ldr	r1, [pc, #84]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d010      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	019b      	lsls	r3, r3, #6
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	061b      	lsls	r3, r3, #24
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	071b      	lsls	r3, r3, #28
 800471a:	490a      	ldr	r1, [pc, #40]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004722:	4b0a      	ldr	r3, [pc, #40]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004724:	2201      	movs	r2, #1
 8004726:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004728:	f7fd fd98 	bl	800225c <HAL_GetTick>
 800472c:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800472e:	e011      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004730:	f7fd fd94 	bl	800225c <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d90a      	bls.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e064      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800
 8004748:	424711e0 	.word	0x424711e0
 800474c:	42470068 	.word	0x42470068
 8004750:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004754:	4b2f      	ldr	r3, [pc, #188]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0e7      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800476c:	4b29      	ldr	r3, [pc, #164]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800476e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004772:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477a:	4926      	ldr	r1, [pc, #152]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800478e:	4b21      	ldr	r3, [pc, #132]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004794:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479c:	491d      	ldr	r1, [pc, #116]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80047b0:	4b18      	ldr	r3, [pc, #96]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80047b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047be:	4915      	ldr	r1, [pc, #84]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80047d2:	4b10      	ldr	r3, [pc, #64]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80047d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047d8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	490c      	ldr	r1, [pc, #48]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047f4:	4b07      	ldr	r3, [pc, #28]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80047f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047fa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	4904      	ldr	r1, [pc, #16]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3720      	adds	r7, #32
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40023800 	.word	0x40023800

08004818 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d075      	beq.n	800491c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004830:	4ba2      	ldr	r3, [pc, #648]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 030c 	and.w	r3, r3, #12
 8004838:	2b04      	cmp	r3, #4
 800483a:	d00c      	beq.n	8004856 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800483c:	4b9f      	ldr	r3, [pc, #636]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004844:	2b08      	cmp	r3, #8
 8004846:	d112      	bne.n	800486e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004848:	4b9c      	ldr	r3, [pc, #624]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004854:	d10b      	bne.n	800486e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004856:	4b99      	ldr	r3, [pc, #612]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d05b      	beq.n	800491a <HAL_RCC_OscConfig+0x102>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d157      	bne.n	800491a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e20b      	b.n	8004c86 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004876:	d106      	bne.n	8004886 <HAL_RCC_OscConfig+0x6e>
 8004878:	4b90      	ldr	r3, [pc, #576]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a8f      	ldr	r2, [pc, #572]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 800487e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004882:	6013      	str	r3, [r2, #0]
 8004884:	e01d      	b.n	80048c2 <HAL_RCC_OscConfig+0xaa>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800488e:	d10c      	bne.n	80048aa <HAL_RCC_OscConfig+0x92>
 8004890:	4b8a      	ldr	r3, [pc, #552]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a89      	ldr	r2, [pc, #548]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 8004896:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	4b87      	ldr	r3, [pc, #540]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a86      	ldr	r2, [pc, #536]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 80048a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	e00b      	b.n	80048c2 <HAL_RCC_OscConfig+0xaa>
 80048aa:	4b84      	ldr	r3, [pc, #528]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a83      	ldr	r2, [pc, #524]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 80048b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	4b81      	ldr	r3, [pc, #516]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a80      	ldr	r2, [pc, #512]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 80048bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d013      	beq.n	80048f2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ca:	f7fd fcc7 	bl	800225c <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048d2:	f7fd fcc3 	bl	800225c <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b64      	cmp	r3, #100	; 0x64
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e1d0      	b.n	8004c86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e4:	4b75      	ldr	r3, [pc, #468]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0f0      	beq.n	80048d2 <HAL_RCC_OscConfig+0xba>
 80048f0:	e014      	b.n	800491c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f2:	f7fd fcb3 	bl	800225c <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048fa:	f7fd fcaf 	bl	800225c <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b64      	cmp	r3, #100	; 0x64
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e1bc      	b.n	8004c86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800490c:	4b6b      	ldr	r3, [pc, #428]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1f0      	bne.n	80048fa <HAL_RCC_OscConfig+0xe2>
 8004918:	e000      	b.n	800491c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800491a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d063      	beq.n	80049f0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004928:	4b64      	ldr	r3, [pc, #400]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 030c 	and.w	r3, r3, #12
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00b      	beq.n	800494c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004934:	4b61      	ldr	r3, [pc, #388]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800493c:	2b08      	cmp	r3, #8
 800493e:	d11c      	bne.n	800497a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004940:	4b5e      	ldr	r3, [pc, #376]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d116      	bne.n	800497a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800494c:	4b5b      	ldr	r3, [pc, #364]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <HAL_RCC_OscConfig+0x14c>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d001      	beq.n	8004964 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e190      	b.n	8004c86 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004964:	4b55      	ldr	r3, [pc, #340]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	4952      	ldr	r1, [pc, #328]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 8004974:	4313      	orrs	r3, r2
 8004976:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004978:	e03a      	b.n	80049f0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d020      	beq.n	80049c4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004982:	4b4f      	ldr	r3, [pc, #316]	; (8004ac0 <HAL_RCC_OscConfig+0x2a8>)
 8004984:	2201      	movs	r2, #1
 8004986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004988:	f7fd fc68 	bl	800225c <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004990:	f7fd fc64 	bl	800225c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e171      	b.n	8004c86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a2:	4b46      	ldr	r3, [pc, #280]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ae:	4b43      	ldr	r3, [pc, #268]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	493f      	ldr	r1, [pc, #252]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	600b      	str	r3, [r1, #0]
 80049c2:	e015      	b.n	80049f0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049c4:	4b3e      	ldr	r3, [pc, #248]	; (8004ac0 <HAL_RCC_OscConfig+0x2a8>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ca:	f7fd fc47 	bl	800225c <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049d2:	f7fd fc43 	bl	800225c <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e150      	b.n	8004c86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049e4:	4b35      	ldr	r3, [pc, #212]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1f0      	bne.n	80049d2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d030      	beq.n	8004a5e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d016      	beq.n	8004a32 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a04:	4b2f      	ldr	r3, [pc, #188]	; (8004ac4 <HAL_RCC_OscConfig+0x2ac>)
 8004a06:	2201      	movs	r2, #1
 8004a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0a:	f7fd fc27 	bl	800225c <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a12:	f7fd fc23 	bl	800225c <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e130      	b.n	8004c86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a24:	4b25      	ldr	r3, [pc, #148]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 8004a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0f0      	beq.n	8004a12 <HAL_RCC_OscConfig+0x1fa>
 8004a30:	e015      	b.n	8004a5e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a32:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <HAL_RCC_OscConfig+0x2ac>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a38:	f7fd fc10 	bl	800225c <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a40:	f7fd fc0c 	bl	800225c <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e119      	b.n	8004c86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a52:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 8004a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 809f 	beq.w	8004baa <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a70:	4b12      	ldr	r3, [pc, #72]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10f      	bne.n	8004a9c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	4b0e      	ldr	r3, [pc, #56]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	4a0d      	ldr	r2, [pc, #52]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 8004a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HAL_RCC_OscConfig+0x2a4>)
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <HAL_RCC_OscConfig+0x2b0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d120      	bne.n	8004aea <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aa8:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <HAL_RCC_OscConfig+0x2b0>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a06      	ldr	r2, [pc, #24]	; (8004ac8 <HAL_RCC_OscConfig+0x2b0>)
 8004aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ab4:	f7fd fbd2 	bl	800225c <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aba:	e010      	b.n	8004ade <HAL_RCC_OscConfig+0x2c6>
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	42470000 	.word	0x42470000
 8004ac4:	42470e80 	.word	0x42470e80
 8004ac8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004acc:	f7fd fbc6 	bl	800225c <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e0d3      	b.n	8004c86 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ade:	4b6c      	ldr	r3, [pc, #432]	; (8004c90 <HAL_RCC_OscConfig+0x478>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f0      	beq.n	8004acc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d106      	bne.n	8004b00 <HAL_RCC_OscConfig+0x2e8>
 8004af2:	4b68      	ldr	r3, [pc, #416]	; (8004c94 <HAL_RCC_OscConfig+0x47c>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af6:	4a67      	ldr	r2, [pc, #412]	; (8004c94 <HAL_RCC_OscConfig+0x47c>)
 8004af8:	f043 0301 	orr.w	r3, r3, #1
 8004afc:	6713      	str	r3, [r2, #112]	; 0x70
 8004afe:	e01c      	b.n	8004b3a <HAL_RCC_OscConfig+0x322>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2b05      	cmp	r3, #5
 8004b06:	d10c      	bne.n	8004b22 <HAL_RCC_OscConfig+0x30a>
 8004b08:	4b62      	ldr	r3, [pc, #392]	; (8004c94 <HAL_RCC_OscConfig+0x47c>)
 8004b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0c:	4a61      	ldr	r2, [pc, #388]	; (8004c94 <HAL_RCC_OscConfig+0x47c>)
 8004b0e:	f043 0304 	orr.w	r3, r3, #4
 8004b12:	6713      	str	r3, [r2, #112]	; 0x70
 8004b14:	4b5f      	ldr	r3, [pc, #380]	; (8004c94 <HAL_RCC_OscConfig+0x47c>)
 8004b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b18:	4a5e      	ldr	r2, [pc, #376]	; (8004c94 <HAL_RCC_OscConfig+0x47c>)
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b20:	e00b      	b.n	8004b3a <HAL_RCC_OscConfig+0x322>
 8004b22:	4b5c      	ldr	r3, [pc, #368]	; (8004c94 <HAL_RCC_OscConfig+0x47c>)
 8004b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b26:	4a5b      	ldr	r2, [pc, #364]	; (8004c94 <HAL_RCC_OscConfig+0x47c>)
 8004b28:	f023 0301 	bic.w	r3, r3, #1
 8004b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b2e:	4b59      	ldr	r3, [pc, #356]	; (8004c94 <HAL_RCC_OscConfig+0x47c>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b32:	4a58      	ldr	r2, [pc, #352]	; (8004c94 <HAL_RCC_OscConfig+0x47c>)
 8004b34:	f023 0304 	bic.w	r3, r3, #4
 8004b38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d015      	beq.n	8004b6e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b42:	f7fd fb8b 	bl	800225c <HAL_GetTick>
 8004b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b48:	e00a      	b.n	8004b60 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b4a:	f7fd fb87 	bl	800225c <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e092      	b.n	8004c86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b60:	4b4c      	ldr	r3, [pc, #304]	; (8004c94 <HAL_RCC_OscConfig+0x47c>)
 8004b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0ee      	beq.n	8004b4a <HAL_RCC_OscConfig+0x332>
 8004b6c:	e014      	b.n	8004b98 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6e:	f7fd fb75 	bl	800225c <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b74:	e00a      	b.n	8004b8c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b76:	f7fd fb71 	bl	800225c <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e07c      	b.n	8004c86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b8c:	4b41      	ldr	r3, [pc, #260]	; (8004c94 <HAL_RCC_OscConfig+0x47c>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1ee      	bne.n	8004b76 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b98:	7dfb      	ldrb	r3, [r7, #23]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d105      	bne.n	8004baa <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b9e:	4b3d      	ldr	r3, [pc, #244]	; (8004c94 <HAL_RCC_OscConfig+0x47c>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	4a3c      	ldr	r2, [pc, #240]	; (8004c94 <HAL_RCC_OscConfig+0x47c>)
 8004ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ba8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d068      	beq.n	8004c84 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bb2:	4b38      	ldr	r3, [pc, #224]	; (8004c94 <HAL_RCC_OscConfig+0x47c>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	2b08      	cmp	r3, #8
 8004bbc:	d060      	beq.n	8004c80 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d145      	bne.n	8004c52 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc6:	4b34      	ldr	r3, [pc, #208]	; (8004c98 <HAL_RCC_OscConfig+0x480>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7fd fb46 	bl	800225c <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd4:	f7fd fb42 	bl	800225c <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e04f      	b.n	8004c86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be6:	4b2b      	ldr	r3, [pc, #172]	; (8004c94 <HAL_RCC_OscConfig+0x47c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69da      	ldr	r2, [r3, #28]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	019b      	lsls	r3, r3, #6
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c08:	085b      	lsrs	r3, r3, #1
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	041b      	lsls	r3, r3, #16
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	061b      	lsls	r3, r3, #24
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1c:	071b      	lsls	r3, r3, #28
 8004c1e:	491d      	ldr	r1, [pc, #116]	; (8004c94 <HAL_RCC_OscConfig+0x47c>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c24:	4b1c      	ldr	r3, [pc, #112]	; (8004c98 <HAL_RCC_OscConfig+0x480>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2a:	f7fd fb17 	bl	800225c <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c32:	f7fd fb13 	bl	800225c <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e020      	b.n	8004c86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c44:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <HAL_RCC_OscConfig+0x47c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0f0      	beq.n	8004c32 <HAL_RCC_OscConfig+0x41a>
 8004c50:	e018      	b.n	8004c84 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c52:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <HAL_RCC_OscConfig+0x480>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7fd fb00 	bl	800225c <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c60:	f7fd fafc 	bl	800225c <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e009      	b.n	8004c86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c72:	4b08      	ldr	r3, [pc, #32]	; (8004c94 <HAL_RCC_OscConfig+0x47c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f0      	bne.n	8004c60 <HAL_RCC_OscConfig+0x448>
 8004c7e:	e001      	b.n	8004c84 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40007000 	.word	0x40007000
 8004c94:	40023800 	.word	0x40023800
 8004c98:	42470060 	.word	0x42470060

08004c9c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e022      	b.n	8004cf4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d105      	bne.n	8004cc6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7fc ffbb 	bl	8001c3c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2203      	movs	r2, #3
 8004cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f814 	bl	8004cfc <HAL_SD_InitCard>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e00a      	b.n	8004cf4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004cfc:	b5b0      	push	{r4, r5, r7, lr}
 8004cfe:	b08e      	sub	sp, #56	; 0x38
 8004d00:	af04      	add	r7, sp, #16
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004d04:	2300      	movs	r3, #0
 8004d06:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004d18:	2376      	movs	r3, #118	; 0x76
 8004d1a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681d      	ldr	r5, [r3, #0]
 8004d20:	466c      	mov	r4, sp
 8004d22:	f107 0314 	add.w	r3, r7, #20
 8004d26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004d2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004d2e:	f107 0308 	add.w	r3, r7, #8
 8004d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d34:	4628      	mov	r0, r5
 8004d36:	f001 fc7b 	bl	8006630 <SDIO_Init>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e031      	b.n	8004db0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004d4c:	4b1a      	ldr	r3, [pc, #104]	; (8004db8 <HAL_SD_InitCard+0xbc>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f001 fcb3 	bl	80066c2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004d5c:	4b16      	ldr	r3, [pc, #88]	; (8004db8 <HAL_SD_InitCard+0xbc>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fe80 	bl	8005a68 <SD_PowerON>
 8004d68:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00b      	beq.n	8004d88 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e013      	b.n	8004db0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 fd9f 	bl	80058cc <SD_InitCard>
 8004d8e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00b      	beq.n	8004dae <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3728      	adds	r7, #40	; 0x28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bdb0      	pop	{r4, r5, r7, pc}
 8004db8:	422580a0 	.word	0x422580a0

08004dbc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b092      	sub	sp, #72	; 0x48
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004dca:	f7fd fa47 	bl	800225c <HAL_GetTick>
 8004dce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d107      	bne.n	8004dee <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e1d7      	b.n	800519e <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	f040 81ca 	bne.w	8005190 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	441a      	add	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d907      	bls.n	8004e20 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e1be      	b.n	800519e <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2203      	movs	r2, #3
 8004e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d002      	beq.n	8004e3e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3a:	025b      	lsls	r3, r3, #9
 8004e3c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e46:	4618      	mov	r0, r3
 8004e48:	f001 fcce 	bl	80067e8 <SDMMC_CmdBlockLength>
 8004e4c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00f      	beq.n	8004e74 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a9a      	ldr	r2, [pc, #616]	; (80050c4 <HAL_SD_ReadBlocks+0x308>)
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e62:	431a      	orrs	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e194      	b.n	800519e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004e74:	f04f 33ff 	mov.w	r3, #4294967295
 8004e78:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	025b      	lsls	r3, r3, #9
 8004e7e:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004e80:	2390      	movs	r3, #144	; 0x90
 8004e82:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004e84:	2302      	movs	r3, #2
 8004e86:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f107 0214 	add.w	r2, r7, #20
 8004e98:	4611      	mov	r1, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f001 fc78 	bl	8006790 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d90a      	bls.n	8004ebc <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f001 fcdc 	bl	8006870 <SDMMC_CmdReadMultiBlock>
 8004eb8:	6478      	str	r0, [r7, #68]	; 0x44
 8004eba:	e009      	b.n	8004ed0 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f001 fcaf 	bl	800682c <SDMMC_CmdReadSingleBlock>
 8004ece:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d012      	beq.n	8004efc <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a7a      	ldr	r2, [pc, #488]	; (80050c4 <HAL_SD_ReadBlocks+0x308>)
 8004edc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e150      	b.n	800519e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004f00:	e061      	b.n	8004fc6 <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d03c      	beq.n	8004f8a <HAL_SD_ReadBlocks+0x1ce>
 8004f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d039      	beq.n	8004f8a <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004f16:	2300      	movs	r3, #0
 8004f18:	643b      	str	r3, [r7, #64]	; 0x40
 8004f1a:	e033      	b.n	8004f84 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f001 fbb0 	bl	8006686 <SDIO_ReadFIFO>
 8004f26:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f32:	3301      	adds	r3, #1
 8004f34:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3e:	0a1b      	lsrs	r3, r3, #8
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f44:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f48:	3301      	adds	r3, #1
 8004f4a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	0c1b      	lsrs	r3, r3, #16
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5e:	3301      	adds	r3, #1
 8004f60:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f64:	3b01      	subs	r3, #1
 8004f66:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6a:	0e1b      	lsrs	r3, r3, #24
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f70:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f74:	3301      	adds	r3, #1
 8004f76:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8004f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f80:	3301      	adds	r3, #1
 8004f82:	643b      	str	r3, [r7, #64]	; 0x40
 8004f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f86:	2b07      	cmp	r3, #7
 8004f88:	d9c8      	bls.n	8004f1c <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004f8a:	f7fd f967 	bl	800225c <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d902      	bls.n	8004fa0 <HAL_SD_ReadBlocks+0x1e4>
 8004f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d112      	bne.n	8004fc6 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a47      	ldr	r2, [pc, #284]	; (80050c4 <HAL_SD_ReadBlocks+0x308>)
 8004fa6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e0eb      	b.n	800519e <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fcc:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d096      	beq.n	8004f02 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d022      	beq.n	8005028 <HAL_SD_ReadBlocks+0x26c>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d91f      	bls.n	8005028 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fec:	2b03      	cmp	r3, #3
 8004fee:	d01b      	beq.n	8005028 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f001 fca1 	bl	800693c <SDMMC_CmdStopTransfer>
 8004ffa:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d012      	beq.n	8005028 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a2f      	ldr	r2, [pc, #188]	; (80050c4 <HAL_SD_ReadBlocks+0x308>)
 8005008:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800500e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005010:	431a      	orrs	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0ba      	b.n	800519e <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d012      	beq.n	800505c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a22      	ldr	r2, [pc, #136]	; (80050c4 <HAL_SD_ReadBlocks+0x308>)
 800503c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	f043 0208 	orr.w	r2, r3, #8
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e0a0      	b.n	800519e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d012      	beq.n	8005090 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a15      	ldr	r2, [pc, #84]	; (80050c4 <HAL_SD_ReadBlocks+0x308>)
 8005070:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	f043 0202 	orr.w	r2, r3, #2
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e086      	b.n	800519e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d063      	beq.n	8005166 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a08      	ldr	r2, [pc, #32]	; (80050c4 <HAL_SD_ReadBlocks+0x308>)
 80050a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	f043 0220 	orr.w	r2, r3, #32
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e06c      	b.n	800519e <HAL_SD_ReadBlocks+0x3e2>
 80050c4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f001 fada 	bl	8006686 <SDIO_ReadFIFO>
 80050d2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80050d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050da:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80050dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050de:	3301      	adds	r3, #1
 80050e0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80050e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e4:	3b01      	subs	r3, #1
 80050e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80050e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ea:	0a1b      	lsrs	r3, r3, #8
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80050f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f4:	3301      	adds	r3, #1
 80050f6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80050f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050fa:	3b01      	subs	r3, #1
 80050fc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80050fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005100:	0c1b      	lsrs	r3, r3, #16
 8005102:	b2da      	uxtb	r2, r3
 8005104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005106:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510a:	3301      	adds	r3, #1
 800510c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800510e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005110:	3b01      	subs	r3, #1
 8005112:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005116:	0e1b      	lsrs	r3, r3, #24
 8005118:	b2da      	uxtb	r2, r3
 800511a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800511e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005120:	3301      	adds	r3, #1
 8005122:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005126:	3b01      	subs	r3, #1
 8005128:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800512a:	f7fd f897 	bl	800225c <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005136:	429a      	cmp	r2, r3
 8005138:	d902      	bls.n	8005140 <HAL_SD_ReadBlocks+0x384>
 800513a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800513c:	2b00      	cmp	r3, #0
 800513e:	d112      	bne.n	8005166 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a18      	ldr	r2, [pc, #96]	; (80051a8 <HAL_SD_ReadBlocks+0x3ec>)
 8005146:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e01b      	b.n	800519e <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_SD_ReadBlocks+0x3be>
 8005174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1a6      	bne.n	80050c8 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005182:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	e006      	b.n	800519e <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
  }
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3748      	adds	r7, #72	; 0x48
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	004005ff 	.word	0x004005ff

080051ac <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b092      	sub	sp, #72	; 0x48
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80051ba:	f7fd f84f 	bl	800225c <HAL_GetTick>
 80051be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d107      	bne.n	80051de <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e182      	b.n	80054e4 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	f040 8175 	bne.w	80054d6 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80051f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	441a      	add	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d907      	bls.n	8005210 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e169      	b.n	80054e4 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2203      	movs	r2, #3
 8005214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2200      	movs	r2, #0
 800521e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005224:	2b01      	cmp	r3, #1
 8005226:	d002      	beq.n	800522e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522a:	025b      	lsls	r3, r3, #9
 800522c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005236:	4618      	mov	r0, r3
 8005238:	f001 fad6 	bl	80067e8 <SDMMC_CmdBlockLength>
 800523c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800523e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00f      	beq.n	8005264 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a9c      	ldr	r2, [pc, #624]	; (80054bc <HAL_SD_WriteBlocks+0x310>)
 800524a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005252:	431a      	orrs	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e13f      	b.n	80054e4 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005264:	f04f 33ff 	mov.w	r3, #4294967295
 8005268:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	025b      	lsls	r3, r3, #9
 800526e:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005270:	2390      	movs	r3, #144	; 0x90
 8005272:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005274:	2300      	movs	r3, #0
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005278:	2300      	movs	r3, #0
 800527a:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800527c:	2301      	movs	r3, #1
 800527e:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f107 0218 	add.w	r2, r7, #24
 8005288:	4611      	mov	r1, r2
 800528a:	4618      	mov	r0, r3
 800528c:	f001 fa80 	bl	8006790 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d90a      	bls.n	80052ac <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052a2:	4618      	mov	r0, r3
 80052a4:	f001 fb28 	bl	80068f8 <SDMMC_CmdWriteMultiBlock>
 80052a8:	6478      	str	r0, [r7, #68]	; 0x44
 80052aa:	e009      	b.n	80052c0 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2210      	movs	r2, #16
 80052b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052b8:	4618      	mov	r0, r3
 80052ba:	f001 fafb 	bl	80068b4 <SDMMC_CmdWriteSingleBlock>
 80052be:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80052c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d012      	beq.n	80052ec <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a7c      	ldr	r2, [pc, #496]	; (80054bc <HAL_SD_WriteBlocks+0x310>)
 80052cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d4:	431a      	orrs	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e0fb      	b.n	80054e4 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80052f0:	e065      	b.n	80053be <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d040      	beq.n	8005382 <HAL_SD_WriteBlocks+0x1d6>
 8005300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005302:	2b00      	cmp	r3, #0
 8005304:	d03d      	beq.n	8005382 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005306:	2300      	movs	r3, #0
 8005308:	643b      	str	r3, [r7, #64]	; 0x40
 800530a:	e037      	b.n	800537c <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 800530c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005314:	3301      	adds	r3, #1
 8005316:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531a:	3b01      	subs	r3, #1
 800531c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800531e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	021a      	lsls	r2, r3, #8
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800532a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532c:	3301      	adds	r3, #1
 800532e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005332:	3b01      	subs	r3, #1
 8005334:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	041a      	lsls	r2, r3, #16
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005344:	3301      	adds	r3, #1
 8005346:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534a:	3b01      	subs	r3, #1
 800534c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800534e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	061a      	lsls	r2, r3, #24
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800535a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535c:	3301      	adds	r3, #1
 800535e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005362:	3b01      	subs	r3, #1
 8005364:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f107 0214 	add.w	r2, r7, #20
 800536e:	4611      	mov	r1, r2
 8005370:	4618      	mov	r0, r3
 8005372:	f001 f995 	bl	80066a0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005378:	3301      	adds	r3, #1
 800537a:	643b      	str	r3, [r7, #64]	; 0x40
 800537c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800537e:	2b07      	cmp	r3, #7
 8005380:	d9c4      	bls.n	800530c <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005382:	f7fc ff6b 	bl	800225c <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800538e:	429a      	cmp	r2, r3
 8005390:	d902      	bls.n	8005398 <HAL_SD_WriteBlocks+0x1ec>
 8005392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005394:	2b00      	cmp	r3, #0
 8005396:	d112      	bne.n	80053be <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a47      	ldr	r2, [pc, #284]	; (80054bc <HAL_SD_WriteBlocks+0x310>)
 800539e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a6:	431a      	orrs	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e092      	b.n	80054e4 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c4:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d092      	beq.n	80052f2 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d022      	beq.n	8005420 <HAL_SD_WriteBlocks+0x274>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d91f      	bls.n	8005420 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	d01b      	beq.n	8005420 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f001 faa5 	bl	800693c <SDMMC_CmdStopTransfer>
 80053f2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80053f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d012      	beq.n	8005420 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a2f      	ldr	r2, [pc, #188]	; (80054bc <HAL_SD_WriteBlocks+0x310>)
 8005400:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005408:	431a      	orrs	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e061      	b.n	80054e4 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	d012      	beq.n	8005454 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a22      	ldr	r2, [pc, #136]	; (80054bc <HAL_SD_WriteBlocks+0x310>)
 8005434:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543a:	f043 0208 	orr.w	r2, r3, #8
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e047      	b.n	80054e4 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d012      	beq.n	8005488 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a15      	ldr	r2, [pc, #84]	; (80054bc <HAL_SD_WriteBlocks+0x310>)
 8005468:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546e:	f043 0202 	orr.w	r2, r3, #2
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e02d      	b.n	80054e4 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548e:	f003 0310 	and.w	r3, r3, #16
 8005492:	2b00      	cmp	r3, #0
 8005494:	d014      	beq.n	80054c0 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a08      	ldr	r2, [pc, #32]	; (80054bc <HAL_SD_WriteBlocks+0x310>)
 800549c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	f043 0210 	orr.w	r2, r3, #16
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e013      	b.n	80054e4 <HAL_SD_WriteBlocks+0x338>
 80054bc:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f240 523a 	movw	r2, #1338	; 0x53a
 80054c8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	e006      	b.n	80054e4 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
  }
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3748      	adds	r7, #72	; 0x48
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054fa:	0f9b      	lsrs	r3, r3, #30
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005506:	0e9b      	lsrs	r3, r3, #26
 8005508:	b2db      	uxtb	r3, r3
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	b2da      	uxtb	r2, r3
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005518:	0e1b      	lsrs	r3, r3, #24
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f003 0303 	and.w	r3, r3, #3
 8005520:	b2da      	uxtb	r2, r3
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800552a:	0c1b      	lsrs	r3, r3, #16
 800552c:	b2da      	uxtb	r2, r3
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005536:	0a1b      	lsrs	r3, r3, #8
 8005538:	b2da      	uxtb	r2, r3
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005542:	b2da      	uxtb	r2, r3
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800554c:	0d1b      	lsrs	r3, r3, #20
 800554e:	b29a      	uxth	r2, r3
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005558:	0c1b      	lsrs	r3, r3, #16
 800555a:	b2db      	uxtb	r3, r3
 800555c:	f003 030f 	and.w	r3, r3, #15
 8005560:	b2da      	uxtb	r2, r3
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800556a:	0bdb      	lsrs	r3, r3, #15
 800556c:	b2db      	uxtb	r3, r3
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	b2da      	uxtb	r2, r3
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800557c:	0b9b      	lsrs	r3, r3, #14
 800557e:	b2db      	uxtb	r3, r3
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	b2da      	uxtb	r2, r3
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800558e:	0b5b      	lsrs	r3, r3, #13
 8005590:	b2db      	uxtb	r3, r3
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	b2da      	uxtb	r2, r3
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055a0:	0b1b      	lsrs	r3, r3, #12
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2200      	movs	r2, #0
 80055b2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d163      	bne.n	8005684 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055c0:	009a      	lsls	r2, r3, #2
 80055c2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80055c6:	4013      	ands	r3, r2
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80055cc:	0f92      	lsrs	r2, r2, #30
 80055ce:	431a      	orrs	r2, r3
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055d8:	0edb      	lsrs	r3, r3, #27
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ea:	0e1b      	lsrs	r3, r3, #24
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055fc:	0d5b      	lsrs	r3, r3, #21
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	b2da      	uxtb	r2, r3
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800560e:	0c9b      	lsrs	r3, r3, #18
 8005610:	b2db      	uxtb	r3, r3
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	b2da      	uxtb	r2, r3
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005620:	0bdb      	lsrs	r3, r3, #15
 8005622:	b2db      	uxtb	r3, r3
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	b2da      	uxtb	r2, r3
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	1c5a      	adds	r2, r3, #1
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	7e1b      	ldrb	r3, [r3, #24]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	3302      	adds	r3, #2
 8005644:	2201      	movs	r2, #1
 8005646:	fa02 f303 	lsl.w	r3, r2, r3
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800564e:	fb02 f203 	mul.w	r2, r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	7a1b      	ldrb	r3, [r3, #8]
 800565a:	b2db      	uxtb	r3, r3
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	2201      	movs	r2, #1
 8005662:	409a      	lsls	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005670:	0a52      	lsrs	r2, r2, #9
 8005672:	fb02 f203 	mul.w	r2, r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005680:	661a      	str	r2, [r3, #96]	; 0x60
 8005682:	e031      	b.n	80056e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005688:	2b01      	cmp	r3, #1
 800568a:	d11d      	bne.n	80056c8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005690:	041b      	lsls	r3, r3, #16
 8005692:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800569a:	0c1b      	lsrs	r3, r3, #16
 800569c:	431a      	orrs	r2, r3
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	3301      	adds	r3, #1
 80056a8:	029a      	lsls	r2, r3, #10
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056bc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	661a      	str	r2, [r3, #96]	; 0x60
 80056c6:	e00f      	b.n	80056e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a58      	ldr	r2, [pc, #352]	; (8005830 <HAL_SD_GetCardCSD+0x344>)
 80056ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e09d      	b.n	8005824 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ec:	0b9b      	lsrs	r3, r3, #14
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056fe:	09db      	lsrs	r3, r3, #7
 8005700:	b2db      	uxtb	r3, r3
 8005702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005706:	b2da      	uxtb	r2, r3
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005710:	b2db      	uxtb	r3, r3
 8005712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005716:	b2da      	uxtb	r2, r3
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005720:	0fdb      	lsrs	r3, r3, #31
 8005722:	b2da      	uxtb	r2, r3
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572c:	0f5b      	lsrs	r3, r3, #29
 800572e:	b2db      	uxtb	r3, r3
 8005730:	f003 0303 	and.w	r3, r3, #3
 8005734:	b2da      	uxtb	r2, r3
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573e:	0e9b      	lsrs	r3, r3, #26
 8005740:	b2db      	uxtb	r3, r3
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	b2da      	uxtb	r2, r3
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005750:	0d9b      	lsrs	r3, r3, #22
 8005752:	b2db      	uxtb	r3, r3
 8005754:	f003 030f 	and.w	r3, r3, #15
 8005758:	b2da      	uxtb	r2, r3
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005762:	0d5b      	lsrs	r3, r3, #21
 8005764:	b2db      	uxtb	r3, r3
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	b2da      	uxtb	r2, r3
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577e:	0c1b      	lsrs	r3, r3, #16
 8005780:	b2db      	uxtb	r3, r3
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	b2da      	uxtb	r2, r3
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005792:	0bdb      	lsrs	r3, r3, #15
 8005794:	b2db      	uxtb	r3, r3
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	b2da      	uxtb	r2, r3
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a6:	0b9b      	lsrs	r3, r3, #14
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ba:	0b5b      	lsrs	r3, r3, #13
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ce:	0b1b      	lsrs	r3, r3, #12
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e2:	0a9b      	lsrs	r3, r3, #10
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f6:	0a1b      	lsrs	r3, r3, #8
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	085b      	lsrs	r3, r3, #1
 800580c:	b2db      	uxtb	r3, r3
 800580e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005812:	b2da      	uxtb	r2, r3
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	004005ff 	.word	0x004005ff

08005834 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005894:	2300      	movs	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005898:	f107 030c 	add.w	r3, r7, #12
 800589c:	4619      	mov	r1, r3
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f970 	bl	8005b84 <SD_SendStatus>
 80058a4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d005      	beq.n	80058b8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	0a5b      	lsrs	r3, r3, #9
 80058bc:	f003 030f 	and.w	r3, r3, #15
 80058c0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80058c2:	693b      	ldr	r3, [r7, #16]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80058cc:	b5b0      	push	{r4, r5, r7, lr}
 80058ce:	b094      	sub	sp, #80	; 0x50
 80058d0:	af04      	add	r7, sp, #16
 80058d2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80058d4:	2301      	movs	r3, #1
 80058d6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 feff 	bl	80066e0 <SDIO_GetPowerState>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d102      	bne.n	80058ee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80058e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80058ec:	e0b7      	b.n	8005a5e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d02f      	beq.n	8005956 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f001 f8e5 	bl	8006aca <SDMMC_CmdSendCID>
 8005900:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <SD_InitCard+0x40>
    {
      return errorstate;
 8005908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800590a:	e0a8      	b.n	8005a5e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2100      	movs	r1, #0
 8005912:	4618      	mov	r0, r3
 8005914:	f000 ff29 	bl	800676a <SDIO_GetResponse>
 8005918:	4602      	mov	r2, r0
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2104      	movs	r1, #4
 8005924:	4618      	mov	r0, r3
 8005926:	f000 ff20 	bl	800676a <SDIO_GetResponse>
 800592a:	4602      	mov	r2, r0
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2108      	movs	r1, #8
 8005936:	4618      	mov	r0, r3
 8005938:	f000 ff17 	bl	800676a <SDIO_GetResponse>
 800593c:	4602      	mov	r2, r0
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	210c      	movs	r1, #12
 8005948:	4618      	mov	r0, r3
 800594a:	f000 ff0e 	bl	800676a <SDIO_GetResponse>
 800594e:	4602      	mov	r2, r0
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595a:	2b03      	cmp	r3, #3
 800595c:	d00d      	beq.n	800597a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f107 020e 	add.w	r2, r7, #14
 8005966:	4611      	mov	r1, r2
 8005968:	4618      	mov	r0, r3
 800596a:	f001 f8eb 	bl	8006b44 <SDMMC_CmdSetRelAdd>
 800596e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <SD_InitCard+0xae>
    {
      return errorstate;
 8005976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005978:	e071      	b.n	8005a5e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597e:	2b03      	cmp	r3, #3
 8005980:	d036      	beq.n	80059f0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005982:	89fb      	ldrh	r3, [r7, #14]
 8005984:	461a      	mov	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005992:	041b      	lsls	r3, r3, #16
 8005994:	4619      	mov	r1, r3
 8005996:	4610      	mov	r0, r2
 8005998:	f001 f8b5 	bl	8006b06 <SDMMC_CmdSendCSD>
 800599c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800599e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80059a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a6:	e05a      	b.n	8005a5e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2100      	movs	r1, #0
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fedb 	bl	800676a <SDIO_GetResponse>
 80059b4:	4602      	mov	r2, r0
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2104      	movs	r1, #4
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fed2 	bl	800676a <SDIO_GetResponse>
 80059c6:	4602      	mov	r2, r0
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2108      	movs	r1, #8
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fec9 	bl	800676a <SDIO_GetResponse>
 80059d8:	4602      	mov	r2, r0
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	210c      	movs	r1, #12
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 fec0 	bl	800676a <SDIO_GetResponse>
 80059ea:	4602      	mov	r2, r0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2104      	movs	r1, #4
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 feb7 	bl	800676a <SDIO_GetResponse>
 80059fc:	4603      	mov	r3, r0
 80059fe:	0d1a      	lsrs	r2, r3, #20
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005a04:	f107 0310 	add.w	r3, r7, #16
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff fd6e 	bl	80054ec <HAL_SD_GetCardCSD>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a1a:	e020      	b.n	8005a5e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6819      	ldr	r1, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a24:	041b      	lsls	r3, r3, #16
 8005a26:	f04f 0400 	mov.w	r4, #0
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	4623      	mov	r3, r4
 8005a2e:	4608      	mov	r0, r1
 8005a30:	f000 ffa6 	bl	8006980 <SDMMC_CmdSelDesel>
 8005a34:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <SD_InitCard+0x174>
  {
    return errorstate;
 8005a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3e:	e00e      	b.n	8005a5e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681d      	ldr	r5, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	466c      	mov	r4, sp
 8005a48:	f103 0210 	add.w	r2, r3, #16
 8005a4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a52:	3304      	adds	r3, #4
 8005a54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a56:	4628      	mov	r0, r5
 8005a58:	f000 fdea 	bl	8006630 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3740      	adds	r7, #64	; 0x40
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005a68 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	2300      	movs	r3, #0
 8005a7a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 ffa0 	bl	80069c6 <SDMMC_CmdGoIdleState>
 8005a86:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	e072      	b.n	8005b78 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 ffb3 	bl	8006a02 <SDMMC_CmdOperCond>
 8005a9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00d      	beq.n	8005ac0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 ff89 	bl	80069c6 <SDMMC_CmdGoIdleState>
 8005ab4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d004      	beq.n	8005ac6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	e05b      	b.n	8005b78 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d137      	bne.n	8005b3e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 ffb3 	bl	8006a40 <SDMMC_CmdAppCommand>
 8005ada:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d02d      	beq.n	8005b3e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ae2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ae6:	e047      	b.n	8005b78 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2100      	movs	r1, #0
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 ffa6 	bl	8006a40 <SDMMC_CmdAppCommand>
 8005af4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <SD_PowerON+0x98>
    {
      return errorstate;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	e03b      	b.n	8005b78 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	491e      	ldr	r1, [pc, #120]	; (8005b80 <SD_PowerON+0x118>)
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 ffbc 	bl	8006a84 <SDMMC_CmdAppOperCommand>
 8005b0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b18:	e02e      	b.n	8005b78 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2100      	movs	r1, #0
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 fe22 	bl	800676a <SDIO_GetResponse>
 8005b26:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	0fdb      	lsrs	r3, r3, #31
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <SD_PowerON+0xcc>
 8005b30:	2301      	movs	r3, #1
 8005b32:	e000      	b.n	8005b36 <SD_PowerON+0xce>
 8005b34:	2300      	movs	r3, #0
 8005b36:	613b      	str	r3, [r7, #16]

    count++;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d802      	bhi.n	8005b4e <SD_PowerON+0xe6>
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0cc      	beq.n	8005ae8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d902      	bls.n	8005b5e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b5c:	e00c      	b.n	8005b78 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	645a      	str	r2, [r3, #68]	; 0x44
 8005b6e:	e002      	b.n	8005b76 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	c1100000 	.word	0xc1100000

08005b84 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d102      	bne.n	8005b9a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005b94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b98:	e018      	b.n	8005bcc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba2:	041b      	lsls	r3, r3, #16
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	f000 ffed 	bl	8006b86 <SDMMC_CmdSendStatus>
 8005bac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	e009      	b.n	8005bcc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 fdd3 	bl	800676a <SDIO_GetResponse>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e034      	b.n	8005c54 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d106      	bne.n	8005c04 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f7fc f984 	bl	8001f0c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4610      	mov	r0, r2
 8005c10:	f000 fc0a 	bl	8006428 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	f000 fc72 	bl	8006508 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6858      	ldr	r0, [r3, #4]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	f000 fcbd 	bl	80065b0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	6892      	ldr	r2, [r2, #8]
 8005c3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	6892      	ldr	r2, [r2, #8]
 8005c4a:	f041 0101 	orr.w	r1, r1, #1
 8005c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e03f      	b.n	8005cee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7fc f854 	bl	8001d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2224      	movs	r2, #36	; 0x24
 8005c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f829 	bl	8005cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695a      	ldr	r2, [r3, #20]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68da      	ldr	r2, [r3, #12]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	431a      	orrs	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	431a      	orrs	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005d3a:	f023 030c 	bic.w	r3, r3, #12
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6812      	ldr	r2, [r2, #0]
 8005d42:	68f9      	ldr	r1, [r7, #12]
 8005d44:	430b      	orrs	r3, r1
 8005d46:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	699a      	ldr	r2, [r3, #24]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d66:	f040 8199 	bne.w	800609c <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4ac6      	ldr	r2, [pc, #792]	; (8006088 <UART_SetConfig+0x390>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00f      	beq.n	8005d94 <UART_SetConfig+0x9c>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4ac4      	ldr	r2, [pc, #784]	; (800608c <UART_SetConfig+0x394>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d00a      	beq.n	8005d94 <UART_SetConfig+0x9c>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4ac3      	ldr	r2, [pc, #780]	; (8006090 <UART_SetConfig+0x398>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d005      	beq.n	8005d94 <UART_SetConfig+0x9c>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4ac1      	ldr	r2, [pc, #772]	; (8006094 <UART_SetConfig+0x39c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	f040 80bd 	bne.w	8005f0e <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d94:	f7fe faa0 	bl	80042d8 <HAL_RCC_GetPCLK2Freq>
 8005d98:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	461d      	mov	r5, r3
 8005d9e:	f04f 0600 	mov.w	r6, #0
 8005da2:	46a8      	mov	r8, r5
 8005da4:	46b1      	mov	r9, r6
 8005da6:	eb18 0308 	adds.w	r3, r8, r8
 8005daa:	eb49 0409 	adc.w	r4, r9, r9
 8005dae:	4698      	mov	r8, r3
 8005db0:	46a1      	mov	r9, r4
 8005db2:	eb18 0805 	adds.w	r8, r8, r5
 8005db6:	eb49 0906 	adc.w	r9, r9, r6
 8005dba:	f04f 0100 	mov.w	r1, #0
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005dc6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005dca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005dce:	4688      	mov	r8, r1
 8005dd0:	4691      	mov	r9, r2
 8005dd2:	eb18 0005 	adds.w	r0, r8, r5
 8005dd6:	eb49 0106 	adc.w	r1, r9, r6
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	461d      	mov	r5, r3
 8005de0:	f04f 0600 	mov.w	r6, #0
 8005de4:	196b      	adds	r3, r5, r5
 8005de6:	eb46 0406 	adc.w	r4, r6, r6
 8005dea:	461a      	mov	r2, r3
 8005dec:	4623      	mov	r3, r4
 8005dee:	f7fa fa67 	bl	80002c0 <__aeabi_uldivmod>
 8005df2:	4603      	mov	r3, r0
 8005df4:	460c      	mov	r4, r1
 8005df6:	461a      	mov	r2, r3
 8005df8:	4ba7      	ldr	r3, [pc, #668]	; (8006098 <UART_SetConfig+0x3a0>)
 8005dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	461d      	mov	r5, r3
 8005e08:	f04f 0600 	mov.w	r6, #0
 8005e0c:	46a9      	mov	r9, r5
 8005e0e:	46b2      	mov	sl, r6
 8005e10:	eb19 0309 	adds.w	r3, r9, r9
 8005e14:	eb4a 040a 	adc.w	r4, sl, sl
 8005e18:	4699      	mov	r9, r3
 8005e1a:	46a2      	mov	sl, r4
 8005e1c:	eb19 0905 	adds.w	r9, r9, r5
 8005e20:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e24:	f04f 0100 	mov.w	r1, #0
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e38:	4689      	mov	r9, r1
 8005e3a:	4692      	mov	sl, r2
 8005e3c:	eb19 0005 	adds.w	r0, r9, r5
 8005e40:	eb4a 0106 	adc.w	r1, sl, r6
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	461d      	mov	r5, r3
 8005e4a:	f04f 0600 	mov.w	r6, #0
 8005e4e:	196b      	adds	r3, r5, r5
 8005e50:	eb46 0406 	adc.w	r4, r6, r6
 8005e54:	461a      	mov	r2, r3
 8005e56:	4623      	mov	r3, r4
 8005e58:	f7fa fa32 	bl	80002c0 <__aeabi_uldivmod>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	460c      	mov	r4, r1
 8005e60:	461a      	mov	r2, r3
 8005e62:	4b8d      	ldr	r3, [pc, #564]	; (8006098 <UART_SetConfig+0x3a0>)
 8005e64:	fba3 1302 	umull	r1, r3, r3, r2
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	2164      	movs	r1, #100	; 0x64
 8005e6c:	fb01 f303 	mul.w	r3, r1, r3
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	3332      	adds	r3, #50	; 0x32
 8005e76:	4a88      	ldr	r2, [pc, #544]	; (8006098 <UART_SetConfig+0x3a0>)
 8005e78:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7c:	095b      	lsrs	r3, r3, #5
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e84:	4498      	add	r8, r3
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	461d      	mov	r5, r3
 8005e8a:	f04f 0600 	mov.w	r6, #0
 8005e8e:	46a9      	mov	r9, r5
 8005e90:	46b2      	mov	sl, r6
 8005e92:	eb19 0309 	adds.w	r3, r9, r9
 8005e96:	eb4a 040a 	adc.w	r4, sl, sl
 8005e9a:	4699      	mov	r9, r3
 8005e9c:	46a2      	mov	sl, r4
 8005e9e:	eb19 0905 	adds.w	r9, r9, r5
 8005ea2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ea6:	f04f 0100 	mov.w	r1, #0
 8005eaa:	f04f 0200 	mov.w	r2, #0
 8005eae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005eb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005eb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005eba:	4689      	mov	r9, r1
 8005ebc:	4692      	mov	sl, r2
 8005ebe:	eb19 0005 	adds.w	r0, r9, r5
 8005ec2:	eb4a 0106 	adc.w	r1, sl, r6
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	461d      	mov	r5, r3
 8005ecc:	f04f 0600 	mov.w	r6, #0
 8005ed0:	196b      	adds	r3, r5, r5
 8005ed2:	eb46 0406 	adc.w	r4, r6, r6
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	4623      	mov	r3, r4
 8005eda:	f7fa f9f1 	bl	80002c0 <__aeabi_uldivmod>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	4b6c      	ldr	r3, [pc, #432]	; (8006098 <UART_SetConfig+0x3a0>)
 8005ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	2164      	movs	r1, #100	; 0x64
 8005eee:	fb01 f303 	mul.w	r3, r1, r3
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	00db      	lsls	r3, r3, #3
 8005ef6:	3332      	adds	r3, #50	; 0x32
 8005ef8:	4a67      	ldr	r2, [pc, #412]	; (8006098 <UART_SetConfig+0x3a0>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	f003 0207 	and.w	r2, r3, #7
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4442      	add	r2, r8
 8005f0a:	609a      	str	r2, [r3, #8]
 8005f0c:	e27d      	b.n	800640a <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f0e:	f7fe f9cf 	bl	80042b0 <HAL_RCC_GetPCLK1Freq>
 8005f12:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	461d      	mov	r5, r3
 8005f18:	f04f 0600 	mov.w	r6, #0
 8005f1c:	46a8      	mov	r8, r5
 8005f1e:	46b1      	mov	r9, r6
 8005f20:	eb18 0308 	adds.w	r3, r8, r8
 8005f24:	eb49 0409 	adc.w	r4, r9, r9
 8005f28:	4698      	mov	r8, r3
 8005f2a:	46a1      	mov	r9, r4
 8005f2c:	eb18 0805 	adds.w	r8, r8, r5
 8005f30:	eb49 0906 	adc.w	r9, r9, r6
 8005f34:	f04f 0100 	mov.w	r1, #0
 8005f38:	f04f 0200 	mov.w	r2, #0
 8005f3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f48:	4688      	mov	r8, r1
 8005f4a:	4691      	mov	r9, r2
 8005f4c:	eb18 0005 	adds.w	r0, r8, r5
 8005f50:	eb49 0106 	adc.w	r1, r9, r6
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	461d      	mov	r5, r3
 8005f5a:	f04f 0600 	mov.w	r6, #0
 8005f5e:	196b      	adds	r3, r5, r5
 8005f60:	eb46 0406 	adc.w	r4, r6, r6
 8005f64:	461a      	mov	r2, r3
 8005f66:	4623      	mov	r3, r4
 8005f68:	f7fa f9aa 	bl	80002c0 <__aeabi_uldivmod>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	460c      	mov	r4, r1
 8005f70:	461a      	mov	r2, r3
 8005f72:	4b49      	ldr	r3, [pc, #292]	; (8006098 <UART_SetConfig+0x3a0>)
 8005f74:	fba3 2302 	umull	r2, r3, r3, r2
 8005f78:	095b      	lsrs	r3, r3, #5
 8005f7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	461d      	mov	r5, r3
 8005f82:	f04f 0600 	mov.w	r6, #0
 8005f86:	46a9      	mov	r9, r5
 8005f88:	46b2      	mov	sl, r6
 8005f8a:	eb19 0309 	adds.w	r3, r9, r9
 8005f8e:	eb4a 040a 	adc.w	r4, sl, sl
 8005f92:	4699      	mov	r9, r3
 8005f94:	46a2      	mov	sl, r4
 8005f96:	eb19 0905 	adds.w	r9, r9, r5
 8005f9a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f9e:	f04f 0100 	mov.w	r1, #0
 8005fa2:	f04f 0200 	mov.w	r2, #0
 8005fa6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005faa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fb2:	4689      	mov	r9, r1
 8005fb4:	4692      	mov	sl, r2
 8005fb6:	eb19 0005 	adds.w	r0, r9, r5
 8005fba:	eb4a 0106 	adc.w	r1, sl, r6
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	461d      	mov	r5, r3
 8005fc4:	f04f 0600 	mov.w	r6, #0
 8005fc8:	196b      	adds	r3, r5, r5
 8005fca:	eb46 0406 	adc.w	r4, r6, r6
 8005fce:	461a      	mov	r2, r3
 8005fd0:	4623      	mov	r3, r4
 8005fd2:	f7fa f975 	bl	80002c0 <__aeabi_uldivmod>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	460c      	mov	r4, r1
 8005fda:	461a      	mov	r2, r3
 8005fdc:	4b2e      	ldr	r3, [pc, #184]	; (8006098 <UART_SetConfig+0x3a0>)
 8005fde:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe2:	095b      	lsrs	r3, r3, #5
 8005fe4:	2164      	movs	r1, #100	; 0x64
 8005fe6:	fb01 f303 	mul.w	r3, r1, r3
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	3332      	adds	r3, #50	; 0x32
 8005ff0:	4a29      	ldr	r2, [pc, #164]	; (8006098 <UART_SetConfig+0x3a0>)
 8005ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ffe:	4498      	add	r8, r3
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	461d      	mov	r5, r3
 8006004:	f04f 0600 	mov.w	r6, #0
 8006008:	46a9      	mov	r9, r5
 800600a:	46b2      	mov	sl, r6
 800600c:	eb19 0309 	adds.w	r3, r9, r9
 8006010:	eb4a 040a 	adc.w	r4, sl, sl
 8006014:	4699      	mov	r9, r3
 8006016:	46a2      	mov	sl, r4
 8006018:	eb19 0905 	adds.w	r9, r9, r5
 800601c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006020:	f04f 0100 	mov.w	r1, #0
 8006024:	f04f 0200 	mov.w	r2, #0
 8006028:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800602c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006030:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006034:	4689      	mov	r9, r1
 8006036:	4692      	mov	sl, r2
 8006038:	eb19 0005 	adds.w	r0, r9, r5
 800603c:	eb4a 0106 	adc.w	r1, sl, r6
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	461d      	mov	r5, r3
 8006046:	f04f 0600 	mov.w	r6, #0
 800604a:	196b      	adds	r3, r5, r5
 800604c:	eb46 0406 	adc.w	r4, r6, r6
 8006050:	461a      	mov	r2, r3
 8006052:	4623      	mov	r3, r4
 8006054:	f7fa f934 	bl	80002c0 <__aeabi_uldivmod>
 8006058:	4603      	mov	r3, r0
 800605a:	460c      	mov	r4, r1
 800605c:	461a      	mov	r2, r3
 800605e:	4b0e      	ldr	r3, [pc, #56]	; (8006098 <UART_SetConfig+0x3a0>)
 8006060:	fba3 1302 	umull	r1, r3, r3, r2
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	2164      	movs	r1, #100	; 0x64
 8006068:	fb01 f303 	mul.w	r3, r1, r3
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	3332      	adds	r3, #50	; 0x32
 8006072:	4a09      	ldr	r2, [pc, #36]	; (8006098 <UART_SetConfig+0x3a0>)
 8006074:	fba2 2303 	umull	r2, r3, r2, r3
 8006078:	095b      	lsrs	r3, r3, #5
 800607a:	f003 0207 	and.w	r2, r3, #7
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4442      	add	r2, r8
 8006084:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006086:	e1c0      	b.n	800640a <UART_SetConfig+0x712>
 8006088:	40011000 	.word	0x40011000
 800608c:	40011400 	.word	0x40011400
 8006090:	40011800 	.word	0x40011800
 8006094:	40011c00 	.word	0x40011c00
 8006098:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4adc      	ldr	r2, [pc, #880]	; (8006414 <UART_SetConfig+0x71c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00f      	beq.n	80060c6 <UART_SetConfig+0x3ce>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4adb      	ldr	r2, [pc, #876]	; (8006418 <UART_SetConfig+0x720>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d00a      	beq.n	80060c6 <UART_SetConfig+0x3ce>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4ad9      	ldr	r2, [pc, #868]	; (800641c <UART_SetConfig+0x724>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d005      	beq.n	80060c6 <UART_SetConfig+0x3ce>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4ad8      	ldr	r2, [pc, #864]	; (8006420 <UART_SetConfig+0x728>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	f040 80d1 	bne.w	8006268 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 80060c6:	f7fe f907 	bl	80042d8 <HAL_RCC_GetPCLK2Freq>
 80060ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	469a      	mov	sl, r3
 80060d0:	f04f 0b00 	mov.w	fp, #0
 80060d4:	46d0      	mov	r8, sl
 80060d6:	46d9      	mov	r9, fp
 80060d8:	eb18 0308 	adds.w	r3, r8, r8
 80060dc:	eb49 0409 	adc.w	r4, r9, r9
 80060e0:	4698      	mov	r8, r3
 80060e2:	46a1      	mov	r9, r4
 80060e4:	eb18 080a 	adds.w	r8, r8, sl
 80060e8:	eb49 090b 	adc.w	r9, r9, fp
 80060ec:	f04f 0100 	mov.w	r1, #0
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006100:	4688      	mov	r8, r1
 8006102:	4691      	mov	r9, r2
 8006104:	eb1a 0508 	adds.w	r5, sl, r8
 8006108:	eb4b 0609 	adc.w	r6, fp, r9
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	4619      	mov	r1, r3
 8006112:	f04f 0200 	mov.w	r2, #0
 8006116:	f04f 0300 	mov.w	r3, #0
 800611a:	f04f 0400 	mov.w	r4, #0
 800611e:	0094      	lsls	r4, r2, #2
 8006120:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006124:	008b      	lsls	r3, r1, #2
 8006126:	461a      	mov	r2, r3
 8006128:	4623      	mov	r3, r4
 800612a:	4628      	mov	r0, r5
 800612c:	4631      	mov	r1, r6
 800612e:	f7fa f8c7 	bl	80002c0 <__aeabi_uldivmod>
 8006132:	4603      	mov	r3, r0
 8006134:	460c      	mov	r4, r1
 8006136:	461a      	mov	r2, r3
 8006138:	4bba      	ldr	r3, [pc, #744]	; (8006424 <UART_SetConfig+0x72c>)
 800613a:	fba3 2302 	umull	r2, r3, r3, r2
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	469b      	mov	fp, r3
 8006148:	f04f 0c00 	mov.w	ip, #0
 800614c:	46d9      	mov	r9, fp
 800614e:	46e2      	mov	sl, ip
 8006150:	eb19 0309 	adds.w	r3, r9, r9
 8006154:	eb4a 040a 	adc.w	r4, sl, sl
 8006158:	4699      	mov	r9, r3
 800615a:	46a2      	mov	sl, r4
 800615c:	eb19 090b 	adds.w	r9, r9, fp
 8006160:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006164:	f04f 0100 	mov.w	r1, #0
 8006168:	f04f 0200 	mov.w	r2, #0
 800616c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006170:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006174:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006178:	4689      	mov	r9, r1
 800617a:	4692      	mov	sl, r2
 800617c:	eb1b 0509 	adds.w	r5, fp, r9
 8006180:	eb4c 060a 	adc.w	r6, ip, sl
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	4619      	mov	r1, r3
 800618a:	f04f 0200 	mov.w	r2, #0
 800618e:	f04f 0300 	mov.w	r3, #0
 8006192:	f04f 0400 	mov.w	r4, #0
 8006196:	0094      	lsls	r4, r2, #2
 8006198:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800619c:	008b      	lsls	r3, r1, #2
 800619e:	461a      	mov	r2, r3
 80061a0:	4623      	mov	r3, r4
 80061a2:	4628      	mov	r0, r5
 80061a4:	4631      	mov	r1, r6
 80061a6:	f7fa f88b 	bl	80002c0 <__aeabi_uldivmod>
 80061aa:	4603      	mov	r3, r0
 80061ac:	460c      	mov	r4, r1
 80061ae:	461a      	mov	r2, r3
 80061b0:	4b9c      	ldr	r3, [pc, #624]	; (8006424 <UART_SetConfig+0x72c>)
 80061b2:	fba3 1302 	umull	r1, r3, r3, r2
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	2164      	movs	r1, #100	; 0x64
 80061ba:	fb01 f303 	mul.w	r3, r1, r3
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	011b      	lsls	r3, r3, #4
 80061c2:	3332      	adds	r3, #50	; 0x32
 80061c4:	4a97      	ldr	r2, [pc, #604]	; (8006424 <UART_SetConfig+0x72c>)
 80061c6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ca:	095b      	lsrs	r3, r3, #5
 80061cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061d0:	4498      	add	r8, r3
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	469b      	mov	fp, r3
 80061d6:	f04f 0c00 	mov.w	ip, #0
 80061da:	46d9      	mov	r9, fp
 80061dc:	46e2      	mov	sl, ip
 80061de:	eb19 0309 	adds.w	r3, r9, r9
 80061e2:	eb4a 040a 	adc.w	r4, sl, sl
 80061e6:	4699      	mov	r9, r3
 80061e8:	46a2      	mov	sl, r4
 80061ea:	eb19 090b 	adds.w	r9, r9, fp
 80061ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061f2:	f04f 0100 	mov.w	r1, #0
 80061f6:	f04f 0200 	mov.w	r2, #0
 80061fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006202:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006206:	4689      	mov	r9, r1
 8006208:	4692      	mov	sl, r2
 800620a:	eb1b 0509 	adds.w	r5, fp, r9
 800620e:	eb4c 060a 	adc.w	r6, ip, sl
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	4619      	mov	r1, r3
 8006218:	f04f 0200 	mov.w	r2, #0
 800621c:	f04f 0300 	mov.w	r3, #0
 8006220:	f04f 0400 	mov.w	r4, #0
 8006224:	0094      	lsls	r4, r2, #2
 8006226:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800622a:	008b      	lsls	r3, r1, #2
 800622c:	461a      	mov	r2, r3
 800622e:	4623      	mov	r3, r4
 8006230:	4628      	mov	r0, r5
 8006232:	4631      	mov	r1, r6
 8006234:	f7fa f844 	bl	80002c0 <__aeabi_uldivmod>
 8006238:	4603      	mov	r3, r0
 800623a:	460c      	mov	r4, r1
 800623c:	461a      	mov	r2, r3
 800623e:	4b79      	ldr	r3, [pc, #484]	; (8006424 <UART_SetConfig+0x72c>)
 8006240:	fba3 1302 	umull	r1, r3, r3, r2
 8006244:	095b      	lsrs	r3, r3, #5
 8006246:	2164      	movs	r1, #100	; 0x64
 8006248:	fb01 f303 	mul.w	r3, r1, r3
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	3332      	adds	r3, #50	; 0x32
 8006252:	4a74      	ldr	r2, [pc, #464]	; (8006424 <UART_SetConfig+0x72c>)
 8006254:	fba2 2303 	umull	r2, r3, r2, r3
 8006258:	095b      	lsrs	r3, r3, #5
 800625a:	f003 020f 	and.w	r2, r3, #15
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4442      	add	r2, r8
 8006264:	609a      	str	r2, [r3, #8]
 8006266:	e0d0      	b.n	800640a <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006268:	f7fe f822 	bl	80042b0 <HAL_RCC_GetPCLK1Freq>
 800626c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	469a      	mov	sl, r3
 8006272:	f04f 0b00 	mov.w	fp, #0
 8006276:	46d0      	mov	r8, sl
 8006278:	46d9      	mov	r9, fp
 800627a:	eb18 0308 	adds.w	r3, r8, r8
 800627e:	eb49 0409 	adc.w	r4, r9, r9
 8006282:	4698      	mov	r8, r3
 8006284:	46a1      	mov	r9, r4
 8006286:	eb18 080a 	adds.w	r8, r8, sl
 800628a:	eb49 090b 	adc.w	r9, r9, fp
 800628e:	f04f 0100 	mov.w	r1, #0
 8006292:	f04f 0200 	mov.w	r2, #0
 8006296:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800629a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800629e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80062a2:	4688      	mov	r8, r1
 80062a4:	4691      	mov	r9, r2
 80062a6:	eb1a 0508 	adds.w	r5, sl, r8
 80062aa:	eb4b 0609 	adc.w	r6, fp, r9
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	4619      	mov	r1, r3
 80062b4:	f04f 0200 	mov.w	r2, #0
 80062b8:	f04f 0300 	mov.w	r3, #0
 80062bc:	f04f 0400 	mov.w	r4, #0
 80062c0:	0094      	lsls	r4, r2, #2
 80062c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062c6:	008b      	lsls	r3, r1, #2
 80062c8:	461a      	mov	r2, r3
 80062ca:	4623      	mov	r3, r4
 80062cc:	4628      	mov	r0, r5
 80062ce:	4631      	mov	r1, r6
 80062d0:	f7f9 fff6 	bl	80002c0 <__aeabi_uldivmod>
 80062d4:	4603      	mov	r3, r0
 80062d6:	460c      	mov	r4, r1
 80062d8:	461a      	mov	r2, r3
 80062da:	4b52      	ldr	r3, [pc, #328]	; (8006424 <UART_SetConfig+0x72c>)
 80062dc:	fba3 2302 	umull	r2, r3, r3, r2
 80062e0:	095b      	lsrs	r3, r3, #5
 80062e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	469b      	mov	fp, r3
 80062ea:	f04f 0c00 	mov.w	ip, #0
 80062ee:	46d9      	mov	r9, fp
 80062f0:	46e2      	mov	sl, ip
 80062f2:	eb19 0309 	adds.w	r3, r9, r9
 80062f6:	eb4a 040a 	adc.w	r4, sl, sl
 80062fa:	4699      	mov	r9, r3
 80062fc:	46a2      	mov	sl, r4
 80062fe:	eb19 090b 	adds.w	r9, r9, fp
 8006302:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006306:	f04f 0100 	mov.w	r1, #0
 800630a:	f04f 0200 	mov.w	r2, #0
 800630e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006312:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006316:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800631a:	4689      	mov	r9, r1
 800631c:	4692      	mov	sl, r2
 800631e:	eb1b 0509 	adds.w	r5, fp, r9
 8006322:	eb4c 060a 	adc.w	r6, ip, sl
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	4619      	mov	r1, r3
 800632c:	f04f 0200 	mov.w	r2, #0
 8006330:	f04f 0300 	mov.w	r3, #0
 8006334:	f04f 0400 	mov.w	r4, #0
 8006338:	0094      	lsls	r4, r2, #2
 800633a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800633e:	008b      	lsls	r3, r1, #2
 8006340:	461a      	mov	r2, r3
 8006342:	4623      	mov	r3, r4
 8006344:	4628      	mov	r0, r5
 8006346:	4631      	mov	r1, r6
 8006348:	f7f9 ffba 	bl	80002c0 <__aeabi_uldivmod>
 800634c:	4603      	mov	r3, r0
 800634e:	460c      	mov	r4, r1
 8006350:	461a      	mov	r2, r3
 8006352:	4b34      	ldr	r3, [pc, #208]	; (8006424 <UART_SetConfig+0x72c>)
 8006354:	fba3 1302 	umull	r1, r3, r3, r2
 8006358:	095b      	lsrs	r3, r3, #5
 800635a:	2164      	movs	r1, #100	; 0x64
 800635c:	fb01 f303 	mul.w	r3, r1, r3
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	3332      	adds	r3, #50	; 0x32
 8006366:	4a2f      	ldr	r2, [pc, #188]	; (8006424 <UART_SetConfig+0x72c>)
 8006368:	fba2 2303 	umull	r2, r3, r2, r3
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006372:	4498      	add	r8, r3
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	469b      	mov	fp, r3
 8006378:	f04f 0c00 	mov.w	ip, #0
 800637c:	46d9      	mov	r9, fp
 800637e:	46e2      	mov	sl, ip
 8006380:	eb19 0309 	adds.w	r3, r9, r9
 8006384:	eb4a 040a 	adc.w	r4, sl, sl
 8006388:	4699      	mov	r9, r3
 800638a:	46a2      	mov	sl, r4
 800638c:	eb19 090b 	adds.w	r9, r9, fp
 8006390:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006394:	f04f 0100 	mov.w	r1, #0
 8006398:	f04f 0200 	mov.w	r2, #0
 800639c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063a8:	4689      	mov	r9, r1
 80063aa:	4692      	mov	sl, r2
 80063ac:	eb1b 0509 	adds.w	r5, fp, r9
 80063b0:	eb4c 060a 	adc.w	r6, ip, sl
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	4619      	mov	r1, r3
 80063ba:	f04f 0200 	mov.w	r2, #0
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	f04f 0400 	mov.w	r4, #0
 80063c6:	0094      	lsls	r4, r2, #2
 80063c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063cc:	008b      	lsls	r3, r1, #2
 80063ce:	461a      	mov	r2, r3
 80063d0:	4623      	mov	r3, r4
 80063d2:	4628      	mov	r0, r5
 80063d4:	4631      	mov	r1, r6
 80063d6:	f7f9 ff73 	bl	80002c0 <__aeabi_uldivmod>
 80063da:	4603      	mov	r3, r0
 80063dc:	460c      	mov	r4, r1
 80063de:	461a      	mov	r2, r3
 80063e0:	4b10      	ldr	r3, [pc, #64]	; (8006424 <UART_SetConfig+0x72c>)
 80063e2:	fba3 1302 	umull	r1, r3, r3, r2
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	2164      	movs	r1, #100	; 0x64
 80063ea:	fb01 f303 	mul.w	r3, r1, r3
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	3332      	adds	r3, #50	; 0x32
 80063f4:	4a0b      	ldr	r2, [pc, #44]	; (8006424 <UART_SetConfig+0x72c>)
 80063f6:	fba2 2303 	umull	r2, r3, r2, r3
 80063fa:	095b      	lsrs	r3, r3, #5
 80063fc:	f003 020f 	and.w	r2, r3, #15
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4442      	add	r2, r8
 8006406:	609a      	str	r2, [r3, #8]
}
 8006408:	e7ff      	b.n	800640a <UART_SetConfig+0x712>
 800640a:	bf00      	nop
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006414:	40011000 	.word	0x40011000
 8006418:	40011400 	.word	0x40011400
 800641c:	40011800 	.word	0x40011800
 8006420:	40011c00 	.word	0x40011c00
 8006424:	51eb851f 	.word	0x51eb851f

08006428 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006440:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4b2f      	ldr	r3, [pc, #188]	; (8006504 <FSMC_NORSRAM_Init+0xdc>)
 8006446:	4013      	ands	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006452:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006458:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800645e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006464:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800646a:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006470:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006476:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800647c:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006482:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8006488:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 800648e:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8006494:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800649a:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	2b08      	cmp	r3, #8
 80064a8:	d103      	bne.n	80064b2 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064b0:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68f9      	ldr	r1, [r7, #12]
 80064ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064c6:	d10a      	bne.n	80064de <FSMC_NORSRAM_Init+0xb6>
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d006      	beq.n	80064de <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d8:	431a      	orrs	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d006      	beq.n	80064f4 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ee:	431a      	orrs	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	ffc00480 	.word	0xffc00480

08006508 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006522:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800652a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006536:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800653e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006546:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	3b01      	subs	r3, #1
 800654e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006550:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	3b02      	subs	r3, #2
 8006558:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800655a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006560:	4313      	orrs	r3, r2
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	4313      	orrs	r3, r2
 8006566:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6979      	ldr	r1, [r7, #20]
 8006570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800657c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006580:	d10e      	bne.n	80065a0 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800658a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	3b01      	subs	r3, #1
 8006592:	051b      	lsls	r3, r3, #20
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	4313      	orrs	r3, r2
 8006598:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
	...

080065b0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065c8:	d122      	bne.n	8006610 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	4b15      	ldr	r3, [pc, #84]	; (800662c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80065d8:	4013      	ands	r3, r2
 80065da:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80065e6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80065ee:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80065f6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80065fc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6979      	ldr	r1, [r7, #20]
 800660a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800660e:	e005      	b.n	800661c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	cff00000 	.word	0xcff00000

08006630 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006630:	b084      	sub	sp, #16
 8006632:	b480      	push	{r7}
 8006634:	b085      	sub	sp, #20
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	f107 001c 	add.w	r0, r7, #28
 800663e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006646:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006648:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800664a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800664e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006652:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006656:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800665a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800666a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	b004      	add	sp, #16
 8006684:	4770      	bx	lr

08006686 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006694:	4618      	mov	r0, r3
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b082      	sub	sp, #8
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2203      	movs	r2, #3
 80066ce:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80066d0:	2002      	movs	r0, #2
 80066d2:	f7fb fdcf 	bl	8002274 <HAL_Delay>
  
  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0303 	and.w	r3, r3, #3
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800671a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006720:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006726:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	4313      	orrs	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006736:	f023 030f 	bic.w	r3, r3, #15
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	431a      	orrs	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	b2db      	uxtb	r3, r3
}
 800675e:	4618      	mov	r0, r3
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800676a:	b480      	push	{r7}
 800676c:	b085      	sub	sp, #20
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3314      	adds	r3, #20
 8006778:	461a      	mov	r2, r3
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	4413      	add	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
}  
 8006784:	4618      	mov	r0, r3
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800679a:	2300      	movs	r3, #0
 800679c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80067b6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80067bc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80067c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ce:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	431a      	orrs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80067da:	2300      	movs	r3, #0

}
 80067dc:	4618      	mov	r0, r3
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80067f6:	2310      	movs	r3, #16
 80067f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067fa:	2340      	movs	r3, #64	; 0x40
 80067fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067fe:	2300      	movs	r3, #0
 8006800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006806:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006808:	f107 0308 	add.w	r3, r7, #8
 800680c:	4619      	mov	r1, r3
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7ff ff74 	bl	80066fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006814:	f241 3288 	movw	r2, #5000	; 0x1388
 8006818:	2110      	movs	r1, #16
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f9fe 	bl	8006c1c <SDMMC_GetCmdResp1>
 8006820:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006822:	69fb      	ldr	r3, [r7, #28]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3720      	adds	r7, #32
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800683a:	2311      	movs	r3, #17
 800683c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800683e:	2340      	movs	r3, #64	; 0x40
 8006840:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006842:	2300      	movs	r3, #0
 8006844:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800684a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800684c:	f107 0308 	add.w	r3, r7, #8
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7ff ff52 	bl	80066fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006858:	f241 3288 	movw	r2, #5000	; 0x1388
 800685c:	2111      	movs	r1, #17
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f9dc 	bl	8006c1c <SDMMC_GetCmdResp1>
 8006864:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006866:	69fb      	ldr	r3, [r7, #28]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3720      	adds	r7, #32
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800687e:	2312      	movs	r3, #18
 8006880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006882:	2340      	movs	r3, #64	; 0x40
 8006884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006886:	2300      	movs	r3, #0
 8006888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800688a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800688e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006890:	f107 0308 	add.w	r3, r7, #8
 8006894:	4619      	mov	r1, r3
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7ff ff30 	bl	80066fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800689c:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a0:	2112      	movs	r1, #18
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f9ba 	bl	8006c1c <SDMMC_GetCmdResp1>
 80068a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068aa:	69fb      	ldr	r3, [r7, #28]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3720      	adds	r7, #32
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80068c2:	2318      	movs	r3, #24
 80068c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80068c6:	2340      	movs	r3, #64	; 0x40
 80068c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068ca:	2300      	movs	r3, #0
 80068cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068d4:	f107 0308 	add.w	r3, r7, #8
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff ff0e 	bl	80066fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80068e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068e4:	2118      	movs	r1, #24
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f998 	bl	8006c1c <SDMMC_GetCmdResp1>
 80068ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068ee:	69fb      	ldr	r3, [r7, #28]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3720      	adds	r7, #32
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006906:	2319      	movs	r3, #25
 8006908:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800690a:	2340      	movs	r3, #64	; 0x40
 800690c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800690e:	2300      	movs	r3, #0
 8006910:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006916:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006918:	f107 0308 	add.w	r3, r7, #8
 800691c:	4619      	mov	r1, r3
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7ff feec 	bl	80066fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006924:	f241 3288 	movw	r2, #5000	; 0x1388
 8006928:	2119      	movs	r1, #25
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f976 	bl	8006c1c <SDMMC_GetCmdResp1>
 8006930:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006932:	69fb      	ldr	r3, [r7, #28]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3720      	adds	r7, #32
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006948:	230c      	movs	r3, #12
 800694a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800694c:	2340      	movs	r3, #64	; 0x40
 800694e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006950:	2300      	movs	r3, #0
 8006952:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006958:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800695a:	f107 0308 	add.w	r3, r7, #8
 800695e:	4619      	mov	r1, r3
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff fecb 	bl	80066fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006966:	4a05      	ldr	r2, [pc, #20]	; (800697c <SDMMC_CmdStopTransfer+0x40>)
 8006968:	210c      	movs	r1, #12
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f956 	bl	8006c1c <SDMMC_GetCmdResp1>
 8006970:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006972:	69fb      	ldr	r3, [r7, #28]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3720      	adds	r7, #32
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	05f5e100 	.word	0x05f5e100

08006980 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b08a      	sub	sp, #40	; 0x28
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006990:	2307      	movs	r3, #7
 8006992:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006994:	2340      	movs	r3, #64	; 0x40
 8006996:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006998:	2300      	movs	r3, #0
 800699a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800699c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069a0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069a2:	f107 0310 	add.w	r3, r7, #16
 80069a6:	4619      	mov	r1, r3
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f7ff fea7 	bl	80066fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80069ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b2:	2107      	movs	r1, #7
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 f931 	bl	8006c1c <SDMMC_GetCmdResp1>
 80069ba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3728      	adds	r7, #40	; 0x28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b088      	sub	sp, #32
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80069d2:	2300      	movs	r3, #0
 80069d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80069d6:	2300      	movs	r3, #0
 80069d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069da:	2300      	movs	r3, #0
 80069dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069e4:	f107 0308 	add.w	r3, r7, #8
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff fe86 	bl	80066fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f8eb 	bl	8006bcc <SDMMC_GetCmdError>
 80069f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069f8:	69fb      	ldr	r3, [r7, #28]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3720      	adds	r7, #32
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b088      	sub	sp, #32
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006a0a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006a0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006a10:	2308      	movs	r3, #8
 8006a12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a14:	2340      	movs	r3, #64	; 0x40
 8006a16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a22:	f107 0308 	add.w	r3, r7, #8
 8006a26:	4619      	mov	r1, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff fe67 	bl	80066fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fad4 	bl	8006fdc <SDMMC_GetCmdResp7>
 8006a34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a36:	69fb      	ldr	r3, [r7, #28]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3720      	adds	r7, #32
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b088      	sub	sp, #32
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006a4e:	2337      	movs	r3, #55	; 0x37
 8006a50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a52:	2340      	movs	r3, #64	; 0x40
 8006a54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a60:	f107 0308 	add.w	r3, r7, #8
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff fe48 	bl	80066fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a70:	2137      	movs	r1, #55	; 0x37
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f8d2 	bl	8006c1c <SDMMC_GetCmdResp1>
 8006a78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a7a:	69fb      	ldr	r3, [r7, #28]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3720      	adds	r7, #32
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b088      	sub	sp, #32
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006a9a:	2329      	movs	r3, #41	; 0x29
 8006a9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a9e:	2340      	movs	r3, #64	; 0x40
 8006aa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006aac:	f107 0308 	add.w	r3, r7, #8
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7ff fe22 	bl	80066fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f9e1 	bl	8006e80 <SDMMC_GetCmdResp3>
 8006abe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ac0:	69fb      	ldr	r3, [r7, #28]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3720      	adds	r7, #32
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b088      	sub	sp, #32
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006ada:	23c0      	movs	r3, #192	; 0xc0
 8006adc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ae6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ae8:	f107 0308 	add.w	r3, r7, #8
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7ff fe04 	bl	80066fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f97d 	bl	8006df4 <SDMMC_GetCmdResp2>
 8006afa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006afc:	69fb      	ldr	r3, [r7, #28]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3720      	adds	r7, #32
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b088      	sub	sp, #32
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006b14:	2309      	movs	r3, #9
 8006b16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006b18:	23c0      	movs	r3, #192	; 0xc0
 8006b1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b26:	f107 0308 	add.w	r3, r7, #8
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff fde5 	bl	80066fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f95e 	bl	8006df4 <SDMMC_GetCmdResp2>
 8006b38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b3a:	69fb      	ldr	r3, [r7, #28]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3720      	adds	r7, #32
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b088      	sub	sp, #32
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006b52:	2303      	movs	r3, #3
 8006b54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b56:	2340      	movs	r3, #64	; 0x40
 8006b58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b64:	f107 0308 	add.w	r3, r7, #8
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7ff fdc6 	bl	80066fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	2103      	movs	r1, #3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f9bd 	bl	8006ef4 <SDMMC_GetCmdResp6>
 8006b7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b7c:	69fb      	ldr	r3, [r7, #28]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3720      	adds	r7, #32
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b088      	sub	sp, #32
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006b94:	230d      	movs	r3, #13
 8006b96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b98:	2340      	movs	r3, #64	; 0x40
 8006b9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ba4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ba6:	f107 0308 	add.w	r3, r7, #8
 8006baa:	4619      	mov	r1, r3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7ff fda5 	bl	80066fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bb6:	210d      	movs	r1, #13
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f82f 	bl	8006c1c <SDMMC_GetCmdResp1>
 8006bbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bc0:	69fb      	ldr	r3, [r7, #28]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3720      	adds	r7, #32
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
	...

08006bcc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006bcc:	b490      	push	{r4, r7}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006bd4:	4b0f      	ldr	r3, [pc, #60]	; (8006c14 <SDMMC_GetCmdError+0x48>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a0f      	ldr	r2, [pc, #60]	; (8006c18 <SDMMC_GetCmdError+0x4c>)
 8006bda:	fba2 2303 	umull	r2, r3, r2, r3
 8006bde:	0a5b      	lsrs	r3, r3, #9
 8006be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006be4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006be8:	4623      	mov	r3, r4
 8006bea:	1e5c      	subs	r4, r3, #1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d102      	bne.n	8006bf6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006bf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006bf4:	e009      	b.n	8006c0a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0f2      	beq.n	8006be8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	22c5      	movs	r2, #197	; 0xc5
 8006c06:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bc90      	pop	{r4, r7}
 8006c12:	4770      	bx	lr
 8006c14:	2000001c 	.word	0x2000001c
 8006c18:	10624dd3 	.word	0x10624dd3

08006c1c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006c1c:	b590      	push	{r4, r7, lr}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	460b      	mov	r3, r1
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006c2a:	4b6f      	ldr	r3, [pc, #444]	; (8006de8 <SDMMC_GetCmdResp1+0x1cc>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a6f      	ldr	r2, [pc, #444]	; (8006dec <SDMMC_GetCmdResp1+0x1d0>)
 8006c30:	fba2 2303 	umull	r2, r3, r2, r3
 8006c34:	0a5b      	lsrs	r3, r3, #9
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006c3c:	4623      	mov	r3, r4
 8006c3e:	1e5c      	subs	r4, r3, #1
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c48:	e0c9      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c4e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0f0      	beq.n	8006c3c <SDMMC_GetCmdResp1+0x20>
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1eb      	bne.n	8006c3c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d004      	beq.n	8006c7a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2204      	movs	r2, #4
 8006c74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c76:	2304      	movs	r3, #4
 8006c78:	e0b1      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d004      	beq.n	8006c90 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e0a6      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	22c5      	movs	r2, #197	; 0xc5
 8006c94:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f7ff fd5a 	bl	8006750 <SDIO_GetCommandResponse>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	7afb      	ldrb	r3, [r7, #11]
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d001      	beq.n	8006caa <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e099      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006caa:	2100      	movs	r1, #0
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f7ff fd5c 	bl	800676a <SDIO_GetResponse>
 8006cb2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	4b4e      	ldr	r3, [pc, #312]	; (8006df0 <SDMMC_GetCmdResp1+0x1d4>)
 8006cb8:	4013      	ands	r3, r2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e08d      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	da02      	bge.n	8006cce <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006cc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ccc:	e087      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006cd8:	2340      	movs	r3, #64	; 0x40
 8006cda:	e080      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006ce6:	2380      	movs	r3, #128	; 0x80
 8006ce8:	e079      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cf8:	e071      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d08:	e069      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d18:	e061      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006d24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d28:	e059      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d38:	e051      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006d44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d48:	e049      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006d54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d58:	e041      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006d64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d68:	e039      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006d74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d78:	e031      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006d84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006d88:	e029      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006d94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006d98:	e021      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006da4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006da8:	e019      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006db4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006db8:	e011      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006dc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006dc8:	e009      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f003 0308 	and.w	r3, r3, #8
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006dd4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006dd8:	e001      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006dda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd90      	pop	{r4, r7, pc}
 8006de6:	bf00      	nop
 8006de8:	2000001c 	.word	0x2000001c
 8006dec:	10624dd3 	.word	0x10624dd3
 8006df0:	fdffe008 	.word	0xfdffe008

08006df4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006df4:	b490      	push	{r4, r7}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006dfc:	4b1e      	ldr	r3, [pc, #120]	; (8006e78 <SDMMC_GetCmdResp2+0x84>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a1e      	ldr	r2, [pc, #120]	; (8006e7c <SDMMC_GetCmdResp2+0x88>)
 8006e02:	fba2 2303 	umull	r2, r3, r2, r3
 8006e06:	0a5b      	lsrs	r3, r3, #9
 8006e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e0c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006e10:	4623      	mov	r3, r4
 8006e12:	1e5c      	subs	r4, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d102      	bne.n	8006e1e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e1c:	e026      	b.n	8006e6c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e22:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d0f0      	beq.n	8006e10 <SDMMC_GetCmdResp2+0x1c>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1eb      	bne.n	8006e10 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d004      	beq.n	8006e4e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2204      	movs	r2, #4
 8006e48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e4a:	2304      	movs	r3, #4
 8006e4c:	e00e      	b.n	8006e6c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d004      	beq.n	8006e64 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e003      	b.n	8006e6c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	22c5      	movs	r2, #197	; 0xc5
 8006e68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bc90      	pop	{r4, r7}
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	2000001c 	.word	0x2000001c
 8006e7c:	10624dd3 	.word	0x10624dd3

08006e80 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006e80:	b490      	push	{r4, r7}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e88:	4b18      	ldr	r3, [pc, #96]	; (8006eec <SDMMC_GetCmdResp3+0x6c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a18      	ldr	r2, [pc, #96]	; (8006ef0 <SDMMC_GetCmdResp3+0x70>)
 8006e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e92:	0a5b      	lsrs	r3, r3, #9
 8006e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e98:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006e9c:	4623      	mov	r3, r4
 8006e9e:	1e5c      	subs	r4, r3, #1
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d102      	bne.n	8006eaa <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ea4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ea8:	e01b      	b.n	8006ee2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0f0      	beq.n	8006e9c <SDMMC_GetCmdResp3+0x1c>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1eb      	bne.n	8006e9c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec8:	f003 0304 	and.w	r3, r3, #4
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d004      	beq.n	8006eda <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2204      	movs	r2, #4
 8006ed4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ed6:	2304      	movs	r3, #4
 8006ed8:	e003      	b.n	8006ee2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	22c5      	movs	r2, #197	; 0xc5
 8006ede:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bc90      	pop	{r4, r7}
 8006eea:	4770      	bx	lr
 8006eec:	2000001c 	.word	0x2000001c
 8006ef0:	10624dd3 	.word	0x10624dd3

08006ef4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006ef4:	b590      	push	{r4, r7, lr}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	460b      	mov	r3, r1
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f02:	4b34      	ldr	r3, [pc, #208]	; (8006fd4 <SDMMC_GetCmdResp6+0xe0>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a34      	ldr	r2, [pc, #208]	; (8006fd8 <SDMMC_GetCmdResp6+0xe4>)
 8006f08:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0c:	0a5b      	lsrs	r3, r3, #9
 8006f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f12:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006f16:	4623      	mov	r3, r4
 8006f18:	1e5c      	subs	r4, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d102      	bne.n	8006f24 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f1e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f22:	e052      	b.n	8006fca <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f28:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d0f0      	beq.n	8006f16 <SDMMC_GetCmdResp6+0x22>
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1eb      	bne.n	8006f16 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f42:	f003 0304 	and.w	r3, r3, #4
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d004      	beq.n	8006f54 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2204      	movs	r2, #4
 8006f4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f50:	2304      	movs	r3, #4
 8006f52:	e03a      	b.n	8006fca <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d004      	beq.n	8006f6a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2201      	movs	r2, #1
 8006f64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e02f      	b.n	8006fca <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f7ff fbf0 	bl	8006750 <SDIO_GetCommandResponse>
 8006f70:	4603      	mov	r3, r0
 8006f72:	461a      	mov	r2, r3
 8006f74:	7afb      	ldrb	r3, [r7, #11]
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d001      	beq.n	8006f7e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e025      	b.n	8006fca <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	22c5      	movs	r2, #197	; 0xc5
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006f84:	2100      	movs	r1, #0
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f7ff fbef 	bl	800676a <SDIO_GetResponse>
 8006f8c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d106      	bne.n	8006fa6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	0c1b      	lsrs	r3, r3, #16
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	e011      	b.n	8006fca <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006fb4:	e009      	b.n	8006fca <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fc4:	e001      	b.n	8006fca <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	371c      	adds	r7, #28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd90      	pop	{r4, r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	2000001c 	.word	0x2000001c
 8006fd8:	10624dd3 	.word	0x10624dd3

08006fdc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006fdc:	b490      	push	{r4, r7}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006fe4:	4b21      	ldr	r3, [pc, #132]	; (800706c <SDMMC_GetCmdResp7+0x90>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a21      	ldr	r2, [pc, #132]	; (8007070 <SDMMC_GetCmdResp7+0x94>)
 8006fea:	fba2 2303 	umull	r2, r3, r2, r3
 8006fee:	0a5b      	lsrs	r3, r3, #9
 8006ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006ff8:	4623      	mov	r3, r4
 8006ffa:	1e5c      	subs	r4, r3, #1
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d102      	bne.n	8007006 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007000:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007004:	e02c      	b.n	8007060 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800700a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0f0      	beq.n	8006ff8 <SDMMC_GetCmdResp7+0x1c>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1eb      	bne.n	8006ff8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b00      	cmp	r3, #0
 800702a:	d004      	beq.n	8007036 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2204      	movs	r2, #4
 8007030:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007032:	2304      	movs	r3, #4
 8007034:	e014      	b.n	8007060 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	d004      	beq.n	800704c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007048:	2301      	movs	r3, #1
 800704a:	e009      	b.n	8007060 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2240      	movs	r2, #64	; 0x40
 800705c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800705e:	2300      	movs	r3, #0
  
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bc90      	pop	{r4, r7}
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	2000001c 	.word	0x2000001c
 8007070:	10624dd3 	.word	0x10624dd3

08007074 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007078:	4904      	ldr	r1, [pc, #16]	; (800708c <MX_FATFS_Init+0x18>)
 800707a:	4805      	ldr	r0, [pc, #20]	; (8007090 <MX_FATFS_Init+0x1c>)
 800707c:	f003 f8c4 	bl	800a208 <FATFS_LinkDriver>
 8007080:	4603      	mov	r3, r0
 8007082:	461a      	mov	r2, r3
 8007084:	4b03      	ldr	r3, [pc, #12]	; (8007094 <MX_FATFS_Init+0x20>)
 8007086:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007088:	bf00      	nop
 800708a:	bd80      	pop	{r7, pc}
 800708c:	20004f4c 	.word	0x20004f4c
 8007090:	0800b174 	.word	0x0800b174
 8007094:	20004f48 	.word	0x20004f48

08007098 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800709c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800709e:	4618      	mov	r0, r3
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80070b2:	f000 f86b 	bl	800718c <BSP_SD_IsDetected>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d001      	beq.n	80070c0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e005      	b.n	80070cc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80070c0:	4804      	ldr	r0, [pc, #16]	; (80070d4 <BSP_SD_Init+0x2c>)
 80070c2:	f7fd fdeb 	bl	8004c9c <HAL_SD_Init>
 80070c6:	4603      	mov	r3, r0
 80070c8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80070ca:	79fb      	ldrb	r3, [r7, #7]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	200035fc 	.word	0x200035fc

080070d8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b088      	sub	sp, #32
 80070dc:	af02      	add	r7, sp, #8
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
 80070e4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80070e6:	2300      	movs	r3, #0
 80070e8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	68f9      	ldr	r1, [r7, #12]
 80070f4:	4806      	ldr	r0, [pc, #24]	; (8007110 <BSP_SD_ReadBlocks+0x38>)
 80070f6:	f7fd fe61 	bl	8004dbc <HAL_SD_ReadBlocks>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8007104:	7dfb      	ldrb	r3, [r7, #23]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	200035fc 	.word	0x200035fc

08007114 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af02      	add	r7, sp, #8
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	9300      	str	r3, [sp, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	68f9      	ldr	r1, [r7, #12]
 8007130:	4806      	ldr	r0, [pc, #24]	; (800714c <BSP_SD_WriteBlocks+0x38>)
 8007132:	f7fe f83b 	bl	80051ac <HAL_SD_WriteBlocks>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d001      	beq.n	8007140 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8007140:	7dfb      	ldrb	r3, [r7, #23]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	200035fc 	.word	0x200035fc

08007150 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007154:	4805      	ldr	r0, [pc, #20]	; (800716c <BSP_SD_GetCardState+0x1c>)
 8007156:	f7fe fb99 	bl	800588c <HAL_SD_GetCardState>
 800715a:	4603      	mov	r3, r0
 800715c:	2b04      	cmp	r3, #4
 800715e:	bf14      	ite	ne
 8007160:	2301      	movne	r3, #1
 8007162:	2300      	moveq	r3, #0
 8007164:	b2db      	uxtb	r3, r3
}
 8007166:	4618      	mov	r0, r3
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	200035fc 	.word	0x200035fc

08007170 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007178:	6879      	ldr	r1, [r7, #4]
 800717a:	4803      	ldr	r0, [pc, #12]	; (8007188 <BSP_SD_GetCardInfo+0x18>)
 800717c:	f7fe fb5a 	bl	8005834 <HAL_SD_GetCardInfo>
}
 8007180:	bf00      	nop
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	200035fc 	.word	0x200035fc

0800718c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007192:	2301      	movs	r3, #1
 8007194:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8007196:	f000 f80b 	bl	80071b0 <BSP_PlatformIsDetected>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80071a0:	2300      	movs	r3, #0
 80071a2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	b2db      	uxtb	r3, r3
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80071b6:	2301      	movs	r3, #1
 80071b8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80071ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80071be:	4806      	ldr	r0, [pc, #24]	; (80071d8 <BSP_PlatformIsDetected+0x28>)
 80071c0:	f7fc fdde 	bl	8003d80 <HAL_GPIO_ReadPin>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80071ca:	2300      	movs	r3, #0
 80071cc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 80071ce:	79fb      	ldrb	r3, [r7, #7]
}  
 80071d0:	4618      	mov	r0, r3
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	40021400 	.word	0x40021400

080071dc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	4603      	mov	r3, r0
 80071e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80071e6:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <SD_CheckStatus+0x38>)
 80071e8:	2201      	movs	r2, #1
 80071ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80071ec:	f7ff ffb0 	bl	8007150 <BSP_SD_GetCardState>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d107      	bne.n	8007206 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80071f6:	4b07      	ldr	r3, [pc, #28]	; (8007214 <SD_CheckStatus+0x38>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	f023 0301 	bic.w	r3, r3, #1
 8007200:	b2da      	uxtb	r2, r3
 8007202:	4b04      	ldr	r3, [pc, #16]	; (8007214 <SD_CheckStatus+0x38>)
 8007204:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007206:	4b03      	ldr	r3, [pc, #12]	; (8007214 <SD_CheckStatus+0x38>)
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	b2db      	uxtb	r3, r3
}
 800720c:	4618      	mov	r0, r3
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	20000025 	.word	0x20000025

08007218 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	4603      	mov	r3, r0
 8007220:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8007222:	4b0b      	ldr	r3, [pc, #44]	; (8007250 <SD_initialize+0x38>)
 8007224:	2201      	movs	r2, #1
 8007226:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007228:	f7ff ff3e 	bl	80070a8 <BSP_SD_Init>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d107      	bne.n	8007242 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007232:	79fb      	ldrb	r3, [r7, #7]
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff ffd1 	bl	80071dc <SD_CheckStatus>
 800723a:	4603      	mov	r3, r0
 800723c:	461a      	mov	r2, r3
 800723e:	4b04      	ldr	r3, [pc, #16]	; (8007250 <SD_initialize+0x38>)
 8007240:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007242:	4b03      	ldr	r3, [pc, #12]	; (8007250 <SD_initialize+0x38>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	b2db      	uxtb	r3, r3
}
 8007248:	4618      	mov	r0, r3
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20000025 	.word	0x20000025

08007254 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	4603      	mov	r3, r0
 800725c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800725e:	79fb      	ldrb	r3, [r7, #7]
 8007260:	4618      	mov	r0, r3
 8007262:	f7ff ffbb 	bl	80071dc <SD_CheckStatus>
 8007266:	4603      	mov	r3, r0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	607a      	str	r2, [r7, #4]
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	4603      	mov	r3, r0
 800727e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007284:	f04f 33ff 	mov.w	r3, #4294967295
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	6879      	ldr	r1, [r7, #4]
 800728c:	68b8      	ldr	r0, [r7, #8]
 800728e:	f7ff ff23 	bl	80070d8 <BSP_SD_ReadBlocks>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d107      	bne.n	80072a8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007298:	bf00      	nop
 800729a:	f7ff ff59 	bl	8007150 <BSP_SD_GetCardState>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1fa      	bne.n	800729a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b086      	sub	sp, #24
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	603b      	str	r3, [r7, #0]
 80072be:	4603      	mov	r3, r0
 80072c0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80072c6:	f04f 33ff 	mov.w	r3, #4294967295
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	6879      	ldr	r1, [r7, #4]
 80072ce:	68b8      	ldr	r0, [r7, #8]
 80072d0:	f7ff ff20 	bl	8007114 <BSP_SD_WriteBlocks>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d107      	bne.n	80072ea <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80072da:	bf00      	nop
 80072dc:	f7ff ff38 	bl	8007150 <BSP_SD_GetCardState>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1fa      	bne.n	80072dc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80072ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3718      	adds	r7, #24
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b08c      	sub	sp, #48	; 0x30
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	4603      	mov	r3, r0
 80072fc:	603a      	str	r2, [r7, #0]
 80072fe:	71fb      	strb	r3, [r7, #7]
 8007300:	460b      	mov	r3, r1
 8007302:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800730a:	4b25      	ldr	r3, [pc, #148]	; (80073a0 <SD_ioctl+0xac>)
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	b2db      	uxtb	r3, r3
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <SD_ioctl+0x28>
 8007318:	2303      	movs	r3, #3
 800731a:	e03c      	b.n	8007396 <SD_ioctl+0xa2>

  switch (cmd)
 800731c:	79bb      	ldrb	r3, [r7, #6]
 800731e:	2b03      	cmp	r3, #3
 8007320:	d834      	bhi.n	800738c <SD_ioctl+0x98>
 8007322:	a201      	add	r2, pc, #4	; (adr r2, 8007328 <SD_ioctl+0x34>)
 8007324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007328:	08007339 	.word	0x08007339
 800732c:	08007341 	.word	0x08007341
 8007330:	08007359 	.word	0x08007359
 8007334:	08007373 	.word	0x08007373
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800733e:	e028      	b.n	8007392 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007340:	f107 030c 	add.w	r3, r7, #12
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff ff13 	bl	8007170 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800734a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007356:	e01c      	b.n	8007392 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007358:	f107 030c 	add.w	r3, r7, #12
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff ff07 	bl	8007170 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007364:	b29a      	uxth	r2, r3
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007370:	e00f      	b.n	8007392 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007372:	f107 030c 	add.w	r3, r7, #12
 8007376:	4618      	mov	r0, r3
 8007378:	f7ff fefa 	bl	8007170 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737e:	0a5a      	lsrs	r2, r3, #9
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007384:	2300      	movs	r3, #0
 8007386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800738a:	e002      	b.n	8007392 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800738c:	2304      	movs	r3, #4
 800738e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007392:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007396:	4618      	mov	r0, r3
 8007398:	3730      	adds	r7, #48	; 0x30
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	20000025 	.word	0x20000025

080073a4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	4603      	mov	r3, r0
 80073ac:	6039      	str	r1, [r7, #0]
 80073ae:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80073b0:	88fb      	ldrh	r3, [r7, #6]
 80073b2:	2b7f      	cmp	r3, #127	; 0x7f
 80073b4:	d802      	bhi.n	80073bc <ff_convert+0x18>
		c = chr;
 80073b6:	88fb      	ldrh	r3, [r7, #6]
 80073b8:	81fb      	strh	r3, [r7, #14]
 80073ba:	e025      	b.n	8007408 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00b      	beq.n	80073da <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80073c2:	88fb      	ldrh	r3, [r7, #6]
 80073c4:	2bff      	cmp	r3, #255	; 0xff
 80073c6:	d805      	bhi.n	80073d4 <ff_convert+0x30>
 80073c8:	88fb      	ldrh	r3, [r7, #6]
 80073ca:	3b80      	subs	r3, #128	; 0x80
 80073cc:	4a12      	ldr	r2, [pc, #72]	; (8007418 <ff_convert+0x74>)
 80073ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073d2:	e000      	b.n	80073d6 <ff_convert+0x32>
 80073d4:	2300      	movs	r3, #0
 80073d6:	81fb      	strh	r3, [r7, #14]
 80073d8:	e016      	b.n	8007408 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80073da:	2300      	movs	r3, #0
 80073dc:	81fb      	strh	r3, [r7, #14]
 80073de:	e009      	b.n	80073f4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80073e0:	89fb      	ldrh	r3, [r7, #14]
 80073e2:	4a0d      	ldr	r2, [pc, #52]	; (8007418 <ff_convert+0x74>)
 80073e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073e8:	88fa      	ldrh	r2, [r7, #6]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d006      	beq.n	80073fc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80073ee:	89fb      	ldrh	r3, [r7, #14]
 80073f0:	3301      	adds	r3, #1
 80073f2:	81fb      	strh	r3, [r7, #14]
 80073f4:	89fb      	ldrh	r3, [r7, #14]
 80073f6:	2b7f      	cmp	r3, #127	; 0x7f
 80073f8:	d9f2      	bls.n	80073e0 <ff_convert+0x3c>
 80073fa:	e000      	b.n	80073fe <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80073fc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80073fe:	89fb      	ldrh	r3, [r7, #14]
 8007400:	3380      	adds	r3, #128	; 0x80
 8007402:	b29b      	uxth	r3, r3
 8007404:	b2db      	uxtb	r3, r3
 8007406:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007408:	89fb      	ldrh	r3, [r7, #14]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	0800b188 	.word	0x0800b188

0800741c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007426:	88fb      	ldrh	r3, [r7, #6]
 8007428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800742c:	d201      	bcs.n	8007432 <ff_wtoupper+0x16>
 800742e:	4b3e      	ldr	r3, [pc, #248]	; (8007528 <ff_wtoupper+0x10c>)
 8007430:	e000      	b.n	8007434 <ff_wtoupper+0x18>
 8007432:	4b3e      	ldr	r3, [pc, #248]	; (800752c <ff_wtoupper+0x110>)
 8007434:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	1c9a      	adds	r2, r3, #2
 800743a:	617a      	str	r2, [r7, #20]
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007440:	8a7b      	ldrh	r3, [r7, #18]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d068      	beq.n	8007518 <ff_wtoupper+0xfc>
 8007446:	88fa      	ldrh	r2, [r7, #6]
 8007448:	8a7b      	ldrh	r3, [r7, #18]
 800744a:	429a      	cmp	r2, r3
 800744c:	d364      	bcc.n	8007518 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	1c9a      	adds	r2, r3, #2
 8007452:	617a      	str	r2, [r7, #20]
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	823b      	strh	r3, [r7, #16]
 8007458:	8a3b      	ldrh	r3, [r7, #16]
 800745a:	0a1b      	lsrs	r3, r3, #8
 800745c:	81fb      	strh	r3, [r7, #14]
 800745e:	8a3b      	ldrh	r3, [r7, #16]
 8007460:	b2db      	uxtb	r3, r3
 8007462:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007464:	88fa      	ldrh	r2, [r7, #6]
 8007466:	8a79      	ldrh	r1, [r7, #18]
 8007468:	8a3b      	ldrh	r3, [r7, #16]
 800746a:	440b      	add	r3, r1
 800746c:	429a      	cmp	r2, r3
 800746e:	da49      	bge.n	8007504 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007470:	89fb      	ldrh	r3, [r7, #14]
 8007472:	2b08      	cmp	r3, #8
 8007474:	d84f      	bhi.n	8007516 <ff_wtoupper+0xfa>
 8007476:	a201      	add	r2, pc, #4	; (adr r2, 800747c <ff_wtoupper+0x60>)
 8007478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747c:	080074a1 	.word	0x080074a1
 8007480:	080074b3 	.word	0x080074b3
 8007484:	080074c9 	.word	0x080074c9
 8007488:	080074d1 	.word	0x080074d1
 800748c:	080074d9 	.word	0x080074d9
 8007490:	080074e1 	.word	0x080074e1
 8007494:	080074e9 	.word	0x080074e9
 8007498:	080074f1 	.word	0x080074f1
 800749c:	080074f9 	.word	0x080074f9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80074a0:	88fa      	ldrh	r2, [r7, #6]
 80074a2:	8a7b      	ldrh	r3, [r7, #18]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	4413      	add	r3, r2
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	80fb      	strh	r3, [r7, #6]
 80074b0:	e027      	b.n	8007502 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80074b2:	88fa      	ldrh	r2, [r7, #6]
 80074b4:	8a7b      	ldrh	r3, [r7, #18]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	b29b      	uxth	r3, r3
 80074c0:	88fa      	ldrh	r2, [r7, #6]
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	80fb      	strh	r3, [r7, #6]
 80074c6:	e01c      	b.n	8007502 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80074c8:	88fb      	ldrh	r3, [r7, #6]
 80074ca:	3b10      	subs	r3, #16
 80074cc:	80fb      	strh	r3, [r7, #6]
 80074ce:	e018      	b.n	8007502 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80074d0:	88fb      	ldrh	r3, [r7, #6]
 80074d2:	3b20      	subs	r3, #32
 80074d4:	80fb      	strh	r3, [r7, #6]
 80074d6:	e014      	b.n	8007502 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80074d8:	88fb      	ldrh	r3, [r7, #6]
 80074da:	3b30      	subs	r3, #48	; 0x30
 80074dc:	80fb      	strh	r3, [r7, #6]
 80074de:	e010      	b.n	8007502 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80074e0:	88fb      	ldrh	r3, [r7, #6]
 80074e2:	3b1a      	subs	r3, #26
 80074e4:	80fb      	strh	r3, [r7, #6]
 80074e6:	e00c      	b.n	8007502 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80074e8:	88fb      	ldrh	r3, [r7, #6]
 80074ea:	3308      	adds	r3, #8
 80074ec:	80fb      	strh	r3, [r7, #6]
 80074ee:	e008      	b.n	8007502 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80074f0:	88fb      	ldrh	r3, [r7, #6]
 80074f2:	3b50      	subs	r3, #80	; 0x50
 80074f4:	80fb      	strh	r3, [r7, #6]
 80074f6:	e004      	b.n	8007502 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80074f8:	88fb      	ldrh	r3, [r7, #6]
 80074fa:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80074fe:	80fb      	strh	r3, [r7, #6]
 8007500:	bf00      	nop
			}
			break;
 8007502:	e008      	b.n	8007516 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007504:	89fb      	ldrh	r3, [r7, #14]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d195      	bne.n	8007436 <ff_wtoupper+0x1a>
 800750a:	8a3b      	ldrh	r3, [r7, #16]
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	4413      	add	r3, r2
 8007512:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007514:	e78f      	b.n	8007436 <ff_wtoupper+0x1a>
			break;
 8007516:	bf00      	nop
	}

	return chr;
 8007518:	88fb      	ldrh	r3, [r7, #6]
}
 800751a:	4618      	mov	r0, r3
 800751c:	371c      	adds	r7, #28
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	0800b288 	.word	0x0800b288
 800752c:	0800b47c 	.word	0x0800b47c

08007530 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	4603      	mov	r3, r0
 8007538:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800753a:	79fb      	ldrb	r3, [r7, #7]
 800753c:	4a08      	ldr	r2, [pc, #32]	; (8007560 <disk_status+0x30>)
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	79fa      	ldrb	r2, [r7, #7]
 8007548:	4905      	ldr	r1, [pc, #20]	; (8007560 <disk_status+0x30>)
 800754a:	440a      	add	r2, r1
 800754c:	7a12      	ldrb	r2, [r2, #8]
 800754e:	4610      	mov	r0, r2
 8007550:	4798      	blx	r3
 8007552:	4603      	mov	r3, r0
 8007554:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007556:	7bfb      	ldrb	r3, [r7, #15]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	20000340 	.word	0x20000340

08007564 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	4603      	mov	r3, r0
 800756c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	4a0d      	ldr	r2, [pc, #52]	; (80075ac <disk_initialize+0x48>)
 8007576:	5cd3      	ldrb	r3, [r2, r3]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d111      	bne.n	80075a0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800757c:	79fb      	ldrb	r3, [r7, #7]
 800757e:	4a0b      	ldr	r2, [pc, #44]	; (80075ac <disk_initialize+0x48>)
 8007580:	2101      	movs	r1, #1
 8007582:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007584:	79fb      	ldrb	r3, [r7, #7]
 8007586:	4a09      	ldr	r2, [pc, #36]	; (80075ac <disk_initialize+0x48>)
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4413      	add	r3, r2
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	79fa      	ldrb	r2, [r7, #7]
 8007592:	4906      	ldr	r1, [pc, #24]	; (80075ac <disk_initialize+0x48>)
 8007594:	440a      	add	r2, r1
 8007596:	7a12      	ldrb	r2, [r2, #8]
 8007598:	4610      	mov	r0, r2
 800759a:	4798      	blx	r3
 800759c:	4603      	mov	r3, r0
 800759e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20000340 	.word	0x20000340

080075b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80075b0:	b590      	push	{r4, r7, lr}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60b9      	str	r1, [r7, #8]
 80075b8:	607a      	str	r2, [r7, #4]
 80075ba:	603b      	str	r3, [r7, #0]
 80075bc:	4603      	mov	r3, r0
 80075be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	4a0a      	ldr	r2, [pc, #40]	; (80075ec <disk_read+0x3c>)
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	689c      	ldr	r4, [r3, #8]
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
 80075ce:	4a07      	ldr	r2, [pc, #28]	; (80075ec <disk_read+0x3c>)
 80075d0:	4413      	add	r3, r2
 80075d2:	7a18      	ldrb	r0, [r3, #8]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	68b9      	ldr	r1, [r7, #8]
 80075da:	47a0      	blx	r4
 80075dc:	4603      	mov	r3, r0
 80075de:	75fb      	strb	r3, [r7, #23]
  return res;
 80075e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	371c      	adds	r7, #28
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd90      	pop	{r4, r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20000340 	.word	0x20000340

080075f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80075f0:	b590      	push	{r4, r7, lr}
 80075f2:	b087      	sub	sp, #28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60b9      	str	r1, [r7, #8]
 80075f8:	607a      	str	r2, [r7, #4]
 80075fa:	603b      	str	r3, [r7, #0]
 80075fc:	4603      	mov	r3, r0
 80075fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007600:	7bfb      	ldrb	r3, [r7, #15]
 8007602:	4a0a      	ldr	r2, [pc, #40]	; (800762c <disk_write+0x3c>)
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	68dc      	ldr	r4, [r3, #12]
 800760c:	7bfb      	ldrb	r3, [r7, #15]
 800760e:	4a07      	ldr	r2, [pc, #28]	; (800762c <disk_write+0x3c>)
 8007610:	4413      	add	r3, r2
 8007612:	7a18      	ldrb	r0, [r3, #8]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	68b9      	ldr	r1, [r7, #8]
 800761a:	47a0      	blx	r4
 800761c:	4603      	mov	r3, r0
 800761e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007620:	7dfb      	ldrb	r3, [r7, #23]
}
 8007622:	4618      	mov	r0, r3
 8007624:	371c      	adds	r7, #28
 8007626:	46bd      	mov	sp, r7
 8007628:	bd90      	pop	{r4, r7, pc}
 800762a:	bf00      	nop
 800762c:	20000340 	.word	0x20000340

08007630 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	4603      	mov	r3, r0
 8007638:	603a      	str	r2, [r7, #0]
 800763a:	71fb      	strb	r3, [r7, #7]
 800763c:	460b      	mov	r3, r1
 800763e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007640:	79fb      	ldrb	r3, [r7, #7]
 8007642:	4a09      	ldr	r2, [pc, #36]	; (8007668 <disk_ioctl+0x38>)
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	79fa      	ldrb	r2, [r7, #7]
 800764e:	4906      	ldr	r1, [pc, #24]	; (8007668 <disk_ioctl+0x38>)
 8007650:	440a      	add	r2, r1
 8007652:	7a10      	ldrb	r0, [r2, #8]
 8007654:	79b9      	ldrb	r1, [r7, #6]
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	4798      	blx	r3
 800765a:	4603      	mov	r3, r0
 800765c:	73fb      	strb	r3, [r7, #15]
  return res;
 800765e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	20000340 	.word	0x20000340

0800766c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3301      	adds	r3, #1
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800767c:	89fb      	ldrh	r3, [r7, #14]
 800767e:	021b      	lsls	r3, r3, #8
 8007680:	b21a      	sxth	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	b21b      	sxth	r3, r3
 8007688:	4313      	orrs	r3, r2
 800768a:	b21b      	sxth	r3, r3
 800768c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800768e:	89fb      	ldrh	r3, [r7, #14]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	3303      	adds	r3, #3
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	021b      	lsls	r3, r3, #8
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	3202      	adds	r2, #2
 80076b4:	7812      	ldrb	r2, [r2, #0]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	021b      	lsls	r3, r3, #8
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	3201      	adds	r2, #1
 80076c2:	7812      	ldrb	r2, [r2, #0]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	021b      	lsls	r3, r3, #8
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	7812      	ldrb	r2, [r2, #0]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]
	return rv;
 80076d4:	68fb      	ldr	r3, [r7, #12]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	460b      	mov	r3, r1
 80076ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	887a      	ldrh	r2, [r7, #2]
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	701a      	strb	r2, [r3, #0]
 80076fa:	887b      	ldrh	r3, [r7, #2]
 80076fc:	0a1b      	lsrs	r3, r3, #8
 80076fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	607a      	str	r2, [r7, #4]
 8007706:	887a      	ldrh	r2, [r7, #2]
 8007708:	b2d2      	uxtb	r2, r2
 800770a:	701a      	strb	r2, [r3, #0]
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	607a      	str	r2, [r7, #4]
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	b2d2      	uxtb	r2, r2
 800772c:	701a      	strb	r2, [r3, #0]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	0a1b      	lsrs	r3, r3, #8
 8007732:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	607a      	str	r2, [r7, #4]
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	b2d2      	uxtb	r2, r2
 800773e:	701a      	strb	r2, [r3, #0]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	0a1b      	lsrs	r3, r3, #8
 8007744:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	1c5a      	adds	r2, r3, #1
 800774a:	607a      	str	r2, [r7, #4]
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	b2d2      	uxtb	r2, r2
 8007750:	701a      	strb	r2, [r3, #0]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	0a1b      	lsrs	r3, r3, #8
 8007756:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	607a      	str	r2, [r7, #4]
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	b2d2      	uxtb	r2, r2
 8007762:	701a      	strb	r2, [r3, #0]
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007770:	b480      	push	{r7}
 8007772:	b087      	sub	sp, #28
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00d      	beq.n	80077a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	1c53      	adds	r3, r2, #1
 800778e:	613b      	str	r3, [r7, #16]
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	1c59      	adds	r1, r3, #1
 8007794:	6179      	str	r1, [r7, #20]
 8007796:	7812      	ldrb	r2, [r2, #0]
 8007798:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	3b01      	subs	r3, #1
 800779e:	607b      	str	r3, [r7, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1f1      	bne.n	800778a <mem_cpy+0x1a>
	}
}
 80077a6:	bf00      	nop
 80077a8:	371c      	adds	r7, #28
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80077b2:	b480      	push	{r7}
 80077b4:	b087      	sub	sp, #28
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	60f8      	str	r0, [r7, #12]
 80077ba:	60b9      	str	r1, [r7, #8]
 80077bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	1c5a      	adds	r2, r3, #1
 80077c6:	617a      	str	r2, [r7, #20]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	b2d2      	uxtb	r2, r2
 80077cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	607b      	str	r3, [r7, #4]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1f3      	bne.n	80077c2 <mem_set+0x10>
}
 80077da:	bf00      	nop
 80077dc:	371c      	adds	r7, #28
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80077e6:	b480      	push	{r7}
 80077e8:	b089      	sub	sp, #36	; 0x24
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	60f8      	str	r0, [r7, #12]
 80077ee:	60b9      	str	r1, [r7, #8]
 80077f0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	61fb      	str	r3, [r7, #28]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80077fa:	2300      	movs	r3, #0
 80077fc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	61fa      	str	r2, [r7, #28]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	4619      	mov	r1, r3
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	61ba      	str	r2, [r7, #24]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	1acb      	subs	r3, r1, r3
 8007812:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3b01      	subs	r3, #1
 8007818:	607b      	str	r3, [r7, #4]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <mem_cmp+0x40>
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d0eb      	beq.n	80077fe <mem_cmp+0x18>

	return r;
 8007826:	697b      	ldr	r3, [r7, #20]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3724      	adds	r7, #36	; 0x24
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800783e:	e002      	b.n	8007846 <chk_chr+0x12>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3301      	adds	r3, #1
 8007844:	607b      	str	r3, [r7, #4]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d005      	beq.n	800785a <chk_chr+0x26>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	4293      	cmp	r3, r2
 8007858:	d1f2      	bne.n	8007840 <chk_chr+0xc>
	return *str;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	781b      	ldrb	r3, [r3, #0]
}
 800785e:	4618      	mov	r0, r3
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
	...

0800786c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007876:	2300      	movs	r3, #0
 8007878:	60bb      	str	r3, [r7, #8]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	60fb      	str	r3, [r7, #12]
 800787e:	e029      	b.n	80078d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007880:	4a27      	ldr	r2, [pc, #156]	; (8007920 <chk_lock+0xb4>)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	011b      	lsls	r3, r3, #4
 8007886:	4413      	add	r3, r2
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d01d      	beq.n	80078ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800788e:	4a24      	ldr	r2, [pc, #144]	; (8007920 <chk_lock+0xb4>)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	011b      	lsls	r3, r3, #4
 8007894:	4413      	add	r3, r2
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	429a      	cmp	r2, r3
 800789e:	d116      	bne.n	80078ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80078a0:	4a1f      	ldr	r2, [pc, #124]	; (8007920 <chk_lock+0xb4>)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	011b      	lsls	r3, r3, #4
 80078a6:	4413      	add	r3, r2
 80078a8:	3304      	adds	r3, #4
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d10c      	bne.n	80078ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80078b4:	4a1a      	ldr	r2, [pc, #104]	; (8007920 <chk_lock+0xb4>)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	011b      	lsls	r3, r3, #4
 80078ba:	4413      	add	r3, r2
 80078bc:	3308      	adds	r3, #8
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d102      	bne.n	80078ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80078c8:	e007      	b.n	80078da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80078ca:	2301      	movs	r3, #1
 80078cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	3301      	adds	r3, #1
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d9d2      	bls.n	8007880 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d109      	bne.n	80078f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d102      	bne.n	80078ec <chk_lock+0x80>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d101      	bne.n	80078f0 <chk_lock+0x84>
 80078ec:	2300      	movs	r3, #0
 80078ee:	e010      	b.n	8007912 <chk_lock+0xa6>
 80078f0:	2312      	movs	r3, #18
 80078f2:	e00e      	b.n	8007912 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d108      	bne.n	800790c <chk_lock+0xa0>
 80078fa:	4a09      	ldr	r2, [pc, #36]	; (8007920 <chk_lock+0xb4>)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	011b      	lsls	r3, r3, #4
 8007900:	4413      	add	r3, r2
 8007902:	330c      	adds	r3, #12
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800790a:	d101      	bne.n	8007910 <chk_lock+0xa4>
 800790c:	2310      	movs	r3, #16
 800790e:	e000      	b.n	8007912 <chk_lock+0xa6>
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	20000120 	.word	0x20000120

08007924 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800792a:	2300      	movs	r3, #0
 800792c:	607b      	str	r3, [r7, #4]
 800792e:	e002      	b.n	8007936 <enq_lock+0x12>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3301      	adds	r3, #1
 8007934:	607b      	str	r3, [r7, #4]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d806      	bhi.n	800794a <enq_lock+0x26>
 800793c:	4a09      	ldr	r2, [pc, #36]	; (8007964 <enq_lock+0x40>)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	011b      	lsls	r3, r3, #4
 8007942:	4413      	add	r3, r2
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1f2      	bne.n	8007930 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2b02      	cmp	r3, #2
 800794e:	bf14      	ite	ne
 8007950:	2301      	movne	r3, #1
 8007952:	2300      	moveq	r3, #0
 8007954:	b2db      	uxtb	r3, r3
}
 8007956:	4618      	mov	r0, r3
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	20000120 	.word	0x20000120

08007968 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007972:	2300      	movs	r3, #0
 8007974:	60fb      	str	r3, [r7, #12]
 8007976:	e01f      	b.n	80079b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007978:	4a41      	ldr	r2, [pc, #260]	; (8007a80 <inc_lock+0x118>)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	011b      	lsls	r3, r3, #4
 800797e:	4413      	add	r3, r2
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d113      	bne.n	80079b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800798a:	4a3d      	ldr	r2, [pc, #244]	; (8007a80 <inc_lock+0x118>)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	011b      	lsls	r3, r3, #4
 8007990:	4413      	add	r3, r2
 8007992:	3304      	adds	r3, #4
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800799a:	429a      	cmp	r2, r3
 800799c:	d109      	bne.n	80079b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800799e:	4a38      	ldr	r2, [pc, #224]	; (8007a80 <inc_lock+0x118>)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	011b      	lsls	r3, r3, #4
 80079a4:	4413      	add	r3, r2
 80079a6:	3308      	adds	r3, #8
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d006      	beq.n	80079c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3301      	adds	r3, #1
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d9dc      	bls.n	8007978 <inc_lock+0x10>
 80079be:	e000      	b.n	80079c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80079c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d132      	bne.n	8007a2e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80079c8:	2300      	movs	r3, #0
 80079ca:	60fb      	str	r3, [r7, #12]
 80079cc:	e002      	b.n	80079d4 <inc_lock+0x6c>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3301      	adds	r3, #1
 80079d2:	60fb      	str	r3, [r7, #12]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d806      	bhi.n	80079e8 <inc_lock+0x80>
 80079da:	4a29      	ldr	r2, [pc, #164]	; (8007a80 <inc_lock+0x118>)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	011b      	lsls	r3, r3, #4
 80079e0:	4413      	add	r3, r2
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1f2      	bne.n	80079ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d101      	bne.n	80079f2 <inc_lock+0x8a>
 80079ee:	2300      	movs	r3, #0
 80079f0:	e040      	b.n	8007a74 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	4922      	ldr	r1, [pc, #136]	; (8007a80 <inc_lock+0x118>)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	011b      	lsls	r3, r3, #4
 80079fc:	440b      	add	r3, r1
 80079fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689a      	ldr	r2, [r3, #8]
 8007a04:	491e      	ldr	r1, [pc, #120]	; (8007a80 <inc_lock+0x118>)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	011b      	lsls	r3, r3, #4
 8007a0a:	440b      	add	r3, r1
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	695a      	ldr	r2, [r3, #20]
 8007a14:	491a      	ldr	r1, [pc, #104]	; (8007a80 <inc_lock+0x118>)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	011b      	lsls	r3, r3, #4
 8007a1a:	440b      	add	r3, r1
 8007a1c:	3308      	adds	r3, #8
 8007a1e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007a20:	4a17      	ldr	r2, [pc, #92]	; (8007a80 <inc_lock+0x118>)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	011b      	lsls	r3, r3, #4
 8007a26:	4413      	add	r3, r2
 8007a28:	330c      	adds	r3, #12
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d009      	beq.n	8007a48 <inc_lock+0xe0>
 8007a34:	4a12      	ldr	r2, [pc, #72]	; (8007a80 <inc_lock+0x118>)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	011b      	lsls	r3, r3, #4
 8007a3a:	4413      	add	r3, r2
 8007a3c:	330c      	adds	r3, #12
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d001      	beq.n	8007a48 <inc_lock+0xe0>
 8007a44:	2300      	movs	r3, #0
 8007a46:	e015      	b.n	8007a74 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d108      	bne.n	8007a60 <inc_lock+0xf8>
 8007a4e:	4a0c      	ldr	r2, [pc, #48]	; (8007a80 <inc_lock+0x118>)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	011b      	lsls	r3, r3, #4
 8007a54:	4413      	add	r3, r2
 8007a56:	330c      	adds	r3, #12
 8007a58:	881b      	ldrh	r3, [r3, #0]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	e001      	b.n	8007a64 <inc_lock+0xfc>
 8007a60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a64:	4906      	ldr	r1, [pc, #24]	; (8007a80 <inc_lock+0x118>)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	011b      	lsls	r3, r3, #4
 8007a6a:	440b      	add	r3, r1
 8007a6c:	330c      	adds	r3, #12
 8007a6e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	3301      	adds	r3, #1
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	20000120 	.word	0x20000120

08007a84 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	607b      	str	r3, [r7, #4]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d825      	bhi.n	8007ae4 <dec_lock+0x60>
		n = Files[i].ctr;
 8007a98:	4a17      	ldr	r2, [pc, #92]	; (8007af8 <dec_lock+0x74>)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	011b      	lsls	r3, r3, #4
 8007a9e:	4413      	add	r3, r2
 8007aa0:	330c      	adds	r3, #12
 8007aa2:	881b      	ldrh	r3, [r3, #0]
 8007aa4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007aa6:	89fb      	ldrh	r3, [r7, #14]
 8007aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aac:	d101      	bne.n	8007ab2 <dec_lock+0x2e>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007ab2:	89fb      	ldrh	r3, [r7, #14]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d002      	beq.n	8007abe <dec_lock+0x3a>
 8007ab8:	89fb      	ldrh	r3, [r7, #14]
 8007aba:	3b01      	subs	r3, #1
 8007abc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007abe:	4a0e      	ldr	r2, [pc, #56]	; (8007af8 <dec_lock+0x74>)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	011b      	lsls	r3, r3, #4
 8007ac4:	4413      	add	r3, r2
 8007ac6:	330c      	adds	r3, #12
 8007ac8:	89fa      	ldrh	r2, [r7, #14]
 8007aca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007acc:	89fb      	ldrh	r3, [r7, #14]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d105      	bne.n	8007ade <dec_lock+0x5a>
 8007ad2:	4a09      	ldr	r2, [pc, #36]	; (8007af8 <dec_lock+0x74>)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	011b      	lsls	r3, r3, #4
 8007ad8:	4413      	add	r3, r2
 8007ada:	2200      	movs	r2, #0
 8007adc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	737b      	strb	r3, [r7, #13]
 8007ae2:	e001      	b.n	8007ae8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007ae8:	7b7b      	ldrb	r3, [r7, #13]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	20000120 	.word	0x20000120

08007afc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007b04:	2300      	movs	r3, #0
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	e010      	b.n	8007b2c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007b0a:	4a0d      	ldr	r2, [pc, #52]	; (8007b40 <clear_lock+0x44>)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	011b      	lsls	r3, r3, #4
 8007b10:	4413      	add	r3, r2
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d105      	bne.n	8007b26 <clear_lock+0x2a>
 8007b1a:	4a09      	ldr	r2, [pc, #36]	; (8007b40 <clear_lock+0x44>)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	011b      	lsls	r3, r3, #4
 8007b20:	4413      	add	r3, r2
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d9eb      	bls.n	8007b0a <clear_lock+0xe>
	}
}
 8007b32:	bf00      	nop
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20000120 	.word	0x20000120

08007b44 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	78db      	ldrb	r3, [r3, #3]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d034      	beq.n	8007bc2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b5c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	7858      	ldrb	r0, [r3, #1]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007b68:	2301      	movs	r3, #1
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	f7ff fd40 	bl	80075f0 <disk_write>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d002      	beq.n	8007b7c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	73fb      	strb	r3, [r7, #15]
 8007b7a:	e022      	b.n	8007bc2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	1ad2      	subs	r2, r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d217      	bcs.n	8007bc2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	789b      	ldrb	r3, [r3, #2]
 8007b96:	613b      	str	r3, [r7, #16]
 8007b98:	e010      	b.n	8007bbc <sync_window+0x78>
					wsect += fs->fsize;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	7858      	ldrb	r0, [r3, #1]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007bae:	2301      	movs	r3, #1
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	f7ff fd1d 	bl	80075f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	613b      	str	r3, [r7, #16]
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d8eb      	bhi.n	8007b9a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d01b      	beq.n	8007c1c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7ff ffad 	bl	8007b44 <sync_window>
 8007bea:	4603      	mov	r3, r0
 8007bec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d113      	bne.n	8007c1c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	7858      	ldrb	r0, [r3, #1]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007bfe:	2301      	movs	r3, #1
 8007c00:	683a      	ldr	r2, [r7, #0]
 8007c02:	f7ff fcd5 	bl	80075b0 <disk_read>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d004      	beq.n	8007c16 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c10:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	683a      	ldr	r2, [r7, #0]
 8007c1a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
	...

08007c28 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7ff ff87 	bl	8007b44 <sync_window>
 8007c36:	4603      	mov	r3, r0
 8007c38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d159      	bne.n	8007cf4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	2b03      	cmp	r3, #3
 8007c46:	d149      	bne.n	8007cdc <sync_fs+0xb4>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	791b      	ldrb	r3, [r3, #4]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d145      	bne.n	8007cdc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	899b      	ldrh	r3, [r3, #12]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	f7ff fda8 	bl	80077b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	3338      	adds	r3, #56	; 0x38
 8007c66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c6a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7ff fd37 	bl	80076e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3338      	adds	r3, #56	; 0x38
 8007c78:	4921      	ldr	r1, [pc, #132]	; (8007d00 <sync_fs+0xd8>)
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7ff fd4c 	bl	8007718 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	3338      	adds	r3, #56	; 0x38
 8007c84:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007c88:	491e      	ldr	r1, [pc, #120]	; (8007d04 <sync_fs+0xdc>)
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7ff fd44 	bl	8007718 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	3338      	adds	r3, #56	; 0x38
 8007c94:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	4610      	mov	r0, r2
 8007ca0:	f7ff fd3a 	bl	8007718 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3338      	adds	r3, #56	; 0x38
 8007ca8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	4610      	mov	r0, r2
 8007cb4:	f7ff fd30 	bl	8007718 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	1c5a      	adds	r2, r3, #1
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	7858      	ldrb	r0, [r3, #1]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	f7ff fc8d 	bl	80075f0 <disk_write>
			fs->fsi_flag = 0;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	785b      	ldrb	r3, [r3, #1]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7ff fca3 	bl	8007630 <disk_ioctl>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d001      	beq.n	8007cf4 <sync_fs+0xcc>
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	41615252 	.word	0x41615252
 8007d04:	61417272 	.word	0x61417272

08007d08 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	3b02      	subs	r3, #2
 8007d16:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	3b02      	subs	r3, #2
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d301      	bcc.n	8007d28 <clust2sect+0x20>
 8007d24:	2300      	movs	r3, #0
 8007d26:	e008      	b.n	8007d3a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	895b      	ldrh	r3, [r3, #10]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	fb03 f202 	mul.w	r2, r3, r2
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d38:	4413      	add	r3, r2
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b086      	sub	sp, #24
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d904      	bls.n	8007d66 <get_fat+0x20>
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d302      	bcc.n	8007d6c <get_fat+0x26>
		val = 1;	/* Internal error */
 8007d66:	2301      	movs	r3, #1
 8007d68:	617b      	str	r3, [r7, #20]
 8007d6a:	e0b7      	b.n	8007edc <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d70:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d05a      	beq.n	8007e30 <get_fat+0xea>
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d07d      	beq.n	8007e7a <get_fat+0x134>
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	f040 80a2 	bne.w	8007ec8 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	60fb      	str	r3, [r7, #12]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	085b      	lsrs	r3, r3, #1
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	4413      	add	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	899b      	ldrh	r3, [r3, #12]
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007da2:	4413      	add	r3, r2
 8007da4:	4619      	mov	r1, r3
 8007da6:	6938      	ldr	r0, [r7, #16]
 8007da8:	f7ff ff10 	bl	8007bcc <move_window>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f040 808d 	bne.w	8007ece <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	60fa      	str	r2, [r7, #12]
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	8992      	ldrh	r2, [r2, #12]
 8007dbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dc2:	fb02 f201 	mul.w	r2, r2, r1
 8007dc6:	1a9b      	subs	r3, r3, r2
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007dd0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	899b      	ldrh	r3, [r3, #12]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8007de2:	4413      	add	r3, r2
 8007de4:	4619      	mov	r1, r3
 8007de6:	6938      	ldr	r0, [r7, #16]
 8007de8:	f7ff fef0 	bl	8007bcc <move_window>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d16f      	bne.n	8007ed2 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	899b      	ldrh	r3, [r3, #12]
 8007df6:	461a      	mov	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dfe:	fb02 f201 	mul.w	r2, r2, r1
 8007e02:	1a9b      	subs	r3, r3, r2
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	4413      	add	r3, r2
 8007e08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e0c:	021b      	lsls	r3, r3, #8
 8007e0e:	461a      	mov	r2, r3
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <get_fat+0xe0>
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	091b      	lsrs	r3, r3, #4
 8007e24:	e002      	b.n	8007e2c <get_fat+0xe6>
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e2c:	617b      	str	r3, [r7, #20]
			break;
 8007e2e:	e055      	b.n	8007edc <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	899b      	ldrh	r3, [r3, #12]
 8007e38:	085b      	lsrs	r3, r3, #1
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e44:	4413      	add	r3, r2
 8007e46:	4619      	mov	r1, r3
 8007e48:	6938      	ldr	r0, [r7, #16]
 8007e4a:	f7ff febf 	bl	8007bcc <move_window>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d140      	bne.n	8007ed6 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	005b      	lsls	r3, r3, #1
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	8992      	ldrh	r2, [r2, #12]
 8007e62:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e66:	fb02 f200 	mul.w	r2, r2, r0
 8007e6a:	1a9b      	subs	r3, r3, r2
 8007e6c:	440b      	add	r3, r1
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7ff fbfc 	bl	800766c <ld_word>
 8007e74:	4603      	mov	r3, r0
 8007e76:	617b      	str	r3, [r7, #20]
			break;
 8007e78:	e030      	b.n	8007edc <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	899b      	ldrh	r3, [r3, #12]
 8007e82:	089b      	lsrs	r3, r3, #2
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	4619      	mov	r1, r3
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e8e:	4413      	add	r3, r2
 8007e90:	4619      	mov	r1, r3
 8007e92:	6938      	ldr	r0, [r7, #16]
 8007e94:	f7ff fe9a 	bl	8007bcc <move_window>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d11d      	bne.n	8007eda <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	8992      	ldrh	r2, [r2, #12]
 8007eac:	fbb3 f0f2 	udiv	r0, r3, r2
 8007eb0:	fb02 f200 	mul.w	r2, r2, r0
 8007eb4:	1a9b      	subs	r3, r3, r2
 8007eb6:	440b      	add	r3, r1
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7ff fbef 	bl	800769c <ld_dword>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007ec4:	617b      	str	r3, [r7, #20]
			break;
 8007ec6:	e009      	b.n	8007edc <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007ec8:	2301      	movs	r3, #1
 8007eca:	617b      	str	r3, [r7, #20]
 8007ecc:	e006      	b.n	8007edc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ece:	bf00      	nop
 8007ed0:	e004      	b.n	8007edc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ed2:	bf00      	nop
 8007ed4:	e002      	b.n	8007edc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ed6:	bf00      	nop
 8007ed8:	e000      	b.n	8007edc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007eda:	bf00      	nop
		}
	}

	return val;
 8007edc:	697b      	ldr	r3, [r7, #20]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3718      	adds	r7, #24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007ee6:	b590      	push	{r4, r7, lr}
 8007ee8:	b089      	sub	sp, #36	; 0x24
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	60f8      	str	r0, [r7, #12]
 8007eee:	60b9      	str	r1, [r7, #8]
 8007ef0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	f240 8106 	bls.w	800810a <put_fat+0x224>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	69db      	ldr	r3, [r3, #28]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	f080 8100 	bcs.w	800810a <put_fat+0x224>
		switch (fs->fs_type) {
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	f000 8088 	beq.w	8008024 <put_fat+0x13e>
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	f000 80b0 	beq.w	800807a <put_fat+0x194>
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	f040 80f5 	bne.w	800810a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	61bb      	str	r3, [r7, #24]
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	085b      	lsrs	r3, r3, #1
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	899b      	ldrh	r3, [r3, #12]
 8007f36:	4619      	mov	r1, r3
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f3e:	4413      	add	r3, r2
 8007f40:	4619      	mov	r1, r3
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f7ff fe42 	bl	8007bcc <move_window>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f4c:	7ffb      	ldrb	r3, [r7, #31]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f040 80d4 	bne.w	80080fc <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	1c5a      	adds	r2, r3, #1
 8007f5e:	61ba      	str	r2, [r7, #24]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	8992      	ldrh	r2, [r2, #12]
 8007f64:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f68:	fb02 f200 	mul.w	r2, r2, r0
 8007f6c:	1a9b      	subs	r3, r3, r2
 8007f6e:	440b      	add	r3, r1
 8007f70:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	f003 0301 	and.w	r3, r3, #1
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00d      	beq.n	8007f98 <put_fat+0xb2>
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	b25b      	sxtb	r3, r3
 8007f82:	f003 030f 	and.w	r3, r3, #15
 8007f86:	b25a      	sxtb	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	011b      	lsls	r3, r3, #4
 8007f8e:	b25b      	sxtb	r3, r3
 8007f90:	4313      	orrs	r3, r2
 8007f92:	b25b      	sxtb	r3, r3
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	e001      	b.n	8007f9c <put_fat+0xb6>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	899b      	ldrh	r3, [r3, #12]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fb6:	4413      	add	r3, r2
 8007fb8:	4619      	mov	r1, r3
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f7ff fe06 	bl	8007bcc <move_window>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007fc4:	7ffb      	ldrb	r3, [r7, #31]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f040 809a 	bne.w	8008100 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	899b      	ldrh	r3, [r3, #12]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	fbb3 f0f2 	udiv	r0, r3, r2
 8007fde:	fb02 f200 	mul.w	r2, r2, r0
 8007fe2:	1a9b      	subs	r3, r3, r2
 8007fe4:	440b      	add	r3, r1
 8007fe6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <put_fat+0x114>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	091b      	lsrs	r3, r3, #4
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	e00e      	b.n	8008018 <put_fat+0x132>
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	b25b      	sxtb	r3, r3
 8008000:	f023 030f 	bic.w	r3, r3, #15
 8008004:	b25a      	sxtb	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	0a1b      	lsrs	r3, r3, #8
 800800a:	b25b      	sxtb	r3, r3
 800800c:	f003 030f 	and.w	r3, r3, #15
 8008010:	b25b      	sxtb	r3, r3
 8008012:	4313      	orrs	r3, r2
 8008014:	b25b      	sxtb	r3, r3
 8008016:	b2db      	uxtb	r3, r3
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2201      	movs	r2, #1
 8008020:	70da      	strb	r2, [r3, #3]
			break;
 8008022:	e072      	b.n	800810a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	899b      	ldrh	r3, [r3, #12]
 800802c:	085b      	lsrs	r3, r3, #1
 800802e:	b29b      	uxth	r3, r3
 8008030:	4619      	mov	r1, r3
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	fbb3 f3f1 	udiv	r3, r3, r1
 8008038:	4413      	add	r3, r2
 800803a:	4619      	mov	r1, r3
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f7ff fdc5 	bl	8007bcc <move_window>
 8008042:	4603      	mov	r3, r0
 8008044:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008046:	7ffb      	ldrb	r3, [r7, #31]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d15b      	bne.n	8008104 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	8992      	ldrh	r2, [r2, #12]
 800805a:	fbb3 f0f2 	udiv	r0, r3, r2
 800805e:	fb02 f200 	mul.w	r2, r2, r0
 8008062:	1a9b      	subs	r3, r3, r2
 8008064:	440b      	add	r3, r1
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	b292      	uxth	r2, r2
 800806a:	4611      	mov	r1, r2
 800806c:	4618      	mov	r0, r3
 800806e:	f7ff fb38 	bl	80076e2 <st_word>
			fs->wflag = 1;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2201      	movs	r2, #1
 8008076:	70da      	strb	r2, [r3, #3]
			break;
 8008078:	e047      	b.n	800810a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	899b      	ldrh	r3, [r3, #12]
 8008082:	089b      	lsrs	r3, r3, #2
 8008084:	b29b      	uxth	r3, r3
 8008086:	4619      	mov	r1, r3
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	fbb3 f3f1 	udiv	r3, r3, r1
 800808e:	4413      	add	r3, r2
 8008090:	4619      	mov	r1, r3
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f7ff fd9a 	bl	8007bcc <move_window>
 8008098:	4603      	mov	r3, r0
 800809a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800809c:	7ffb      	ldrb	r3, [r7, #31]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d132      	bne.n	8008108 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	8992      	ldrh	r2, [r2, #12]
 80080b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80080ba:	fb02 f200 	mul.w	r2, r2, r0
 80080be:	1a9b      	subs	r3, r3, r2
 80080c0:	440b      	add	r3, r1
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7ff faea 	bl	800769c <ld_dword>
 80080c8:	4603      	mov	r3, r0
 80080ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80080ce:	4323      	orrs	r3, r4
 80080d0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	8992      	ldrh	r2, [r2, #12]
 80080e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80080e4:	fb02 f200 	mul.w	r2, r2, r0
 80080e8:	1a9b      	subs	r3, r3, r2
 80080ea:	440b      	add	r3, r1
 80080ec:	6879      	ldr	r1, [r7, #4]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7ff fb12 	bl	8007718 <st_dword>
			fs->wflag = 1;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2201      	movs	r2, #1
 80080f8:	70da      	strb	r2, [r3, #3]
			break;
 80080fa:	e006      	b.n	800810a <put_fat+0x224>
			if (res != FR_OK) break;
 80080fc:	bf00      	nop
 80080fe:	e004      	b.n	800810a <put_fat+0x224>
			if (res != FR_OK) break;
 8008100:	bf00      	nop
 8008102:	e002      	b.n	800810a <put_fat+0x224>
			if (res != FR_OK) break;
 8008104:	bf00      	nop
 8008106:	e000      	b.n	800810a <put_fat+0x224>
			if (res != FR_OK) break;
 8008108:	bf00      	nop
		}
	}
	return res;
 800810a:	7ffb      	ldrb	r3, [r7, #31]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3724      	adds	r7, #36	; 0x24
 8008110:	46bd      	mov	sp, r7
 8008112:	bd90      	pop	{r4, r7, pc}

08008114 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b088      	sub	sp, #32
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d904      	bls.n	800813a <remove_chain+0x26>
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	69db      	ldr	r3, [r3, #28]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	429a      	cmp	r2, r3
 8008138:	d301      	bcc.n	800813e <remove_chain+0x2a>
 800813a:	2302      	movs	r3, #2
 800813c:	e04b      	b.n	80081d6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00c      	beq.n	800815e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008144:	f04f 32ff 	mov.w	r2, #4294967295
 8008148:	6879      	ldr	r1, [r7, #4]
 800814a:	69b8      	ldr	r0, [r7, #24]
 800814c:	f7ff fecb 	bl	8007ee6 <put_fat>
 8008150:	4603      	mov	r3, r0
 8008152:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008154:	7ffb      	ldrb	r3, [r7, #31]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <remove_chain+0x4a>
 800815a:	7ffb      	ldrb	r3, [r7, #31]
 800815c:	e03b      	b.n	80081d6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800815e:	68b9      	ldr	r1, [r7, #8]
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f7ff fdf0 	bl	8007d46 <get_fat>
 8008166:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d031      	beq.n	80081d2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d101      	bne.n	8008178 <remove_chain+0x64>
 8008174:	2302      	movs	r3, #2
 8008176:	e02e      	b.n	80081d6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800817e:	d101      	bne.n	8008184 <remove_chain+0x70>
 8008180:	2301      	movs	r3, #1
 8008182:	e028      	b.n	80081d6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008184:	2200      	movs	r2, #0
 8008186:	68b9      	ldr	r1, [r7, #8]
 8008188:	69b8      	ldr	r0, [r7, #24]
 800818a:	f7ff feac 	bl	8007ee6 <put_fat>
 800818e:	4603      	mov	r3, r0
 8008190:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008192:	7ffb      	ldrb	r3, [r7, #31]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <remove_chain+0x88>
 8008198:	7ffb      	ldrb	r3, [r7, #31]
 800819a:	e01c      	b.n	80081d6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	699a      	ldr	r2, [r3, #24]
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	69db      	ldr	r3, [r3, #28]
 80081a4:	3b02      	subs	r3, #2
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d20b      	bcs.n	80081c2 <remove_chain+0xae>
			fs->free_clst++;
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	791b      	ldrb	r3, [r3, #4]
 80081b8:	f043 0301 	orr.w	r3, r3, #1
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d3c6      	bcc.n	800815e <remove_chain+0x4a>
 80081d0:	e000      	b.n	80081d4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80081d2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3720      	adds	r7, #32
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b088      	sub	sp, #32
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10d      	bne.n	8008210 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	695b      	ldr	r3, [r3, #20]
 80081f8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d004      	beq.n	800820a <create_chain+0x2c>
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	69db      	ldr	r3, [r3, #28]
 8008204:	69ba      	ldr	r2, [r7, #24]
 8008206:	429a      	cmp	r2, r3
 8008208:	d31b      	bcc.n	8008242 <create_chain+0x64>
 800820a:	2301      	movs	r3, #1
 800820c:	61bb      	str	r3, [r7, #24]
 800820e:	e018      	b.n	8008242 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7ff fd97 	bl	8007d46 <get_fat>
 8008218:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d801      	bhi.n	8008224 <create_chain+0x46>
 8008220:	2301      	movs	r3, #1
 8008222:	e070      	b.n	8008306 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822a:	d101      	bne.n	8008230 <create_chain+0x52>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	e06a      	b.n	8008306 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	429a      	cmp	r2, r3
 8008238:	d201      	bcs.n	800823e <create_chain+0x60>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	e063      	b.n	8008306 <create_chain+0x128>
		scl = clst;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	3301      	adds	r3, #1
 800824a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	69db      	ldr	r3, [r3, #28]
 8008250:	69fa      	ldr	r2, [r7, #28]
 8008252:	429a      	cmp	r2, r3
 8008254:	d307      	bcc.n	8008266 <create_chain+0x88>
				ncl = 2;
 8008256:	2302      	movs	r3, #2
 8008258:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800825a:	69fa      	ldr	r2, [r7, #28]
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	429a      	cmp	r2, r3
 8008260:	d901      	bls.n	8008266 <create_chain+0x88>
 8008262:	2300      	movs	r3, #0
 8008264:	e04f      	b.n	8008306 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008266:	69f9      	ldr	r1, [r7, #28]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7ff fd6c 	bl	8007d46 <get_fat>
 800826e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00e      	beq.n	8008294 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d003      	beq.n	8008284 <create_chain+0xa6>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008282:	d101      	bne.n	8008288 <create_chain+0xaa>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	e03e      	b.n	8008306 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008288:	69fa      	ldr	r2, [r7, #28]
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	429a      	cmp	r2, r3
 800828e:	d1da      	bne.n	8008246 <create_chain+0x68>
 8008290:	2300      	movs	r3, #0
 8008292:	e038      	b.n	8008306 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008294:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008296:	f04f 32ff 	mov.w	r2, #4294967295
 800829a:	69f9      	ldr	r1, [r7, #28]
 800829c:	6938      	ldr	r0, [r7, #16]
 800829e:	f7ff fe22 	bl	8007ee6 <put_fat>
 80082a2:	4603      	mov	r3, r0
 80082a4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d109      	bne.n	80082c0 <create_chain+0xe2>
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d006      	beq.n	80082c0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80082b2:	69fa      	ldr	r2, [r7, #28]
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6938      	ldr	r0, [r7, #16]
 80082b8:	f7ff fe15 	bl	8007ee6 <put_fat>
 80082bc:	4603      	mov	r3, r0
 80082be:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80082c0:	7dfb      	ldrb	r3, [r7, #23]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d116      	bne.n	80082f4 <create_chain+0x116>
		fs->last_clst = ncl;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	69fa      	ldr	r2, [r7, #28]
 80082ca:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	699a      	ldr	r2, [r3, #24]
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	69db      	ldr	r3, [r3, #28]
 80082d4:	3b02      	subs	r3, #2
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d804      	bhi.n	80082e4 <create_chain+0x106>
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	1e5a      	subs	r2, r3, #1
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	791b      	ldrb	r3, [r3, #4]
 80082e8:	f043 0301 	orr.w	r3, r3, #1
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	711a      	strb	r2, [r3, #4]
 80082f2:	e007      	b.n	8008304 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80082f4:	7dfb      	ldrb	r3, [r7, #23]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d102      	bne.n	8008300 <create_chain+0x122>
 80082fa:	f04f 33ff 	mov.w	r3, #4294967295
 80082fe:	e000      	b.n	8008302 <create_chain+0x124>
 8008300:	2301      	movs	r3, #1
 8008302:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008304:	69fb      	ldr	r3, [r7, #28]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3720      	adds	r7, #32
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800830e:	b480      	push	{r7}
 8008310:	b087      	sub	sp, #28
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008322:	3304      	adds	r3, #4
 8008324:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	899b      	ldrh	r3, [r3, #12]
 800832a:	461a      	mov	r2, r3
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	8952      	ldrh	r2, [r2, #10]
 8008336:	fbb3 f3f2 	udiv	r3, r3, r2
 800833a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	1d1a      	adds	r2, r3, #4
 8008340:	613a      	str	r2, [r7, #16]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <clmt_clust+0x42>
 800834c:	2300      	movs	r3, #0
 800834e:	e010      	b.n	8008372 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	429a      	cmp	r2, r3
 8008356:	d307      	bcc.n	8008368 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	617b      	str	r3, [r7, #20]
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	3304      	adds	r3, #4
 8008364:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008366:	e7e9      	b.n	800833c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008368:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	4413      	add	r3, r2
}
 8008372:	4618      	mov	r0, r3
 8008374:	371c      	adds	r7, #28
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr

0800837e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b086      	sub	sp, #24
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008394:	d204      	bcs.n	80083a0 <dir_sdi+0x22>
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	f003 031f 	and.w	r3, r3, #31
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80083a0:	2302      	movs	r3, #2
 80083a2:	e071      	b.n	8008488 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d106      	bne.n	80083c4 <dir_sdi+0x46>
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d902      	bls.n	80083c4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10c      	bne.n	80083e4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	095b      	lsrs	r3, r3, #5
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	8912      	ldrh	r2, [r2, #8]
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d301      	bcc.n	80083da <dir_sdi+0x5c>
 80083d6:	2302      	movs	r3, #2
 80083d8:	e056      	b.n	8008488 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	61da      	str	r2, [r3, #28]
 80083e2:	e02d      	b.n	8008440 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	895b      	ldrh	r3, [r3, #10]
 80083e8:	461a      	mov	r2, r3
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	899b      	ldrh	r3, [r3, #12]
 80083ee:	fb03 f302 	mul.w	r3, r3, r2
 80083f2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80083f4:	e019      	b.n	800842a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6979      	ldr	r1, [r7, #20]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7ff fca3 	bl	8007d46 <get_fat>
 8008400:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008408:	d101      	bne.n	800840e <dir_sdi+0x90>
 800840a:	2301      	movs	r3, #1
 800840c:	e03c      	b.n	8008488 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d904      	bls.n	800841e <dir_sdi+0xa0>
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	69db      	ldr	r3, [r3, #28]
 8008418:	697a      	ldr	r2, [r7, #20]
 800841a:	429a      	cmp	r2, r3
 800841c:	d301      	bcc.n	8008422 <dir_sdi+0xa4>
 800841e:	2302      	movs	r3, #2
 8008420:	e032      	b.n	8008488 <dir_sdi+0x10a>
			ofs -= csz;
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800842a:	683a      	ldr	r2, [r7, #0]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	429a      	cmp	r2, r3
 8008430:	d2e1      	bcs.n	80083f6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008432:	6979      	ldr	r1, [r7, #20]
 8008434:	6938      	ldr	r0, [r7, #16]
 8008436:	f7ff fc67 	bl	8007d08 <clust2sect>
 800843a:	4602      	mov	r2, r0
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <dir_sdi+0xd4>
 800844e:	2302      	movs	r3, #2
 8008450:	e01a      	b.n	8008488 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	69da      	ldr	r2, [r3, #28]
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	899b      	ldrh	r3, [r3, #12]
 800845a:	4619      	mov	r1, r3
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008462:	441a      	add	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	899b      	ldrh	r3, [r3, #12]
 8008472:	461a      	mov	r2, r3
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	fbb3 f0f2 	udiv	r0, r3, r2
 800847a:	fb02 f200 	mul.w	r2, r2, r0
 800847e:	1a9b      	subs	r3, r3, r2
 8008480:	18ca      	adds	r2, r1, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	695b      	ldr	r3, [r3, #20]
 80084a4:	3320      	adds	r3, #32
 80084a6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	69db      	ldr	r3, [r3, #28]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d003      	beq.n	80084b8 <dir_next+0x28>
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084b6:	d301      	bcc.n	80084bc <dir_next+0x2c>
 80084b8:	2304      	movs	r3, #4
 80084ba:	e0bb      	b.n	8008634 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	899b      	ldrh	r3, [r3, #12]
 80084c0:	461a      	mov	r2, r3
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80084c8:	fb02 f201 	mul.w	r2, r2, r1
 80084cc:	1a9b      	subs	r3, r3, r2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f040 809d 	bne.w	800860e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	69db      	ldr	r3, [r3, #28]
 80084d8:	1c5a      	adds	r2, r3, #1
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10b      	bne.n	80084fe <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	095b      	lsrs	r3, r3, #5
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	8912      	ldrh	r2, [r2, #8]
 80084ee:	4293      	cmp	r3, r2
 80084f0:	f0c0 808d 	bcc.w	800860e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	61da      	str	r2, [r3, #28]
 80084fa:	2304      	movs	r3, #4
 80084fc:	e09a      	b.n	8008634 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	899b      	ldrh	r3, [r3, #12]
 8008502:	461a      	mov	r2, r3
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	fbb3 f3f2 	udiv	r3, r3, r2
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	8952      	ldrh	r2, [r2, #10]
 800850e:	3a01      	subs	r2, #1
 8008510:	4013      	ands	r3, r2
 8008512:	2b00      	cmp	r3, #0
 8008514:	d17b      	bne.n	800860e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	4619      	mov	r1, r3
 800851e:	4610      	mov	r0, r2
 8008520:	f7ff fc11 	bl	8007d46 <get_fat>
 8008524:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d801      	bhi.n	8008530 <dir_next+0xa0>
 800852c:	2302      	movs	r3, #2
 800852e:	e081      	b.n	8008634 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008536:	d101      	bne.n	800853c <dir_next+0xac>
 8008538:	2301      	movs	r3, #1
 800853a:	e07b      	b.n	8008634 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	429a      	cmp	r2, r3
 8008544:	d359      	bcc.n	80085fa <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d104      	bne.n	8008556 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	61da      	str	r2, [r3, #28]
 8008552:	2304      	movs	r3, #4
 8008554:	e06e      	b.n	8008634 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	4619      	mov	r1, r3
 800855e:	4610      	mov	r0, r2
 8008560:	f7ff fe3d 	bl	80081de <create_chain>
 8008564:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d101      	bne.n	8008570 <dir_next+0xe0>
 800856c:	2307      	movs	r3, #7
 800856e:	e061      	b.n	8008634 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d101      	bne.n	800857a <dir_next+0xea>
 8008576:	2302      	movs	r3, #2
 8008578:	e05c      	b.n	8008634 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008580:	d101      	bne.n	8008586 <dir_next+0xf6>
 8008582:	2301      	movs	r3, #1
 8008584:	e056      	b.n	8008634 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f7ff fadc 	bl	8007b44 <sync_window>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <dir_next+0x106>
 8008592:	2301      	movs	r3, #1
 8008594:	e04e      	b.n	8008634 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	899b      	ldrh	r3, [r3, #12]
 80085a0:	461a      	mov	r2, r3
 80085a2:	2100      	movs	r1, #0
 80085a4:	f7ff f905 	bl	80077b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80085a8:	2300      	movs	r3, #0
 80085aa:	613b      	str	r3, [r7, #16]
 80085ac:	6979      	ldr	r1, [r7, #20]
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f7ff fbaa 	bl	8007d08 <clust2sect>
 80085b4:	4602      	mov	r2, r0
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	635a      	str	r2, [r3, #52]	; 0x34
 80085ba:	e012      	b.n	80085e2 <dir_next+0x152>
						fs->wflag = 1;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2201      	movs	r2, #1
 80085c0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f7ff fabe 	bl	8007b44 <sync_window>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <dir_next+0x142>
 80085ce:	2301      	movs	r3, #1
 80085d0:	e030      	b.n	8008634 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	3301      	adds	r3, #1
 80085d6:	613b      	str	r3, [r7, #16]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085dc:	1c5a      	adds	r2, r3, #1
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	635a      	str	r2, [r3, #52]	; 0x34
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	895b      	ldrh	r3, [r3, #10]
 80085e6:	461a      	mov	r2, r3
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d3e6      	bcc.n	80085bc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	1ad2      	subs	r2, r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008600:	6979      	ldr	r1, [r7, #20]
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f7ff fb80 	bl	8007d08 <clust2sect>
 8008608:	4602      	mov	r2, r0
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	899b      	ldrh	r3, [r3, #12]
 800861e:	461a      	mov	r2, r3
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	fbb3 f0f2 	udiv	r0, r3, r2
 8008626:	fb02 f200 	mul.w	r2, r2, r0
 800862a:	1a9b      	subs	r3, r3, r2
 800862c:	18ca      	adds	r2, r1, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3718      	adds	r7, #24
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800864c:	2100      	movs	r1, #0
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f7ff fe95 	bl	800837e <dir_sdi>
 8008654:	4603      	mov	r3, r0
 8008656:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d12b      	bne.n	80086b6 <dir_alloc+0x7a>
		n = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	69db      	ldr	r3, [r3, #28]
 8008666:	4619      	mov	r1, r3
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f7ff faaf 	bl	8007bcc <move_window>
 800866e:	4603      	mov	r3, r0
 8008670:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008672:	7dfb      	ldrb	r3, [r7, #23]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d11d      	bne.n	80086b4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	2be5      	cmp	r3, #229	; 0xe5
 8008680:	d004      	beq.n	800868c <dir_alloc+0x50>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d107      	bne.n	800869c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	3301      	adds	r3, #1
 8008690:	613b      	str	r3, [r7, #16]
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d102      	bne.n	80086a0 <dir_alloc+0x64>
 800869a:	e00c      	b.n	80086b6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800869c:	2300      	movs	r3, #0
 800869e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80086a0:	2101      	movs	r1, #1
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7ff fef4 	bl	8008490 <dir_next>
 80086a8:	4603      	mov	r3, r0
 80086aa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80086ac:	7dfb      	ldrb	r3, [r7, #23]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d0d7      	beq.n	8008662 <dir_alloc+0x26>
 80086b2:	e000      	b.n	80086b6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80086b4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80086b6:	7dfb      	ldrb	r3, [r7, #23]
 80086b8:	2b04      	cmp	r3, #4
 80086ba:	d101      	bne.n	80086c0 <dir_alloc+0x84>
 80086bc:	2307      	movs	r3, #7
 80086be:	75fb      	strb	r3, [r7, #23]
	return res;
 80086c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3718      	adds	r7, #24
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b084      	sub	sp, #16
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	331a      	adds	r3, #26
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fe ffc7 	bl	800766c <ld_word>
 80086de:	4603      	mov	r3, r0
 80086e0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d109      	bne.n	80086fe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	3314      	adds	r3, #20
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fe ffbc 	bl	800766c <ld_word>
 80086f4:	4603      	mov	r3, r0
 80086f6:	041b      	lsls	r3, r3, #16
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80086fe:	68fb      	ldr	r3, [r7, #12]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	331a      	adds	r3, #26
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	b292      	uxth	r2, r2
 800871c:	4611      	mov	r1, r2
 800871e:	4618      	mov	r0, r3
 8008720:	f7fe ffdf 	bl	80076e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2b03      	cmp	r3, #3
 800872a:	d109      	bne.n	8008740 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	f103 0214 	add.w	r2, r3, #20
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	0c1b      	lsrs	r3, r3, #16
 8008736:	b29b      	uxth	r3, r3
 8008738:	4619      	mov	r1, r3
 800873a:	4610      	mov	r0, r2
 800873c:	f7fe ffd1 	bl	80076e2 <st_word>
	}
}
 8008740:	bf00      	nop
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008748:	b590      	push	{r4, r7, lr}
 800874a:	b087      	sub	sp, #28
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	331a      	adds	r3, #26
 8008756:	4618      	mov	r0, r3
 8008758:	f7fe ff88 	bl	800766c <ld_word>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d001      	beq.n	8008766 <cmp_lfn+0x1e>
 8008762:	2300      	movs	r3, #0
 8008764:	e059      	b.n	800881a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800876e:	1e5a      	subs	r2, r3, #1
 8008770:	4613      	mov	r3, r2
 8008772:	005b      	lsls	r3, r3, #1
 8008774:	4413      	add	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800877c:	2301      	movs	r3, #1
 800877e:	81fb      	strh	r3, [r7, #14]
 8008780:	2300      	movs	r3, #0
 8008782:	613b      	str	r3, [r7, #16]
 8008784:	e033      	b.n	80087ee <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008786:	4a27      	ldr	r2, [pc, #156]	; (8008824 <cmp_lfn+0xdc>)
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	4413      	add	r3, r2
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	4413      	add	r3, r2
 8008794:	4618      	mov	r0, r3
 8008796:	f7fe ff69 	bl	800766c <ld_word>
 800879a:	4603      	mov	r3, r0
 800879c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800879e:	89fb      	ldrh	r3, [r7, #14]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d01a      	beq.n	80087da <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	2bfe      	cmp	r3, #254	; 0xfe
 80087a8:	d812      	bhi.n	80087d0 <cmp_lfn+0x88>
 80087aa:	89bb      	ldrh	r3, [r7, #12]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7fe fe35 	bl	800741c <ff_wtoupper>
 80087b2:	4603      	mov	r3, r0
 80087b4:	461c      	mov	r4, r3
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	617a      	str	r2, [r7, #20]
 80087bc:	005b      	lsls	r3, r3, #1
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	4413      	add	r3, r2
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fe fe29 	bl	800741c <ff_wtoupper>
 80087ca:	4603      	mov	r3, r0
 80087cc:	429c      	cmp	r4, r3
 80087ce:	d001      	beq.n	80087d4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80087d0:	2300      	movs	r3, #0
 80087d2:	e022      	b.n	800881a <cmp_lfn+0xd2>
			}
			wc = uc;
 80087d4:	89bb      	ldrh	r3, [r7, #12]
 80087d6:	81fb      	strh	r3, [r7, #14]
 80087d8:	e006      	b.n	80087e8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80087da:	89bb      	ldrh	r3, [r7, #12]
 80087dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d001      	beq.n	80087e8 <cmp_lfn+0xa0>
 80087e4:	2300      	movs	r3, #0
 80087e6:	e018      	b.n	800881a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	3301      	adds	r3, #1
 80087ec:	613b      	str	r3, [r7, #16]
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	2b0c      	cmp	r3, #12
 80087f2:	d9c8      	bls.n	8008786 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00b      	beq.n	8008818 <cmp_lfn+0xd0>
 8008800:	89fb      	ldrh	r3, [r7, #14]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d008      	beq.n	8008818 <cmp_lfn+0xd0>
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	4413      	add	r3, r2
 800880e:	881b      	ldrh	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <cmp_lfn+0xd0>
 8008814:	2300      	movs	r3, #0
 8008816:	e000      	b.n	800881a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008818:	2301      	movs	r3, #1
}
 800881a:	4618      	mov	r0, r3
 800881c:	371c      	adds	r7, #28
 800881e:	46bd      	mov	sp, r7
 8008820:	bd90      	pop	{r4, r7, pc}
 8008822:	bf00      	nop
 8008824:	0800b5b8 	.word	0x0800b5b8

08008828 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b088      	sub	sp, #32
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	4611      	mov	r1, r2
 8008834:	461a      	mov	r2, r3
 8008836:	460b      	mov	r3, r1
 8008838:	71fb      	strb	r3, [r7, #7]
 800883a:	4613      	mov	r3, r2
 800883c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	330d      	adds	r3, #13
 8008842:	79ba      	ldrb	r2, [r7, #6]
 8008844:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	330b      	adds	r3, #11
 800884a:	220f      	movs	r2, #15
 800884c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	330c      	adds	r3, #12
 8008852:	2200      	movs	r2, #0
 8008854:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	331a      	adds	r3, #26
 800885a:	2100      	movs	r1, #0
 800885c:	4618      	mov	r0, r3
 800885e:	f7fe ff40 	bl	80076e2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008862:	79fb      	ldrb	r3, [r7, #7]
 8008864:	1e5a      	subs	r2, r3, #1
 8008866:	4613      	mov	r3, r2
 8008868:	005b      	lsls	r3, r3, #1
 800886a:	4413      	add	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008872:	2300      	movs	r3, #0
 8008874:	82fb      	strh	r3, [r7, #22]
 8008876:	2300      	movs	r3, #0
 8008878:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800887a:	8afb      	ldrh	r3, [r7, #22]
 800887c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008880:	4293      	cmp	r3, r2
 8008882:	d007      	beq.n	8008894 <put_lfn+0x6c>
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	1c5a      	adds	r2, r3, #1
 8008888:	61fa      	str	r2, [r7, #28]
 800888a:	005b      	lsls	r3, r3, #1
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	4413      	add	r3, r2
 8008890:	881b      	ldrh	r3, [r3, #0]
 8008892:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008894:	4a17      	ldr	r2, [pc, #92]	; (80088f4 <put_lfn+0xcc>)
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	4413      	add	r3, r2
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	461a      	mov	r2, r3
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	4413      	add	r3, r2
 80088a2:	8afa      	ldrh	r2, [r7, #22]
 80088a4:	4611      	mov	r1, r2
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fe ff1b 	bl	80076e2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80088ac:	8afb      	ldrh	r3, [r7, #22]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d102      	bne.n	80088b8 <put_lfn+0x90>
 80088b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088b6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	3301      	adds	r3, #1
 80088bc:	61bb      	str	r3, [r7, #24]
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	2b0c      	cmp	r3, #12
 80088c2:	d9da      	bls.n	800887a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80088c4:	8afb      	ldrh	r3, [r7, #22]
 80088c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d006      	beq.n	80088dc <put_lfn+0xb4>
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	005b      	lsls	r3, r3, #1
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	4413      	add	r3, r2
 80088d6:	881b      	ldrh	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d103      	bne.n	80088e4 <put_lfn+0xbc>
 80088dc:	79fb      	ldrb	r3, [r7, #7]
 80088de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088e2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	79fa      	ldrb	r2, [r7, #7]
 80088e8:	701a      	strb	r2, [r3, #0]
}
 80088ea:	bf00      	nop
 80088ec:	3720      	adds	r7, #32
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	0800b5b8 	.word	0x0800b5b8

080088f8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08c      	sub	sp, #48	; 0x30
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008906:	220b      	movs	r2, #11
 8008908:	68b9      	ldr	r1, [r7, #8]
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f7fe ff30 	bl	8007770 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	2b05      	cmp	r3, #5
 8008914:	d92b      	bls.n	800896e <gen_numname+0x76>
		sr = seq;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800891a:	e022      	b.n	8008962 <gen_numname+0x6a>
			wc = *lfn++;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	1c9a      	adds	r2, r3, #2
 8008920:	607a      	str	r2, [r7, #4]
 8008922:	881b      	ldrh	r3, [r3, #0]
 8008924:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008926:	2300      	movs	r3, #0
 8008928:	62bb      	str	r3, [r7, #40]	; 0x28
 800892a:	e017      	b.n	800895c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	005a      	lsls	r2, r3, #1
 8008930:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	4413      	add	r3, r2
 8008938:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800893a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800893c:	085b      	lsrs	r3, r3, #1
 800893e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d005      	beq.n	8008956 <gen_numname+0x5e>
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008950:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008954:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008958:	3301      	adds	r3, #1
 800895a:	62bb      	str	r3, [r7, #40]	; 0x28
 800895c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895e:	2b0f      	cmp	r3, #15
 8008960:	d9e4      	bls.n	800892c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1d8      	bne.n	800891c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800896e:	2307      	movs	r3, #7
 8008970:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	b2db      	uxtb	r3, r3
 8008976:	f003 030f 	and.w	r3, r3, #15
 800897a:	b2db      	uxtb	r3, r3
 800897c:	3330      	adds	r3, #48	; 0x30
 800897e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008982:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008986:	2b39      	cmp	r3, #57	; 0x39
 8008988:	d904      	bls.n	8008994 <gen_numname+0x9c>
 800898a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800898e:	3307      	adds	r3, #7
 8008990:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008996:	1e5a      	subs	r2, r3, #1
 8008998:	62ba      	str	r2, [r7, #40]	; 0x28
 800899a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800899e:	4413      	add	r3, r2
 80089a0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80089a4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	091b      	lsrs	r3, r3, #4
 80089ac:	603b      	str	r3, [r7, #0]
	} while (seq);
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1de      	bne.n	8008972 <gen_numname+0x7a>
	ns[i] = '~';
 80089b4:	f107 0214 	add.w	r2, r7, #20
 80089b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ba:	4413      	add	r3, r2
 80089bc:	227e      	movs	r2, #126	; 0x7e
 80089be:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80089c0:	2300      	movs	r3, #0
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24
 80089c4:	e002      	b.n	80089cc <gen_numname+0xd4>
 80089c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c8:	3301      	adds	r3, #1
 80089ca:	627b      	str	r3, [r7, #36]	; 0x24
 80089cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d205      	bcs.n	80089e0 <gen_numname+0xe8>
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d8:	4413      	add	r3, r2
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	2b20      	cmp	r3, #32
 80089de:	d1f2      	bne.n	80089c6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80089e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e2:	2b07      	cmp	r3, #7
 80089e4:	d808      	bhi.n	80089f8 <gen_numname+0x100>
 80089e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e8:	1c5a      	adds	r2, r3, #1
 80089ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80089ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80089f0:	4413      	add	r3, r2
 80089f2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80089f6:	e000      	b.n	80089fa <gen_numname+0x102>
 80089f8:	2120      	movs	r1, #32
 80089fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fc:	1c5a      	adds	r2, r3, #1
 80089fe:	627a      	str	r2, [r7, #36]	; 0x24
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	4413      	add	r3, r2
 8008a04:	460a      	mov	r2, r1
 8008a06:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0a:	2b07      	cmp	r3, #7
 8008a0c:	d9e8      	bls.n	80089e0 <gen_numname+0xe8>
}
 8008a0e:	bf00      	nop
 8008a10:	3730      	adds	r7, #48	; 0x30
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b085      	sub	sp, #20
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008a22:	230b      	movs	r3, #11
 8008a24:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	0852      	lsrs	r2, r2, #1
 8008a2c:	01db      	lsls	r3, r3, #7
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	1c59      	adds	r1, r3, #1
 8008a36:	6079      	str	r1, [r7, #4]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	3b01      	subs	r3, #1
 8008a42:	60bb      	str	r3, [r7, #8]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1ed      	bne.n	8008a26 <sum_sfn+0x10>
	return sum;
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008a66:	2100      	movs	r1, #0
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7ff fc88 	bl	800837e <dir_sdi>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008a72:	7dfb      	ldrb	r3, [r7, #23]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d001      	beq.n	8008a7c <dir_find+0x24>
 8008a78:	7dfb      	ldrb	r3, [r7, #23]
 8008a7a:	e0a9      	b.n	8008bd0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008a7c:	23ff      	movs	r3, #255	; 0xff
 8008a7e:	753b      	strb	r3, [r7, #20]
 8008a80:	7d3b      	ldrb	r3, [r7, #20]
 8008a82:	757b      	strb	r3, [r7, #21]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f04f 32ff 	mov.w	r2, #4294967295
 8008a8a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	69db      	ldr	r3, [r3, #28]
 8008a90:	4619      	mov	r1, r3
 8008a92:	6938      	ldr	r0, [r7, #16]
 8008a94:	f7ff f89a 	bl	8007bcc <move_window>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008a9c:	7dfb      	ldrb	r3, [r7, #23]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f040 8090 	bne.w	8008bc4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a1b      	ldr	r3, [r3, #32]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008aac:	7dbb      	ldrb	r3, [r7, #22]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d102      	bne.n	8008ab8 <dir_find+0x60>
 8008ab2:	2304      	movs	r3, #4
 8008ab4:	75fb      	strb	r3, [r7, #23]
 8008ab6:	e08a      	b.n	8008bce <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a1b      	ldr	r3, [r3, #32]
 8008abc:	330b      	adds	r3, #11
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ac4:	73fb      	strb	r3, [r7, #15]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	7bfa      	ldrb	r2, [r7, #15]
 8008aca:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008acc:	7dbb      	ldrb	r3, [r7, #22]
 8008ace:	2be5      	cmp	r3, #229	; 0xe5
 8008ad0:	d007      	beq.n	8008ae2 <dir_find+0x8a>
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
 8008ad4:	f003 0308 	and.w	r3, r3, #8
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d009      	beq.n	8008af0 <dir_find+0x98>
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	2b0f      	cmp	r3, #15
 8008ae0:	d006      	beq.n	8008af0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008ae2:	23ff      	movs	r3, #255	; 0xff
 8008ae4:	757b      	strb	r3, [r7, #21]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8008aec:	631a      	str	r2, [r3, #48]	; 0x30
 8008aee:	e05e      	b.n	8008bae <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	2b0f      	cmp	r3, #15
 8008af4:	d136      	bne.n	8008b64 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d154      	bne.n	8008bae <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008b04:	7dbb      	ldrb	r3, [r7, #22]
 8008b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00d      	beq.n	8008b2a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	7b5b      	ldrb	r3, [r3, #13]
 8008b14:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008b16:	7dbb      	ldrb	r3, [r7, #22]
 8008b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b1c:	75bb      	strb	r3, [r7, #22]
 8008b1e:	7dbb      	ldrb	r3, [r7, #22]
 8008b20:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	695a      	ldr	r2, [r3, #20]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008b2a:	7dba      	ldrb	r2, [r7, #22]
 8008b2c:	7d7b      	ldrb	r3, [r7, #21]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d115      	bne.n	8008b5e <dir_find+0x106>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	330d      	adds	r3, #13
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	7d3a      	ldrb	r2, [r7, #20]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d10e      	bne.n	8008b5e <dir_find+0x106>
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	691a      	ldr	r2, [r3, #16]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a1b      	ldr	r3, [r3, #32]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	f7ff fdfc 	bl	8008748 <cmp_lfn>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <dir_find+0x106>
 8008b56:	7d7b      	ldrb	r3, [r7, #21]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	e000      	b.n	8008b60 <dir_find+0x108>
 8008b5e:	23ff      	movs	r3, #255	; 0xff
 8008b60:	757b      	strb	r3, [r7, #21]
 8008b62:	e024      	b.n	8008bae <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008b64:	7d7b      	ldrb	r3, [r7, #21]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d109      	bne.n	8008b7e <dir_find+0x126>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a1b      	ldr	r3, [r3, #32]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7ff ff51 	bl	8008a16 <sum_sfn>
 8008b74:	4603      	mov	r3, r0
 8008b76:	461a      	mov	r2, r3
 8008b78:	7d3b      	ldrb	r3, [r7, #20]
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d024      	beq.n	8008bc8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10a      	bne.n	8008ba2 <dir_find+0x14a>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a18      	ldr	r0, [r3, #32]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	3324      	adds	r3, #36	; 0x24
 8008b94:	220b      	movs	r2, #11
 8008b96:	4619      	mov	r1, r3
 8008b98:	f7fe fe25 	bl	80077e6 <mem_cmp>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d014      	beq.n	8008bcc <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008ba2:	23ff      	movs	r3, #255	; 0xff
 8008ba4:	757b      	strb	r3, [r7, #21]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bac:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008bae:	2100      	movs	r1, #0
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f7ff fc6d 	bl	8008490 <dir_next>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f43f af65 	beq.w	8008a8c <dir_find+0x34>
 8008bc2:	e004      	b.n	8008bce <dir_find+0x176>
		if (res != FR_OK) break;
 8008bc4:	bf00      	nop
 8008bc6:	e002      	b.n	8008bce <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008bc8:	bf00      	nop
 8008bca:	e000      	b.n	8008bce <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008bcc:	bf00      	nop

	return res;
 8008bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3718      	adds	r7, #24
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b08c      	sub	sp, #48	; 0x30
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008bec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <dir_register+0x20>
 8008bf4:	2306      	movs	r3, #6
 8008bf6:	e0e0      	b.n	8008dba <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8008bfc:	e002      	b.n	8008c04 <dir_register+0x2c>
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c00:	3301      	adds	r3, #1
 8008c02:	627b      	str	r3, [r7, #36]	; 0x24
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	691a      	ldr	r2, [r3, #16]
 8008c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0a:	005b      	lsls	r3, r3, #1
 8008c0c:	4413      	add	r3, r2
 8008c0e:	881b      	ldrh	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1f4      	bne.n	8008bfe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8008c1a:	f107 030c 	add.w	r3, r7, #12
 8008c1e:	220c      	movs	r2, #12
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fe fda5 	bl	8007770 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008c26:	7dfb      	ldrb	r3, [r7, #23]
 8008c28:	f003 0301 	and.w	r3, r3, #1
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d032      	beq.n	8008c96 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2240      	movs	r2, #64	; 0x40
 8008c34:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8008c38:	2301      	movs	r3, #1
 8008c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c3c:	e016      	b.n	8008c6c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	691a      	ldr	r2, [r3, #16]
 8008c48:	f107 010c 	add.w	r1, r7, #12
 8008c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4e:	f7ff fe53 	bl	80088f8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7ff ff00 	bl	8008a58 <dir_find>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8008c5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d106      	bne.n	8008c74 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c68:	3301      	adds	r3, #1
 8008c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	2b63      	cmp	r3, #99	; 0x63
 8008c70:	d9e5      	bls.n	8008c3e <dir_register+0x66>
 8008c72:	e000      	b.n	8008c76 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008c74:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c78:	2b64      	cmp	r3, #100	; 0x64
 8008c7a:	d101      	bne.n	8008c80 <dir_register+0xa8>
 8008c7c:	2307      	movs	r3, #7
 8008c7e:	e09c      	b.n	8008dba <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008c80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c84:	2b04      	cmp	r3, #4
 8008c86:	d002      	beq.n	8008c8e <dir_register+0xb6>
 8008c88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c8c:	e095      	b.n	8008dba <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008c8e:	7dfa      	ldrb	r2, [r7, #23]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
 8008c98:	f003 0302 	and.w	r3, r3, #2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d007      	beq.n	8008cb0 <dir_register+0xd8>
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca2:	330c      	adds	r3, #12
 8008ca4:	4a47      	ldr	r2, [pc, #284]	; (8008dc4 <dir_register+0x1ec>)
 8008ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8008caa:	089b      	lsrs	r3, r3, #2
 8008cac:	3301      	adds	r3, #1
 8008cae:	e000      	b.n	8008cb2 <dir_register+0xda>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008cb4:	6a39      	ldr	r1, [r7, #32]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f7ff fcc0 	bl	800863c <dir_alloc>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008cc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d148      	bne.n	8008d5c <dir_register+0x184>
 8008cca:	6a3b      	ldr	r3, [r7, #32]
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	623b      	str	r3, [r7, #32]
 8008cd0:	6a3b      	ldr	r3, [r7, #32]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d042      	beq.n	8008d5c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	695a      	ldr	r2, [r3, #20]
 8008cda:	6a3b      	ldr	r3, [r7, #32]
 8008cdc:	015b      	lsls	r3, r3, #5
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7ff fb4b 	bl	800837e <dir_sdi>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008cee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d132      	bne.n	8008d5c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	3324      	adds	r3, #36	; 0x24
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7ff fe8b 	bl	8008a16 <sum_sfn>
 8008d00:	4603      	mov	r3, r0
 8008d02:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	69db      	ldr	r3, [r3, #28]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	69f8      	ldr	r0, [r7, #28]
 8008d0c:	f7fe ff5e 	bl	8007bcc <move_window>
 8008d10:	4603      	mov	r3, r0
 8008d12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008d16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d11d      	bne.n	8008d5a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	6918      	ldr	r0, [r3, #16]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a19      	ldr	r1, [r3, #32]
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	b2da      	uxtb	r2, r3
 8008d2a:	7efb      	ldrb	r3, [r7, #27]
 8008d2c:	f7ff fd7c 	bl	8008828 <put_lfn>
				fs->wflag = 1;
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	2201      	movs	r2, #1
 8008d34:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008d36:	2100      	movs	r1, #0
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7ff fba9 	bl	8008490 <dir_next>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008d44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d107      	bne.n	8008d5c <dir_register+0x184>
 8008d4c:	6a3b      	ldr	r3, [r7, #32]
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	623b      	str	r3, [r7, #32]
 8008d52:	6a3b      	ldr	r3, [r7, #32]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1d5      	bne.n	8008d04 <dir_register+0x12c>
 8008d58:	e000      	b.n	8008d5c <dir_register+0x184>
				if (res != FR_OK) break;
 8008d5a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008d5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d128      	bne.n	8008db6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	4619      	mov	r1, r3
 8008d6a:	69f8      	ldr	r0, [r7, #28]
 8008d6c:	f7fe ff2e 	bl	8007bcc <move_window>
 8008d70:	4603      	mov	r3, r0
 8008d72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008d76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d11b      	bne.n	8008db6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	2220      	movs	r2, #32
 8008d84:	2100      	movs	r1, #0
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fe fd13 	bl	80077b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a18      	ldr	r0, [r3, #32]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	3324      	adds	r3, #36	; 0x24
 8008d94:	220b      	movs	r2, #11
 8008d96:	4619      	mov	r1, r3
 8008d98:	f7fe fcea 	bl	8007770 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	330c      	adds	r3, #12
 8008da8:	f002 0218 	and.w	r2, r2, #24
 8008dac:	b2d2      	uxtb	r2, r2
 8008dae:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	2201      	movs	r2, #1
 8008db4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008db6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3730      	adds	r7, #48	; 0x30
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	4ec4ec4f 	.word	0x4ec4ec4f

08008dc8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b08a      	sub	sp, #40	; 0x28
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	613b      	str	r3, [r7, #16]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	60fb      	str	r3, [r7, #12]
 8008de0:	2300      	movs	r3, #0
 8008de2:	617b      	str	r3, [r7, #20]
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	1c5a      	adds	r2, r3, #1
 8008dec:	61ba      	str	r2, [r7, #24]
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	4413      	add	r3, r2
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008df6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008df8:	2b1f      	cmp	r3, #31
 8008dfa:	d940      	bls.n	8008e7e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008dfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dfe:	2b2f      	cmp	r3, #47	; 0x2f
 8008e00:	d006      	beq.n	8008e10 <create_name+0x48>
 8008e02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e04:	2b5c      	cmp	r3, #92	; 0x5c
 8008e06:	d110      	bne.n	8008e2a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008e08:	e002      	b.n	8008e10 <create_name+0x48>
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	61bb      	str	r3, [r7, #24]
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	4413      	add	r3, r2
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	2b2f      	cmp	r3, #47	; 0x2f
 8008e1a:	d0f6      	beq.n	8008e0a <create_name+0x42>
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	4413      	add	r3, r2
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	2b5c      	cmp	r3, #92	; 0x5c
 8008e26:	d0f0      	beq.n	8008e0a <create_name+0x42>
			break;
 8008e28:	e02a      	b.n	8008e80 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	2bfe      	cmp	r3, #254	; 0xfe
 8008e2e:	d901      	bls.n	8008e34 <create_name+0x6c>
 8008e30:	2306      	movs	r3, #6
 8008e32:	e177      	b.n	8009124 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008e34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008e3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e3c:	2101      	movs	r1, #1
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fe fab0 	bl	80073a4 <ff_convert>
 8008e44:	4603      	mov	r3, r0
 8008e46:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008e48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <create_name+0x8a>
 8008e4e:	2306      	movs	r3, #6
 8008e50:	e168      	b.n	8009124 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008e52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e54:	2b7f      	cmp	r3, #127	; 0x7f
 8008e56:	d809      	bhi.n	8008e6c <create_name+0xa4>
 8008e58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	48b3      	ldr	r0, [pc, #716]	; (800912c <create_name+0x364>)
 8008e5e:	f7fe fce9 	bl	8007834 <chk_chr>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <create_name+0xa4>
 8008e68:	2306      	movs	r3, #6
 8008e6a:	e15b      	b.n	8009124 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	1c5a      	adds	r2, r3, #1
 8008e70:	617a      	str	r2, [r7, #20]
 8008e72:	005b      	lsls	r3, r3, #1
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	4413      	add	r3, r2
 8008e78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e7a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008e7c:	e7b4      	b.n	8008de8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008e7e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	441a      	add	r2, r3
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008e8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e8c:	2b1f      	cmp	r3, #31
 8008e8e:	d801      	bhi.n	8008e94 <create_name+0xcc>
 8008e90:	2304      	movs	r3, #4
 8008e92:	e000      	b.n	8008e96 <create_name+0xce>
 8008e94:	2300      	movs	r3, #0
 8008e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008e9a:	e011      	b.n	8008ec0 <create_name+0xf8>
		w = lfn[di - 1];
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	005b      	lsls	r3, r3, #1
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	881b      	ldrh	r3, [r3, #0]
 8008eac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008eae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008eb0:	2b20      	cmp	r3, #32
 8008eb2:	d002      	beq.n	8008eba <create_name+0xf2>
 8008eb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008eb6:	2b2e      	cmp	r3, #46	; 0x2e
 8008eb8:	d106      	bne.n	8008ec8 <create_name+0x100>
		di--;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1ea      	bne.n	8008e9c <create_name+0xd4>
 8008ec6:	e000      	b.n	8008eca <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008ec8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	005b      	lsls	r3, r3, #1
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d101      	bne.n	8008ee0 <create_name+0x118>
 8008edc:	2306      	movs	r3, #6
 8008ede:	e121      	b.n	8009124 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	3324      	adds	r3, #36	; 0x24
 8008ee4:	220b      	movs	r2, #11
 8008ee6:	2120      	movs	r1, #32
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fe fc62 	bl	80077b2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008eee:	2300      	movs	r3, #0
 8008ef0:	61bb      	str	r3, [r7, #24]
 8008ef2:	e002      	b.n	8008efa <create_name+0x132>
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	61bb      	str	r3, [r7, #24]
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	005b      	lsls	r3, r3, #1
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	4413      	add	r3, r2
 8008f02:	881b      	ldrh	r3, [r3, #0]
 8008f04:	2b20      	cmp	r3, #32
 8008f06:	d0f5      	beq.n	8008ef4 <create_name+0x12c>
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	005b      	lsls	r3, r3, #1
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	4413      	add	r3, r2
 8008f10:	881b      	ldrh	r3, [r3, #0]
 8008f12:	2b2e      	cmp	r3, #46	; 0x2e
 8008f14:	d0ee      	beq.n	8008ef4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d009      	beq.n	8008f30 <create_name+0x168>
 8008f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f20:	f043 0303 	orr.w	r3, r3, #3
 8008f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008f28:	e002      	b.n	8008f30 <create_name+0x168>
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	617b      	str	r3, [r7, #20]
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d009      	beq.n	8008f4a <create_name+0x182>
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	005b      	lsls	r3, r3, #1
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	4413      	add	r3, r2
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	2b2e      	cmp	r3, #46	; 0x2e
 8008f48:	d1ef      	bne.n	8008f2a <create_name+0x162>

	i = b = 0; ni = 8;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008f50:	2300      	movs	r3, #0
 8008f52:	623b      	str	r3, [r7, #32]
 8008f54:	2308      	movs	r3, #8
 8008f56:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	61ba      	str	r2, [r7, #24]
 8008f5e:	005b      	lsls	r3, r3, #1
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	4413      	add	r3, r2
 8008f64:	881b      	ldrh	r3, [r3, #0]
 8008f66:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008f68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 8090 	beq.w	8009090 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008f70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f72:	2b20      	cmp	r3, #32
 8008f74:	d006      	beq.n	8008f84 <create_name+0x1bc>
 8008f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f78:	2b2e      	cmp	r3, #46	; 0x2e
 8008f7a:	d10a      	bne.n	8008f92 <create_name+0x1ca>
 8008f7c:	69ba      	ldr	r2, [r7, #24]
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d006      	beq.n	8008f92 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f88:	f043 0303 	orr.w	r3, r3, #3
 8008f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f90:	e07d      	b.n	800908e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008f92:	6a3a      	ldr	r2, [r7, #32]
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d203      	bcs.n	8008fa2 <create_name+0x1da>
 8008f9a:	69ba      	ldr	r2, [r7, #24]
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d123      	bne.n	8008fea <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	2b0b      	cmp	r3, #11
 8008fa6:	d106      	bne.n	8008fb6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fac:	f043 0303 	orr.w	r3, r3, #3
 8008fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008fb4:	e06f      	b.n	8009096 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008fb6:	69ba      	ldr	r2, [r7, #24]
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d005      	beq.n	8008fca <create_name+0x202>
 8008fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fc2:	f043 0303 	orr.w	r3, r3, #3
 8008fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008fca:	69ba      	ldr	r2, [r7, #24]
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d860      	bhi.n	8009094 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	61bb      	str	r3, [r7, #24]
 8008fd6:	2308      	movs	r3, #8
 8008fd8:	623b      	str	r3, [r7, #32]
 8008fda:	230b      	movs	r3, #11
 8008fdc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008fde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008fe8:	e051      	b.n	800908e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008fea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008fec:	2b7f      	cmp	r3, #127	; 0x7f
 8008fee:	d914      	bls.n	800901a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008ff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fe f9d5 	bl	80073a4 <ff_convert>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008ffe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009000:	2b00      	cmp	r3, #0
 8009002:	d004      	beq.n	800900e <create_name+0x246>
 8009004:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009006:	3b80      	subs	r3, #128	; 0x80
 8009008:	4a49      	ldr	r2, [pc, #292]	; (8009130 <create_name+0x368>)
 800900a:	5cd3      	ldrb	r3, [r2, r3]
 800900c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800900e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009012:	f043 0302 	orr.w	r3, r3, #2
 8009016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800901a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800901c:	2b00      	cmp	r3, #0
 800901e:	d007      	beq.n	8009030 <create_name+0x268>
 8009020:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009022:	4619      	mov	r1, r3
 8009024:	4843      	ldr	r0, [pc, #268]	; (8009134 <create_name+0x36c>)
 8009026:	f7fe fc05 	bl	8007834 <chk_chr>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d008      	beq.n	8009042 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009030:	235f      	movs	r3, #95	; 0x5f
 8009032:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009038:	f043 0303 	orr.w	r3, r3, #3
 800903c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009040:	e01b      	b.n	800907a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009044:	2b40      	cmp	r3, #64	; 0x40
 8009046:	d909      	bls.n	800905c <create_name+0x294>
 8009048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800904a:	2b5a      	cmp	r3, #90	; 0x5a
 800904c:	d806      	bhi.n	800905c <create_name+0x294>
					b |= 2;
 800904e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009052:	f043 0302 	orr.w	r3, r3, #2
 8009056:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800905a:	e00e      	b.n	800907a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800905c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800905e:	2b60      	cmp	r3, #96	; 0x60
 8009060:	d90b      	bls.n	800907a <create_name+0x2b2>
 8009062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009064:	2b7a      	cmp	r3, #122	; 0x7a
 8009066:	d808      	bhi.n	800907a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009068:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800906c:	f043 0301 	orr.w	r3, r3, #1
 8009070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009074:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009076:	3b20      	subs	r3, #32
 8009078:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800907a:	6a3b      	ldr	r3, [r7, #32]
 800907c:	1c5a      	adds	r2, r3, #1
 800907e:	623a      	str	r2, [r7, #32]
 8009080:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009082:	b2d1      	uxtb	r1, r2
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	4413      	add	r3, r2
 8009088:	460a      	mov	r2, r1
 800908a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800908e:	e763      	b.n	8008f58 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009090:	bf00      	nop
 8009092:	e000      	b.n	8009096 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8009094:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800909c:	2be5      	cmp	r3, #229	; 0xe5
 800909e:	d103      	bne.n	80090a8 <create_name+0x2e0>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2205      	movs	r2, #5
 80090a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	2b08      	cmp	r3, #8
 80090ac:	d104      	bne.n	80090b8 <create_name+0x2f0>
 80090ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80090b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090bc:	f003 030c 	and.w	r3, r3, #12
 80090c0:	2b0c      	cmp	r3, #12
 80090c2:	d005      	beq.n	80090d0 <create_name+0x308>
 80090c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090c8:	f003 0303 	and.w	r3, r3, #3
 80090cc:	2b03      	cmp	r3, #3
 80090ce:	d105      	bne.n	80090dc <create_name+0x314>
 80090d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090d4:	f043 0302 	orr.w	r3, r3, #2
 80090d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80090dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090e0:	f003 0302 	and.w	r3, r3, #2
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d117      	bne.n	8009118 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80090e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090ec:	f003 0303 	and.w	r3, r3, #3
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d105      	bne.n	8009100 <create_name+0x338>
 80090f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090f8:	f043 0310 	orr.w	r3, r3, #16
 80090fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009100:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009104:	f003 030c 	and.w	r3, r3, #12
 8009108:	2b04      	cmp	r3, #4
 800910a:	d105      	bne.n	8009118 <create_name+0x350>
 800910c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009110:	f043 0308 	orr.w	r3, r3, #8
 8009114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800911e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009122:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009124:	4618      	mov	r0, r3
 8009126:	3728      	adds	r7, #40	; 0x28
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	0800b10c 	.word	0x0800b10c
 8009130:	0800b538 	.word	0x0800b538
 8009134:	0800b118 	.word	0x0800b118

08009138 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b086      	sub	sp, #24
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800914c:	e002      	b.n	8009154 <follow_path+0x1c>
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	3301      	adds	r3, #1
 8009152:	603b      	str	r3, [r7, #0]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	2b2f      	cmp	r3, #47	; 0x2f
 800915a:	d0f8      	beq.n	800914e <follow_path+0x16>
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	2b5c      	cmp	r3, #92	; 0x5c
 8009162:	d0f4      	beq.n	800914e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	2200      	movs	r2, #0
 8009168:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	2b1f      	cmp	r3, #31
 8009170:	d80a      	bhi.n	8009188 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2280      	movs	r2, #128	; 0x80
 8009176:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800917a:	2100      	movs	r1, #0
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f7ff f8fe 	bl	800837e <dir_sdi>
 8009182:	4603      	mov	r3, r0
 8009184:	75fb      	strb	r3, [r7, #23]
 8009186:	e048      	b.n	800921a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009188:	463b      	mov	r3, r7
 800918a:	4619      	mov	r1, r3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7ff fe1b 	bl	8008dc8 <create_name>
 8009192:	4603      	mov	r3, r0
 8009194:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009196:	7dfb      	ldrb	r3, [r7, #23]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d139      	bne.n	8009210 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7ff fc5b 	bl	8008a58 <dir_find>
 80091a2:	4603      	mov	r3, r0
 80091a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80091ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80091ae:	7dfb      	ldrb	r3, [r7, #23]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00a      	beq.n	80091ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80091b4:	7dfb      	ldrb	r3, [r7, #23]
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	d12c      	bne.n	8009214 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80091ba:	7afb      	ldrb	r3, [r7, #11]
 80091bc:	f003 0304 	and.w	r3, r3, #4
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d127      	bne.n	8009214 <follow_path+0xdc>
 80091c4:	2305      	movs	r3, #5
 80091c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80091c8:	e024      	b.n	8009214 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80091ca:	7afb      	ldrb	r3, [r7, #11]
 80091cc:	f003 0304 	and.w	r3, r3, #4
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d121      	bne.n	8009218 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	799b      	ldrb	r3, [r3, #6]
 80091d8:	f003 0310 	and.w	r3, r3, #16
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d102      	bne.n	80091e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80091e0:	2305      	movs	r3, #5
 80091e2:	75fb      	strb	r3, [r7, #23]
 80091e4:	e019      	b.n	800921a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	695b      	ldr	r3, [r3, #20]
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	8992      	ldrh	r2, [r2, #12]
 80091f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80091f8:	fb02 f200 	mul.w	r2, r2, r0
 80091fc:	1a9b      	subs	r3, r3, r2
 80091fe:	440b      	add	r3, r1
 8009200:	4619      	mov	r1, r3
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f7ff fa61 	bl	80086ca <ld_clust>
 8009208:	4602      	mov	r2, r0
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800920e:	e7bb      	b.n	8009188 <follow_path+0x50>
			if (res != FR_OK) break;
 8009210:	bf00      	nop
 8009212:	e002      	b.n	800921a <follow_path+0xe2>
				break;
 8009214:	bf00      	nop
 8009216:	e000      	b.n	800921a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009218:	bf00      	nop
			}
		}
	}

	return res;
 800921a:	7dfb      	ldrb	r3, [r7, #23]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3718      	adds	r7, #24
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009224:	b480      	push	{r7}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800922c:	f04f 33ff 	mov.w	r3, #4294967295
 8009230:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d031      	beq.n	800929e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	617b      	str	r3, [r7, #20]
 8009240:	e002      	b.n	8009248 <get_ldnumber+0x24>
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	3301      	adds	r3, #1
 8009246:	617b      	str	r3, [r7, #20]
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	2b1f      	cmp	r3, #31
 800924e:	d903      	bls.n	8009258 <get_ldnumber+0x34>
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	2b3a      	cmp	r3, #58	; 0x3a
 8009256:	d1f4      	bne.n	8009242 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	2b3a      	cmp	r3, #58	; 0x3a
 800925e:	d11c      	bne.n	800929a <get_ldnumber+0x76>
			tp = *path;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	1c5a      	adds	r2, r3, #1
 800926a:	60fa      	str	r2, [r7, #12]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	3b30      	subs	r3, #48	; 0x30
 8009270:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2b09      	cmp	r3, #9
 8009276:	d80e      	bhi.n	8009296 <get_ldnumber+0x72>
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	429a      	cmp	r2, r3
 800927e:	d10a      	bne.n	8009296 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d107      	bne.n	8009296 <get_ldnumber+0x72>
					vol = (int)i;
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	3301      	adds	r3, #1
 800928e:	617b      	str	r3, [r7, #20]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	e002      	b.n	80092a0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800929a:	2300      	movs	r3, #0
 800929c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800929e:	693b      	ldr	r3, [r7, #16]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	371c      	adds	r7, #28
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	70da      	strb	r2, [r3, #3]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f04f 32ff 	mov.w	r2, #4294967295
 80092c2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80092c4:	6839      	ldr	r1, [r7, #0]
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7fe fc80 	bl	8007bcc <move_window>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <check_fs+0x2a>
 80092d2:	2304      	movs	r3, #4
 80092d4:	e038      	b.n	8009348 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	3338      	adds	r3, #56	; 0x38
 80092da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fe f9c4 	bl	800766c <ld_word>
 80092e4:	4603      	mov	r3, r0
 80092e6:	461a      	mov	r2, r3
 80092e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d001      	beq.n	80092f4 <check_fs+0x48>
 80092f0:	2303      	movs	r3, #3
 80092f2:	e029      	b.n	8009348 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80092fa:	2be9      	cmp	r3, #233	; 0xe9
 80092fc:	d009      	beq.n	8009312 <check_fs+0x66>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009304:	2beb      	cmp	r3, #235	; 0xeb
 8009306:	d11e      	bne.n	8009346 <check_fs+0x9a>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800930e:	2b90      	cmp	r3, #144	; 0x90
 8009310:	d119      	bne.n	8009346 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	3338      	adds	r3, #56	; 0x38
 8009316:	3336      	adds	r3, #54	; 0x36
 8009318:	4618      	mov	r0, r3
 800931a:	f7fe f9bf 	bl	800769c <ld_dword>
 800931e:	4603      	mov	r3, r0
 8009320:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009324:	4a0a      	ldr	r2, [pc, #40]	; (8009350 <check_fs+0xa4>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d101      	bne.n	800932e <check_fs+0x82>
 800932a:	2300      	movs	r3, #0
 800932c:	e00c      	b.n	8009348 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	3338      	adds	r3, #56	; 0x38
 8009332:	3352      	adds	r3, #82	; 0x52
 8009334:	4618      	mov	r0, r3
 8009336:	f7fe f9b1 	bl	800769c <ld_dword>
 800933a:	4602      	mov	r2, r0
 800933c:	4b05      	ldr	r3, [pc, #20]	; (8009354 <check_fs+0xa8>)
 800933e:	429a      	cmp	r2, r3
 8009340:	d101      	bne.n	8009346 <check_fs+0x9a>
 8009342:	2300      	movs	r3, #0
 8009344:	e000      	b.n	8009348 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009346:	2302      	movs	r3, #2
}
 8009348:	4618      	mov	r0, r3
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	00544146 	.word	0x00544146
 8009354:	33544146 	.word	0x33544146

08009358 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b096      	sub	sp, #88	; 0x58
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	4613      	mov	r3, r2
 8009364:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	2200      	movs	r2, #0
 800936a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	f7ff ff59 	bl	8009224 <get_ldnumber>
 8009372:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009376:	2b00      	cmp	r3, #0
 8009378:	da01      	bge.n	800937e <find_volume+0x26>
 800937a:	230b      	movs	r3, #11
 800937c:	e268      	b.n	8009850 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800937e:	4ab0      	ldr	r2, [pc, #704]	; (8009640 <find_volume+0x2e8>)
 8009380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009386:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938a:	2b00      	cmp	r3, #0
 800938c:	d101      	bne.n	8009392 <find_volume+0x3a>
 800938e:	230c      	movs	r3, #12
 8009390:	e25e      	b.n	8009850 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009396:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009398:	79fb      	ldrb	r3, [r7, #7]
 800939a:	f023 0301 	bic.w	r3, r3, #1
 800939e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80093a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d01a      	beq.n	80093de <find_volume+0x86>
		stat = disk_status(fs->drv);
 80093a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093aa:	785b      	ldrb	r3, [r3, #1]
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7fe f8bf 	bl	8007530 <disk_status>
 80093b2:	4603      	mov	r3, r0
 80093b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80093b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d10c      	bne.n	80093de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80093c4:	79fb      	ldrb	r3, [r7, #7]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d007      	beq.n	80093da <find_volume+0x82>
 80093ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093ce:	f003 0304 	and.w	r3, r3, #4
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80093d6:	230a      	movs	r3, #10
 80093d8:	e23a      	b.n	8009850 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80093da:	2300      	movs	r3, #0
 80093dc:	e238      	b.n	8009850 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80093de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e0:	2200      	movs	r2, #0
 80093e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80093e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80093ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ee:	785b      	ldrb	r3, [r3, #1]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7fe f8b7 	bl	8007564 <disk_initialize>
 80093f6:	4603      	mov	r3, r0
 80093f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80093fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009400:	f003 0301 	and.w	r3, r3, #1
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009408:	2303      	movs	r3, #3
 800940a:	e221      	b.n	8009850 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800940c:	79fb      	ldrb	r3, [r7, #7]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d007      	beq.n	8009422 <find_volume+0xca>
 8009412:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009416:	f003 0304 	and.w	r3, r3, #4
 800941a:	2b00      	cmp	r3, #0
 800941c:	d001      	beq.n	8009422 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800941e:	230a      	movs	r3, #10
 8009420:	e216      	b.n	8009850 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009424:	7858      	ldrb	r0, [r3, #1]
 8009426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009428:	330c      	adds	r3, #12
 800942a:	461a      	mov	r2, r3
 800942c:	2102      	movs	r1, #2
 800942e:	f7fe f8ff 	bl	8007630 <disk_ioctl>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d001      	beq.n	800943c <find_volume+0xe4>
 8009438:	2301      	movs	r3, #1
 800943a:	e209      	b.n	8009850 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800943c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943e:	899b      	ldrh	r3, [r3, #12]
 8009440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009444:	d80d      	bhi.n	8009462 <find_volume+0x10a>
 8009446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009448:	899b      	ldrh	r3, [r3, #12]
 800944a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800944e:	d308      	bcc.n	8009462 <find_volume+0x10a>
 8009450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009452:	899b      	ldrh	r3, [r3, #12]
 8009454:	461a      	mov	r2, r3
 8009456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009458:	899b      	ldrh	r3, [r3, #12]
 800945a:	3b01      	subs	r3, #1
 800945c:	4013      	ands	r3, r2
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <find_volume+0x10e>
 8009462:	2301      	movs	r3, #1
 8009464:	e1f4      	b.n	8009850 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009466:	2300      	movs	r3, #0
 8009468:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800946a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800946c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800946e:	f7ff ff1d 	bl	80092ac <check_fs>
 8009472:	4603      	mov	r3, r0
 8009474:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009478:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800947c:	2b02      	cmp	r3, #2
 800947e:	d14b      	bne.n	8009518 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009480:	2300      	movs	r3, #0
 8009482:	643b      	str	r3, [r7, #64]	; 0x40
 8009484:	e01f      	b.n	80094c6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009488:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800948c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800948e:	011b      	lsls	r3, r3, #4
 8009490:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009494:	4413      	add	r3, r2
 8009496:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949a:	3304      	adds	r3, #4
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d006      	beq.n	80094b0 <find_volume+0x158>
 80094a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a4:	3308      	adds	r3, #8
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fe f8f8 	bl	800769c <ld_dword>
 80094ac:	4602      	mov	r2, r0
 80094ae:	e000      	b.n	80094b2 <find_volume+0x15a>
 80094b0:	2200      	movs	r2, #0
 80094b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80094ba:	440b      	add	r3, r1
 80094bc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80094c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094c2:	3301      	adds	r3, #1
 80094c4:	643b      	str	r3, [r7, #64]	; 0x40
 80094c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d9dc      	bls.n	8009486 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80094cc:	2300      	movs	r3, #0
 80094ce:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80094d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d002      	beq.n	80094dc <find_volume+0x184>
 80094d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094d8:	3b01      	subs	r3, #1
 80094da:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80094dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80094e4:	4413      	add	r3, r2
 80094e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80094ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80094ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d005      	beq.n	80094fe <find_volume+0x1a6>
 80094f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80094f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094f6:	f7ff fed9 	bl	80092ac <check_fs>
 80094fa:	4603      	mov	r3, r0
 80094fc:	e000      	b.n	8009500 <find_volume+0x1a8>
 80094fe:	2303      	movs	r3, #3
 8009500:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009504:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009508:	2b01      	cmp	r3, #1
 800950a:	d905      	bls.n	8009518 <find_volume+0x1c0>
 800950c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800950e:	3301      	adds	r3, #1
 8009510:	643b      	str	r3, [r7, #64]	; 0x40
 8009512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009514:	2b03      	cmp	r3, #3
 8009516:	d9e1      	bls.n	80094dc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009518:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800951c:	2b04      	cmp	r3, #4
 800951e:	d101      	bne.n	8009524 <find_volume+0x1cc>
 8009520:	2301      	movs	r3, #1
 8009522:	e195      	b.n	8009850 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009524:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009528:	2b01      	cmp	r3, #1
 800952a:	d901      	bls.n	8009530 <find_volume+0x1d8>
 800952c:	230d      	movs	r3, #13
 800952e:	e18f      	b.n	8009850 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009532:	3338      	adds	r3, #56	; 0x38
 8009534:	330b      	adds	r3, #11
 8009536:	4618      	mov	r0, r3
 8009538:	f7fe f898 	bl	800766c <ld_word>
 800953c:	4603      	mov	r3, r0
 800953e:	461a      	mov	r2, r3
 8009540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009542:	899b      	ldrh	r3, [r3, #12]
 8009544:	429a      	cmp	r2, r3
 8009546:	d001      	beq.n	800954c <find_volume+0x1f4>
 8009548:	230d      	movs	r3, #13
 800954a:	e181      	b.n	8009850 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800954c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954e:	3338      	adds	r3, #56	; 0x38
 8009550:	3316      	adds	r3, #22
 8009552:	4618      	mov	r0, r3
 8009554:	f7fe f88a 	bl	800766c <ld_word>
 8009558:	4603      	mov	r3, r0
 800955a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800955c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800955e:	2b00      	cmp	r3, #0
 8009560:	d106      	bne.n	8009570 <find_volume+0x218>
 8009562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009564:	3338      	adds	r3, #56	; 0x38
 8009566:	3324      	adds	r3, #36	; 0x24
 8009568:	4618      	mov	r0, r3
 800956a:	f7fe f897 	bl	800769c <ld_dword>
 800956e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009572:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009574:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009578:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800957c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009582:	789b      	ldrb	r3, [r3, #2]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d005      	beq.n	8009594 <find_volume+0x23c>
 8009588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958a:	789b      	ldrb	r3, [r3, #2]
 800958c:	2b02      	cmp	r3, #2
 800958e:	d001      	beq.n	8009594 <find_volume+0x23c>
 8009590:	230d      	movs	r3, #13
 8009592:	e15d      	b.n	8009850 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009596:	789b      	ldrb	r3, [r3, #2]
 8009598:	461a      	mov	r2, r3
 800959a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800959c:	fb02 f303 	mul.w	r3, r2, r3
 80095a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80095a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80095ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b0:	895b      	ldrh	r3, [r3, #10]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d008      	beq.n	80095c8 <find_volume+0x270>
 80095b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b8:	895b      	ldrh	r3, [r3, #10]
 80095ba:	461a      	mov	r2, r3
 80095bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095be:	895b      	ldrh	r3, [r3, #10]
 80095c0:	3b01      	subs	r3, #1
 80095c2:	4013      	ands	r3, r2
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <find_volume+0x274>
 80095c8:	230d      	movs	r3, #13
 80095ca:	e141      	b.n	8009850 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80095cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ce:	3338      	adds	r3, #56	; 0x38
 80095d0:	3311      	adds	r3, #17
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7fe f84a 	bl	800766c <ld_word>
 80095d8:	4603      	mov	r3, r0
 80095da:	461a      	mov	r2, r3
 80095dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80095e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e2:	891b      	ldrh	r3, [r3, #8]
 80095e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095e6:	8992      	ldrh	r2, [r2, #12]
 80095e8:	0952      	lsrs	r2, r2, #5
 80095ea:	b292      	uxth	r2, r2
 80095ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80095f0:	fb02 f201 	mul.w	r2, r2, r1
 80095f4:	1a9b      	subs	r3, r3, r2
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <find_volume+0x2a8>
 80095fc:	230d      	movs	r3, #13
 80095fe:	e127      	b.n	8009850 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009602:	3338      	adds	r3, #56	; 0x38
 8009604:	3313      	adds	r3, #19
 8009606:	4618      	mov	r0, r3
 8009608:	f7fe f830 	bl	800766c <ld_word>
 800960c:	4603      	mov	r3, r0
 800960e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009612:	2b00      	cmp	r3, #0
 8009614:	d106      	bne.n	8009624 <find_volume+0x2cc>
 8009616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009618:	3338      	adds	r3, #56	; 0x38
 800961a:	3320      	adds	r3, #32
 800961c:	4618      	mov	r0, r3
 800961e:	f7fe f83d 	bl	800769c <ld_dword>
 8009622:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009626:	3338      	adds	r3, #56	; 0x38
 8009628:	330e      	adds	r3, #14
 800962a:	4618      	mov	r0, r3
 800962c:	f7fe f81e 	bl	800766c <ld_word>
 8009630:	4603      	mov	r3, r0
 8009632:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009634:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009636:	2b00      	cmp	r3, #0
 8009638:	d104      	bne.n	8009644 <find_volume+0x2ec>
 800963a:	230d      	movs	r3, #13
 800963c:	e108      	b.n	8009850 <find_volume+0x4f8>
 800963e:	bf00      	nop
 8009640:	20000118 	.word	0x20000118

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009644:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009648:	4413      	add	r3, r2
 800964a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800964c:	8911      	ldrh	r1, [r2, #8]
 800964e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009650:	8992      	ldrh	r2, [r2, #12]
 8009652:	0952      	lsrs	r2, r2, #5
 8009654:	b292      	uxth	r2, r2
 8009656:	fbb1 f2f2 	udiv	r2, r1, r2
 800965a:	b292      	uxth	r2, r2
 800965c:	4413      	add	r3, r2
 800965e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009664:	429a      	cmp	r2, r3
 8009666:	d201      	bcs.n	800966c <find_volume+0x314>
 8009668:	230d      	movs	r3, #13
 800966a:	e0f1      	b.n	8009850 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800966c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800966e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009674:	8952      	ldrh	r2, [r2, #10]
 8009676:	fbb3 f3f2 	udiv	r3, r3, r2
 800967a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967e:	2b00      	cmp	r3, #0
 8009680:	d101      	bne.n	8009686 <find_volume+0x32e>
 8009682:	230d      	movs	r3, #13
 8009684:	e0e4      	b.n	8009850 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8009686:	2303      	movs	r3, #3
 8009688:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009692:	4293      	cmp	r3, r2
 8009694:	d802      	bhi.n	800969c <find_volume+0x344>
 8009696:	2302      	movs	r3, #2
 8009698:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969e:	f640 72f5 	movw	r2, #4085	; 0xff5
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d802      	bhi.n	80096ac <find_volume+0x354>
 80096a6:	2301      	movs	r3, #1
 80096a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80096ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ae:	1c9a      	adds	r2, r3, #2
 80096b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b2:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80096b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096b8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80096ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80096bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096be:	441a      	add	r2, r3
 80096c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80096c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c8:	441a      	add	r2, r3
 80096ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096cc:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80096ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096d2:	2b03      	cmp	r3, #3
 80096d4:	d11e      	bne.n	8009714 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80096d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d8:	3338      	adds	r3, #56	; 0x38
 80096da:	332a      	adds	r3, #42	; 0x2a
 80096dc:	4618      	mov	r0, r3
 80096de:	f7fd ffc5 	bl	800766c <ld_word>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d001      	beq.n	80096ec <find_volume+0x394>
 80096e8:	230d      	movs	r3, #13
 80096ea:	e0b1      	b.n	8009850 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80096ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ee:	891b      	ldrh	r3, [r3, #8]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d001      	beq.n	80096f8 <find_volume+0x3a0>
 80096f4:	230d      	movs	r3, #13
 80096f6:	e0ab      	b.n	8009850 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80096f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fa:	3338      	adds	r3, #56	; 0x38
 80096fc:	332c      	adds	r3, #44	; 0x2c
 80096fe:	4618      	mov	r0, r3
 8009700:	f7fd ffcc 	bl	800769c <ld_dword>
 8009704:	4602      	mov	r2, r0
 8009706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009708:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800970a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970c:	69db      	ldr	r3, [r3, #28]
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	647b      	str	r3, [r7, #68]	; 0x44
 8009712:	e01f      	b.n	8009754 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009716:	891b      	ldrh	r3, [r3, #8]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d101      	bne.n	8009720 <find_volume+0x3c8>
 800971c:	230d      	movs	r3, #13
 800971e:	e097      	b.n	8009850 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009722:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009726:	441a      	add	r2, r3
 8009728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800972c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009730:	2b02      	cmp	r3, #2
 8009732:	d103      	bne.n	800973c <find_volume+0x3e4>
 8009734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009736:	69db      	ldr	r3, [r3, #28]
 8009738:	005b      	lsls	r3, r3, #1
 800973a:	e00a      	b.n	8009752 <find_volume+0x3fa>
 800973c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973e:	69da      	ldr	r2, [r3, #28]
 8009740:	4613      	mov	r3, r2
 8009742:	005b      	lsls	r3, r3, #1
 8009744:	4413      	add	r3, r2
 8009746:	085a      	lsrs	r2, r3, #1
 8009748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974a:	69db      	ldr	r3, [r3, #28]
 800974c:	f003 0301 	and.w	r3, r3, #1
 8009750:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009752:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009756:	6a1a      	ldr	r2, [r3, #32]
 8009758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975a:	899b      	ldrh	r3, [r3, #12]
 800975c:	4619      	mov	r1, r3
 800975e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009760:	440b      	add	r3, r1
 8009762:	3b01      	subs	r3, #1
 8009764:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009766:	8989      	ldrh	r1, [r1, #12]
 8009768:	fbb3 f3f1 	udiv	r3, r3, r1
 800976c:	429a      	cmp	r2, r3
 800976e:	d201      	bcs.n	8009774 <find_volume+0x41c>
 8009770:	230d      	movs	r3, #13
 8009772:	e06d      	b.n	8009850 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009776:	f04f 32ff 	mov.w	r2, #4294967295
 800977a:	619a      	str	r2, [r3, #24]
 800977c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977e:	699a      	ldr	r2, [r3, #24]
 8009780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009782:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009786:	2280      	movs	r2, #128	; 0x80
 8009788:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800978a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800978e:	2b03      	cmp	r3, #3
 8009790:	d149      	bne.n	8009826 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009794:	3338      	adds	r3, #56	; 0x38
 8009796:	3330      	adds	r3, #48	; 0x30
 8009798:	4618      	mov	r0, r3
 800979a:	f7fd ff67 	bl	800766c <ld_word>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d140      	bne.n	8009826 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80097a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097a6:	3301      	adds	r3, #1
 80097a8:	4619      	mov	r1, r3
 80097aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097ac:	f7fe fa0e 	bl	8007bcc <move_window>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d137      	bne.n	8009826 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80097b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b8:	2200      	movs	r2, #0
 80097ba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80097bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097be:	3338      	adds	r3, #56	; 0x38
 80097c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7fd ff51 	bl	800766c <ld_word>
 80097ca:	4603      	mov	r3, r0
 80097cc:	461a      	mov	r2, r3
 80097ce:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d127      	bne.n	8009826 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80097d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d8:	3338      	adds	r3, #56	; 0x38
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fd ff5e 	bl	800769c <ld_dword>
 80097e0:	4602      	mov	r2, r0
 80097e2:	4b1d      	ldr	r3, [pc, #116]	; (8009858 <find_volume+0x500>)
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d11e      	bne.n	8009826 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80097e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ea:	3338      	adds	r3, #56	; 0x38
 80097ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fd ff53 	bl	800769c <ld_dword>
 80097f6:	4602      	mov	r2, r0
 80097f8:	4b18      	ldr	r3, [pc, #96]	; (800985c <find_volume+0x504>)
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d113      	bne.n	8009826 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80097fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009800:	3338      	adds	r3, #56	; 0x38
 8009802:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009806:	4618      	mov	r0, r3
 8009808:	f7fd ff48 	bl	800769c <ld_dword>
 800980c:	4602      	mov	r2, r0
 800980e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009810:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009814:	3338      	adds	r3, #56	; 0x38
 8009816:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800981a:	4618      	mov	r0, r3
 800981c:	f7fd ff3e 	bl	800769c <ld_dword>
 8009820:	4602      	mov	r2, r0
 8009822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009824:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009828:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800982c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800982e:	4b0c      	ldr	r3, [pc, #48]	; (8009860 <find_volume+0x508>)
 8009830:	881b      	ldrh	r3, [r3, #0]
 8009832:	3301      	adds	r3, #1
 8009834:	b29a      	uxth	r2, r3
 8009836:	4b0a      	ldr	r3, [pc, #40]	; (8009860 <find_volume+0x508>)
 8009838:	801a      	strh	r2, [r3, #0]
 800983a:	4b09      	ldr	r3, [pc, #36]	; (8009860 <find_volume+0x508>)
 800983c:	881a      	ldrh	r2, [r3, #0]
 800983e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009840:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009844:	4a07      	ldr	r2, [pc, #28]	; (8009864 <find_volume+0x50c>)
 8009846:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009848:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800984a:	f7fe f957 	bl	8007afc <clear_lock>
#endif
	return FR_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3758      	adds	r7, #88	; 0x58
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	41615252 	.word	0x41615252
 800985c:	61417272 	.word	0x61417272
 8009860:	2000011c 	.word	0x2000011c
 8009864:	20000140 	.word	0x20000140

08009868 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009872:	2309      	movs	r3, #9
 8009874:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d01c      	beq.n	80098b6 <validate+0x4e>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d018      	beq.n	80098b6 <validate+0x4e>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d013      	beq.n	80098b6 <validate+0x4e>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	889a      	ldrh	r2, [r3, #4]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	88db      	ldrh	r3, [r3, #6]
 8009898:	429a      	cmp	r2, r3
 800989a:	d10c      	bne.n	80098b6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	785b      	ldrb	r3, [r3, #1]
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fd fe44 	bl	8007530 <disk_status>
 80098a8:	4603      	mov	r3, r0
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d101      	bne.n	80098b6 <validate+0x4e>
			res = FR_OK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d102      	bne.n	80098c2 <validate+0x5a>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	e000      	b.n	80098c4 <validate+0x5c>
 80098c2:	2300      	movs	r3, #0
 80098c4:	683a      	ldr	r2, [r7, #0]
 80098c6:	6013      	str	r3, [r2, #0]
	return res;
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
	...

080098d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b088      	sub	sp, #32
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	4613      	mov	r3, r2
 80098e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80098e6:	f107 0310 	add.w	r3, r7, #16
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7ff fc9a 	bl	8009224 <get_ldnumber>
 80098f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	da01      	bge.n	80098fc <f_mount+0x28>
 80098f8:	230b      	movs	r3, #11
 80098fa:	e02b      	b.n	8009954 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80098fc:	4a17      	ldr	r2, [pc, #92]	; (800995c <f_mount+0x88>)
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009904:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d005      	beq.n	8009918 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800990c:	69b8      	ldr	r0, [r7, #24]
 800990e:	f7fe f8f5 	bl	8007afc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	2200      	movs	r2, #0
 8009916:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d002      	beq.n	8009924 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	490d      	ldr	r1, [pc, #52]	; (800995c <f_mount+0x88>)
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <f_mount+0x66>
 8009934:	79fb      	ldrb	r3, [r7, #7]
 8009936:	2b01      	cmp	r3, #1
 8009938:	d001      	beq.n	800993e <f_mount+0x6a>
 800993a:	2300      	movs	r3, #0
 800993c:	e00a      	b.n	8009954 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800993e:	f107 010c 	add.w	r1, r7, #12
 8009942:	f107 0308 	add.w	r3, r7, #8
 8009946:	2200      	movs	r2, #0
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff fd05 	bl	8009358 <find_volume>
 800994e:	4603      	mov	r3, r0
 8009950:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009952:	7dfb      	ldrb	r3, [r7, #23]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3720      	adds	r7, #32
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	20000118 	.word	0x20000118

08009960 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b09a      	sub	sp, #104	; 0x68
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	4613      	mov	r3, r2
 800996c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d101      	bne.n	8009978 <f_open+0x18>
 8009974:	2309      	movs	r3, #9
 8009976:	e1bb      	b.n	8009cf0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009978:	79fb      	ldrb	r3, [r7, #7]
 800997a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800997e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009980:	79fa      	ldrb	r2, [r7, #7]
 8009982:	f107 0114 	add.w	r1, r7, #20
 8009986:	f107 0308 	add.w	r3, r7, #8
 800998a:	4618      	mov	r0, r3
 800998c:	f7ff fce4 	bl	8009358 <find_volume>
 8009990:	4603      	mov	r3, r0
 8009992:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8009996:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800999a:	2b00      	cmp	r3, #0
 800999c:	f040 819f 	bne.w	8009cde <f_open+0x37e>
		dj.obj.fs = fs;
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	f107 0318 	add.w	r3, r7, #24
 80099aa:	4611      	mov	r1, r2
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7ff fbc3 	bl	8009138 <follow_path>
 80099b2:	4603      	mov	r3, r0
 80099b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80099b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d11a      	bne.n	80099f6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80099c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80099c4:	b25b      	sxtb	r3, r3
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	da03      	bge.n	80099d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80099ca:	2306      	movs	r3, #6
 80099cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80099d0:	e011      	b.n	80099f6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80099d2:	79fb      	ldrb	r3, [r7, #7]
 80099d4:	f023 0301 	bic.w	r3, r3, #1
 80099d8:	2b00      	cmp	r3, #0
 80099da:	bf14      	ite	ne
 80099dc:	2301      	movne	r3, #1
 80099de:	2300      	moveq	r3, #0
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	461a      	mov	r2, r3
 80099e4:	f107 0318 	add.w	r3, r7, #24
 80099e8:	4611      	mov	r1, r2
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fd ff3e 	bl	800786c <chk_lock>
 80099f0:	4603      	mov	r3, r0
 80099f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80099f6:	79fb      	ldrb	r3, [r7, #7]
 80099f8:	f003 031c 	and.w	r3, r3, #28
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d07f      	beq.n	8009b00 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009a00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d017      	beq.n	8009a38 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009a08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	d10e      	bne.n	8009a2e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009a10:	f7fd ff88 	bl	8007924 <enq_lock>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d006      	beq.n	8009a28 <f_open+0xc8>
 8009a1a:	f107 0318 	add.w	r3, r7, #24
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7ff f8da 	bl	8008bd8 <dir_register>
 8009a24:	4603      	mov	r3, r0
 8009a26:	e000      	b.n	8009a2a <f_open+0xca>
 8009a28:	2312      	movs	r3, #18
 8009a2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009a2e:	79fb      	ldrb	r3, [r7, #7]
 8009a30:	f043 0308 	orr.w	r3, r3, #8
 8009a34:	71fb      	strb	r3, [r7, #7]
 8009a36:	e010      	b.n	8009a5a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009a38:	7fbb      	ldrb	r3, [r7, #30]
 8009a3a:	f003 0311 	and.w	r3, r3, #17
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d003      	beq.n	8009a4a <f_open+0xea>
					res = FR_DENIED;
 8009a42:	2307      	movs	r3, #7
 8009a44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009a48:	e007      	b.n	8009a5a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009a4a:	79fb      	ldrb	r3, [r7, #7]
 8009a4c:	f003 0304 	and.w	r3, r3, #4
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d002      	beq.n	8009a5a <f_open+0xfa>
 8009a54:	2308      	movs	r3, #8
 8009a56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009a5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d168      	bne.n	8009b34 <f_open+0x1d4>
 8009a62:	79fb      	ldrb	r3, [r7, #7]
 8009a64:	f003 0308 	and.w	r3, r3, #8
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d063      	beq.n	8009b34 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009a6c:	f7fd fb14 	bl	8007098 <get_fattime>
 8009a70:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a74:	330e      	adds	r3, #14
 8009a76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7fd fe4d 	bl	8007718 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a80:	3316      	adds	r3, #22
 8009a82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fd fe47 	bl	8007718 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8c:	330b      	adds	r3, #11
 8009a8e:	2220      	movs	r2, #32
 8009a90:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a96:	4611      	mov	r1, r2
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7fe fe16 	bl	80086ca <ld_clust>
 8009a9e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fe fe2e 	bl	8008708 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	331c      	adds	r3, #28
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fd fe30 	bl	8007718 <st_dword>
					fs->wflag = 1;
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	2201      	movs	r2, #1
 8009abc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d037      	beq.n	8009b34 <f_open+0x1d4>
						dw = fs->winsect;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ac8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8009aca:	f107 0318 	add.w	r3, r7, #24
 8009ace:	2200      	movs	r2, #0
 8009ad0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fe fb1e 	bl	8008114 <remove_chain>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8009ade:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d126      	bne.n	8009b34 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fe f86e 	bl	8007bcc <move_window>
 8009af0:	4603      	mov	r3, r0
 8009af2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009afa:	3a01      	subs	r2, #1
 8009afc:	615a      	str	r2, [r3, #20]
 8009afe:	e019      	b.n	8009b34 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009b00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d115      	bne.n	8009b34 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009b08:	7fbb      	ldrb	r3, [r7, #30]
 8009b0a:	f003 0310 	and.w	r3, r3, #16
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d003      	beq.n	8009b1a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009b12:	2304      	movs	r3, #4
 8009b14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009b18:	e00c      	b.n	8009b34 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009b1a:	79fb      	ldrb	r3, [r7, #7]
 8009b1c:	f003 0302 	and.w	r3, r3, #2
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d007      	beq.n	8009b34 <f_open+0x1d4>
 8009b24:	7fbb      	ldrb	r3, [r7, #30]
 8009b26:	f003 0301 	and.w	r3, r3, #1
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d002      	beq.n	8009b34 <f_open+0x1d4>
						res = FR_DENIED;
 8009b2e:	2307      	movs	r3, #7
 8009b30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009b34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d128      	bne.n	8009b8e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009b3c:	79fb      	ldrb	r3, [r7, #7]
 8009b3e:	f003 0308 	and.w	r3, r3, #8
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d003      	beq.n	8009b4e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009b46:	79fb      	ldrb	r3, [r7, #7]
 8009b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b4c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009b56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009b5c:	79fb      	ldrb	r3, [r7, #7]
 8009b5e:	f023 0301 	bic.w	r3, r3, #1
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	bf14      	ite	ne
 8009b66:	2301      	movne	r3, #1
 8009b68:	2300      	moveq	r3, #0
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	f107 0318 	add.w	r3, r7, #24
 8009b72:	4611      	mov	r1, r2
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7fd fef7 	bl	8007968 <inc_lock>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	691b      	ldr	r3, [r3, #16]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d102      	bne.n	8009b8e <f_open+0x22e>
 8009b88:	2302      	movs	r3, #2
 8009b8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009b8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f040 80a3 	bne.w	8009cde <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7fe fd93 	bl	80086ca <ld_clust>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bac:	331c      	adds	r3, #28
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fd fd74 	bl	800769c <ld_dword>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009bc0:	697a      	ldr	r2, [r7, #20]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	88da      	ldrh	r2, [r3, #6]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	79fa      	ldrb	r2, [r7, #7]
 8009bd2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	3330      	adds	r3, #48	; 0x30
 8009bea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009bee:	2100      	movs	r1, #0
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7fd fdde 	bl	80077b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009bf6:	79fb      	ldrb	r3, [r7, #7]
 8009bf8:	f003 0320 	and.w	r3, r3, #32
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d06e      	beq.n	8009cde <f_open+0x37e>
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d06a      	beq.n	8009cde <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	68da      	ldr	r2, [r3, #12]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	895b      	ldrh	r3, [r3, #10]
 8009c14:	461a      	mov	r2, r3
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	899b      	ldrh	r3, [r3, #12]
 8009c1a:	fb03 f302 	mul.w	r3, r3, r2
 8009c1e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c2c:	e016      	b.n	8009c5c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fe f887 	bl	8007d46 <get_fat>
 8009c38:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009c3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d802      	bhi.n	8009c46 <f_open+0x2e6>
 8009c40:	2302      	movs	r3, #2
 8009c42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009c46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c4c:	d102      	bne.n	8009c54 <f_open+0x2f4>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009c54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d103      	bne.n	8009c6c <f_open+0x30c>
 8009c64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d8e0      	bhi.n	8009c2e <f_open+0x2ce>
				}
				fp->clust = clst;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c70:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009c72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d131      	bne.n	8009cde <f_open+0x37e>
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	899b      	ldrh	r3, [r3, #12]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c82:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c86:	fb02 f201 	mul.w	r2, r2, r1
 8009c8a:	1a9b      	subs	r3, r3, r2
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d026      	beq.n	8009cde <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7fe f837 	bl	8007d08 <clust2sect>
 8009c9a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d103      	bne.n	8009caa <f_open+0x34a>
						res = FR_INT_ERR;
 8009ca2:	2302      	movs	r3, #2
 8009ca4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009ca8:	e019      	b.n	8009cde <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	899b      	ldrh	r3, [r3, #12]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cb2:	fbb3 f2f2 	udiv	r2, r3, r2
 8009cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cb8:	441a      	add	r2, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	7858      	ldrb	r0, [r3, #1]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6a1a      	ldr	r2, [r3, #32]
 8009ccc:	2301      	movs	r3, #1
 8009cce:	f7fd fc6f 	bl	80075b0 <disk_read>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <f_open+0x37e>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009cde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d002      	beq.n	8009cec <f_open+0x38c>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009cec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3768      	adds	r7, #104	; 0x68
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b08c      	sub	sp, #48	; 0x30
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f107 0210 	add.w	r2, r7, #16
 8009d16:	4611      	mov	r1, r2
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7ff fda5 	bl	8009868 <validate>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009d24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d107      	bne.n	8009d3c <f_write+0x44>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	7d5b      	ldrb	r3, [r3, #21]
 8009d30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009d34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d002      	beq.n	8009d42 <f_write+0x4a>
 8009d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d40:	e16a      	b.n	800a018 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	7d1b      	ldrb	r3, [r3, #20]
 8009d46:	f003 0302 	and.w	r3, r3, #2
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d101      	bne.n	8009d52 <f_write+0x5a>
 8009d4e:	2307      	movs	r3, #7
 8009d50:	e162      	b.n	800a018 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	699a      	ldr	r2, [r3, #24]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	441a      	add	r2, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	699b      	ldr	r3, [r3, #24]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	f080 814c 	bcs.w	8009ffc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	699b      	ldr	r3, [r3, #24]
 8009d68:	43db      	mvns	r3, r3
 8009d6a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009d6c:	e146      	b.n	8009ffc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	693a      	ldr	r2, [r7, #16]
 8009d74:	8992      	ldrh	r2, [r2, #12]
 8009d76:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d7a:	fb02 f201 	mul.w	r2, r2, r1
 8009d7e:	1a9b      	subs	r3, r3, r2
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f040 80f1 	bne.w	8009f68 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	699b      	ldr	r3, [r3, #24]
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	8992      	ldrh	r2, [r2, #12]
 8009d8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d92:	693a      	ldr	r2, [r7, #16]
 8009d94:	8952      	ldrh	r2, [r2, #10]
 8009d96:	3a01      	subs	r2, #1
 8009d98:	4013      	ands	r3, r2
 8009d9a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d143      	bne.n	8009e2a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10c      	bne.n	8009dc4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d11a      	bne.n	8009dec <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2100      	movs	r1, #0
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fe fa0f 	bl	80081de <create_chain>
 8009dc0:	62b8      	str	r0, [r7, #40]	; 0x28
 8009dc2:	e013      	b.n	8009dec <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d007      	beq.n	8009ddc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f7fe fa9b 	bl	800830e <clmt_clust>
 8009dd8:	62b8      	str	r0, [r7, #40]	; 0x28
 8009dda:	e007      	b.n	8009dec <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	69db      	ldr	r3, [r3, #28]
 8009de2:	4619      	mov	r1, r3
 8009de4:	4610      	mov	r0, r2
 8009de6:	f7fe f9fa 	bl	80081de <create_chain>
 8009dea:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f000 8109 	beq.w	800a006 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d104      	bne.n	8009e04 <f_write+0x10c>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2202      	movs	r2, #2
 8009dfe:	755a      	strb	r2, [r3, #21]
 8009e00:	2302      	movs	r3, #2
 8009e02:	e109      	b.n	800a018 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e0a:	d104      	bne.n	8009e16 <f_write+0x11e>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	755a      	strb	r2, [r3, #21]
 8009e12:	2301      	movs	r3, #1
 8009e14:	e100      	b.n	800a018 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e1a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d102      	bne.n	8009e2a <f_write+0x132>
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e28:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	7d1b      	ldrb	r3, [r3, #20]
 8009e2e:	b25b      	sxtb	r3, r3
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	da18      	bge.n	8009e66 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	7858      	ldrb	r0, [r3, #1]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6a1a      	ldr	r2, [r3, #32]
 8009e42:	2301      	movs	r3, #1
 8009e44:	f7fd fbd4 	bl	80075f0 <disk_write>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d004      	beq.n	8009e58 <f_write+0x160>
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2201      	movs	r2, #1
 8009e52:	755a      	strb	r2, [r3, #21]
 8009e54:	2301      	movs	r3, #1
 8009e56:	e0df      	b.n	800a018 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	7d1b      	ldrb	r3, [r3, #20]
 8009e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009e66:	693a      	ldr	r2, [r7, #16]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	69db      	ldr	r3, [r3, #28]
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	4610      	mov	r0, r2
 8009e70:	f7fd ff4a 	bl	8007d08 <clust2sect>
 8009e74:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d104      	bne.n	8009e86 <f_write+0x18e>
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2202      	movs	r2, #2
 8009e80:	755a      	strb	r2, [r3, #21]
 8009e82:	2302      	movs	r3, #2
 8009e84:	e0c8      	b.n	800a018 <f_write+0x320>
			sect += csect;
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	899b      	ldrh	r3, [r3, #12]
 8009e92:	461a      	mov	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e9a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d043      	beq.n	8009f2a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009ea2:	69ba      	ldr	r2, [r7, #24]
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	8952      	ldrh	r2, [r2, #10]
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d905      	bls.n	8009ebc <f_write+0x1c4>
					cc = fs->csize - csect;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	895b      	ldrh	r3, [r3, #10]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	7858      	ldrb	r0, [r3, #1]
 8009ec0:	6a3b      	ldr	r3, [r7, #32]
 8009ec2:	697a      	ldr	r2, [r7, #20]
 8009ec4:	69f9      	ldr	r1, [r7, #28]
 8009ec6:	f7fd fb93 	bl	80075f0 <disk_write>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d004      	beq.n	8009eda <f_write+0x1e2>
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	755a      	strb	r2, [r3, #21]
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e09e      	b.n	800a018 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6a1a      	ldr	r2, [r3, #32]
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	6a3a      	ldr	r2, [r7, #32]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d918      	bls.n	8009f1a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6a1a      	ldr	r2, [r3, #32]
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	1ad3      	subs	r3, r2, r3
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	8992      	ldrh	r2, [r2, #12]
 8009efa:	fb02 f303 	mul.w	r3, r2, r3
 8009efe:	69fa      	ldr	r2, [r7, #28]
 8009f00:	18d1      	adds	r1, r2, r3
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	899b      	ldrh	r3, [r3, #12]
 8009f06:	461a      	mov	r2, r3
 8009f08:	f7fd fc32 	bl	8007770 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	7d1b      	ldrb	r3, [r3, #20]
 8009f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f14:	b2da      	uxtb	r2, r3
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	899b      	ldrh	r3, [r3, #12]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	6a3b      	ldr	r3, [r7, #32]
 8009f22:	fb02 f303 	mul.w	r3, r2, r3
 8009f26:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009f28:	e04b      	b.n	8009fc2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6a1b      	ldr	r3, [r3, #32]
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d016      	beq.n	8009f62 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	699a      	ldr	r2, [r3, #24]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d210      	bcs.n	8009f62 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	7858      	ldrb	r0, [r3, #1]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	f7fd fb2f 	bl	80075b0 <disk_read>
 8009f52:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d004      	beq.n	8009f62 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	755a      	strb	r2, [r3, #21]
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e05a      	b.n	800a018 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	899b      	ldrh	r3, [r3, #12]
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	699b      	ldr	r3, [r3, #24]
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	8992      	ldrh	r2, [r2, #12]
 8009f76:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f7a:	fb02 f201 	mul.w	r2, r2, r1
 8009f7e:	1a9b      	subs	r3, r3, r2
 8009f80:	1ac3      	subs	r3, r0, r3
 8009f82:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d901      	bls.n	8009f90 <f_write+0x298>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	699b      	ldr	r3, [r3, #24]
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	8992      	ldrh	r2, [r2, #12]
 8009f9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009fa2:	fb02 f200 	mul.w	r2, r2, r0
 8009fa6:	1a9b      	subs	r3, r3, r2
 8009fa8:	440b      	add	r3, r1
 8009faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fac:	69f9      	ldr	r1, [r7, #28]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fd fbde 	bl	8007770 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	7d1b      	ldrb	r3, [r3, #20]
 8009fb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009fc2:	69fa      	ldr	r2, [r7, #28]
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc6:	4413      	add	r3, r2
 8009fc8:	61fb      	str	r3, [r7, #28]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	699a      	ldr	r2, [r3, #24]
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	441a      	add	r2, r3
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	619a      	str	r2, [r3, #24]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	68da      	ldr	r2, [r3, #12]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	bf38      	it	cc
 8009fe2:	461a      	movcc	r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	60da      	str	r2, [r3, #12]
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fee:	441a      	add	r2, r3
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f47f aeb5 	bne.w	8009d6e <f_write+0x76>
 800a004:	e000      	b.n	800a008 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a006:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	7d1b      	ldrb	r3, [r3, #20]
 800a00c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a010:	b2da      	uxtb	r2, r3
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3730      	adds	r7, #48	; 0x30
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f107 0208 	add.w	r2, r7, #8
 800a02e:	4611      	mov	r1, r2
 800a030:	4618      	mov	r0, r3
 800a032:	f7ff fc19 	bl	8009868 <validate>
 800a036:	4603      	mov	r3, r0
 800a038:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d168      	bne.n	800a112 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	7d1b      	ldrb	r3, [r3, #20]
 800a044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d062      	beq.n	800a112 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	7d1b      	ldrb	r3, [r3, #20]
 800a050:	b25b      	sxtb	r3, r3
 800a052:	2b00      	cmp	r3, #0
 800a054:	da15      	bge.n	800a082 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	7858      	ldrb	r0, [r3, #1]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a1a      	ldr	r2, [r3, #32]
 800a064:	2301      	movs	r3, #1
 800a066:	f7fd fac3 	bl	80075f0 <disk_write>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d001      	beq.n	800a074 <f_sync+0x54>
 800a070:	2301      	movs	r3, #1
 800a072:	e04f      	b.n	800a114 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	7d1b      	ldrb	r3, [r3, #20]
 800a078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a082:	f7fd f809 	bl	8007098 <get_fattime>
 800a086:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08e:	4619      	mov	r1, r3
 800a090:	4610      	mov	r0, r2
 800a092:	f7fd fd9b 	bl	8007bcc <move_window>
 800a096:	4603      	mov	r3, r0
 800a098:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a09a:	7dfb      	ldrb	r3, [r7, #23]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d138      	bne.n	800a112 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	330b      	adds	r3, #11
 800a0aa:	781a      	ldrb	r2, [r3, #0]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	330b      	adds	r3, #11
 800a0b0:	f042 0220 	orr.w	r2, r2, #32
 800a0b4:	b2d2      	uxtb	r2, r2
 800a0b6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6818      	ldr	r0, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	68f9      	ldr	r1, [r7, #12]
 800a0c4:	f7fe fb20 	bl	8008708 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f103 021c 	add.w	r2, r3, #28
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	f7fd fb1f 	bl	8007718 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3316      	adds	r3, #22
 800a0de:	6939      	ldr	r1, [r7, #16]
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7fd fb19 	bl	8007718 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	3312      	adds	r3, #18
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7fd faf8 	bl	80076e2 <st_word>
					fs->wflag = 1;
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7fd fd94 	bl	8007c28 <sync_fs>
 800a100:	4603      	mov	r3, r0
 800a102:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	7d1b      	ldrb	r3, [r3, #20]
 800a108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a10c:	b2da      	uxtb	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a112:	7dfb      	ldrb	r3, [r7, #23]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3718      	adds	r7, #24
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f7ff ff7b 	bl	800a020 <f_sync>
 800a12a:	4603      	mov	r3, r0
 800a12c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a12e:	7bfb      	ldrb	r3, [r7, #15]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d118      	bne.n	800a166 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f107 0208 	add.w	r2, r7, #8
 800a13a:	4611      	mov	r1, r2
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7ff fb93 	bl	8009868 <validate>
 800a142:	4603      	mov	r3, r0
 800a144:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a146:	7bfb      	ldrb	r3, [r7, #15]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d10c      	bne.n	800a166 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	4618      	mov	r0, r3
 800a152:	f7fd fc97 	bl	8007a84 <dec_lock>
 800a156:	4603      	mov	r3, r0
 800a158:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d102      	bne.n	800a166 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a166:	7bfb      	ldrb	r3, [r7, #15]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a170:	b480      	push	{r7}
 800a172:	b087      	sub	sp, #28
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	4613      	mov	r3, r2
 800a17c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a17e:	2301      	movs	r3, #1
 800a180:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a182:	2300      	movs	r3, #0
 800a184:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a186:	4b1f      	ldr	r3, [pc, #124]	; (800a204 <FATFS_LinkDriverEx+0x94>)
 800a188:	7a5b      	ldrb	r3, [r3, #9]
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d131      	bne.n	800a1f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a190:	4b1c      	ldr	r3, [pc, #112]	; (800a204 <FATFS_LinkDriverEx+0x94>)
 800a192:	7a5b      	ldrb	r3, [r3, #9]
 800a194:	b2db      	uxtb	r3, r3
 800a196:	461a      	mov	r2, r3
 800a198:	4b1a      	ldr	r3, [pc, #104]	; (800a204 <FATFS_LinkDriverEx+0x94>)
 800a19a:	2100      	movs	r1, #0
 800a19c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a19e:	4b19      	ldr	r3, [pc, #100]	; (800a204 <FATFS_LinkDriverEx+0x94>)
 800a1a0:	7a5b      	ldrb	r3, [r3, #9]
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	4a17      	ldr	r2, [pc, #92]	; (800a204 <FATFS_LinkDriverEx+0x94>)
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4413      	add	r3, r2
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a1ae:	4b15      	ldr	r3, [pc, #84]	; (800a204 <FATFS_LinkDriverEx+0x94>)
 800a1b0:	7a5b      	ldrb	r3, [r3, #9]
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	4b13      	ldr	r3, [pc, #76]	; (800a204 <FATFS_LinkDriverEx+0x94>)
 800a1b8:	4413      	add	r3, r2
 800a1ba:	79fa      	ldrb	r2, [r7, #7]
 800a1bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a1be:	4b11      	ldr	r3, [pc, #68]	; (800a204 <FATFS_LinkDriverEx+0x94>)
 800a1c0:	7a5b      	ldrb	r3, [r3, #9]
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	1c5a      	adds	r2, r3, #1
 800a1c6:	b2d1      	uxtb	r1, r2
 800a1c8:	4a0e      	ldr	r2, [pc, #56]	; (800a204 <FATFS_LinkDriverEx+0x94>)
 800a1ca:	7251      	strb	r1, [r2, #9]
 800a1cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a1ce:	7dbb      	ldrb	r3, [r7, #22]
 800a1d0:	3330      	adds	r3, #48	; 0x30
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	223a      	movs	r2, #58	; 0x3a
 800a1de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	3302      	adds	r3, #2
 800a1e4:	222f      	movs	r2, #47	; 0x2f
 800a1e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	3303      	adds	r3, #3
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a1f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	371c      	adds	r7, #28
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	20000340 	.word	0x20000340

0800a208 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a212:	2200      	movs	r2, #0
 800a214:	6839      	ldr	r1, [r7, #0]
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f7ff ffaa 	bl	800a170 <FATFS_LinkDriverEx>
 800a21c:	4603      	mov	r3, r0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
	...

0800a228 <__errno>:
 800a228:	4b01      	ldr	r3, [pc, #4]	; (800a230 <__errno+0x8>)
 800a22a:	6818      	ldr	r0, [r3, #0]
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	20000028 	.word	0x20000028

0800a234 <__libc_init_array>:
 800a234:	b570      	push	{r4, r5, r6, lr}
 800a236:	4e0d      	ldr	r6, [pc, #52]	; (800a26c <__libc_init_array+0x38>)
 800a238:	4c0d      	ldr	r4, [pc, #52]	; (800a270 <__libc_init_array+0x3c>)
 800a23a:	1ba4      	subs	r4, r4, r6
 800a23c:	10a4      	asrs	r4, r4, #2
 800a23e:	2500      	movs	r5, #0
 800a240:	42a5      	cmp	r5, r4
 800a242:	d109      	bne.n	800a258 <__libc_init_array+0x24>
 800a244:	4e0b      	ldr	r6, [pc, #44]	; (800a274 <__libc_init_array+0x40>)
 800a246:	4c0c      	ldr	r4, [pc, #48]	; (800a278 <__libc_init_array+0x44>)
 800a248:	f000 ff04 	bl	800b054 <_init>
 800a24c:	1ba4      	subs	r4, r4, r6
 800a24e:	10a4      	asrs	r4, r4, #2
 800a250:	2500      	movs	r5, #0
 800a252:	42a5      	cmp	r5, r4
 800a254:	d105      	bne.n	800a262 <__libc_init_array+0x2e>
 800a256:	bd70      	pop	{r4, r5, r6, pc}
 800a258:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a25c:	4798      	blx	r3
 800a25e:	3501      	adds	r5, #1
 800a260:	e7ee      	b.n	800a240 <__libc_init_array+0xc>
 800a262:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a266:	4798      	blx	r3
 800a268:	3501      	adds	r5, #1
 800a26a:	e7f2      	b.n	800a252 <__libc_init_array+0x1e>
 800a26c:	0800b668 	.word	0x0800b668
 800a270:	0800b668 	.word	0x0800b668
 800a274:	0800b668 	.word	0x0800b668
 800a278:	0800b66c 	.word	0x0800b66c

0800a27c <memset>:
 800a27c:	4402      	add	r2, r0
 800a27e:	4603      	mov	r3, r0
 800a280:	4293      	cmp	r3, r2
 800a282:	d100      	bne.n	800a286 <memset+0xa>
 800a284:	4770      	bx	lr
 800a286:	f803 1b01 	strb.w	r1, [r3], #1
 800a28a:	e7f9      	b.n	800a280 <memset+0x4>

0800a28c <_free_r>:
 800a28c:	b538      	push	{r3, r4, r5, lr}
 800a28e:	4605      	mov	r5, r0
 800a290:	2900      	cmp	r1, #0
 800a292:	d045      	beq.n	800a320 <_free_r+0x94>
 800a294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a298:	1f0c      	subs	r4, r1, #4
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	bfb8      	it	lt
 800a29e:	18e4      	addlt	r4, r4, r3
 800a2a0:	f000 fb62 	bl	800a968 <__malloc_lock>
 800a2a4:	4a1f      	ldr	r2, [pc, #124]	; (800a324 <_free_r+0x98>)
 800a2a6:	6813      	ldr	r3, [r2, #0]
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	b933      	cbnz	r3, 800a2ba <_free_r+0x2e>
 800a2ac:	6063      	str	r3, [r4, #4]
 800a2ae:	6014      	str	r4, [r2, #0]
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2b6:	f000 bb58 	b.w	800a96a <__malloc_unlock>
 800a2ba:	42a3      	cmp	r3, r4
 800a2bc:	d90c      	bls.n	800a2d8 <_free_r+0x4c>
 800a2be:	6821      	ldr	r1, [r4, #0]
 800a2c0:	1862      	adds	r2, r4, r1
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	bf04      	itt	eq
 800a2c6:	681a      	ldreq	r2, [r3, #0]
 800a2c8:	685b      	ldreq	r3, [r3, #4]
 800a2ca:	6063      	str	r3, [r4, #4]
 800a2cc:	bf04      	itt	eq
 800a2ce:	1852      	addeq	r2, r2, r1
 800a2d0:	6022      	streq	r2, [r4, #0]
 800a2d2:	6004      	str	r4, [r0, #0]
 800a2d4:	e7ec      	b.n	800a2b0 <_free_r+0x24>
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	685a      	ldr	r2, [r3, #4]
 800a2da:	b10a      	cbz	r2, 800a2e0 <_free_r+0x54>
 800a2dc:	42a2      	cmp	r2, r4
 800a2de:	d9fa      	bls.n	800a2d6 <_free_r+0x4a>
 800a2e0:	6819      	ldr	r1, [r3, #0]
 800a2e2:	1858      	adds	r0, r3, r1
 800a2e4:	42a0      	cmp	r0, r4
 800a2e6:	d10b      	bne.n	800a300 <_free_r+0x74>
 800a2e8:	6820      	ldr	r0, [r4, #0]
 800a2ea:	4401      	add	r1, r0
 800a2ec:	1858      	adds	r0, r3, r1
 800a2ee:	4282      	cmp	r2, r0
 800a2f0:	6019      	str	r1, [r3, #0]
 800a2f2:	d1dd      	bne.n	800a2b0 <_free_r+0x24>
 800a2f4:	6810      	ldr	r0, [r2, #0]
 800a2f6:	6852      	ldr	r2, [r2, #4]
 800a2f8:	605a      	str	r2, [r3, #4]
 800a2fa:	4401      	add	r1, r0
 800a2fc:	6019      	str	r1, [r3, #0]
 800a2fe:	e7d7      	b.n	800a2b0 <_free_r+0x24>
 800a300:	d902      	bls.n	800a308 <_free_r+0x7c>
 800a302:	230c      	movs	r3, #12
 800a304:	602b      	str	r3, [r5, #0]
 800a306:	e7d3      	b.n	800a2b0 <_free_r+0x24>
 800a308:	6820      	ldr	r0, [r4, #0]
 800a30a:	1821      	adds	r1, r4, r0
 800a30c:	428a      	cmp	r2, r1
 800a30e:	bf04      	itt	eq
 800a310:	6811      	ldreq	r1, [r2, #0]
 800a312:	6852      	ldreq	r2, [r2, #4]
 800a314:	6062      	str	r2, [r4, #4]
 800a316:	bf04      	itt	eq
 800a318:	1809      	addeq	r1, r1, r0
 800a31a:	6021      	streq	r1, [r4, #0]
 800a31c:	605c      	str	r4, [r3, #4]
 800a31e:	e7c7      	b.n	800a2b0 <_free_r+0x24>
 800a320:	bd38      	pop	{r3, r4, r5, pc}
 800a322:	bf00      	nop
 800a324:	2000034c 	.word	0x2000034c

0800a328 <_malloc_r>:
 800a328:	b570      	push	{r4, r5, r6, lr}
 800a32a:	1ccd      	adds	r5, r1, #3
 800a32c:	f025 0503 	bic.w	r5, r5, #3
 800a330:	3508      	adds	r5, #8
 800a332:	2d0c      	cmp	r5, #12
 800a334:	bf38      	it	cc
 800a336:	250c      	movcc	r5, #12
 800a338:	2d00      	cmp	r5, #0
 800a33a:	4606      	mov	r6, r0
 800a33c:	db01      	blt.n	800a342 <_malloc_r+0x1a>
 800a33e:	42a9      	cmp	r1, r5
 800a340:	d903      	bls.n	800a34a <_malloc_r+0x22>
 800a342:	230c      	movs	r3, #12
 800a344:	6033      	str	r3, [r6, #0]
 800a346:	2000      	movs	r0, #0
 800a348:	bd70      	pop	{r4, r5, r6, pc}
 800a34a:	f000 fb0d 	bl	800a968 <__malloc_lock>
 800a34e:	4a21      	ldr	r2, [pc, #132]	; (800a3d4 <_malloc_r+0xac>)
 800a350:	6814      	ldr	r4, [r2, #0]
 800a352:	4621      	mov	r1, r4
 800a354:	b991      	cbnz	r1, 800a37c <_malloc_r+0x54>
 800a356:	4c20      	ldr	r4, [pc, #128]	; (800a3d8 <_malloc_r+0xb0>)
 800a358:	6823      	ldr	r3, [r4, #0]
 800a35a:	b91b      	cbnz	r3, 800a364 <_malloc_r+0x3c>
 800a35c:	4630      	mov	r0, r6
 800a35e:	f000 f855 	bl	800a40c <_sbrk_r>
 800a362:	6020      	str	r0, [r4, #0]
 800a364:	4629      	mov	r1, r5
 800a366:	4630      	mov	r0, r6
 800a368:	f000 f850 	bl	800a40c <_sbrk_r>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	d124      	bne.n	800a3ba <_malloc_r+0x92>
 800a370:	230c      	movs	r3, #12
 800a372:	6033      	str	r3, [r6, #0]
 800a374:	4630      	mov	r0, r6
 800a376:	f000 faf8 	bl	800a96a <__malloc_unlock>
 800a37a:	e7e4      	b.n	800a346 <_malloc_r+0x1e>
 800a37c:	680b      	ldr	r3, [r1, #0]
 800a37e:	1b5b      	subs	r3, r3, r5
 800a380:	d418      	bmi.n	800a3b4 <_malloc_r+0x8c>
 800a382:	2b0b      	cmp	r3, #11
 800a384:	d90f      	bls.n	800a3a6 <_malloc_r+0x7e>
 800a386:	600b      	str	r3, [r1, #0]
 800a388:	50cd      	str	r5, [r1, r3]
 800a38a:	18cc      	adds	r4, r1, r3
 800a38c:	4630      	mov	r0, r6
 800a38e:	f000 faec 	bl	800a96a <__malloc_unlock>
 800a392:	f104 000b 	add.w	r0, r4, #11
 800a396:	1d23      	adds	r3, r4, #4
 800a398:	f020 0007 	bic.w	r0, r0, #7
 800a39c:	1ac3      	subs	r3, r0, r3
 800a39e:	d0d3      	beq.n	800a348 <_malloc_r+0x20>
 800a3a0:	425a      	negs	r2, r3
 800a3a2:	50e2      	str	r2, [r4, r3]
 800a3a4:	e7d0      	b.n	800a348 <_malloc_r+0x20>
 800a3a6:	428c      	cmp	r4, r1
 800a3a8:	684b      	ldr	r3, [r1, #4]
 800a3aa:	bf16      	itet	ne
 800a3ac:	6063      	strne	r3, [r4, #4]
 800a3ae:	6013      	streq	r3, [r2, #0]
 800a3b0:	460c      	movne	r4, r1
 800a3b2:	e7eb      	b.n	800a38c <_malloc_r+0x64>
 800a3b4:	460c      	mov	r4, r1
 800a3b6:	6849      	ldr	r1, [r1, #4]
 800a3b8:	e7cc      	b.n	800a354 <_malloc_r+0x2c>
 800a3ba:	1cc4      	adds	r4, r0, #3
 800a3bc:	f024 0403 	bic.w	r4, r4, #3
 800a3c0:	42a0      	cmp	r0, r4
 800a3c2:	d005      	beq.n	800a3d0 <_malloc_r+0xa8>
 800a3c4:	1a21      	subs	r1, r4, r0
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	f000 f820 	bl	800a40c <_sbrk_r>
 800a3cc:	3001      	adds	r0, #1
 800a3ce:	d0cf      	beq.n	800a370 <_malloc_r+0x48>
 800a3d0:	6025      	str	r5, [r4, #0]
 800a3d2:	e7db      	b.n	800a38c <_malloc_r+0x64>
 800a3d4:	2000034c 	.word	0x2000034c
 800a3d8:	20000350 	.word	0x20000350

0800a3dc <iprintf>:
 800a3dc:	b40f      	push	{r0, r1, r2, r3}
 800a3de:	4b0a      	ldr	r3, [pc, #40]	; (800a408 <iprintf+0x2c>)
 800a3e0:	b513      	push	{r0, r1, r4, lr}
 800a3e2:	681c      	ldr	r4, [r3, #0]
 800a3e4:	b124      	cbz	r4, 800a3f0 <iprintf+0x14>
 800a3e6:	69a3      	ldr	r3, [r4, #24]
 800a3e8:	b913      	cbnz	r3, 800a3f0 <iprintf+0x14>
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f000 f9ce 	bl	800a78c <__sinit>
 800a3f0:	ab05      	add	r3, sp, #20
 800a3f2:	9a04      	ldr	r2, [sp, #16]
 800a3f4:	68a1      	ldr	r1, [r4, #8]
 800a3f6:	9301      	str	r3, [sp, #4]
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	f000 fae1 	bl	800a9c0 <_vfiprintf_r>
 800a3fe:	b002      	add	sp, #8
 800a400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a404:	b004      	add	sp, #16
 800a406:	4770      	bx	lr
 800a408:	20000028 	.word	0x20000028

0800a40c <_sbrk_r>:
 800a40c:	b538      	push	{r3, r4, r5, lr}
 800a40e:	4c06      	ldr	r4, [pc, #24]	; (800a428 <_sbrk_r+0x1c>)
 800a410:	2300      	movs	r3, #0
 800a412:	4605      	mov	r5, r0
 800a414:	4608      	mov	r0, r1
 800a416:	6023      	str	r3, [r4, #0]
 800a418:	f7f7 fe4e 	bl	80020b8 <_sbrk>
 800a41c:	1c43      	adds	r3, r0, #1
 800a41e:	d102      	bne.n	800a426 <_sbrk_r+0x1a>
 800a420:	6823      	ldr	r3, [r4, #0]
 800a422:	b103      	cbz	r3, 800a426 <_sbrk_r+0x1a>
 800a424:	602b      	str	r3, [r5, #0]
 800a426:	bd38      	pop	{r3, r4, r5, pc}
 800a428:	20006fb8 	.word	0x20006fb8

0800a42c <__swbuf_r>:
 800a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42e:	460e      	mov	r6, r1
 800a430:	4614      	mov	r4, r2
 800a432:	4605      	mov	r5, r0
 800a434:	b118      	cbz	r0, 800a43e <__swbuf_r+0x12>
 800a436:	6983      	ldr	r3, [r0, #24]
 800a438:	b90b      	cbnz	r3, 800a43e <__swbuf_r+0x12>
 800a43a:	f000 f9a7 	bl	800a78c <__sinit>
 800a43e:	4b21      	ldr	r3, [pc, #132]	; (800a4c4 <__swbuf_r+0x98>)
 800a440:	429c      	cmp	r4, r3
 800a442:	d12a      	bne.n	800a49a <__swbuf_r+0x6e>
 800a444:	686c      	ldr	r4, [r5, #4]
 800a446:	69a3      	ldr	r3, [r4, #24]
 800a448:	60a3      	str	r3, [r4, #8]
 800a44a:	89a3      	ldrh	r3, [r4, #12]
 800a44c:	071a      	lsls	r2, r3, #28
 800a44e:	d52e      	bpl.n	800a4ae <__swbuf_r+0x82>
 800a450:	6923      	ldr	r3, [r4, #16]
 800a452:	b363      	cbz	r3, 800a4ae <__swbuf_r+0x82>
 800a454:	6923      	ldr	r3, [r4, #16]
 800a456:	6820      	ldr	r0, [r4, #0]
 800a458:	1ac0      	subs	r0, r0, r3
 800a45a:	6963      	ldr	r3, [r4, #20]
 800a45c:	b2f6      	uxtb	r6, r6
 800a45e:	4283      	cmp	r3, r0
 800a460:	4637      	mov	r7, r6
 800a462:	dc04      	bgt.n	800a46e <__swbuf_r+0x42>
 800a464:	4621      	mov	r1, r4
 800a466:	4628      	mov	r0, r5
 800a468:	f000 f926 	bl	800a6b8 <_fflush_r>
 800a46c:	bb28      	cbnz	r0, 800a4ba <__swbuf_r+0x8e>
 800a46e:	68a3      	ldr	r3, [r4, #8]
 800a470:	3b01      	subs	r3, #1
 800a472:	60a3      	str	r3, [r4, #8]
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	1c5a      	adds	r2, r3, #1
 800a478:	6022      	str	r2, [r4, #0]
 800a47a:	701e      	strb	r6, [r3, #0]
 800a47c:	6963      	ldr	r3, [r4, #20]
 800a47e:	3001      	adds	r0, #1
 800a480:	4283      	cmp	r3, r0
 800a482:	d004      	beq.n	800a48e <__swbuf_r+0x62>
 800a484:	89a3      	ldrh	r3, [r4, #12]
 800a486:	07db      	lsls	r3, r3, #31
 800a488:	d519      	bpl.n	800a4be <__swbuf_r+0x92>
 800a48a:	2e0a      	cmp	r6, #10
 800a48c:	d117      	bne.n	800a4be <__swbuf_r+0x92>
 800a48e:	4621      	mov	r1, r4
 800a490:	4628      	mov	r0, r5
 800a492:	f000 f911 	bl	800a6b8 <_fflush_r>
 800a496:	b190      	cbz	r0, 800a4be <__swbuf_r+0x92>
 800a498:	e00f      	b.n	800a4ba <__swbuf_r+0x8e>
 800a49a:	4b0b      	ldr	r3, [pc, #44]	; (800a4c8 <__swbuf_r+0x9c>)
 800a49c:	429c      	cmp	r4, r3
 800a49e:	d101      	bne.n	800a4a4 <__swbuf_r+0x78>
 800a4a0:	68ac      	ldr	r4, [r5, #8]
 800a4a2:	e7d0      	b.n	800a446 <__swbuf_r+0x1a>
 800a4a4:	4b09      	ldr	r3, [pc, #36]	; (800a4cc <__swbuf_r+0xa0>)
 800a4a6:	429c      	cmp	r4, r3
 800a4a8:	bf08      	it	eq
 800a4aa:	68ec      	ldreq	r4, [r5, #12]
 800a4ac:	e7cb      	b.n	800a446 <__swbuf_r+0x1a>
 800a4ae:	4621      	mov	r1, r4
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	f000 f80d 	bl	800a4d0 <__swsetup_r>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d0cc      	beq.n	800a454 <__swbuf_r+0x28>
 800a4ba:	f04f 37ff 	mov.w	r7, #4294967295
 800a4be:	4638      	mov	r0, r7
 800a4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	0800b5ec 	.word	0x0800b5ec
 800a4c8:	0800b60c 	.word	0x0800b60c
 800a4cc:	0800b5cc 	.word	0x0800b5cc

0800a4d0 <__swsetup_r>:
 800a4d0:	4b32      	ldr	r3, [pc, #200]	; (800a59c <__swsetup_r+0xcc>)
 800a4d2:	b570      	push	{r4, r5, r6, lr}
 800a4d4:	681d      	ldr	r5, [r3, #0]
 800a4d6:	4606      	mov	r6, r0
 800a4d8:	460c      	mov	r4, r1
 800a4da:	b125      	cbz	r5, 800a4e6 <__swsetup_r+0x16>
 800a4dc:	69ab      	ldr	r3, [r5, #24]
 800a4de:	b913      	cbnz	r3, 800a4e6 <__swsetup_r+0x16>
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	f000 f953 	bl	800a78c <__sinit>
 800a4e6:	4b2e      	ldr	r3, [pc, #184]	; (800a5a0 <__swsetup_r+0xd0>)
 800a4e8:	429c      	cmp	r4, r3
 800a4ea:	d10f      	bne.n	800a50c <__swsetup_r+0x3c>
 800a4ec:	686c      	ldr	r4, [r5, #4]
 800a4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4f2:	b29a      	uxth	r2, r3
 800a4f4:	0715      	lsls	r5, r2, #28
 800a4f6:	d42c      	bmi.n	800a552 <__swsetup_r+0x82>
 800a4f8:	06d0      	lsls	r0, r2, #27
 800a4fa:	d411      	bmi.n	800a520 <__swsetup_r+0x50>
 800a4fc:	2209      	movs	r2, #9
 800a4fe:	6032      	str	r2, [r6, #0]
 800a500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a504:	81a3      	strh	r3, [r4, #12]
 800a506:	f04f 30ff 	mov.w	r0, #4294967295
 800a50a:	e03e      	b.n	800a58a <__swsetup_r+0xba>
 800a50c:	4b25      	ldr	r3, [pc, #148]	; (800a5a4 <__swsetup_r+0xd4>)
 800a50e:	429c      	cmp	r4, r3
 800a510:	d101      	bne.n	800a516 <__swsetup_r+0x46>
 800a512:	68ac      	ldr	r4, [r5, #8]
 800a514:	e7eb      	b.n	800a4ee <__swsetup_r+0x1e>
 800a516:	4b24      	ldr	r3, [pc, #144]	; (800a5a8 <__swsetup_r+0xd8>)
 800a518:	429c      	cmp	r4, r3
 800a51a:	bf08      	it	eq
 800a51c:	68ec      	ldreq	r4, [r5, #12]
 800a51e:	e7e6      	b.n	800a4ee <__swsetup_r+0x1e>
 800a520:	0751      	lsls	r1, r2, #29
 800a522:	d512      	bpl.n	800a54a <__swsetup_r+0x7a>
 800a524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a526:	b141      	cbz	r1, 800a53a <__swsetup_r+0x6a>
 800a528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a52c:	4299      	cmp	r1, r3
 800a52e:	d002      	beq.n	800a536 <__swsetup_r+0x66>
 800a530:	4630      	mov	r0, r6
 800a532:	f7ff feab 	bl	800a28c <_free_r>
 800a536:	2300      	movs	r3, #0
 800a538:	6363      	str	r3, [r4, #52]	; 0x34
 800a53a:	89a3      	ldrh	r3, [r4, #12]
 800a53c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a540:	81a3      	strh	r3, [r4, #12]
 800a542:	2300      	movs	r3, #0
 800a544:	6063      	str	r3, [r4, #4]
 800a546:	6923      	ldr	r3, [r4, #16]
 800a548:	6023      	str	r3, [r4, #0]
 800a54a:	89a3      	ldrh	r3, [r4, #12]
 800a54c:	f043 0308 	orr.w	r3, r3, #8
 800a550:	81a3      	strh	r3, [r4, #12]
 800a552:	6923      	ldr	r3, [r4, #16]
 800a554:	b94b      	cbnz	r3, 800a56a <__swsetup_r+0x9a>
 800a556:	89a3      	ldrh	r3, [r4, #12]
 800a558:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a55c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a560:	d003      	beq.n	800a56a <__swsetup_r+0x9a>
 800a562:	4621      	mov	r1, r4
 800a564:	4630      	mov	r0, r6
 800a566:	f000 f9bf 	bl	800a8e8 <__smakebuf_r>
 800a56a:	89a2      	ldrh	r2, [r4, #12]
 800a56c:	f012 0301 	ands.w	r3, r2, #1
 800a570:	d00c      	beq.n	800a58c <__swsetup_r+0xbc>
 800a572:	2300      	movs	r3, #0
 800a574:	60a3      	str	r3, [r4, #8]
 800a576:	6963      	ldr	r3, [r4, #20]
 800a578:	425b      	negs	r3, r3
 800a57a:	61a3      	str	r3, [r4, #24]
 800a57c:	6923      	ldr	r3, [r4, #16]
 800a57e:	b953      	cbnz	r3, 800a596 <__swsetup_r+0xc6>
 800a580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a584:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a588:	d1ba      	bne.n	800a500 <__swsetup_r+0x30>
 800a58a:	bd70      	pop	{r4, r5, r6, pc}
 800a58c:	0792      	lsls	r2, r2, #30
 800a58e:	bf58      	it	pl
 800a590:	6963      	ldrpl	r3, [r4, #20]
 800a592:	60a3      	str	r3, [r4, #8]
 800a594:	e7f2      	b.n	800a57c <__swsetup_r+0xac>
 800a596:	2000      	movs	r0, #0
 800a598:	e7f7      	b.n	800a58a <__swsetup_r+0xba>
 800a59a:	bf00      	nop
 800a59c:	20000028 	.word	0x20000028
 800a5a0:	0800b5ec 	.word	0x0800b5ec
 800a5a4:	0800b60c 	.word	0x0800b60c
 800a5a8:	0800b5cc 	.word	0x0800b5cc

0800a5ac <__sflush_r>:
 800a5ac:	898a      	ldrh	r2, [r1, #12]
 800a5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b2:	4605      	mov	r5, r0
 800a5b4:	0710      	lsls	r0, r2, #28
 800a5b6:	460c      	mov	r4, r1
 800a5b8:	d458      	bmi.n	800a66c <__sflush_r+0xc0>
 800a5ba:	684b      	ldr	r3, [r1, #4]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	dc05      	bgt.n	800a5cc <__sflush_r+0x20>
 800a5c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	dc02      	bgt.n	800a5cc <__sflush_r+0x20>
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5ce:	2e00      	cmp	r6, #0
 800a5d0:	d0f9      	beq.n	800a5c6 <__sflush_r+0x1a>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a5d8:	682f      	ldr	r7, [r5, #0]
 800a5da:	6a21      	ldr	r1, [r4, #32]
 800a5dc:	602b      	str	r3, [r5, #0]
 800a5de:	d032      	beq.n	800a646 <__sflush_r+0x9a>
 800a5e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a5e2:	89a3      	ldrh	r3, [r4, #12]
 800a5e4:	075a      	lsls	r2, r3, #29
 800a5e6:	d505      	bpl.n	800a5f4 <__sflush_r+0x48>
 800a5e8:	6863      	ldr	r3, [r4, #4]
 800a5ea:	1ac0      	subs	r0, r0, r3
 800a5ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5ee:	b10b      	cbz	r3, 800a5f4 <__sflush_r+0x48>
 800a5f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5f2:	1ac0      	subs	r0, r0, r3
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5fa:	6a21      	ldr	r1, [r4, #32]
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	47b0      	blx	r6
 800a600:	1c43      	adds	r3, r0, #1
 800a602:	89a3      	ldrh	r3, [r4, #12]
 800a604:	d106      	bne.n	800a614 <__sflush_r+0x68>
 800a606:	6829      	ldr	r1, [r5, #0]
 800a608:	291d      	cmp	r1, #29
 800a60a:	d848      	bhi.n	800a69e <__sflush_r+0xf2>
 800a60c:	4a29      	ldr	r2, [pc, #164]	; (800a6b4 <__sflush_r+0x108>)
 800a60e:	40ca      	lsrs	r2, r1
 800a610:	07d6      	lsls	r6, r2, #31
 800a612:	d544      	bpl.n	800a69e <__sflush_r+0xf2>
 800a614:	2200      	movs	r2, #0
 800a616:	6062      	str	r2, [r4, #4]
 800a618:	04d9      	lsls	r1, r3, #19
 800a61a:	6922      	ldr	r2, [r4, #16]
 800a61c:	6022      	str	r2, [r4, #0]
 800a61e:	d504      	bpl.n	800a62a <__sflush_r+0x7e>
 800a620:	1c42      	adds	r2, r0, #1
 800a622:	d101      	bne.n	800a628 <__sflush_r+0x7c>
 800a624:	682b      	ldr	r3, [r5, #0]
 800a626:	b903      	cbnz	r3, 800a62a <__sflush_r+0x7e>
 800a628:	6560      	str	r0, [r4, #84]	; 0x54
 800a62a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a62c:	602f      	str	r7, [r5, #0]
 800a62e:	2900      	cmp	r1, #0
 800a630:	d0c9      	beq.n	800a5c6 <__sflush_r+0x1a>
 800a632:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a636:	4299      	cmp	r1, r3
 800a638:	d002      	beq.n	800a640 <__sflush_r+0x94>
 800a63a:	4628      	mov	r0, r5
 800a63c:	f7ff fe26 	bl	800a28c <_free_r>
 800a640:	2000      	movs	r0, #0
 800a642:	6360      	str	r0, [r4, #52]	; 0x34
 800a644:	e7c0      	b.n	800a5c8 <__sflush_r+0x1c>
 800a646:	2301      	movs	r3, #1
 800a648:	4628      	mov	r0, r5
 800a64a:	47b0      	blx	r6
 800a64c:	1c41      	adds	r1, r0, #1
 800a64e:	d1c8      	bne.n	800a5e2 <__sflush_r+0x36>
 800a650:	682b      	ldr	r3, [r5, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d0c5      	beq.n	800a5e2 <__sflush_r+0x36>
 800a656:	2b1d      	cmp	r3, #29
 800a658:	d001      	beq.n	800a65e <__sflush_r+0xb2>
 800a65a:	2b16      	cmp	r3, #22
 800a65c:	d101      	bne.n	800a662 <__sflush_r+0xb6>
 800a65e:	602f      	str	r7, [r5, #0]
 800a660:	e7b1      	b.n	800a5c6 <__sflush_r+0x1a>
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a668:	81a3      	strh	r3, [r4, #12]
 800a66a:	e7ad      	b.n	800a5c8 <__sflush_r+0x1c>
 800a66c:	690f      	ldr	r7, [r1, #16]
 800a66e:	2f00      	cmp	r7, #0
 800a670:	d0a9      	beq.n	800a5c6 <__sflush_r+0x1a>
 800a672:	0793      	lsls	r3, r2, #30
 800a674:	680e      	ldr	r6, [r1, #0]
 800a676:	bf08      	it	eq
 800a678:	694b      	ldreq	r3, [r1, #20]
 800a67a:	600f      	str	r7, [r1, #0]
 800a67c:	bf18      	it	ne
 800a67e:	2300      	movne	r3, #0
 800a680:	eba6 0807 	sub.w	r8, r6, r7
 800a684:	608b      	str	r3, [r1, #8]
 800a686:	f1b8 0f00 	cmp.w	r8, #0
 800a68a:	dd9c      	ble.n	800a5c6 <__sflush_r+0x1a>
 800a68c:	4643      	mov	r3, r8
 800a68e:	463a      	mov	r2, r7
 800a690:	6a21      	ldr	r1, [r4, #32]
 800a692:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a694:	4628      	mov	r0, r5
 800a696:	47b0      	blx	r6
 800a698:	2800      	cmp	r0, #0
 800a69a:	dc06      	bgt.n	800a6aa <__sflush_r+0xfe>
 800a69c:	89a3      	ldrh	r3, [r4, #12]
 800a69e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6a2:	81a3      	strh	r3, [r4, #12]
 800a6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a8:	e78e      	b.n	800a5c8 <__sflush_r+0x1c>
 800a6aa:	4407      	add	r7, r0
 800a6ac:	eba8 0800 	sub.w	r8, r8, r0
 800a6b0:	e7e9      	b.n	800a686 <__sflush_r+0xda>
 800a6b2:	bf00      	nop
 800a6b4:	20400001 	.word	0x20400001

0800a6b8 <_fflush_r>:
 800a6b8:	b538      	push	{r3, r4, r5, lr}
 800a6ba:	690b      	ldr	r3, [r1, #16]
 800a6bc:	4605      	mov	r5, r0
 800a6be:	460c      	mov	r4, r1
 800a6c0:	b1db      	cbz	r3, 800a6fa <_fflush_r+0x42>
 800a6c2:	b118      	cbz	r0, 800a6cc <_fflush_r+0x14>
 800a6c4:	6983      	ldr	r3, [r0, #24]
 800a6c6:	b90b      	cbnz	r3, 800a6cc <_fflush_r+0x14>
 800a6c8:	f000 f860 	bl	800a78c <__sinit>
 800a6cc:	4b0c      	ldr	r3, [pc, #48]	; (800a700 <_fflush_r+0x48>)
 800a6ce:	429c      	cmp	r4, r3
 800a6d0:	d109      	bne.n	800a6e6 <_fflush_r+0x2e>
 800a6d2:	686c      	ldr	r4, [r5, #4]
 800a6d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6d8:	b17b      	cbz	r3, 800a6fa <_fflush_r+0x42>
 800a6da:	4621      	mov	r1, r4
 800a6dc:	4628      	mov	r0, r5
 800a6de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6e2:	f7ff bf63 	b.w	800a5ac <__sflush_r>
 800a6e6:	4b07      	ldr	r3, [pc, #28]	; (800a704 <_fflush_r+0x4c>)
 800a6e8:	429c      	cmp	r4, r3
 800a6ea:	d101      	bne.n	800a6f0 <_fflush_r+0x38>
 800a6ec:	68ac      	ldr	r4, [r5, #8]
 800a6ee:	e7f1      	b.n	800a6d4 <_fflush_r+0x1c>
 800a6f0:	4b05      	ldr	r3, [pc, #20]	; (800a708 <_fflush_r+0x50>)
 800a6f2:	429c      	cmp	r4, r3
 800a6f4:	bf08      	it	eq
 800a6f6:	68ec      	ldreq	r4, [r5, #12]
 800a6f8:	e7ec      	b.n	800a6d4 <_fflush_r+0x1c>
 800a6fa:	2000      	movs	r0, #0
 800a6fc:	bd38      	pop	{r3, r4, r5, pc}
 800a6fe:	bf00      	nop
 800a700:	0800b5ec 	.word	0x0800b5ec
 800a704:	0800b60c 	.word	0x0800b60c
 800a708:	0800b5cc 	.word	0x0800b5cc

0800a70c <std>:
 800a70c:	2300      	movs	r3, #0
 800a70e:	b510      	push	{r4, lr}
 800a710:	4604      	mov	r4, r0
 800a712:	e9c0 3300 	strd	r3, r3, [r0]
 800a716:	6083      	str	r3, [r0, #8]
 800a718:	8181      	strh	r1, [r0, #12]
 800a71a:	6643      	str	r3, [r0, #100]	; 0x64
 800a71c:	81c2      	strh	r2, [r0, #14]
 800a71e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a722:	6183      	str	r3, [r0, #24]
 800a724:	4619      	mov	r1, r3
 800a726:	2208      	movs	r2, #8
 800a728:	305c      	adds	r0, #92	; 0x5c
 800a72a:	f7ff fda7 	bl	800a27c <memset>
 800a72e:	4b05      	ldr	r3, [pc, #20]	; (800a744 <std+0x38>)
 800a730:	6263      	str	r3, [r4, #36]	; 0x24
 800a732:	4b05      	ldr	r3, [pc, #20]	; (800a748 <std+0x3c>)
 800a734:	62a3      	str	r3, [r4, #40]	; 0x28
 800a736:	4b05      	ldr	r3, [pc, #20]	; (800a74c <std+0x40>)
 800a738:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a73a:	4b05      	ldr	r3, [pc, #20]	; (800a750 <std+0x44>)
 800a73c:	6224      	str	r4, [r4, #32]
 800a73e:	6323      	str	r3, [r4, #48]	; 0x30
 800a740:	bd10      	pop	{r4, pc}
 800a742:	bf00      	nop
 800a744:	0800aefd 	.word	0x0800aefd
 800a748:	0800af1f 	.word	0x0800af1f
 800a74c:	0800af57 	.word	0x0800af57
 800a750:	0800af7b 	.word	0x0800af7b

0800a754 <_cleanup_r>:
 800a754:	4901      	ldr	r1, [pc, #4]	; (800a75c <_cleanup_r+0x8>)
 800a756:	f000 b885 	b.w	800a864 <_fwalk_reent>
 800a75a:	bf00      	nop
 800a75c:	0800a6b9 	.word	0x0800a6b9

0800a760 <__sfmoreglue>:
 800a760:	b570      	push	{r4, r5, r6, lr}
 800a762:	1e4a      	subs	r2, r1, #1
 800a764:	2568      	movs	r5, #104	; 0x68
 800a766:	4355      	muls	r5, r2
 800a768:	460e      	mov	r6, r1
 800a76a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a76e:	f7ff fddb 	bl	800a328 <_malloc_r>
 800a772:	4604      	mov	r4, r0
 800a774:	b140      	cbz	r0, 800a788 <__sfmoreglue+0x28>
 800a776:	2100      	movs	r1, #0
 800a778:	e9c0 1600 	strd	r1, r6, [r0]
 800a77c:	300c      	adds	r0, #12
 800a77e:	60a0      	str	r0, [r4, #8]
 800a780:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a784:	f7ff fd7a 	bl	800a27c <memset>
 800a788:	4620      	mov	r0, r4
 800a78a:	bd70      	pop	{r4, r5, r6, pc}

0800a78c <__sinit>:
 800a78c:	6983      	ldr	r3, [r0, #24]
 800a78e:	b510      	push	{r4, lr}
 800a790:	4604      	mov	r4, r0
 800a792:	bb33      	cbnz	r3, 800a7e2 <__sinit+0x56>
 800a794:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a798:	6503      	str	r3, [r0, #80]	; 0x50
 800a79a:	4b12      	ldr	r3, [pc, #72]	; (800a7e4 <__sinit+0x58>)
 800a79c:	4a12      	ldr	r2, [pc, #72]	; (800a7e8 <__sinit+0x5c>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	6282      	str	r2, [r0, #40]	; 0x28
 800a7a2:	4298      	cmp	r0, r3
 800a7a4:	bf04      	itt	eq
 800a7a6:	2301      	moveq	r3, #1
 800a7a8:	6183      	streq	r3, [r0, #24]
 800a7aa:	f000 f81f 	bl	800a7ec <__sfp>
 800a7ae:	6060      	str	r0, [r4, #4]
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f000 f81b 	bl	800a7ec <__sfp>
 800a7b6:	60a0      	str	r0, [r4, #8]
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f000 f817 	bl	800a7ec <__sfp>
 800a7be:	2200      	movs	r2, #0
 800a7c0:	60e0      	str	r0, [r4, #12]
 800a7c2:	2104      	movs	r1, #4
 800a7c4:	6860      	ldr	r0, [r4, #4]
 800a7c6:	f7ff ffa1 	bl	800a70c <std>
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	2109      	movs	r1, #9
 800a7ce:	68a0      	ldr	r0, [r4, #8]
 800a7d0:	f7ff ff9c 	bl	800a70c <std>
 800a7d4:	2202      	movs	r2, #2
 800a7d6:	2112      	movs	r1, #18
 800a7d8:	68e0      	ldr	r0, [r4, #12]
 800a7da:	f7ff ff97 	bl	800a70c <std>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	61a3      	str	r3, [r4, #24]
 800a7e2:	bd10      	pop	{r4, pc}
 800a7e4:	0800b5c8 	.word	0x0800b5c8
 800a7e8:	0800a755 	.word	0x0800a755

0800a7ec <__sfp>:
 800a7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ee:	4b1b      	ldr	r3, [pc, #108]	; (800a85c <__sfp+0x70>)
 800a7f0:	681e      	ldr	r6, [r3, #0]
 800a7f2:	69b3      	ldr	r3, [r6, #24]
 800a7f4:	4607      	mov	r7, r0
 800a7f6:	b913      	cbnz	r3, 800a7fe <__sfp+0x12>
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f7ff ffc7 	bl	800a78c <__sinit>
 800a7fe:	3648      	adds	r6, #72	; 0x48
 800a800:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a804:	3b01      	subs	r3, #1
 800a806:	d503      	bpl.n	800a810 <__sfp+0x24>
 800a808:	6833      	ldr	r3, [r6, #0]
 800a80a:	b133      	cbz	r3, 800a81a <__sfp+0x2e>
 800a80c:	6836      	ldr	r6, [r6, #0]
 800a80e:	e7f7      	b.n	800a800 <__sfp+0x14>
 800a810:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a814:	b16d      	cbz	r5, 800a832 <__sfp+0x46>
 800a816:	3468      	adds	r4, #104	; 0x68
 800a818:	e7f4      	b.n	800a804 <__sfp+0x18>
 800a81a:	2104      	movs	r1, #4
 800a81c:	4638      	mov	r0, r7
 800a81e:	f7ff ff9f 	bl	800a760 <__sfmoreglue>
 800a822:	6030      	str	r0, [r6, #0]
 800a824:	2800      	cmp	r0, #0
 800a826:	d1f1      	bne.n	800a80c <__sfp+0x20>
 800a828:	230c      	movs	r3, #12
 800a82a:	603b      	str	r3, [r7, #0]
 800a82c:	4604      	mov	r4, r0
 800a82e:	4620      	mov	r0, r4
 800a830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a832:	4b0b      	ldr	r3, [pc, #44]	; (800a860 <__sfp+0x74>)
 800a834:	6665      	str	r5, [r4, #100]	; 0x64
 800a836:	e9c4 5500 	strd	r5, r5, [r4]
 800a83a:	60a5      	str	r5, [r4, #8]
 800a83c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a840:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a844:	2208      	movs	r2, #8
 800a846:	4629      	mov	r1, r5
 800a848:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a84c:	f7ff fd16 	bl	800a27c <memset>
 800a850:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a854:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a858:	e7e9      	b.n	800a82e <__sfp+0x42>
 800a85a:	bf00      	nop
 800a85c:	0800b5c8 	.word	0x0800b5c8
 800a860:	ffff0001 	.word	0xffff0001

0800a864 <_fwalk_reent>:
 800a864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a868:	4680      	mov	r8, r0
 800a86a:	4689      	mov	r9, r1
 800a86c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a870:	2600      	movs	r6, #0
 800a872:	b914      	cbnz	r4, 800a87a <_fwalk_reent+0x16>
 800a874:	4630      	mov	r0, r6
 800a876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a87a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a87e:	3f01      	subs	r7, #1
 800a880:	d501      	bpl.n	800a886 <_fwalk_reent+0x22>
 800a882:	6824      	ldr	r4, [r4, #0]
 800a884:	e7f5      	b.n	800a872 <_fwalk_reent+0xe>
 800a886:	89ab      	ldrh	r3, [r5, #12]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d907      	bls.n	800a89c <_fwalk_reent+0x38>
 800a88c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a890:	3301      	adds	r3, #1
 800a892:	d003      	beq.n	800a89c <_fwalk_reent+0x38>
 800a894:	4629      	mov	r1, r5
 800a896:	4640      	mov	r0, r8
 800a898:	47c8      	blx	r9
 800a89a:	4306      	orrs	r6, r0
 800a89c:	3568      	adds	r5, #104	; 0x68
 800a89e:	e7ee      	b.n	800a87e <_fwalk_reent+0x1a>

0800a8a0 <__swhatbuf_r>:
 800a8a0:	b570      	push	{r4, r5, r6, lr}
 800a8a2:	460e      	mov	r6, r1
 800a8a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8a8:	2900      	cmp	r1, #0
 800a8aa:	b096      	sub	sp, #88	; 0x58
 800a8ac:	4614      	mov	r4, r2
 800a8ae:	461d      	mov	r5, r3
 800a8b0:	da07      	bge.n	800a8c2 <__swhatbuf_r+0x22>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	602b      	str	r3, [r5, #0]
 800a8b6:	89b3      	ldrh	r3, [r6, #12]
 800a8b8:	061a      	lsls	r2, r3, #24
 800a8ba:	d410      	bmi.n	800a8de <__swhatbuf_r+0x3e>
 800a8bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8c0:	e00e      	b.n	800a8e0 <__swhatbuf_r+0x40>
 800a8c2:	466a      	mov	r2, sp
 800a8c4:	f000 fb80 	bl	800afc8 <_fstat_r>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	dbf2      	blt.n	800a8b2 <__swhatbuf_r+0x12>
 800a8cc:	9a01      	ldr	r2, [sp, #4]
 800a8ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a8d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a8d6:	425a      	negs	r2, r3
 800a8d8:	415a      	adcs	r2, r3
 800a8da:	602a      	str	r2, [r5, #0]
 800a8dc:	e7ee      	b.n	800a8bc <__swhatbuf_r+0x1c>
 800a8de:	2340      	movs	r3, #64	; 0x40
 800a8e0:	2000      	movs	r0, #0
 800a8e2:	6023      	str	r3, [r4, #0]
 800a8e4:	b016      	add	sp, #88	; 0x58
 800a8e6:	bd70      	pop	{r4, r5, r6, pc}

0800a8e8 <__smakebuf_r>:
 800a8e8:	898b      	ldrh	r3, [r1, #12]
 800a8ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8ec:	079d      	lsls	r5, r3, #30
 800a8ee:	4606      	mov	r6, r0
 800a8f0:	460c      	mov	r4, r1
 800a8f2:	d507      	bpl.n	800a904 <__smakebuf_r+0x1c>
 800a8f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	6123      	str	r3, [r4, #16]
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	6163      	str	r3, [r4, #20]
 800a900:	b002      	add	sp, #8
 800a902:	bd70      	pop	{r4, r5, r6, pc}
 800a904:	ab01      	add	r3, sp, #4
 800a906:	466a      	mov	r2, sp
 800a908:	f7ff ffca 	bl	800a8a0 <__swhatbuf_r>
 800a90c:	9900      	ldr	r1, [sp, #0]
 800a90e:	4605      	mov	r5, r0
 800a910:	4630      	mov	r0, r6
 800a912:	f7ff fd09 	bl	800a328 <_malloc_r>
 800a916:	b948      	cbnz	r0, 800a92c <__smakebuf_r+0x44>
 800a918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a91c:	059a      	lsls	r2, r3, #22
 800a91e:	d4ef      	bmi.n	800a900 <__smakebuf_r+0x18>
 800a920:	f023 0303 	bic.w	r3, r3, #3
 800a924:	f043 0302 	orr.w	r3, r3, #2
 800a928:	81a3      	strh	r3, [r4, #12]
 800a92a:	e7e3      	b.n	800a8f4 <__smakebuf_r+0xc>
 800a92c:	4b0d      	ldr	r3, [pc, #52]	; (800a964 <__smakebuf_r+0x7c>)
 800a92e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a930:	89a3      	ldrh	r3, [r4, #12]
 800a932:	6020      	str	r0, [r4, #0]
 800a934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a938:	81a3      	strh	r3, [r4, #12]
 800a93a:	9b00      	ldr	r3, [sp, #0]
 800a93c:	6163      	str	r3, [r4, #20]
 800a93e:	9b01      	ldr	r3, [sp, #4]
 800a940:	6120      	str	r0, [r4, #16]
 800a942:	b15b      	cbz	r3, 800a95c <__smakebuf_r+0x74>
 800a944:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a948:	4630      	mov	r0, r6
 800a94a:	f000 fb4f 	bl	800afec <_isatty_r>
 800a94e:	b128      	cbz	r0, 800a95c <__smakebuf_r+0x74>
 800a950:	89a3      	ldrh	r3, [r4, #12]
 800a952:	f023 0303 	bic.w	r3, r3, #3
 800a956:	f043 0301 	orr.w	r3, r3, #1
 800a95a:	81a3      	strh	r3, [r4, #12]
 800a95c:	89a3      	ldrh	r3, [r4, #12]
 800a95e:	431d      	orrs	r5, r3
 800a960:	81a5      	strh	r5, [r4, #12]
 800a962:	e7cd      	b.n	800a900 <__smakebuf_r+0x18>
 800a964:	0800a755 	.word	0x0800a755

0800a968 <__malloc_lock>:
 800a968:	4770      	bx	lr

0800a96a <__malloc_unlock>:
 800a96a:	4770      	bx	lr

0800a96c <__sfputc_r>:
 800a96c:	6893      	ldr	r3, [r2, #8]
 800a96e:	3b01      	subs	r3, #1
 800a970:	2b00      	cmp	r3, #0
 800a972:	b410      	push	{r4}
 800a974:	6093      	str	r3, [r2, #8]
 800a976:	da08      	bge.n	800a98a <__sfputc_r+0x1e>
 800a978:	6994      	ldr	r4, [r2, #24]
 800a97a:	42a3      	cmp	r3, r4
 800a97c:	db01      	blt.n	800a982 <__sfputc_r+0x16>
 800a97e:	290a      	cmp	r1, #10
 800a980:	d103      	bne.n	800a98a <__sfputc_r+0x1e>
 800a982:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a986:	f7ff bd51 	b.w	800a42c <__swbuf_r>
 800a98a:	6813      	ldr	r3, [r2, #0]
 800a98c:	1c58      	adds	r0, r3, #1
 800a98e:	6010      	str	r0, [r2, #0]
 800a990:	7019      	strb	r1, [r3, #0]
 800a992:	4608      	mov	r0, r1
 800a994:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a998:	4770      	bx	lr

0800a99a <__sfputs_r>:
 800a99a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99c:	4606      	mov	r6, r0
 800a99e:	460f      	mov	r7, r1
 800a9a0:	4614      	mov	r4, r2
 800a9a2:	18d5      	adds	r5, r2, r3
 800a9a4:	42ac      	cmp	r4, r5
 800a9a6:	d101      	bne.n	800a9ac <__sfputs_r+0x12>
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	e007      	b.n	800a9bc <__sfputs_r+0x22>
 800a9ac:	463a      	mov	r2, r7
 800a9ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	f7ff ffda 	bl	800a96c <__sfputc_r>
 800a9b8:	1c43      	adds	r3, r0, #1
 800a9ba:	d1f3      	bne.n	800a9a4 <__sfputs_r+0xa>
 800a9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9c0 <_vfiprintf_r>:
 800a9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c4:	460c      	mov	r4, r1
 800a9c6:	b09d      	sub	sp, #116	; 0x74
 800a9c8:	4617      	mov	r7, r2
 800a9ca:	461d      	mov	r5, r3
 800a9cc:	4606      	mov	r6, r0
 800a9ce:	b118      	cbz	r0, 800a9d8 <_vfiprintf_r+0x18>
 800a9d0:	6983      	ldr	r3, [r0, #24]
 800a9d2:	b90b      	cbnz	r3, 800a9d8 <_vfiprintf_r+0x18>
 800a9d4:	f7ff feda 	bl	800a78c <__sinit>
 800a9d8:	4b7c      	ldr	r3, [pc, #496]	; (800abcc <_vfiprintf_r+0x20c>)
 800a9da:	429c      	cmp	r4, r3
 800a9dc:	d158      	bne.n	800aa90 <_vfiprintf_r+0xd0>
 800a9de:	6874      	ldr	r4, [r6, #4]
 800a9e0:	89a3      	ldrh	r3, [r4, #12]
 800a9e2:	0718      	lsls	r0, r3, #28
 800a9e4:	d55e      	bpl.n	800aaa4 <_vfiprintf_r+0xe4>
 800a9e6:	6923      	ldr	r3, [r4, #16]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d05b      	beq.n	800aaa4 <_vfiprintf_r+0xe4>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a9f0:	2320      	movs	r3, #32
 800a9f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9f6:	2330      	movs	r3, #48	; 0x30
 800a9f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9fc:	9503      	str	r5, [sp, #12]
 800a9fe:	f04f 0b01 	mov.w	fp, #1
 800aa02:	46b8      	mov	r8, r7
 800aa04:	4645      	mov	r5, r8
 800aa06:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aa0a:	b10b      	cbz	r3, 800aa10 <_vfiprintf_r+0x50>
 800aa0c:	2b25      	cmp	r3, #37	; 0x25
 800aa0e:	d154      	bne.n	800aaba <_vfiprintf_r+0xfa>
 800aa10:	ebb8 0a07 	subs.w	sl, r8, r7
 800aa14:	d00b      	beq.n	800aa2e <_vfiprintf_r+0x6e>
 800aa16:	4653      	mov	r3, sl
 800aa18:	463a      	mov	r2, r7
 800aa1a:	4621      	mov	r1, r4
 800aa1c:	4630      	mov	r0, r6
 800aa1e:	f7ff ffbc 	bl	800a99a <__sfputs_r>
 800aa22:	3001      	adds	r0, #1
 800aa24:	f000 80c2 	beq.w	800abac <_vfiprintf_r+0x1ec>
 800aa28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa2a:	4453      	add	r3, sl
 800aa2c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa2e:	f898 3000 	ldrb.w	r3, [r8]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f000 80ba 	beq.w	800abac <_vfiprintf_r+0x1ec>
 800aa38:	2300      	movs	r3, #0
 800aa3a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa42:	9304      	str	r3, [sp, #16]
 800aa44:	9307      	str	r3, [sp, #28]
 800aa46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa4a:	931a      	str	r3, [sp, #104]	; 0x68
 800aa4c:	46a8      	mov	r8, r5
 800aa4e:	2205      	movs	r2, #5
 800aa50:	f818 1b01 	ldrb.w	r1, [r8], #1
 800aa54:	485e      	ldr	r0, [pc, #376]	; (800abd0 <_vfiprintf_r+0x210>)
 800aa56:	f7f5 fbe3 	bl	8000220 <memchr>
 800aa5a:	9b04      	ldr	r3, [sp, #16]
 800aa5c:	bb78      	cbnz	r0, 800aabe <_vfiprintf_r+0xfe>
 800aa5e:	06d9      	lsls	r1, r3, #27
 800aa60:	bf44      	itt	mi
 800aa62:	2220      	movmi	r2, #32
 800aa64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aa68:	071a      	lsls	r2, r3, #28
 800aa6a:	bf44      	itt	mi
 800aa6c:	222b      	movmi	r2, #43	; 0x2b
 800aa6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aa72:	782a      	ldrb	r2, [r5, #0]
 800aa74:	2a2a      	cmp	r2, #42	; 0x2a
 800aa76:	d02a      	beq.n	800aace <_vfiprintf_r+0x10e>
 800aa78:	9a07      	ldr	r2, [sp, #28]
 800aa7a:	46a8      	mov	r8, r5
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	250a      	movs	r5, #10
 800aa80:	4641      	mov	r1, r8
 800aa82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa86:	3b30      	subs	r3, #48	; 0x30
 800aa88:	2b09      	cmp	r3, #9
 800aa8a:	d969      	bls.n	800ab60 <_vfiprintf_r+0x1a0>
 800aa8c:	b360      	cbz	r0, 800aae8 <_vfiprintf_r+0x128>
 800aa8e:	e024      	b.n	800aada <_vfiprintf_r+0x11a>
 800aa90:	4b50      	ldr	r3, [pc, #320]	; (800abd4 <_vfiprintf_r+0x214>)
 800aa92:	429c      	cmp	r4, r3
 800aa94:	d101      	bne.n	800aa9a <_vfiprintf_r+0xda>
 800aa96:	68b4      	ldr	r4, [r6, #8]
 800aa98:	e7a2      	b.n	800a9e0 <_vfiprintf_r+0x20>
 800aa9a:	4b4f      	ldr	r3, [pc, #316]	; (800abd8 <_vfiprintf_r+0x218>)
 800aa9c:	429c      	cmp	r4, r3
 800aa9e:	bf08      	it	eq
 800aaa0:	68f4      	ldreq	r4, [r6, #12]
 800aaa2:	e79d      	b.n	800a9e0 <_vfiprintf_r+0x20>
 800aaa4:	4621      	mov	r1, r4
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	f7ff fd12 	bl	800a4d0 <__swsetup_r>
 800aaac:	2800      	cmp	r0, #0
 800aaae:	d09d      	beq.n	800a9ec <_vfiprintf_r+0x2c>
 800aab0:	f04f 30ff 	mov.w	r0, #4294967295
 800aab4:	b01d      	add	sp, #116	; 0x74
 800aab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaba:	46a8      	mov	r8, r5
 800aabc:	e7a2      	b.n	800aa04 <_vfiprintf_r+0x44>
 800aabe:	4a44      	ldr	r2, [pc, #272]	; (800abd0 <_vfiprintf_r+0x210>)
 800aac0:	1a80      	subs	r0, r0, r2
 800aac2:	fa0b f000 	lsl.w	r0, fp, r0
 800aac6:	4318      	orrs	r0, r3
 800aac8:	9004      	str	r0, [sp, #16]
 800aaca:	4645      	mov	r5, r8
 800aacc:	e7be      	b.n	800aa4c <_vfiprintf_r+0x8c>
 800aace:	9a03      	ldr	r2, [sp, #12]
 800aad0:	1d11      	adds	r1, r2, #4
 800aad2:	6812      	ldr	r2, [r2, #0]
 800aad4:	9103      	str	r1, [sp, #12]
 800aad6:	2a00      	cmp	r2, #0
 800aad8:	db01      	blt.n	800aade <_vfiprintf_r+0x11e>
 800aada:	9207      	str	r2, [sp, #28]
 800aadc:	e004      	b.n	800aae8 <_vfiprintf_r+0x128>
 800aade:	4252      	negs	r2, r2
 800aae0:	f043 0302 	orr.w	r3, r3, #2
 800aae4:	9207      	str	r2, [sp, #28]
 800aae6:	9304      	str	r3, [sp, #16]
 800aae8:	f898 3000 	ldrb.w	r3, [r8]
 800aaec:	2b2e      	cmp	r3, #46	; 0x2e
 800aaee:	d10e      	bne.n	800ab0e <_vfiprintf_r+0x14e>
 800aaf0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800aaf4:	2b2a      	cmp	r3, #42	; 0x2a
 800aaf6:	d138      	bne.n	800ab6a <_vfiprintf_r+0x1aa>
 800aaf8:	9b03      	ldr	r3, [sp, #12]
 800aafa:	1d1a      	adds	r2, r3, #4
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	9203      	str	r2, [sp, #12]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	bfb8      	it	lt
 800ab04:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab08:	f108 0802 	add.w	r8, r8, #2
 800ab0c:	9305      	str	r3, [sp, #20]
 800ab0e:	4d33      	ldr	r5, [pc, #204]	; (800abdc <_vfiprintf_r+0x21c>)
 800ab10:	f898 1000 	ldrb.w	r1, [r8]
 800ab14:	2203      	movs	r2, #3
 800ab16:	4628      	mov	r0, r5
 800ab18:	f7f5 fb82 	bl	8000220 <memchr>
 800ab1c:	b140      	cbz	r0, 800ab30 <_vfiprintf_r+0x170>
 800ab1e:	2340      	movs	r3, #64	; 0x40
 800ab20:	1b40      	subs	r0, r0, r5
 800ab22:	fa03 f000 	lsl.w	r0, r3, r0
 800ab26:	9b04      	ldr	r3, [sp, #16]
 800ab28:	4303      	orrs	r3, r0
 800ab2a:	f108 0801 	add.w	r8, r8, #1
 800ab2e:	9304      	str	r3, [sp, #16]
 800ab30:	f898 1000 	ldrb.w	r1, [r8]
 800ab34:	482a      	ldr	r0, [pc, #168]	; (800abe0 <_vfiprintf_r+0x220>)
 800ab36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab3a:	2206      	movs	r2, #6
 800ab3c:	f108 0701 	add.w	r7, r8, #1
 800ab40:	f7f5 fb6e 	bl	8000220 <memchr>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	d037      	beq.n	800abb8 <_vfiprintf_r+0x1f8>
 800ab48:	4b26      	ldr	r3, [pc, #152]	; (800abe4 <_vfiprintf_r+0x224>)
 800ab4a:	bb1b      	cbnz	r3, 800ab94 <_vfiprintf_r+0x1d4>
 800ab4c:	9b03      	ldr	r3, [sp, #12]
 800ab4e:	3307      	adds	r3, #7
 800ab50:	f023 0307 	bic.w	r3, r3, #7
 800ab54:	3308      	adds	r3, #8
 800ab56:	9303      	str	r3, [sp, #12]
 800ab58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab5a:	444b      	add	r3, r9
 800ab5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab5e:	e750      	b.n	800aa02 <_vfiprintf_r+0x42>
 800ab60:	fb05 3202 	mla	r2, r5, r2, r3
 800ab64:	2001      	movs	r0, #1
 800ab66:	4688      	mov	r8, r1
 800ab68:	e78a      	b.n	800aa80 <_vfiprintf_r+0xc0>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	f108 0801 	add.w	r8, r8, #1
 800ab70:	9305      	str	r3, [sp, #20]
 800ab72:	4619      	mov	r1, r3
 800ab74:	250a      	movs	r5, #10
 800ab76:	4640      	mov	r0, r8
 800ab78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab7c:	3a30      	subs	r2, #48	; 0x30
 800ab7e:	2a09      	cmp	r2, #9
 800ab80:	d903      	bls.n	800ab8a <_vfiprintf_r+0x1ca>
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d0c3      	beq.n	800ab0e <_vfiprintf_r+0x14e>
 800ab86:	9105      	str	r1, [sp, #20]
 800ab88:	e7c1      	b.n	800ab0e <_vfiprintf_r+0x14e>
 800ab8a:	fb05 2101 	mla	r1, r5, r1, r2
 800ab8e:	2301      	movs	r3, #1
 800ab90:	4680      	mov	r8, r0
 800ab92:	e7f0      	b.n	800ab76 <_vfiprintf_r+0x1b6>
 800ab94:	ab03      	add	r3, sp, #12
 800ab96:	9300      	str	r3, [sp, #0]
 800ab98:	4622      	mov	r2, r4
 800ab9a:	4b13      	ldr	r3, [pc, #76]	; (800abe8 <_vfiprintf_r+0x228>)
 800ab9c:	a904      	add	r1, sp, #16
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f3af 8000 	nop.w
 800aba4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aba8:	4681      	mov	r9, r0
 800abaa:	d1d5      	bne.n	800ab58 <_vfiprintf_r+0x198>
 800abac:	89a3      	ldrh	r3, [r4, #12]
 800abae:	065b      	lsls	r3, r3, #25
 800abb0:	f53f af7e 	bmi.w	800aab0 <_vfiprintf_r+0xf0>
 800abb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abb6:	e77d      	b.n	800aab4 <_vfiprintf_r+0xf4>
 800abb8:	ab03      	add	r3, sp, #12
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	4622      	mov	r2, r4
 800abbe:	4b0a      	ldr	r3, [pc, #40]	; (800abe8 <_vfiprintf_r+0x228>)
 800abc0:	a904      	add	r1, sp, #16
 800abc2:	4630      	mov	r0, r6
 800abc4:	f000 f888 	bl	800acd8 <_printf_i>
 800abc8:	e7ec      	b.n	800aba4 <_vfiprintf_r+0x1e4>
 800abca:	bf00      	nop
 800abcc:	0800b5ec 	.word	0x0800b5ec
 800abd0:	0800b62c 	.word	0x0800b62c
 800abd4:	0800b60c 	.word	0x0800b60c
 800abd8:	0800b5cc 	.word	0x0800b5cc
 800abdc:	0800b632 	.word	0x0800b632
 800abe0:	0800b636 	.word	0x0800b636
 800abe4:	00000000 	.word	0x00000000
 800abe8:	0800a99b 	.word	0x0800a99b

0800abec <_printf_common>:
 800abec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abf0:	4691      	mov	r9, r2
 800abf2:	461f      	mov	r7, r3
 800abf4:	688a      	ldr	r2, [r1, #8]
 800abf6:	690b      	ldr	r3, [r1, #16]
 800abf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abfc:	4293      	cmp	r3, r2
 800abfe:	bfb8      	it	lt
 800ac00:	4613      	movlt	r3, r2
 800ac02:	f8c9 3000 	str.w	r3, [r9]
 800ac06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac0a:	4606      	mov	r6, r0
 800ac0c:	460c      	mov	r4, r1
 800ac0e:	b112      	cbz	r2, 800ac16 <_printf_common+0x2a>
 800ac10:	3301      	adds	r3, #1
 800ac12:	f8c9 3000 	str.w	r3, [r9]
 800ac16:	6823      	ldr	r3, [r4, #0]
 800ac18:	0699      	lsls	r1, r3, #26
 800ac1a:	bf42      	ittt	mi
 800ac1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ac20:	3302      	addmi	r3, #2
 800ac22:	f8c9 3000 	strmi.w	r3, [r9]
 800ac26:	6825      	ldr	r5, [r4, #0]
 800ac28:	f015 0506 	ands.w	r5, r5, #6
 800ac2c:	d107      	bne.n	800ac3e <_printf_common+0x52>
 800ac2e:	f104 0a19 	add.w	sl, r4, #25
 800ac32:	68e3      	ldr	r3, [r4, #12]
 800ac34:	f8d9 2000 	ldr.w	r2, [r9]
 800ac38:	1a9b      	subs	r3, r3, r2
 800ac3a:	42ab      	cmp	r3, r5
 800ac3c:	dc28      	bgt.n	800ac90 <_printf_common+0xa4>
 800ac3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ac42:	6822      	ldr	r2, [r4, #0]
 800ac44:	3300      	adds	r3, #0
 800ac46:	bf18      	it	ne
 800ac48:	2301      	movne	r3, #1
 800ac4a:	0692      	lsls	r2, r2, #26
 800ac4c:	d42d      	bmi.n	800acaa <_printf_common+0xbe>
 800ac4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac52:	4639      	mov	r1, r7
 800ac54:	4630      	mov	r0, r6
 800ac56:	47c0      	blx	r8
 800ac58:	3001      	adds	r0, #1
 800ac5a:	d020      	beq.n	800ac9e <_printf_common+0xb2>
 800ac5c:	6823      	ldr	r3, [r4, #0]
 800ac5e:	68e5      	ldr	r5, [r4, #12]
 800ac60:	f8d9 2000 	ldr.w	r2, [r9]
 800ac64:	f003 0306 	and.w	r3, r3, #6
 800ac68:	2b04      	cmp	r3, #4
 800ac6a:	bf08      	it	eq
 800ac6c:	1aad      	subeq	r5, r5, r2
 800ac6e:	68a3      	ldr	r3, [r4, #8]
 800ac70:	6922      	ldr	r2, [r4, #16]
 800ac72:	bf0c      	ite	eq
 800ac74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac78:	2500      	movne	r5, #0
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	bfc4      	itt	gt
 800ac7e:	1a9b      	subgt	r3, r3, r2
 800ac80:	18ed      	addgt	r5, r5, r3
 800ac82:	f04f 0900 	mov.w	r9, #0
 800ac86:	341a      	adds	r4, #26
 800ac88:	454d      	cmp	r5, r9
 800ac8a:	d11a      	bne.n	800acc2 <_printf_common+0xd6>
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	e008      	b.n	800aca2 <_printf_common+0xb6>
 800ac90:	2301      	movs	r3, #1
 800ac92:	4652      	mov	r2, sl
 800ac94:	4639      	mov	r1, r7
 800ac96:	4630      	mov	r0, r6
 800ac98:	47c0      	blx	r8
 800ac9a:	3001      	adds	r0, #1
 800ac9c:	d103      	bne.n	800aca6 <_printf_common+0xba>
 800ac9e:	f04f 30ff 	mov.w	r0, #4294967295
 800aca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca6:	3501      	adds	r5, #1
 800aca8:	e7c3      	b.n	800ac32 <_printf_common+0x46>
 800acaa:	18e1      	adds	r1, r4, r3
 800acac:	1c5a      	adds	r2, r3, #1
 800acae:	2030      	movs	r0, #48	; 0x30
 800acb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acb4:	4422      	add	r2, r4
 800acb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acbe:	3302      	adds	r3, #2
 800acc0:	e7c5      	b.n	800ac4e <_printf_common+0x62>
 800acc2:	2301      	movs	r3, #1
 800acc4:	4622      	mov	r2, r4
 800acc6:	4639      	mov	r1, r7
 800acc8:	4630      	mov	r0, r6
 800acca:	47c0      	blx	r8
 800accc:	3001      	adds	r0, #1
 800acce:	d0e6      	beq.n	800ac9e <_printf_common+0xb2>
 800acd0:	f109 0901 	add.w	r9, r9, #1
 800acd4:	e7d8      	b.n	800ac88 <_printf_common+0x9c>
	...

0800acd8 <_printf_i>:
 800acd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acdc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ace0:	460c      	mov	r4, r1
 800ace2:	7e09      	ldrb	r1, [r1, #24]
 800ace4:	b085      	sub	sp, #20
 800ace6:	296e      	cmp	r1, #110	; 0x6e
 800ace8:	4617      	mov	r7, r2
 800acea:	4606      	mov	r6, r0
 800acec:	4698      	mov	r8, r3
 800acee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acf0:	f000 80b3 	beq.w	800ae5a <_printf_i+0x182>
 800acf4:	d822      	bhi.n	800ad3c <_printf_i+0x64>
 800acf6:	2963      	cmp	r1, #99	; 0x63
 800acf8:	d036      	beq.n	800ad68 <_printf_i+0x90>
 800acfa:	d80a      	bhi.n	800ad12 <_printf_i+0x3a>
 800acfc:	2900      	cmp	r1, #0
 800acfe:	f000 80b9 	beq.w	800ae74 <_printf_i+0x19c>
 800ad02:	2958      	cmp	r1, #88	; 0x58
 800ad04:	f000 8083 	beq.w	800ae0e <_printf_i+0x136>
 800ad08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ad10:	e032      	b.n	800ad78 <_printf_i+0xa0>
 800ad12:	2964      	cmp	r1, #100	; 0x64
 800ad14:	d001      	beq.n	800ad1a <_printf_i+0x42>
 800ad16:	2969      	cmp	r1, #105	; 0x69
 800ad18:	d1f6      	bne.n	800ad08 <_printf_i+0x30>
 800ad1a:	6820      	ldr	r0, [r4, #0]
 800ad1c:	6813      	ldr	r3, [r2, #0]
 800ad1e:	0605      	lsls	r5, r0, #24
 800ad20:	f103 0104 	add.w	r1, r3, #4
 800ad24:	d52a      	bpl.n	800ad7c <_printf_i+0xa4>
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	6011      	str	r1, [r2, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	da03      	bge.n	800ad36 <_printf_i+0x5e>
 800ad2e:	222d      	movs	r2, #45	; 0x2d
 800ad30:	425b      	negs	r3, r3
 800ad32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ad36:	486f      	ldr	r0, [pc, #444]	; (800aef4 <_printf_i+0x21c>)
 800ad38:	220a      	movs	r2, #10
 800ad3a:	e039      	b.n	800adb0 <_printf_i+0xd8>
 800ad3c:	2973      	cmp	r1, #115	; 0x73
 800ad3e:	f000 809d 	beq.w	800ae7c <_printf_i+0x1a4>
 800ad42:	d808      	bhi.n	800ad56 <_printf_i+0x7e>
 800ad44:	296f      	cmp	r1, #111	; 0x6f
 800ad46:	d020      	beq.n	800ad8a <_printf_i+0xb2>
 800ad48:	2970      	cmp	r1, #112	; 0x70
 800ad4a:	d1dd      	bne.n	800ad08 <_printf_i+0x30>
 800ad4c:	6823      	ldr	r3, [r4, #0]
 800ad4e:	f043 0320 	orr.w	r3, r3, #32
 800ad52:	6023      	str	r3, [r4, #0]
 800ad54:	e003      	b.n	800ad5e <_printf_i+0x86>
 800ad56:	2975      	cmp	r1, #117	; 0x75
 800ad58:	d017      	beq.n	800ad8a <_printf_i+0xb2>
 800ad5a:	2978      	cmp	r1, #120	; 0x78
 800ad5c:	d1d4      	bne.n	800ad08 <_printf_i+0x30>
 800ad5e:	2378      	movs	r3, #120	; 0x78
 800ad60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad64:	4864      	ldr	r0, [pc, #400]	; (800aef8 <_printf_i+0x220>)
 800ad66:	e055      	b.n	800ae14 <_printf_i+0x13c>
 800ad68:	6813      	ldr	r3, [r2, #0]
 800ad6a:	1d19      	adds	r1, r3, #4
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	6011      	str	r1, [r2, #0]
 800ad70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e08c      	b.n	800ae96 <_printf_i+0x1be>
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	6011      	str	r1, [r2, #0]
 800ad80:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad84:	bf18      	it	ne
 800ad86:	b21b      	sxthne	r3, r3
 800ad88:	e7cf      	b.n	800ad2a <_printf_i+0x52>
 800ad8a:	6813      	ldr	r3, [r2, #0]
 800ad8c:	6825      	ldr	r5, [r4, #0]
 800ad8e:	1d18      	adds	r0, r3, #4
 800ad90:	6010      	str	r0, [r2, #0]
 800ad92:	0628      	lsls	r0, r5, #24
 800ad94:	d501      	bpl.n	800ad9a <_printf_i+0xc2>
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	e002      	b.n	800ada0 <_printf_i+0xc8>
 800ad9a:	0668      	lsls	r0, r5, #25
 800ad9c:	d5fb      	bpl.n	800ad96 <_printf_i+0xbe>
 800ad9e:	881b      	ldrh	r3, [r3, #0]
 800ada0:	4854      	ldr	r0, [pc, #336]	; (800aef4 <_printf_i+0x21c>)
 800ada2:	296f      	cmp	r1, #111	; 0x6f
 800ada4:	bf14      	ite	ne
 800ada6:	220a      	movne	r2, #10
 800ada8:	2208      	moveq	r2, #8
 800adaa:	2100      	movs	r1, #0
 800adac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adb0:	6865      	ldr	r5, [r4, #4]
 800adb2:	60a5      	str	r5, [r4, #8]
 800adb4:	2d00      	cmp	r5, #0
 800adb6:	f2c0 8095 	blt.w	800aee4 <_printf_i+0x20c>
 800adba:	6821      	ldr	r1, [r4, #0]
 800adbc:	f021 0104 	bic.w	r1, r1, #4
 800adc0:	6021      	str	r1, [r4, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d13d      	bne.n	800ae42 <_printf_i+0x16a>
 800adc6:	2d00      	cmp	r5, #0
 800adc8:	f040 808e 	bne.w	800aee8 <_printf_i+0x210>
 800adcc:	4665      	mov	r5, ip
 800adce:	2a08      	cmp	r2, #8
 800add0:	d10b      	bne.n	800adea <_printf_i+0x112>
 800add2:	6823      	ldr	r3, [r4, #0]
 800add4:	07db      	lsls	r3, r3, #31
 800add6:	d508      	bpl.n	800adea <_printf_i+0x112>
 800add8:	6923      	ldr	r3, [r4, #16]
 800adda:	6862      	ldr	r2, [r4, #4]
 800addc:	429a      	cmp	r2, r3
 800adde:	bfde      	ittt	le
 800ade0:	2330      	movle	r3, #48	; 0x30
 800ade2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ade6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800adea:	ebac 0305 	sub.w	r3, ip, r5
 800adee:	6123      	str	r3, [r4, #16]
 800adf0:	f8cd 8000 	str.w	r8, [sp]
 800adf4:	463b      	mov	r3, r7
 800adf6:	aa03      	add	r2, sp, #12
 800adf8:	4621      	mov	r1, r4
 800adfa:	4630      	mov	r0, r6
 800adfc:	f7ff fef6 	bl	800abec <_printf_common>
 800ae00:	3001      	adds	r0, #1
 800ae02:	d14d      	bne.n	800aea0 <_printf_i+0x1c8>
 800ae04:	f04f 30ff 	mov.w	r0, #4294967295
 800ae08:	b005      	add	sp, #20
 800ae0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae0e:	4839      	ldr	r0, [pc, #228]	; (800aef4 <_printf_i+0x21c>)
 800ae10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ae14:	6813      	ldr	r3, [r2, #0]
 800ae16:	6821      	ldr	r1, [r4, #0]
 800ae18:	1d1d      	adds	r5, r3, #4
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	6015      	str	r5, [r2, #0]
 800ae1e:	060a      	lsls	r2, r1, #24
 800ae20:	d50b      	bpl.n	800ae3a <_printf_i+0x162>
 800ae22:	07ca      	lsls	r2, r1, #31
 800ae24:	bf44      	itt	mi
 800ae26:	f041 0120 	orrmi.w	r1, r1, #32
 800ae2a:	6021      	strmi	r1, [r4, #0]
 800ae2c:	b91b      	cbnz	r3, 800ae36 <_printf_i+0x15e>
 800ae2e:	6822      	ldr	r2, [r4, #0]
 800ae30:	f022 0220 	bic.w	r2, r2, #32
 800ae34:	6022      	str	r2, [r4, #0]
 800ae36:	2210      	movs	r2, #16
 800ae38:	e7b7      	b.n	800adaa <_printf_i+0xd2>
 800ae3a:	064d      	lsls	r5, r1, #25
 800ae3c:	bf48      	it	mi
 800ae3e:	b29b      	uxthmi	r3, r3
 800ae40:	e7ef      	b.n	800ae22 <_printf_i+0x14a>
 800ae42:	4665      	mov	r5, ip
 800ae44:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae48:	fb02 3311 	mls	r3, r2, r1, r3
 800ae4c:	5cc3      	ldrb	r3, [r0, r3]
 800ae4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ae52:	460b      	mov	r3, r1
 800ae54:	2900      	cmp	r1, #0
 800ae56:	d1f5      	bne.n	800ae44 <_printf_i+0x16c>
 800ae58:	e7b9      	b.n	800adce <_printf_i+0xf6>
 800ae5a:	6813      	ldr	r3, [r2, #0]
 800ae5c:	6825      	ldr	r5, [r4, #0]
 800ae5e:	6961      	ldr	r1, [r4, #20]
 800ae60:	1d18      	adds	r0, r3, #4
 800ae62:	6010      	str	r0, [r2, #0]
 800ae64:	0628      	lsls	r0, r5, #24
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	d501      	bpl.n	800ae6e <_printf_i+0x196>
 800ae6a:	6019      	str	r1, [r3, #0]
 800ae6c:	e002      	b.n	800ae74 <_printf_i+0x19c>
 800ae6e:	066a      	lsls	r2, r5, #25
 800ae70:	d5fb      	bpl.n	800ae6a <_printf_i+0x192>
 800ae72:	8019      	strh	r1, [r3, #0]
 800ae74:	2300      	movs	r3, #0
 800ae76:	6123      	str	r3, [r4, #16]
 800ae78:	4665      	mov	r5, ip
 800ae7a:	e7b9      	b.n	800adf0 <_printf_i+0x118>
 800ae7c:	6813      	ldr	r3, [r2, #0]
 800ae7e:	1d19      	adds	r1, r3, #4
 800ae80:	6011      	str	r1, [r2, #0]
 800ae82:	681d      	ldr	r5, [r3, #0]
 800ae84:	6862      	ldr	r2, [r4, #4]
 800ae86:	2100      	movs	r1, #0
 800ae88:	4628      	mov	r0, r5
 800ae8a:	f7f5 f9c9 	bl	8000220 <memchr>
 800ae8e:	b108      	cbz	r0, 800ae94 <_printf_i+0x1bc>
 800ae90:	1b40      	subs	r0, r0, r5
 800ae92:	6060      	str	r0, [r4, #4]
 800ae94:	6863      	ldr	r3, [r4, #4]
 800ae96:	6123      	str	r3, [r4, #16]
 800ae98:	2300      	movs	r3, #0
 800ae9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae9e:	e7a7      	b.n	800adf0 <_printf_i+0x118>
 800aea0:	6923      	ldr	r3, [r4, #16]
 800aea2:	462a      	mov	r2, r5
 800aea4:	4639      	mov	r1, r7
 800aea6:	4630      	mov	r0, r6
 800aea8:	47c0      	blx	r8
 800aeaa:	3001      	adds	r0, #1
 800aeac:	d0aa      	beq.n	800ae04 <_printf_i+0x12c>
 800aeae:	6823      	ldr	r3, [r4, #0]
 800aeb0:	079b      	lsls	r3, r3, #30
 800aeb2:	d413      	bmi.n	800aedc <_printf_i+0x204>
 800aeb4:	68e0      	ldr	r0, [r4, #12]
 800aeb6:	9b03      	ldr	r3, [sp, #12]
 800aeb8:	4298      	cmp	r0, r3
 800aeba:	bfb8      	it	lt
 800aebc:	4618      	movlt	r0, r3
 800aebe:	e7a3      	b.n	800ae08 <_printf_i+0x130>
 800aec0:	2301      	movs	r3, #1
 800aec2:	464a      	mov	r2, r9
 800aec4:	4639      	mov	r1, r7
 800aec6:	4630      	mov	r0, r6
 800aec8:	47c0      	blx	r8
 800aeca:	3001      	adds	r0, #1
 800aecc:	d09a      	beq.n	800ae04 <_printf_i+0x12c>
 800aece:	3501      	adds	r5, #1
 800aed0:	68e3      	ldr	r3, [r4, #12]
 800aed2:	9a03      	ldr	r2, [sp, #12]
 800aed4:	1a9b      	subs	r3, r3, r2
 800aed6:	42ab      	cmp	r3, r5
 800aed8:	dcf2      	bgt.n	800aec0 <_printf_i+0x1e8>
 800aeda:	e7eb      	b.n	800aeb4 <_printf_i+0x1dc>
 800aedc:	2500      	movs	r5, #0
 800aede:	f104 0919 	add.w	r9, r4, #25
 800aee2:	e7f5      	b.n	800aed0 <_printf_i+0x1f8>
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1ac      	bne.n	800ae42 <_printf_i+0x16a>
 800aee8:	7803      	ldrb	r3, [r0, #0]
 800aeea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aeee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aef2:	e76c      	b.n	800adce <_printf_i+0xf6>
 800aef4:	0800b63d 	.word	0x0800b63d
 800aef8:	0800b64e 	.word	0x0800b64e

0800aefc <__sread>:
 800aefc:	b510      	push	{r4, lr}
 800aefe:	460c      	mov	r4, r1
 800af00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af04:	f000 f894 	bl	800b030 <_read_r>
 800af08:	2800      	cmp	r0, #0
 800af0a:	bfab      	itete	ge
 800af0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af0e:	89a3      	ldrhlt	r3, [r4, #12]
 800af10:	181b      	addge	r3, r3, r0
 800af12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af16:	bfac      	ite	ge
 800af18:	6563      	strge	r3, [r4, #84]	; 0x54
 800af1a:	81a3      	strhlt	r3, [r4, #12]
 800af1c:	bd10      	pop	{r4, pc}

0800af1e <__swrite>:
 800af1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af22:	461f      	mov	r7, r3
 800af24:	898b      	ldrh	r3, [r1, #12]
 800af26:	05db      	lsls	r3, r3, #23
 800af28:	4605      	mov	r5, r0
 800af2a:	460c      	mov	r4, r1
 800af2c:	4616      	mov	r6, r2
 800af2e:	d505      	bpl.n	800af3c <__swrite+0x1e>
 800af30:	2302      	movs	r3, #2
 800af32:	2200      	movs	r2, #0
 800af34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af38:	f000 f868 	bl	800b00c <_lseek_r>
 800af3c:	89a3      	ldrh	r3, [r4, #12]
 800af3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af46:	81a3      	strh	r3, [r4, #12]
 800af48:	4632      	mov	r2, r6
 800af4a:	463b      	mov	r3, r7
 800af4c:	4628      	mov	r0, r5
 800af4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af52:	f000 b817 	b.w	800af84 <_write_r>

0800af56 <__sseek>:
 800af56:	b510      	push	{r4, lr}
 800af58:	460c      	mov	r4, r1
 800af5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af5e:	f000 f855 	bl	800b00c <_lseek_r>
 800af62:	1c43      	adds	r3, r0, #1
 800af64:	89a3      	ldrh	r3, [r4, #12]
 800af66:	bf15      	itete	ne
 800af68:	6560      	strne	r0, [r4, #84]	; 0x54
 800af6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af72:	81a3      	strheq	r3, [r4, #12]
 800af74:	bf18      	it	ne
 800af76:	81a3      	strhne	r3, [r4, #12]
 800af78:	bd10      	pop	{r4, pc}

0800af7a <__sclose>:
 800af7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af7e:	f000 b813 	b.w	800afa8 <_close_r>
	...

0800af84 <_write_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	4c07      	ldr	r4, [pc, #28]	; (800afa4 <_write_r+0x20>)
 800af88:	4605      	mov	r5, r0
 800af8a:	4608      	mov	r0, r1
 800af8c:	4611      	mov	r1, r2
 800af8e:	2200      	movs	r2, #0
 800af90:	6022      	str	r2, [r4, #0]
 800af92:	461a      	mov	r2, r3
 800af94:	f7f7 f840 	bl	8002018 <_write>
 800af98:	1c43      	adds	r3, r0, #1
 800af9a:	d102      	bne.n	800afa2 <_write_r+0x1e>
 800af9c:	6823      	ldr	r3, [r4, #0]
 800af9e:	b103      	cbz	r3, 800afa2 <_write_r+0x1e>
 800afa0:	602b      	str	r3, [r5, #0]
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
 800afa4:	20006fb8 	.word	0x20006fb8

0800afa8 <_close_r>:
 800afa8:	b538      	push	{r3, r4, r5, lr}
 800afaa:	4c06      	ldr	r4, [pc, #24]	; (800afc4 <_close_r+0x1c>)
 800afac:	2300      	movs	r3, #0
 800afae:	4605      	mov	r5, r0
 800afb0:	4608      	mov	r0, r1
 800afb2:	6023      	str	r3, [r4, #0]
 800afb4:	f7f7 f84c 	bl	8002050 <_close>
 800afb8:	1c43      	adds	r3, r0, #1
 800afba:	d102      	bne.n	800afc2 <_close_r+0x1a>
 800afbc:	6823      	ldr	r3, [r4, #0]
 800afbe:	b103      	cbz	r3, 800afc2 <_close_r+0x1a>
 800afc0:	602b      	str	r3, [r5, #0]
 800afc2:	bd38      	pop	{r3, r4, r5, pc}
 800afc4:	20006fb8 	.word	0x20006fb8

0800afc8 <_fstat_r>:
 800afc8:	b538      	push	{r3, r4, r5, lr}
 800afca:	4c07      	ldr	r4, [pc, #28]	; (800afe8 <_fstat_r+0x20>)
 800afcc:	2300      	movs	r3, #0
 800afce:	4605      	mov	r5, r0
 800afd0:	4608      	mov	r0, r1
 800afd2:	4611      	mov	r1, r2
 800afd4:	6023      	str	r3, [r4, #0]
 800afd6:	f7f7 f847 	bl	8002068 <_fstat>
 800afda:	1c43      	adds	r3, r0, #1
 800afdc:	d102      	bne.n	800afe4 <_fstat_r+0x1c>
 800afde:	6823      	ldr	r3, [r4, #0]
 800afe0:	b103      	cbz	r3, 800afe4 <_fstat_r+0x1c>
 800afe2:	602b      	str	r3, [r5, #0]
 800afe4:	bd38      	pop	{r3, r4, r5, pc}
 800afe6:	bf00      	nop
 800afe8:	20006fb8 	.word	0x20006fb8

0800afec <_isatty_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	4c06      	ldr	r4, [pc, #24]	; (800b008 <_isatty_r+0x1c>)
 800aff0:	2300      	movs	r3, #0
 800aff2:	4605      	mov	r5, r0
 800aff4:	4608      	mov	r0, r1
 800aff6:	6023      	str	r3, [r4, #0]
 800aff8:	f7f7 f846 	bl	8002088 <_isatty>
 800affc:	1c43      	adds	r3, r0, #1
 800affe:	d102      	bne.n	800b006 <_isatty_r+0x1a>
 800b000:	6823      	ldr	r3, [r4, #0]
 800b002:	b103      	cbz	r3, 800b006 <_isatty_r+0x1a>
 800b004:	602b      	str	r3, [r5, #0]
 800b006:	bd38      	pop	{r3, r4, r5, pc}
 800b008:	20006fb8 	.word	0x20006fb8

0800b00c <_lseek_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4c07      	ldr	r4, [pc, #28]	; (800b02c <_lseek_r+0x20>)
 800b010:	4605      	mov	r5, r0
 800b012:	4608      	mov	r0, r1
 800b014:	4611      	mov	r1, r2
 800b016:	2200      	movs	r2, #0
 800b018:	6022      	str	r2, [r4, #0]
 800b01a:	461a      	mov	r2, r3
 800b01c:	f7f7 f83f 	bl	800209e <_lseek>
 800b020:	1c43      	adds	r3, r0, #1
 800b022:	d102      	bne.n	800b02a <_lseek_r+0x1e>
 800b024:	6823      	ldr	r3, [r4, #0]
 800b026:	b103      	cbz	r3, 800b02a <_lseek_r+0x1e>
 800b028:	602b      	str	r3, [r5, #0]
 800b02a:	bd38      	pop	{r3, r4, r5, pc}
 800b02c:	20006fb8 	.word	0x20006fb8

0800b030 <_read_r>:
 800b030:	b538      	push	{r3, r4, r5, lr}
 800b032:	4c07      	ldr	r4, [pc, #28]	; (800b050 <_read_r+0x20>)
 800b034:	4605      	mov	r5, r0
 800b036:	4608      	mov	r0, r1
 800b038:	4611      	mov	r1, r2
 800b03a:	2200      	movs	r2, #0
 800b03c:	6022      	str	r2, [r4, #0]
 800b03e:	461a      	mov	r2, r3
 800b040:	f7f6 ffcd 	bl	8001fde <_read>
 800b044:	1c43      	adds	r3, r0, #1
 800b046:	d102      	bne.n	800b04e <_read_r+0x1e>
 800b048:	6823      	ldr	r3, [r4, #0]
 800b04a:	b103      	cbz	r3, 800b04e <_read_r+0x1e>
 800b04c:	602b      	str	r3, [r5, #0]
 800b04e:	bd38      	pop	{r3, r4, r5, pc}
 800b050:	20006fb8 	.word	0x20006fb8

0800b054 <_init>:
 800b054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b056:	bf00      	nop
 800b058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b05a:	bc08      	pop	{r3}
 800b05c:	469e      	mov	lr, r3
 800b05e:	4770      	bx	lr

0800b060 <_fini>:
 800b060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b062:	bf00      	nop
 800b064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b066:	bc08      	pop	{r3}
 800b068:	469e      	mov	lr, r3
 800b06a:	4770      	bx	lr
