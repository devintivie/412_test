
413_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adc8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  0800afa8  0800afa8  0001afa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5ac  0800b5ac  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5ac  0800b5ac  0001b5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5b4  0800b5b4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5b4  0800b5b4  0001b5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5b8  0800b5b8  0001b5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800b5bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007720  2000008c  0800b648  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200077ac  0800b648  000277ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020000  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004040  00000000  00000000  000400bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001910  00000000  00000000  00044100  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001708  00000000  00000000  00045a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028387  00000000  00000000  00047118  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a560  00000000  00000000  0006f49f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e0d17  00000000  00000000  000899ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016a716  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000700c  00000000  00000000  0016a794  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800af90 	.word	0x0800af90

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000090 	.word	0x20000090
 800021c:	0800af90 	.word	0x0800af90

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <write_PCM16_stereo_header>:
#include "fatfs.h"


/*Return 0 on success and -1 on failure*/
int write_PCM16_stereo_header(FILE* file_p, int32_t SampleRate, int32_t FrameCount)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
    int32_t subchunk2_size;
    int32_t chunk_size;

    size_t write_count;

    subchunk2_size  = FrameCount * NUM_CHANNELS * BITS_PER_SAMPLE/8;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	011b      	lsls	r3, r3, #4
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	da00      	bge.n	80005d6 <write_PCM16_stereo_header+0x16>
 80005d4:	3307      	adds	r3, #7
 80005d6:	10db      	asrs	r3, r3, #3
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    chunk_size      = 4 + (8 + SUBCHUNK1SIZE) + (8 + subchunk2_size);
 80005da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005dc:	3324      	adds	r3, #36	; 0x24
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48

    wav_header.ChunkID[0] = 'R';
 80005e0:	2352      	movs	r3, #82	; 0x52
 80005e2:	763b      	strb	r3, [r7, #24]
    wav_header.ChunkID[1] = 'I';
 80005e4:	2349      	movs	r3, #73	; 0x49
 80005e6:	767b      	strb	r3, [r7, #25]
    wav_header.ChunkID[2] = 'F';
 80005e8:	2346      	movs	r3, #70	; 0x46
 80005ea:	76bb      	strb	r3, [r7, #26]
    wav_header.ChunkID[3] = 'F';
 80005ec:	2346      	movs	r3, #70	; 0x46
 80005ee:	76fb      	strb	r3, [r7, #27]

    wav_header.ChunkSize = chunk_size;
 80005f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005f2:	61fb      	str	r3, [r7, #28]

    wav_header.Format[0] = 'W';
 80005f4:	2357      	movs	r3, #87	; 0x57
 80005f6:	f887 3020 	strb.w	r3, [r7, #32]
    wav_header.Format[1] = 'A';
 80005fa:	2341      	movs	r3, #65	; 0x41
 80005fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    wav_header.Format[2] = 'V';
 8000600:	2356      	movs	r3, #86	; 0x56
 8000602:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    wav_header.Format[3] = 'E';
 8000606:	2345      	movs	r3, #69	; 0x45
 8000608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    wav_header.Subchunk1ID[0] = 'f';
 800060c:	2366      	movs	r3, #102	; 0x66
 800060e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    wav_header.Subchunk1ID[1] = 'm';
 8000612:	236d      	movs	r3, #109	; 0x6d
 8000614:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    wav_header.Subchunk1ID[2] = 't';
 8000618:	2374      	movs	r3, #116	; 0x74
 800061a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    wav_header.Subchunk1ID[3] = ' ';
 800061e:	2320      	movs	r3, #32
 8000620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    wav_header.Subchunk1Size = SUBCHUNK1SIZE;
 8000624:	2310      	movs	r3, #16
 8000626:	62bb      	str	r3, [r7, #40]	; 0x28
    wav_header.AudioFormat = AUDIO_FORMAT;
 8000628:	2301      	movs	r3, #1
 800062a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    wav_header.NumChannels = NUM_CHANNELS;
 800062c:	2301      	movs	r3, #1
 800062e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    wav_header.SampleRate = SampleRate;
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
    wav_header.ByteRate = BYTE_RATE;
 8000634:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8000638:	637b      	str	r3, [r7, #52]	; 0x34
    wav_header.BlockAlign = BLOCK_ALIGN;
 800063a:	2302      	movs	r3, #2
 800063c:	873b      	strh	r3, [r7, #56]	; 0x38
    wav_header.BitsPerSample = BITS_PER_SAMPLE;
 800063e:	2310      	movs	r3, #16
 8000640:	877b      	strh	r3, [r7, #58]	; 0x3a

    wav_header.Subchunk2ID[0] = 'd';
 8000642:	2364      	movs	r3, #100	; 0x64
 8000644:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    wav_header.Subchunk2ID[1] = 'a';
 8000648:	2361      	movs	r3, #97	; 0x61
 800064a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    wav_header.Subchunk2ID[2] = 't';
 800064e:	2374      	movs	r3, #116	; 0x74
 8000650:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    wav_header.Subchunk2ID[3] = 'a';
 8000654:	2361      	movs	r3, #97	; 0x61
 8000656:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    wav_header.Subchunk2Size = subchunk2_size;
 800065a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800065c:	643b      	str	r3, [r7, #64]	; 0x40

    UINT byteCount;
	ret = f_write(file_p, &wav_header, sizeof(wavfile_header_t), &byteCount);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	f107 0118 	add.w	r1, r7, #24
 8000666:	222c      	movs	r2, #44	; 0x2c
 8000668:	68f8      	ldr	r0, [r7, #12]
 800066a:	f009 fae3 	bl	8009c34 <f_write>
 800066e:	4603      	mov	r3, r0
 8000670:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	printf("header write result = %d\r\n", ret);
 8000674:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000678:	4619      	mov	r1, r3
 800067a:	4804      	ldr	r0, [pc, #16]	; (800068c <write_PCM16_stereo_header+0xcc>)
 800067c:	f009 fe4c 	bl	800a318 <iprintf>
//	ret = f_close(file_p);
//	printf("header close result = %d\r\n", ret);
    return ret;
 8000680:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000684:	4618      	mov	r0, r3
 8000686:	3750      	adds	r7, #80	; 0x50
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	0800afa8 	.word	0x0800afa8

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f001 fd19 	bl	80020cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 f86b 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f000 fad1 	bl	8000c44 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a2:	f000 faaf 	bl	8000c04 <MX_DMA_Init>
  MX_ADC1_Init();
 80006a6:	f000 f8f5 	bl	8000894 <MX_ADC1_Init>
  MX_DAC_Init();
 80006aa:	f000 f945 	bl	8000938 <MX_DAC_Init>
  MX_DFSDM1_Init();
 80006ae:	f000 f96d 	bl	800098c <MX_DFSDM1_Init>
  MX_FMPI2C1_Init();
 80006b2:	f000 f9d1 	bl	8000a58 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 80006b6:	f000 fd05 	bl	80010c4 <MX_FSMC_Init>
  MX_QUADSPI_Init();
 80006ba:	f000 fa03 	bl	8000ac4 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 80006be:	f000 fa2d 	bl	8000b1c <MX_SDIO_SD_Init>
  MX_UART10_Init();
 80006c2:	f000 fa4b 	bl	8000b5c <MX_UART10_Init>
  MX_USART6_UART_Init();
 80006c6:	f000 fa73 	bl	8000bb0 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80006ca:	f006 fc71 	bl	8006fb0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	2120      	movs	r1, #32
 80006d2:	481d      	ldr	r0, [pc, #116]	; (8000748 <main+0xb8>)
 80006d4:	f003 fb0a 	bl	8003cec <HAL_GPIO_WritePin>


	printf("path: '%s'\r\n", SDPath);
 80006d8:	491c      	ldr	r1, [pc, #112]	; (800074c <main+0xbc>)
 80006da:	481d      	ldr	r0, [pc, #116]	; (8000750 <main+0xc0>)
 80006dc:	f009 fe1c 	bl	800a318 <iprintf>
//	double duration = 10; /*seconds*/


	fRet = f_mount(&myFAT, SDPath, 1);
 80006e0:	2201      	movs	r2, #1
 80006e2:	491a      	ldr	r1, [pc, #104]	; (800074c <main+0xbc>)
 80006e4:	481b      	ldr	r0, [pc, #108]	; (8000754 <main+0xc4>)
 80006e6:	f009 f893 	bl	8009810 <f_mount>
 80006ea:	4603      	mov	r3, r0
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <main+0xc8>)
 80006f0:	701a      	strb	r2, [r3, #0]
	printf("header write result = %d\r\n", fRet);
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <main+0xc8>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	4619      	mov	r1, r3
 80006f8:	4818      	ldr	r0, [pc, #96]	; (800075c <main+0xcc>)
 80006fa:	f009 fe0d 	bl	800a318 <iprintf>

	f_open(&myFile, fname, FA_WRITE | FA_CREATE_ALWAYS);
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <main+0xd0>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	220a      	movs	r2, #10
 8000704:	4619      	mov	r1, r3
 8000706:	4817      	ldr	r0, [pc, #92]	; (8000764 <main+0xd4>)
 8000708:	f009 f8c8 	bl	800989c <f_open>

//	write_PCM16_stereo_header(&myFile, SAMPLE_RATE, FrameCount * AUDIO_REC);
	write_PCM16_stereo_header(&myFile, SAMPLE_RATE, 131072);
 800070c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000710:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8000714:	4813      	ldr	r0, [pc, #76]	; (8000764 <main+0xd4>)
 8000716:	f7ff ff53 	bl	80005c0 <write_PCM16_stereo_header>
//	write_PCM_mono_2khz(&myFile);


  ret = HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, Rec1Buf, AUDIO_REC);
 800071a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800071e:	4912      	ldr	r1, [pc, #72]	; (8000768 <main+0xd8>)
 8000720:	4812      	ldr	r0, [pc, #72]	; (800076c <main+0xdc>)
 8000722:	f002 fb7b 	bl	8002e1c <HAL_DFSDM_FilterRegularStart_DMA>
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
  if(ret != HAL_OK)
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d002      	beq.n	8000736 <main+0xa6>
  {
	  printf("DMA on filter not started");
 8000730:	480f      	ldr	r0, [pc, #60]	; (8000770 <main+0xe0>)
 8000732:	f009 fdf1 	bl	800a318 <iprintf>
  }

  bool first = true;
 8000736:	2301      	movs	r3, #1
 8000738:	71bb      	strb	r3, [r7, #6]
//  ret = HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm2_filter0, Rec2Buf, AUDIO_REC);
//   if(ret != HAL_OK)
//   {
// 	  printf("DMA on filter not started");
//   }
   HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2120      	movs	r1, #32
 800073e:	4802      	ldr	r0, [pc, #8]	; (8000748 <main+0xb8>)
 8000740:	f003 fad4 	bl	8003cec <HAL_GPIO_WritePin>
//   	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000744:	e7fe      	b.n	8000744 <main+0xb4>
 8000746:	bf00      	nop
 8000748:	40020800 	.word	0x40020800
 800074c:	2000573c 	.word	0x2000573c
 8000750:	0800afe0 	.word	0x0800afe0
 8000754:	20003eb0 	.word	0x20003eb0
 8000758:	200000a8 	.word	0x200000a8
 800075c:	0800aff0 	.word	0x0800aff0
 8000760:	20000004 	.word	0x20000004
 8000764:	20001b7c 	.word	0x20001b7c
 8000768:	20002bac 	.word	0x20002bac
 800076c:	20003bac 	.word	0x20003bac
 8000770:	0800b00c 	.word	0x0800b00c

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b0aa      	sub	sp, #168	; 0xa8
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800077e:	2234      	movs	r2, #52	; 0x34
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f009 fd18 	bl	800a1b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	2258      	movs	r2, #88	; 0x58
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f009 fd09 	bl	800a1b8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b38      	ldr	r3, [pc, #224]	; (800088c <SystemClock_Config+0x118>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	4a37      	ldr	r2, [pc, #220]	; (800088c <SystemClock_Config+0x118>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b4:	6413      	str	r3, [r2, #64]	; 0x40
 80007b6:	4b35      	ldr	r3, [pc, #212]	; (800088c <SystemClock_Config+0x118>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b32      	ldr	r3, [pc, #200]	; (8000890 <SystemClock_Config+0x11c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a31      	ldr	r2, [pc, #196]	; (8000890 <SystemClock_Config+0x11c>)
 80007cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007d0:	6013      	str	r3, [r2, #0]
 80007d2:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <SystemClock_Config+0x11c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007de:	2302      	movs	r3, #2
 80007e0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e2:	2301      	movs	r3, #1
 80007e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e8:	2310      	movs	r3, #16
 80007ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ee:	2302      	movs	r3, #2
 80007f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f4:	2300      	movs	r3, #0
 80007f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007fa:	2308      	movs	r3, #8
 80007fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000800:	2360      	movs	r3, #96	; 0x60
 8000802:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000806:	2302      	movs	r3, #2
 8000808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800080c:	2304      	movs	r3, #4
 800080e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000812:	2302      	movs	r3, #2
 8000814:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800081c:	4618      	mov	r0, r3
 800081e:	f003 ff99 	bl	8004754 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000828:	f000 fe54 	bl	80014d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000830:	2302      	movs	r3, #2
 8000832:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000842:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000846:	2103      	movs	r1, #3
 8000848:	4618      	mov	r0, r3
 800084a:	f003 fb2b 	bl	8003ea4 <HAL_RCC_ClockConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000854:	f000 fe3e 	bl	80014d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_SDIO
 8000858:	f44f 73b8 	mov.w	r3, #368	; 0x170
 800085c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800085e:	2300      	movs	r3, #0
 8000860:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8000862:	2300      	movs	r3, #0
 8000864:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000866:	2300      	movs	r3, #0
 8000868:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 800086a:	2300      	movs	r3, #0
 800086c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	4618      	mov	r0, r3
 8000874:	f003 fce2 	bl	800423c <HAL_RCCEx_PeriphCLKConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800087e:	f000 fe29 	bl	80014d4 <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	37a8      	adds	r7, #168	; 0xa8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089a:	463b      	mov	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <MX_ADC1_Init+0x98>)
 80008a8:	4a21      	ldr	r2, [pc, #132]	; (8000930 <MX_ADC1_Init+0x9c>)
 80008aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <MX_ADC1_Init+0x98>)
 80008ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_ADC1_Init+0x98>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_ADC1_Init+0x98>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c0:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_ADC1_Init+0x98>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_ADC1_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_ADC1_Init+0x98>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_ADC1_Init+0x98>)
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <MX_ADC1_Init+0xa0>)
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_ADC1_Init+0x98>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_ADC1_Init+0x98>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_ADC1_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_ADC1_Init+0x98>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <MX_ADC1_Init+0x98>)
 80008f6:	f001 fc7d 	bl	80021f4 <HAL_ADC_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000900:	f000 fde8 	bl	80014d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000904:	230a      	movs	r3, #10
 8000906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000908:	2301      	movs	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_ADC1_Init+0x98>)
 8000916:	f001 fcb1 	bl	800227c <HAL_ADC_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000920:	f000 fdd8 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20003c94 	.word	0x20003c94
 8000930:	40012000 	.word	0x40012000
 8000934:	0f000001 	.word	0x0f000001

08000938 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800093e:	463b      	mov	r3, r7
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_DAC_Init+0x4c>)
 8000948:	4a0f      	ldr	r2, [pc, #60]	; (8000988 <MX_DAC_Init+0x50>)
 800094a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <MX_DAC_Init+0x4c>)
 800094e:	f001 ffd4 	bl	80028fa <HAL_DAC_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000958:	f000 fdbc 	bl	80014d4 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800095c:	2300      	movs	r3, #0
 800095e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	4619      	mov	r1, r3
 800096a:	4806      	ldr	r0, [pc, #24]	; (8000984 <MX_DAC_Init+0x4c>)
 800096c:	f001 ffe7 	bl	800293e <HAL_DAC_ConfigChannel>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000976:	f000 fdad 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20003d3c 	.word	0x20003d3c
 8000988:	40007400 	.word	0x40007400

0800098c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000990:	4b2c      	ldr	r3, [pc, #176]	; (8000a44 <MX_DFSDM1_Init+0xb8>)
 8000992:	4a2d      	ldr	r2, [pc, #180]	; (8000a48 <MX_DFSDM1_Init+0xbc>)
 8000994:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000996:	4b2b      	ldr	r3, [pc, #172]	; (8000a44 <MX_DFSDM1_Init+0xb8>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800099c:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <MX_DFSDM1_Init+0xb8>)
 800099e:	2201      	movs	r2, #1
 80009a0:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80009a2:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <MX_DFSDM1_Init+0xb8>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80009a8:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <MX_DFSDM1_Init+0xb8>)
 80009aa:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80009ae:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 150;
 80009b0:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <MX_DFSDM1_Init+0xb8>)
 80009b2:	2296      	movs	r2, #150	; 0x96
 80009b4:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80009b6:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <MX_DFSDM1_Init+0xb8>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80009bc:	4821      	ldr	r0, [pc, #132]	; (8000a44 <MX_DFSDM1_Init+0xb8>)
 80009be:	f002 f8fb 	bl	8002bb8 <HAL_DFSDM_FilterInit>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80009c8:	f000 fd84 	bl	80014d4 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <MX_DFSDM1_Init+0xc0>)
 80009ce:	4a20      	ldr	r2, [pc, #128]	; (8000a50 <MX_DFSDM1_Init+0xc4>)
 80009d0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_DFSDM1_Init+0xc0>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_DFSDM1_Init+0xc0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 40;
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_DFSDM1_Init+0xc0>)
 80009e0:	2228      	movs	r2, #40	; 0x28
 80009e2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_DFSDM1_Init+0xc0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_DFSDM1_Init+0xc0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_DFSDM1_Init+0xc0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_DFSDM1_Init+0xc0>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_DFSDM1_Init+0xc0>)
 80009fe:	2204      	movs	r2, #4
 8000a00:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_DFSDM1_Init+0xc0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000a08:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_DFSDM1_Init+0xc0>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_DFSDM1_Init+0xc0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x0;
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_DFSDM1_Init+0xc0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000a1a:	480c      	ldr	r0, [pc, #48]	; (8000a4c <MX_DFSDM1_Init+0xc0>)
 8000a1c:	f001 ffdc 	bl	80029d8 <HAL_DFSDM_ChannelInit>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000a26:	f000 fd55 	bl	80014d4 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4909      	ldr	r1, [pc, #36]	; (8000a54 <MX_DFSDM1_Init+0xc8>)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_DFSDM1_Init+0xb8>)
 8000a30:	f002 f9ae 	bl	8002d90 <HAL_DFSDM_FilterConfigRegChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000a3a:	f000 fd4b 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20003bac 	.word	0x20003bac
 8000a48:	40016100 	.word	0x40016100
 8000a4c:	20000b44 	.word	0x20000b44
 8000a50:	40016020 	.word	0x40016020
 8000a54:	00010002 	.word	0x00010002

08000a58 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_FMPI2C1_Init+0x60>)
 8000a5e:	4a17      	ldr	r2, [pc, #92]	; (8000abc <MX_FMPI2C1_Init+0x64>)
 8000a60:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x20303E5D;
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <MX_FMPI2C1_Init+0x60>)
 8000a64:	4a16      	ldr	r2, [pc, #88]	; (8000ac0 <MX_FMPI2C1_Init+0x68>)
 8000a66:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_FMPI2C1_Init+0x60>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_FMPI2C1_Init+0x60>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000a74:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MX_FMPI2C1_Init+0x60>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_FMPI2C1_Init+0x60>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000a80:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <MX_FMPI2C1_Init+0x60>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_FMPI2C1_Init+0x60>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MX_FMPI2C1_Init+0x60>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000a92:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <MX_FMPI2C1_Init+0x60>)
 8000a94:	f002 fea6 	bl	80037e4 <HAL_FMPI2C_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000a9e:	f000 fd19 	bl	80014d4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_FMPI2C1_Init+0x60>)
 8000aa6:	f002 ff2c 	bl	8003902 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000ab0:	f000 fd10 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20003d50 	.word	0x20003d50
 8000abc:	40006000 	.word	0x40006000
 8000ac0:	20303e5d 	.word	0x20303e5d

08000ac4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_QUADSPI_Init+0x50>)
 8000aca:	4a13      	ldr	r2, [pc, #76]	; (8000b18 <MX_QUADSPI_Init+0x54>)
 8000acc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_QUADSPI_Init+0x50>)
 8000ad0:	22ff      	movs	r2, #255	; 0xff
 8000ad2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_QUADSPI_Init+0x50>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_QUADSPI_Init+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_QUADSPI_Init+0x50>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <MX_QUADSPI_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_QUADSPI_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <MX_QUADSPI_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_QUADSPI_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_QUADSPI_Init+0x50>)
 8000b00:	f003 f90e 	bl	8003d20 <HAL_QSPI_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000b0a:	f000 fce3 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200056e8 	.word	0x200056e8
 8000b18:	a0001000 	.word	0xa0001000

08000b1c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b22:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <MX_SDIO_SD_Init+0x3c>)
 8000b24:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	20003dec 	.word	0x20003dec
 8000b58:	40012c00 	.word	0x40012c00

08000b5c <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_UART10_Init+0x4c>)
 8000b62:	4a12      	ldr	r2, [pc, #72]	; (8000bac <MX_UART10_Init+0x50>)
 8000b64:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_UART10_Init+0x4c>)
 8000b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b6c:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_UART10_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_UART10_Init+0x4c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <MX_UART10_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_UART10_Init+0x4c>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <MX_UART10_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_UART10_Init+0x4c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_UART10_Init+0x4c>)
 8000b94:	f005 f800 	bl	8005b98 <HAL_UART_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000b9e:	f000 fc99 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20003c04 	.word	0x20003c04
 8000bac:	40011c00 	.word	0x40011c00

08000bb0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_USART6_UART_Init+0x4c>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <MX_USART6_UART_Init+0x50>)
 8000bb8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <MX_USART6_UART_Init+0x4c>)
 8000bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_USART6_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_USART6_UART_Init+0x4c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_USART6_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_USART6_UART_Init+0x4c>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_USART6_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_USART6_UART_Init+0x4c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_USART6_UART_Init+0x4c>)
 8000be8:	f004 ffd6 	bl	8005b98 <HAL_UART_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000bf2:	f000 fc6f 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20003e70 	.word	0x20003e70
 8000c00:	40011400 	.word	0x40011400

08000c04 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_DMA_Init+0x3c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <MX_DMA_Init+0x3c>)
 8000c14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_DMA_Init+0x3c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2038      	movs	r0, #56	; 0x38
 8000c2c:	f001 fe2f 	bl	800288e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c30:	2038      	movs	r0, #56	; 0x38
 8000c32:	f001 fe48 	bl	80028c6 <HAL_NVIC_EnableIRQ>

}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08e      	sub	sp, #56	; 0x38
 8000c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
 8000c5e:	4bb0      	ldr	r3, [pc, #704]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4aaf      	ldr	r2, [pc, #700]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000c64:	f043 0310 	orr.w	r3, r3, #16
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4bad      	ldr	r3, [pc, #692]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0310 	and.w	r3, r3, #16
 8000c72:	623b      	str	r3, [r7, #32]
 8000c74:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	4ba9      	ldr	r3, [pc, #676]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4aa8      	ldr	r2, [pc, #672]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000c80:	f043 0304 	orr.w	r3, r3, #4
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4ba6      	ldr	r3, [pc, #664]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	61fb      	str	r3, [r7, #28]
 8000c90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	61bb      	str	r3, [r7, #24]
 8000c96:	4ba2      	ldr	r3, [pc, #648]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4aa1      	ldr	r2, [pc, #644]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000c9c:	f043 0320 	orr.w	r3, r3, #32
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b9f      	ldr	r3, [pc, #636]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0320 	and.w	r3, r3, #32
 8000caa:	61bb      	str	r3, [r7, #24]
 8000cac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	4b9b      	ldr	r3, [pc, #620]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a9a      	ldr	r2, [pc, #616]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b98      	ldr	r3, [pc, #608]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b94      	ldr	r3, [pc, #592]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a93      	ldr	r2, [pc, #588]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b91      	ldr	r3, [pc, #580]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b8d      	ldr	r3, [pc, #564]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a8c      	ldr	r2, [pc, #560]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b8a      	ldr	r3, [pc, #552]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	4b86      	ldr	r3, [pc, #536]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a85      	ldr	r2, [pc, #532]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b83      	ldr	r3, [pc, #524]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b7f      	ldr	r3, [pc, #508]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a7e      	ldr	r2, [pc, #504]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000d28:	f043 0308 	orr.w	r3, r3, #8
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b7c      	ldr	r3, [pc, #496]	; (8000f20 <MX_GPIO_Init+0x2dc>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2138      	movs	r1, #56	; 0x38
 8000d3e:	4879      	ldr	r0, [pc, #484]	; (8000f24 <MX_GPIO_Init+0x2e0>)
 8000d40:	f002 ffd4 	bl	8003cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2120      	movs	r1, #32
 8000d48:	4877      	ldr	r0, [pc, #476]	; (8000f28 <MX_GPIO_Init+0x2e4>)
 8000d4a:	f002 ffcf 	bl	8003cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000d54:	4875      	ldr	r0, [pc, #468]	; (8000f2c <MX_GPIO_Init+0x2e8>)
 8000d56:	f002 ffc9 	bl	8003cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000d60:	4873      	ldr	r0, [pc, #460]	; (8000f30 <MX_GPIO_Init+0x2ec>)
 8000d62:	f002 ffc3 	bl	8003cec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000d66:	2338      	movs	r3, #56	; 0x38
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4869      	ldr	r0, [pc, #420]	; (8000f24 <MX_GPIO_Init+0x2e0>)
 8000d7e:	f002 fe0b 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000d82:	2340      	movs	r3, #64	; 0x40
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000d92:	2303      	movs	r3, #3
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4861      	ldr	r0, [pc, #388]	; (8000f24 <MX_GPIO_Init+0x2e0>)
 8000d9e:	f002 fdfb 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000db4:	2302      	movs	r3, #2
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	485d      	ldr	r0, [pc, #372]	; (8000f34 <MX_GPIO_Init+0x2f0>)
 8000dc0:	f002 fdea 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc8:	4b5b      	ldr	r3, [pc, #364]	; (8000f38 <MX_GPIO_Init+0x2f4>)
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4854      	ldr	r0, [pc, #336]	; (8000f28 <MX_GPIO_Init+0x2e4>)
 8000dd8:	f002 fdde 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_ext_SD_Pin */
  GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8000dec:	2306      	movs	r3, #6
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df4:	4619      	mov	r1, r3
 8000df6:	484c      	ldr	r0, [pc, #304]	; (8000f28 <MX_GPIO_Init+0x2e4>)
 8000df8:	f002 fdce 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_SD_Pin */
  GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8000dfc:	2308      	movs	r3, #8
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e0c:	2305      	movs	r3, #5
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	4844      	ldr	r0, [pc, #272]	; (8000f28 <MX_GPIO_Init+0x2e4>)
 8000e18:	f002 fdbe 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e20:	4b45      	ldr	r3, [pc, #276]	; (8000f38 <MX_GPIO_Init+0x2f4>)
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4843      	ldr	r0, [pc, #268]	; (8000f3c <MX_GPIO_Init+0x2f8>)
 8000e30:	f002 fdb2 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_MCK_Pin */
  GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8000e34:	2308      	movs	r3, #8
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e44:	2305      	movs	r3, #5
 8000e46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	483b      	ldr	r0, [pc, #236]	; (8000f3c <MX_GPIO_Init+0x2f8>)
 8000e50:	f002 fda2 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_DATIN1_Pin */
  GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8000e64:	2307      	movs	r3, #7
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4833      	ldr	r0, [pc, #204]	; (8000f3c <MX_GPIO_Init+0x2f8>)
 8000e70:	f002 fd92 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000e74:	2320      	movs	r3, #32
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4827      	ldr	r0, [pc, #156]	; (8000f28 <MX_GPIO_Init+0x2e4>)
 8000e8c:	f002 fd84 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e90:	2301      	movs	r3, #1
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4820      	ldr	r0, [pc, #128]	; (8000f2c <MX_GPIO_Init+0x2e8>)
 8000eac:	f002 fd74 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000eb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	481b      	ldr	r0, [pc, #108]	; (8000f34 <MX_GPIO_Init+0x2f0>)
 8000ec6:	f002 fd67 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000eca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed0:	2312      	movs	r3, #18
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000edc:	2304      	movs	r3, #4
 8000ede:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4811      	ldr	r0, [pc, #68]	; (8000f2c <MX_GPIO_Init+0x2e8>)
 8000ee8:	f002 fd56 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8000eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000efe:	2307      	movs	r3, #7
 8000f00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f06:	4619      	mov	r1, r3
 8000f08:	4808      	ldr	r0, [pc, #32]	; (8000f2c <MX_GPIO_Init+0x2e8>)
 8000f0a:	f002 fd45 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8000f0e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e00f      	b.n	8000f40 <MX_GPIO_Init+0x2fc>
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40021800 	.word	0x40021800
 8000f34:	40021400 	.word	0x40021400
 8000f38:	10110000 	.word	0x10110000
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f46:	4619      	mov	r1, r3
 8000f48:	4859      	ldr	r0, [pc, #356]	; (80010b0 <MX_GPIO_Init+0x46c>)
 8000f4a:	f002 fd25 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8000f4e:	f248 0380 	movw	r3, #32896	; 0x8080
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f54:	4b57      	ldr	r3, [pc, #348]	; (80010b4 <MX_GPIO_Init+0x470>)
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f60:	4619      	mov	r1, r3
 8000f62:	4855      	ldr	r0, [pc, #340]	; (80010b8 <MX_GPIO_Init+0x474>)
 8000f64:	f002 fd18 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 8000f68:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7e:	4619      	mov	r1, r3
 8000f80:	484d      	ldr	r0, [pc, #308]	; (80010b8 <MX_GPIO_Init+0x474>)
 8000f82:	f002 fd09 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000f86:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f98:	230a      	movs	r3, #10
 8000f9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4846      	ldr	r0, [pc, #280]	; (80010bc <MX_GPIO_Init+0x478>)
 8000fa4:	f002 fcf8 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8000fa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	483d      	ldr	r0, [pc, #244]	; (80010bc <MX_GPIO_Init+0x478>)
 8000fc6:	f002 fce7 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8000fca:	2304      	movs	r3, #4
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4836      	ldr	r0, [pc, #216]	; (80010c0 <MX_GPIO_Init+0x47c>)
 8000fe6:	f002 fcd7 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_CK_Pin */
  GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8000fea:	2308      	movs	r3, #8
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ffa:	2305      	movs	r3, #5
 8000ffc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001002:	4619      	mov	r1, r3
 8001004:	482e      	ldr	r0, [pc, #184]	; (80010c0 <MX_GPIO_Init+0x47c>)
 8001006:	f002 fcc7 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800100a:	2330      	movs	r3, #48	; 0x30
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800101a:	2306      	movs	r3, #6
 800101c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001022:	4619      	mov	r1, r3
 8001024:	4822      	ldr	r0, [pc, #136]	; (80010b0 <MX_GPIO_Init+0x46c>)
 8001026:	f002 fcb7 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800102a:	2340      	movs	r3, #64	; 0x40
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <MX_GPIO_Init+0x470>)
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	4619      	mov	r1, r3
 800103c:	481c      	ldr	r0, [pc, #112]	; (80010b0 <MX_GPIO_Init+0x46c>)
 800103e:	f002 fcab 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_DATIN7_Pin */
  GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001042:	2380      	movs	r3, #128	; 0x80
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001052:	2306      	movs	r3, #6
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105a:	4619      	mov	r1, r3
 800105c:	4814      	ldr	r0, [pc, #80]	; (80010b0 <MX_GPIO_Init+0x46c>)
 800105e:	f002 fc9b 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001074:	2302      	movs	r3, #2
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	480c      	ldr	r0, [pc, #48]	; (80010b0 <MX_GPIO_Init+0x46c>)
 8001080:	f002 fc8a 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_WS_Pin */
  GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001096:	2305      	movs	r3, #5
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	4803      	ldr	r0, [pc, #12]	; (80010b0 <MX_GPIO_Init+0x46c>)
 80010a2:	f002 fc79 	bl	8003998 <HAL_GPIO_Init>

}
 80010a6:	bf00      	nop
 80010a8:	3738      	adds	r7, #56	; 0x38
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40020400 	.word	0x40020400
 80010b4:	10110000 	.word	0x10110000
 80010b8:	40021800 	.word	0x40021800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020c00 	.word	0x40020c00

080010c4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
 80010d8:	615a      	str	r2, [r3, #20]
 80010da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80010dc:	4b4f      	ldr	r3, [pc, #316]	; (800121c <MX_FSMC_Init+0x158>)
 80010de:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80010e2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80010e4:	4b4d      	ldr	r3, [pc, #308]	; (800121c <MX_FSMC_Init+0x158>)
 80010e6:	4a4e      	ldr	r2, [pc, #312]	; (8001220 <MX_FSMC_Init+0x15c>)
 80010e8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80010ea:	4b4c      	ldr	r3, [pc, #304]	; (800121c <MX_FSMC_Init+0x158>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80010f0:	4b4a      	ldr	r3, [pc, #296]	; (800121c <MX_FSMC_Init+0x158>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80010f6:	4b49      	ldr	r3, [pc, #292]	; (800121c <MX_FSMC_Init+0x158>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80010fc:	4b47      	ldr	r3, [pc, #284]	; (800121c <MX_FSMC_Init+0x158>)
 80010fe:	2210      	movs	r2, #16
 8001100:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001102:	4b46      	ldr	r3, [pc, #280]	; (800121c <MX_FSMC_Init+0x158>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001108:	4b44      	ldr	r3, [pc, #272]	; (800121c <MX_FSMC_Init+0x158>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800110e:	4b43      	ldr	r3, [pc, #268]	; (800121c <MX_FSMC_Init+0x158>)
 8001110:	2200      	movs	r2, #0
 8001112:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8001114:	4b41      	ldr	r3, [pc, #260]	; (800121c <MX_FSMC_Init+0x158>)
 8001116:	2200      	movs	r2, #0
 8001118:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800111a:	4b40      	ldr	r3, [pc, #256]	; (800121c <MX_FSMC_Init+0x158>)
 800111c:	2200      	movs	r2, #0
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001120:	4b3e      	ldr	r3, [pc, #248]	; (800121c <MX_FSMC_Init+0x158>)
 8001122:	2200      	movs	r2, #0
 8001124:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001126:	4b3d      	ldr	r3, [pc, #244]	; (800121c <MX_FSMC_Init+0x158>)
 8001128:	2200      	movs	r2, #0
 800112a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800112c:	4b3b      	ldr	r3, [pc, #236]	; (800121c <MX_FSMC_Init+0x158>)
 800112e:	2200      	movs	r2, #0
 8001130:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001132:	4b3a      	ldr	r3, [pc, #232]	; (800121c <MX_FSMC_Init+0x158>)
 8001134:	2200      	movs	r2, #0
 8001136:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001138:	4b38      	ldr	r3, [pc, #224]	; (800121c <MX_FSMC_Init+0x158>)
 800113a:	2200      	movs	r2, #0
 800113c:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800113e:	4b37      	ldr	r3, [pc, #220]	; (800121c <MX_FSMC_Init+0x158>)
 8001140:	2200      	movs	r2, #0
 8001142:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001144:	230f      	movs	r3, #15
 8001146:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001148:	230f      	movs	r3, #15
 800114a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800114c:	23ff      	movs	r3, #255	; 0xff
 800114e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001150:	230f      	movs	r3, #15
 8001152:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001154:	2310      	movs	r3, #16
 8001156:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001158:	2311      	movs	r3, #17
 800115a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	4619      	mov	r1, r3
 8001166:	482d      	ldr	r0, [pc, #180]	; (800121c <MX_FSMC_Init+0x158>)
 8001168:	f004 fcd2 	bl	8005b10 <HAL_SRAM_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 8001172:	f000 f9af 	bl	80014d4 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8001176:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <MX_FSMC_Init+0x160>)
 8001178:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800117c:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800117e:	4b29      	ldr	r3, [pc, #164]	; (8001224 <MX_FSMC_Init+0x160>)
 8001180:	4a27      	ldr	r2, [pc, #156]	; (8001220 <MX_FSMC_Init+0x15c>)
 8001182:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <MX_FSMC_Init+0x160>)
 8001186:	2204      	movs	r2, #4
 8001188:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <MX_FSMC_Init+0x160>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001190:	4b24      	ldr	r3, [pc, #144]	; (8001224 <MX_FSMC_Init+0x160>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001196:	4b23      	ldr	r3, [pc, #140]	; (8001224 <MX_FSMC_Init+0x160>)
 8001198:	2210      	movs	r2, #16
 800119a:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800119c:	4b21      	ldr	r3, [pc, #132]	; (8001224 <MX_FSMC_Init+0x160>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <MX_FSMC_Init+0x160>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80011a8:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <MX_FSMC_Init+0x160>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <MX_FSMC_Init+0x160>)
 80011b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011b4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <MX_FSMC_Init+0x160>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <MX_FSMC_Init+0x160>)
 80011be:	2200      	movs	r2, #0
 80011c0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <MX_FSMC_Init+0x160>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <MX_FSMC_Init+0x160>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_FSMC_Init+0x160>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <MX_FSMC_Init+0x160>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_FSMC_Init+0x160>)
 80011dc:	2200      	movs	r2, #0
 80011de:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80011e0:	230f      	movs	r3, #15
 80011e2:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80011e4:	230f      	movs	r3, #15
 80011e6:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80011e8:	23ff      	movs	r3, #255	; 0xff
 80011ea:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80011ec:	230f      	movs	r3, #15
 80011ee:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80011f0:	2310      	movs	r3, #16
 80011f2:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80011f4:	2311      	movs	r3, #17
 80011f6:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2200      	movs	r2, #0
 8001200:	4619      	mov	r1, r3
 8001202:	4808      	ldr	r0, [pc, #32]	; (8001224 <MX_FSMC_Init+0x160>)
 8001204:	f004 fc84 	bl	8005b10 <HAL_SRAM_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_FSMC_Init+0x14e>
  {
    Error_Handler( );
 800120e:	f000 f961 	bl	80014d4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001212:	bf00      	nop
 8001214:	3720      	adds	r7, #32
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20003c44 	.word	0x20003c44
 8001220:	a0000104 	.word	0xa0000104
 8001224:	20003d9c 	.word	0x20003d9c

08001228 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001228:	b480      	push	{r7}
 800122a:	b087      	sub	sp, #28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
//	DmaRecHalfBuffCplt=1;
	float unfiltered;
	float tmp;
	uint16_t finaltmp;

	for(int i = 0; i < AUDIO_REC/2; i++)
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	e062      	b.n	80012fc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xd4>
	{
		unfiltered = (float)Rec1Buf[i];
 8001236:	4a36      	ldr	r2, [pc, #216]	; (8001310 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xe8>)
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001246:	edc7 7a04 	vstr	s15, [r7, #16]
		tmp = a0* unfiltered + a1*in_z1 + a2*in_z2 - b1*out_z1 - b2 * out_z2;
 800124a:	4b32      	ldr	r3, [pc, #200]	; (8001314 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xec>)
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	edd7 7a04 	vldr	s15, [r7, #16]
 8001254:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001258:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xf0>)
 800125a:	edd3 6a00 	vldr	s13, [r3]
 800125e:	4b2f      	ldr	r3, [pc, #188]	; (800131c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xf4>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001268:	ee37 7a27 	vadd.f32	s14, s14, s15
 800126c:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xf8>)
 800126e:	edd3 6a00 	vldr	s13, [r3]
 8001272:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xfc>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800127c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001280:	4b29      	ldr	r3, [pc, #164]	; (8001328 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x100>)
 8001282:	edd3 6a00 	vldr	s13, [r3]
 8001286:	4b29      	ldr	r3, [pc, #164]	; (800132c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x104>)
 8001288:	edd3 7a00 	vldr	s15, [r3]
 800128c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001290:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001294:	4b26      	ldr	r3, [pc, #152]	; (8001330 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x108>)
 8001296:	edd3 6a00 	vldr	s13, [r3]
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x10c>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a8:	edc7 7a03 	vstr	s15, [r7, #12]

		in_z2 = in_z1;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xf4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a1c      	ldr	r2, [pc, #112]	; (8001324 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xfc>)
 80012b2:	6013      	str	r3, [r2, #0]
		in_z1 = unfiltered;
 80012b4:	4a19      	ldr	r2, [pc, #100]	; (800131c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xf4>)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	6013      	str	r3, [r2, #0]
		out_z2 = out_z1;
 80012ba:	4b1c      	ldr	r3, [pc, #112]	; (800132c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x104>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a1d      	ldr	r2, [pc, #116]	; (8001334 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x10c>)
 80012c0:	6013      	str	r3, [r2, #0]
		out_z1 = tmp;
 80012c2:	4a1a      	ldr	r2, [pc, #104]	; (800132c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x104>)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6013      	str	r3, [r2, #0]

//			Value1Buf[i] = (uint16_t)(((int32_t)tmp >> 8) & 0xffff);//(Rec1Buf[i] >> 8) & 0xffff;
		finaltmp = (uint16_t)(((int32_t)tmp >> 8) & 0xffff);//(Rec1Buf[i] >> 8) & 0xffff;
 80012c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80012cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d0:	ee17 3a90 	vmov	r3, s15
 80012d4:	121b      	asrs	r3, r3, #8
 80012d6:	817b      	strh	r3, [r7, #10]
		Value1Buf[i*2 + 1] = finaltmp >> 8;
 80012d8:	897b      	ldrh	r3, [r7, #10]
 80012da:	0a1b      	lsrs	r3, r3, #8
 80012dc:	b29a      	uxth	r2, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	3301      	adds	r3, #1
 80012e4:	b2d1      	uxtb	r1, r2
 80012e6:	4a14      	ldr	r2, [pc, #80]	; (8001338 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x110>)
 80012e8:	54d1      	strb	r1, [r2, r3]
		Value1Buf[i*2] = finaltmp & 0xff;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	897a      	ldrh	r2, [r7, #10]
 80012f0:	b2d1      	uxtb	r1, r2
 80012f2:	4a11      	ldr	r2, [pc, #68]	; (8001338 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x110>)
 80012f4:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < AUDIO_REC/2; i++)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	3301      	adds	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001302:	db98      	blt.n	8001236 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xe>
//		//	  {
//		//		  simpleBuf[i*2 +1] = toneBuf[i] >> 8;
//		//		  simpleBuf[i*2] = toneBuf[i];
//		//	  }
	}
}
 8001304:	bf00      	nop
 8001306:	371c      	adds	r7, #28
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	20002bac 	.word	0x20002bac
 8001314:	20000008 	.word	0x20000008
 8001318:	2000000c 	.word	0x2000000c
 800131c:	200000b0 	.word	0x200000b0
 8001320:	20000010 	.word	0x20000010
 8001324:	200000b4 	.word	0x200000b4
 8001328:	20000014 	.word	0x20000014
 800132c:	200000b8 	.word	0x200000b8
 8001330:	20000018 	.word	0x20000018
 8001334:	200000bc 	.word	0x200000bc
 8001338:	20000344 	.word	0x20000344

0800133c <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
//	DmaRecBuffCplt=1;
	float unfiltered;
	float tmp;
	uint16_t finaltmp;

	for(int i = AUDIO_REC/2; i < AUDIO_REC; i++)
 8001344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	e062      	b.n	8001412 <HAL_DFSDM_FilterRegConvCpltCallback+0xd6>
	{
		unfiltered = (float)Rec1Buf[i];
 800134c:	4a4e      	ldr	r2, [pc, #312]	; (8001488 <HAL_DFSDM_FilterRegConvCpltCallback+0x14c>)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001354:	ee07 3a90 	vmov	s15, r3
 8001358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135c:	edc7 7a04 	vstr	s15, [r7, #16]
		tmp = a0* unfiltered + a1*in_z1 + a2*in_z2 - b1*out_z1 - b2 * out_z2;
 8001360:	4b4a      	ldr	r3, [pc, #296]	; (800148c <HAL_DFSDM_FilterRegConvCpltCallback+0x150>)
 8001362:	ed93 7a00 	vldr	s14, [r3]
 8001366:	edd7 7a04 	vldr	s15, [r7, #16]
 800136a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800136e:	4b48      	ldr	r3, [pc, #288]	; (8001490 <HAL_DFSDM_FilterRegConvCpltCallback+0x154>)
 8001370:	edd3 6a00 	vldr	s13, [r3]
 8001374:	4b47      	ldr	r3, [pc, #284]	; (8001494 <HAL_DFSDM_FilterRegConvCpltCallback+0x158>)
 8001376:	edd3 7a00 	vldr	s15, [r3]
 800137a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800137e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001382:	4b45      	ldr	r3, [pc, #276]	; (8001498 <HAL_DFSDM_FilterRegConvCpltCallback+0x15c>)
 8001384:	edd3 6a00 	vldr	s13, [r3]
 8001388:	4b44      	ldr	r3, [pc, #272]	; (800149c <HAL_DFSDM_FilterRegConvCpltCallback+0x160>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001396:	4b42      	ldr	r3, [pc, #264]	; (80014a0 <HAL_DFSDM_FilterRegConvCpltCallback+0x164>)
 8001398:	edd3 6a00 	vldr	s13, [r3]
 800139c:	4b41      	ldr	r3, [pc, #260]	; (80014a4 <HAL_DFSDM_FilterRegConvCpltCallback+0x168>)
 800139e:	edd3 7a00 	vldr	s15, [r3]
 80013a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013aa:	4b3f      	ldr	r3, [pc, #252]	; (80014a8 <HAL_DFSDM_FilterRegConvCpltCallback+0x16c>)
 80013ac:	edd3 6a00 	vldr	s13, [r3]
 80013b0:	4b3e      	ldr	r3, [pc, #248]	; (80014ac <HAL_DFSDM_FilterRegConvCpltCallback+0x170>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013be:	edc7 7a03 	vstr	s15, [r7, #12]

		in_z2 = in_z1;
 80013c2:	4b34      	ldr	r3, [pc, #208]	; (8001494 <HAL_DFSDM_FilterRegConvCpltCallback+0x158>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a35      	ldr	r2, [pc, #212]	; (800149c <HAL_DFSDM_FilterRegConvCpltCallback+0x160>)
 80013c8:	6013      	str	r3, [r2, #0]
		in_z1 = unfiltered;
 80013ca:	4a32      	ldr	r2, [pc, #200]	; (8001494 <HAL_DFSDM_FilterRegConvCpltCallback+0x158>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	6013      	str	r3, [r2, #0]
		out_z2 = out_z1;
 80013d0:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <HAL_DFSDM_FilterRegConvCpltCallback+0x168>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a35      	ldr	r2, [pc, #212]	; (80014ac <HAL_DFSDM_FilterRegConvCpltCallback+0x170>)
 80013d6:	6013      	str	r3, [r2, #0]
		out_z1 = tmp;
 80013d8:	4a32      	ldr	r2, [pc, #200]	; (80014a4 <HAL_DFSDM_FilterRegConvCpltCallback+0x168>)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6013      	str	r3, [r2, #0]

		finaltmp = (uint16_t)(((int32_t)tmp >> 8) & 0xffff);//(Rec1Buf[i] >> 8) & 0xffff;
 80013de:	edd7 7a03 	vldr	s15, [r7, #12]
 80013e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e6:	ee17 3a90 	vmov	r3, s15
 80013ea:	121b      	asrs	r3, r3, #8
 80013ec:	817b      	strh	r3, [r7, #10]
		Value1Buf[i*2 + 1] = finaltmp >> 8;
 80013ee:	897b      	ldrh	r3, [r7, #10]
 80013f0:	0a1b      	lsrs	r3, r3, #8
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	3301      	adds	r3, #1
 80013fa:	b2d1      	uxtb	r1, r2
 80013fc:	4a2c      	ldr	r2, [pc, #176]	; (80014b0 <HAL_DFSDM_FilterRegConvCpltCallback+0x174>)
 80013fe:	54d1      	strb	r1, [r2, r3]
		Value1Buf[i*2] = finaltmp & 0xff;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	897a      	ldrh	r2, [r7, #10]
 8001406:	b2d1      	uxtb	r1, r2
 8001408:	4a29      	ldr	r2, [pc, #164]	; (80014b0 <HAL_DFSDM_FilterRegConvCpltCallback+0x174>)
 800140a:	54d1      	strb	r1, [r2, r3]
	for(int i = AUDIO_REC/2; i < AUDIO_REC; i++)
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001418:	db98      	blt.n	800134c <HAL_DFSDM_FilterRegConvCpltCallback+0x10>
	}

	if(pass++ < FrameCount)
 800141a:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <HAL_DFSDM_FilterRegConvCpltCallback+0x178>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	4924      	ldr	r1, [pc, #144]	; (80014b4 <HAL_DFSDM_FilterRegConvCpltCallback+0x178>)
 8001422:	600a      	str	r2, [r1, #0]
 8001424:	4a24      	ldr	r2, [pc, #144]	; (80014b8 <HAL_DFSDM_FilterRegConvCpltCallback+0x17c>)
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	4293      	cmp	r3, r2
 800142a:	da10      	bge.n	800144e <HAL_DFSDM_FilterRegConvCpltCallback+0x112>
	{
	//			  fRet = f_open(&myFile, fname, FA_WRITE | FA_OPEN_APPEND);// | FA_CREATE_ALWAYS);
	//			  printf("f_open error == %d\r\n", fRet);
		fRet = f_write(&myFile, Value1Buf, AUDIO_REC*2, &byteCount);
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <HAL_DFSDM_FilterRegConvCpltCallback+0x180>)
 800142e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001432:	491f      	ldr	r1, [pc, #124]	; (80014b0 <HAL_DFSDM_FilterRegConvCpltCallback+0x174>)
 8001434:	4822      	ldr	r0, [pc, #136]	; (80014c0 <HAL_DFSDM_FilterRegConvCpltCallback+0x184>)
 8001436:	f008 fbfd 	bl	8009c34 <f_write>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x188>)
 8001440:	701a      	strb	r2, [r3, #0]
		printf("f_write error == %d\r\n", fRet);
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x188>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	4619      	mov	r1, r3
 8001448:	481f      	ldr	r0, [pc, #124]	; (80014c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x18c>)
 800144a:	f008 ff65 	bl	800a318 <iprintf>
	//			  fRet = f_close(&myFile);
	//			  printf("f_close error == %d\r\n\n", fRet);
	}
	if(pass == FrameCount)
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_DFSDM_FilterRegConvCpltCallback+0x178>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_DFSDM_FilterRegConvCpltCallback+0x17c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	d111      	bne.n	800147e <HAL_DFSDM_FilterRegConvCpltCallback+0x142>
	{
	  fRet = f_close(&myFile);
 800145a:	4819      	ldr	r0, [pc, #100]	; (80014c0 <HAL_DFSDM_FilterRegConvCpltCallback+0x184>)
 800145c:	f008 fdfc 	bl	800a058 <f_close>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x188>)
 8001466:	701a      	strb	r2, [r3, #0]
	  printf("f_close error == %d\r\n\n", fRet);
 8001468:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x188>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	4817      	ldr	r0, [pc, #92]	; (80014cc <HAL_DFSDM_FilterRegConvCpltCallback+0x190>)
 8001470:	f008 ff52 	bl	800a318 <iprintf>
	  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 8001474:	2201      	movs	r2, #1
 8001476:	2120      	movs	r1, #32
 8001478:	4815      	ldr	r0, [pc, #84]	; (80014d0 <HAL_DFSDM_FilterRegConvCpltCallback+0x194>)
 800147a:	f002 fc37 	bl	8003cec <HAL_GPIO_WritePin>
	}

}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20002bac 	.word	0x20002bac
 800148c:	20000008 	.word	0x20000008
 8001490:	2000000c 	.word	0x2000000c
 8001494:	200000b0 	.word	0x200000b0
 8001498:	20000010 	.word	0x20000010
 800149c:	200000b4 	.word	0x200000b4
 80014a0:	20000014 	.word	0x20000014
 80014a4:	200000b8 	.word	0x200000b8
 80014a8:	20000018 	.word	0x20000018
 80014ac:	200000bc 	.word	0x200000bc
 80014b0:	20000344 	.word	0x20000344
 80014b4:	200000ac 	.word	0x200000ac
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20003c00 	.word	0x20003c00
 80014c0:	20001b7c 	.word	0x20001b7c
 80014c4:	200000a8 	.word	0x200000a8
 80014c8:	0800b028 	.word	0x0800b028
 80014cc:	0800b040 	.word	0x0800b040
 80014d0:	40020800 	.word	0x40020800

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_MspInit+0x4c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <HAL_MspInit+0x4c>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_MspInit+0x4c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_MspInit+0x4c>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <HAL_MspInit+0x4c>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_MspInit+0x4c>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800

08001534 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08c      	sub	sp, #48	; 0x30
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a31      	ldr	r2, [pc, #196]	; (8001618 <HAL_ADC_MspInit+0xe4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d15b      	bne.n	800160e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
 800155a:	4b30      	ldr	r3, [pc, #192]	; (800161c <HAL_ADC_MspInit+0xe8>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	4a2f      	ldr	r2, [pc, #188]	; (800161c <HAL_ADC_MspInit+0xe8>)
 8001560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001564:	6453      	str	r3, [r2, #68]	; 0x44
 8001566:	4b2d      	ldr	r3, [pc, #180]	; (800161c <HAL_ADC_MspInit+0xe8>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <HAL_ADC_MspInit+0xe8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a28      	ldr	r2, [pc, #160]	; (800161c <HAL_ADC_MspInit+0xe8>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <HAL_ADC_MspInit+0xe8>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <HAL_ADC_MspInit+0xe8>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a21      	ldr	r2, [pc, #132]	; (800161c <HAL_ADC_MspInit+0xe8>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b1f      	ldr	r3, [pc, #124]	; (800161c <HAL_ADC_MspInit+0xe8>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b1b      	ldr	r3, [pc, #108]	; (800161c <HAL_ADC_MspInit+0xe8>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a1a      	ldr	r2, [pc, #104]	; (800161c <HAL_ADC_MspInit+0xe8>)
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <HAL_ADC_MspInit+0xe8>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 80015c6:	2311      	movs	r3, #17
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ca:	2303      	movs	r3, #3
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	4619      	mov	r1, r3
 80015d8:	4811      	ldr	r0, [pc, #68]	; (8001620 <HAL_ADC_MspInit+0xec>)
 80015da:	f002 f9dd 	bl	8003998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 80015de:	2326      	movs	r3, #38	; 0x26
 80015e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e2:	2303      	movs	r3, #3
 80015e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	4619      	mov	r1, r3
 80015f0:	480c      	ldr	r0, [pc, #48]	; (8001624 <HAL_ADC_MspInit+0xf0>)
 80015f2:	f002 f9d1 	bl	8003998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fa:	2303      	movs	r3, #3
 80015fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4807      	ldr	r0, [pc, #28]	; (8001628 <HAL_ADC_MspInit+0xf4>)
 800160a:	f002 f9c5 	bl	8003998 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800160e:	bf00      	nop
 8001610:	3730      	adds	r7, #48	; 0x30
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40012000 	.word	0x40012000
 800161c:	40023800 	.word	0x40023800
 8001620:	40020800 	.word	0x40020800
 8001624:	40020000 	.word	0x40020000
 8001628:	40020400 	.word	0x40020400

0800162c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a17      	ldr	r2, [pc, #92]	; (80016a8 <HAL_DAC_MspInit+0x7c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d127      	bne.n	800169e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <HAL_DAC_MspInit+0x80>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a15      	ldr	r2, [pc, #84]	; (80016ac <HAL_DAC_MspInit+0x80>)
 8001658:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <HAL_DAC_MspInit+0x80>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <HAL_DAC_MspInit+0x80>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <HAL_DAC_MspInit+0x80>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_DAC_MspInit+0x80>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 8001686:	2310      	movs	r3, #16
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800168a:	2303      	movs	r3, #3
 800168c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <HAL_DAC_MspInit+0x84>)
 800169a:	f002 f97d 	bl	8003998 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800169e:	bf00      	nop
 80016a0:	3728      	adds	r7, #40	; 0x28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40007400 	.word	0x40007400
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020000 	.word	0x40020000

080016b4 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_FILTER_INSTANCE(hdfsdm_filter->Instance))&&(DFSDM1_Init == 0))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a50      	ldr	r2, [pc, #320]	; (8001814 <HAL_DFSDM_FilterMspInit+0x160>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d004      	beq.n	80016e0 <HAL_DFSDM_FilterMspInit+0x2c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a4f      	ldr	r2, [pc, #316]	; (8001818 <HAL_DFSDM_FilterMspInit+0x164>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d157      	bne.n	8001790 <HAL_DFSDM_FilterMspInit+0xdc>
 80016e0:	4b4e      	ldr	r3, [pc, #312]	; (800181c <HAL_DFSDM_FilterMspInit+0x168>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d153      	bne.n	8001790 <HAL_DFSDM_FilterMspInit+0xdc>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80016e8:	4b4d      	ldr	r3, [pc, #308]	; (8001820 <HAL_DFSDM_FilterMspInit+0x16c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	4a4c      	ldr	r2, [pc, #304]	; (8001820 <HAL_DFSDM_FilterMspInit+0x16c>)
 80016f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80016f2:	4b4b      	ldr	r3, [pc, #300]	; (8001820 <HAL_DFSDM_FilterMspInit+0x16c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d10d      	bne.n	8001716 <HAL_DFSDM_FilterMspInit+0x62>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	4b49      	ldr	r3, [pc, #292]	; (8001824 <HAL_DFSDM_FilterMspInit+0x170>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	4a48      	ldr	r2, [pc, #288]	; (8001824 <HAL_DFSDM_FilterMspInit+0x170>)
 8001704:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001708:	6453      	str	r3, [r2, #68]	; 0x44
 800170a:	4b46      	ldr	r3, [pc, #280]	; (8001824 <HAL_DFSDM_FilterMspInit+0x170>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b42      	ldr	r3, [pc, #264]	; (8001824 <HAL_DFSDM_FilterMspInit+0x170>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a41      	ldr	r2, [pc, #260]	; (8001824 <HAL_DFSDM_FilterMspInit+0x170>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b3f      	ldr	r3, [pc, #252]	; (8001824 <HAL_DFSDM_FilterMspInit+0x170>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <HAL_DFSDM_FilterMspInit+0x170>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a3a      	ldr	r2, [pc, #232]	; (8001824 <HAL_DFSDM_FilterMspInit+0x170>)
 800173c:	f043 0308 	orr.w	r3, r3, #8
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b38      	ldr	r3, [pc, #224]	; (8001824 <HAL_DFSDM_FilterMspInit+0x170>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 800174e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001760:	2306      	movs	r3, #6
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4619      	mov	r1, r3
 800176a:	482f      	ldr	r0, [pc, #188]	; (8001828 <HAL_DFSDM_FilterMspInit+0x174>)
 800176c:	f002 f914 	bl	8003998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001770:	2340      	movs	r3, #64	; 0x40
 8001772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001780:	2306      	movs	r3, #6
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	4828      	ldr	r0, [pc, #160]	; (800182c <HAL_DFSDM_FilterMspInit+0x178>)
 800178c:	f002 f904 	bl	8003998 <HAL_GPIO_Init>
  /* USER CODE END DFSDM1_MspInit 1 */
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <HAL_DFSDM_FilterMspInit+0x160>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d137      	bne.n	800180a <HAL_DFSDM_FilterMspInit+0x156>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 800179a:	4b25      	ldr	r3, [pc, #148]	; (8001830 <HAL_DFSDM_FilterMspInit+0x17c>)
 800179c:	4a25      	ldr	r2, [pc, #148]	; (8001834 <HAL_DFSDM_FilterMspInit+0x180>)
 800179e:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_7;
 80017a0:	4b23      	ldr	r3, [pc, #140]	; (8001830 <HAL_DFSDM_FilterMspInit+0x17c>)
 80017a2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80017a6:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <HAL_DFSDM_FilterMspInit+0x17c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <HAL_DFSDM_FilterMspInit+0x17c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <HAL_DFSDM_FilterMspInit+0x17c>)
 80017b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ba:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <HAL_DFSDM_FilterMspInit+0x17c>)
 80017be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017c2:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <HAL_DFSDM_FilterMspInit+0x17c>)
 80017c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ca:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80017cc:	4b18      	ldr	r3, [pc, #96]	; (8001830 <HAL_DFSDM_FilterMspInit+0x17c>)
 80017ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d2:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <HAL_DFSDM_FilterMspInit+0x17c>)
 80017d6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017da:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <HAL_DFSDM_FilterMspInit+0x17c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80017e2:	4813      	ldr	r0, [pc, #76]	; (8001830 <HAL_DFSDM_FilterMspInit+0x17c>)
 80017e4:	f001 fc90 	bl	8003108 <HAL_DMA_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_DFSDM_FilterMspInit+0x13e>
    {
      Error_Handler();
 80017ee:	f7ff fe71 	bl	80014d4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <HAL_DFSDM_FilterMspInit+0x17c>)
 80017f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <HAL_DFSDM_FilterMspInit+0x17c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001802:	629a      	str	r2, [r3, #40]	; 0x28
 8001804:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	; 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40016100 	.word	0x40016100
 8001818:	40016180 	.word	0x40016180
 800181c:	200000c4 	.word	0x200000c4
 8001820:	200000c0 	.word	0x200000c0
 8001824:	40023800 	.word	0x40023800
 8001828:	40020000 	.word	0x40020000
 800182c:	40020c00 	.word	0x40020c00
 8001830:	20003cdc 	.word	0x20003cdc
 8001834:	40026410 	.word	0x40026410

08001838 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a36      	ldr	r2, [pc, #216]	; (8001930 <HAL_DFSDM_ChannelMspInit+0xf8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d00e      	beq.n	8001878 <HAL_DFSDM_ChannelMspInit+0x40>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a35      	ldr	r2, [pc, #212]	; (8001934 <HAL_DFSDM_ChannelMspInit+0xfc>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d009      	beq.n	8001878 <HAL_DFSDM_ChannelMspInit+0x40>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a33      	ldr	r2, [pc, #204]	; (8001938 <HAL_DFSDM_ChannelMspInit+0x100>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d004      	beq.n	8001878 <HAL_DFSDM_ChannelMspInit+0x40>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a32      	ldr	r2, [pc, #200]	; (800193c <HAL_DFSDM_ChannelMspInit+0x104>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d157      	bne.n	8001928 <HAL_DFSDM_ChannelMspInit+0xf0>
 8001878:	4b31      	ldr	r3, [pc, #196]	; (8001940 <HAL_DFSDM_ChannelMspInit+0x108>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d153      	bne.n	8001928 <HAL_DFSDM_ChannelMspInit+0xf0>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001880:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3301      	adds	r3, #1
 8001886:	4a2f      	ldr	r2, [pc, #188]	; (8001944 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001888:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800188a:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <HAL_DFSDM_ChannelMspInit+0x10c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d10d      	bne.n	80018ae <HAL_DFSDM_ChannelMspInit+0x76>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <HAL_DFSDM_ChannelMspInit+0x110>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	4a2b      	ldr	r2, [pc, #172]	; (8001948 <HAL_DFSDM_ChannelMspInit+0x110>)
 800189c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018a0:	6453      	str	r3, [r2, #68]	; 0x44
 80018a2:	4b29      	ldr	r3, [pc, #164]	; (8001948 <HAL_DFSDM_ChannelMspInit+0x110>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_DFSDM_ChannelMspInit+0x110>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a24      	ldr	r2, [pc, #144]	; (8001948 <HAL_DFSDM_ChannelMspInit+0x110>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <HAL_DFSDM_ChannelMspInit+0x110>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <HAL_DFSDM_ChannelMspInit+0x110>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a1d      	ldr	r2, [pc, #116]	; (8001948 <HAL_DFSDM_ChannelMspInit+0x110>)
 80018d4:	f043 0308 	orr.w	r3, r3, #8
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_DFSDM_ChannelMspInit+0x110>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 80018e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80018f8:	2306      	movs	r3, #6
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	4812      	ldr	r0, [pc, #72]	; (800194c <HAL_DFSDM_ChannelMspInit+0x114>)
 8001904:	f002 f848 	bl	8003998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001908:	2340      	movs	r3, #64	; 0x40
 800190a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001918:	2306      	movs	r3, #6
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	480b      	ldr	r0, [pc, #44]	; (8001950 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001924:	f002 f838 	bl	8003998 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8001928:	bf00      	nop
 800192a:	3728      	adds	r7, #40	; 0x28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40016000 	.word	0x40016000
 8001934:	40016020 	.word	0x40016020
 8001938:	40016040 	.word	0x40016040
 800193c:	40016060 	.word	0x40016060
 8001940:	200000c4 	.word	0x200000c4
 8001944:	200000c0 	.word	0x200000c0
 8001948:	40023800 	.word	0x40023800
 800194c:	40020000 	.word	0x40020000
 8001950:	40020c00 	.word	0x40020c00

08001954 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <HAL_FMPI2C_MspInit+0x84>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d12b      	bne.n	80019ce <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_FMPI2C_MspInit+0x88>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a17      	ldr	r2, [pc, #92]	; (80019dc <HAL_FMPI2C_MspInit+0x88>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_FMPI2C_MspInit+0x88>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration    
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8001992:	23c0      	movs	r3, #192	; 0xc0
 8001994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001996:	2312      	movs	r3, #18
 8001998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800199a:	2301      	movs	r3, #1
 800199c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199e:	2303      	movs	r3, #3
 80019a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 80019a2:	2304      	movs	r3, #4
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	480c      	ldr	r0, [pc, #48]	; (80019e0 <HAL_FMPI2C_MspInit+0x8c>)
 80019ae:	f001 fff3 	bl	8003998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_FMPI2C_MspInit+0x88>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	4a08      	ldr	r2, [pc, #32]	; (80019dc <HAL_FMPI2C_MspInit+0x88>)
 80019bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_FMPI2C_MspInit+0x88>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40006000 	.word	0x40006000
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020800 	.word	0x40020800

080019e4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08e      	sub	sp, #56	; 0x38
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a56      	ldr	r2, [pc, #344]	; (8001b5c <HAL_QSPI_MspInit+0x178>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	f040 80a6 	bne.w	8001b54 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]
 8001a0c:	4b54      	ldr	r3, [pc, #336]	; (8001b60 <HAL_QSPI_MspInit+0x17c>)
 8001a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a10:	4a53      	ldr	r2, [pc, #332]	; (8001b60 <HAL_QSPI_MspInit+0x17c>)
 8001a12:	f043 0302 	orr.w	r3, r3, #2
 8001a16:	6393      	str	r3, [r2, #56]	; 0x38
 8001a18:	4b51      	ldr	r3, [pc, #324]	; (8001b60 <HAL_QSPI_MspInit+0x17c>)
 8001a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	623b      	str	r3, [r7, #32]
 8001a22:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
 8001a28:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <HAL_QSPI_MspInit+0x17c>)
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	4a4c      	ldr	r2, [pc, #304]	; (8001b60 <HAL_QSPI_MspInit+0x17c>)
 8001a2e:	f043 0310 	orr.w	r3, r3, #16
 8001a32:	6313      	str	r3, [r2, #48]	; 0x30
 8001a34:	4b4a      	ldr	r3, [pc, #296]	; (8001b60 <HAL_QSPI_MspInit+0x17c>)
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	f003 0310 	and.w	r3, r3, #16
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	4b46      	ldr	r3, [pc, #280]	; (8001b60 <HAL_QSPI_MspInit+0x17c>)
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a48:	4a45      	ldr	r2, [pc, #276]	; (8001b60 <HAL_QSPI_MspInit+0x17c>)
 8001a4a:	f043 0320 	orr.w	r3, r3, #32
 8001a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a50:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <HAL_QSPI_MspInit+0x17c>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	f003 0320 	and.w	r3, r3, #32
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	4b3f      	ldr	r3, [pc, #252]	; (8001b60 <HAL_QSPI_MspInit+0x17c>)
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	4a3e      	ldr	r2, [pc, #248]	; (8001b60 <HAL_QSPI_MspInit+0x17c>)
 8001a66:	f043 0302 	orr.w	r3, r3, #2
 8001a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6c:	4b3c      	ldr	r3, [pc, #240]	; (8001b60 <HAL_QSPI_MspInit+0x17c>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	4b38      	ldr	r3, [pc, #224]	; (8001b60 <HAL_QSPI_MspInit+0x17c>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	4a37      	ldr	r2, [pc, #220]	; (8001b60 <HAL_QSPI_MspInit+0x17c>)
 8001a82:	f043 0308 	orr.w	r3, r3, #8
 8001a86:	6313      	str	r3, [r2, #48]	; 0x30
 8001a88:	4b35      	ldr	r3, [pc, #212]	; (8001b60 <HAL_QSPI_MspInit+0x17c>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <HAL_QSPI_MspInit+0x17c>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	4a30      	ldr	r2, [pc, #192]	; (8001b60 <HAL_QSPI_MspInit+0x17c>)
 8001a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa4:	4b2e      	ldr	r3, [pc, #184]	; (8001b60 <HAL_QSPI_MspInit+0x17c>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001ac0:	2309      	movs	r3, #9
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4826      	ldr	r0, [pc, #152]	; (8001b64 <HAL_QSPI_MspInit+0x180>)
 8001acc:	f001 ff64 	bl	8003998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001ad0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ae2:	230a      	movs	r3, #10
 8001ae4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aea:	4619      	mov	r1, r3
 8001aec:	481e      	ldr	r0, [pc, #120]	; (8001b68 <HAL_QSPI_MspInit+0x184>)
 8001aee:	f001 ff53 	bl	8003998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001af2:	2304      	movs	r3, #4
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001b02:	2309      	movs	r3, #9
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4817      	ldr	r0, [pc, #92]	; (8001b6c <HAL_QSPI_MspInit+0x188>)
 8001b0e:	f001 ff43 	bl	8003998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001b12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b20:	2303      	movs	r3, #3
 8001b22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001b24:	2309      	movs	r3, #9
 8001b26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4810      	ldr	r0, [pc, #64]	; (8001b70 <HAL_QSPI_MspInit+0x18c>)
 8001b30:	f001 ff32 	bl	8003998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001b34:	2340      	movs	r3, #64	; 0x40
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b44:	230a      	movs	r3, #10
 8001b46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4809      	ldr	r0, [pc, #36]	; (8001b74 <HAL_QSPI_MspInit+0x190>)
 8001b50:	f001 ff22 	bl	8003998 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001b54:	bf00      	nop
 8001b56:	3738      	adds	r7, #56	; 0x38
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	a0001000 	.word	0xa0001000
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40021400 	.word	0x40021400
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	40020c00 	.word	0x40020c00
 8001b74:	40021800 	.word	0x40021800

08001b78 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a31      	ldr	r2, [pc, #196]	; (8001c5c <HAL_SD_MspInit+0xe4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d15b      	bne.n	8001c52 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <HAL_SD_MspInit+0xe8>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	4a2f      	ldr	r2, [pc, #188]	; (8001c60 <HAL_SD_MspInit+0xe8>)
 8001ba4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8001baa:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_SD_MspInit+0xe8>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <HAL_SD_MspInit+0xe8>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a28      	ldr	r2, [pc, #160]	; (8001c60 <HAL_SD_MspInit+0xe8>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <HAL_SD_MspInit+0xe8>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <HAL_SD_MspInit+0xe8>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a21      	ldr	r2, [pc, #132]	; (8001c60 <HAL_SD_MspInit+0xe8>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <HAL_SD_MspInit+0xe8>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK 
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001bee:	2340      	movs	r3, #64	; 0x40
 8001bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001bfe:	230c      	movs	r3, #12
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	4816      	ldr	r0, [pc, #88]	; (8001c64 <HAL_SD_MspInit+0xec>)
 8001c0a:	f001 fec5 	bl	8003998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin;
 8001c0e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001c20:	230c      	movs	r3, #12
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480f      	ldr	r0, [pc, #60]	; (8001c68 <HAL_SD_MspInit+0xf0>)
 8001c2c:	f001 feb4 	bl	8003998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_CLK_Pin;
 8001c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001c42:	230c      	movs	r3, #12
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CLK_GPIO_Port, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4806      	ldr	r0, [pc, #24]	; (8001c68 <HAL_SD_MspInit+0xf0>)
 8001c4e:	f001 fea3 	bl	8003998 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	; 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40012c00 	.word	0x40012c00
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020000 	.word	0x40020000
 8001c68:	40020800 	.word	0x40020800

08001c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08c      	sub	sp, #48	; 0x30
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a33      	ldr	r2, [pc, #204]	; (8001d58 <HAL_UART_MspInit+0xec>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d12d      	bne.n	8001cea <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	4b32      	ldr	r3, [pc, #200]	; (8001d5c <HAL_UART_MspInit+0xf0>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	4a31      	ldr	r2, [pc, #196]	; (8001d5c <HAL_UART_MspInit+0xf0>)
 8001c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9e:	4b2f      	ldr	r3, [pc, #188]	; (8001d5c <HAL_UART_MspInit+0xf0>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <HAL_UART_MspInit+0xf0>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a2a      	ldr	r2, [pc, #168]	; (8001d5c <HAL_UART_MspInit+0xf0>)
 8001cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <HAL_UART_MspInit+0xf0>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration    
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX 
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8001cc6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001cd8:	230b      	movs	r3, #11
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	481f      	ldr	r0, [pc, #124]	; (8001d60 <HAL_UART_MspInit+0xf4>)
 8001ce4:	f001 fe58 	bl	8003998 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ce8:	e031      	b.n	8001d4e <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1d      	ldr	r2, [pc, #116]	; (8001d64 <HAL_UART_MspInit+0xf8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d12c      	bne.n	8001d4e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <HAL_UART_MspInit+0xf0>)
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfc:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <HAL_UART_MspInit+0xf0>)
 8001cfe:	f043 0320 	orr.w	r3, r3, #32
 8001d02:	6453      	str	r3, [r2, #68]	; 0x44
 8001d04:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_UART_MspInit+0xf0>)
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	f003 0320 	and.w	r3, r3, #32
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_UART_MspInit+0xf0>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	4a10      	ldr	r2, [pc, #64]	; (8001d5c <HAL_UART_MspInit+0xf0>)
 8001d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <HAL_UART_MspInit+0xf0>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001d2c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d3e:	2308      	movs	r3, #8
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d42:	f107 031c 	add.w	r3, r7, #28
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	; (8001d60 <HAL_UART_MspInit+0xf4>)
 8001d4a:	f001 fe25 	bl	8003998 <HAL_GPIO_Init>
}
 8001d4e:	bf00      	nop
 8001d50:	3730      	adds	r7, #48	; 0x30
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40011c00 	.word	0x40011c00
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40021800 	.word	0x40021800
 8001d64:	40011400 	.word	0x40011400

08001d68 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001d7c:	4b2c      	ldr	r3, [pc, #176]	; (8001e30 <HAL_FSMC_MspInit+0xc8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d151      	bne.n	8001e28 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001d84:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <HAL_FSMC_MspInit+0xc8>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	603b      	str	r3, [r7, #0]
 8001d8e:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <HAL_FSMC_MspInit+0xcc>)
 8001d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d92:	4a28      	ldr	r2, [pc, #160]	; (8001e34 <HAL_FSMC_MspInit+0xcc>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6393      	str	r3, [r2, #56]	; 0x38
 8001d9a:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <HAL_FSMC_MspInit+0xcc>)
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin 
 8001da6:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001daa:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin 
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001db8:	230c      	movs	r3, #12
 8001dba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	481d      	ldr	r0, [pc, #116]	; (8001e38 <HAL_FSMC_MspInit+0xd0>)
 8001dc2:	f001 fde9 	bl	8003998 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin 
 8001dc6:	f240 433f 	movw	r3, #1087	; 0x43f
 8001dca:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001dd8:	230c      	movs	r3, #12
 8001dda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	4619      	mov	r1, r3
 8001de0:	4816      	ldr	r0, [pc, #88]	; (8001e3c <HAL_FSMC_MspInit+0xd4>)
 8001de2:	f001 fdd9 	bl	8003998 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin 
 8001de6:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001dea:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin 
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df4:	2303      	movs	r3, #3
 8001df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001df8:	230c      	movs	r3, #12
 8001dfa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	4619      	mov	r1, r3
 8001e00:	480f      	ldr	r0, [pc, #60]	; (8001e40 <HAL_FSMC_MspInit+0xd8>)
 8001e02:	f001 fdc9 	bl	8003998 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin 
 8001e06:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001e0a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin 
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e14:	2303      	movs	r3, #3
 8001e16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e18:	230c      	movs	r3, #12
 8001e1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4808      	ldr	r0, [pc, #32]	; (8001e44 <HAL_FSMC_MspInit+0xdc>)
 8001e22:	f001 fdb9 	bl	8003998 <HAL_GPIO_Init>
 8001e26:	e000      	b.n	8001e2a <HAL_FSMC_MspInit+0xc2>
    return;
 8001e28:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200000c8 	.word	0x200000c8
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40021400 	.word	0x40021400
 8001e3c:	40021800 	.word	0x40021800
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40020c00 	.word	0x40020c00

08001e48 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001e50:	f7ff ff8a 	bl	8001d68 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <HardFault_Handler+0x4>

08001e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <MemManage_Handler+0x4>

08001e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <BusFault_Handler+0x4>

08001e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <UsageFault_Handler+0x4>

08001e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb0:	f000 f95e 	bl	8002170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001ebc:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <DMA2_Stream0_IRQHandler+0x10>)
 8001ebe:	f001 fa29 	bl	8003314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20003cdc 	.word	0x20003cdc

08001ecc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ed4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ed8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d013      	beq.n	8001f0c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001ee4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ee8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001eec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00b      	beq.n	8001f0c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001ef4:	e000      	b.n	8001ef8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001ef6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001ef8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f9      	beq.n	8001ef6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001f02:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001f0c:	687b      	ldr	r3, [r7, #4]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	e00a      	b.n	8001f42 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f2c:	f3af 8000 	nop.w
 8001f30:	4601      	mov	r1, r0
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	60ba      	str	r2, [r7, #8]
 8001f38:	b2ca      	uxtb	r2, r1
 8001f3a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	dbf0      	blt.n	8001f2c <_read+0x12>
	}

return len;
 8001f4a:	687b      	ldr	r3, [r7, #4]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
		for(int i = 0; i < len; i++){
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	e009      	b.n	8001f7a <_write+0x26>
			ITM_SendChar(*ptr++);
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	60ba      	str	r2, [r7, #8]
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ffac 	bl	8001ecc <ITM_SendChar>
		for(int i = 0; i < len; i++){
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	3301      	adds	r3, #1
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	dbf1      	blt.n	8001f66 <_write+0x12>
		}
		return len;
 8001f82:	687b      	ldr	r3, [r7, #4]

	//	errno = ENOSYS;
	//	return -1;
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <_close>:

int _close(int file)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	return -1;
 8001f94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fb4:	605a      	str	r2, [r3, #4]
	return 0;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <_isatty>:

int _isatty(int file)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	return 1;
 8001fcc:	2301      	movs	r3, #1
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b085      	sub	sp, #20
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
	return 0;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <_sbrk+0x50>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d102      	bne.n	800200a <_sbrk+0x16>
		heap_end = &end;
 8002004:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <_sbrk+0x50>)
 8002006:	4a10      	ldr	r2, [pc, #64]	; (8002048 <_sbrk+0x54>)
 8002008:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <_sbrk+0x50>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <_sbrk+0x50>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4413      	add	r3, r2
 8002018:	466a      	mov	r2, sp
 800201a:	4293      	cmp	r3, r2
 800201c:	d907      	bls.n	800202e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800201e:	f008 f8a1 	bl	800a164 <__errno>
 8002022:	4602      	mov	r2, r0
 8002024:	230c      	movs	r3, #12
 8002026:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002028:	f04f 33ff 	mov.w	r3, #4294967295
 800202c:	e006      	b.n	800203c <_sbrk+0x48>
	}

	heap_end += incr;
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <_sbrk+0x50>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	4a03      	ldr	r2, [pc, #12]	; (8002044 <_sbrk+0x50>)
 8002038:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800203a:	68fb      	ldr	r3, [r7, #12]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200000cc 	.word	0x200000cc
 8002048:	200077b0 	.word	0x200077b0

0800204c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <SystemInit+0x28>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002056:	4a07      	ldr	r2, [pc, #28]	; (8002074 <SystemInit+0x28>)
 8002058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800205c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <SystemInit+0x28>)
 8002062:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002066:	609a      	str	r2, [r3, #8]
#endif
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800207c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800207e:	e003      	b.n	8002088 <LoopCopyDataInit>

08002080 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002082:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002084:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002086:	3104      	adds	r1, #4

08002088 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002088:	480b      	ldr	r0, [pc, #44]	; (80020b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800208c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800208e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002090:	d3f6      	bcc.n	8002080 <CopyDataInit>
  ldr  r2, =_sbss
 8002092:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002094:	e002      	b.n	800209c <LoopFillZerobss>

08002096 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002096:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002098:	f842 3b04 	str.w	r3, [r2], #4

0800209c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800209e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020a0:	d3f9      	bcc.n	8002096 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020a2:	f7ff ffd3 	bl	800204c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020a6:	f008 f863 	bl	800a170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020aa:	f7fe faf1 	bl	8000690 <main>
  bx  lr    
 80020ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80020b0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80020b4:	0800b5bc 	.word	0x0800b5bc
  ldr  r0, =_sdata
 80020b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020bc:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 80020c0:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 80020c4:	200077ac 	.word	0x200077ac

080020c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020c8:	e7fe      	b.n	80020c8 <ADC_IRQHandler>
	...

080020cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d0:	4b0e      	ldr	r3, [pc, #56]	; (800210c <HAL_Init+0x40>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0d      	ldr	r2, [pc, #52]	; (800210c <HAL_Init+0x40>)
 80020d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_Init+0x40>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a0a      	ldr	r2, [pc, #40]	; (800210c <HAL_Init+0x40>)
 80020e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <HAL_Init+0x40>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a07      	ldr	r2, [pc, #28]	; (800210c <HAL_Init+0x40>)
 80020ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f4:	2003      	movs	r0, #3
 80020f6:	f000 fbbf 	bl	8002878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f000 f808 	bl	8002110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002100:	f7ff f9f0 	bl	80014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40023c00 	.word	0x40023c00

08002110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_InitTick+0x54>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_InitTick+0x58>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4619      	mov	r1, r3
 8002122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002126:	fbb3 f3f1 	udiv	r3, r3, r1
 800212a:	fbb2 f3f3 	udiv	r3, r2, r3
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fbd7 	bl	80028e2 <HAL_SYSTICK_Config>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e00e      	b.n	800215c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b0f      	cmp	r3, #15
 8002142:	d80a      	bhi.n	800215a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002144:	2200      	movs	r2, #0
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f000 fb9f 	bl	800288e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002150:	4a06      	ldr	r2, [pc, #24]	; (800216c <HAL_InitTick+0x5c>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	e000      	b.n	800215c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	2000001c 	.word	0x2000001c
 8002168:	20000024 	.word	0x20000024
 800216c:	20000020 	.word	0x20000020

08002170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_IncTick+0x20>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_IncTick+0x24>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4413      	add	r3, r2
 8002180:	4a04      	ldr	r2, [pc, #16]	; (8002194 <HAL_IncTick+0x24>)
 8002182:	6013      	str	r3, [r2, #0]
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000024 	.word	0x20000024
 8002194:	20005734 	.word	0x20005734

08002198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return uwTick;
 800219c:	4b03      	ldr	r3, [pc, #12]	; (80021ac <HAL_GetTick+0x14>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20005734 	.word	0x20005734

080021b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021b8:	f7ff ffee 	bl	8002198 <HAL_GetTick>
 80021bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c8:	d005      	beq.n	80021d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_Delay+0x40>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4413      	add	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021d6:	bf00      	nop
 80021d8:	f7ff ffde 	bl	8002198 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d8f7      	bhi.n	80021d8 <HAL_Delay+0x28>
  {
  }
}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000024 	.word	0x20000024

080021f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e033      	b.n	8002272 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff f98e 	bl	8001534 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b00      	cmp	r3, #0
 8002230:	d118      	bne.n	8002264 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800223a:	f023 0302 	bic.w	r3, r3, #2
 800223e:	f043 0202 	orr.w	r2, r3, #2
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f94a 	bl	80024e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f023 0303 	bic.w	r3, r3, #3
 800225a:	f043 0201 	orr.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
 8002262:	e001      	b.n	8002268 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x1c>
 8002294:	2302      	movs	r3, #2
 8002296:	e113      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x244>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b09      	cmp	r3, #9
 80022a6:	d925      	bls.n	80022f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68d9      	ldr	r1, [r3, #12]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	4613      	mov	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4413      	add	r3, r2
 80022bc:	3b1e      	subs	r3, #30
 80022be:	2207      	movs	r2, #7
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43da      	mvns	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	400a      	ands	r2, r1
 80022cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68d9      	ldr	r1, [r3, #12]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	4603      	mov	r3, r0
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	4403      	add	r3, r0
 80022e6:	3b1e      	subs	r3, #30
 80022e8:	409a      	lsls	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	e022      	b.n	800233a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6919      	ldr	r1, [r3, #16]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	4613      	mov	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4413      	add	r3, r2
 8002308:	2207      	movs	r2, #7
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43da      	mvns	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	400a      	ands	r2, r1
 8002316:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6919      	ldr	r1, [r3, #16]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	b29b      	uxth	r3, r3
 8002328:	4618      	mov	r0, r3
 800232a:	4603      	mov	r3, r0
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4403      	add	r3, r0
 8002330:	409a      	lsls	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b06      	cmp	r3, #6
 8002340:	d824      	bhi.n	800238c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	3b05      	subs	r3, #5
 8002354:	221f      	movs	r2, #31
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43da      	mvns	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	400a      	ands	r2, r1
 8002362:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	b29b      	uxth	r3, r3
 8002370:	4618      	mov	r0, r3
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	3b05      	subs	r3, #5
 800237e:	fa00 f203 	lsl.w	r2, r0, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	635a      	str	r2, [r3, #52]	; 0x34
 800238a:	e04c      	b.n	8002426 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b0c      	cmp	r3, #12
 8002392:	d824      	bhi.n	80023de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	3b23      	subs	r3, #35	; 0x23
 80023a6:	221f      	movs	r2, #31
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43da      	mvns	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	400a      	ands	r2, r1
 80023b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	4618      	mov	r0, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	3b23      	subs	r3, #35	; 0x23
 80023d0:	fa00 f203 	lsl.w	r2, r0, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
 80023dc:	e023      	b.n	8002426 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	3b41      	subs	r3, #65	; 0x41
 80023f0:	221f      	movs	r2, #31
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	400a      	ands	r2, r1
 80023fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	4618      	mov	r0, r3
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	3b41      	subs	r3, #65	; 0x41
 800241a:	fa00 f203 	lsl.w	r2, r0, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002426:	4b29      	ldr	r3, [pc, #164]	; (80024cc <HAL_ADC_ConfigChannel+0x250>)
 8002428:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a28      	ldr	r2, [pc, #160]	; (80024d0 <HAL_ADC_ConfigChannel+0x254>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d10f      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x1d8>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b12      	cmp	r3, #18
 800243a:	d10b      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a1d      	ldr	r2, [pc, #116]	; (80024d0 <HAL_ADC_ConfigChannel+0x254>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d12b      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x23a>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a1c      	ldr	r2, [pc, #112]	; (80024d4 <HAL_ADC_ConfigChannel+0x258>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d003      	beq.n	8002470 <HAL_ADC_ConfigChannel+0x1f4>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b11      	cmp	r3, #17
 800246e:	d122      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a11      	ldr	r2, [pc, #68]	; (80024d4 <HAL_ADC_ConfigChannel+0x258>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d111      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HAL_ADC_ConfigChannel+0x25c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a11      	ldr	r2, [pc, #68]	; (80024dc <HAL_ADC_ConfigChannel+0x260>)
 8002498:	fba2 2303 	umull	r2, r3, r2, r3
 800249c:	0c9a      	lsrs	r2, r3, #18
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024a8:	e002      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f9      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	40012300 	.word	0x40012300
 80024d0:	40012000 	.word	0x40012000
 80024d4:	10000012 	.word	0x10000012
 80024d8:	2000001c 	.word	0x2000001c
 80024dc:	431bde83 	.word	0x431bde83

080024e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024e8:	4b79      	ldr	r3, [pc, #484]	; (80026d0 <ADC_Init+0x1f0>)
 80024ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	431a      	orrs	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002514:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6859      	ldr	r1, [r3, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	021a      	lsls	r2, r3, #8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002538:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6859      	ldr	r1, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800255a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6899      	ldr	r1, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002572:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <ADC_Init+0x1f4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d022      	beq.n	80025be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002586:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6899      	ldr	r1, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6899      	ldr	r1, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	e00f      	b.n	80025de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0202 	bic.w	r2, r2, #2
 80025ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6899      	ldr	r1, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7e1b      	ldrb	r3, [r3, #24]
 80025f8:	005a      	lsls	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d01b      	beq.n	8002644 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800261a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800262a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6859      	ldr	r1, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	3b01      	subs	r3, #1
 8002638:	035a      	lsls	r2, r3, #13
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	e007      	b.n	8002654 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002652:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	3b01      	subs	r3, #1
 8002670:	051a      	lsls	r2, r3, #20
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002688:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6899      	ldr	r1, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002696:	025a      	lsls	r2, r3, #9
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6899      	ldr	r1, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	029a      	lsls	r2, r3, #10
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	609a      	str	r2, [r3, #8]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	40012300 	.word	0x40012300
 80026d4:	0f000001 	.word	0x0f000001

080026d8 <__NVIC_SetPriorityGrouping>:
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <__NVIC_SetPriorityGrouping+0x44>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026f4:	4013      	ands	r3, r2
 80026f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800270a:	4a04      	ldr	r2, [pc, #16]	; (800271c <__NVIC_SetPriorityGrouping+0x44>)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	60d3      	str	r3, [r2, #12]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <__NVIC_GetPriorityGrouping>:
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <__NVIC_GetPriorityGrouping+0x18>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	0a1b      	lsrs	r3, r3, #8
 800272a:	f003 0307 	and.w	r3, r3, #7
}
 800272e:	4618      	mov	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <__NVIC_EnableIRQ>:
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274a:	2b00      	cmp	r3, #0
 800274c:	db0b      	blt.n	8002766 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	f003 021f 	and.w	r2, r3, #31
 8002754:	4907      	ldr	r1, [pc, #28]	; (8002774 <__NVIC_EnableIRQ+0x38>)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	2001      	movs	r0, #1
 800275e:	fa00 f202 	lsl.w	r2, r0, r2
 8002762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	e000e100 	.word	0xe000e100

08002778 <__NVIC_SetPriority>:
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	6039      	str	r1, [r7, #0]
 8002782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002788:	2b00      	cmp	r3, #0
 800278a:	db0a      	blt.n	80027a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	b2da      	uxtb	r2, r3
 8002790:	490c      	ldr	r1, [pc, #48]	; (80027c4 <__NVIC_SetPriority+0x4c>)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	0112      	lsls	r2, r2, #4
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	440b      	add	r3, r1
 800279c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027a0:	e00a      	b.n	80027b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4908      	ldr	r1, [pc, #32]	; (80027c8 <__NVIC_SetPriority+0x50>)
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	3b04      	subs	r3, #4
 80027b0:	0112      	lsls	r2, r2, #4
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	440b      	add	r3, r1
 80027b6:	761a      	strb	r2, [r3, #24]
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000e100 	.word	0xe000e100
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <NVIC_EncodePriority>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b089      	sub	sp, #36	; 0x24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f1c3 0307 	rsb	r3, r3, #7
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	bf28      	it	cs
 80027ea:	2304      	movcs	r3, #4
 80027ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3304      	adds	r3, #4
 80027f2:	2b06      	cmp	r3, #6
 80027f4:	d902      	bls.n	80027fc <NVIC_EncodePriority+0x30>
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3b03      	subs	r3, #3
 80027fa:	e000      	b.n	80027fe <NVIC_EncodePriority+0x32>
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002800:	f04f 32ff 	mov.w	r2, #4294967295
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43da      	mvns	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	401a      	ands	r2, r3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002814:	f04f 31ff 	mov.w	r1, #4294967295
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	fa01 f303 	lsl.w	r3, r1, r3
 800281e:	43d9      	mvns	r1, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002824:	4313      	orrs	r3, r2
}
 8002826:	4618      	mov	r0, r3
 8002828:	3724      	adds	r7, #36	; 0x24
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <SysTick_Config>:
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002844:	d301      	bcc.n	800284a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002846:	2301      	movs	r3, #1
 8002848:	e00f      	b.n	800286a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800284a:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <SysTick_Config+0x40>)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3b01      	subs	r3, #1
 8002850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002852:	210f      	movs	r1, #15
 8002854:	f04f 30ff 	mov.w	r0, #4294967295
 8002858:	f7ff ff8e 	bl	8002778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <SysTick_Config+0x40>)
 800285e:	2200      	movs	r2, #0
 8002860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002862:	4b04      	ldr	r3, [pc, #16]	; (8002874 <SysTick_Config+0x40>)
 8002864:	2207      	movs	r2, #7
 8002866:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	e000e010 	.word	0xe000e010

08002878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ff29 	bl	80026d8 <__NVIC_SetPriorityGrouping>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800288e:	b580      	push	{r7, lr}
 8002890:	b086      	sub	sp, #24
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a0:	f7ff ff3e 	bl	8002720 <__NVIC_GetPriorityGrouping>
 80028a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	6978      	ldr	r0, [r7, #20]
 80028ac:	f7ff ff8e 	bl	80027cc <NVIC_EncodePriority>
 80028b0:	4602      	mov	r2, r0
 80028b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff5d 	bl	8002778 <__NVIC_SetPriority>
}
 80028be:	bf00      	nop
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff31 	bl	800273c <__NVIC_EnableIRQ>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff ffa2 	bl	8002834 <SysTick_Config>
 80028f0:	4603      	mov	r3, r0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e014      	b.n	8002936 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	791b      	ldrb	r3, [r3, #4]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d105      	bne.n	8002922 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7fe fe85 	bl	800162c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2202      	movs	r2, #2
 8002926:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800293e:	b480      	push	{r7}
 8002940:	b087      	sub	sp, #28
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	795b      	ldrb	r3, [r3, #5]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_DAC_ConfigChannel+0x20>
 800295a:	2302      	movs	r3, #2
 800295c:	e036      	b.n	80029cc <HAL_DAC_ConfigChannel+0x8e>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2201      	movs	r2, #1
 8002962:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2202      	movs	r2, #2
 8002968:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002972:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4013      	ands	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	4313      	orrs	r3, r2
 800299c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6819      	ldr	r1, [r3, #0]
 80029ac:	22c0      	movs	r2, #192	; 0xc0
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43da      	mvns	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	400a      	ands	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2201      	movs	r2, #1
 80029c2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e0cf      	b.n	8002b8a <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a69      	ldr	r2, [pc, #420]	; (8002b94 <HAL_DFSDM_ChannelInit+0x1bc>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d00e      	beq.n	8002a12 <HAL_DFSDM_ChannelInit+0x3a>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a67      	ldr	r2, [pc, #412]	; (8002b98 <HAL_DFSDM_ChannelInit+0x1c0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d009      	beq.n	8002a12 <HAL_DFSDM_ChannelInit+0x3a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a66      	ldr	r2, [pc, #408]	; (8002b9c <HAL_DFSDM_ChannelInit+0x1c4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d004      	beq.n	8002a12 <HAL_DFSDM_ChannelInit+0x3a>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a64      	ldr	r2, [pc, #400]	; (8002ba0 <HAL_DFSDM_ChannelInit+0x1c8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d106      	bne.n	8002a20 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8002a12:	4b64      	ldr	r3, [pc, #400]	; (8002ba4 <HAL_DFSDM_ChannelInit+0x1cc>)
 8002a14:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8002a16:	4b64      	ldr	r3, [pc, #400]	; (8002ba8 <HAL_DFSDM_ChannelInit+0x1d0>)
 8002a18:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8002a1a:	4b5e      	ldr	r3, [pc, #376]	; (8002b94 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e005      	b.n	8002a2c <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8002a20:	4b62      	ldr	r3, [pc, #392]	; (8002bac <HAL_DFSDM_ChannelInit+0x1d4>)
 8002a22:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8002a24:	4b62      	ldr	r3, [pc, #392]	; (8002bb0 <HAL_DFSDM_ChannelInit+0x1d8>)
 8002a26:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8002a28:	4b62      	ldr	r3, [pc, #392]	; (8002bb4 <HAL_DFSDM_ChannelInit+0x1dc>)
 8002a2a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 faaf 	bl	8002f94 <DFSDM_GetChannelFromInstance>
 8002a36:	4603      	mov	r3, r0
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0a0      	b.n	8002b8a <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7fe fef5 	bl	8001838 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d125      	bne.n	8002aac <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	791b      	ldrb	r3, [r3, #4]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d108      	bne.n	8002aa0 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	041b      	lsls	r3, r3, #16
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002aba:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6819      	ldr	r1, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002aca:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002ad0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 020f 	bic.w	r2, r2, #15
 8002ae8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6819      	ldr	r1, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002b10:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6899      	ldr	r1, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b20:	3b01      	subs	r3, #1
 8002b22:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f002 0207 	and.w	r2, r2, #7
 8002b3c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6859      	ldr	r1, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b68:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fa0c 	bl	8002f94 <DFSDM_GetChannelFromInstance>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40016000 	.word	0x40016000
 8002b98:	40016020 	.word	0x40016020
 8002b9c:	40016040 	.word	0x40016040
 8002ba0:	40016060 	.word	0x40016060
 8002ba4:	200000d0 	.word	0x200000d0
 8002ba8:	200000d4 	.word	0x200000d4
 8002bac:	200000e4 	.word	0x200000e4
 8002bb0:	200000e8 	.word	0x200000e8
 8002bb4:	40016400 	.word	0x40016400

08002bb8 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0d9      	b.n	8002d7e <HAL_DFSDM_FilterInit+0x1c6>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a6e      	ldr	r2, [pc, #440]	; (8002d88 <HAL_DFSDM_FilterInit+0x1d0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d109      	bne.n	8002be8 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d003      	beq.n	8002be4 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0ca      	b.n	8002d7e <HAL_DFSDM_FilterInit+0x1c6>
  }
#if defined (DFSDM2_Channel0)  
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a67      	ldr	r2, [pc, #412]	; (8002d8c <HAL_DFSDM_FilterInit+0x1d4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d109      	bne.n	8002c06 <HAL_DFSDM_FilterInit+0x4e>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d003      	beq.n	8002c02 <HAL_DFSDM_FilterInit+0x4a>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_DFSDM_FilterInit+0x4e>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e0bb      	b.n	8002d7e <HAL_DFSDM_FilterInit+0x1c6>
  }  
#endif /* DFSDM2_Channel0 */
       
  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1U;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1U;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fe fd48 	bl	80016b4 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002c32:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7a1b      	ldrb	r3, [r3, #8]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d108      	bne.n	8002c4e <HAL_DFSDM_FilterInit+0x96>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	e007      	b.n	8002c5e <HAL_DFSDM_FilterInit+0xa6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002c5c:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7a5b      	ldrb	r3, [r3, #9]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d108      	bne.n	8002c78 <HAL_DFSDM_FilterInit+0xc0>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e007      	b.n	8002c88 <HAL_DFSDM_FilterInit+0xd0>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002c86:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8002c96:	f023 0308 	bic.w	r3, r3, #8
 8002c9a:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d108      	bne.n	8002cb6 <HAL_DFSDM_FilterInit+0xfe>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6819      	ldr	r1, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	7c1b      	ldrb	r3, [r3, #16]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d108      	bne.n	8002cd0 <HAL_DFSDM_FilterInit+0x118>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 0210 	orr.w	r2, r2, #16
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	e007      	b.n	8002ce0 <HAL_DFSDM_FilterInit+0x128>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0210 	bic.w	r2, r2, #16
 8002cde:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	7c5b      	ldrb	r3, [r3, #17]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d108      	bne.n	8002cfa <HAL_DFSDM_FilterInit+0x142>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0220 	orr.w	r2, r2, #32
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e007      	b.n	8002d0a <HAL_DFSDM_FilterInit+0x152>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0220 	bic.w	r2, r2, #32
 8002d08:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8002d18:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8002d1c:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6959      	ldr	r1, [r3, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002d30:	431a      	orrs	r2, r3
                                     (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002d38:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	7c1a      	ldrb	r2, [r3, #16]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40016100 	.word	0x40016100
 8002d8c:	40016500 	.word	0x40016500

08002d90 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d02e      	beq.n	8002e08 <HAL_DFSDM_FilterConfigRegChannel+0x78>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8002db0:	2bff      	cmp	r3, #255	; 0xff
 8002db2:	d029      	beq.n	8002e08 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc6:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d10d      	bne.n	8002dea <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	e00a      	b.n	8002e00 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6819      	ldr	r1, [r3, #0]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	631a      	str	r2, [r3, #48]	; 0x30
 8002e06:	e001      	b.n	8002e0c <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }  
  else
  {
    status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	371c      	adds	r7, #28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0U))
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	75fb      	strb	r3, [r7, #23]
 8002e3c:	e066      	b.n	8002f0c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e4c:	d002      	beq.n	8002e54 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	75fb      	strb	r3, [r7, #23]
 8002e52:	e05b      	b.n	8002f0c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10e      	bne.n	8002e7a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10a      	bne.n	8002e7a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d105      	bne.n	8002e7a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d002      	beq.n	8002e7a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1U))
  {
    status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	75fb      	strb	r3, [r7, #23]
 8002e78:	e048      	b.n	8002f0c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10c      	bne.n	8002e9c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d108      	bne.n	8002e9c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e94:	d102      	bne.n	8002e9c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	75fb      	strb	r3, [r7, #23]
 8002e9a:	e037      	b.n	8002f0c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d004      	beq.n	8002eb0 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d12b      	bne.n	8002f08 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	4a18      	ldr	r2, [pc, #96]	; (8002f18 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8002eb6:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	4a17      	ldr	r2, [pc, #92]	; (8002f1c <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8002ebe:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec4:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eca:	d101      	bne.n	8002ed0 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8002ecc:	4a14      	ldr	r2, [pc, #80]	; (8002f20 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8002ece:	e000      	b.n	8002ed2 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8002ed0:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	331c      	adds	r3, #28
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f000 f9bc 	bl	8003264 <HAL_DMA_Start_IT>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d006      	beq.n	8002f00 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	22ff      	movs	r2, #255	; 0xff
 8002ef6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002efe:	e005      	b.n	8002f0c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f8ab 	bl	800305c <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002f06:	e001      	b.n	8002f0c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	08002f55 	.word	0x08002f55
 8002f1c:	08002f71 	.word	0x08002f71
 8002f20:	08002f39 	.word	0x08002f39

08002f24 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdfsdm_filter);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f7fe f96e 	bl	8001228 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f7fe f9ea 	bl	800133c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8002f68:	bf00      	nop
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2203      	movs	r2, #3
 8002f82:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f7ff ffcd 	bl	8002f24 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8002f8a:	bf00      	nop
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a24      	ldr	r2, [pc, #144]	; (8003030 <DFSDM_GetChannelFromInstance+0x9c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d003      	beq.n	8002fac <DFSDM_GetChannelFromInstance+0x18>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a23      	ldr	r2, [pc, #140]	; (8003034 <DFSDM_GetChannelFromInstance+0xa0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d102      	bne.n	8002fb2 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	e037      	b.n	8003022 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a20      	ldr	r2, [pc, #128]	; (8003038 <DFSDM_GetChannelFromInstance+0xa4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d003      	beq.n	8002fc2 <DFSDM_GetChannelFromInstance+0x2e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a1f      	ldr	r2, [pc, #124]	; (800303c <DFSDM_GetChannelFromInstance+0xa8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d102      	bne.n	8002fc8 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	e02c      	b.n	8003022 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a1d      	ldr	r2, [pc, #116]	; (8003040 <DFSDM_GetChannelFromInstance+0xac>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d003      	beq.n	8002fd8 <DFSDM_GetChannelFromInstance+0x44>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a1c      	ldr	r2, [pc, #112]	; (8003044 <DFSDM_GetChannelFromInstance+0xb0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d102      	bne.n	8002fde <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	e021      	b.n	8003022 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a19      	ldr	r2, [pc, #100]	; (8003048 <DFSDM_GetChannelFromInstance+0xb4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d003      	beq.n	8002fee <DFSDM_GetChannelFromInstance+0x5a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a18      	ldr	r2, [pc, #96]	; (800304c <DFSDM_GetChannelFromInstance+0xb8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d102      	bne.n	8002ff4 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	e016      	b.n	8003022 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a16      	ldr	r2, [pc, #88]	; (8003050 <DFSDM_GetChannelFromInstance+0xbc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d102      	bne.n	8003002 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8002ffc:	2304      	movs	r3, #4
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	e00f      	b.n	8003022 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a13      	ldr	r2, [pc, #76]	; (8003054 <DFSDM_GetChannelFromInstance+0xc0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d102      	bne.n	8003010 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 800300a:	2305      	movs	r3, #5
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	e008      	b.n	8003022 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a11      	ldr	r2, [pc, #68]	; (8003058 <DFSDM_GetChannelFromInstance+0xc4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d102      	bne.n	800301e <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8003018:	2306      	movs	r3, #6
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	e001      	b.n	8003022 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 800301e:	2307      	movs	r3, #7
 8003020:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8003022:	68fb      	ldr	r3, [r7, #12]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	40016000 	.word	0x40016000
 8003034:	40016400 	.word	0x40016400
 8003038:	40016020 	.word	0x40016020
 800303c:	40016420 	.word	0x40016420
 8003040:	40016040 	.word	0x40016040
 8003044:	40016440 	.word	0x40016440
 8003048:	40016060 	.word	0x40016060
 800304c:	40016460 	.word	0x40016460
 8003050:	40016480 	.word	0x40016480
 8003054:	400164a0 	.word	0x400164a0
 8003058:	400164c0 	.word	0x400164c0

0800305c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003068:	2b00      	cmp	r3, #0
 800306a:	d108      	bne.n	800307e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	e033      	b.n	80030e6 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0201 	bic.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800309c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0201 	orr.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d116      	bne.n	80030e6 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d107      	bne.n	80030d0 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0202 	orr.w	r2, r2, #2
 80030ce:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1U;
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d102      	bne.n	80030e0 <DFSDM_RegConvStart+0x84>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	e000      	b.n	80030e2 <DFSDM_RegConvStart+0x86>
 80030e0:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <DFSDM_RegConvStart+0x98>
 80030f0:	2202      	movs	r2, #2
 80030f2:	e000      	b.n	80030f6 <DFSDM_RegConvStart+0x9a>
 80030f4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003114:	f7ff f840 	bl	8002198 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e099      	b.n	8003258 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0201 	bic.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003144:	e00f      	b.n	8003166 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003146:	f7ff f827 	bl	8002198 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b05      	cmp	r3, #5
 8003152:	d908      	bls.n	8003166 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2220      	movs	r2, #32
 8003158:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2203      	movs	r2, #3
 800315e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e078      	b.n	8003258 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1e8      	bne.n	8003146 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	4b38      	ldr	r3, [pc, #224]	; (8003260 <HAL_DMA_Init+0x158>)
 8003180:	4013      	ands	r3, r2
 8003182:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003192:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800319e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d107      	bne.n	80031d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	4313      	orrs	r3, r2
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f023 0307 	bic.w	r3, r3, #7
 80031e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d117      	bne.n	800322a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00e      	beq.n	800322a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fa6f 	bl	80036f0 <DMA_CheckFifoParam>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2240      	movs	r2, #64	; 0x40
 800321c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003226:	2301      	movs	r3, #1
 8003228:	e016      	b.n	8003258 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fa26 	bl	8003684 <DMA_CalcBaseAndBitshift>
 8003238:	4603      	mov	r3, r0
 800323a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003240:	223f      	movs	r2, #63	; 0x3f
 8003242:	409a      	lsls	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	e010803f 	.word	0xe010803f

08003264 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_DMA_Start_IT+0x26>
 8003286:	2302      	movs	r3, #2
 8003288:	e040      	b.n	800330c <HAL_DMA_Start_IT+0xa8>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	d12f      	bne.n	80032fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2202      	movs	r2, #2
 80032a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f9b8 	bl	8003628 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032bc:	223f      	movs	r2, #63	; 0x3f
 80032be:	409a      	lsls	r2, r3
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0216 	orr.w	r2, r2, #22
 80032d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d007      	beq.n	80032ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0208 	orr.w	r2, r2, #8
 80032ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	e005      	b.n	800330a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003306:	2302      	movs	r3, #2
 8003308:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800330a:	7dfb      	ldrb	r3, [r7, #23]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003320:	4b92      	ldr	r3, [pc, #584]	; (800356c <HAL_DMA_IRQHandler+0x258>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a92      	ldr	r2, [pc, #584]	; (8003570 <HAL_DMA_IRQHandler+0x25c>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	0a9b      	lsrs	r3, r3, #10
 800332c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003332:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333e:	2208      	movs	r2, #8
 8003340:	409a      	lsls	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4013      	ands	r3, r2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01a      	beq.n	8003380 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d013      	beq.n	8003380 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0204 	bic.w	r2, r2, #4
 8003366:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336c:	2208      	movs	r2, #8
 800336e:	409a      	lsls	r2, r3
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003378:	f043 0201 	orr.w	r2, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003384:	2201      	movs	r2, #1
 8003386:	409a      	lsls	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d012      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00b      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a2:	2201      	movs	r2, #1
 80033a4:	409a      	lsls	r2, r3
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ae:	f043 0202 	orr.w	r2, r3, #2
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ba:	2204      	movs	r2, #4
 80033bc:	409a      	lsls	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d012      	beq.n	80033ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00b      	beq.n	80033ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d8:	2204      	movs	r2, #4
 80033da:	409a      	lsls	r2, r3
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e4:	f043 0204 	orr.w	r2, r3, #4
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f0:	2210      	movs	r2, #16
 80033f2:	409a      	lsls	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d043      	beq.n	8003484 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d03c      	beq.n	8003484 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340e:	2210      	movs	r2, #16
 8003410:	409a      	lsls	r2, r3
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d018      	beq.n	8003456 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d108      	bne.n	8003444 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d024      	beq.n	8003484 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	4798      	blx	r3
 8003442:	e01f      	b.n	8003484 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01b      	beq.n	8003484 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	4798      	blx	r3
 8003454:	e016      	b.n	8003484 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d107      	bne.n	8003474 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0208 	bic.w	r2, r2, #8
 8003472:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003488:	2220      	movs	r2, #32
 800348a:	409a      	lsls	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 808e 	beq.w	80035b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8086 	beq.w	80035b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034aa:	2220      	movs	r2, #32
 80034ac:	409a      	lsls	r2, r3
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b05      	cmp	r3, #5
 80034bc:	d136      	bne.n	800352c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0216 	bic.w	r2, r2, #22
 80034cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d103      	bne.n	80034ee <HAL_DMA_IRQHandler+0x1da>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d007      	beq.n	80034fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0208 	bic.w	r2, r2, #8
 80034fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003502:	223f      	movs	r2, #63	; 0x3f
 8003504:	409a      	lsls	r2, r3
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351e:	2b00      	cmp	r3, #0
 8003520:	d07d      	beq.n	800361e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
        }
        return;
 800352a:	e078      	b.n	800361e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d01c      	beq.n	8003574 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d108      	bne.n	800355a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354c:	2b00      	cmp	r3, #0
 800354e:	d030      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4798      	blx	r3
 8003558:	e02b      	b.n	80035b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d027      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	4798      	blx	r3
 800356a:	e022      	b.n	80035b2 <HAL_DMA_IRQHandler+0x29e>
 800356c:	2000001c 	.word	0x2000001c
 8003570:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10f      	bne.n	80035a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0210 	bic.w	r2, r2, #16
 8003590:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d032      	beq.n	8003620 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d022      	beq.n	800360c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2205      	movs	r2, #5
 80035ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0201 	bic.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	3301      	adds	r3, #1
 80035e2:	60bb      	str	r3, [r7, #8]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d307      	bcc.n	80035fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1f2      	bne.n	80035de <HAL_DMA_IRQHandler+0x2ca>
 80035f8:	e000      	b.n	80035fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80035fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	4798      	blx	r3
 800361c:	e000      	b.n	8003620 <HAL_DMA_IRQHandler+0x30c>
        return;
 800361e:	bf00      	nop
    }
  }
}
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop

08003628 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003644:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b40      	cmp	r3, #64	; 0x40
 8003654:	d108      	bne.n	8003668 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003666:	e007      	b.n	8003678 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	60da      	str	r2, [r3, #12]
}
 8003678:	bf00      	nop
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	3b10      	subs	r3, #16
 8003694:	4a14      	ldr	r2, [pc, #80]	; (80036e8 <DMA_CalcBaseAndBitshift+0x64>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	091b      	lsrs	r3, r3, #4
 800369c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800369e:	4a13      	ldr	r2, [pc, #76]	; (80036ec <DMA_CalcBaseAndBitshift+0x68>)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d909      	bls.n	80036c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036ba:	f023 0303 	bic.w	r3, r3, #3
 80036be:	1d1a      	adds	r2, r3, #4
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	659a      	str	r2, [r3, #88]	; 0x58
 80036c4:	e007      	b.n	80036d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036ce:	f023 0303 	bic.w	r3, r3, #3
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	aaaaaaab 	.word	0xaaaaaaab
 80036ec:	0800b0b8 	.word	0x0800b0b8

080036f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003700:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d11f      	bne.n	800374a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d855      	bhi.n	80037bc <DMA_CheckFifoParam+0xcc>
 8003710:	a201      	add	r2, pc, #4	; (adr r2, 8003718 <DMA_CheckFifoParam+0x28>)
 8003712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003716:	bf00      	nop
 8003718:	08003729 	.word	0x08003729
 800371c:	0800373b 	.word	0x0800373b
 8003720:	08003729 	.word	0x08003729
 8003724:	080037bd 	.word	0x080037bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d045      	beq.n	80037c0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003738:	e042      	b.n	80037c0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003742:	d13f      	bne.n	80037c4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003748:	e03c      	b.n	80037c4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003752:	d121      	bne.n	8003798 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b03      	cmp	r3, #3
 8003758:	d836      	bhi.n	80037c8 <DMA_CheckFifoParam+0xd8>
 800375a:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <DMA_CheckFifoParam+0x70>)
 800375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003760:	08003771 	.word	0x08003771
 8003764:	08003777 	.word	0x08003777
 8003768:	08003771 	.word	0x08003771
 800376c:	08003789 	.word	0x08003789
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
      break;
 8003774:	e02f      	b.n	80037d6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d024      	beq.n	80037cc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003786:	e021      	b.n	80037cc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003790:	d11e      	bne.n	80037d0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003796:	e01b      	b.n	80037d0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d902      	bls.n	80037a4 <DMA_CheckFifoParam+0xb4>
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d003      	beq.n	80037aa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037a2:	e018      	b.n	80037d6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
      break;
 80037a8:	e015      	b.n	80037d6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00e      	beq.n	80037d4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
      break;
 80037ba:	e00b      	b.n	80037d4 <DMA_CheckFifoParam+0xe4>
      break;
 80037bc:	bf00      	nop
 80037be:	e00a      	b.n	80037d6 <DMA_CheckFifoParam+0xe6>
      break;
 80037c0:	bf00      	nop
 80037c2:	e008      	b.n	80037d6 <DMA_CheckFifoParam+0xe6>
      break;
 80037c4:	bf00      	nop
 80037c6:	e006      	b.n	80037d6 <DMA_CheckFifoParam+0xe6>
      break;
 80037c8:	bf00      	nop
 80037ca:	e004      	b.n	80037d6 <DMA_CheckFifoParam+0xe6>
      break;
 80037cc:	bf00      	nop
 80037ce:	e002      	b.n	80037d6 <DMA_CheckFifoParam+0xe6>
      break;   
 80037d0:	bf00      	nop
 80037d2:	e000      	b.n	80037d6 <DMA_CheckFifoParam+0xe6>
      break;
 80037d4:	bf00      	nop
    }
  } 
  
  return status; 
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e081      	b.n	80038fa <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fe f8a2 	bl	8001954 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003834:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003844:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d107      	bne.n	800385e <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	e006      	b.n	800386c <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800386a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d104      	bne.n	800387e <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800387c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800388c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003890:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038a0:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	ea42 0103 	orr.w	r1, r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	021a      	lsls	r2, r3, #8
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69d9      	ldr	r1, [r3, #28]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1a      	ldr	r2, [r3, #32]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b20      	cmp	r3, #32
 8003916:	d138      	bne.n	800398a <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8003922:	2302      	movs	r3, #2
 8003924:	e032      	b.n	800398c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2224      	movs	r2, #36	; 0x24
 8003932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003954:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6819      	ldr	r1, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0201 	orr.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	e000      	b.n	800398c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800398a:	2302      	movs	r3, #2
  }
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003998:	b480      	push	{r7}
 800399a:	b089      	sub	sp, #36	; 0x24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	e165      	b.n	8003c80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039b4:	2201      	movs	r2, #1
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4013      	ands	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	f040 8154 	bne.w	8003c7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d00b      	beq.n	80039f2 <HAL_GPIO_Init+0x5a>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d007      	beq.n	80039f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039e6:	2b11      	cmp	r3, #17
 80039e8:	d003      	beq.n	80039f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b12      	cmp	r3, #18
 80039f0:	d130      	bne.n	8003a54 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	2203      	movs	r2, #3
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43db      	mvns	r3, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4013      	ands	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a28:	2201      	movs	r2, #1
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4013      	ands	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	f003 0201 	and.w	r2, r3, #1
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	2203      	movs	r2, #3
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d003      	beq.n	8003a94 <HAL_GPIO_Init+0xfc>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b12      	cmp	r3, #18
 8003a92:	d123      	bne.n	8003adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	08da      	lsrs	r2, r3, #3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3208      	adds	r2, #8
 8003a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	220f      	movs	r2, #15
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	08da      	lsrs	r2, r3, #3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3208      	adds	r2, #8
 8003ad6:	69b9      	ldr	r1, [r7, #24]
 8003ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4013      	ands	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 0203 	and.w	r2, r3, #3
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80ae 	beq.w	8003c7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	4b5c      	ldr	r3, [pc, #368]	; (8003c94 <HAL_GPIO_Init+0x2fc>)
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	4a5b      	ldr	r2, [pc, #364]	; (8003c94 <HAL_GPIO_Init+0x2fc>)
 8003b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b2e:	4b59      	ldr	r3, [pc, #356]	; (8003c94 <HAL_GPIO_Init+0x2fc>)
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b3a:	4a57      	ldr	r2, [pc, #348]	; (8003c98 <HAL_GPIO_Init+0x300>)
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	3302      	adds	r3, #2
 8003b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	220f      	movs	r2, #15
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a4e      	ldr	r2, [pc, #312]	; (8003c9c <HAL_GPIO_Init+0x304>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d025      	beq.n	8003bb2 <HAL_GPIO_Init+0x21a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a4d      	ldr	r2, [pc, #308]	; (8003ca0 <HAL_GPIO_Init+0x308>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01f      	beq.n	8003bae <HAL_GPIO_Init+0x216>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a4c      	ldr	r2, [pc, #304]	; (8003ca4 <HAL_GPIO_Init+0x30c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d019      	beq.n	8003baa <HAL_GPIO_Init+0x212>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a4b      	ldr	r2, [pc, #300]	; (8003ca8 <HAL_GPIO_Init+0x310>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d013      	beq.n	8003ba6 <HAL_GPIO_Init+0x20e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a4a      	ldr	r2, [pc, #296]	; (8003cac <HAL_GPIO_Init+0x314>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00d      	beq.n	8003ba2 <HAL_GPIO_Init+0x20a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a49      	ldr	r2, [pc, #292]	; (8003cb0 <HAL_GPIO_Init+0x318>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d007      	beq.n	8003b9e <HAL_GPIO_Init+0x206>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a48      	ldr	r2, [pc, #288]	; (8003cb4 <HAL_GPIO_Init+0x31c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d101      	bne.n	8003b9a <HAL_GPIO_Init+0x202>
 8003b96:	2306      	movs	r3, #6
 8003b98:	e00c      	b.n	8003bb4 <HAL_GPIO_Init+0x21c>
 8003b9a:	2307      	movs	r3, #7
 8003b9c:	e00a      	b.n	8003bb4 <HAL_GPIO_Init+0x21c>
 8003b9e:	2305      	movs	r3, #5
 8003ba0:	e008      	b.n	8003bb4 <HAL_GPIO_Init+0x21c>
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	e006      	b.n	8003bb4 <HAL_GPIO_Init+0x21c>
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e004      	b.n	8003bb4 <HAL_GPIO_Init+0x21c>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e002      	b.n	8003bb4 <HAL_GPIO_Init+0x21c>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <HAL_GPIO_Init+0x21c>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	f002 0203 	and.w	r2, r2, #3
 8003bba:	0092      	lsls	r2, r2, #2
 8003bbc:	4093      	lsls	r3, r2
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bc4:	4934      	ldr	r1, [pc, #208]	; (8003c98 <HAL_GPIO_Init+0x300>)
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	089b      	lsrs	r3, r3, #2
 8003bca:	3302      	adds	r3, #2
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bd2:	4b39      	ldr	r3, [pc, #228]	; (8003cb8 <HAL_GPIO_Init+0x320>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4013      	ands	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bf6:	4a30      	ldr	r2, [pc, #192]	; (8003cb8 <HAL_GPIO_Init+0x320>)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003bfc:	4b2e      	ldr	r3, [pc, #184]	; (8003cb8 <HAL_GPIO_Init+0x320>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c20:	4a25      	ldr	r2, [pc, #148]	; (8003cb8 <HAL_GPIO_Init+0x320>)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c26:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <HAL_GPIO_Init+0x320>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c4a:	4a1b      	ldr	r2, [pc, #108]	; (8003cb8 <HAL_GPIO_Init+0x320>)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c50:	4b19      	ldr	r3, [pc, #100]	; (8003cb8 <HAL_GPIO_Init+0x320>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c74:	4a10      	ldr	r2, [pc, #64]	; (8003cb8 <HAL_GPIO_Init+0x320>)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	61fb      	str	r3, [r7, #28]
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	2b0f      	cmp	r3, #15
 8003c84:	f67f ae96 	bls.w	80039b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c88:	bf00      	nop
 8003c8a:	3724      	adds	r7, #36	; 0x24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40013800 	.word	0x40013800
 8003c9c:	40020000 	.word	0x40020000
 8003ca0:	40020400 	.word	0x40020400
 8003ca4:	40020800 	.word	0x40020800
 8003ca8:	40020c00 	.word	0x40020c00
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40021400 	.word	0x40021400
 8003cb4:	40021800 	.word	0x40021800
 8003cb8:	40013c00 	.word	0x40013c00

08003cbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	887b      	ldrh	r3, [r7, #2]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
 8003cd8:	e001      	b.n	8003cde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	807b      	strh	r3, [r7, #2]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cfc:	787b      	ldrb	r3, [r7, #1]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d02:	887a      	ldrh	r2, [r7, #2]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d08:	e003      	b.n	8003d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d0a:	887b      	ldrh	r3, [r7, #2]
 8003d0c:	041a      	lsls	r2, r3, #16
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	619a      	str	r2, [r3, #24]
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003d28:	f7fe fa36 	bl	8002198 <HAL_GetTick>
 8003d2c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e069      	b.n	8003e0c <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10b      	bne.n	8003d5c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7fd fe49 	bl	80019e4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003d52:	f241 3188 	movw	r1, #5000	; 0x1388
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f85e 	bl	8003e18 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	021a      	lsls	r2, r3, #8
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2120      	movs	r1, #32
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f856 	bl	8003e34 <QSPI_WaitFlagStateUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003d8c:	7afb      	ldrb	r3, [r7, #11]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d137      	bne.n	8003e02 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003d9c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6852      	ldr	r2, [r2, #4]
 8003da4:	0611      	lsls	r1, r2, #24
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68d2      	ldr	r2, [r2, #12]
 8003daa:	4311      	orrs	r1, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	69d2      	ldr	r2, [r2, #28]
 8003db0:	4311      	orrs	r1, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6a12      	ldr	r2, [r2, #32]
 8003db6:	4311      	orrs	r1, r2
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <HAL_QSPI_Init+0xf4>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6912      	ldr	r2, [r2, #16]
 8003dce:	0411      	lsls	r1, r2, #16
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6952      	ldr	r2, [r2, #20]
 8003dd4:	4311      	orrs	r1, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6992      	ldr	r2, [r2, #24]
 8003dda:	4311      	orrs	r1, r2
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6812      	ldr	r2, [r2, #0]
 8003de0:	430b      	orrs	r3, r1
 8003de2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003e0a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	ffe0f8fe 	.word	0xffe0f8fe

08003e18 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	4613      	mov	r3, r2
 8003e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003e44:	e01a      	b.n	8003e7c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d016      	beq.n	8003e7c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4e:	f7fe f9a3 	bl	8002198 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d302      	bcc.n	8003e64 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10b      	bne.n	8003e7c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2204      	movs	r2, #4
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e70:	f043 0201 	orr.w	r2, r3, #1
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e00e      	b.n	8003e9a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	bf14      	ite	ne
 8003e8a:	2301      	movne	r3, #1
 8003e8c:	2300      	moveq	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d1d6      	bne.n	8003e46 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e0cc      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb8:	4b68      	ldr	r3, [pc, #416]	; (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d90c      	bls.n	8003ee0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec6:	4b65      	ldr	r3, [pc, #404]	; (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	4b63      	ldr	r3, [pc, #396]	; (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0b8      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d020      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef8:	4b59      	ldr	r3, [pc, #356]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	4a58      	ldr	r2, [pc, #352]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f10:	4b53      	ldr	r3, [pc, #332]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4a52      	ldr	r2, [pc, #328]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f1c:	4b50      	ldr	r3, [pc, #320]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	494d      	ldr	r1, [pc, #308]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d044      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d107      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f42:	4b47      	ldr	r3, [pc, #284]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d119      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e07f      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d003      	beq.n	8003f62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	d107      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f62:	4b3f      	ldr	r3, [pc, #252]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e06f      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f72:	4b3b      	ldr	r3, [pc, #236]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e067      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f82:	4b37      	ldr	r3, [pc, #220]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f023 0203 	bic.w	r2, r3, #3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	4934      	ldr	r1, [pc, #208]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f94:	f7fe f900 	bl	8002198 <HAL_GetTick>
 8003f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9a:	e00a      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f9c:	f7fe f8fc 	bl	8002198 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e04f      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb2:	4b2b      	ldr	r3, [pc, #172]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 020c 	and.w	r2, r3, #12
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d1eb      	bne.n	8003f9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc4:	4b25      	ldr	r3, [pc, #148]	; (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 030f 	and.w	r3, r3, #15
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d20c      	bcs.n	8003fec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd2:	4b22      	ldr	r3, [pc, #136]	; (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fda:	4b20      	ldr	r3, [pc, #128]	; (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e032      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff8:	4b19      	ldr	r3, [pc, #100]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4916      	ldr	r1, [pc, #88]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	4313      	orrs	r3, r2
 8004008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d009      	beq.n	800402a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004016:	4b12      	ldr	r3, [pc, #72]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	490e      	ldr	r1, [pc, #56]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	4313      	orrs	r3, r2
 8004028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800402a:	f000 f821 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 800402e:	4601      	mov	r1, r0
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	4a0a      	ldr	r2, [pc, #40]	; (8004064 <HAL_RCC_ClockConfig+0x1c0>)
 800403c:	5cd3      	ldrb	r3, [r2, r3]
 800403e:	fa21 f303 	lsr.w	r3, r1, r3
 8004042:	4a09      	ldr	r2, [pc, #36]	; (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8004044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004046:	4b09      	ldr	r3, [pc, #36]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe f860 	bl	8002110 <HAL_InitTick>

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40023c00 	.word	0x40023c00
 8004060:	40023800 	.word	0x40023800
 8004064:	0800b0a0 	.word	0x0800b0a0
 8004068:	2000001c 	.word	0x2000001c
 800406c:	20000020 	.word	0x20000020

08004070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	607b      	str	r3, [r7, #4]
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	2300      	movs	r3, #0
 8004080:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004086:	4b50      	ldr	r3, [pc, #320]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b04      	cmp	r3, #4
 8004090:	d007      	beq.n	80040a2 <HAL_RCC_GetSysClockFreq+0x32>
 8004092:	2b08      	cmp	r3, #8
 8004094:	d008      	beq.n	80040a8 <HAL_RCC_GetSysClockFreq+0x38>
 8004096:	2b00      	cmp	r3, #0
 8004098:	f040 808d 	bne.w	80041b6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800409c:	4b4b      	ldr	r3, [pc, #300]	; (80041cc <HAL_RCC_GetSysClockFreq+0x15c>)
 800409e:	60bb      	str	r3, [r7, #8]
       break;
 80040a0:	e08c      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040a2:	4b4b      	ldr	r3, [pc, #300]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80040a4:	60bb      	str	r3, [r7, #8]
      break;
 80040a6:	e089      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040a8:	4b47      	ldr	r3, [pc, #284]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040b2:	4b45      	ldr	r3, [pc, #276]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d023      	beq.n	8004106 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040be:	4b42      	ldr	r3, [pc, #264]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	099b      	lsrs	r3, r3, #6
 80040c4:	f04f 0400 	mov.w	r4, #0
 80040c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	ea03 0501 	and.w	r5, r3, r1
 80040d4:	ea04 0602 	and.w	r6, r4, r2
 80040d8:	4a3d      	ldr	r2, [pc, #244]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80040da:	fb02 f106 	mul.w	r1, r2, r6
 80040de:	2200      	movs	r2, #0
 80040e0:	fb02 f205 	mul.w	r2, r2, r5
 80040e4:	440a      	add	r2, r1
 80040e6:	493a      	ldr	r1, [pc, #232]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80040e8:	fba5 0101 	umull	r0, r1, r5, r1
 80040ec:	1853      	adds	r3, r2, r1
 80040ee:	4619      	mov	r1, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f04f 0400 	mov.w	r4, #0
 80040f6:	461a      	mov	r2, r3
 80040f8:	4623      	mov	r3, r4
 80040fa:	f7fc f8e1 	bl	80002c0 <__aeabi_uldivmod>
 80040fe:	4603      	mov	r3, r0
 8004100:	460c      	mov	r4, r1
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	e049      	b.n	800419a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004106:	4b30      	ldr	r3, [pc, #192]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	099b      	lsrs	r3, r3, #6
 800410c:	f04f 0400 	mov.w	r4, #0
 8004110:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	ea03 0501 	and.w	r5, r3, r1
 800411c:	ea04 0602 	and.w	r6, r4, r2
 8004120:	4629      	mov	r1, r5
 8004122:	4632      	mov	r2, r6
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	f04f 0400 	mov.w	r4, #0
 800412c:	0154      	lsls	r4, r2, #5
 800412e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004132:	014b      	lsls	r3, r1, #5
 8004134:	4619      	mov	r1, r3
 8004136:	4622      	mov	r2, r4
 8004138:	1b49      	subs	r1, r1, r5
 800413a:	eb62 0206 	sbc.w	r2, r2, r6
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	f04f 0400 	mov.w	r4, #0
 8004146:	0194      	lsls	r4, r2, #6
 8004148:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800414c:	018b      	lsls	r3, r1, #6
 800414e:	1a5b      	subs	r3, r3, r1
 8004150:	eb64 0402 	sbc.w	r4, r4, r2
 8004154:	f04f 0100 	mov.w	r1, #0
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	00e2      	lsls	r2, r4, #3
 800415e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004162:	00d9      	lsls	r1, r3, #3
 8004164:	460b      	mov	r3, r1
 8004166:	4614      	mov	r4, r2
 8004168:	195b      	adds	r3, r3, r5
 800416a:	eb44 0406 	adc.w	r4, r4, r6
 800416e:	f04f 0100 	mov.w	r1, #0
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	02a2      	lsls	r2, r4, #10
 8004178:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800417c:	0299      	lsls	r1, r3, #10
 800417e:	460b      	mov	r3, r1
 8004180:	4614      	mov	r4, r2
 8004182:	4618      	mov	r0, r3
 8004184:	4621      	mov	r1, r4
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f04f 0400 	mov.w	r4, #0
 800418c:	461a      	mov	r2, r3
 800418e:	4623      	mov	r3, r4
 8004190:	f7fc f896 	bl	80002c0 <__aeabi_uldivmod>
 8004194:	4603      	mov	r3, r0
 8004196:	460c      	mov	r4, r1
 8004198:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800419a:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x158>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	0c1b      	lsrs	r3, r3, #16
 80041a0:	f003 0303 	and.w	r3, r3, #3
 80041a4:	3301      	adds	r3, #1
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b2:	60bb      	str	r3, [r7, #8]
      break;
 80041b4:	e002      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041b6:	4b05      	ldr	r3, [pc, #20]	; (80041cc <HAL_RCC_GetSysClockFreq+0x15c>)
 80041b8:	60bb      	str	r3, [r7, #8]
      break;
 80041ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041bc:	68bb      	ldr	r3, [r7, #8]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800
 80041cc:	00f42400 	.word	0x00f42400
 80041d0:	017d7840 	.word	0x017d7840

080041d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d8:	4b03      	ldr	r3, [pc, #12]	; (80041e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041da:	681b      	ldr	r3, [r3, #0]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	2000001c 	.word	0x2000001c

080041ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041f0:	f7ff fff0 	bl	80041d4 <HAL_RCC_GetHCLKFreq>
 80041f4:	4601      	mov	r1, r0
 80041f6:	4b05      	ldr	r3, [pc, #20]	; (800420c <HAL_RCC_GetPCLK1Freq+0x20>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	0a9b      	lsrs	r3, r3, #10
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	4a03      	ldr	r2, [pc, #12]	; (8004210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004202:	5cd3      	ldrb	r3, [r2, r3]
 8004204:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004208:	4618      	mov	r0, r3
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40023800 	.word	0x40023800
 8004210:	0800b0b0 	.word	0x0800b0b0

08004214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004218:	f7ff ffdc 	bl	80041d4 <HAL_RCC_GetHCLKFreq>
 800421c:	4601      	mov	r1, r0
 800421e:	4b05      	ldr	r3, [pc, #20]	; (8004234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	0b5b      	lsrs	r3, r3, #13
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	4a03      	ldr	r2, [pc, #12]	; (8004238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800422a:	5cd3      	ldrb	r3, [r2, r3]
 800422c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004230:	4618      	mov	r0, r3
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40023800 	.word	0x40023800
 8004238:	0800b0b0 	.word	0x0800b0b0

0800423c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d010      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004260:	4b7a      	ldr	r3, [pc, #488]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004266:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	4977      	ldr	r1, [pc, #476]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 800427e:	2301      	movs	r3, #1
 8004280:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d010      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800428e:	4b6f      	ldr	r3, [pc, #444]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004294:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	496b      	ldr	r1, [pc, #428]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80042ac:	2301      	movs	r3, #1
 80042ae:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d022      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80042bc:	4b63      	ldr	r3, [pc, #396]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80042be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ca:	4960      	ldr	r1, [pc, #384]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 80042da:	2301      	movs	r3, #1
 80042dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042e6:	d10c      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80042e8:	4b58      	ldr	r3, [pc, #352]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80042ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	4954      	ldr	r1, [pc, #336]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d022      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 800430e:	4b4f      	ldr	r3, [pc, #316]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004314:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431c:	494b      	ldr	r1, [pc, #300]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800432c:	2301      	movs	r3, #1
 800432e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004334:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004338:	d10c      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800433a:	4b44      	ldr	r3, [pc, #272]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800433c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004340:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	3b01      	subs	r3, #1
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	493f      	ldr	r1, [pc, #252]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 808a 	beq.w	8004476 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	4b39      	ldr	r3, [pc, #228]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	4a38      	ldr	r2, [pc, #224]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800436c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004370:	6413      	str	r3, [r2, #64]	; 0x40
 8004372:	4b36      	ldr	r3, [pc, #216]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800437e:	4b34      	ldr	r3, [pc, #208]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a33      	ldr	r2, [pc, #204]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004388:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800438a:	f7fd ff05 	bl	8002198 <HAL_GetTick>
 800438e:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004390:	e008      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004392:	f7fd ff01 	bl	8002198 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e1d1      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043a4:	4b2a      	ldr	r3, [pc, #168]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0f0      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043b0:	4b26      	ldr	r3, [pc, #152]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80043b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b8:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d02f      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d028      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043ce:	4b1f      	ldr	r3, [pc, #124]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d6:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043d8:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80043da:	2201      	movs	r2, #1
 80043dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043de:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043e4:	4a19      	ldr	r2, [pc, #100]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043ea:	4b18      	ldr	r3, [pc, #96]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d114      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043f6:	f7fd fecf 	bl	8002198 <HAL_GetTick>
 80043fa:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fc:	e00a      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043fe:	f7fd fecb 	bl	8002198 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	f241 3288 	movw	r2, #5000	; 0x1388
 800440c:	4293      	cmp	r3, r2
 800440e:	d901      	bls.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e199      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004414:	4b0d      	ldr	r3, [pc, #52]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0ee      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004428:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800442c:	d114      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800442e:	4b07      	ldr	r3, [pc, #28]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800443e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004442:	4902      	ldr	r1, [pc, #8]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004444:	4313      	orrs	r3, r2
 8004446:	608b      	str	r3, [r1, #8]
 8004448:	e00c      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800
 8004450:	40007000 	.word	0x40007000
 8004454:	42470e40 	.word	0x42470e40
 8004458:	4b89      	ldr	r3, [pc, #548]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	4a88      	ldr	r2, [pc, #544]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800445e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004462:	6093      	str	r3, [r2, #8]
 8004464:	4b86      	ldr	r3, [pc, #536]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004466:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004470:	4983      	ldr	r1, [pc, #524]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004472:	4313      	orrs	r3, r2
 8004474:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b00      	cmp	r3, #0
 8004480:	d004      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8004488:	4b7e      	ldr	r3, [pc, #504]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800448a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004498:	4b79      	ldr	r3, [pc, #484]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800449a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800449e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	4976      	ldr	r1, [pc, #472]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d011      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044ba:	4b71      	ldr	r3, [pc, #452]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80044bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	496d      	ldr	r1, [pc, #436]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044d8:	d101      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80044da:	2301      	movs	r3, #1
 80044dc:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80044ea:	4b65      	ldr	r3, [pc, #404]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80044ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044f0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	4961      	ldr	r1, [pc, #388]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d004      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b80      	cmp	r3, #128	; 0x80
 800450c:	f040 80c6 	bne.w	800469c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004510:	4b5d      	ldr	r3, [pc, #372]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004516:	f7fd fe3f 	bl	8002198 <HAL_GetTick>
 800451a:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800451c:	e008      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800451e:	f7fd fe3b 	bl	8002198 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e10b      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004530:	4b53      	ldr	r3, [pc, #332]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1f0      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 800453c:	4a53      	ldr	r2, [pc, #332]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004542:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d023      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d019      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004580:	d00e      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800458a:	2b00      	cmp	r3, #0
 800458c:	d019      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	2b00      	cmp	r3, #0
 8004594:	d115      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800459e:	d110      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	019b      	lsls	r3, r3, #6
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	061b      	lsls	r3, r3, #24
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	071b      	lsls	r3, r3, #28
 80045ba:	4931      	ldr	r1, [pc, #196]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d026      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d122      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045ea:	4b25      	ldr	r3, [pc, #148]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80045ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f0:	0e1b      	lsrs	r3, r3, #24
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	019b      	lsls	r3, r3, #6
 8004602:	431a      	orrs	r2, r3
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	061b      	lsls	r3, r3, #24
 8004608:	431a      	orrs	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	071b      	lsls	r3, r3, #28
 8004610:	491b      	ldr	r1, [pc, #108]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8004618:	4b19      	ldr	r3, [pc, #100]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800461a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800461e:	f023 021f 	bic.w	r2, r3, #31
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	3b01      	subs	r3, #1
 8004628:	4915      	ldr	r1, [pc, #84]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004638:	2b00      	cmp	r3, #0
 800463a:	d010      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	019b      	lsls	r3, r3, #6
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	061b      	lsls	r3, r3, #24
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	071b      	lsls	r3, r3, #28
 8004656:	490a      	ldr	r1, [pc, #40]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800465e:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004660:	2201      	movs	r2, #1
 8004662:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004664:	f7fd fd98 	bl	8002198 <HAL_GetTick>
 8004668:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800466a:	e011      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800466c:	f7fd fd94 	bl	8002198 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d90a      	bls.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e064      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800467e:	bf00      	nop
 8004680:	40023800 	.word	0x40023800
 8004684:	424711e0 	.word	0x424711e0
 8004688:	42470068 	.word	0x42470068
 800468c:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004690:	4b2f      	ldr	r3, [pc, #188]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0e7      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046a8:	4b29      	ldr	r3, [pc, #164]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80046aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b6:	4926      	ldr	r1, [pc, #152]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80046ca:	4b21      	ldr	r3, [pc, #132]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80046cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046d0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	491d      	ldr	r1, [pc, #116]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80046ec:	4b18      	ldr	r3, [pc, #96]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80046ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fa:	4915      	ldr	r1, [pc, #84]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 800470e:	4b10      	ldr	r3, [pc, #64]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004714:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	490c      	ldr	r1, [pc, #48]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004730:	4b07      	ldr	r3, [pc, #28]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004736:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	4904      	ldr	r1, [pc, #16]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3720      	adds	r7, #32
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40023800 	.word	0x40023800

08004754 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d075      	beq.n	8004858 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800476c:	4ba2      	ldr	r3, [pc, #648]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 030c 	and.w	r3, r3, #12
 8004774:	2b04      	cmp	r3, #4
 8004776:	d00c      	beq.n	8004792 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004778:	4b9f      	ldr	r3, [pc, #636]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004780:	2b08      	cmp	r3, #8
 8004782:	d112      	bne.n	80047aa <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004784:	4b9c      	ldr	r3, [pc, #624]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004790:	d10b      	bne.n	80047aa <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004792:	4b99      	ldr	r3, [pc, #612]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d05b      	beq.n	8004856 <HAL_RCC_OscConfig+0x102>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d157      	bne.n	8004856 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e20b      	b.n	8004bc2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b2:	d106      	bne.n	80047c2 <HAL_RCC_OscConfig+0x6e>
 80047b4:	4b90      	ldr	r3, [pc, #576]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a8f      	ldr	r2, [pc, #572]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 80047ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	e01d      	b.n	80047fe <HAL_RCC_OscConfig+0xaa>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047ca:	d10c      	bne.n	80047e6 <HAL_RCC_OscConfig+0x92>
 80047cc:	4b8a      	ldr	r3, [pc, #552]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a89      	ldr	r2, [pc, #548]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 80047d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	4b87      	ldr	r3, [pc, #540]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a86      	ldr	r2, [pc, #536]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 80047de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	e00b      	b.n	80047fe <HAL_RCC_OscConfig+0xaa>
 80047e6:	4b84      	ldr	r3, [pc, #528]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a83      	ldr	r2, [pc, #524]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 80047ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	4b81      	ldr	r3, [pc, #516]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a80      	ldr	r2, [pc, #512]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 80047f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d013      	beq.n	800482e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004806:	f7fd fcc7 	bl	8002198 <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800480e:	f7fd fcc3 	bl	8002198 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b64      	cmp	r3, #100	; 0x64
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e1d0      	b.n	8004bc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004820:	4b75      	ldr	r3, [pc, #468]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0f0      	beq.n	800480e <HAL_RCC_OscConfig+0xba>
 800482c:	e014      	b.n	8004858 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482e:	f7fd fcb3 	bl	8002198 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004836:	f7fd fcaf 	bl	8002198 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b64      	cmp	r3, #100	; 0x64
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e1bc      	b.n	8004bc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004848:	4b6b      	ldr	r3, [pc, #428]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1f0      	bne.n	8004836 <HAL_RCC_OscConfig+0xe2>
 8004854:	e000      	b.n	8004858 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004856:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d063      	beq.n	800492c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004864:	4b64      	ldr	r3, [pc, #400]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f003 030c 	and.w	r3, r3, #12
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00b      	beq.n	8004888 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004870:	4b61      	ldr	r3, [pc, #388]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004878:	2b08      	cmp	r3, #8
 800487a:	d11c      	bne.n	80048b6 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800487c:	4b5e      	ldr	r3, [pc, #376]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d116      	bne.n	80048b6 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004888:	4b5b      	ldr	r3, [pc, #364]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_RCC_OscConfig+0x14c>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e190      	b.n	8004bc2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a0:	4b55      	ldr	r3, [pc, #340]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	4952      	ldr	r1, [pc, #328]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b4:	e03a      	b.n	800492c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d020      	beq.n	8004900 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048be:	4b4f      	ldr	r3, [pc, #316]	; (80049fc <HAL_RCC_OscConfig+0x2a8>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c4:	f7fd fc68 	bl	8002198 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048cc:	f7fd fc64 	bl	8002198 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e171      	b.n	8004bc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048de:	4b46      	ldr	r3, [pc, #280]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ea:	4b43      	ldr	r3, [pc, #268]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	493f      	ldr	r1, [pc, #252]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	600b      	str	r3, [r1, #0]
 80048fe:	e015      	b.n	800492c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004900:	4b3e      	ldr	r3, [pc, #248]	; (80049fc <HAL_RCC_OscConfig+0x2a8>)
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004906:	f7fd fc47 	bl	8002198 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800490e:	f7fd fc43 	bl	8002198 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e150      	b.n	8004bc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004920:	4b35      	ldr	r3, [pc, #212]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f0      	bne.n	800490e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b00      	cmp	r3, #0
 8004936:	d030      	beq.n	800499a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d016      	beq.n	800496e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004940:	4b2f      	ldr	r3, [pc, #188]	; (8004a00 <HAL_RCC_OscConfig+0x2ac>)
 8004942:	2201      	movs	r2, #1
 8004944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004946:	f7fd fc27 	bl	8002198 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800494e:	f7fd fc23 	bl	8002198 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e130      	b.n	8004bc2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004960:	4b25      	ldr	r3, [pc, #148]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 8004962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <HAL_RCC_OscConfig+0x1fa>
 800496c:	e015      	b.n	800499a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800496e:	4b24      	ldr	r3, [pc, #144]	; (8004a00 <HAL_RCC_OscConfig+0x2ac>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004974:	f7fd fc10 	bl	8002198 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800497c:	f7fd fc0c 	bl	8002198 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e119      	b.n	8004bc2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800498e:	4b1a      	ldr	r3, [pc, #104]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 8004990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 809f 	beq.w	8004ae6 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049a8:	2300      	movs	r3, #0
 80049aa:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ac:	4b12      	ldr	r3, [pc, #72]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 80049ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10f      	bne.n	80049d8 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b8:	2300      	movs	r3, #0
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	4a0d      	ldr	r2, [pc, #52]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 80049c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c6:	6413      	str	r3, [r2, #64]	; 0x40
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <HAL_RCC_OscConfig+0x2a4>)
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80049d4:	2301      	movs	r3, #1
 80049d6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d8:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <HAL_RCC_OscConfig+0x2b0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d120      	bne.n	8004a26 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049e4:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <HAL_RCC_OscConfig+0x2b0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a06      	ldr	r2, [pc, #24]	; (8004a04 <HAL_RCC_OscConfig+0x2b0>)
 80049ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049f0:	f7fd fbd2 	bl	8002198 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f6:	e010      	b.n	8004a1a <HAL_RCC_OscConfig+0x2c6>
 80049f8:	40023800 	.word	0x40023800
 80049fc:	42470000 	.word	0x42470000
 8004a00:	42470e80 	.word	0x42470e80
 8004a04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a08:	f7fd fbc6 	bl	8002198 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e0d3      	b.n	8004bc2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1a:	4b6c      	ldr	r3, [pc, #432]	; (8004bcc <HAL_RCC_OscConfig+0x478>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0f0      	beq.n	8004a08 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d106      	bne.n	8004a3c <HAL_RCC_OscConfig+0x2e8>
 8004a2e:	4b68      	ldr	r3, [pc, #416]	; (8004bd0 <HAL_RCC_OscConfig+0x47c>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	4a67      	ldr	r2, [pc, #412]	; (8004bd0 <HAL_RCC_OscConfig+0x47c>)
 8004a34:	f043 0301 	orr.w	r3, r3, #1
 8004a38:	6713      	str	r3, [r2, #112]	; 0x70
 8004a3a:	e01c      	b.n	8004a76 <HAL_RCC_OscConfig+0x322>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2b05      	cmp	r3, #5
 8004a42:	d10c      	bne.n	8004a5e <HAL_RCC_OscConfig+0x30a>
 8004a44:	4b62      	ldr	r3, [pc, #392]	; (8004bd0 <HAL_RCC_OscConfig+0x47c>)
 8004a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a48:	4a61      	ldr	r2, [pc, #388]	; (8004bd0 <HAL_RCC_OscConfig+0x47c>)
 8004a4a:	f043 0304 	orr.w	r3, r3, #4
 8004a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a50:	4b5f      	ldr	r3, [pc, #380]	; (8004bd0 <HAL_RCC_OscConfig+0x47c>)
 8004a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a54:	4a5e      	ldr	r2, [pc, #376]	; (8004bd0 <HAL_RCC_OscConfig+0x47c>)
 8004a56:	f043 0301 	orr.w	r3, r3, #1
 8004a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a5c:	e00b      	b.n	8004a76 <HAL_RCC_OscConfig+0x322>
 8004a5e:	4b5c      	ldr	r3, [pc, #368]	; (8004bd0 <HAL_RCC_OscConfig+0x47c>)
 8004a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a62:	4a5b      	ldr	r2, [pc, #364]	; (8004bd0 <HAL_RCC_OscConfig+0x47c>)
 8004a64:	f023 0301 	bic.w	r3, r3, #1
 8004a68:	6713      	str	r3, [r2, #112]	; 0x70
 8004a6a:	4b59      	ldr	r3, [pc, #356]	; (8004bd0 <HAL_RCC_OscConfig+0x47c>)
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6e:	4a58      	ldr	r2, [pc, #352]	; (8004bd0 <HAL_RCC_OscConfig+0x47c>)
 8004a70:	f023 0304 	bic.w	r3, r3, #4
 8004a74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d015      	beq.n	8004aaa <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7e:	f7fd fb8b 	bl	8002198 <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a84:	e00a      	b.n	8004a9c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a86:	f7fd fb87 	bl	8002198 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e092      	b.n	8004bc2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a9c:	4b4c      	ldr	r3, [pc, #304]	; (8004bd0 <HAL_RCC_OscConfig+0x47c>)
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0ee      	beq.n	8004a86 <HAL_RCC_OscConfig+0x332>
 8004aa8:	e014      	b.n	8004ad4 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aaa:	f7fd fb75 	bl	8002198 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ab0:	e00a      	b.n	8004ac8 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab2:	f7fd fb71 	bl	8002198 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e07c      	b.n	8004bc2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ac8:	4b41      	ldr	r3, [pc, #260]	; (8004bd0 <HAL_RCC_OscConfig+0x47c>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1ee      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ad4:	7dfb      	ldrb	r3, [r7, #23]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d105      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ada:	4b3d      	ldr	r3, [pc, #244]	; (8004bd0 <HAL_RCC_OscConfig+0x47c>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	4a3c      	ldr	r2, [pc, #240]	; (8004bd0 <HAL_RCC_OscConfig+0x47c>)
 8004ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ae4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d068      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aee:	4b38      	ldr	r3, [pc, #224]	; (8004bd0 <HAL_RCC_OscConfig+0x47c>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 030c 	and.w	r3, r3, #12
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d060      	beq.n	8004bbc <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d145      	bne.n	8004b8e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b02:	4b34      	ldr	r3, [pc, #208]	; (8004bd4 <HAL_RCC_OscConfig+0x480>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b08:	f7fd fb46 	bl	8002198 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b10:	f7fd fb42 	bl	8002198 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e04f      	b.n	8004bc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b22:	4b2b      	ldr	r3, [pc, #172]	; (8004bd0 <HAL_RCC_OscConfig+0x47c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69da      	ldr	r2, [r3, #28]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	019b      	lsls	r3, r3, #6
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b44:	085b      	lsrs	r3, r3, #1
 8004b46:	3b01      	subs	r3, #1
 8004b48:	041b      	lsls	r3, r3, #16
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	061b      	lsls	r3, r3, #24
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	071b      	lsls	r3, r3, #28
 8004b5a:	491d      	ldr	r1, [pc, #116]	; (8004bd0 <HAL_RCC_OscConfig+0x47c>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b60:	4b1c      	ldr	r3, [pc, #112]	; (8004bd4 <HAL_RCC_OscConfig+0x480>)
 8004b62:	2201      	movs	r2, #1
 8004b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b66:	f7fd fb17 	bl	8002198 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b6e:	f7fd fb13 	bl	8002198 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e020      	b.n	8004bc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b80:	4b13      	ldr	r3, [pc, #76]	; (8004bd0 <HAL_RCC_OscConfig+0x47c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0f0      	beq.n	8004b6e <HAL_RCC_OscConfig+0x41a>
 8004b8c:	e018      	b.n	8004bc0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b8e:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <HAL_RCC_OscConfig+0x480>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fd fb00 	bl	8002198 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b9c:	f7fd fafc 	bl	8002198 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e009      	b.n	8004bc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bae:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <HAL_RCC_OscConfig+0x47c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0x448>
 8004bba:	e001      	b.n	8004bc0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40007000 	.word	0x40007000
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	42470060 	.word	0x42470060

08004bd8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e022      	b.n	8004c30 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d105      	bne.n	8004c02 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7fc ffbb 	bl	8001b78 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2203      	movs	r2, #3
 8004c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f814 	bl	8004c38 <HAL_SD_InitCard>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e00a      	b.n	8004c30 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004c38:	b5b0      	push	{r4, r5, r7, lr}
 8004c3a:	b08e      	sub	sp, #56	; 0x38
 8004c3c:	af04      	add	r7, sp, #16
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004c54:	2376      	movs	r3, #118	; 0x76
 8004c56:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681d      	ldr	r5, [r3, #0]
 8004c5c:	466c      	mov	r4, sp
 8004c5e:	f107 0314 	add.w	r3, r7, #20
 8004c62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004c66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004c6a:	f107 0308 	add.w	r3, r7, #8
 8004c6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c70:	4628      	mov	r0, r5
 8004c72:	f001 fc7b 	bl	800656c <SDIO_Init>
 8004c76:	4603      	mov	r3, r0
 8004c78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e031      	b.n	8004cec <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004c88:	4b1a      	ldr	r3, [pc, #104]	; (8004cf4 <HAL_SD_InitCard+0xbc>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f001 fcb3 	bl	80065fe <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004c98:	4b16      	ldr	r3, [pc, #88]	; (8004cf4 <HAL_SD_InitCard+0xbc>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fe80 	bl	80059a4 <SD_PowerON>
 8004ca4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00b      	beq.n	8004cc4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e013      	b.n	8004cec <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fd9f 	bl	8005808 <SD_InitCard>
 8004cca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00b      	beq.n	8004cea <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e000      	b.n	8004cec <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3728      	adds	r7, #40	; 0x28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8004cf4:	422580a0 	.word	0x422580a0

08004cf8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b092      	sub	sp, #72	; 0x48
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004d06:	f7fd fa47 	bl	8002198 <HAL_GetTick>
 8004d0a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d107      	bne.n	8004d2a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e1d7      	b.n	80050da <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	f040 81ca 	bne.w	80050cc <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004d3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	441a      	add	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d907      	bls.n	8004d5c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e1be      	b.n	80050da <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2203      	movs	r2, #3
 8004d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d002      	beq.n	8004d7a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	025b      	lsls	r3, r3, #9
 8004d78:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d82:	4618      	mov	r0, r3
 8004d84:	f001 fcce 	bl	8006724 <SDMMC_CmdBlockLength>
 8004d88:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00f      	beq.n	8004db0 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a9a      	ldr	r2, [pc, #616]	; (8005000 <HAL_SD_ReadBlocks+0x308>)
 8004d96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e194      	b.n	80050da <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004db0:	f04f 33ff 	mov.w	r3, #4294967295
 8004db4:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	025b      	lsls	r3, r3, #9
 8004dba:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004dbc:	2390      	movs	r3, #144	; 0x90
 8004dbe:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f107 0214 	add.w	r2, r7, #20
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f001 fc78 	bl	80066cc <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d90a      	bls.n	8004df8 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2202      	movs	r2, #2
 8004de6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dee:	4618      	mov	r0, r3
 8004df0:	f001 fcdc 	bl	80067ac <SDMMC_CmdReadMultiBlock>
 8004df4:	6478      	str	r0, [r7, #68]	; 0x44
 8004df6:	e009      	b.n	8004e0c <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e04:	4618      	mov	r0, r3
 8004e06:	f001 fcaf 	bl	8006768 <SDMMC_CmdReadSingleBlock>
 8004e0a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d012      	beq.n	8004e38 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a7a      	ldr	r2, [pc, #488]	; (8005000 <HAL_SD_ReadBlocks+0x308>)
 8004e18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e20:	431a      	orrs	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e150      	b.n	80050da <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004e3c:	e061      	b.n	8004f02 <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d03c      	beq.n	8004ec6 <HAL_SD_ReadBlocks+0x1ce>
 8004e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d039      	beq.n	8004ec6 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004e52:	2300      	movs	r3, #0
 8004e54:	643b      	str	r3, [r7, #64]	; 0x40
 8004e56:	e033      	b.n	8004ec0 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f001 fbb0 	bl	80065c2 <SDIO_ReadFIFO>
 8004e62:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6e:	3301      	adds	r3, #1
 8004e70:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e74:	3b01      	subs	r3, #1
 8004e76:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7a:	0a1b      	lsrs	r3, r3, #8
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e80:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e84:	3301      	adds	r3, #1
 8004e86:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e90:	0c1b      	lsrs	r3, r3, #16
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e96:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea6:	0e1b      	lsrs	r3, r3, #24
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eac:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8004eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	643b      	str	r3, [r7, #64]	; 0x40
 8004ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ec2:	2b07      	cmp	r3, #7
 8004ec4:	d9c8      	bls.n	8004e58 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004ec6:	f7fd f967 	bl	8002198 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d902      	bls.n	8004edc <HAL_SD_ReadBlocks+0x1e4>
 8004ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d112      	bne.n	8004f02 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a47      	ldr	r2, [pc, #284]	; (8005000 <HAL_SD_ReadBlocks+0x308>)
 8004ee2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e0eb      	b.n	80050da <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f08:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d096      	beq.n	8004e3e <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d022      	beq.n	8004f64 <HAL_SD_ReadBlocks+0x26c>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d91f      	bls.n	8004f64 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d01b      	beq.n	8004f64 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f001 fca1 	bl	8006878 <SDMMC_CmdStopTransfer>
 8004f36:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d012      	beq.n	8004f64 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a2f      	ldr	r2, [pc, #188]	; (8005000 <HAL_SD_ReadBlocks+0x308>)
 8004f44:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e0ba      	b.n	80050da <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d012      	beq.n	8004f98 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a22      	ldr	r2, [pc, #136]	; (8005000 <HAL_SD_ReadBlocks+0x308>)
 8004f78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7e:	f043 0208 	orr.w	r2, r3, #8
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0a0      	b.n	80050da <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d012      	beq.n	8004fcc <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a15      	ldr	r2, [pc, #84]	; (8005000 <HAL_SD_ReadBlocks+0x308>)
 8004fac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	f043 0202 	orr.w	r2, r3, #2
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e086      	b.n	80050da <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d063      	beq.n	80050a2 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a08      	ldr	r2, [pc, #32]	; (8005000 <HAL_SD_ReadBlocks+0x308>)
 8004fe0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe6:	f043 0220 	orr.w	r2, r3, #32
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e06c      	b.n	80050da <HAL_SD_ReadBlocks+0x3e2>
 8005000:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4618      	mov	r0, r3
 800500a:	f001 fada 	bl	80065c2 <SDIO_ReadFIFO>
 800500e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	b2da      	uxtb	r2, r3
 8005014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005016:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501a:	3301      	adds	r3, #1
 800501c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800501e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005020:	3b01      	subs	r3, #1
 8005022:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005026:	0a1b      	lsrs	r3, r3, #8
 8005028:	b2da      	uxtb	r2, r3
 800502a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800502c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800502e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005030:	3301      	adds	r3, #1
 8005032:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005036:	3b01      	subs	r3, #1
 8005038:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800503a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503c:	0c1b      	lsrs	r3, r3, #16
 800503e:	b2da      	uxtb	r2, r3
 8005040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005042:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005046:	3301      	adds	r3, #1
 8005048:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800504a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800504c:	3b01      	subs	r3, #1
 800504e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005052:	0e1b      	lsrs	r3, r3, #24
 8005054:	b2da      	uxtb	r2, r3
 8005056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005058:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800505a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505c:	3301      	adds	r3, #1
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005062:	3b01      	subs	r3, #1
 8005064:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005066:	f7fd f897 	bl	8002198 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005072:	429a      	cmp	r2, r3
 8005074:	d902      	bls.n	800507c <HAL_SD_ReadBlocks+0x384>
 8005076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005078:	2b00      	cmp	r3, #0
 800507a:	d112      	bne.n	80050a2 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a18      	ldr	r2, [pc, #96]	; (80050e4 <HAL_SD_ReadBlocks+0x3ec>)
 8005082:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e01b      	b.n	80050da <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <HAL_SD_ReadBlocks+0x3be>
 80050b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1a6      	bne.n	8005004 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f240 523a 	movw	r2, #1338	; 0x53a
 80050be:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	e006      	b.n	80050da <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
  }
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3748      	adds	r7, #72	; 0x48
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	004005ff 	.word	0x004005ff

080050e8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b092      	sub	sp, #72	; 0x48
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
 80050f4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80050f6:	f7fd f84f 	bl	8002198 <HAL_GetTick>
 80050fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d107      	bne.n	800511a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e182      	b.n	8005420 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b01      	cmp	r3, #1
 8005124:	f040 8175 	bne.w	8005412 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800512e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	441a      	add	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005138:	429a      	cmp	r2, r3
 800513a:	d907      	bls.n	800514c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005140:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e169      	b.n	8005420 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2203      	movs	r2, #3
 8005150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2200      	movs	r2, #0
 800515a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005160:	2b01      	cmp	r3, #1
 8005162:	d002      	beq.n	800516a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005166:	025b      	lsls	r3, r3, #9
 8005168:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005172:	4618      	mov	r0, r3
 8005174:	f001 fad6 	bl	8006724 <SDMMC_CmdBlockLength>
 8005178:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800517a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00f      	beq.n	80051a0 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a9c      	ldr	r2, [pc, #624]	; (80053f8 <HAL_SD_WriteBlocks+0x310>)
 8005186:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800518c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800518e:	431a      	orrs	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e13f      	b.n	8005420 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80051a0:	f04f 33ff 	mov.w	r3, #4294967295
 80051a4:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	025b      	lsls	r3, r3, #9
 80051aa:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80051ac:	2390      	movs	r3, #144	; 0x90
 80051ae:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80051b0:	2300      	movs	r3, #0
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80051b8:	2301      	movs	r3, #1
 80051ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f107 0218 	add.w	r2, r7, #24
 80051c4:	4611      	mov	r1, r2
 80051c6:	4618      	mov	r0, r3
 80051c8:	f001 fa80 	bl	80066cc <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d90a      	bls.n	80051e8 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2220      	movs	r2, #32
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051de:	4618      	mov	r0, r3
 80051e0:	f001 fb28 	bl	8006834 <SDMMC_CmdWriteMultiBlock>
 80051e4:	6478      	str	r0, [r7, #68]	; 0x44
 80051e6:	e009      	b.n	80051fc <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2210      	movs	r2, #16
 80051ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051f4:	4618      	mov	r0, r3
 80051f6:	f001 fafb 	bl	80067f0 <SDMMC_CmdWriteSingleBlock>
 80051fa:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80051fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d012      	beq.n	8005228 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a7c      	ldr	r2, [pc, #496]	; (80053f8 <HAL_SD_WriteBlocks+0x310>)
 8005208:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800520e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005210:	431a      	orrs	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e0fb      	b.n	8005420 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800522c:	e065      	b.n	80052fa <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d040      	beq.n	80052be <HAL_SD_WriteBlocks+0x1d6>
 800523c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523e:	2b00      	cmp	r3, #0
 8005240:	d03d      	beq.n	80052be <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005242:	2300      	movs	r3, #0
 8005244:	643b      	str	r3, [r7, #64]	; 0x40
 8005246:	e037      	b.n	80052b8 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8005248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800524e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005250:	3301      	adds	r3, #1
 8005252:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005256:	3b01      	subs	r3, #1
 8005258:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800525a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	021a      	lsls	r2, r3, #8
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005268:	3301      	adds	r3, #1
 800526a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800526c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800526e:	3b01      	subs	r3, #1
 8005270:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	041a      	lsls	r2, r3, #16
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800527e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005280:	3301      	adds	r3, #1
 8005282:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005286:	3b01      	subs	r3, #1
 8005288:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800528a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	061a      	lsls	r2, r3, #24
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005298:	3301      	adds	r3, #1
 800529a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800529c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800529e:	3b01      	subs	r3, #1
 80052a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f107 0214 	add.w	r2, r7, #20
 80052aa:	4611      	mov	r1, r2
 80052ac:	4618      	mov	r0, r3
 80052ae:	f001 f995 	bl	80065dc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80052b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052b4:	3301      	adds	r3, #1
 80052b6:	643b      	str	r3, [r7, #64]	; 0x40
 80052b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ba:	2b07      	cmp	r3, #7
 80052bc:	d9c4      	bls.n	8005248 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80052be:	f7fc ff6b 	bl	8002198 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d902      	bls.n	80052d4 <HAL_SD_WriteBlocks+0x1ec>
 80052ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d112      	bne.n	80052fa <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a47      	ldr	r2, [pc, #284]	; (80053f8 <HAL_SD_WriteBlocks+0x310>)
 80052da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e2:	431a      	orrs	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e092      	b.n	8005420 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005300:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005304:	2b00      	cmp	r3, #0
 8005306:	d092      	beq.n	800522e <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005312:	2b00      	cmp	r3, #0
 8005314:	d022      	beq.n	800535c <HAL_SD_WriteBlocks+0x274>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d91f      	bls.n	800535c <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005320:	2b03      	cmp	r3, #3
 8005322:	d01b      	beq.n	800535c <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f001 faa5 	bl	8006878 <SDMMC_CmdStopTransfer>
 800532e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005332:	2b00      	cmp	r3, #0
 8005334:	d012      	beq.n	800535c <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a2f      	ldr	r2, [pc, #188]	; (80053f8 <HAL_SD_WriteBlocks+0x310>)
 800533c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005344:	431a      	orrs	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e061      	b.n	8005420 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d012      	beq.n	8005390 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a22      	ldr	r2, [pc, #136]	; (80053f8 <HAL_SD_WriteBlocks+0x310>)
 8005370:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	f043 0208 	orr.w	r2, r3, #8
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e047      	b.n	8005420 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d012      	beq.n	80053c4 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a15      	ldr	r2, [pc, #84]	; (80053f8 <HAL_SD_WriteBlocks+0x310>)
 80053a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	f043 0202 	orr.w	r2, r3, #2
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e02d      	b.n	8005420 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ca:	f003 0310 	and.w	r3, r3, #16
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d014      	beq.n	80053fc <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a08      	ldr	r2, [pc, #32]	; (80053f8 <HAL_SD_WriteBlocks+0x310>)
 80053d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	f043 0210 	orr.w	r2, r3, #16
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e013      	b.n	8005420 <HAL_SD_WriteBlocks+0x338>
 80053f8:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f240 523a 	movw	r2, #1338	; 0x53a
 8005404:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	e006      	b.n	8005420 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
  }
}
 8005420:	4618      	mov	r0, r3
 8005422:	3748      	adds	r7, #72	; 0x48
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005436:	0f9b      	lsrs	r3, r3, #30
 8005438:	b2da      	uxtb	r2, r3
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005442:	0e9b      	lsrs	r3, r3, #26
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	b2da      	uxtb	r2, r3
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005454:	0e1b      	lsrs	r3, r3, #24
 8005456:	b2db      	uxtb	r3, r3
 8005458:	f003 0303 	and.w	r3, r3, #3
 800545c:	b2da      	uxtb	r2, r3
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005466:	0c1b      	lsrs	r3, r3, #16
 8005468:	b2da      	uxtb	r2, r3
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005472:	0a1b      	lsrs	r3, r3, #8
 8005474:	b2da      	uxtb	r2, r3
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800547e:	b2da      	uxtb	r2, r3
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005488:	0d1b      	lsrs	r3, r3, #20
 800548a:	b29a      	uxth	r2, r3
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005494:	0c1b      	lsrs	r3, r3, #16
 8005496:	b2db      	uxtb	r3, r3
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	b2da      	uxtb	r2, r3
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054a6:	0bdb      	lsrs	r3, r3, #15
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054b8:	0b9b      	lsrs	r3, r3, #14
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054ca:	0b5b      	lsrs	r3, r3, #13
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054dc:	0b1b      	lsrs	r3, r3, #12
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2200      	movs	r2, #0
 80054ee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d163      	bne.n	80055c0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054fc:	009a      	lsls	r2, r3, #2
 80054fe:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005502:	4013      	ands	r3, r2
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005508:	0f92      	lsrs	r2, r2, #30
 800550a:	431a      	orrs	r2, r3
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005514:	0edb      	lsrs	r3, r3, #27
 8005516:	b2db      	uxtb	r3, r3
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	b2da      	uxtb	r2, r3
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005526:	0e1b      	lsrs	r3, r3, #24
 8005528:	b2db      	uxtb	r3, r3
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	b2da      	uxtb	r2, r3
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005538:	0d5b      	lsrs	r3, r3, #21
 800553a:	b2db      	uxtb	r3, r3
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	b2da      	uxtb	r2, r3
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800554a:	0c9b      	lsrs	r3, r3, #18
 800554c:	b2db      	uxtb	r3, r3
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	b2da      	uxtb	r2, r3
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800555c:	0bdb      	lsrs	r3, r3, #15
 800555e:	b2db      	uxtb	r3, r3
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	b2da      	uxtb	r2, r3
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	7e1b      	ldrb	r3, [r3, #24]
 8005578:	b2db      	uxtb	r3, r3
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	3302      	adds	r3, #2
 8005580:	2201      	movs	r2, #1
 8005582:	fa02 f303 	lsl.w	r3, r2, r3
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800558a:	fb02 f203 	mul.w	r2, r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	7a1b      	ldrb	r3, [r3, #8]
 8005596:	b2db      	uxtb	r3, r3
 8005598:	f003 030f 	and.w	r3, r3, #15
 800559c:	2201      	movs	r2, #1
 800559e:	409a      	lsls	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80055ac:	0a52      	lsrs	r2, r2, #9
 80055ae:	fb02 f203 	mul.w	r2, r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055bc:	661a      	str	r2, [r3, #96]	; 0x60
 80055be:	e031      	b.n	8005624 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d11d      	bne.n	8005604 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055cc:	041b      	lsls	r3, r3, #16
 80055ce:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055d6:	0c1b      	lsrs	r3, r3, #16
 80055d8:	431a      	orrs	r2, r3
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	3301      	adds	r3, #1
 80055e4:	029a      	lsls	r2, r3, #10
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055f8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	661a      	str	r2, [r3, #96]	; 0x60
 8005602:	e00f      	b.n	8005624 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a58      	ldr	r2, [pc, #352]	; (800576c <HAL_SD_GetCardCSD+0x344>)
 800560a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005610:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e09d      	b.n	8005760 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005628:	0b9b      	lsrs	r3, r3, #14
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	b2da      	uxtb	r2, r3
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800563a:	09db      	lsrs	r3, r3, #7
 800563c:	b2db      	uxtb	r3, r3
 800563e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005642:	b2da      	uxtb	r2, r3
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005652:	b2da      	uxtb	r2, r3
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565c:	0fdb      	lsrs	r3, r3, #31
 800565e:	b2da      	uxtb	r2, r3
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005668:	0f5b      	lsrs	r3, r3, #29
 800566a:	b2db      	uxtb	r3, r3
 800566c:	f003 0303 	and.w	r3, r3, #3
 8005670:	b2da      	uxtb	r2, r3
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567a:	0e9b      	lsrs	r3, r3, #26
 800567c:	b2db      	uxtb	r3, r3
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	b2da      	uxtb	r2, r3
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568c:	0d9b      	lsrs	r3, r3, #22
 800568e:	b2db      	uxtb	r3, r3
 8005690:	f003 030f 	and.w	r3, r3, #15
 8005694:	b2da      	uxtb	r2, r3
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569e:	0d5b      	lsrs	r3, r3, #21
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ba:	0c1b      	lsrs	r3, r3, #16
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ce:	0bdb      	lsrs	r3, r3, #15
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e2:	0b9b      	lsrs	r3, r3, #14
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f6:	0b5b      	lsrs	r3, r3, #13
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	0b1b      	lsrs	r3, r3, #12
 800570c:	b2db      	uxtb	r3, r3
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	b2da      	uxtb	r2, r3
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571e:	0a9b      	lsrs	r3, r3, #10
 8005720:	b2db      	uxtb	r3, r3
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	b2da      	uxtb	r2, r3
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005732:	0a1b      	lsrs	r3, r3, #8
 8005734:	b2db      	uxtb	r3, r3
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	b2da      	uxtb	r2, r3
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005746:	085b      	lsrs	r3, r3, #1
 8005748:	b2db      	uxtb	r3, r3
 800574a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800574e:	b2da      	uxtb	r2, r3
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	004005ff 	.word	0x004005ff

08005770 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80057d4:	f107 030c 	add.w	r3, r7, #12
 80057d8:	4619      	mov	r1, r3
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f970 	bl	8005ac0 <SD_SendStatus>
 80057e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d005      	beq.n	80057f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	0a5b      	lsrs	r3, r3, #9
 80057f8:	f003 030f 	and.w	r3, r3, #15
 80057fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80057fe:	693b      	ldr	r3, [r7, #16]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005808:	b5b0      	push	{r4, r5, r7, lr}
 800580a:	b094      	sub	sp, #80	; 0x50
 800580c:	af04      	add	r7, sp, #16
 800580e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005810:	2301      	movs	r3, #1
 8005812:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4618      	mov	r0, r3
 800581a:	f000 feff 	bl	800661c <SDIO_GetPowerState>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d102      	bne.n	800582a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005824:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005828:	e0b7      	b.n	800599a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582e:	2b03      	cmp	r3, #3
 8005830:	d02f      	beq.n	8005892 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4618      	mov	r0, r3
 8005838:	f001 f8e5 	bl	8006a06 <SDMMC_CmdSendCID>
 800583c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800583e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <SD_InitCard+0x40>
    {
      return errorstate;
 8005844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005846:	e0a8      	b.n	800599a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2100      	movs	r1, #0
 800584e:	4618      	mov	r0, r3
 8005850:	f000 ff29 	bl	80066a6 <SDIO_GetResponse>
 8005854:	4602      	mov	r2, r0
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2104      	movs	r1, #4
 8005860:	4618      	mov	r0, r3
 8005862:	f000 ff20 	bl	80066a6 <SDIO_GetResponse>
 8005866:	4602      	mov	r2, r0
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2108      	movs	r1, #8
 8005872:	4618      	mov	r0, r3
 8005874:	f000 ff17 	bl	80066a6 <SDIO_GetResponse>
 8005878:	4602      	mov	r2, r0
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	210c      	movs	r1, #12
 8005884:	4618      	mov	r0, r3
 8005886:	f000 ff0e 	bl	80066a6 <SDIO_GetResponse>
 800588a:	4602      	mov	r2, r0
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005896:	2b03      	cmp	r3, #3
 8005898:	d00d      	beq.n	80058b6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f107 020e 	add.w	r2, r7, #14
 80058a2:	4611      	mov	r1, r2
 80058a4:	4618      	mov	r0, r3
 80058a6:	f001 f8eb 	bl	8006a80 <SDMMC_CmdSetRelAdd>
 80058aa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80058ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <SD_InitCard+0xae>
    {
      return errorstate;
 80058b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b4:	e071      	b.n	800599a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d036      	beq.n	800592c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80058be:	89fb      	ldrh	r3, [r7, #14]
 80058c0:	461a      	mov	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ce:	041b      	lsls	r3, r3, #16
 80058d0:	4619      	mov	r1, r3
 80058d2:	4610      	mov	r0, r2
 80058d4:	f001 f8b5 	bl	8006a42 <SDMMC_CmdSendCSD>
 80058d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80058da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80058e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058e2:	e05a      	b.n	800599a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2100      	movs	r1, #0
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fedb 	bl	80066a6 <SDIO_GetResponse>
 80058f0:	4602      	mov	r2, r0
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2104      	movs	r1, #4
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 fed2 	bl	80066a6 <SDIO_GetResponse>
 8005902:	4602      	mov	r2, r0
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2108      	movs	r1, #8
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fec9 	bl	80066a6 <SDIO_GetResponse>
 8005914:	4602      	mov	r2, r0
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	210c      	movs	r1, #12
 8005920:	4618      	mov	r0, r3
 8005922:	f000 fec0 	bl	80066a6 <SDIO_GetResponse>
 8005926:	4602      	mov	r2, r0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2104      	movs	r1, #4
 8005932:	4618      	mov	r0, r3
 8005934:	f000 feb7 	bl	80066a6 <SDIO_GetResponse>
 8005938:	4603      	mov	r3, r0
 800593a:	0d1a      	lsrs	r2, r3, #20
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005940:	f107 0310 	add.w	r3, r7, #16
 8005944:	4619      	mov	r1, r3
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7ff fd6e 	bl	8005428 <HAL_SD_GetCardCSD>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005952:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005956:	e020      	b.n	800599a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6819      	ldr	r1, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005960:	041b      	lsls	r3, r3, #16
 8005962:	f04f 0400 	mov.w	r4, #0
 8005966:	461a      	mov	r2, r3
 8005968:	4623      	mov	r3, r4
 800596a:	4608      	mov	r0, r1
 800596c:	f000 ffa6 	bl	80068bc <SDMMC_CmdSelDesel>
 8005970:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <SD_InitCard+0x174>
  {
    return errorstate;
 8005978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597a:	e00e      	b.n	800599a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681d      	ldr	r5, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	466c      	mov	r4, sp
 8005984:	f103 0210 	add.w	r2, r3, #16
 8005988:	ca07      	ldmia	r2, {r0, r1, r2}
 800598a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800598e:	3304      	adds	r3, #4
 8005990:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005992:	4628      	mov	r0, r5
 8005994:	f000 fdea 	bl	800656c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3740      	adds	r7, #64	; 0x40
 800599e:	46bd      	mov	sp, r7
 80059a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080059a4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	2300      	movs	r3, #0
 80059b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 ffa0 	bl	8006902 <SDMMC_CmdGoIdleState>
 80059c2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <SD_PowerON+0x2a>
  {
    return errorstate;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	e072      	b.n	8005ab4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 ffb3 	bl	800693e <SDMMC_CmdOperCond>
 80059d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00d      	beq.n	80059fc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 ff89 	bl	8006902 <SDMMC_CmdGoIdleState>
 80059f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d004      	beq.n	8005a02 <SD_PowerON+0x5e>
    {
      return errorstate;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	e05b      	b.n	8005ab4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d137      	bne.n	8005a7a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 ffb3 	bl	800697c <SDMMC_CmdAppCommand>
 8005a16:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d02d      	beq.n	8005a7a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a22:	e047      	b.n	8005ab4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2100      	movs	r1, #0
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 ffa6 	bl	800697c <SDMMC_CmdAppCommand>
 8005a30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <SD_PowerON+0x98>
    {
      return errorstate;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	e03b      	b.n	8005ab4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	491e      	ldr	r1, [pc, #120]	; (8005abc <SD_PowerON+0x118>)
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 ffbc 	bl	80069c0 <SDMMC_CmdAppOperCommand>
 8005a48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a54:	e02e      	b.n	8005ab4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 fe22 	bl	80066a6 <SDIO_GetResponse>
 8005a62:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	0fdb      	lsrs	r3, r3, #31
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <SD_PowerON+0xcc>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e000      	b.n	8005a72 <SD_PowerON+0xce>
 8005a70:	2300      	movs	r3, #0
 8005a72:	613b      	str	r3, [r7, #16]

    count++;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	3301      	adds	r3, #1
 8005a78:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d802      	bhi.n	8005a8a <SD_PowerON+0xe6>
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0cc      	beq.n	8005a24 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d902      	bls.n	8005a9a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005a94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a98:	e00c      	b.n	8005ab4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	645a      	str	r2, [r3, #68]	; 0x44
 8005aaa:	e002      	b.n	8005ab2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	c1100000 	.word	0xc1100000

08005ac0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d102      	bne.n	8005ad6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005ad0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ad4:	e018      	b.n	8005b08 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ade:	041b      	lsls	r3, r3, #16
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	f000 ffed 	bl	8006ac2 <SDMMC_CmdSendStatus>
 8005ae8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	e009      	b.n	8005b08 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2100      	movs	r1, #0
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fdd3 	bl	80066a6 <SDIO_GetResponse>
 8005b00:	4602      	mov	r2, r0
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e034      	b.n	8005b90 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d106      	bne.n	8005b40 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f7fc f984 	bl	8001e48 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3308      	adds	r3, #8
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	f000 fc0a 	bl	8006364 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	68b9      	ldr	r1, [r7, #8]
 8005b5c:	f000 fc72 	bl	8006444 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6858      	ldr	r0, [r3, #4]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	f000 fcbd 	bl	80064ec <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	6892      	ldr	r2, [r2, #8]
 8005b7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	6892      	ldr	r2, [r2, #8]
 8005b86:	f041 0101 	orr.w	r1, r1, #1
 8005b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e03f      	b.n	8005c2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fc f854 	bl	8001c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2224      	movs	r2, #36	; 0x24
 8005bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f829 	bl	8005c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695a      	ldr	r2, [r3, #20]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c38:	b085      	sub	sp, #20
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c76:	f023 030c 	bic.w	r3, r3, #12
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6812      	ldr	r2, [r2, #0]
 8005c7e:	68f9      	ldr	r1, [r7, #12]
 8005c80:	430b      	orrs	r3, r1
 8005c82:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	699a      	ldr	r2, [r3, #24]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca2:	f040 8199 	bne.w	8005fd8 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4ac6      	ldr	r2, [pc, #792]	; (8005fc4 <UART_SetConfig+0x390>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00f      	beq.n	8005cd0 <UART_SetConfig+0x9c>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4ac4      	ldr	r2, [pc, #784]	; (8005fc8 <UART_SetConfig+0x394>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00a      	beq.n	8005cd0 <UART_SetConfig+0x9c>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4ac3      	ldr	r2, [pc, #780]	; (8005fcc <UART_SetConfig+0x398>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d005      	beq.n	8005cd0 <UART_SetConfig+0x9c>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4ac1      	ldr	r2, [pc, #772]	; (8005fd0 <UART_SetConfig+0x39c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	f040 80bd 	bne.w	8005e4a <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cd0:	f7fe faa0 	bl	8004214 <HAL_RCC_GetPCLK2Freq>
 8005cd4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	461d      	mov	r5, r3
 8005cda:	f04f 0600 	mov.w	r6, #0
 8005cde:	46a8      	mov	r8, r5
 8005ce0:	46b1      	mov	r9, r6
 8005ce2:	eb18 0308 	adds.w	r3, r8, r8
 8005ce6:	eb49 0409 	adc.w	r4, r9, r9
 8005cea:	4698      	mov	r8, r3
 8005cec:	46a1      	mov	r9, r4
 8005cee:	eb18 0805 	adds.w	r8, r8, r5
 8005cf2:	eb49 0906 	adc.w	r9, r9, r6
 8005cf6:	f04f 0100 	mov.w	r1, #0
 8005cfa:	f04f 0200 	mov.w	r2, #0
 8005cfe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d02:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d06:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d0a:	4688      	mov	r8, r1
 8005d0c:	4691      	mov	r9, r2
 8005d0e:	eb18 0005 	adds.w	r0, r8, r5
 8005d12:	eb49 0106 	adc.w	r1, r9, r6
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	461d      	mov	r5, r3
 8005d1c:	f04f 0600 	mov.w	r6, #0
 8005d20:	196b      	adds	r3, r5, r5
 8005d22:	eb46 0406 	adc.w	r4, r6, r6
 8005d26:	461a      	mov	r2, r3
 8005d28:	4623      	mov	r3, r4
 8005d2a:	f7fa fac9 	bl	80002c0 <__aeabi_uldivmod>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	460c      	mov	r4, r1
 8005d32:	461a      	mov	r2, r3
 8005d34:	4ba7      	ldr	r3, [pc, #668]	; (8005fd4 <UART_SetConfig+0x3a0>)
 8005d36:	fba3 2302 	umull	r2, r3, r3, r2
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	461d      	mov	r5, r3
 8005d44:	f04f 0600 	mov.w	r6, #0
 8005d48:	46a9      	mov	r9, r5
 8005d4a:	46b2      	mov	sl, r6
 8005d4c:	eb19 0309 	adds.w	r3, r9, r9
 8005d50:	eb4a 040a 	adc.w	r4, sl, sl
 8005d54:	4699      	mov	r9, r3
 8005d56:	46a2      	mov	sl, r4
 8005d58:	eb19 0905 	adds.w	r9, r9, r5
 8005d5c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d60:	f04f 0100 	mov.w	r1, #0
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d74:	4689      	mov	r9, r1
 8005d76:	4692      	mov	sl, r2
 8005d78:	eb19 0005 	adds.w	r0, r9, r5
 8005d7c:	eb4a 0106 	adc.w	r1, sl, r6
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	461d      	mov	r5, r3
 8005d86:	f04f 0600 	mov.w	r6, #0
 8005d8a:	196b      	adds	r3, r5, r5
 8005d8c:	eb46 0406 	adc.w	r4, r6, r6
 8005d90:	461a      	mov	r2, r3
 8005d92:	4623      	mov	r3, r4
 8005d94:	f7fa fa94 	bl	80002c0 <__aeabi_uldivmod>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	460c      	mov	r4, r1
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4b8d      	ldr	r3, [pc, #564]	; (8005fd4 <UART_SetConfig+0x3a0>)
 8005da0:	fba3 1302 	umull	r1, r3, r3, r2
 8005da4:	095b      	lsrs	r3, r3, #5
 8005da6:	2164      	movs	r1, #100	; 0x64
 8005da8:	fb01 f303 	mul.w	r3, r1, r3
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	3332      	adds	r3, #50	; 0x32
 8005db2:	4a88      	ldr	r2, [pc, #544]	; (8005fd4 <UART_SetConfig+0x3a0>)
 8005db4:	fba2 2303 	umull	r2, r3, r2, r3
 8005db8:	095b      	lsrs	r3, r3, #5
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005dc0:	4498      	add	r8, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	461d      	mov	r5, r3
 8005dc6:	f04f 0600 	mov.w	r6, #0
 8005dca:	46a9      	mov	r9, r5
 8005dcc:	46b2      	mov	sl, r6
 8005dce:	eb19 0309 	adds.w	r3, r9, r9
 8005dd2:	eb4a 040a 	adc.w	r4, sl, sl
 8005dd6:	4699      	mov	r9, r3
 8005dd8:	46a2      	mov	sl, r4
 8005dda:	eb19 0905 	adds.w	r9, r9, r5
 8005dde:	eb4a 0a06 	adc.w	sl, sl, r6
 8005de2:	f04f 0100 	mov.w	r1, #0
 8005de6:	f04f 0200 	mov.w	r2, #0
 8005dea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005df2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005df6:	4689      	mov	r9, r1
 8005df8:	4692      	mov	sl, r2
 8005dfa:	eb19 0005 	adds.w	r0, r9, r5
 8005dfe:	eb4a 0106 	adc.w	r1, sl, r6
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	461d      	mov	r5, r3
 8005e08:	f04f 0600 	mov.w	r6, #0
 8005e0c:	196b      	adds	r3, r5, r5
 8005e0e:	eb46 0406 	adc.w	r4, r6, r6
 8005e12:	461a      	mov	r2, r3
 8005e14:	4623      	mov	r3, r4
 8005e16:	f7fa fa53 	bl	80002c0 <__aeabi_uldivmod>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	461a      	mov	r2, r3
 8005e20:	4b6c      	ldr	r3, [pc, #432]	; (8005fd4 <UART_SetConfig+0x3a0>)
 8005e22:	fba3 1302 	umull	r1, r3, r3, r2
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	2164      	movs	r1, #100	; 0x64
 8005e2a:	fb01 f303 	mul.w	r3, r1, r3
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	3332      	adds	r3, #50	; 0x32
 8005e34:	4a67      	ldr	r2, [pc, #412]	; (8005fd4 <UART_SetConfig+0x3a0>)
 8005e36:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3a:	095b      	lsrs	r3, r3, #5
 8005e3c:	f003 0207 	and.w	r2, r3, #7
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4442      	add	r2, r8
 8005e46:	609a      	str	r2, [r3, #8]
 8005e48:	e27d      	b.n	8006346 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e4a:	f7fe f9cf 	bl	80041ec <HAL_RCC_GetPCLK1Freq>
 8005e4e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	461d      	mov	r5, r3
 8005e54:	f04f 0600 	mov.w	r6, #0
 8005e58:	46a8      	mov	r8, r5
 8005e5a:	46b1      	mov	r9, r6
 8005e5c:	eb18 0308 	adds.w	r3, r8, r8
 8005e60:	eb49 0409 	adc.w	r4, r9, r9
 8005e64:	4698      	mov	r8, r3
 8005e66:	46a1      	mov	r9, r4
 8005e68:	eb18 0805 	adds.w	r8, r8, r5
 8005e6c:	eb49 0906 	adc.w	r9, r9, r6
 8005e70:	f04f 0100 	mov.w	r1, #0
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e7c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e80:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e84:	4688      	mov	r8, r1
 8005e86:	4691      	mov	r9, r2
 8005e88:	eb18 0005 	adds.w	r0, r8, r5
 8005e8c:	eb49 0106 	adc.w	r1, r9, r6
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	461d      	mov	r5, r3
 8005e96:	f04f 0600 	mov.w	r6, #0
 8005e9a:	196b      	adds	r3, r5, r5
 8005e9c:	eb46 0406 	adc.w	r4, r6, r6
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	4623      	mov	r3, r4
 8005ea4:	f7fa fa0c 	bl	80002c0 <__aeabi_uldivmod>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	460c      	mov	r4, r1
 8005eac:	461a      	mov	r2, r3
 8005eae:	4b49      	ldr	r3, [pc, #292]	; (8005fd4 <UART_SetConfig+0x3a0>)
 8005eb0:	fba3 2302 	umull	r2, r3, r3, r2
 8005eb4:	095b      	lsrs	r3, r3, #5
 8005eb6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	461d      	mov	r5, r3
 8005ebe:	f04f 0600 	mov.w	r6, #0
 8005ec2:	46a9      	mov	r9, r5
 8005ec4:	46b2      	mov	sl, r6
 8005ec6:	eb19 0309 	adds.w	r3, r9, r9
 8005eca:	eb4a 040a 	adc.w	r4, sl, sl
 8005ece:	4699      	mov	r9, r3
 8005ed0:	46a2      	mov	sl, r4
 8005ed2:	eb19 0905 	adds.w	r9, r9, r5
 8005ed6:	eb4a 0a06 	adc.w	sl, sl, r6
 8005eda:	f04f 0100 	mov.w	r1, #0
 8005ede:	f04f 0200 	mov.w	r2, #0
 8005ee2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ee6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005eea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005eee:	4689      	mov	r9, r1
 8005ef0:	4692      	mov	sl, r2
 8005ef2:	eb19 0005 	adds.w	r0, r9, r5
 8005ef6:	eb4a 0106 	adc.w	r1, sl, r6
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	461d      	mov	r5, r3
 8005f00:	f04f 0600 	mov.w	r6, #0
 8005f04:	196b      	adds	r3, r5, r5
 8005f06:	eb46 0406 	adc.w	r4, r6, r6
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	4623      	mov	r3, r4
 8005f0e:	f7fa f9d7 	bl	80002c0 <__aeabi_uldivmod>
 8005f12:	4603      	mov	r3, r0
 8005f14:	460c      	mov	r4, r1
 8005f16:	461a      	mov	r2, r3
 8005f18:	4b2e      	ldr	r3, [pc, #184]	; (8005fd4 <UART_SetConfig+0x3a0>)
 8005f1a:	fba3 1302 	umull	r1, r3, r3, r2
 8005f1e:	095b      	lsrs	r3, r3, #5
 8005f20:	2164      	movs	r1, #100	; 0x64
 8005f22:	fb01 f303 	mul.w	r3, r1, r3
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	3332      	adds	r3, #50	; 0x32
 8005f2c:	4a29      	ldr	r2, [pc, #164]	; (8005fd4 <UART_SetConfig+0x3a0>)
 8005f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f32:	095b      	lsrs	r3, r3, #5
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f3a:	4498      	add	r8, r3
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	461d      	mov	r5, r3
 8005f40:	f04f 0600 	mov.w	r6, #0
 8005f44:	46a9      	mov	r9, r5
 8005f46:	46b2      	mov	sl, r6
 8005f48:	eb19 0309 	adds.w	r3, r9, r9
 8005f4c:	eb4a 040a 	adc.w	r4, sl, sl
 8005f50:	4699      	mov	r9, r3
 8005f52:	46a2      	mov	sl, r4
 8005f54:	eb19 0905 	adds.w	r9, r9, r5
 8005f58:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f5c:	f04f 0100 	mov.w	r1, #0
 8005f60:	f04f 0200 	mov.w	r2, #0
 8005f64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f70:	4689      	mov	r9, r1
 8005f72:	4692      	mov	sl, r2
 8005f74:	eb19 0005 	adds.w	r0, r9, r5
 8005f78:	eb4a 0106 	adc.w	r1, sl, r6
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	461d      	mov	r5, r3
 8005f82:	f04f 0600 	mov.w	r6, #0
 8005f86:	196b      	adds	r3, r5, r5
 8005f88:	eb46 0406 	adc.w	r4, r6, r6
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4623      	mov	r3, r4
 8005f90:	f7fa f996 	bl	80002c0 <__aeabi_uldivmod>
 8005f94:	4603      	mov	r3, r0
 8005f96:	460c      	mov	r4, r1
 8005f98:	461a      	mov	r2, r3
 8005f9a:	4b0e      	ldr	r3, [pc, #56]	; (8005fd4 <UART_SetConfig+0x3a0>)
 8005f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa0:	095b      	lsrs	r3, r3, #5
 8005fa2:	2164      	movs	r1, #100	; 0x64
 8005fa4:	fb01 f303 	mul.w	r3, r1, r3
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	3332      	adds	r3, #50	; 0x32
 8005fae:	4a09      	ldr	r2, [pc, #36]	; (8005fd4 <UART_SetConfig+0x3a0>)
 8005fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb4:	095b      	lsrs	r3, r3, #5
 8005fb6:	f003 0207 	and.w	r2, r3, #7
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4442      	add	r2, r8
 8005fc0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005fc2:	e1c0      	b.n	8006346 <UART_SetConfig+0x712>
 8005fc4:	40011000 	.word	0x40011000
 8005fc8:	40011400 	.word	0x40011400
 8005fcc:	40011800 	.word	0x40011800
 8005fd0:	40011c00 	.word	0x40011c00
 8005fd4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4adc      	ldr	r2, [pc, #880]	; (8006350 <UART_SetConfig+0x71c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d00f      	beq.n	8006002 <UART_SetConfig+0x3ce>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4adb      	ldr	r2, [pc, #876]	; (8006354 <UART_SetConfig+0x720>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d00a      	beq.n	8006002 <UART_SetConfig+0x3ce>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4ad9      	ldr	r2, [pc, #868]	; (8006358 <UART_SetConfig+0x724>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d005      	beq.n	8006002 <UART_SetConfig+0x3ce>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4ad8      	ldr	r2, [pc, #864]	; (800635c <UART_SetConfig+0x728>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	f040 80d1 	bne.w	80061a4 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006002:	f7fe f907 	bl	8004214 <HAL_RCC_GetPCLK2Freq>
 8006006:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	469a      	mov	sl, r3
 800600c:	f04f 0b00 	mov.w	fp, #0
 8006010:	46d0      	mov	r8, sl
 8006012:	46d9      	mov	r9, fp
 8006014:	eb18 0308 	adds.w	r3, r8, r8
 8006018:	eb49 0409 	adc.w	r4, r9, r9
 800601c:	4698      	mov	r8, r3
 800601e:	46a1      	mov	r9, r4
 8006020:	eb18 080a 	adds.w	r8, r8, sl
 8006024:	eb49 090b 	adc.w	r9, r9, fp
 8006028:	f04f 0100 	mov.w	r1, #0
 800602c:	f04f 0200 	mov.w	r2, #0
 8006030:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006034:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006038:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800603c:	4688      	mov	r8, r1
 800603e:	4691      	mov	r9, r2
 8006040:	eb1a 0508 	adds.w	r5, sl, r8
 8006044:	eb4b 0609 	adc.w	r6, fp, r9
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4619      	mov	r1, r3
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	f04f 0300 	mov.w	r3, #0
 8006056:	f04f 0400 	mov.w	r4, #0
 800605a:	0094      	lsls	r4, r2, #2
 800605c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006060:	008b      	lsls	r3, r1, #2
 8006062:	461a      	mov	r2, r3
 8006064:	4623      	mov	r3, r4
 8006066:	4628      	mov	r0, r5
 8006068:	4631      	mov	r1, r6
 800606a:	f7fa f929 	bl	80002c0 <__aeabi_uldivmod>
 800606e:	4603      	mov	r3, r0
 8006070:	460c      	mov	r4, r1
 8006072:	461a      	mov	r2, r3
 8006074:	4bba      	ldr	r3, [pc, #744]	; (8006360 <UART_SetConfig+0x72c>)
 8006076:	fba3 2302 	umull	r2, r3, r3, r2
 800607a:	095b      	lsrs	r3, r3, #5
 800607c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	469b      	mov	fp, r3
 8006084:	f04f 0c00 	mov.w	ip, #0
 8006088:	46d9      	mov	r9, fp
 800608a:	46e2      	mov	sl, ip
 800608c:	eb19 0309 	adds.w	r3, r9, r9
 8006090:	eb4a 040a 	adc.w	r4, sl, sl
 8006094:	4699      	mov	r9, r3
 8006096:	46a2      	mov	sl, r4
 8006098:	eb19 090b 	adds.w	r9, r9, fp
 800609c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060a0:	f04f 0100 	mov.w	r1, #0
 80060a4:	f04f 0200 	mov.w	r2, #0
 80060a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060b4:	4689      	mov	r9, r1
 80060b6:	4692      	mov	sl, r2
 80060b8:	eb1b 0509 	adds.w	r5, fp, r9
 80060bc:	eb4c 060a 	adc.w	r6, ip, sl
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	4619      	mov	r1, r3
 80060c6:	f04f 0200 	mov.w	r2, #0
 80060ca:	f04f 0300 	mov.w	r3, #0
 80060ce:	f04f 0400 	mov.w	r4, #0
 80060d2:	0094      	lsls	r4, r2, #2
 80060d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060d8:	008b      	lsls	r3, r1, #2
 80060da:	461a      	mov	r2, r3
 80060dc:	4623      	mov	r3, r4
 80060de:	4628      	mov	r0, r5
 80060e0:	4631      	mov	r1, r6
 80060e2:	f7fa f8ed 	bl	80002c0 <__aeabi_uldivmod>
 80060e6:	4603      	mov	r3, r0
 80060e8:	460c      	mov	r4, r1
 80060ea:	461a      	mov	r2, r3
 80060ec:	4b9c      	ldr	r3, [pc, #624]	; (8006360 <UART_SetConfig+0x72c>)
 80060ee:	fba3 1302 	umull	r1, r3, r3, r2
 80060f2:	095b      	lsrs	r3, r3, #5
 80060f4:	2164      	movs	r1, #100	; 0x64
 80060f6:	fb01 f303 	mul.w	r3, r1, r3
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	3332      	adds	r3, #50	; 0x32
 8006100:	4a97      	ldr	r2, [pc, #604]	; (8006360 <UART_SetConfig+0x72c>)
 8006102:	fba2 2303 	umull	r2, r3, r2, r3
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800610c:	4498      	add	r8, r3
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	469b      	mov	fp, r3
 8006112:	f04f 0c00 	mov.w	ip, #0
 8006116:	46d9      	mov	r9, fp
 8006118:	46e2      	mov	sl, ip
 800611a:	eb19 0309 	adds.w	r3, r9, r9
 800611e:	eb4a 040a 	adc.w	r4, sl, sl
 8006122:	4699      	mov	r9, r3
 8006124:	46a2      	mov	sl, r4
 8006126:	eb19 090b 	adds.w	r9, r9, fp
 800612a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800612e:	f04f 0100 	mov.w	r1, #0
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800613a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800613e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006142:	4689      	mov	r9, r1
 8006144:	4692      	mov	sl, r2
 8006146:	eb1b 0509 	adds.w	r5, fp, r9
 800614a:	eb4c 060a 	adc.w	r6, ip, sl
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	4619      	mov	r1, r3
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	f04f 0300 	mov.w	r3, #0
 800615c:	f04f 0400 	mov.w	r4, #0
 8006160:	0094      	lsls	r4, r2, #2
 8006162:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006166:	008b      	lsls	r3, r1, #2
 8006168:	461a      	mov	r2, r3
 800616a:	4623      	mov	r3, r4
 800616c:	4628      	mov	r0, r5
 800616e:	4631      	mov	r1, r6
 8006170:	f7fa f8a6 	bl	80002c0 <__aeabi_uldivmod>
 8006174:	4603      	mov	r3, r0
 8006176:	460c      	mov	r4, r1
 8006178:	461a      	mov	r2, r3
 800617a:	4b79      	ldr	r3, [pc, #484]	; (8006360 <UART_SetConfig+0x72c>)
 800617c:	fba3 1302 	umull	r1, r3, r3, r2
 8006180:	095b      	lsrs	r3, r3, #5
 8006182:	2164      	movs	r1, #100	; 0x64
 8006184:	fb01 f303 	mul.w	r3, r1, r3
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	3332      	adds	r3, #50	; 0x32
 800618e:	4a74      	ldr	r2, [pc, #464]	; (8006360 <UART_SetConfig+0x72c>)
 8006190:	fba2 2303 	umull	r2, r3, r2, r3
 8006194:	095b      	lsrs	r3, r3, #5
 8006196:	f003 020f 	and.w	r2, r3, #15
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4442      	add	r2, r8
 80061a0:	609a      	str	r2, [r3, #8]
 80061a2:	e0d0      	b.n	8006346 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 80061a4:	f7fe f822 	bl	80041ec <HAL_RCC_GetPCLK1Freq>
 80061a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	469a      	mov	sl, r3
 80061ae:	f04f 0b00 	mov.w	fp, #0
 80061b2:	46d0      	mov	r8, sl
 80061b4:	46d9      	mov	r9, fp
 80061b6:	eb18 0308 	adds.w	r3, r8, r8
 80061ba:	eb49 0409 	adc.w	r4, r9, r9
 80061be:	4698      	mov	r8, r3
 80061c0:	46a1      	mov	r9, r4
 80061c2:	eb18 080a 	adds.w	r8, r8, sl
 80061c6:	eb49 090b 	adc.w	r9, r9, fp
 80061ca:	f04f 0100 	mov.w	r1, #0
 80061ce:	f04f 0200 	mov.w	r2, #0
 80061d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80061d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80061da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80061de:	4688      	mov	r8, r1
 80061e0:	4691      	mov	r9, r2
 80061e2:	eb1a 0508 	adds.w	r5, sl, r8
 80061e6:	eb4b 0609 	adc.w	r6, fp, r9
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	4619      	mov	r1, r3
 80061f0:	f04f 0200 	mov.w	r2, #0
 80061f4:	f04f 0300 	mov.w	r3, #0
 80061f8:	f04f 0400 	mov.w	r4, #0
 80061fc:	0094      	lsls	r4, r2, #2
 80061fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006202:	008b      	lsls	r3, r1, #2
 8006204:	461a      	mov	r2, r3
 8006206:	4623      	mov	r3, r4
 8006208:	4628      	mov	r0, r5
 800620a:	4631      	mov	r1, r6
 800620c:	f7fa f858 	bl	80002c0 <__aeabi_uldivmod>
 8006210:	4603      	mov	r3, r0
 8006212:	460c      	mov	r4, r1
 8006214:	461a      	mov	r2, r3
 8006216:	4b52      	ldr	r3, [pc, #328]	; (8006360 <UART_SetConfig+0x72c>)
 8006218:	fba3 2302 	umull	r2, r3, r3, r2
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	469b      	mov	fp, r3
 8006226:	f04f 0c00 	mov.w	ip, #0
 800622a:	46d9      	mov	r9, fp
 800622c:	46e2      	mov	sl, ip
 800622e:	eb19 0309 	adds.w	r3, r9, r9
 8006232:	eb4a 040a 	adc.w	r4, sl, sl
 8006236:	4699      	mov	r9, r3
 8006238:	46a2      	mov	sl, r4
 800623a:	eb19 090b 	adds.w	r9, r9, fp
 800623e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006242:	f04f 0100 	mov.w	r1, #0
 8006246:	f04f 0200 	mov.w	r2, #0
 800624a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800624e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006252:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006256:	4689      	mov	r9, r1
 8006258:	4692      	mov	sl, r2
 800625a:	eb1b 0509 	adds.w	r5, fp, r9
 800625e:	eb4c 060a 	adc.w	r6, ip, sl
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	4619      	mov	r1, r3
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	f04f 0300 	mov.w	r3, #0
 8006270:	f04f 0400 	mov.w	r4, #0
 8006274:	0094      	lsls	r4, r2, #2
 8006276:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800627a:	008b      	lsls	r3, r1, #2
 800627c:	461a      	mov	r2, r3
 800627e:	4623      	mov	r3, r4
 8006280:	4628      	mov	r0, r5
 8006282:	4631      	mov	r1, r6
 8006284:	f7fa f81c 	bl	80002c0 <__aeabi_uldivmod>
 8006288:	4603      	mov	r3, r0
 800628a:	460c      	mov	r4, r1
 800628c:	461a      	mov	r2, r3
 800628e:	4b34      	ldr	r3, [pc, #208]	; (8006360 <UART_SetConfig+0x72c>)
 8006290:	fba3 1302 	umull	r1, r3, r3, r2
 8006294:	095b      	lsrs	r3, r3, #5
 8006296:	2164      	movs	r1, #100	; 0x64
 8006298:	fb01 f303 	mul.w	r3, r1, r3
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	011b      	lsls	r3, r3, #4
 80062a0:	3332      	adds	r3, #50	; 0x32
 80062a2:	4a2f      	ldr	r2, [pc, #188]	; (8006360 <UART_SetConfig+0x72c>)
 80062a4:	fba2 2303 	umull	r2, r3, r2, r3
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062ae:	4498      	add	r8, r3
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	469b      	mov	fp, r3
 80062b4:	f04f 0c00 	mov.w	ip, #0
 80062b8:	46d9      	mov	r9, fp
 80062ba:	46e2      	mov	sl, ip
 80062bc:	eb19 0309 	adds.w	r3, r9, r9
 80062c0:	eb4a 040a 	adc.w	r4, sl, sl
 80062c4:	4699      	mov	r9, r3
 80062c6:	46a2      	mov	sl, r4
 80062c8:	eb19 090b 	adds.w	r9, r9, fp
 80062cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062d0:	f04f 0100 	mov.w	r1, #0
 80062d4:	f04f 0200 	mov.w	r2, #0
 80062d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062e4:	4689      	mov	r9, r1
 80062e6:	4692      	mov	sl, r2
 80062e8:	eb1b 0509 	adds.w	r5, fp, r9
 80062ec:	eb4c 060a 	adc.w	r6, ip, sl
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	4619      	mov	r1, r3
 80062f6:	f04f 0200 	mov.w	r2, #0
 80062fa:	f04f 0300 	mov.w	r3, #0
 80062fe:	f04f 0400 	mov.w	r4, #0
 8006302:	0094      	lsls	r4, r2, #2
 8006304:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006308:	008b      	lsls	r3, r1, #2
 800630a:	461a      	mov	r2, r3
 800630c:	4623      	mov	r3, r4
 800630e:	4628      	mov	r0, r5
 8006310:	4631      	mov	r1, r6
 8006312:	f7f9 ffd5 	bl	80002c0 <__aeabi_uldivmod>
 8006316:	4603      	mov	r3, r0
 8006318:	460c      	mov	r4, r1
 800631a:	461a      	mov	r2, r3
 800631c:	4b10      	ldr	r3, [pc, #64]	; (8006360 <UART_SetConfig+0x72c>)
 800631e:	fba3 1302 	umull	r1, r3, r3, r2
 8006322:	095b      	lsrs	r3, r3, #5
 8006324:	2164      	movs	r1, #100	; 0x64
 8006326:	fb01 f303 	mul.w	r3, r1, r3
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	011b      	lsls	r3, r3, #4
 800632e:	3332      	adds	r3, #50	; 0x32
 8006330:	4a0b      	ldr	r2, [pc, #44]	; (8006360 <UART_SetConfig+0x72c>)
 8006332:	fba2 2303 	umull	r2, r3, r2, r3
 8006336:	095b      	lsrs	r3, r3, #5
 8006338:	f003 020f 	and.w	r2, r3, #15
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4442      	add	r2, r8
 8006342:	609a      	str	r2, [r3, #8]
}
 8006344:	e7ff      	b.n	8006346 <UART_SetConfig+0x712>
 8006346:	bf00      	nop
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006350:	40011000 	.word	0x40011000
 8006354:	40011400 	.word	0x40011400
 8006358:	40011800 	.word	0x40011800
 800635c:	40011c00 	.word	0x40011c00
 8006360:	51eb851f 	.word	0x51eb851f

08006364 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800637c:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4b2f      	ldr	r3, [pc, #188]	; (8006440 <FSMC_NORSRAM_Init+0xdc>)
 8006382:	4013      	ands	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800638e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006394:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800639a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80063a0:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 80063a6:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80063ac:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80063b2:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80063b8:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80063be:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 80063c4:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 80063ca:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 80063d0:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 80063d6:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	d103      	bne.n	80063ee <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ec:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68f9      	ldr	r1, [r7, #12]
 80063f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006402:	d10a      	bne.n	800641a <FSMC_NORSRAM_Init+0xb6>
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d006      	beq.n	800641a <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006414:	431a      	orrs	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d006      	beq.n	8006430 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642a:	431a      	orrs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	ffc00480 	.word	0xffc00480

08006444 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	1c5a      	adds	r2, r3, #1
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800645e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006466:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006472:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800647a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006482:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	3b01      	subs	r3, #1
 800648a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800648c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	3b02      	subs	r3, #2
 8006494:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006496:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800649c:	4313      	orrs	r3, r2
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6979      	ldr	r1, [r7, #20]
 80064ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064bc:	d10e      	bne.n	80064dc <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064c6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	051b      	lsls	r3, r3, #20
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
	...

080064ec <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
 80064f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006504:	d122      	bne.n	800654c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800650e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	4b15      	ldr	r3, [pc, #84]	; (8006568 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006514:	4013      	ands	r3, r2
 8006516:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006522:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800652a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006532:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006538:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	6979      	ldr	r1, [r7, #20]
 8006546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800654a:	e005      	b.n	8006558 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	cff00000 	.word	0xcff00000

0800656c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800656c:	b084      	sub	sp, #16
 800656e:	b480      	push	{r7}
 8006570:	b085      	sub	sp, #20
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	f107 001c 	add.w	r0, r7, #28
 800657a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800657e:	2300      	movs	r3, #0
 8006580:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006582:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006584:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006586:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800658a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800658e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006592:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006596:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80065a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	b004      	add	sp, #16
 80065c0:	4770      	bx	lr

080065c2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b083      	sub	sp, #12
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80065fe:	b580      	push	{r7, lr}
 8006600:	b082      	sub	sp, #8
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2203      	movs	r2, #3
 800660a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800660c:	2002      	movs	r0, #2
 800660e:	f7fb fdcf 	bl	80021b0 <HAL_Delay>
  
  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0303 	and.w	r3, r3, #3
}
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006656:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800665c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006662:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006672:	f023 030f 	bic.w	r3, r3, #15
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	431a      	orrs	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	b2db      	uxtb	r3, r3
}
 800669a:	4618      	mov	r0, r3
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b085      	sub	sp, #20
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3314      	adds	r3, #20
 80066b4:	461a      	mov	r2, r3
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	4413      	add	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
}  
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80066f2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80066f8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80066fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4313      	orrs	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	431a      	orrs	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006716:	2300      	movs	r3, #0

}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006732:	2310      	movs	r3, #16
 8006734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006736:	2340      	movs	r3, #64	; 0x40
 8006738:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800673a:	2300      	movs	r3, #0
 800673c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800673e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006742:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006744:	f107 0308 	add.w	r3, r7, #8
 8006748:	4619      	mov	r1, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7ff ff74 	bl	8006638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006750:	f241 3288 	movw	r2, #5000	; 0x1388
 8006754:	2110      	movs	r1, #16
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f9fe 	bl	8006b58 <SDMMC_GetCmdResp1>
 800675c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800675e:	69fb      	ldr	r3, [r7, #28]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3720      	adds	r7, #32
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b088      	sub	sp, #32
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006776:	2311      	movs	r3, #17
 8006778:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800677a:	2340      	movs	r3, #64	; 0x40
 800677c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800677e:	2300      	movs	r3, #0
 8006780:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006786:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006788:	f107 0308 	add.w	r3, r7, #8
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff ff52 	bl	8006638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006794:	f241 3288 	movw	r2, #5000	; 0x1388
 8006798:	2111      	movs	r1, #17
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f9dc 	bl	8006b58 <SDMMC_GetCmdResp1>
 80067a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067a2:	69fb      	ldr	r3, [r7, #28]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3720      	adds	r7, #32
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80067ba:	2312      	movs	r3, #18
 80067bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067be:	2340      	movs	r3, #64	; 0x40
 80067c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067c2:	2300      	movs	r3, #0
 80067c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067cc:	f107 0308 	add.w	r3, r7, #8
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff ff30 	bl	8006638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80067d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067dc:	2112      	movs	r1, #18
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f9ba 	bl	8006b58 <SDMMC_GetCmdResp1>
 80067e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067e6:	69fb      	ldr	r3, [r7, #28]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3720      	adds	r7, #32
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80067fe:	2318      	movs	r3, #24
 8006800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006802:	2340      	movs	r3, #64	; 0x40
 8006804:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006806:	2300      	movs	r3, #0
 8006808:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800680a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800680e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006810:	f107 0308 	add.w	r3, r7, #8
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff ff0e 	bl	8006638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800681c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006820:	2118      	movs	r1, #24
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f998 	bl	8006b58 <SDMMC_GetCmdResp1>
 8006828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800682a:	69fb      	ldr	r3, [r7, #28]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3720      	adds	r7, #32
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b088      	sub	sp, #32
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006842:	2319      	movs	r3, #25
 8006844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006846:	2340      	movs	r3, #64	; 0x40
 8006848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800684a:	2300      	movs	r3, #0
 800684c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800684e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006852:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006854:	f107 0308 	add.w	r3, r7, #8
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7ff feec 	bl	8006638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006860:	f241 3288 	movw	r2, #5000	; 0x1388
 8006864:	2119      	movs	r1, #25
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f976 	bl	8006b58 <SDMMC_GetCmdResp1>
 800686c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800686e:	69fb      	ldr	r3, [r7, #28]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3720      	adds	r7, #32
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b088      	sub	sp, #32
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006884:	230c      	movs	r3, #12
 8006886:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006888:	2340      	movs	r3, #64	; 0x40
 800688a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800688c:	2300      	movs	r3, #0
 800688e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006894:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006896:	f107 0308 	add.w	r3, r7, #8
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff fecb 	bl	8006638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80068a2:	4a05      	ldr	r2, [pc, #20]	; (80068b8 <SDMMC_CmdStopTransfer+0x40>)
 80068a4:	210c      	movs	r1, #12
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f956 	bl	8006b58 <SDMMC_GetCmdResp1>
 80068ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068ae:	69fb      	ldr	r3, [r7, #28]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3720      	adds	r7, #32
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	05f5e100 	.word	0x05f5e100

080068bc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08a      	sub	sp, #40	; 0x28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80068cc:	2307      	movs	r3, #7
 80068ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80068d0:	2340      	movs	r3, #64	; 0x40
 80068d2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068d4:	2300      	movs	r3, #0
 80068d6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068dc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068de:	f107 0310 	add.w	r3, r7, #16
 80068e2:	4619      	mov	r1, r3
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f7ff fea7 	bl	8006638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80068ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ee:	2107      	movs	r1, #7
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 f931 	bl	8006b58 <SDMMC_GetCmdResp1>
 80068f6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3728      	adds	r7, #40	; 0x28
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b088      	sub	sp, #32
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800690e:	2300      	movs	r3, #0
 8006910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006912:	2300      	movs	r3, #0
 8006914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006916:	2300      	movs	r3, #0
 8006918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800691a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800691e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006920:	f107 0308 	add.w	r3, r7, #8
 8006924:	4619      	mov	r1, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7ff fe86 	bl	8006638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f8eb 	bl	8006b08 <SDMMC_GetCmdError>
 8006932:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006934:	69fb      	ldr	r3, [r7, #28]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3720      	adds	r7, #32
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b088      	sub	sp, #32
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006946:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800694a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800694c:	2308      	movs	r3, #8
 800694e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006950:	2340      	movs	r3, #64	; 0x40
 8006952:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006954:	2300      	movs	r3, #0
 8006956:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800695c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800695e:	f107 0308 	add.w	r3, r7, #8
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7ff fe67 	bl	8006638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fad4 	bl	8006f18 <SDMMC_GetCmdResp7>
 8006970:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006972:	69fb      	ldr	r3, [r7, #28]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3720      	adds	r7, #32
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800698a:	2337      	movs	r3, #55	; 0x37
 800698c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800698e:	2340      	movs	r3, #64	; 0x40
 8006990:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006992:	2300      	movs	r3, #0
 8006994:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800699a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800699c:	f107 0308 	add.w	r3, r7, #8
 80069a0:	4619      	mov	r1, r3
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7ff fe48 	bl	8006638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80069a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ac:	2137      	movs	r1, #55	; 0x37
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f8d2 	bl	8006b58 <SDMMC_GetCmdResp1>
 80069b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069b6:	69fb      	ldr	r3, [r7, #28]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3720      	adds	r7, #32
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b088      	sub	sp, #32
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80069d6:	2329      	movs	r3, #41	; 0x29
 80069d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80069da:	2340      	movs	r3, #64	; 0x40
 80069dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069de:	2300      	movs	r3, #0
 80069e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069e8:	f107 0308 	add.w	r3, r7, #8
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7ff fe22 	bl	8006638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f9e1 	bl	8006dbc <SDMMC_GetCmdResp3>
 80069fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069fc:	69fb      	ldr	r3, [r7, #28]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3720      	adds	r7, #32
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b088      	sub	sp, #32
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006a12:	2302      	movs	r3, #2
 8006a14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006a16:	23c0      	movs	r3, #192	; 0xc0
 8006a18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a24:	f107 0308 	add.w	r3, r7, #8
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7ff fe04 	bl	8006638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f97d 	bl	8006d30 <SDMMC_GetCmdResp2>
 8006a36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a38:	69fb      	ldr	r3, [r7, #28]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3720      	adds	r7, #32
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b088      	sub	sp, #32
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006a50:	2309      	movs	r3, #9
 8006a52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006a54:	23c0      	movs	r3, #192	; 0xc0
 8006a56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a62:	f107 0308 	add.w	r3, r7, #8
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff fde5 	bl	8006638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f95e 	bl	8006d30 <SDMMC_GetCmdResp2>
 8006a74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a76:	69fb      	ldr	r3, [r7, #28]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3720      	adds	r7, #32
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a92:	2340      	movs	r3, #64	; 0x40
 8006a94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a96:	2300      	movs	r3, #0
 8006a98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006aa0:	f107 0308 	add.w	r3, r7, #8
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7ff fdc6 	bl	8006638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	2103      	movs	r1, #3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f9bd 	bl	8006e30 <SDMMC_GetCmdResp6>
 8006ab6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ab8:	69fb      	ldr	r3, [r7, #28]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3720      	adds	r7, #32
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b088      	sub	sp, #32
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006ad0:	230d      	movs	r3, #13
 8006ad2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ad4:	2340      	movs	r3, #64	; 0x40
 8006ad6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ae0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ae2:	f107 0308 	add.w	r3, r7, #8
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff fda5 	bl	8006638 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006af2:	210d      	movs	r1, #13
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f82f 	bl	8006b58 <SDMMC_GetCmdResp1>
 8006afa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006afc:	69fb      	ldr	r3, [r7, #28]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3720      	adds	r7, #32
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006b08:	b490      	push	{r4, r7}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006b10:	4b0f      	ldr	r3, [pc, #60]	; (8006b50 <SDMMC_GetCmdError+0x48>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a0f      	ldr	r2, [pc, #60]	; (8006b54 <SDMMC_GetCmdError+0x4c>)
 8006b16:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1a:	0a5b      	lsrs	r3, r3, #9
 8006b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b20:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006b24:	4623      	mov	r3, r4
 8006b26:	1e5c      	subs	r4, r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d102      	bne.n	8006b32 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006b2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b30:	e009      	b.n	8006b46 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0f2      	beq.n	8006b24 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	22c5      	movs	r2, #197	; 0xc5
 8006b42:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bc90      	pop	{r4, r7}
 8006b4e:	4770      	bx	lr
 8006b50:	2000001c 	.word	0x2000001c
 8006b54:	10624dd3 	.word	0x10624dd3

08006b58 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006b58:	b590      	push	{r4, r7, lr}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	460b      	mov	r3, r1
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006b66:	4b6f      	ldr	r3, [pc, #444]	; (8006d24 <SDMMC_GetCmdResp1+0x1cc>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a6f      	ldr	r2, [pc, #444]	; (8006d28 <SDMMC_GetCmdResp1+0x1d0>)
 8006b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b70:	0a5b      	lsrs	r3, r3, #9
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006b78:	4623      	mov	r3, r4
 8006b7a:	1e5c      	subs	r4, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d102      	bne.n	8006b86 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006b80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b84:	e0c9      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0f0      	beq.n	8006b78 <SDMMC_GetCmdResp1+0x20>
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1eb      	bne.n	8006b78 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d004      	beq.n	8006bb6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2204      	movs	r2, #4
 8006bb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006bb2:	2304      	movs	r3, #4
 8006bb4:	e0b1      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d004      	beq.n	8006bcc <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e0a6      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	22c5      	movs	r2, #197	; 0xc5
 8006bd0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f7ff fd5a 	bl	800668c <SDIO_GetCommandResponse>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	461a      	mov	r2, r3
 8006bdc:	7afb      	ldrb	r3, [r7, #11]
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d001      	beq.n	8006be6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e099      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006be6:	2100      	movs	r1, #0
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f7ff fd5c 	bl	80066a6 <SDIO_GetResponse>
 8006bee:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	4b4e      	ldr	r3, [pc, #312]	; (8006d2c <SDMMC_GetCmdResp1+0x1d4>)
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	e08d      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	da02      	bge.n	8006c0a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006c04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c08:	e087      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d001      	beq.n	8006c18 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006c14:	2340      	movs	r3, #64	; 0x40
 8006c16:	e080      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006c22:	2380      	movs	r3, #128	; 0x80
 8006c24:	e079      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d002      	beq.n	8006c36 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c34:	e071      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c44:	e069      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d002      	beq.n	8006c56 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c54:	e061      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006c60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c64:	e059      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c74:	e051      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d002      	beq.n	8006c86 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c84:	e049      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006c90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c94:	e041      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006ca0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ca4:	e039      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006cb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cb4:	e031      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006cc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006cc4:	e029      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d002      	beq.n	8006cd6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006cd0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006cd4:	e021      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006ce0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006ce4:	e019      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d002      	beq.n	8006cf6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006cf0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006cf4:	e011      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006d00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006d04:	e009      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	f003 0308 	and.w	r3, r3, #8
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006d10:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006d14:	e001      	b.n	8006d1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006d16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	371c      	adds	r7, #28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd90      	pop	{r4, r7, pc}
 8006d22:	bf00      	nop
 8006d24:	2000001c 	.word	0x2000001c
 8006d28:	10624dd3 	.word	0x10624dd3
 8006d2c:	fdffe008 	.word	0xfdffe008

08006d30 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006d30:	b490      	push	{r4, r7}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d38:	4b1e      	ldr	r3, [pc, #120]	; (8006db4 <SDMMC_GetCmdResp2+0x84>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a1e      	ldr	r2, [pc, #120]	; (8006db8 <SDMMC_GetCmdResp2+0x88>)
 8006d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d42:	0a5b      	lsrs	r3, r3, #9
 8006d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d48:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006d4c:	4623      	mov	r3, r4
 8006d4e:	1e5c      	subs	r4, r3, #1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d102      	bne.n	8006d5a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d58:	e026      	b.n	8006da8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d5e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0f0      	beq.n	8006d4c <SDMMC_GetCmdResp2+0x1c>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1eb      	bne.n	8006d4c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d004      	beq.n	8006d8a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2204      	movs	r2, #4
 8006d84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d86:	2304      	movs	r3, #4
 8006d88:	e00e      	b.n	8006da8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d004      	beq.n	8006da0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e003      	b.n	8006da8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	22c5      	movs	r2, #197	; 0xc5
 8006da4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bc90      	pop	{r4, r7}
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	2000001c 	.word	0x2000001c
 8006db8:	10624dd3 	.word	0x10624dd3

08006dbc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006dbc:	b490      	push	{r4, r7}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006dc4:	4b18      	ldr	r3, [pc, #96]	; (8006e28 <SDMMC_GetCmdResp3+0x6c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a18      	ldr	r2, [pc, #96]	; (8006e2c <SDMMC_GetCmdResp3+0x70>)
 8006dca:	fba2 2303 	umull	r2, r3, r2, r3
 8006dce:	0a5b      	lsrs	r3, r3, #9
 8006dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006dd8:	4623      	mov	r3, r4
 8006dda:	1e5c      	subs	r4, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d102      	bne.n	8006de6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006de0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006de4:	e01b      	b.n	8006e1e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dea:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0f0      	beq.n	8006dd8 <SDMMC_GetCmdResp3+0x1c>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1eb      	bne.n	8006dd8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e04:	f003 0304 	and.w	r3, r3, #4
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d004      	beq.n	8006e16 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2204      	movs	r2, #4
 8006e10:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e12:	2304      	movs	r3, #4
 8006e14:	e003      	b.n	8006e1e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	22c5      	movs	r2, #197	; 0xc5
 8006e1a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bc90      	pop	{r4, r7}
 8006e26:	4770      	bx	lr
 8006e28:	2000001c 	.word	0x2000001c
 8006e2c:	10624dd3 	.word	0x10624dd3

08006e30 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006e30:	b590      	push	{r4, r7, lr}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e3e:	4b34      	ldr	r3, [pc, #208]	; (8006f10 <SDMMC_GetCmdResp6+0xe0>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a34      	ldr	r2, [pc, #208]	; (8006f14 <SDMMC_GetCmdResp6+0xe4>)
 8006e44:	fba2 2303 	umull	r2, r3, r2, r3
 8006e48:	0a5b      	lsrs	r3, r3, #9
 8006e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e4e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006e52:	4623      	mov	r3, r4
 8006e54:	1e5c      	subs	r4, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d102      	bne.n	8006e60 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e5e:	e052      	b.n	8006f06 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e64:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0f0      	beq.n	8006e52 <SDMMC_GetCmdResp6+0x22>
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1eb      	bne.n	8006e52 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e7e:	f003 0304 	and.w	r3, r3, #4
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d004      	beq.n	8006e90 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2204      	movs	r2, #4
 8006e8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e8c:	2304      	movs	r3, #4
 8006e8e:	e03a      	b.n	8006f06 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d004      	beq.n	8006ea6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e02f      	b.n	8006f06 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f7ff fbf0 	bl	800668c <SDIO_GetCommandResponse>
 8006eac:	4603      	mov	r3, r0
 8006eae:	461a      	mov	r2, r3
 8006eb0:	7afb      	ldrb	r3, [r7, #11]
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d001      	beq.n	8006eba <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e025      	b.n	8006f06 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	22c5      	movs	r2, #197	; 0xc5
 8006ebe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f7ff fbef 	bl	80066a6 <SDIO_GetResponse>
 8006ec8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d106      	bne.n	8006ee2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	0c1b      	lsrs	r3, r3, #16
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	e011      	b.n	8006f06 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d002      	beq.n	8006ef2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006eec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ef0:	e009      	b.n	8006f06 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f00:	e001      	b.n	8006f06 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006f02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd90      	pop	{r4, r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	2000001c 	.word	0x2000001c
 8006f14:	10624dd3 	.word	0x10624dd3

08006f18 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006f18:	b490      	push	{r4, r7}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f20:	4b21      	ldr	r3, [pc, #132]	; (8006fa8 <SDMMC_GetCmdResp7+0x90>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a21      	ldr	r2, [pc, #132]	; (8006fac <SDMMC_GetCmdResp7+0x94>)
 8006f26:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2a:	0a5b      	lsrs	r3, r3, #9
 8006f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f30:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006f34:	4623      	mov	r3, r4
 8006f36:	1e5c      	subs	r4, r3, #1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d102      	bne.n	8006f42 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f40:	e02c      	b.n	8006f9c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f46:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0f0      	beq.n	8006f34 <SDMMC_GetCmdResp7+0x1c>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1eb      	bne.n	8006f34 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d004      	beq.n	8006f72 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2204      	movs	r2, #4
 8006f6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f6e:	2304      	movs	r3, #4
 8006f70:	e014      	b.n	8006f9c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d004      	beq.n	8006f88 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e009      	b.n	8006f9c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2240      	movs	r2, #64	; 0x40
 8006f98:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006f9a:	2300      	movs	r3, #0
  
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bc90      	pop	{r4, r7}
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	2000001c 	.word	0x2000001c
 8006fac:	10624dd3 	.word	0x10624dd3

08006fb0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006fb4:	4904      	ldr	r1, [pc, #16]	; (8006fc8 <MX_FATFS_Init+0x18>)
 8006fb6:	4805      	ldr	r0, [pc, #20]	; (8006fcc <MX_FATFS_Init+0x1c>)
 8006fb8:	f003 f8c4 	bl	800a144 <FATFS_LinkDriver>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	4b03      	ldr	r3, [pc, #12]	; (8006fd0 <MX_FATFS_Init+0x20>)
 8006fc2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006fc4:	bf00      	nop
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	2000573c 	.word	0x2000573c
 8006fcc:	0800b0c0 	.word	0x0800b0c0
 8006fd0:	20005738 	.word	0x20005738

08006fd4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006fd8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006fee:	f000 f86b 	bl	80070c8 <BSP_SD_IsDetected>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d001      	beq.n	8006ffc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e005      	b.n	8007008 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006ffc:	4804      	ldr	r0, [pc, #16]	; (8007010 <BSP_SD_Init+0x2c>)
 8006ffe:	f7fd fdeb 	bl	8004bd8 <HAL_SD_Init>
 8007002:	4603      	mov	r3, r0
 8007004:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8007006:	79fb      	ldrb	r3, [r7, #7]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	20003dec 	.word	0x20003dec

08007014 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b088      	sub	sp, #32
 8007018:	af02      	add	r7, sp, #8
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	68f9      	ldr	r1, [r7, #12]
 8007030:	4806      	ldr	r0, [pc, #24]	; (800704c <BSP_SD_ReadBlocks+0x38>)
 8007032:	f7fd fe61 	bl	8004cf8 <HAL_SD_ReadBlocks>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8007040:	7dfb      	ldrb	r3, [r7, #23]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	20003dec 	.word	0x20003dec

08007050 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b088      	sub	sp, #32
 8007054:	af02      	add	r7, sp, #8
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
 800705c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	68f9      	ldr	r1, [r7, #12]
 800706c:	4806      	ldr	r0, [pc, #24]	; (8007088 <BSP_SD_WriteBlocks+0x38>)
 800706e:	f7fe f83b 	bl	80050e8 <HAL_SD_WriteBlocks>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800707c:	7dfb      	ldrb	r3, [r7, #23]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3718      	adds	r7, #24
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20003dec 	.word	0x20003dec

0800708c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007090:	4805      	ldr	r0, [pc, #20]	; (80070a8 <BSP_SD_GetCardState+0x1c>)
 8007092:	f7fe fb99 	bl	80057c8 <HAL_SD_GetCardState>
 8007096:	4603      	mov	r3, r0
 8007098:	2b04      	cmp	r3, #4
 800709a:	bf14      	ite	ne
 800709c:	2301      	movne	r3, #1
 800709e:	2300      	moveq	r3, #0
 80070a0:	b2db      	uxtb	r3, r3
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20003dec 	.word	0x20003dec

080070ac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	4803      	ldr	r0, [pc, #12]	; (80070c4 <BSP_SD_GetCardInfo+0x18>)
 80070b8:	f7fe fb5a 	bl	8005770 <HAL_SD_GetCardInfo>
}
 80070bc:	bf00      	nop
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	20003dec 	.word	0x20003dec

080070c8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80070ce:	2301      	movs	r3, #1
 80070d0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80070d2:	f000 f80b 	bl	80070ec <BSP_PlatformIsDetected>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80070dc:	2300      	movs	r3, #0
 80070de:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80070e0:	79fb      	ldrb	r3, [r7, #7]
 80070e2:	b2db      	uxtb	r3, r3
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80070f2:	2301      	movs	r3, #1
 80070f4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80070f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80070fa:	4806      	ldr	r0, [pc, #24]	; (8007114 <BSP_PlatformIsDetected+0x28>)
 80070fc:	f7fc fdde 	bl	8003cbc <HAL_GPIO_ReadPin>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007106:	2300      	movs	r3, #0
 8007108:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800710a:	79fb      	ldrb	r3, [r7, #7]
}  
 800710c:	4618      	mov	r0, r3
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	40021400 	.word	0x40021400

08007118 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007122:	4b0b      	ldr	r3, [pc, #44]	; (8007150 <SD_CheckStatus+0x38>)
 8007124:	2201      	movs	r2, #1
 8007126:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007128:	f7ff ffb0 	bl	800708c <BSP_SD_GetCardState>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d107      	bne.n	8007142 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007132:	4b07      	ldr	r3, [pc, #28]	; (8007150 <SD_CheckStatus+0x38>)
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	f023 0301 	bic.w	r3, r3, #1
 800713c:	b2da      	uxtb	r2, r3
 800713e:	4b04      	ldr	r3, [pc, #16]	; (8007150 <SD_CheckStatus+0x38>)
 8007140:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007142:	4b03      	ldr	r3, [pc, #12]	; (8007150 <SD_CheckStatus+0x38>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	b2db      	uxtb	r3, r3
}
 8007148:	4618      	mov	r0, r3
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	20000025 	.word	0x20000025

08007154 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	4603      	mov	r3, r0
 800715c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800715e:	4b0b      	ldr	r3, [pc, #44]	; (800718c <SD_initialize+0x38>)
 8007160:	2201      	movs	r2, #1
 8007162:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007164:	f7ff ff3e 	bl	8006fe4 <BSP_SD_Init>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d107      	bne.n	800717e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800716e:	79fb      	ldrb	r3, [r7, #7]
 8007170:	4618      	mov	r0, r3
 8007172:	f7ff ffd1 	bl	8007118 <SD_CheckStatus>
 8007176:	4603      	mov	r3, r0
 8007178:	461a      	mov	r2, r3
 800717a:	4b04      	ldr	r3, [pc, #16]	; (800718c <SD_initialize+0x38>)
 800717c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800717e:	4b03      	ldr	r3, [pc, #12]	; (800718c <SD_initialize+0x38>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	b2db      	uxtb	r3, r3
}
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20000025 	.word	0x20000025

08007190 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	4603      	mov	r3, r0
 8007198:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800719a:	79fb      	ldrb	r3, [r7, #7]
 800719c:	4618      	mov	r0, r3
 800719e:	f7ff ffbb 	bl	8007118 <SD_CheckStatus>
 80071a2:	4603      	mov	r3, r0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60b9      	str	r1, [r7, #8]
 80071b4:	607a      	str	r2, [r7, #4]
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	4603      	mov	r3, r0
 80071ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80071c0:	f04f 33ff 	mov.w	r3, #4294967295
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	68b8      	ldr	r0, [r7, #8]
 80071ca:	f7ff ff23 	bl	8007014 <BSP_SD_ReadBlocks>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d107      	bne.n	80071e4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80071d4:	bf00      	nop
 80071d6:	f7ff ff59 	bl	800708c <BSP_SD_GetCardState>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1fa      	bne.n	80071d6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80071e0:	2300      	movs	r3, #0
 80071e2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80071e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b086      	sub	sp, #24
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	603b      	str	r3, [r7, #0]
 80071fa:	4603      	mov	r3, r0
 80071fc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8007202:	f04f 33ff 	mov.w	r3, #4294967295
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	6879      	ldr	r1, [r7, #4]
 800720a:	68b8      	ldr	r0, [r7, #8]
 800720c:	f7ff ff20 	bl	8007050 <BSP_SD_WriteBlocks>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d107      	bne.n	8007226 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8007216:	bf00      	nop
 8007218:	f7ff ff38 	bl	800708c <BSP_SD_GetCardState>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1fa      	bne.n	8007218 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007226:	7dfb      	ldrb	r3, [r7, #23]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3718      	adds	r7, #24
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b08c      	sub	sp, #48	; 0x30
 8007234:	af00      	add	r7, sp, #0
 8007236:	4603      	mov	r3, r0
 8007238:	603a      	str	r2, [r7, #0]
 800723a:	71fb      	strb	r3, [r7, #7]
 800723c:	460b      	mov	r3, r1
 800723e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007246:	4b25      	ldr	r3, [pc, #148]	; (80072dc <SD_ioctl+0xac>)
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	b2db      	uxtb	r3, r3
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b00      	cmp	r3, #0
 8007252:	d001      	beq.n	8007258 <SD_ioctl+0x28>
 8007254:	2303      	movs	r3, #3
 8007256:	e03c      	b.n	80072d2 <SD_ioctl+0xa2>

  switch (cmd)
 8007258:	79bb      	ldrb	r3, [r7, #6]
 800725a:	2b03      	cmp	r3, #3
 800725c:	d834      	bhi.n	80072c8 <SD_ioctl+0x98>
 800725e:	a201      	add	r2, pc, #4	; (adr r2, 8007264 <SD_ioctl+0x34>)
 8007260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007264:	08007275 	.word	0x08007275
 8007268:	0800727d 	.word	0x0800727d
 800726c:	08007295 	.word	0x08007295
 8007270:	080072af 	.word	0x080072af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800727a:	e028      	b.n	80072ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800727c:	f107 030c 	add.w	r3, r7, #12
 8007280:	4618      	mov	r0, r3
 8007282:	f7ff ff13 	bl	80070ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007292:	e01c      	b.n	80072ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007294:	f107 030c 	add.w	r3, r7, #12
 8007298:	4618      	mov	r0, r3
 800729a:	f7ff ff07 	bl	80070ac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800729e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80072ac:	e00f      	b.n	80072ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80072ae:	f107 030c 	add.w	r3, r7, #12
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff fefa 	bl	80070ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80072b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ba:	0a5a      	lsrs	r2, r3, #9
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80072c6:	e002      	b.n	80072ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80072c8:	2304      	movs	r3, #4
 80072ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80072ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3730      	adds	r7, #48	; 0x30
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20000025 	.word	0x20000025

080072e0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	4603      	mov	r3, r0
 80072e8:	6039      	str	r1, [r7, #0]
 80072ea:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80072ec:	88fb      	ldrh	r3, [r7, #6]
 80072ee:	2b7f      	cmp	r3, #127	; 0x7f
 80072f0:	d802      	bhi.n	80072f8 <ff_convert+0x18>
		c = chr;
 80072f2:	88fb      	ldrh	r3, [r7, #6]
 80072f4:	81fb      	strh	r3, [r7, #14]
 80072f6:	e025      	b.n	8007344 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00b      	beq.n	8007316 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80072fe:	88fb      	ldrh	r3, [r7, #6]
 8007300:	2bff      	cmp	r3, #255	; 0xff
 8007302:	d805      	bhi.n	8007310 <ff_convert+0x30>
 8007304:	88fb      	ldrh	r3, [r7, #6]
 8007306:	3b80      	subs	r3, #128	; 0x80
 8007308:	4a12      	ldr	r2, [pc, #72]	; (8007354 <ff_convert+0x74>)
 800730a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800730e:	e000      	b.n	8007312 <ff_convert+0x32>
 8007310:	2300      	movs	r3, #0
 8007312:	81fb      	strh	r3, [r7, #14]
 8007314:	e016      	b.n	8007344 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007316:	2300      	movs	r3, #0
 8007318:	81fb      	strh	r3, [r7, #14]
 800731a:	e009      	b.n	8007330 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800731c:	89fb      	ldrh	r3, [r7, #14]
 800731e:	4a0d      	ldr	r2, [pc, #52]	; (8007354 <ff_convert+0x74>)
 8007320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007324:	88fa      	ldrh	r2, [r7, #6]
 8007326:	429a      	cmp	r2, r3
 8007328:	d006      	beq.n	8007338 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800732a:	89fb      	ldrh	r3, [r7, #14]
 800732c:	3301      	adds	r3, #1
 800732e:	81fb      	strh	r3, [r7, #14]
 8007330:	89fb      	ldrh	r3, [r7, #14]
 8007332:	2b7f      	cmp	r3, #127	; 0x7f
 8007334:	d9f2      	bls.n	800731c <ff_convert+0x3c>
 8007336:	e000      	b.n	800733a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007338:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800733a:	89fb      	ldrh	r3, [r7, #14]
 800733c:	3380      	adds	r3, #128	; 0x80
 800733e:	b29b      	uxth	r3, r3
 8007340:	b2db      	uxtb	r3, r3
 8007342:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007344:	89fb      	ldrh	r3, [r7, #14]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	0800b0d4 	.word	0x0800b0d4

08007358 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	4603      	mov	r3, r0
 8007360:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007362:	88fb      	ldrh	r3, [r7, #6]
 8007364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007368:	d201      	bcs.n	800736e <ff_wtoupper+0x16>
 800736a:	4b3e      	ldr	r3, [pc, #248]	; (8007464 <ff_wtoupper+0x10c>)
 800736c:	e000      	b.n	8007370 <ff_wtoupper+0x18>
 800736e:	4b3e      	ldr	r3, [pc, #248]	; (8007468 <ff_wtoupper+0x110>)
 8007370:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	1c9a      	adds	r2, r3, #2
 8007376:	617a      	str	r2, [r7, #20]
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800737c:	8a7b      	ldrh	r3, [r7, #18]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d068      	beq.n	8007454 <ff_wtoupper+0xfc>
 8007382:	88fa      	ldrh	r2, [r7, #6]
 8007384:	8a7b      	ldrh	r3, [r7, #18]
 8007386:	429a      	cmp	r2, r3
 8007388:	d364      	bcc.n	8007454 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	1c9a      	adds	r2, r3, #2
 800738e:	617a      	str	r2, [r7, #20]
 8007390:	881b      	ldrh	r3, [r3, #0]
 8007392:	823b      	strh	r3, [r7, #16]
 8007394:	8a3b      	ldrh	r3, [r7, #16]
 8007396:	0a1b      	lsrs	r3, r3, #8
 8007398:	81fb      	strh	r3, [r7, #14]
 800739a:	8a3b      	ldrh	r3, [r7, #16]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80073a0:	88fa      	ldrh	r2, [r7, #6]
 80073a2:	8a79      	ldrh	r1, [r7, #18]
 80073a4:	8a3b      	ldrh	r3, [r7, #16]
 80073a6:	440b      	add	r3, r1
 80073a8:	429a      	cmp	r2, r3
 80073aa:	da49      	bge.n	8007440 <ff_wtoupper+0xe8>
			switch (cmd) {
 80073ac:	89fb      	ldrh	r3, [r7, #14]
 80073ae:	2b08      	cmp	r3, #8
 80073b0:	d84f      	bhi.n	8007452 <ff_wtoupper+0xfa>
 80073b2:	a201      	add	r2, pc, #4	; (adr r2, 80073b8 <ff_wtoupper+0x60>)
 80073b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b8:	080073dd 	.word	0x080073dd
 80073bc:	080073ef 	.word	0x080073ef
 80073c0:	08007405 	.word	0x08007405
 80073c4:	0800740d 	.word	0x0800740d
 80073c8:	08007415 	.word	0x08007415
 80073cc:	0800741d 	.word	0x0800741d
 80073d0:	08007425 	.word	0x08007425
 80073d4:	0800742d 	.word	0x0800742d
 80073d8:	08007435 	.word	0x08007435
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80073dc:	88fa      	ldrh	r2, [r7, #6]
 80073de:	8a7b      	ldrh	r3, [r7, #18]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	4413      	add	r3, r2
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	80fb      	strh	r3, [r7, #6]
 80073ec:	e027      	b.n	800743e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80073ee:	88fa      	ldrh	r2, [r7, #6]
 80073f0:	8a7b      	ldrh	r3, [r7, #18]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	88fa      	ldrh	r2, [r7, #6]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	80fb      	strh	r3, [r7, #6]
 8007402:	e01c      	b.n	800743e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007404:	88fb      	ldrh	r3, [r7, #6]
 8007406:	3b10      	subs	r3, #16
 8007408:	80fb      	strh	r3, [r7, #6]
 800740a:	e018      	b.n	800743e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800740c:	88fb      	ldrh	r3, [r7, #6]
 800740e:	3b20      	subs	r3, #32
 8007410:	80fb      	strh	r3, [r7, #6]
 8007412:	e014      	b.n	800743e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007414:	88fb      	ldrh	r3, [r7, #6]
 8007416:	3b30      	subs	r3, #48	; 0x30
 8007418:	80fb      	strh	r3, [r7, #6]
 800741a:	e010      	b.n	800743e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800741c:	88fb      	ldrh	r3, [r7, #6]
 800741e:	3b1a      	subs	r3, #26
 8007420:	80fb      	strh	r3, [r7, #6]
 8007422:	e00c      	b.n	800743e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007424:	88fb      	ldrh	r3, [r7, #6]
 8007426:	3308      	adds	r3, #8
 8007428:	80fb      	strh	r3, [r7, #6]
 800742a:	e008      	b.n	800743e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800742c:	88fb      	ldrh	r3, [r7, #6]
 800742e:	3b50      	subs	r3, #80	; 0x50
 8007430:	80fb      	strh	r3, [r7, #6]
 8007432:	e004      	b.n	800743e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007434:	88fb      	ldrh	r3, [r7, #6]
 8007436:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800743a:	80fb      	strh	r3, [r7, #6]
 800743c:	bf00      	nop
			}
			break;
 800743e:	e008      	b.n	8007452 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007440:	89fb      	ldrh	r3, [r7, #14]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d195      	bne.n	8007372 <ff_wtoupper+0x1a>
 8007446:	8a3b      	ldrh	r3, [r7, #16]
 8007448:	005b      	lsls	r3, r3, #1
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	4413      	add	r3, r2
 800744e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007450:	e78f      	b.n	8007372 <ff_wtoupper+0x1a>
			break;
 8007452:	bf00      	nop
	}

	return chr;
 8007454:	88fb      	ldrh	r3, [r7, #6]
}
 8007456:	4618      	mov	r0, r3
 8007458:	371c      	adds	r7, #28
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	0800b1d4 	.word	0x0800b1d4
 8007468:	0800b3c8 	.word	0x0800b3c8

0800746c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	4603      	mov	r3, r0
 8007474:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007476:	79fb      	ldrb	r3, [r7, #7]
 8007478:	4a08      	ldr	r2, [pc, #32]	; (800749c <disk_status+0x30>)
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	79fa      	ldrb	r2, [r7, #7]
 8007484:	4905      	ldr	r1, [pc, #20]	; (800749c <disk_status+0x30>)
 8007486:	440a      	add	r2, r1
 8007488:	7a12      	ldrb	r2, [r2, #8]
 800748a:	4610      	mov	r0, r2
 800748c:	4798      	blx	r3
 800748e:	4603      	mov	r3, r0
 8007490:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007492:	7bfb      	ldrb	r3, [r7, #15]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	20000330 	.word	0x20000330

080074a0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	4603      	mov	r3, r0
 80074a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80074ae:	79fb      	ldrb	r3, [r7, #7]
 80074b0:	4a0d      	ldr	r2, [pc, #52]	; (80074e8 <disk_initialize+0x48>)
 80074b2:	5cd3      	ldrb	r3, [r2, r3]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d111      	bne.n	80074dc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80074b8:	79fb      	ldrb	r3, [r7, #7]
 80074ba:	4a0b      	ldr	r2, [pc, #44]	; (80074e8 <disk_initialize+0x48>)
 80074bc:	2101      	movs	r1, #1
 80074be:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80074c0:	79fb      	ldrb	r3, [r7, #7]
 80074c2:	4a09      	ldr	r2, [pc, #36]	; (80074e8 <disk_initialize+0x48>)
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	79fa      	ldrb	r2, [r7, #7]
 80074ce:	4906      	ldr	r1, [pc, #24]	; (80074e8 <disk_initialize+0x48>)
 80074d0:	440a      	add	r2, r1
 80074d2:	7a12      	ldrb	r2, [r2, #8]
 80074d4:	4610      	mov	r0, r2
 80074d6:	4798      	blx	r3
 80074d8:	4603      	mov	r3, r0
 80074da:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20000330 	.word	0x20000330

080074ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80074ec:	b590      	push	{r4, r7, lr}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60b9      	str	r1, [r7, #8]
 80074f4:	607a      	str	r2, [r7, #4]
 80074f6:	603b      	str	r3, [r7, #0]
 80074f8:	4603      	mov	r3, r0
 80074fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	4a0a      	ldr	r2, [pc, #40]	; (8007528 <disk_read+0x3c>)
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	689c      	ldr	r4, [r3, #8]
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	4a07      	ldr	r2, [pc, #28]	; (8007528 <disk_read+0x3c>)
 800750c:	4413      	add	r3, r2
 800750e:	7a18      	ldrb	r0, [r3, #8]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	68b9      	ldr	r1, [r7, #8]
 8007516:	47a0      	blx	r4
 8007518:	4603      	mov	r3, r0
 800751a:	75fb      	strb	r3, [r7, #23]
  return res;
 800751c:	7dfb      	ldrb	r3, [r7, #23]
}
 800751e:	4618      	mov	r0, r3
 8007520:	371c      	adds	r7, #28
 8007522:	46bd      	mov	sp, r7
 8007524:	bd90      	pop	{r4, r7, pc}
 8007526:	bf00      	nop
 8007528:	20000330 	.word	0x20000330

0800752c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800752c:	b590      	push	{r4, r7, lr}
 800752e:	b087      	sub	sp, #28
 8007530:	af00      	add	r7, sp, #0
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	607a      	str	r2, [r7, #4]
 8007536:	603b      	str	r3, [r7, #0]
 8007538:	4603      	mov	r3, r0
 800753a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	4a0a      	ldr	r2, [pc, #40]	; (8007568 <disk_write+0x3c>)
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4413      	add	r3, r2
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	68dc      	ldr	r4, [r3, #12]
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	4a07      	ldr	r2, [pc, #28]	; (8007568 <disk_write+0x3c>)
 800754c:	4413      	add	r3, r2
 800754e:	7a18      	ldrb	r0, [r3, #8]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	68b9      	ldr	r1, [r7, #8]
 8007556:	47a0      	blx	r4
 8007558:	4603      	mov	r3, r0
 800755a:	75fb      	strb	r3, [r7, #23]
  return res;
 800755c:	7dfb      	ldrb	r3, [r7, #23]
}
 800755e:	4618      	mov	r0, r3
 8007560:	371c      	adds	r7, #28
 8007562:	46bd      	mov	sp, r7
 8007564:	bd90      	pop	{r4, r7, pc}
 8007566:	bf00      	nop
 8007568:	20000330 	.word	0x20000330

0800756c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	4603      	mov	r3, r0
 8007574:	603a      	str	r2, [r7, #0]
 8007576:	71fb      	strb	r3, [r7, #7]
 8007578:	460b      	mov	r3, r1
 800757a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800757c:	79fb      	ldrb	r3, [r7, #7]
 800757e:	4a09      	ldr	r2, [pc, #36]	; (80075a4 <disk_ioctl+0x38>)
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	79fa      	ldrb	r2, [r7, #7]
 800758a:	4906      	ldr	r1, [pc, #24]	; (80075a4 <disk_ioctl+0x38>)
 800758c:	440a      	add	r2, r1
 800758e:	7a10      	ldrb	r0, [r2, #8]
 8007590:	79b9      	ldrb	r1, [r7, #6]
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	4798      	blx	r3
 8007596:	4603      	mov	r3, r0
 8007598:	73fb      	strb	r3, [r7, #15]
  return res;
 800759a:	7bfb      	ldrb	r3, [r7, #15]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	20000330 	.word	0x20000330

080075a8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3301      	adds	r3, #1
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80075b8:	89fb      	ldrh	r3, [r7, #14]
 80075ba:	021b      	lsls	r3, r3, #8
 80075bc:	b21a      	sxth	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	b21b      	sxth	r3, r3
 80075c4:	4313      	orrs	r3, r2
 80075c6:	b21b      	sxth	r3, r3
 80075c8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80075ca:	89fb      	ldrh	r3, [r7, #14]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	3303      	adds	r3, #3
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	021b      	lsls	r3, r3, #8
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	3202      	adds	r2, #2
 80075f0:	7812      	ldrb	r2, [r2, #0]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	021b      	lsls	r3, r3, #8
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	3201      	adds	r2, #1
 80075fe:	7812      	ldrb	r2, [r2, #0]
 8007600:	4313      	orrs	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	021b      	lsls	r3, r3, #8
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	7812      	ldrb	r2, [r2, #0]
 800760c:	4313      	orrs	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]
	return rv;
 8007610:	68fb      	ldr	r3, [r7, #12]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800761e:	b480      	push	{r7}
 8007620:	b083      	sub	sp, #12
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	460b      	mov	r3, r1
 8007628:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	607a      	str	r2, [r7, #4]
 8007630:	887a      	ldrh	r2, [r7, #2]
 8007632:	b2d2      	uxtb	r2, r2
 8007634:	701a      	strb	r2, [r3, #0]
 8007636:	887b      	ldrh	r3, [r7, #2]
 8007638:	0a1b      	lsrs	r3, r3, #8
 800763a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	607a      	str	r2, [r7, #4]
 8007642:	887a      	ldrh	r2, [r7, #2]
 8007644:	b2d2      	uxtb	r2, r2
 8007646:	701a      	strb	r2, [r3, #0]
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	b2d2      	uxtb	r2, r2
 8007668:	701a      	strb	r2, [r3, #0]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	0a1b      	lsrs	r3, r3, #8
 800766e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	607a      	str	r2, [r7, #4]
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	b2d2      	uxtb	r2, r2
 800767a:	701a      	strb	r2, [r3, #0]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	0a1b      	lsrs	r3, r3, #8
 8007680:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	1c5a      	adds	r2, r3, #1
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	b2d2      	uxtb	r2, r2
 800768c:	701a      	strb	r2, [r3, #0]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	0a1b      	lsrs	r3, r3, #8
 8007692:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	1c5a      	adds	r2, r3, #1
 8007698:	607a      	str	r2, [r7, #4]
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	b2d2      	uxtb	r2, r2
 800769e:	701a      	strb	r2, [r3, #0]
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80076ac:	b480      	push	{r7}
 80076ae:	b087      	sub	sp, #28
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00d      	beq.n	80076e2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	1c53      	adds	r3, r2, #1
 80076ca:	613b      	str	r3, [r7, #16]
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	1c59      	adds	r1, r3, #1
 80076d0:	6179      	str	r1, [r7, #20]
 80076d2:	7812      	ldrb	r2, [r2, #0]
 80076d4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	3b01      	subs	r3, #1
 80076da:	607b      	str	r3, [r7, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1f1      	bne.n	80076c6 <mem_cpy+0x1a>
	}
}
 80076e2:	bf00      	nop
 80076e4:	371c      	adds	r7, #28
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80076ee:	b480      	push	{r7}
 80076f0:	b087      	sub	sp, #28
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	60b9      	str	r1, [r7, #8]
 80076f8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	617a      	str	r2, [r7, #20]
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	b2d2      	uxtb	r2, r2
 8007708:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3b01      	subs	r3, #1
 800770e:	607b      	str	r3, [r7, #4]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1f3      	bne.n	80076fe <mem_set+0x10>
}
 8007716:	bf00      	nop
 8007718:	371c      	adds	r7, #28
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007722:	b480      	push	{r7}
 8007724:	b089      	sub	sp, #36	; 0x24
 8007726:	af00      	add	r7, sp, #0
 8007728:	60f8      	str	r0, [r7, #12]
 800772a:	60b9      	str	r1, [r7, #8]
 800772c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	61fb      	str	r3, [r7, #28]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007736:	2300      	movs	r3, #0
 8007738:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	61fa      	str	r2, [r7, #28]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	4619      	mov	r1, r3
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	1c5a      	adds	r2, r3, #1
 8007748:	61ba      	str	r2, [r7, #24]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	1acb      	subs	r3, r1, r3
 800774e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3b01      	subs	r3, #1
 8007754:	607b      	str	r3, [r7, #4]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <mem_cmp+0x40>
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d0eb      	beq.n	800773a <mem_cmp+0x18>

	return r;
 8007762:	697b      	ldr	r3, [r7, #20]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3724      	adds	r7, #36	; 0x24
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800777a:	e002      	b.n	8007782 <chk_chr+0x12>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3301      	adds	r3, #1
 8007780:	607b      	str	r3, [r7, #4]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d005      	beq.n	8007796 <chk_chr+0x26>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	4293      	cmp	r3, r2
 8007794:	d1f2      	bne.n	800777c <chk_chr+0xc>
	return *str;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	781b      	ldrb	r3, [r3, #0]
}
 800779a:	4618      	mov	r0, r3
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
	...

080077a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80077b2:	2300      	movs	r3, #0
 80077b4:	60bb      	str	r3, [r7, #8]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	60fb      	str	r3, [r7, #12]
 80077ba:	e029      	b.n	8007810 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80077bc:	4a27      	ldr	r2, [pc, #156]	; (800785c <chk_lock+0xb4>)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	011b      	lsls	r3, r3, #4
 80077c2:	4413      	add	r3, r2
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d01d      	beq.n	8007806 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80077ca:	4a24      	ldr	r2, [pc, #144]	; (800785c <chk_lock+0xb4>)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	011b      	lsls	r3, r3, #4
 80077d0:	4413      	add	r3, r2
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d116      	bne.n	800780a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80077dc:	4a1f      	ldr	r2, [pc, #124]	; (800785c <chk_lock+0xb4>)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	011b      	lsls	r3, r3, #4
 80077e2:	4413      	add	r3, r2
 80077e4:	3304      	adds	r3, #4
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d10c      	bne.n	800780a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80077f0:	4a1a      	ldr	r2, [pc, #104]	; (800785c <chk_lock+0xb4>)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	011b      	lsls	r3, r3, #4
 80077f6:	4413      	add	r3, r2
 80077f8:	3308      	adds	r3, #8
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007800:	429a      	cmp	r2, r3
 8007802:	d102      	bne.n	800780a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007804:	e007      	b.n	8007816 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007806:	2301      	movs	r3, #1
 8007808:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	3301      	adds	r3, #1
 800780e:	60fb      	str	r3, [r7, #12]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d9d2      	bls.n	80077bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2b02      	cmp	r3, #2
 800781a:	d109      	bne.n	8007830 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d102      	bne.n	8007828 <chk_lock+0x80>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b02      	cmp	r3, #2
 8007826:	d101      	bne.n	800782c <chk_lock+0x84>
 8007828:	2300      	movs	r3, #0
 800782a:	e010      	b.n	800784e <chk_lock+0xa6>
 800782c:	2312      	movs	r3, #18
 800782e:	e00e      	b.n	800784e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d108      	bne.n	8007848 <chk_lock+0xa0>
 8007836:	4a09      	ldr	r2, [pc, #36]	; (800785c <chk_lock+0xb4>)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	011b      	lsls	r3, r3, #4
 800783c:	4413      	add	r3, r2
 800783e:	330c      	adds	r3, #12
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007846:	d101      	bne.n	800784c <chk_lock+0xa4>
 8007848:	2310      	movs	r3, #16
 800784a:	e000      	b.n	800784e <chk_lock+0xa6>
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	20000110 	.word	0x20000110

08007860 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007866:	2300      	movs	r3, #0
 8007868:	607b      	str	r3, [r7, #4]
 800786a:	e002      	b.n	8007872 <enq_lock+0x12>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3301      	adds	r3, #1
 8007870:	607b      	str	r3, [r7, #4]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d806      	bhi.n	8007886 <enq_lock+0x26>
 8007878:	4a09      	ldr	r2, [pc, #36]	; (80078a0 <enq_lock+0x40>)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	011b      	lsls	r3, r3, #4
 800787e:	4413      	add	r3, r2
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1f2      	bne.n	800786c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b02      	cmp	r3, #2
 800788a:	bf14      	ite	ne
 800788c:	2301      	movne	r3, #1
 800788e:	2300      	moveq	r3, #0
 8007890:	b2db      	uxtb	r3, r3
}
 8007892:	4618      	mov	r0, r3
 8007894:	370c      	adds	r7, #12
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	20000110 	.word	0x20000110

080078a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80078ae:	2300      	movs	r3, #0
 80078b0:	60fb      	str	r3, [r7, #12]
 80078b2:	e01f      	b.n	80078f4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80078b4:	4a41      	ldr	r2, [pc, #260]	; (80079bc <inc_lock+0x118>)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	011b      	lsls	r3, r3, #4
 80078ba:	4413      	add	r3, r2
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d113      	bne.n	80078ee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80078c6:	4a3d      	ldr	r2, [pc, #244]	; (80079bc <inc_lock+0x118>)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	011b      	lsls	r3, r3, #4
 80078cc:	4413      	add	r3, r2
 80078ce:	3304      	adds	r3, #4
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d109      	bne.n	80078ee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80078da:	4a38      	ldr	r2, [pc, #224]	; (80079bc <inc_lock+0x118>)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	011b      	lsls	r3, r3, #4
 80078e0:	4413      	add	r3, r2
 80078e2:	3308      	adds	r3, #8
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d006      	beq.n	80078fc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3301      	adds	r3, #1
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d9dc      	bls.n	80078b4 <inc_lock+0x10>
 80078fa:	e000      	b.n	80078fe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80078fc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2b02      	cmp	r3, #2
 8007902:	d132      	bne.n	800796a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007904:	2300      	movs	r3, #0
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	e002      	b.n	8007910 <inc_lock+0x6c>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	3301      	adds	r3, #1
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d806      	bhi.n	8007924 <inc_lock+0x80>
 8007916:	4a29      	ldr	r2, [pc, #164]	; (80079bc <inc_lock+0x118>)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	011b      	lsls	r3, r3, #4
 800791c:	4413      	add	r3, r2
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1f2      	bne.n	800790a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2b02      	cmp	r3, #2
 8007928:	d101      	bne.n	800792e <inc_lock+0x8a>
 800792a:	2300      	movs	r3, #0
 800792c:	e040      	b.n	80079b0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	4922      	ldr	r1, [pc, #136]	; (80079bc <inc_lock+0x118>)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	440b      	add	r3, r1
 800793a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	689a      	ldr	r2, [r3, #8]
 8007940:	491e      	ldr	r1, [pc, #120]	; (80079bc <inc_lock+0x118>)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	011b      	lsls	r3, r3, #4
 8007946:	440b      	add	r3, r1
 8007948:	3304      	adds	r3, #4
 800794a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	695a      	ldr	r2, [r3, #20]
 8007950:	491a      	ldr	r1, [pc, #104]	; (80079bc <inc_lock+0x118>)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	011b      	lsls	r3, r3, #4
 8007956:	440b      	add	r3, r1
 8007958:	3308      	adds	r3, #8
 800795a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800795c:	4a17      	ldr	r2, [pc, #92]	; (80079bc <inc_lock+0x118>)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	011b      	lsls	r3, r3, #4
 8007962:	4413      	add	r3, r2
 8007964:	330c      	adds	r3, #12
 8007966:	2200      	movs	r2, #0
 8007968:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d009      	beq.n	8007984 <inc_lock+0xe0>
 8007970:	4a12      	ldr	r2, [pc, #72]	; (80079bc <inc_lock+0x118>)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	011b      	lsls	r3, r3, #4
 8007976:	4413      	add	r3, r2
 8007978:	330c      	adds	r3, #12
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <inc_lock+0xe0>
 8007980:	2300      	movs	r3, #0
 8007982:	e015      	b.n	80079b0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d108      	bne.n	800799c <inc_lock+0xf8>
 800798a:	4a0c      	ldr	r2, [pc, #48]	; (80079bc <inc_lock+0x118>)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	011b      	lsls	r3, r3, #4
 8007990:	4413      	add	r3, r2
 8007992:	330c      	adds	r3, #12
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	3301      	adds	r3, #1
 8007998:	b29a      	uxth	r2, r3
 800799a:	e001      	b.n	80079a0 <inc_lock+0xfc>
 800799c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079a0:	4906      	ldr	r1, [pc, #24]	; (80079bc <inc_lock+0x118>)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	011b      	lsls	r3, r3, #4
 80079a6:	440b      	add	r3, r1
 80079a8:	330c      	adds	r3, #12
 80079aa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3301      	adds	r3, #1
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	20000110 	.word	0x20000110

080079c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	3b01      	subs	r3, #1
 80079cc:	607b      	str	r3, [r7, #4]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d825      	bhi.n	8007a20 <dec_lock+0x60>
		n = Files[i].ctr;
 80079d4:	4a17      	ldr	r2, [pc, #92]	; (8007a34 <dec_lock+0x74>)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	011b      	lsls	r3, r3, #4
 80079da:	4413      	add	r3, r2
 80079dc:	330c      	adds	r3, #12
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80079e2:	89fb      	ldrh	r3, [r7, #14]
 80079e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079e8:	d101      	bne.n	80079ee <dec_lock+0x2e>
 80079ea:	2300      	movs	r3, #0
 80079ec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80079ee:	89fb      	ldrh	r3, [r7, #14]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <dec_lock+0x3a>
 80079f4:	89fb      	ldrh	r3, [r7, #14]
 80079f6:	3b01      	subs	r3, #1
 80079f8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80079fa:	4a0e      	ldr	r2, [pc, #56]	; (8007a34 <dec_lock+0x74>)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	011b      	lsls	r3, r3, #4
 8007a00:	4413      	add	r3, r2
 8007a02:	330c      	adds	r3, #12
 8007a04:	89fa      	ldrh	r2, [r7, #14]
 8007a06:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007a08:	89fb      	ldrh	r3, [r7, #14]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d105      	bne.n	8007a1a <dec_lock+0x5a>
 8007a0e:	4a09      	ldr	r2, [pc, #36]	; (8007a34 <dec_lock+0x74>)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	011b      	lsls	r3, r3, #4
 8007a14:	4413      	add	r3, r2
 8007a16:	2200      	movs	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	737b      	strb	r3, [r7, #13]
 8007a1e:	e001      	b.n	8007a24 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007a20:	2302      	movs	r3, #2
 8007a22:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007a24:	7b7b      	ldrb	r3, [r7, #13]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	20000110 	.word	0x20000110

08007a38 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007a40:	2300      	movs	r3, #0
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	e010      	b.n	8007a68 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007a46:	4a0d      	ldr	r2, [pc, #52]	; (8007a7c <clear_lock+0x44>)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	011b      	lsls	r3, r3, #4
 8007a4c:	4413      	add	r3, r2
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d105      	bne.n	8007a62 <clear_lock+0x2a>
 8007a56:	4a09      	ldr	r2, [pc, #36]	; (8007a7c <clear_lock+0x44>)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	011b      	lsls	r3, r3, #4
 8007a5c:	4413      	add	r3, r2
 8007a5e:	2200      	movs	r2, #0
 8007a60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3301      	adds	r3, #1
 8007a66:	60fb      	str	r3, [r7, #12]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d9eb      	bls.n	8007a46 <clear_lock+0xe>
	}
}
 8007a6e:	bf00      	nop
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	20000110 	.word	0x20000110

08007a80 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	78db      	ldrb	r3, [r3, #3]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d034      	beq.n	8007afe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a98:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	7858      	ldrb	r0, [r3, #1]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	f7ff fd40 	bl	800752c <disk_write>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	73fb      	strb	r3, [r7, #15]
 8007ab6:	e022      	b.n	8007afe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	1ad2      	subs	r2, r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d217      	bcs.n	8007afe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	789b      	ldrb	r3, [r3, #2]
 8007ad2:	613b      	str	r3, [r7, #16]
 8007ad4:	e010      	b.n	8007af8 <sync_window+0x78>
					wsect += fs->fsize;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	4413      	add	r3, r2
 8007ade:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	7858      	ldrb	r0, [r3, #1]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007aea:	2301      	movs	r3, #1
 8007aec:	697a      	ldr	r2, [r7, #20]
 8007aee:	f7ff fd1d 	bl	800752c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	3b01      	subs	r3, #1
 8007af6:	613b      	str	r3, [r7, #16]
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d8eb      	bhi.n	8007ad6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3718      	adds	r7, #24
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d01b      	beq.n	8007b58 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7ff ffad 	bl	8007a80 <sync_window>
 8007b26:	4603      	mov	r3, r0
 8007b28:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d113      	bne.n	8007b58 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	7858      	ldrb	r0, [r3, #1]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	f7ff fcd5 	bl	80074ec <disk_read>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d004      	beq.n	8007b52 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007b48:	f04f 33ff 	mov.w	r3, #4294967295
 8007b4c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8007b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f7ff ff87 	bl	8007a80 <sync_window>
 8007b72:	4603      	mov	r3, r0
 8007b74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d159      	bne.n	8007c30 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d149      	bne.n	8007c18 <sync_fs+0xb4>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	791b      	ldrb	r3, [r3, #4]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d145      	bne.n	8007c18 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	899b      	ldrh	r3, [r3, #12]
 8007b96:	461a      	mov	r2, r3
 8007b98:	2100      	movs	r1, #0
 8007b9a:	f7ff fda8 	bl	80076ee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	3338      	adds	r3, #56	; 0x38
 8007ba2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007ba6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7ff fd37 	bl	800761e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	3338      	adds	r3, #56	; 0x38
 8007bb4:	4921      	ldr	r1, [pc, #132]	; (8007c3c <sync_fs+0xd8>)
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7ff fd4c 	bl	8007654 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	3338      	adds	r3, #56	; 0x38
 8007bc0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007bc4:	491e      	ldr	r1, [pc, #120]	; (8007c40 <sync_fs+0xdc>)
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7ff fd44 	bl	8007654 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3338      	adds	r3, #56	; 0x38
 8007bd0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	4619      	mov	r1, r3
 8007bda:	4610      	mov	r0, r2
 8007bdc:	f7ff fd3a 	bl	8007654 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3338      	adds	r3, #56	; 0x38
 8007be4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	4619      	mov	r1, r3
 8007bee:	4610      	mov	r0, r2
 8007bf0:	f7ff fd30 	bl	8007654 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	1c5a      	adds	r2, r3, #1
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	7858      	ldrb	r0, [r3, #1]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	f7ff fc8d 	bl	800752c <disk_write>
			fs->fsi_flag = 0;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	785b      	ldrb	r3, [r3, #1]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	2100      	movs	r1, #0
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7ff fca3 	bl	800756c <disk_ioctl>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <sync_fs+0xcc>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	41615252 	.word	0x41615252
 8007c40:	61417272 	.word	0x61417272

08007c44 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	3b02      	subs	r3, #2
 8007c52:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	3b02      	subs	r3, #2
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d301      	bcc.n	8007c64 <clust2sect+0x20>
 8007c60:	2300      	movs	r3, #0
 8007c62:	e008      	b.n	8007c76 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	895b      	ldrh	r3, [r3, #10]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	fb03 f202 	mul.w	r2, r3, r2
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c74:	4413      	add	r3, r2
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b086      	sub	sp, #24
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d904      	bls.n	8007ca2 <get_fat+0x20>
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	69db      	ldr	r3, [r3, #28]
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d302      	bcc.n	8007ca8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	617b      	str	r3, [r7, #20]
 8007ca6:	e0b7      	b.n	8007e18 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d05a      	beq.n	8007d6c <get_fat+0xea>
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d07d      	beq.n	8007db6 <get_fat+0x134>
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	f040 80a2 	bne.w	8007e04 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	085b      	lsrs	r3, r3, #1
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4413      	add	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	899b      	ldrh	r3, [r3, #12]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cde:	4413      	add	r3, r2
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6938      	ldr	r0, [r7, #16]
 8007ce4:	f7ff ff10 	bl	8007b08 <move_window>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f040 808d 	bne.w	8007e0a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	1c5a      	adds	r2, r3, #1
 8007cf4:	60fa      	str	r2, [r7, #12]
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	8992      	ldrh	r2, [r2, #12]
 8007cfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cfe:	fb02 f201 	mul.w	r2, r2, r1
 8007d02:	1a9b      	subs	r3, r3, r2
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	4413      	add	r3, r2
 8007d08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d0c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	899b      	ldrh	r3, [r3, #12]
 8007d16:	4619      	mov	r1, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d1e:	4413      	add	r3, r2
 8007d20:	4619      	mov	r1, r3
 8007d22:	6938      	ldr	r0, [r7, #16]
 8007d24:	f7ff fef0 	bl	8007b08 <move_window>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d16f      	bne.n	8007e0e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	899b      	ldrh	r3, [r3, #12]
 8007d32:	461a      	mov	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d3a:	fb02 f201 	mul.w	r2, r2, r1
 8007d3e:	1a9b      	subs	r3, r3, r2
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	4413      	add	r3, r2
 8007d44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d48:	021b      	lsls	r3, r3, #8
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <get_fat+0xe0>
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	091b      	lsrs	r3, r3, #4
 8007d60:	e002      	b.n	8007d68 <get_fat+0xe6>
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d68:	617b      	str	r3, [r7, #20]
			break;
 8007d6a:	e055      	b.n	8007e18 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	899b      	ldrh	r3, [r3, #12]
 8007d74:	085b      	lsrs	r3, r3, #1
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	4619      	mov	r1, r3
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d80:	4413      	add	r3, r2
 8007d82:	4619      	mov	r1, r3
 8007d84:	6938      	ldr	r0, [r7, #16]
 8007d86:	f7ff febf 	bl	8007b08 <move_window>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d140      	bne.n	8007e12 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	8992      	ldrh	r2, [r2, #12]
 8007d9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007da2:	fb02 f200 	mul.w	r2, r2, r0
 8007da6:	1a9b      	subs	r3, r3, r2
 8007da8:	440b      	add	r3, r1
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7ff fbfc 	bl	80075a8 <ld_word>
 8007db0:	4603      	mov	r3, r0
 8007db2:	617b      	str	r3, [r7, #20]
			break;
 8007db4:	e030      	b.n	8007e18 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	899b      	ldrh	r3, [r3, #12]
 8007dbe:	089b      	lsrs	r3, r3, #2
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dca:	4413      	add	r3, r2
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6938      	ldr	r0, [r7, #16]
 8007dd0:	f7ff fe9a 	bl	8007b08 <move_window>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d11d      	bne.n	8007e16 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	8992      	ldrh	r2, [r2, #12]
 8007de8:	fbb3 f0f2 	udiv	r0, r3, r2
 8007dec:	fb02 f200 	mul.w	r2, r2, r0
 8007df0:	1a9b      	subs	r3, r3, r2
 8007df2:	440b      	add	r3, r1
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7ff fbef 	bl	80075d8 <ld_dword>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007e00:	617b      	str	r3, [r7, #20]
			break;
 8007e02:	e009      	b.n	8007e18 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007e04:	2301      	movs	r3, #1
 8007e06:	617b      	str	r3, [r7, #20]
 8007e08:	e006      	b.n	8007e18 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e0a:	bf00      	nop
 8007e0c:	e004      	b.n	8007e18 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e0e:	bf00      	nop
 8007e10:	e002      	b.n	8007e18 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007e12:	bf00      	nop
 8007e14:	e000      	b.n	8007e18 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007e16:	bf00      	nop
		}
	}

	return val;
 8007e18:	697b      	ldr	r3, [r7, #20]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3718      	adds	r7, #24
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007e22:	b590      	push	{r4, r7, lr}
 8007e24:	b089      	sub	sp, #36	; 0x24
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	60f8      	str	r0, [r7, #12]
 8007e2a:	60b9      	str	r1, [r7, #8]
 8007e2c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007e2e:	2302      	movs	r3, #2
 8007e30:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	f240 8106 	bls.w	8008046 <put_fat+0x224>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	69db      	ldr	r3, [r3, #28]
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	f080 8100 	bcs.w	8008046 <put_fat+0x224>
		switch (fs->fs_type) {
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	f000 8088 	beq.w	8007f60 <put_fat+0x13e>
 8007e50:	2b03      	cmp	r3, #3
 8007e52:	f000 80b0 	beq.w	8007fb6 <put_fat+0x194>
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	f040 80f5 	bne.w	8008046 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	61bb      	str	r3, [r7, #24]
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	085b      	lsrs	r3, r3, #1
 8007e64:	69ba      	ldr	r2, [r7, #24]
 8007e66:	4413      	add	r3, r2
 8007e68:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	899b      	ldrh	r3, [r3, #12]
 8007e72:	4619      	mov	r1, r3
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e7a:	4413      	add	r3, r2
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f7ff fe42 	bl	8007b08 <move_window>
 8007e84:	4603      	mov	r3, r0
 8007e86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e88:	7ffb      	ldrb	r3, [r7, #31]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f040 80d4 	bne.w	8008038 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	1c5a      	adds	r2, r3, #1
 8007e9a:	61ba      	str	r2, [r7, #24]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	8992      	ldrh	r2, [r2, #12]
 8007ea0:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ea4:	fb02 f200 	mul.w	r2, r2, r0
 8007ea8:	1a9b      	subs	r3, r3, r2
 8007eaa:	440b      	add	r3, r1
 8007eac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00d      	beq.n	8007ed4 <put_fat+0xb2>
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	b25b      	sxtb	r3, r3
 8007ebe:	f003 030f 	and.w	r3, r3, #15
 8007ec2:	b25a      	sxtb	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	011b      	lsls	r3, r3, #4
 8007eca:	b25b      	sxtb	r3, r3
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	b25b      	sxtb	r3, r3
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	e001      	b.n	8007ed8 <put_fat+0xb6>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	899b      	ldrh	r3, [r3, #12]
 8007eea:	4619      	mov	r1, r3
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ef2:	4413      	add	r3, r2
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f7ff fe06 	bl	8007b08 <move_window>
 8007efc:	4603      	mov	r3, r0
 8007efe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f00:	7ffb      	ldrb	r3, [r7, #31]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f040 809a 	bne.w	800803c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	899b      	ldrh	r3, [r3, #12]
 8007f12:	461a      	mov	r2, r3
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f1a:	fb02 f200 	mul.w	r2, r2, r0
 8007f1e:	1a9b      	subs	r3, r3, r2
 8007f20:	440b      	add	r3, r1
 8007f22:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <put_fat+0x114>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	091b      	lsrs	r3, r3, #4
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	e00e      	b.n	8007f54 <put_fat+0x132>
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	b25b      	sxtb	r3, r3
 8007f3c:	f023 030f 	bic.w	r3, r3, #15
 8007f40:	b25a      	sxtb	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	0a1b      	lsrs	r3, r3, #8
 8007f46:	b25b      	sxtb	r3, r3
 8007f48:	f003 030f 	and.w	r3, r3, #15
 8007f4c:	b25b      	sxtb	r3, r3
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	b25b      	sxtb	r3, r3
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	70da      	strb	r2, [r3, #3]
			break;
 8007f5e:	e072      	b.n	8008046 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	899b      	ldrh	r3, [r3, #12]
 8007f68:	085b      	lsrs	r3, r3, #1
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f74:	4413      	add	r3, r2
 8007f76:	4619      	mov	r1, r3
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f7ff fdc5 	bl	8007b08 <move_window>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f82:	7ffb      	ldrb	r3, [r7, #31]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d15b      	bne.n	8008040 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	005b      	lsls	r3, r3, #1
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	8992      	ldrh	r2, [r2, #12]
 8007f96:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f9a:	fb02 f200 	mul.w	r2, r2, r0
 8007f9e:	1a9b      	subs	r3, r3, r2
 8007fa0:	440b      	add	r3, r1
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	b292      	uxth	r2, r2
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7ff fb38 	bl	800761e <st_word>
			fs->wflag = 1;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	70da      	strb	r2, [r3, #3]
			break;
 8007fb4:	e047      	b.n	8008046 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	899b      	ldrh	r3, [r3, #12]
 8007fbe:	089b      	lsrs	r3, r3, #2
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fca:	4413      	add	r3, r2
 8007fcc:	4619      	mov	r1, r3
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f7ff fd9a 	bl	8007b08 <move_window>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007fd8:	7ffb      	ldrb	r3, [r7, #31]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d132      	bne.n	8008044 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	8992      	ldrh	r2, [r2, #12]
 8007ff2:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ff6:	fb02 f200 	mul.w	r2, r2, r0
 8007ffa:	1a9b      	subs	r3, r3, r2
 8007ffc:	440b      	add	r3, r1
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7ff faea 	bl	80075d8 <ld_dword>
 8008004:	4603      	mov	r3, r0
 8008006:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800800a:	4323      	orrs	r3, r4
 800800c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	8992      	ldrh	r2, [r2, #12]
 800801c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008020:	fb02 f200 	mul.w	r2, r2, r0
 8008024:	1a9b      	subs	r3, r3, r2
 8008026:	440b      	add	r3, r1
 8008028:	6879      	ldr	r1, [r7, #4]
 800802a:	4618      	mov	r0, r3
 800802c:	f7ff fb12 	bl	8007654 <st_dword>
			fs->wflag = 1;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2201      	movs	r2, #1
 8008034:	70da      	strb	r2, [r3, #3]
			break;
 8008036:	e006      	b.n	8008046 <put_fat+0x224>
			if (res != FR_OK) break;
 8008038:	bf00      	nop
 800803a:	e004      	b.n	8008046 <put_fat+0x224>
			if (res != FR_OK) break;
 800803c:	bf00      	nop
 800803e:	e002      	b.n	8008046 <put_fat+0x224>
			if (res != FR_OK) break;
 8008040:	bf00      	nop
 8008042:	e000      	b.n	8008046 <put_fat+0x224>
			if (res != FR_OK) break;
 8008044:	bf00      	nop
		}
	}
	return res;
 8008046:	7ffb      	ldrb	r3, [r7, #31]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3724      	adds	r7, #36	; 0x24
 800804c:	46bd      	mov	sp, r7
 800804e:	bd90      	pop	{r4, r7, pc}

08008050 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800805c:	2300      	movs	r3, #0
 800805e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d904      	bls.n	8008076 <remove_chain+0x26>
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	429a      	cmp	r2, r3
 8008074:	d301      	bcc.n	800807a <remove_chain+0x2a>
 8008076:	2302      	movs	r3, #2
 8008078:	e04b      	b.n	8008112 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00c      	beq.n	800809a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008080:	f04f 32ff 	mov.w	r2, #4294967295
 8008084:	6879      	ldr	r1, [r7, #4]
 8008086:	69b8      	ldr	r0, [r7, #24]
 8008088:	f7ff fecb 	bl	8007e22 <put_fat>
 800808c:	4603      	mov	r3, r0
 800808e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008090:	7ffb      	ldrb	r3, [r7, #31]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <remove_chain+0x4a>
 8008096:	7ffb      	ldrb	r3, [r7, #31]
 8008098:	e03b      	b.n	8008112 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800809a:	68b9      	ldr	r1, [r7, #8]
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f7ff fdf0 	bl	8007c82 <get_fat>
 80080a2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d031      	beq.n	800810e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d101      	bne.n	80080b4 <remove_chain+0x64>
 80080b0:	2302      	movs	r3, #2
 80080b2:	e02e      	b.n	8008112 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ba:	d101      	bne.n	80080c0 <remove_chain+0x70>
 80080bc:	2301      	movs	r3, #1
 80080be:	e028      	b.n	8008112 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80080c0:	2200      	movs	r2, #0
 80080c2:	68b9      	ldr	r1, [r7, #8]
 80080c4:	69b8      	ldr	r0, [r7, #24]
 80080c6:	f7ff feac 	bl	8007e22 <put_fat>
 80080ca:	4603      	mov	r3, r0
 80080cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80080ce:	7ffb      	ldrb	r3, [r7, #31]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d001      	beq.n	80080d8 <remove_chain+0x88>
 80080d4:	7ffb      	ldrb	r3, [r7, #31]
 80080d6:	e01c      	b.n	8008112 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	699a      	ldr	r2, [r3, #24]
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	3b02      	subs	r3, #2
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d20b      	bcs.n	80080fe <remove_chain+0xae>
			fs->free_clst++;
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	791b      	ldrb	r3, [r3, #4]
 80080f4:	f043 0301 	orr.w	r3, r3, #1
 80080f8:	b2da      	uxtb	r2, r3
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	429a      	cmp	r2, r3
 800810a:	d3c6      	bcc.n	800809a <remove_chain+0x4a>
 800810c:	e000      	b.n	8008110 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800810e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3720      	adds	r7, #32
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b088      	sub	sp, #32
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10d      	bne.n	800814c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d004      	beq.n	8008146 <create_chain+0x2c>
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	69db      	ldr	r3, [r3, #28]
 8008140:	69ba      	ldr	r2, [r7, #24]
 8008142:	429a      	cmp	r2, r3
 8008144:	d31b      	bcc.n	800817e <create_chain+0x64>
 8008146:	2301      	movs	r3, #1
 8008148:	61bb      	str	r3, [r7, #24]
 800814a:	e018      	b.n	800817e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7ff fd97 	bl	8007c82 <get_fat>
 8008154:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d801      	bhi.n	8008160 <create_chain+0x46>
 800815c:	2301      	movs	r3, #1
 800815e:	e070      	b.n	8008242 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008166:	d101      	bne.n	800816c <create_chain+0x52>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	e06a      	b.n	8008242 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	69db      	ldr	r3, [r3, #28]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	429a      	cmp	r2, r3
 8008174:	d201      	bcs.n	800817a <create_chain+0x60>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	e063      	b.n	8008242 <create_chain+0x128>
		scl = clst;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	3301      	adds	r3, #1
 8008186:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	69db      	ldr	r3, [r3, #28]
 800818c:	69fa      	ldr	r2, [r7, #28]
 800818e:	429a      	cmp	r2, r3
 8008190:	d307      	bcc.n	80081a2 <create_chain+0x88>
				ncl = 2;
 8008192:	2302      	movs	r3, #2
 8008194:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008196:	69fa      	ldr	r2, [r7, #28]
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	429a      	cmp	r2, r3
 800819c:	d901      	bls.n	80081a2 <create_chain+0x88>
 800819e:	2300      	movs	r3, #0
 80081a0:	e04f      	b.n	8008242 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80081a2:	69f9      	ldr	r1, [r7, #28]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7ff fd6c 	bl	8007c82 <get_fat>
 80081aa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00e      	beq.n	80081d0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d003      	beq.n	80081c0 <create_chain+0xa6>
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081be:	d101      	bne.n	80081c4 <create_chain+0xaa>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	e03e      	b.n	8008242 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80081c4:	69fa      	ldr	r2, [r7, #28]
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d1da      	bne.n	8008182 <create_chain+0x68>
 80081cc:	2300      	movs	r3, #0
 80081ce:	e038      	b.n	8008242 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80081d0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80081d2:	f04f 32ff 	mov.w	r2, #4294967295
 80081d6:	69f9      	ldr	r1, [r7, #28]
 80081d8:	6938      	ldr	r0, [r7, #16]
 80081da:	f7ff fe22 	bl	8007e22 <put_fat>
 80081de:	4603      	mov	r3, r0
 80081e0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d109      	bne.n	80081fc <create_chain+0xe2>
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d006      	beq.n	80081fc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80081ee:	69fa      	ldr	r2, [r7, #28]
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6938      	ldr	r0, [r7, #16]
 80081f4:	f7ff fe15 	bl	8007e22 <put_fat>
 80081f8:	4603      	mov	r3, r0
 80081fa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80081fc:	7dfb      	ldrb	r3, [r7, #23]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d116      	bne.n	8008230 <create_chain+0x116>
		fs->last_clst = ncl;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	69fa      	ldr	r2, [r7, #28]
 8008206:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	699a      	ldr	r2, [r3, #24]
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	3b02      	subs	r3, #2
 8008212:	429a      	cmp	r2, r3
 8008214:	d804      	bhi.n	8008220 <create_chain+0x106>
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	1e5a      	subs	r2, r3, #1
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	791b      	ldrb	r3, [r3, #4]
 8008224:	f043 0301 	orr.w	r3, r3, #1
 8008228:	b2da      	uxtb	r2, r3
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	711a      	strb	r2, [r3, #4]
 800822e:	e007      	b.n	8008240 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d102      	bne.n	800823c <create_chain+0x122>
 8008236:	f04f 33ff 	mov.w	r3, #4294967295
 800823a:	e000      	b.n	800823e <create_chain+0x124>
 800823c:	2301      	movs	r3, #1
 800823e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008240:	69fb      	ldr	r3, [r7, #28]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3720      	adds	r7, #32
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800824a:	b480      	push	{r7}
 800824c:	b087      	sub	sp, #28
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825e:	3304      	adds	r3, #4
 8008260:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	899b      	ldrh	r3, [r3, #12]
 8008266:	461a      	mov	r2, r3
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	fbb3 f3f2 	udiv	r3, r3, r2
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	8952      	ldrh	r2, [r2, #10]
 8008272:	fbb3 f3f2 	udiv	r3, r3, r2
 8008276:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	1d1a      	adds	r2, r3, #4
 800827c:	613a      	str	r2, [r7, #16]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d101      	bne.n	800828c <clmt_clust+0x42>
 8008288:	2300      	movs	r3, #0
 800828a:	e010      	b.n	80082ae <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	429a      	cmp	r2, r3
 8008292:	d307      	bcc.n	80082a4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	617b      	str	r3, [r7, #20]
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	3304      	adds	r3, #4
 80082a0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80082a2:	e7e9      	b.n	8008278 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80082a4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	4413      	add	r3, r2
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	371c      	adds	r7, #28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b086      	sub	sp, #24
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082d0:	d204      	bcs.n	80082dc <dir_sdi+0x22>
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	f003 031f 	and.w	r3, r3, #31
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d001      	beq.n	80082e0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80082dc:	2302      	movs	r3, #2
 80082de:	e071      	b.n	80083c4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d106      	bne.n	8008300 <dir_sdi+0x46>
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d902      	bls.n	8008300 <dir_sdi+0x46>
		clst = fs->dirbase;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fe:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10c      	bne.n	8008320 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	095b      	lsrs	r3, r3, #5
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	8912      	ldrh	r2, [r2, #8]
 800830e:	4293      	cmp	r3, r2
 8008310:	d301      	bcc.n	8008316 <dir_sdi+0x5c>
 8008312:	2302      	movs	r3, #2
 8008314:	e056      	b.n	80083c4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	61da      	str	r2, [r3, #28]
 800831e:	e02d      	b.n	800837c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	895b      	ldrh	r3, [r3, #10]
 8008324:	461a      	mov	r2, r3
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	899b      	ldrh	r3, [r3, #12]
 800832a:	fb03 f302 	mul.w	r3, r3, r2
 800832e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008330:	e019      	b.n	8008366 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6979      	ldr	r1, [r7, #20]
 8008336:	4618      	mov	r0, r3
 8008338:	f7ff fca3 	bl	8007c82 <get_fat>
 800833c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008344:	d101      	bne.n	800834a <dir_sdi+0x90>
 8008346:	2301      	movs	r3, #1
 8008348:	e03c      	b.n	80083c4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d904      	bls.n	800835a <dir_sdi+0xa0>
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	69db      	ldr	r3, [r3, #28]
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	429a      	cmp	r2, r3
 8008358:	d301      	bcc.n	800835e <dir_sdi+0xa4>
 800835a:	2302      	movs	r3, #2
 800835c:	e032      	b.n	80083c4 <dir_sdi+0x10a>
			ofs -= csz;
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	429a      	cmp	r2, r3
 800836c:	d2e1      	bcs.n	8008332 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800836e:	6979      	ldr	r1, [r7, #20]
 8008370:	6938      	ldr	r0, [r7, #16]
 8008372:	f7ff fc67 	bl	8007c44 <clust2sect>
 8008376:	4602      	mov	r2, r0
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	697a      	ldr	r2, [r7, #20]
 8008380:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	69db      	ldr	r3, [r3, #28]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <dir_sdi+0xd4>
 800838a:	2302      	movs	r3, #2
 800838c:	e01a      	b.n	80083c4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	69da      	ldr	r2, [r3, #28]
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	899b      	ldrh	r3, [r3, #12]
 8008396:	4619      	mov	r1, r3
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	fbb3 f3f1 	udiv	r3, r3, r1
 800839e:	441a      	add	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	899b      	ldrh	r3, [r3, #12]
 80083ae:	461a      	mov	r2, r3
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80083b6:	fb02 f200 	mul.w	r2, r2, r0
 80083ba:	1a9b      	subs	r3, r3, r2
 80083bc:	18ca      	adds	r2, r1, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3718      	adds	r7, #24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	695b      	ldr	r3, [r3, #20]
 80083e0:	3320      	adds	r3, #32
 80083e2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <dir_next+0x28>
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083f2:	d301      	bcc.n	80083f8 <dir_next+0x2c>
 80083f4:	2304      	movs	r3, #4
 80083f6:	e0bb      	b.n	8008570 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	899b      	ldrh	r3, [r3, #12]
 80083fc:	461a      	mov	r2, r3
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	fbb3 f1f2 	udiv	r1, r3, r2
 8008404:	fb02 f201 	mul.w	r2, r2, r1
 8008408:	1a9b      	subs	r3, r3, r2
 800840a:	2b00      	cmp	r3, #0
 800840c:	f040 809d 	bne.w	800854a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	69db      	ldr	r3, [r3, #28]
 8008414:	1c5a      	adds	r2, r3, #1
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d10b      	bne.n	800843a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	095b      	lsrs	r3, r3, #5
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	8912      	ldrh	r2, [r2, #8]
 800842a:	4293      	cmp	r3, r2
 800842c:	f0c0 808d 	bcc.w	800854a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	61da      	str	r2, [r3, #28]
 8008436:	2304      	movs	r3, #4
 8008438:	e09a      	b.n	8008570 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	899b      	ldrh	r3, [r3, #12]
 800843e:	461a      	mov	r2, r3
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	fbb3 f3f2 	udiv	r3, r3, r2
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	8952      	ldrh	r2, [r2, #10]
 800844a:	3a01      	subs	r2, #1
 800844c:	4013      	ands	r3, r2
 800844e:	2b00      	cmp	r3, #0
 8008450:	d17b      	bne.n	800854a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	4619      	mov	r1, r3
 800845a:	4610      	mov	r0, r2
 800845c:	f7ff fc11 	bl	8007c82 <get_fat>
 8008460:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d801      	bhi.n	800846c <dir_next+0xa0>
 8008468:	2302      	movs	r3, #2
 800846a:	e081      	b.n	8008570 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008472:	d101      	bne.n	8008478 <dir_next+0xac>
 8008474:	2301      	movs	r3, #1
 8008476:	e07b      	b.n	8008570 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	69db      	ldr	r3, [r3, #28]
 800847c:	697a      	ldr	r2, [r7, #20]
 800847e:	429a      	cmp	r2, r3
 8008480:	d359      	bcc.n	8008536 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d104      	bne.n	8008492 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	61da      	str	r2, [r3, #28]
 800848e:	2304      	movs	r3, #4
 8008490:	e06e      	b.n	8008570 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	4619      	mov	r1, r3
 800849a:	4610      	mov	r0, r2
 800849c:	f7ff fe3d 	bl	800811a <create_chain>
 80084a0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <dir_next+0xe0>
 80084a8:	2307      	movs	r3, #7
 80084aa:	e061      	b.n	8008570 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d101      	bne.n	80084b6 <dir_next+0xea>
 80084b2:	2302      	movs	r3, #2
 80084b4:	e05c      	b.n	8008570 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084bc:	d101      	bne.n	80084c2 <dir_next+0xf6>
 80084be:	2301      	movs	r3, #1
 80084c0:	e056      	b.n	8008570 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f7ff fadc 	bl	8007a80 <sync_window>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <dir_next+0x106>
 80084ce:	2301      	movs	r3, #1
 80084d0:	e04e      	b.n	8008570 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	899b      	ldrh	r3, [r3, #12]
 80084dc:	461a      	mov	r2, r3
 80084de:	2100      	movs	r1, #0
 80084e0:	f7ff f905 	bl	80076ee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80084e4:	2300      	movs	r3, #0
 80084e6:	613b      	str	r3, [r7, #16]
 80084e8:	6979      	ldr	r1, [r7, #20]
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f7ff fbaa 	bl	8007c44 <clust2sect>
 80084f0:	4602      	mov	r2, r0
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	635a      	str	r2, [r3, #52]	; 0x34
 80084f6:	e012      	b.n	800851e <dir_next+0x152>
						fs->wflag = 1;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2201      	movs	r2, #1
 80084fc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f7ff fabe 	bl	8007a80 <sync_window>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <dir_next+0x142>
 800850a:	2301      	movs	r3, #1
 800850c:	e030      	b.n	8008570 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	3301      	adds	r3, #1
 8008512:	613b      	str	r3, [r7, #16]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008518:	1c5a      	adds	r2, r3, #1
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	635a      	str	r2, [r3, #52]	; 0x34
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	895b      	ldrh	r3, [r3, #10]
 8008522:	461a      	mov	r2, r3
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	4293      	cmp	r3, r2
 8008528:	d3e6      	bcc.n	80084f8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	1ad2      	subs	r2, r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800853c:	6979      	ldr	r1, [r7, #20]
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f7ff fb80 	bl	8007c44 <clust2sect>
 8008544:	4602      	mov	r2, r0
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	899b      	ldrh	r3, [r3, #12]
 800855a:	461a      	mov	r2, r3
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008562:	fb02 f200 	mul.w	r2, r2, r0
 8008566:	1a9b      	subs	r3, r3, r2
 8008568:	18ca      	adds	r2, r1, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3718      	adds	r7, #24
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008588:	2100      	movs	r1, #0
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7ff fe95 	bl	80082ba <dir_sdi>
 8008590:	4603      	mov	r3, r0
 8008592:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008594:	7dfb      	ldrb	r3, [r7, #23]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d12b      	bne.n	80085f2 <dir_alloc+0x7a>
		n = 0;
 800859a:	2300      	movs	r3, #0
 800859c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	69db      	ldr	r3, [r3, #28]
 80085a2:	4619      	mov	r1, r3
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f7ff faaf 	bl	8007b08 <move_window>
 80085aa:	4603      	mov	r3, r0
 80085ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80085ae:	7dfb      	ldrb	r3, [r7, #23]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d11d      	bne.n	80085f0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a1b      	ldr	r3, [r3, #32]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	2be5      	cmp	r3, #229	; 0xe5
 80085bc:	d004      	beq.n	80085c8 <dir_alloc+0x50>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d107      	bne.n	80085d8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	3301      	adds	r3, #1
 80085cc:	613b      	str	r3, [r7, #16]
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d102      	bne.n	80085dc <dir_alloc+0x64>
 80085d6:	e00c      	b.n	80085f2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80085d8:	2300      	movs	r3, #0
 80085da:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80085dc:	2101      	movs	r1, #1
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7ff fef4 	bl	80083cc <dir_next>
 80085e4:	4603      	mov	r3, r0
 80085e6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80085e8:	7dfb      	ldrb	r3, [r7, #23]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d0d7      	beq.n	800859e <dir_alloc+0x26>
 80085ee:	e000      	b.n	80085f2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80085f0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80085f2:	7dfb      	ldrb	r3, [r7, #23]
 80085f4:	2b04      	cmp	r3, #4
 80085f6:	d101      	bne.n	80085fc <dir_alloc+0x84>
 80085f8:	2307      	movs	r3, #7
 80085fa:	75fb      	strb	r3, [r7, #23]
	return res;
 80085fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3718      	adds	r7, #24
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b084      	sub	sp, #16
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	331a      	adds	r3, #26
 8008614:	4618      	mov	r0, r3
 8008616:	f7fe ffc7 	bl	80075a8 <ld_word>
 800861a:	4603      	mov	r3, r0
 800861c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	2b03      	cmp	r3, #3
 8008624:	d109      	bne.n	800863a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	3314      	adds	r3, #20
 800862a:	4618      	mov	r0, r3
 800862c:	f7fe ffbc 	bl	80075a8 <ld_word>
 8008630:	4603      	mov	r3, r0
 8008632:	041b      	lsls	r3, r3, #16
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	4313      	orrs	r3, r2
 8008638:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800863a:	68fb      	ldr	r3, [r7, #12]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	331a      	adds	r3, #26
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	b292      	uxth	r2, r2
 8008658:	4611      	mov	r1, r2
 800865a:	4618      	mov	r0, r3
 800865c:	f7fe ffdf 	bl	800761e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b03      	cmp	r3, #3
 8008666:	d109      	bne.n	800867c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	f103 0214 	add.w	r2, r3, #20
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	0c1b      	lsrs	r3, r3, #16
 8008672:	b29b      	uxth	r3, r3
 8008674:	4619      	mov	r1, r3
 8008676:	4610      	mov	r0, r2
 8008678:	f7fe ffd1 	bl	800761e <st_word>
	}
}
 800867c:	bf00      	nop
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008684:	b590      	push	{r4, r7, lr}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	331a      	adds	r3, #26
 8008692:	4618      	mov	r0, r3
 8008694:	f7fe ff88 	bl	80075a8 <ld_word>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <cmp_lfn+0x1e>
 800869e:	2300      	movs	r3, #0
 80086a0:	e059      	b.n	8008756 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086aa:	1e5a      	subs	r2, r3, #1
 80086ac:	4613      	mov	r3, r2
 80086ae:	005b      	lsls	r3, r3, #1
 80086b0:	4413      	add	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80086b8:	2301      	movs	r3, #1
 80086ba:	81fb      	strh	r3, [r7, #14]
 80086bc:	2300      	movs	r3, #0
 80086be:	613b      	str	r3, [r7, #16]
 80086c0:	e033      	b.n	800872a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80086c2:	4a27      	ldr	r2, [pc, #156]	; (8008760 <cmp_lfn+0xdc>)
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	4413      	add	r3, r2
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	461a      	mov	r2, r3
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	4413      	add	r3, r2
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fe ff69 	bl	80075a8 <ld_word>
 80086d6:	4603      	mov	r3, r0
 80086d8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80086da:	89fb      	ldrh	r3, [r7, #14]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d01a      	beq.n	8008716 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	2bfe      	cmp	r3, #254	; 0xfe
 80086e4:	d812      	bhi.n	800870c <cmp_lfn+0x88>
 80086e6:	89bb      	ldrh	r3, [r7, #12]
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fe fe35 	bl	8007358 <ff_wtoupper>
 80086ee:	4603      	mov	r3, r0
 80086f0:	461c      	mov	r4, r3
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	1c5a      	adds	r2, r3, #1
 80086f6:	617a      	str	r2, [r7, #20]
 80086f8:	005b      	lsls	r3, r3, #1
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	4413      	add	r3, r2
 80086fe:	881b      	ldrh	r3, [r3, #0]
 8008700:	4618      	mov	r0, r3
 8008702:	f7fe fe29 	bl	8007358 <ff_wtoupper>
 8008706:	4603      	mov	r3, r0
 8008708:	429c      	cmp	r4, r3
 800870a:	d001      	beq.n	8008710 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800870c:	2300      	movs	r3, #0
 800870e:	e022      	b.n	8008756 <cmp_lfn+0xd2>
			}
			wc = uc;
 8008710:	89bb      	ldrh	r3, [r7, #12]
 8008712:	81fb      	strh	r3, [r7, #14]
 8008714:	e006      	b.n	8008724 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008716:	89bb      	ldrh	r3, [r7, #12]
 8008718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800871c:	4293      	cmp	r3, r2
 800871e:	d001      	beq.n	8008724 <cmp_lfn+0xa0>
 8008720:	2300      	movs	r3, #0
 8008722:	e018      	b.n	8008756 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	3301      	adds	r3, #1
 8008728:	613b      	str	r3, [r7, #16]
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	2b0c      	cmp	r3, #12
 800872e:	d9c8      	bls.n	80086c2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00b      	beq.n	8008754 <cmp_lfn+0xd0>
 800873c:	89fb      	ldrh	r3, [r7, #14]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d008      	beq.n	8008754 <cmp_lfn+0xd0>
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	005b      	lsls	r3, r3, #1
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	4413      	add	r3, r2
 800874a:	881b      	ldrh	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d001      	beq.n	8008754 <cmp_lfn+0xd0>
 8008750:	2300      	movs	r3, #0
 8008752:	e000      	b.n	8008756 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008754:	2301      	movs	r3, #1
}
 8008756:	4618      	mov	r0, r3
 8008758:	371c      	adds	r7, #28
 800875a:	46bd      	mov	sp, r7
 800875c:	bd90      	pop	{r4, r7, pc}
 800875e:	bf00      	nop
 8008760:	0800b504 	.word	0x0800b504

08008764 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b088      	sub	sp, #32
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	4611      	mov	r1, r2
 8008770:	461a      	mov	r2, r3
 8008772:	460b      	mov	r3, r1
 8008774:	71fb      	strb	r3, [r7, #7]
 8008776:	4613      	mov	r3, r2
 8008778:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	330d      	adds	r3, #13
 800877e:	79ba      	ldrb	r2, [r7, #6]
 8008780:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	330b      	adds	r3, #11
 8008786:	220f      	movs	r2, #15
 8008788:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	330c      	adds	r3, #12
 800878e:	2200      	movs	r2, #0
 8008790:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	331a      	adds	r3, #26
 8008796:	2100      	movs	r1, #0
 8008798:	4618      	mov	r0, r3
 800879a:	f7fe ff40 	bl	800761e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800879e:	79fb      	ldrb	r3, [r7, #7]
 80087a0:	1e5a      	subs	r2, r3, #1
 80087a2:	4613      	mov	r3, r2
 80087a4:	005b      	lsls	r3, r3, #1
 80087a6:	4413      	add	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80087ae:	2300      	movs	r3, #0
 80087b0:	82fb      	strh	r3, [r7, #22]
 80087b2:	2300      	movs	r3, #0
 80087b4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80087b6:	8afb      	ldrh	r3, [r7, #22]
 80087b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087bc:	4293      	cmp	r3, r2
 80087be:	d007      	beq.n	80087d0 <put_lfn+0x6c>
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	1c5a      	adds	r2, r3, #1
 80087c4:	61fa      	str	r2, [r7, #28]
 80087c6:	005b      	lsls	r3, r3, #1
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	4413      	add	r3, r2
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80087d0:	4a17      	ldr	r2, [pc, #92]	; (8008830 <put_lfn+0xcc>)
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	4413      	add	r3, r2
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	461a      	mov	r2, r3
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	4413      	add	r3, r2
 80087de:	8afa      	ldrh	r2, [r7, #22]
 80087e0:	4611      	mov	r1, r2
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fe ff1b 	bl	800761e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80087e8:	8afb      	ldrh	r3, [r7, #22]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d102      	bne.n	80087f4 <put_lfn+0x90>
 80087ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80087f2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	3301      	adds	r3, #1
 80087f8:	61bb      	str	r3, [r7, #24]
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	2b0c      	cmp	r3, #12
 80087fe:	d9da      	bls.n	80087b6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008800:	8afb      	ldrh	r3, [r7, #22]
 8008802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008806:	4293      	cmp	r3, r2
 8008808:	d006      	beq.n	8008818 <put_lfn+0xb4>
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	005b      	lsls	r3, r3, #1
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	4413      	add	r3, r2
 8008812:	881b      	ldrh	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d103      	bne.n	8008820 <put_lfn+0xbc>
 8008818:	79fb      	ldrb	r3, [r7, #7]
 800881a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800881e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	79fa      	ldrb	r2, [r7, #7]
 8008824:	701a      	strb	r2, [r3, #0]
}
 8008826:	bf00      	nop
 8008828:	3720      	adds	r7, #32
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	0800b504 	.word	0x0800b504

08008834 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08c      	sub	sp, #48	; 0x30
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
 8008840:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008842:	220b      	movs	r2, #11
 8008844:	68b9      	ldr	r1, [r7, #8]
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f7fe ff30 	bl	80076ac <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	2b05      	cmp	r3, #5
 8008850:	d92b      	bls.n	80088aa <gen_numname+0x76>
		sr = seq;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008856:	e022      	b.n	800889e <gen_numname+0x6a>
			wc = *lfn++;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	1c9a      	adds	r2, r3, #2
 800885c:	607a      	str	r2, [r7, #4]
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008862:	2300      	movs	r3, #0
 8008864:	62bb      	str	r3, [r7, #40]	; 0x28
 8008866:	e017      	b.n	8008898 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	005a      	lsls	r2, r3, #1
 800886c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800886e:	f003 0301 	and.w	r3, r3, #1
 8008872:	4413      	add	r3, r2
 8008874:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008876:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008878:	085b      	lsrs	r3, r3, #1
 800887a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008882:	2b00      	cmp	r3, #0
 8008884:	d005      	beq.n	8008892 <gen_numname+0x5e>
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800888c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008890:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008894:	3301      	adds	r3, #1
 8008896:	62bb      	str	r3, [r7, #40]	; 0x28
 8008898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889a:	2b0f      	cmp	r3, #15
 800889c:	d9e4      	bls.n	8008868 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	881b      	ldrh	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1d8      	bne.n	8008858 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80088aa:	2307      	movs	r3, #7
 80088ac:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	f003 030f 	and.w	r3, r3, #15
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	3330      	adds	r3, #48	; 0x30
 80088ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80088be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088c2:	2b39      	cmp	r3, #57	; 0x39
 80088c4:	d904      	bls.n	80088d0 <gen_numname+0x9c>
 80088c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088ca:	3307      	adds	r3, #7
 80088cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80088d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d2:	1e5a      	subs	r2, r3, #1
 80088d4:	62ba      	str	r2, [r7, #40]	; 0x28
 80088d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80088da:	4413      	add	r3, r2
 80088dc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80088e0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	091b      	lsrs	r3, r3, #4
 80088e8:	603b      	str	r3, [r7, #0]
	} while (seq);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1de      	bne.n	80088ae <gen_numname+0x7a>
	ns[i] = '~';
 80088f0:	f107 0214 	add.w	r2, r7, #20
 80088f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f6:	4413      	add	r3, r2
 80088f8:	227e      	movs	r2, #126	; 0x7e
 80088fa:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80088fc:	2300      	movs	r3, #0
 80088fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008900:	e002      	b.n	8008908 <gen_numname+0xd4>
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	3301      	adds	r3, #1
 8008906:	627b      	str	r3, [r7, #36]	; 0x24
 8008908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800890a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890c:	429a      	cmp	r2, r3
 800890e:	d205      	bcs.n	800891c <gen_numname+0xe8>
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	4413      	add	r3, r2
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	2b20      	cmp	r3, #32
 800891a:	d1f2      	bne.n	8008902 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891e:	2b07      	cmp	r3, #7
 8008920:	d808      	bhi.n	8008934 <gen_numname+0x100>
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	1c5a      	adds	r2, r3, #1
 8008926:	62ba      	str	r2, [r7, #40]	; 0x28
 8008928:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800892c:	4413      	add	r3, r2
 800892e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008932:	e000      	b.n	8008936 <gen_numname+0x102>
 8008934:	2120      	movs	r1, #32
 8008936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	627a      	str	r2, [r7, #36]	; 0x24
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	4413      	add	r3, r2
 8008940:	460a      	mov	r2, r1
 8008942:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008946:	2b07      	cmp	r3, #7
 8008948:	d9e8      	bls.n	800891c <gen_numname+0xe8>
}
 800894a:	bf00      	nop
 800894c:	3730      	adds	r7, #48	; 0x30
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008952:	b480      	push	{r7}
 8008954:	b085      	sub	sp, #20
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800895e:	230b      	movs	r3, #11
 8008960:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008962:	7bfb      	ldrb	r3, [r7, #15]
 8008964:	b2da      	uxtb	r2, r3
 8008966:	0852      	lsrs	r2, r2, #1
 8008968:	01db      	lsls	r3, r3, #7
 800896a:	4313      	orrs	r3, r2
 800896c:	b2da      	uxtb	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	1c59      	adds	r1, r3, #1
 8008972:	6079      	str	r1, [r7, #4]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	4413      	add	r3, r2
 8008978:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	3b01      	subs	r3, #1
 800897e:	60bb      	str	r3, [r7, #8]
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1ed      	bne.n	8008962 <sum_sfn+0x10>
	return sum;
 8008986:	7bfb      	ldrb	r3, [r7, #15]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3714      	adds	r7, #20
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80089a2:	2100      	movs	r1, #0
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7ff fc88 	bl	80082ba <dir_sdi>
 80089aa:	4603      	mov	r3, r0
 80089ac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80089ae:	7dfb      	ldrb	r3, [r7, #23]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <dir_find+0x24>
 80089b4:	7dfb      	ldrb	r3, [r7, #23]
 80089b6:	e0a9      	b.n	8008b0c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80089b8:	23ff      	movs	r3, #255	; 0xff
 80089ba:	753b      	strb	r3, [r7, #20]
 80089bc:	7d3b      	ldrb	r3, [r7, #20]
 80089be:	757b      	strb	r3, [r7, #21]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f04f 32ff 	mov.w	r2, #4294967295
 80089c6:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	4619      	mov	r1, r3
 80089ce:	6938      	ldr	r0, [r7, #16]
 80089d0:	f7ff f89a 	bl	8007b08 <move_window>
 80089d4:	4603      	mov	r3, r0
 80089d6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80089d8:	7dfb      	ldrb	r3, [r7, #23]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f040 8090 	bne.w	8008b00 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a1b      	ldr	r3, [r3, #32]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80089e8:	7dbb      	ldrb	r3, [r7, #22]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d102      	bne.n	80089f4 <dir_find+0x60>
 80089ee:	2304      	movs	r3, #4
 80089f0:	75fb      	strb	r3, [r7, #23]
 80089f2:	e08a      	b.n	8008b0a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a1b      	ldr	r3, [r3, #32]
 80089f8:	330b      	adds	r3, #11
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a00:	73fb      	strb	r3, [r7, #15]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	7bfa      	ldrb	r2, [r7, #15]
 8008a06:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008a08:	7dbb      	ldrb	r3, [r7, #22]
 8008a0a:	2be5      	cmp	r3, #229	; 0xe5
 8008a0c:	d007      	beq.n	8008a1e <dir_find+0x8a>
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
 8008a10:	f003 0308 	and.w	r3, r3, #8
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d009      	beq.n	8008a2c <dir_find+0x98>
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
 8008a1a:	2b0f      	cmp	r3, #15
 8008a1c:	d006      	beq.n	8008a2c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008a1e:	23ff      	movs	r3, #255	; 0xff
 8008a20:	757b      	strb	r3, [r7, #21]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f04f 32ff 	mov.w	r2, #4294967295
 8008a28:	631a      	str	r2, [r3, #48]	; 0x30
 8008a2a:	e05e      	b.n	8008aea <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
 8008a2e:	2b0f      	cmp	r3, #15
 8008a30:	d136      	bne.n	8008aa0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d154      	bne.n	8008aea <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008a40:	7dbb      	ldrb	r3, [r7, #22]
 8008a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00d      	beq.n	8008a66 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	7b5b      	ldrb	r3, [r3, #13]
 8008a50:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008a52:	7dbb      	ldrb	r3, [r7, #22]
 8008a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a58:	75bb      	strb	r3, [r7, #22]
 8008a5a:	7dbb      	ldrb	r3, [r7, #22]
 8008a5c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	695a      	ldr	r2, [r3, #20]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008a66:	7dba      	ldrb	r2, [r7, #22]
 8008a68:	7d7b      	ldrb	r3, [r7, #21]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d115      	bne.n	8008a9a <dir_find+0x106>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	330d      	adds	r3, #13
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	7d3a      	ldrb	r2, [r7, #20]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d10e      	bne.n	8008a9a <dir_find+0x106>
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	691a      	ldr	r2, [r3, #16]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a1b      	ldr	r3, [r3, #32]
 8008a84:	4619      	mov	r1, r3
 8008a86:	4610      	mov	r0, r2
 8008a88:	f7ff fdfc 	bl	8008684 <cmp_lfn>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d003      	beq.n	8008a9a <dir_find+0x106>
 8008a92:	7d7b      	ldrb	r3, [r7, #21]
 8008a94:	3b01      	subs	r3, #1
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	e000      	b.n	8008a9c <dir_find+0x108>
 8008a9a:	23ff      	movs	r3, #255	; 0xff
 8008a9c:	757b      	strb	r3, [r7, #21]
 8008a9e:	e024      	b.n	8008aea <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008aa0:	7d7b      	ldrb	r3, [r7, #21]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d109      	bne.n	8008aba <dir_find+0x126>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a1b      	ldr	r3, [r3, #32]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7ff ff51 	bl	8008952 <sum_sfn>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	7d3b      	ldrb	r3, [r7, #20]
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d024      	beq.n	8008b04 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008ac0:	f003 0301 	and.w	r3, r3, #1
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10a      	bne.n	8008ade <dir_find+0x14a>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a18      	ldr	r0, [r3, #32]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	3324      	adds	r3, #36	; 0x24
 8008ad0:	220b      	movs	r2, #11
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	f7fe fe25 	bl	8007722 <mem_cmp>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d014      	beq.n	8008b08 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008ade:	23ff      	movs	r3, #255	; 0xff
 8008ae0:	757b      	strb	r3, [r7, #21]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008aea:	2100      	movs	r1, #0
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff fc6d 	bl	80083cc <dir_next>
 8008af2:	4603      	mov	r3, r0
 8008af4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008af6:	7dfb      	ldrb	r3, [r7, #23]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f43f af65 	beq.w	80089c8 <dir_find+0x34>
 8008afe:	e004      	b.n	8008b0a <dir_find+0x176>
		if (res != FR_OK) break;
 8008b00:	bf00      	nop
 8008b02:	e002      	b.n	8008b0a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008b04:	bf00      	nop
 8008b06:	e000      	b.n	8008b0a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008b08:	bf00      	nop

	return res;
 8008b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3718      	adds	r7, #24
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b08c      	sub	sp, #48	; 0x30
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008b28:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d001      	beq.n	8008b34 <dir_register+0x20>
 8008b30:	2306      	movs	r3, #6
 8008b32:	e0e0      	b.n	8008cf6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008b34:	2300      	movs	r3, #0
 8008b36:	627b      	str	r3, [r7, #36]	; 0x24
 8008b38:	e002      	b.n	8008b40 <dir_register+0x2c>
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	691a      	ldr	r2, [r3, #16]
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	005b      	lsls	r3, r3, #1
 8008b48:	4413      	add	r3, r2
 8008b4a:	881b      	ldrh	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1f4      	bne.n	8008b3a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8008b56:	f107 030c 	add.w	r3, r7, #12
 8008b5a:	220c      	movs	r2, #12
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7fe fda5 	bl	80076ac <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008b62:	7dfb      	ldrb	r3, [r7, #23]
 8008b64:	f003 0301 	and.w	r3, r3, #1
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d032      	beq.n	8008bd2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2240      	movs	r2, #64	; 0x40
 8008b70:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8008b74:	2301      	movs	r3, #1
 8008b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b78:	e016      	b.n	8008ba8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	691a      	ldr	r2, [r3, #16]
 8008b84:	f107 010c 	add.w	r1, r7, #12
 8008b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8a:	f7ff fe53 	bl	8008834 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f7ff ff00 	bl	8008994 <dir_find>
 8008b94:	4603      	mov	r3, r0
 8008b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8008b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d106      	bne.n	8008bb0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008baa:	2b63      	cmp	r3, #99	; 0x63
 8008bac:	d9e5      	bls.n	8008b7a <dir_register+0x66>
 8008bae:	e000      	b.n	8008bb2 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008bb0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb4:	2b64      	cmp	r3, #100	; 0x64
 8008bb6:	d101      	bne.n	8008bbc <dir_register+0xa8>
 8008bb8:	2307      	movs	r3, #7
 8008bba:	e09c      	b.n	8008cf6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bc0:	2b04      	cmp	r3, #4
 8008bc2:	d002      	beq.n	8008bca <dir_register+0xb6>
 8008bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bc8:	e095      	b.n	8008cf6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008bca:	7dfa      	ldrb	r2, [r7, #23]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
 8008bd4:	f003 0302 	and.w	r3, r3, #2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d007      	beq.n	8008bec <dir_register+0xd8>
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bde:	330c      	adds	r3, #12
 8008be0:	4a47      	ldr	r2, [pc, #284]	; (8008d00 <dir_register+0x1ec>)
 8008be2:	fba2 2303 	umull	r2, r3, r2, r3
 8008be6:	089b      	lsrs	r3, r3, #2
 8008be8:	3301      	adds	r3, #1
 8008bea:	e000      	b.n	8008bee <dir_register+0xda>
 8008bec:	2301      	movs	r3, #1
 8008bee:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008bf0:	6a39      	ldr	r1, [r7, #32]
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff fcc0 	bl	8008578 <dir_alloc>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008bfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d148      	bne.n	8008c98 <dir_register+0x184>
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	623b      	str	r3, [r7, #32]
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d042      	beq.n	8008c98 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	695a      	ldr	r2, [r3, #20]
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	015b      	lsls	r3, r3, #5
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7ff fb4b 	bl	80082ba <dir_sdi>
 8008c24:	4603      	mov	r3, r0
 8008c26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008c2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d132      	bne.n	8008c98 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	3324      	adds	r3, #36	; 0x24
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7ff fe8b 	bl	8008952 <sum_sfn>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	69db      	ldr	r3, [r3, #28]
 8008c44:	4619      	mov	r1, r3
 8008c46:	69f8      	ldr	r0, [r7, #28]
 8008c48:	f7fe ff5e 	bl	8007b08 <move_window>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008c52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d11d      	bne.n	8008c96 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	6918      	ldr	r0, [r3, #16]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a19      	ldr	r1, [r3, #32]
 8008c62:	6a3b      	ldr	r3, [r7, #32]
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	7efb      	ldrb	r3, [r7, #27]
 8008c68:	f7ff fd7c 	bl	8008764 <put_lfn>
				fs->wflag = 1;
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008c72:	2100      	movs	r1, #0
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7ff fba9 	bl	80083cc <dir_next>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008c80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d107      	bne.n	8008c98 <dir_register+0x184>
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	623b      	str	r3, [r7, #32]
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1d5      	bne.n	8008c40 <dir_register+0x12c>
 8008c94:	e000      	b.n	8008c98 <dir_register+0x184>
				if (res != FR_OK) break;
 8008c96:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008c98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d128      	bne.n	8008cf2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	69db      	ldr	r3, [r3, #28]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	69f8      	ldr	r0, [r7, #28]
 8008ca8:	f7fe ff2e 	bl	8007b08 <move_window>
 8008cac:	4603      	mov	r3, r0
 8008cae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008cb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d11b      	bne.n	8008cf2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fe fd13 	bl	80076ee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a18      	ldr	r0, [r3, #32]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	3324      	adds	r3, #36	; 0x24
 8008cd0:	220b      	movs	r2, #11
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	f7fe fcea 	bl	80076ac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a1b      	ldr	r3, [r3, #32]
 8008ce2:	330c      	adds	r3, #12
 8008ce4:	f002 0218 	and.w	r2, r2, #24
 8008ce8:	b2d2      	uxtb	r2, r2
 8008cea:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008cf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3730      	adds	r7, #48	; 0x30
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	4ec4ec4f 	.word	0x4ec4ec4f

08008d04 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08a      	sub	sp, #40	; 0x28
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	613b      	str	r3, [r7, #16]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	60fb      	str	r3, [r7, #12]
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	617b      	str	r3, [r7, #20]
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	1c5a      	adds	r2, r3, #1
 8008d28:	61ba      	str	r2, [r7, #24]
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d34:	2b1f      	cmp	r3, #31
 8008d36:	d940      	bls.n	8008dba <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008d38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d3a:	2b2f      	cmp	r3, #47	; 0x2f
 8008d3c:	d006      	beq.n	8008d4c <create_name+0x48>
 8008d3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d40:	2b5c      	cmp	r3, #92	; 0x5c
 8008d42:	d110      	bne.n	8008d66 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008d44:	e002      	b.n	8008d4c <create_name+0x48>
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	61bb      	str	r3, [r7, #24]
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	4413      	add	r3, r2
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	2b2f      	cmp	r3, #47	; 0x2f
 8008d56:	d0f6      	beq.n	8008d46 <create_name+0x42>
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	2b5c      	cmp	r3, #92	; 0x5c
 8008d62:	d0f0      	beq.n	8008d46 <create_name+0x42>
			break;
 8008d64:	e02a      	b.n	8008dbc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	2bfe      	cmp	r3, #254	; 0xfe
 8008d6a:	d901      	bls.n	8008d70 <create_name+0x6c>
 8008d6c:	2306      	movs	r3, #6
 8008d6e:	e177      	b.n	8009060 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008d70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008d76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d78:	2101      	movs	r1, #1
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fe fab0 	bl	80072e0 <ff_convert>
 8008d80:	4603      	mov	r3, r0
 8008d82:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008d84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d101      	bne.n	8008d8e <create_name+0x8a>
 8008d8a:	2306      	movs	r3, #6
 8008d8c:	e168      	b.n	8009060 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008d8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d90:	2b7f      	cmp	r3, #127	; 0x7f
 8008d92:	d809      	bhi.n	8008da8 <create_name+0xa4>
 8008d94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d96:	4619      	mov	r1, r3
 8008d98:	48b3      	ldr	r0, [pc, #716]	; (8009068 <create_name+0x364>)
 8008d9a:	f7fe fce9 	bl	8007770 <chk_chr>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <create_name+0xa4>
 8008da4:	2306      	movs	r3, #6
 8008da6:	e15b      	b.n	8009060 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	1c5a      	adds	r2, r3, #1
 8008dac:	617a      	str	r2, [r7, #20]
 8008dae:	005b      	lsls	r3, r3, #1
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	4413      	add	r3, r2
 8008db4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008db6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008db8:	e7b4      	b.n	8008d24 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008dba:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	441a      	add	r2, r3
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008dc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dc8:	2b1f      	cmp	r3, #31
 8008dca:	d801      	bhi.n	8008dd0 <create_name+0xcc>
 8008dcc:	2304      	movs	r3, #4
 8008dce:	e000      	b.n	8008dd2 <create_name+0xce>
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008dd6:	e011      	b.n	8008dfc <create_name+0xf8>
		w = lfn[di - 1];
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008dde:	3b01      	subs	r3, #1
 8008de0:	005b      	lsls	r3, r3, #1
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	4413      	add	r3, r2
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008dea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dec:	2b20      	cmp	r3, #32
 8008dee:	d002      	beq.n	8008df6 <create_name+0xf2>
 8008df0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008df2:	2b2e      	cmp	r3, #46	; 0x2e
 8008df4:	d106      	bne.n	8008e04 <create_name+0x100>
		di--;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1ea      	bne.n	8008dd8 <create_name+0xd4>
 8008e02:	e000      	b.n	8008e06 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008e04:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	2200      	movs	r2, #0
 8008e10:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d101      	bne.n	8008e1c <create_name+0x118>
 8008e18:	2306      	movs	r3, #6
 8008e1a:	e121      	b.n	8009060 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	3324      	adds	r3, #36	; 0x24
 8008e20:	220b      	movs	r2, #11
 8008e22:	2120      	movs	r1, #32
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fe fc62 	bl	80076ee <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	61bb      	str	r3, [r7, #24]
 8008e2e:	e002      	b.n	8008e36 <create_name+0x132>
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	3301      	adds	r3, #1
 8008e34:	61bb      	str	r3, [r7, #24]
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	005b      	lsls	r3, r3, #1
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	881b      	ldrh	r3, [r3, #0]
 8008e40:	2b20      	cmp	r3, #32
 8008e42:	d0f5      	beq.n	8008e30 <create_name+0x12c>
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	005b      	lsls	r3, r3, #1
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	881b      	ldrh	r3, [r3, #0]
 8008e4e:	2b2e      	cmp	r3, #46	; 0x2e
 8008e50:	d0ee      	beq.n	8008e30 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d009      	beq.n	8008e6c <create_name+0x168>
 8008e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e5c:	f043 0303 	orr.w	r3, r3, #3
 8008e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008e64:	e002      	b.n	8008e6c <create_name+0x168>
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	617b      	str	r3, [r7, #20]
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d009      	beq.n	8008e86 <create_name+0x182>
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	005b      	lsls	r3, r3, #1
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	4413      	add	r3, r2
 8008e80:	881b      	ldrh	r3, [r3, #0]
 8008e82:	2b2e      	cmp	r3, #46	; 0x2e
 8008e84:	d1ef      	bne.n	8008e66 <create_name+0x162>

	i = b = 0; ni = 8;
 8008e86:	2300      	movs	r3, #0
 8008e88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	623b      	str	r3, [r7, #32]
 8008e90:	2308      	movs	r3, #8
 8008e92:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	1c5a      	adds	r2, r3, #1
 8008e98:	61ba      	str	r2, [r7, #24]
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	881b      	ldrh	r3, [r3, #0]
 8008ea2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008ea4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f000 8090 	beq.w	8008fcc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008eac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008eae:	2b20      	cmp	r3, #32
 8008eb0:	d006      	beq.n	8008ec0 <create_name+0x1bc>
 8008eb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008eb4:	2b2e      	cmp	r3, #46	; 0x2e
 8008eb6:	d10a      	bne.n	8008ece <create_name+0x1ca>
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d006      	beq.n	8008ece <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ec4:	f043 0303 	orr.w	r3, r3, #3
 8008ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008ecc:	e07d      	b.n	8008fca <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008ece:	6a3a      	ldr	r2, [r7, #32]
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d203      	bcs.n	8008ede <create_name+0x1da>
 8008ed6:	69ba      	ldr	r2, [r7, #24]
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d123      	bne.n	8008f26 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	2b0b      	cmp	r3, #11
 8008ee2:	d106      	bne.n	8008ef2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ee8:	f043 0303 	orr.w	r3, r3, #3
 8008eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008ef0:	e06f      	b.n	8008fd2 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008ef2:	69ba      	ldr	r2, [r7, #24]
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d005      	beq.n	8008f06 <create_name+0x202>
 8008efa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008efe:	f043 0303 	orr.w	r3, r3, #3
 8008f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008f06:	69ba      	ldr	r2, [r7, #24]
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d860      	bhi.n	8008fd0 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	61bb      	str	r3, [r7, #24]
 8008f12:	2308      	movs	r3, #8
 8008f14:	623b      	str	r3, [r7, #32]
 8008f16:	230b      	movs	r3, #11
 8008f18:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008f1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008f24:	e051      	b.n	8008fca <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008f26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f28:	2b7f      	cmp	r3, #127	; 0x7f
 8008f2a:	d914      	bls.n	8008f56 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008f2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f2e:	2100      	movs	r1, #0
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fe f9d5 	bl	80072e0 <ff_convert>
 8008f36:	4603      	mov	r3, r0
 8008f38:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008f3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d004      	beq.n	8008f4a <create_name+0x246>
 8008f40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f42:	3b80      	subs	r3, #128	; 0x80
 8008f44:	4a49      	ldr	r2, [pc, #292]	; (800906c <create_name+0x368>)
 8008f46:	5cd3      	ldrb	r3, [r2, r3]
 8008f48:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f4e:	f043 0302 	orr.w	r3, r3, #2
 8008f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008f56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d007      	beq.n	8008f6c <create_name+0x268>
 8008f5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f5e:	4619      	mov	r1, r3
 8008f60:	4843      	ldr	r0, [pc, #268]	; (8009070 <create_name+0x36c>)
 8008f62:	f7fe fc05 	bl	8007770 <chk_chr>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d008      	beq.n	8008f7e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008f6c:	235f      	movs	r3, #95	; 0x5f
 8008f6e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008f70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f74:	f043 0303 	orr.w	r3, r3, #3
 8008f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f7c:	e01b      	b.n	8008fb6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008f7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f80:	2b40      	cmp	r3, #64	; 0x40
 8008f82:	d909      	bls.n	8008f98 <create_name+0x294>
 8008f84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f86:	2b5a      	cmp	r3, #90	; 0x5a
 8008f88:	d806      	bhi.n	8008f98 <create_name+0x294>
					b |= 2;
 8008f8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f8e:	f043 0302 	orr.w	r3, r3, #2
 8008f92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008f96:	e00e      	b.n	8008fb6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008f98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f9a:	2b60      	cmp	r3, #96	; 0x60
 8008f9c:	d90b      	bls.n	8008fb6 <create_name+0x2b2>
 8008f9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008fa0:	2b7a      	cmp	r3, #122	; 0x7a
 8008fa2:	d808      	bhi.n	8008fb6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008fa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008fa8:	f043 0301 	orr.w	r3, r3, #1
 8008fac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008fb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008fb2:	3b20      	subs	r3, #32
 8008fb4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008fb6:	6a3b      	ldr	r3, [r7, #32]
 8008fb8:	1c5a      	adds	r2, r3, #1
 8008fba:	623a      	str	r2, [r7, #32]
 8008fbc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008fbe:	b2d1      	uxtb	r1, r2
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	460a      	mov	r2, r1
 8008fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008fca:	e763      	b.n	8008e94 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008fcc:	bf00      	nop
 8008fce:	e000      	b.n	8008fd2 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8008fd0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008fd8:	2be5      	cmp	r3, #229	; 0xe5
 8008fda:	d103      	bne.n	8008fe4 <create_name+0x2e0>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2205      	movs	r2, #5
 8008fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	2b08      	cmp	r3, #8
 8008fe8:	d104      	bne.n	8008ff4 <create_name+0x2f0>
 8008fea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008ff4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ff8:	f003 030c 	and.w	r3, r3, #12
 8008ffc:	2b0c      	cmp	r3, #12
 8008ffe:	d005      	beq.n	800900c <create_name+0x308>
 8009000:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009004:	f003 0303 	and.w	r3, r3, #3
 8009008:	2b03      	cmp	r3, #3
 800900a:	d105      	bne.n	8009018 <create_name+0x314>
 800900c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009010:	f043 0302 	orr.w	r3, r3, #2
 8009014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800901c:	f003 0302 	and.w	r3, r3, #2
 8009020:	2b00      	cmp	r3, #0
 8009022:	d117      	bne.n	8009054 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009024:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009028:	f003 0303 	and.w	r3, r3, #3
 800902c:	2b01      	cmp	r3, #1
 800902e:	d105      	bne.n	800903c <create_name+0x338>
 8009030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009034:	f043 0310 	orr.w	r3, r3, #16
 8009038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800903c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009040:	f003 030c 	and.w	r3, r3, #12
 8009044:	2b04      	cmp	r3, #4
 8009046:	d105      	bne.n	8009054 <create_name+0x350>
 8009048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800904c:	f043 0308 	orr.w	r3, r3, #8
 8009050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800905a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800905e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009060:	4618      	mov	r0, r3
 8009062:	3728      	adds	r7, #40	; 0x28
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	0800b058 	.word	0x0800b058
 800906c:	0800b484 	.word	0x0800b484
 8009070:	0800b064 	.word	0x0800b064

08009074 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009088:	e002      	b.n	8009090 <follow_path+0x1c>
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	3301      	adds	r3, #1
 800908e:	603b      	str	r3, [r7, #0]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	2b2f      	cmp	r3, #47	; 0x2f
 8009096:	d0f8      	beq.n	800908a <follow_path+0x16>
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	2b5c      	cmp	r3, #92	; 0x5c
 800909e:	d0f4      	beq.n	800908a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	2200      	movs	r2, #0
 80090a4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	2b1f      	cmp	r3, #31
 80090ac:	d80a      	bhi.n	80090c4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2280      	movs	r2, #128	; 0x80
 80090b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80090b6:	2100      	movs	r1, #0
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7ff f8fe 	bl	80082ba <dir_sdi>
 80090be:	4603      	mov	r3, r0
 80090c0:	75fb      	strb	r3, [r7, #23]
 80090c2:	e048      	b.n	8009156 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80090c4:	463b      	mov	r3, r7
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7ff fe1b 	bl	8008d04 <create_name>
 80090ce:	4603      	mov	r3, r0
 80090d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80090d2:	7dfb      	ldrb	r3, [r7, #23]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d139      	bne.n	800914c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7ff fc5b 	bl	8008994 <dir_find>
 80090de:	4603      	mov	r3, r0
 80090e0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80090e8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80090ea:	7dfb      	ldrb	r3, [r7, #23]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00a      	beq.n	8009106 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80090f0:	7dfb      	ldrb	r3, [r7, #23]
 80090f2:	2b04      	cmp	r3, #4
 80090f4:	d12c      	bne.n	8009150 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80090f6:	7afb      	ldrb	r3, [r7, #11]
 80090f8:	f003 0304 	and.w	r3, r3, #4
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d127      	bne.n	8009150 <follow_path+0xdc>
 8009100:	2305      	movs	r3, #5
 8009102:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009104:	e024      	b.n	8009150 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009106:	7afb      	ldrb	r3, [r7, #11]
 8009108:	f003 0304 	and.w	r3, r3, #4
 800910c:	2b00      	cmp	r3, #0
 800910e:	d121      	bne.n	8009154 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	799b      	ldrb	r3, [r3, #6]
 8009114:	f003 0310 	and.w	r3, r3, #16
 8009118:	2b00      	cmp	r3, #0
 800911a:	d102      	bne.n	8009122 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800911c:	2305      	movs	r3, #5
 800911e:	75fb      	strb	r3, [r7, #23]
 8009120:	e019      	b.n	8009156 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	8992      	ldrh	r2, [r2, #12]
 8009130:	fbb3 f0f2 	udiv	r0, r3, r2
 8009134:	fb02 f200 	mul.w	r2, r2, r0
 8009138:	1a9b      	subs	r3, r3, r2
 800913a:	440b      	add	r3, r1
 800913c:	4619      	mov	r1, r3
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f7ff fa61 	bl	8008606 <ld_clust>
 8009144:	4602      	mov	r2, r0
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800914a:	e7bb      	b.n	80090c4 <follow_path+0x50>
			if (res != FR_OK) break;
 800914c:	bf00      	nop
 800914e:	e002      	b.n	8009156 <follow_path+0xe2>
				break;
 8009150:	bf00      	nop
 8009152:	e000      	b.n	8009156 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009154:	bf00      	nop
			}
		}
	}

	return res;
 8009156:	7dfb      	ldrb	r3, [r7, #23]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009160:	b480      	push	{r7}
 8009162:	b087      	sub	sp, #28
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009168:	f04f 33ff 	mov.w	r3, #4294967295
 800916c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d031      	beq.n	80091da <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	617b      	str	r3, [r7, #20]
 800917c:	e002      	b.n	8009184 <get_ldnumber+0x24>
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	3301      	adds	r3, #1
 8009182:	617b      	str	r3, [r7, #20]
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	2b1f      	cmp	r3, #31
 800918a:	d903      	bls.n	8009194 <get_ldnumber+0x34>
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	2b3a      	cmp	r3, #58	; 0x3a
 8009192:	d1f4      	bne.n	800917e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	2b3a      	cmp	r3, #58	; 0x3a
 800919a:	d11c      	bne.n	80091d6 <get_ldnumber+0x76>
			tp = *path;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	1c5a      	adds	r2, r3, #1
 80091a6:	60fa      	str	r2, [r7, #12]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	3b30      	subs	r3, #48	; 0x30
 80091ac:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	2b09      	cmp	r3, #9
 80091b2:	d80e      	bhi.n	80091d2 <get_ldnumber+0x72>
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d10a      	bne.n	80091d2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d107      	bne.n	80091d2 <get_ldnumber+0x72>
					vol = (int)i;
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	3301      	adds	r3, #1
 80091ca:	617b      	str	r3, [r7, #20]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	e002      	b.n	80091dc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80091d6:	2300      	movs	r3, #0
 80091d8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80091da:	693b      	ldr	r3, [r7, #16]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	371c      	adds	r7, #28
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	70da      	strb	r2, [r3, #3]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f04f 32ff 	mov.w	r2, #4294967295
 80091fe:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f7fe fc80 	bl	8007b08 <move_window>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <check_fs+0x2a>
 800920e:	2304      	movs	r3, #4
 8009210:	e038      	b.n	8009284 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	3338      	adds	r3, #56	; 0x38
 8009216:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe f9c4 	bl	80075a8 <ld_word>
 8009220:	4603      	mov	r3, r0
 8009222:	461a      	mov	r2, r3
 8009224:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009228:	429a      	cmp	r2, r3
 800922a:	d001      	beq.n	8009230 <check_fs+0x48>
 800922c:	2303      	movs	r3, #3
 800922e:	e029      	b.n	8009284 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009236:	2be9      	cmp	r3, #233	; 0xe9
 8009238:	d009      	beq.n	800924e <check_fs+0x66>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009240:	2beb      	cmp	r3, #235	; 0xeb
 8009242:	d11e      	bne.n	8009282 <check_fs+0x9a>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800924a:	2b90      	cmp	r3, #144	; 0x90
 800924c:	d119      	bne.n	8009282 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	3338      	adds	r3, #56	; 0x38
 8009252:	3336      	adds	r3, #54	; 0x36
 8009254:	4618      	mov	r0, r3
 8009256:	f7fe f9bf 	bl	80075d8 <ld_dword>
 800925a:	4603      	mov	r3, r0
 800925c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009260:	4a0a      	ldr	r2, [pc, #40]	; (800928c <check_fs+0xa4>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d101      	bne.n	800926a <check_fs+0x82>
 8009266:	2300      	movs	r3, #0
 8009268:	e00c      	b.n	8009284 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	3338      	adds	r3, #56	; 0x38
 800926e:	3352      	adds	r3, #82	; 0x52
 8009270:	4618      	mov	r0, r3
 8009272:	f7fe f9b1 	bl	80075d8 <ld_dword>
 8009276:	4602      	mov	r2, r0
 8009278:	4b05      	ldr	r3, [pc, #20]	; (8009290 <check_fs+0xa8>)
 800927a:	429a      	cmp	r2, r3
 800927c:	d101      	bne.n	8009282 <check_fs+0x9a>
 800927e:	2300      	movs	r3, #0
 8009280:	e000      	b.n	8009284 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009282:	2302      	movs	r3, #2
}
 8009284:	4618      	mov	r0, r3
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	00544146 	.word	0x00544146
 8009290:	33544146 	.word	0x33544146

08009294 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b096      	sub	sp, #88	; 0x58
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	4613      	mov	r3, r2
 80092a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	2200      	movs	r2, #0
 80092a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f7ff ff59 	bl	8009160 <get_ldnumber>
 80092ae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80092b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	da01      	bge.n	80092ba <find_volume+0x26>
 80092b6:	230b      	movs	r3, #11
 80092b8:	e268      	b.n	800978c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80092ba:	4ab0      	ldr	r2, [pc, #704]	; (800957c <find_volume+0x2e8>)
 80092bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092c2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80092c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <find_volume+0x3a>
 80092ca:	230c      	movs	r3, #12
 80092cc:	e25e      	b.n	800978c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092d2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80092d4:	79fb      	ldrb	r3, [r7, #7]
 80092d6:	f023 0301 	bic.w	r3, r3, #1
 80092da:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80092dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d01a      	beq.n	800931a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80092e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e6:	785b      	ldrb	r3, [r3, #1]
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fe f8bf 	bl	800746c <disk_status>
 80092ee:	4603      	mov	r3, r0
 80092f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80092f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80092f8:	f003 0301 	and.w	r3, r3, #1
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10c      	bne.n	800931a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009300:	79fb      	ldrb	r3, [r7, #7]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d007      	beq.n	8009316 <find_volume+0x82>
 8009306:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800930a:	f003 0304 	and.w	r3, r3, #4
 800930e:	2b00      	cmp	r3, #0
 8009310:	d001      	beq.n	8009316 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009312:	230a      	movs	r3, #10
 8009314:	e23a      	b.n	800978c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8009316:	2300      	movs	r3, #0
 8009318:	e238      	b.n	800978c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800931a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931c:	2200      	movs	r2, #0
 800931e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009322:	b2da      	uxtb	r2, r3
 8009324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009326:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932a:	785b      	ldrb	r3, [r3, #1]
 800932c:	4618      	mov	r0, r3
 800932e:	f7fe f8b7 	bl	80074a0 <disk_initialize>
 8009332:	4603      	mov	r3, r0
 8009334:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009338:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800933c:	f003 0301 	and.w	r3, r3, #1
 8009340:	2b00      	cmp	r3, #0
 8009342:	d001      	beq.n	8009348 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009344:	2303      	movs	r3, #3
 8009346:	e221      	b.n	800978c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009348:	79fb      	ldrb	r3, [r7, #7]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d007      	beq.n	800935e <find_volume+0xca>
 800934e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009352:	f003 0304 	and.w	r3, r3, #4
 8009356:	2b00      	cmp	r3, #0
 8009358:	d001      	beq.n	800935e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800935a:	230a      	movs	r3, #10
 800935c:	e216      	b.n	800978c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800935e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009360:	7858      	ldrb	r0, [r3, #1]
 8009362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009364:	330c      	adds	r3, #12
 8009366:	461a      	mov	r2, r3
 8009368:	2102      	movs	r1, #2
 800936a:	f7fe f8ff 	bl	800756c <disk_ioctl>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <find_volume+0xe4>
 8009374:	2301      	movs	r3, #1
 8009376:	e209      	b.n	800978c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937a:	899b      	ldrh	r3, [r3, #12]
 800937c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009380:	d80d      	bhi.n	800939e <find_volume+0x10a>
 8009382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009384:	899b      	ldrh	r3, [r3, #12]
 8009386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800938a:	d308      	bcc.n	800939e <find_volume+0x10a>
 800938c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938e:	899b      	ldrh	r3, [r3, #12]
 8009390:	461a      	mov	r2, r3
 8009392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009394:	899b      	ldrh	r3, [r3, #12]
 8009396:	3b01      	subs	r3, #1
 8009398:	4013      	ands	r3, r2
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <find_volume+0x10e>
 800939e:	2301      	movs	r3, #1
 80093a0:	e1f4      	b.n	800978c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80093a2:	2300      	movs	r3, #0
 80093a4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80093a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80093a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80093aa:	f7ff ff1d 	bl	80091e8 <check_fs>
 80093ae:	4603      	mov	r3, r0
 80093b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80093b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d14b      	bne.n	8009454 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80093bc:	2300      	movs	r3, #0
 80093be:	643b      	str	r3, [r7, #64]	; 0x40
 80093c0:	e01f      	b.n	8009402 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80093c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80093c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093ca:	011b      	lsls	r3, r3, #4
 80093cc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80093d0:	4413      	add	r3, r2
 80093d2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80093d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d6:	3304      	adds	r3, #4
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d006      	beq.n	80093ec <find_volume+0x158>
 80093de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e0:	3308      	adds	r3, #8
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe f8f8 	bl	80075d8 <ld_dword>
 80093e8:	4602      	mov	r2, r0
 80093ea:	e000      	b.n	80093ee <find_volume+0x15a>
 80093ec:	2200      	movs	r2, #0
 80093ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80093f6:	440b      	add	r3, r1
 80093f8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80093fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093fe:	3301      	adds	r3, #1
 8009400:	643b      	str	r3, [r7, #64]	; 0x40
 8009402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009404:	2b03      	cmp	r3, #3
 8009406:	d9dc      	bls.n	80093c2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009408:	2300      	movs	r3, #0
 800940a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800940c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800940e:	2b00      	cmp	r3, #0
 8009410:	d002      	beq.n	8009418 <find_volume+0x184>
 8009412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009414:	3b01      	subs	r3, #1
 8009416:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009420:	4413      	add	r3, r2
 8009422:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009426:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800942a:	2b00      	cmp	r3, #0
 800942c:	d005      	beq.n	800943a <find_volume+0x1a6>
 800942e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009430:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009432:	f7ff fed9 	bl	80091e8 <check_fs>
 8009436:	4603      	mov	r3, r0
 8009438:	e000      	b.n	800943c <find_volume+0x1a8>
 800943a:	2303      	movs	r3, #3
 800943c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009440:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009444:	2b01      	cmp	r3, #1
 8009446:	d905      	bls.n	8009454 <find_volume+0x1c0>
 8009448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800944a:	3301      	adds	r3, #1
 800944c:	643b      	str	r3, [r7, #64]	; 0x40
 800944e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009450:	2b03      	cmp	r3, #3
 8009452:	d9e1      	bls.n	8009418 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009454:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009458:	2b04      	cmp	r3, #4
 800945a:	d101      	bne.n	8009460 <find_volume+0x1cc>
 800945c:	2301      	movs	r3, #1
 800945e:	e195      	b.n	800978c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009460:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009464:	2b01      	cmp	r3, #1
 8009466:	d901      	bls.n	800946c <find_volume+0x1d8>
 8009468:	230d      	movs	r3, #13
 800946a:	e18f      	b.n	800978c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800946c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946e:	3338      	adds	r3, #56	; 0x38
 8009470:	330b      	adds	r3, #11
 8009472:	4618      	mov	r0, r3
 8009474:	f7fe f898 	bl	80075a8 <ld_word>
 8009478:	4603      	mov	r3, r0
 800947a:	461a      	mov	r2, r3
 800947c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947e:	899b      	ldrh	r3, [r3, #12]
 8009480:	429a      	cmp	r2, r3
 8009482:	d001      	beq.n	8009488 <find_volume+0x1f4>
 8009484:	230d      	movs	r3, #13
 8009486:	e181      	b.n	800978c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948a:	3338      	adds	r3, #56	; 0x38
 800948c:	3316      	adds	r3, #22
 800948e:	4618      	mov	r0, r3
 8009490:	f7fe f88a 	bl	80075a8 <ld_word>
 8009494:	4603      	mov	r3, r0
 8009496:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800949a:	2b00      	cmp	r3, #0
 800949c:	d106      	bne.n	80094ac <find_volume+0x218>
 800949e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a0:	3338      	adds	r3, #56	; 0x38
 80094a2:	3324      	adds	r3, #36	; 0x24
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7fe f897 	bl	80075d8 <ld_dword>
 80094aa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80094ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094b0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80094b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80094b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80094bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094be:	789b      	ldrb	r3, [r3, #2]
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d005      	beq.n	80094d0 <find_volume+0x23c>
 80094c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c6:	789b      	ldrb	r3, [r3, #2]
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d001      	beq.n	80094d0 <find_volume+0x23c>
 80094cc:	230d      	movs	r3, #13
 80094ce:	e15d      	b.n	800978c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80094d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d2:	789b      	ldrb	r3, [r3, #2]
 80094d4:	461a      	mov	r2, r3
 80094d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d8:	fb02 f303 	mul.w	r3, r2, r3
 80094dc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80094de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80094ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ec:	895b      	ldrh	r3, [r3, #10]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d008      	beq.n	8009504 <find_volume+0x270>
 80094f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f4:	895b      	ldrh	r3, [r3, #10]
 80094f6:	461a      	mov	r2, r3
 80094f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fa:	895b      	ldrh	r3, [r3, #10]
 80094fc:	3b01      	subs	r3, #1
 80094fe:	4013      	ands	r3, r2
 8009500:	2b00      	cmp	r3, #0
 8009502:	d001      	beq.n	8009508 <find_volume+0x274>
 8009504:	230d      	movs	r3, #13
 8009506:	e141      	b.n	800978c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950a:	3338      	adds	r3, #56	; 0x38
 800950c:	3311      	adds	r3, #17
 800950e:	4618      	mov	r0, r3
 8009510:	f7fe f84a 	bl	80075a8 <ld_word>
 8009514:	4603      	mov	r3, r0
 8009516:	461a      	mov	r2, r3
 8009518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	891b      	ldrh	r3, [r3, #8]
 8009520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009522:	8992      	ldrh	r2, [r2, #12]
 8009524:	0952      	lsrs	r2, r2, #5
 8009526:	b292      	uxth	r2, r2
 8009528:	fbb3 f1f2 	udiv	r1, r3, r2
 800952c:	fb02 f201 	mul.w	r2, r2, r1
 8009530:	1a9b      	subs	r3, r3, r2
 8009532:	b29b      	uxth	r3, r3
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <find_volume+0x2a8>
 8009538:	230d      	movs	r3, #13
 800953a:	e127      	b.n	800978c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800953c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953e:	3338      	adds	r3, #56	; 0x38
 8009540:	3313      	adds	r3, #19
 8009542:	4618      	mov	r0, r3
 8009544:	f7fe f830 	bl	80075a8 <ld_word>
 8009548:	4603      	mov	r3, r0
 800954a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800954c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800954e:	2b00      	cmp	r3, #0
 8009550:	d106      	bne.n	8009560 <find_volume+0x2cc>
 8009552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009554:	3338      	adds	r3, #56	; 0x38
 8009556:	3320      	adds	r3, #32
 8009558:	4618      	mov	r0, r3
 800955a:	f7fe f83d 	bl	80075d8 <ld_dword>
 800955e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009562:	3338      	adds	r3, #56	; 0x38
 8009564:	330e      	adds	r3, #14
 8009566:	4618      	mov	r0, r3
 8009568:	f7fe f81e 	bl	80075a8 <ld_word>
 800956c:	4603      	mov	r3, r0
 800956e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009570:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009572:	2b00      	cmp	r3, #0
 8009574:	d104      	bne.n	8009580 <find_volume+0x2ec>
 8009576:	230d      	movs	r3, #13
 8009578:	e108      	b.n	800978c <find_volume+0x4f8>
 800957a:	bf00      	nop
 800957c:	20000108 	.word	0x20000108

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009580:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009584:	4413      	add	r3, r2
 8009586:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009588:	8911      	ldrh	r1, [r2, #8]
 800958a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800958c:	8992      	ldrh	r2, [r2, #12]
 800958e:	0952      	lsrs	r2, r2, #5
 8009590:	b292      	uxth	r2, r2
 8009592:	fbb1 f2f2 	udiv	r2, r1, r2
 8009596:	b292      	uxth	r2, r2
 8009598:	4413      	add	r3, r2
 800959a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800959c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800959e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d201      	bcs.n	80095a8 <find_volume+0x314>
 80095a4:	230d      	movs	r3, #13
 80095a6:	e0f1      	b.n	800978c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80095a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095b0:	8952      	ldrh	r2, [r2, #10]
 80095b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80095b6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80095b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d101      	bne.n	80095c2 <find_volume+0x32e>
 80095be:	230d      	movs	r3, #13
 80095c0:	e0e4      	b.n	800978c <find_volume+0x4f8>
		fmt = FS_FAT32;
 80095c2:	2303      	movs	r3, #3
 80095c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ca:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d802      	bhi.n	80095d8 <find_volume+0x344>
 80095d2:	2302      	movs	r3, #2
 80095d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80095d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095da:	f640 72f5 	movw	r2, #4085	; 0xff5
 80095de:	4293      	cmp	r3, r2
 80095e0:	d802      	bhi.n	80095e8 <find_volume+0x354>
 80095e2:	2301      	movs	r3, #1
 80095e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80095e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ea:	1c9a      	adds	r2, r3, #2
 80095ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ee:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80095f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095f4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80095f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80095f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095fa:	441a      	add	r2, r3
 80095fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fe:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009600:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009604:	441a      	add	r2, r3
 8009606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009608:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800960a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800960e:	2b03      	cmp	r3, #3
 8009610:	d11e      	bne.n	8009650 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009614:	3338      	adds	r3, #56	; 0x38
 8009616:	332a      	adds	r3, #42	; 0x2a
 8009618:	4618      	mov	r0, r3
 800961a:	f7fd ffc5 	bl	80075a8 <ld_word>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d001      	beq.n	8009628 <find_volume+0x394>
 8009624:	230d      	movs	r3, #13
 8009626:	e0b1      	b.n	800978c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962a:	891b      	ldrh	r3, [r3, #8]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <find_volume+0x3a0>
 8009630:	230d      	movs	r3, #13
 8009632:	e0ab      	b.n	800978c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009636:	3338      	adds	r3, #56	; 0x38
 8009638:	332c      	adds	r3, #44	; 0x2c
 800963a:	4618      	mov	r0, r3
 800963c:	f7fd ffcc 	bl	80075d8 <ld_dword>
 8009640:	4602      	mov	r2, r0
 8009642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009644:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009648:	69db      	ldr	r3, [r3, #28]
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	647b      	str	r3, [r7, #68]	; 0x44
 800964e:	e01f      	b.n	8009690 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009652:	891b      	ldrh	r3, [r3, #8]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d101      	bne.n	800965c <find_volume+0x3c8>
 8009658:	230d      	movs	r3, #13
 800965a:	e097      	b.n	800978c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800965c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009662:	441a      	add	r2, r3
 8009664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009666:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009668:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800966c:	2b02      	cmp	r3, #2
 800966e:	d103      	bne.n	8009678 <find_volume+0x3e4>
 8009670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009672:	69db      	ldr	r3, [r3, #28]
 8009674:	005b      	lsls	r3, r3, #1
 8009676:	e00a      	b.n	800968e <find_volume+0x3fa>
 8009678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967a:	69da      	ldr	r2, [r3, #28]
 800967c:	4613      	mov	r3, r2
 800967e:	005b      	lsls	r3, r3, #1
 8009680:	4413      	add	r3, r2
 8009682:	085a      	lsrs	r2, r3, #1
 8009684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009686:	69db      	ldr	r3, [r3, #28]
 8009688:	f003 0301 	and.w	r3, r3, #1
 800968c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800968e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009692:	6a1a      	ldr	r2, [r3, #32]
 8009694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009696:	899b      	ldrh	r3, [r3, #12]
 8009698:	4619      	mov	r1, r3
 800969a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800969c:	440b      	add	r3, r1
 800969e:	3b01      	subs	r3, #1
 80096a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80096a2:	8989      	ldrh	r1, [r1, #12]
 80096a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d201      	bcs.n	80096b0 <find_volume+0x41c>
 80096ac:	230d      	movs	r3, #13
 80096ae:	e06d      	b.n	800978c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80096b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b2:	f04f 32ff 	mov.w	r2, #4294967295
 80096b6:	619a      	str	r2, [r3, #24]
 80096b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ba:	699a      	ldr	r2, [r3, #24]
 80096bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096be:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80096c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c2:	2280      	movs	r2, #128	; 0x80
 80096c4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80096c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d149      	bne.n	8009762 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80096ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d0:	3338      	adds	r3, #56	; 0x38
 80096d2:	3330      	adds	r3, #48	; 0x30
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7fd ff67 	bl	80075a8 <ld_word>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d140      	bne.n	8009762 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80096e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096e2:	3301      	adds	r3, #1
 80096e4:	4619      	mov	r1, r3
 80096e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096e8:	f7fe fa0e 	bl	8007b08 <move_window>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d137      	bne.n	8009762 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80096f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f4:	2200      	movs	r2, #0
 80096f6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80096f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fa:	3338      	adds	r3, #56	; 0x38
 80096fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009700:	4618      	mov	r0, r3
 8009702:	f7fd ff51 	bl	80075a8 <ld_word>
 8009706:	4603      	mov	r3, r0
 8009708:	461a      	mov	r2, r3
 800970a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800970e:	429a      	cmp	r2, r3
 8009710:	d127      	bne.n	8009762 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009714:	3338      	adds	r3, #56	; 0x38
 8009716:	4618      	mov	r0, r3
 8009718:	f7fd ff5e 	bl	80075d8 <ld_dword>
 800971c:	4602      	mov	r2, r0
 800971e:	4b1d      	ldr	r3, [pc, #116]	; (8009794 <find_volume+0x500>)
 8009720:	429a      	cmp	r2, r3
 8009722:	d11e      	bne.n	8009762 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009726:	3338      	adds	r3, #56	; 0x38
 8009728:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800972c:	4618      	mov	r0, r3
 800972e:	f7fd ff53 	bl	80075d8 <ld_dword>
 8009732:	4602      	mov	r2, r0
 8009734:	4b18      	ldr	r3, [pc, #96]	; (8009798 <find_volume+0x504>)
 8009736:	429a      	cmp	r2, r3
 8009738:	d113      	bne.n	8009762 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800973a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973c:	3338      	adds	r3, #56	; 0x38
 800973e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009742:	4618      	mov	r0, r3
 8009744:	f7fd ff48 	bl	80075d8 <ld_dword>
 8009748:	4602      	mov	r2, r0
 800974a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974c:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800974e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009750:	3338      	adds	r3, #56	; 0x38
 8009752:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009756:	4618      	mov	r0, r3
 8009758:	f7fd ff3e 	bl	80075d8 <ld_dword>
 800975c:	4602      	mov	r2, r0
 800975e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009760:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009764:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009768:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800976a:	4b0c      	ldr	r3, [pc, #48]	; (800979c <find_volume+0x508>)
 800976c:	881b      	ldrh	r3, [r3, #0]
 800976e:	3301      	adds	r3, #1
 8009770:	b29a      	uxth	r2, r3
 8009772:	4b0a      	ldr	r3, [pc, #40]	; (800979c <find_volume+0x508>)
 8009774:	801a      	strh	r2, [r3, #0]
 8009776:	4b09      	ldr	r3, [pc, #36]	; (800979c <find_volume+0x508>)
 8009778:	881a      	ldrh	r2, [r3, #0]
 800977a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800977e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009780:	4a07      	ldr	r2, [pc, #28]	; (80097a0 <find_volume+0x50c>)
 8009782:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009784:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009786:	f7fe f957 	bl	8007a38 <clear_lock>
#endif
	return FR_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3758      	adds	r7, #88	; 0x58
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	41615252 	.word	0x41615252
 8009798:	61417272 	.word	0x61417272
 800979c:	2000010c 	.word	0x2000010c
 80097a0:	20000130 	.word	0x20000130

080097a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80097ae:	2309      	movs	r3, #9
 80097b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d01c      	beq.n	80097f2 <validate+0x4e>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d018      	beq.n	80097f2 <validate+0x4e>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d013      	beq.n	80097f2 <validate+0x4e>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	889a      	ldrh	r2, [r3, #4]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	88db      	ldrh	r3, [r3, #6]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d10c      	bne.n	80097f2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	785b      	ldrb	r3, [r3, #1]
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fd fe44 	bl	800746c <disk_status>
 80097e4:	4603      	mov	r3, r0
 80097e6:	f003 0301 	and.w	r3, r3, #1
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d101      	bne.n	80097f2 <validate+0x4e>
			res = FR_OK;
 80097ee:	2300      	movs	r3, #0
 80097f0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80097f2:	7bfb      	ldrb	r3, [r7, #15]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d102      	bne.n	80097fe <validate+0x5a>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	e000      	b.n	8009800 <validate+0x5c>
 80097fe:	2300      	movs	r3, #0
 8009800:	683a      	ldr	r2, [r7, #0]
 8009802:	6013      	str	r3, [r2, #0]
	return res;
 8009804:	7bfb      	ldrb	r3, [r7, #15]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
	...

08009810 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b088      	sub	sp, #32
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	4613      	mov	r3, r2
 800981c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009822:	f107 0310 	add.w	r3, r7, #16
 8009826:	4618      	mov	r0, r3
 8009828:	f7ff fc9a 	bl	8009160 <get_ldnumber>
 800982c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	2b00      	cmp	r3, #0
 8009832:	da01      	bge.n	8009838 <f_mount+0x28>
 8009834:	230b      	movs	r3, #11
 8009836:	e02b      	b.n	8009890 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009838:	4a17      	ldr	r2, [pc, #92]	; (8009898 <f_mount+0x88>)
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009840:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d005      	beq.n	8009854 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009848:	69b8      	ldr	r0, [r7, #24]
 800984a:	f7fe f8f5 	bl	8007a38 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	2200      	movs	r2, #0
 8009852:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d002      	beq.n	8009860 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2200      	movs	r2, #0
 800985e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	490d      	ldr	r1, [pc, #52]	; (8009898 <f_mount+0x88>)
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d002      	beq.n	8009876 <f_mount+0x66>
 8009870:	79fb      	ldrb	r3, [r7, #7]
 8009872:	2b01      	cmp	r3, #1
 8009874:	d001      	beq.n	800987a <f_mount+0x6a>
 8009876:	2300      	movs	r3, #0
 8009878:	e00a      	b.n	8009890 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800987a:	f107 010c 	add.w	r1, r7, #12
 800987e:	f107 0308 	add.w	r3, r7, #8
 8009882:	2200      	movs	r2, #0
 8009884:	4618      	mov	r0, r3
 8009886:	f7ff fd05 	bl	8009294 <find_volume>
 800988a:	4603      	mov	r3, r0
 800988c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800988e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3720      	adds	r7, #32
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	20000108 	.word	0x20000108

0800989c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b09a      	sub	sp, #104	; 0x68
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	4613      	mov	r3, r2
 80098a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <f_open+0x18>
 80098b0:	2309      	movs	r3, #9
 80098b2:	e1bb      	b.n	8009c2c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80098b4:	79fb      	ldrb	r3, [r7, #7]
 80098b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80098bc:	79fa      	ldrb	r2, [r7, #7]
 80098be:	f107 0114 	add.w	r1, r7, #20
 80098c2:	f107 0308 	add.w	r3, r7, #8
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7ff fce4 	bl	8009294 <find_volume>
 80098cc:	4603      	mov	r3, r0
 80098ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80098d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f040 819f 	bne.w	8009c1a <f_open+0x37e>
		dj.obj.fs = fs;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	f107 0318 	add.w	r3, r7, #24
 80098e6:	4611      	mov	r1, r2
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7ff fbc3 	bl	8009074 <follow_path>
 80098ee:	4603      	mov	r3, r0
 80098f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80098f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d11a      	bne.n	8009932 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80098fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009900:	b25b      	sxtb	r3, r3
 8009902:	2b00      	cmp	r3, #0
 8009904:	da03      	bge.n	800990e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009906:	2306      	movs	r3, #6
 8009908:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800990c:	e011      	b.n	8009932 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800990e:	79fb      	ldrb	r3, [r7, #7]
 8009910:	f023 0301 	bic.w	r3, r3, #1
 8009914:	2b00      	cmp	r3, #0
 8009916:	bf14      	ite	ne
 8009918:	2301      	movne	r3, #1
 800991a:	2300      	moveq	r3, #0
 800991c:	b2db      	uxtb	r3, r3
 800991e:	461a      	mov	r2, r3
 8009920:	f107 0318 	add.w	r3, r7, #24
 8009924:	4611      	mov	r1, r2
 8009926:	4618      	mov	r0, r3
 8009928:	f7fd ff3e 	bl	80077a8 <chk_lock>
 800992c:	4603      	mov	r3, r0
 800992e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009932:	79fb      	ldrb	r3, [r7, #7]
 8009934:	f003 031c 	and.w	r3, r3, #28
 8009938:	2b00      	cmp	r3, #0
 800993a:	d07f      	beq.n	8009a3c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800993c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009940:	2b00      	cmp	r3, #0
 8009942:	d017      	beq.n	8009974 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009944:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009948:	2b04      	cmp	r3, #4
 800994a:	d10e      	bne.n	800996a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800994c:	f7fd ff88 	bl	8007860 <enq_lock>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d006      	beq.n	8009964 <f_open+0xc8>
 8009956:	f107 0318 	add.w	r3, r7, #24
 800995a:	4618      	mov	r0, r3
 800995c:	f7ff f8da 	bl	8008b14 <dir_register>
 8009960:	4603      	mov	r3, r0
 8009962:	e000      	b.n	8009966 <f_open+0xca>
 8009964:	2312      	movs	r3, #18
 8009966:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800996a:	79fb      	ldrb	r3, [r7, #7]
 800996c:	f043 0308 	orr.w	r3, r3, #8
 8009970:	71fb      	strb	r3, [r7, #7]
 8009972:	e010      	b.n	8009996 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009974:	7fbb      	ldrb	r3, [r7, #30]
 8009976:	f003 0311 	and.w	r3, r3, #17
 800997a:	2b00      	cmp	r3, #0
 800997c:	d003      	beq.n	8009986 <f_open+0xea>
					res = FR_DENIED;
 800997e:	2307      	movs	r3, #7
 8009980:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009984:	e007      	b.n	8009996 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009986:	79fb      	ldrb	r3, [r7, #7]
 8009988:	f003 0304 	and.w	r3, r3, #4
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <f_open+0xfa>
 8009990:	2308      	movs	r3, #8
 8009992:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009996:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800999a:	2b00      	cmp	r3, #0
 800999c:	d168      	bne.n	8009a70 <f_open+0x1d4>
 800999e:	79fb      	ldrb	r3, [r7, #7]
 80099a0:	f003 0308 	and.w	r3, r3, #8
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d063      	beq.n	8009a70 <f_open+0x1d4>
				dw = GET_FATTIME();
 80099a8:	f7fd fb14 	bl	8006fd4 <get_fattime>
 80099ac:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80099ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b0:	330e      	adds	r3, #14
 80099b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fd fe4d 	bl	8007654 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80099ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099bc:	3316      	adds	r3, #22
 80099be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7fd fe47 	bl	8007654 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80099c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c8:	330b      	adds	r3, #11
 80099ca:	2220      	movs	r2, #32
 80099cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099d2:	4611      	mov	r1, r2
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7fe fe16 	bl	8008606 <ld_clust>
 80099da:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099e0:	2200      	movs	r2, #0
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fe fe2e 	bl	8008644 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80099e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ea:	331c      	adds	r3, #28
 80099ec:	2100      	movs	r1, #0
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fd fe30 	bl	8007654 <st_dword>
					fs->wflag = 1;
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	2201      	movs	r2, #1
 80099f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80099fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d037      	beq.n	8009a70 <f_open+0x1d4>
						dw = fs->winsect;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a04:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8009a06:	f107 0318 	add.w	r3, r7, #24
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fe fb1e 	bl	8008050 <remove_chain>
 8009a14:	4603      	mov	r3, r0
 8009a16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8009a1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d126      	bne.n	8009a70 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7fe f86e 	bl	8007b08 <move_window>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a36:	3a01      	subs	r2, #1
 8009a38:	615a      	str	r2, [r3, #20]
 8009a3a:	e019      	b.n	8009a70 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009a3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d115      	bne.n	8009a70 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009a44:	7fbb      	ldrb	r3, [r7, #30]
 8009a46:	f003 0310 	and.w	r3, r3, #16
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d003      	beq.n	8009a56 <f_open+0x1ba>
					res = FR_NO_FILE;
 8009a4e:	2304      	movs	r3, #4
 8009a50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009a54:	e00c      	b.n	8009a70 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009a56:	79fb      	ldrb	r3, [r7, #7]
 8009a58:	f003 0302 	and.w	r3, r3, #2
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d007      	beq.n	8009a70 <f_open+0x1d4>
 8009a60:	7fbb      	ldrb	r3, [r7, #30]
 8009a62:	f003 0301 	and.w	r3, r3, #1
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d002      	beq.n	8009a70 <f_open+0x1d4>
						res = FR_DENIED;
 8009a6a:	2307      	movs	r3, #7
 8009a6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009a70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d128      	bne.n	8009aca <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009a78:	79fb      	ldrb	r3, [r7, #7]
 8009a7a:	f003 0308 	and.w	r3, r3, #8
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009a82:	79fb      	ldrb	r3, [r7, #7]
 8009a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a88:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009a92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009a98:	79fb      	ldrb	r3, [r7, #7]
 8009a9a:	f023 0301 	bic.w	r3, r3, #1
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	bf14      	ite	ne
 8009aa2:	2301      	movne	r3, #1
 8009aa4:	2300      	moveq	r3, #0
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	f107 0318 	add.w	r3, r7, #24
 8009aae:	4611      	mov	r1, r2
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7fd fef7 	bl	80078a4 <inc_lock>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	691b      	ldr	r3, [r3, #16]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d102      	bne.n	8009aca <f_open+0x22e>
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009aca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	f040 80a3 	bne.w	8009c1a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ad8:	4611      	mov	r1, r2
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fe fd93 	bl	8008606 <ld_clust>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae8:	331c      	adds	r3, #28
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fd fd74 	bl	80075d8 <ld_dword>
 8009af0:	4602      	mov	r2, r0
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009afc:	697a      	ldr	r2, [r7, #20]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	88da      	ldrh	r2, [r3, #6]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	79fa      	ldrb	r2, [r7, #7]
 8009b0e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2200      	movs	r2, #0
 8009b14:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	3330      	adds	r3, #48	; 0x30
 8009b26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7fd fdde 	bl	80076ee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009b32:	79fb      	ldrb	r3, [r7, #7]
 8009b34:	f003 0320 	and.w	r3, r3, #32
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d06e      	beq.n	8009c1a <f_open+0x37e>
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d06a      	beq.n	8009c1a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	68da      	ldr	r2, [r3, #12]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	895b      	ldrh	r3, [r3, #10]
 8009b50:	461a      	mov	r2, r3
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	899b      	ldrh	r3, [r3, #12]
 8009b56:	fb03 f302 	mul.w	r3, r3, r2
 8009b5a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b68:	e016      	b.n	8009b98 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7fe f887 	bl	8007c82 <get_fat>
 8009b74:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d802      	bhi.n	8009b82 <f_open+0x2e6>
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b88:	d102      	bne.n	8009b90 <f_open+0x2f4>
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009b90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d103      	bne.n	8009ba8 <f_open+0x30c>
 8009ba0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d8e0      	bhi.n	8009b6a <f_open+0x2ce>
				}
				fp->clust = clst;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009bac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009bae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d131      	bne.n	8009c1a <f_open+0x37e>
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	899b      	ldrh	r3, [r3, #12]
 8009bba:	461a      	mov	r2, r3
 8009bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bc2:	fb02 f201 	mul.w	r2, r2, r1
 8009bc6:	1a9b      	subs	r3, r3, r2
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d026      	beq.n	8009c1a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7fe f837 	bl	8007c44 <clust2sect>
 8009bd6:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d103      	bne.n	8009be6 <f_open+0x34a>
						res = FR_INT_ERR;
 8009bde:	2302      	movs	r3, #2
 8009be0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009be4:	e019      	b.n	8009c1a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	899b      	ldrh	r3, [r3, #12]
 8009bea:	461a      	mov	r2, r3
 8009bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bee:	fbb3 f2f2 	udiv	r2, r3, r2
 8009bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bf4:	441a      	add	r2, r3
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	7858      	ldrb	r0, [r3, #1]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6a1a      	ldr	r2, [r3, #32]
 8009c08:	2301      	movs	r3, #1
 8009c0a:	f7fd fc6f 	bl	80074ec <disk_read>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d002      	beq.n	8009c1a <f_open+0x37e>
 8009c14:	2301      	movs	r3, #1
 8009c16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009c1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d002      	beq.n	8009c28 <f_open+0x38c>
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009c28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3768      	adds	r7, #104	; 0x68
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b08c      	sub	sp, #48	; 0x30
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
 8009c40:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f107 0210 	add.w	r2, r7, #16
 8009c52:	4611      	mov	r1, r2
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7ff fda5 	bl	80097a4 <validate>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009c60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d107      	bne.n	8009c78 <f_write+0x44>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	7d5b      	ldrb	r3, [r3, #21]
 8009c6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009c70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d002      	beq.n	8009c7e <f_write+0x4a>
 8009c78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c7c:	e16a      	b.n	8009f54 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	7d1b      	ldrb	r3, [r3, #20]
 8009c82:	f003 0302 	and.w	r3, r3, #2
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <f_write+0x5a>
 8009c8a:	2307      	movs	r3, #7
 8009c8c:	e162      	b.n	8009f54 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	699a      	ldr	r2, [r3, #24]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	441a      	add	r2, r3
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	699b      	ldr	r3, [r3, #24]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	f080 814c 	bcs.w	8009f38 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	43db      	mvns	r3, r3
 8009ca6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009ca8:	e146      	b.n	8009f38 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	699b      	ldr	r3, [r3, #24]
 8009cae:	693a      	ldr	r2, [r7, #16]
 8009cb0:	8992      	ldrh	r2, [r2, #12]
 8009cb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8009cb6:	fb02 f201 	mul.w	r2, r2, r1
 8009cba:	1a9b      	subs	r3, r3, r2
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f040 80f1 	bne.w	8009ea4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	693a      	ldr	r2, [r7, #16]
 8009cc8:	8992      	ldrh	r2, [r2, #12]
 8009cca:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	8952      	ldrh	r2, [r2, #10]
 8009cd2:	3a01      	subs	r2, #1
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d143      	bne.n	8009d66 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	699b      	ldr	r3, [r3, #24]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10c      	bne.n	8009d00 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d11a      	bne.n	8009d28 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fe fa0f 	bl	800811a <create_chain>
 8009cfc:	62b8      	str	r0, [r7, #40]	; 0x28
 8009cfe:	e013      	b.n	8009d28 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d007      	beq.n	8009d18 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	699b      	ldr	r3, [r3, #24]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f7fe fa9b 	bl	800824a <clmt_clust>
 8009d14:	62b8      	str	r0, [r7, #40]	; 0x28
 8009d16:	e007      	b.n	8009d28 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	69db      	ldr	r3, [r3, #28]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	4610      	mov	r0, r2
 8009d22:	f7fe f9fa 	bl	800811a <create_chain>
 8009d26:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f000 8109 	beq.w	8009f42 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d104      	bne.n	8009d40 <f_write+0x10c>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2202      	movs	r2, #2
 8009d3a:	755a      	strb	r2, [r3, #21]
 8009d3c:	2302      	movs	r3, #2
 8009d3e:	e109      	b.n	8009f54 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d46:	d104      	bne.n	8009d52 <f_write+0x11e>
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	755a      	strb	r2, [r3, #21]
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e100      	b.n	8009f54 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d56:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d102      	bne.n	8009d66 <f_write+0x132>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d64:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	7d1b      	ldrb	r3, [r3, #20]
 8009d6a:	b25b      	sxtb	r3, r3
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	da18      	bge.n	8009da2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	7858      	ldrb	r0, [r3, #1]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	6a1a      	ldr	r2, [r3, #32]
 8009d7e:	2301      	movs	r3, #1
 8009d80:	f7fd fbd4 	bl	800752c <disk_write>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d004      	beq.n	8009d94 <f_write+0x160>
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	755a      	strb	r2, [r3, #21]
 8009d90:	2301      	movs	r3, #1
 8009d92:	e0df      	b.n	8009f54 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	7d1b      	ldrb	r3, [r3, #20]
 8009d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d9c:	b2da      	uxtb	r2, r3
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	69db      	ldr	r3, [r3, #28]
 8009da8:	4619      	mov	r1, r3
 8009daa:	4610      	mov	r0, r2
 8009dac:	f7fd ff4a 	bl	8007c44 <clust2sect>
 8009db0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d104      	bne.n	8009dc2 <f_write+0x18e>
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2202      	movs	r2, #2
 8009dbc:	755a      	strb	r2, [r3, #21]
 8009dbe:	2302      	movs	r3, #2
 8009dc0:	e0c8      	b.n	8009f54 <f_write+0x320>
			sect += csect;
 8009dc2:	697a      	ldr	r2, [r7, #20]
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	899b      	ldrh	r3, [r3, #12]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dd6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009dd8:	6a3b      	ldr	r3, [r7, #32]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d043      	beq.n	8009e66 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009dde:	69ba      	ldr	r2, [r7, #24]
 8009de0:	6a3b      	ldr	r3, [r7, #32]
 8009de2:	4413      	add	r3, r2
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	8952      	ldrh	r2, [r2, #10]
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d905      	bls.n	8009df8 <f_write+0x1c4>
					cc = fs->csize - csect;
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	895b      	ldrh	r3, [r3, #10]
 8009df0:	461a      	mov	r2, r3
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	1ad3      	subs	r3, r2, r3
 8009df6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	7858      	ldrb	r0, [r3, #1]
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	697a      	ldr	r2, [r7, #20]
 8009e00:	69f9      	ldr	r1, [r7, #28]
 8009e02:	f7fd fb93 	bl	800752c <disk_write>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d004      	beq.n	8009e16 <f_write+0x1e2>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	755a      	strb	r2, [r3, #21]
 8009e12:	2301      	movs	r3, #1
 8009e14:	e09e      	b.n	8009f54 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6a1a      	ldr	r2, [r3, #32]
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	6a3a      	ldr	r2, [r7, #32]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d918      	bls.n	8009e56 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6a1a      	ldr	r2, [r3, #32]
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	8992      	ldrh	r2, [r2, #12]
 8009e36:	fb02 f303 	mul.w	r3, r2, r3
 8009e3a:	69fa      	ldr	r2, [r7, #28]
 8009e3c:	18d1      	adds	r1, r2, r3
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	899b      	ldrh	r3, [r3, #12]
 8009e42:	461a      	mov	r2, r3
 8009e44:	f7fd fc32 	bl	80076ac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	7d1b      	ldrb	r3, [r3, #20]
 8009e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	899b      	ldrh	r3, [r3, #12]
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	fb02 f303 	mul.w	r3, r2, r3
 8009e62:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009e64:	e04b      	b.n	8009efe <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6a1b      	ldr	r3, [r3, #32]
 8009e6a:	697a      	ldr	r2, [r7, #20]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d016      	beq.n	8009e9e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	699a      	ldr	r2, [r3, #24]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d210      	bcs.n	8009e9e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	7858      	ldrb	r0, [r3, #1]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e86:	2301      	movs	r3, #1
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	f7fd fb2f 	bl	80074ec <disk_read>
 8009e8e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d004      	beq.n	8009e9e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2201      	movs	r2, #1
 8009e98:	755a      	strb	r2, [r3, #21]
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e05a      	b.n	8009f54 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	697a      	ldr	r2, [r7, #20]
 8009ea2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	899b      	ldrh	r3, [r3, #12]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	699b      	ldr	r3, [r3, #24]
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	8992      	ldrh	r2, [r2, #12]
 8009eb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8009eb6:	fb02 f201 	mul.w	r2, r2, r1
 8009eba:	1a9b      	subs	r3, r3, r2
 8009ebc:	1ac3      	subs	r3, r0, r3
 8009ebe:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d901      	bls.n	8009ecc <f_write+0x298>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	699b      	ldr	r3, [r3, #24]
 8009ed6:	693a      	ldr	r2, [r7, #16]
 8009ed8:	8992      	ldrh	r2, [r2, #12]
 8009eda:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ede:	fb02 f200 	mul.w	r2, r2, r0
 8009ee2:	1a9b      	subs	r3, r3, r2
 8009ee4:	440b      	add	r3, r1
 8009ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ee8:	69f9      	ldr	r1, [r7, #28]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7fd fbde 	bl	80076ac <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	7d1b      	ldrb	r3, [r3, #20]
 8009ef4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ef8:	b2da      	uxtb	r2, r3
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009efe:	69fa      	ldr	r2, [r7, #28]
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	4413      	add	r3, r2
 8009f04:	61fb      	str	r3, [r7, #28]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	699a      	ldr	r2, [r3, #24]
 8009f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0c:	441a      	add	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	619a      	str	r2, [r3, #24]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	68da      	ldr	r2, [r3, #12]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	bf38      	it	cc
 8009f1e:	461a      	movcc	r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	60da      	str	r2, [r3, #12]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2a:	441a      	add	r2, r3
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	601a      	str	r2, [r3, #0]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f47f aeb5 	bne.w	8009caa <f_write+0x76>
 8009f40:	e000      	b.n	8009f44 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009f42:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	7d1b      	ldrb	r3, [r3, #20]
 8009f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f4c:	b2da      	uxtb	r2, r3
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3730      	adds	r7, #48	; 0x30
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f107 0208 	add.w	r2, r7, #8
 8009f6a:	4611      	mov	r1, r2
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7ff fc19 	bl	80097a4 <validate>
 8009f72:	4603      	mov	r3, r0
 8009f74:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009f76:	7dfb      	ldrb	r3, [r7, #23]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d168      	bne.n	800a04e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	7d1b      	ldrb	r3, [r3, #20]
 8009f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d062      	beq.n	800a04e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	7d1b      	ldrb	r3, [r3, #20]
 8009f8c:	b25b      	sxtb	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	da15      	bge.n	8009fbe <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	7858      	ldrb	r0, [r3, #1]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a1a      	ldr	r2, [r3, #32]
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	f7fd fac3 	bl	800752c <disk_write>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <f_sync+0x54>
 8009fac:	2301      	movs	r3, #1
 8009fae:	e04f      	b.n	800a050 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	7d1b      	ldrb	r3, [r3, #20]
 8009fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fb8:	b2da      	uxtb	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009fbe:	f7fd f809 	bl	8006fd4 <get_fattime>
 8009fc2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009fc4:	68ba      	ldr	r2, [r7, #8]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	4619      	mov	r1, r3
 8009fcc:	4610      	mov	r0, r2
 8009fce:	f7fd fd9b 	bl	8007b08 <move_window>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009fd6:	7dfb      	ldrb	r3, [r7, #23]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d138      	bne.n	800a04e <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	330b      	adds	r3, #11
 8009fe6:	781a      	ldrb	r2, [r3, #0]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	330b      	adds	r3, #11
 8009fec:	f042 0220 	orr.w	r2, r2, #32
 8009ff0:	b2d2      	uxtb	r2, r2
 8009ff2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6818      	ldr	r0, [r3, #0]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	68f9      	ldr	r1, [r7, #12]
 800a000:	f7fe fb20 	bl	8008644 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f103 021c 	add.w	r2, r3, #28
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	4619      	mov	r1, r3
 800a010:	4610      	mov	r0, r2
 800a012:	f7fd fb1f 	bl	8007654 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	3316      	adds	r3, #22
 800a01a:	6939      	ldr	r1, [r7, #16]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7fd fb19 	bl	8007654 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	3312      	adds	r3, #18
 800a026:	2100      	movs	r1, #0
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fd faf8 	bl	800761e <st_word>
					fs->wflag = 1;
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	2201      	movs	r2, #1
 800a032:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	4618      	mov	r0, r3
 800a038:	f7fd fd94 	bl	8007b64 <sync_fs>
 800a03c:	4603      	mov	r3, r0
 800a03e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	7d1b      	ldrb	r3, [r3, #20]
 800a044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a04e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3718      	adds	r7, #24
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7ff ff7b 	bl	8009f5c <f_sync>
 800a066:	4603      	mov	r3, r0
 800a068:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a06a:	7bfb      	ldrb	r3, [r7, #15]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d118      	bne.n	800a0a2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f107 0208 	add.w	r2, r7, #8
 800a076:	4611      	mov	r1, r2
 800a078:	4618      	mov	r0, r3
 800a07a:	f7ff fb93 	bl	80097a4 <validate>
 800a07e:	4603      	mov	r3, r0
 800a080:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a082:	7bfb      	ldrb	r3, [r7, #15]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10c      	bne.n	800a0a2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fd fc97 	bl	80079c0 <dec_lock>
 800a092:	4603      	mov	r3, r0
 800a094:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a096:	7bfb      	ldrb	r3, [r7, #15]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d102      	bne.n	800a0a2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b087      	sub	sp, #28
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a0c2:	4b1f      	ldr	r3, [pc, #124]	; (800a140 <FATFS_LinkDriverEx+0x94>)
 800a0c4:	7a5b      	ldrb	r3, [r3, #9]
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d131      	bne.n	800a130 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a0cc:	4b1c      	ldr	r3, [pc, #112]	; (800a140 <FATFS_LinkDriverEx+0x94>)
 800a0ce:	7a5b      	ldrb	r3, [r3, #9]
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	4b1a      	ldr	r3, [pc, #104]	; (800a140 <FATFS_LinkDriverEx+0x94>)
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a0da:	4b19      	ldr	r3, [pc, #100]	; (800a140 <FATFS_LinkDriverEx+0x94>)
 800a0dc:	7a5b      	ldrb	r3, [r3, #9]
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	4a17      	ldr	r2, [pc, #92]	; (800a140 <FATFS_LinkDriverEx+0x94>)
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4413      	add	r3, r2
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a0ea:	4b15      	ldr	r3, [pc, #84]	; (800a140 <FATFS_LinkDriverEx+0x94>)
 800a0ec:	7a5b      	ldrb	r3, [r3, #9]
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	4b13      	ldr	r3, [pc, #76]	; (800a140 <FATFS_LinkDriverEx+0x94>)
 800a0f4:	4413      	add	r3, r2
 800a0f6:	79fa      	ldrb	r2, [r7, #7]
 800a0f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a0fa:	4b11      	ldr	r3, [pc, #68]	; (800a140 <FATFS_LinkDriverEx+0x94>)
 800a0fc:	7a5b      	ldrb	r3, [r3, #9]
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	1c5a      	adds	r2, r3, #1
 800a102:	b2d1      	uxtb	r1, r2
 800a104:	4a0e      	ldr	r2, [pc, #56]	; (800a140 <FATFS_LinkDriverEx+0x94>)
 800a106:	7251      	strb	r1, [r2, #9]
 800a108:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a10a:	7dbb      	ldrb	r3, [r7, #22]
 800a10c:	3330      	adds	r3, #48	; 0x30
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	3301      	adds	r3, #1
 800a118:	223a      	movs	r2, #58	; 0x3a
 800a11a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	3302      	adds	r3, #2
 800a120:	222f      	movs	r2, #47	; 0x2f
 800a122:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	3303      	adds	r3, #3
 800a128:	2200      	movs	r2, #0
 800a12a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a12c:	2300      	movs	r3, #0
 800a12e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a130:	7dfb      	ldrb	r3, [r7, #23]
}
 800a132:	4618      	mov	r0, r3
 800a134:	371c      	adds	r7, #28
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	20000330 	.word	0x20000330

0800a144 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a14e:	2200      	movs	r2, #0
 800a150:	6839      	ldr	r1, [r7, #0]
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f7ff ffaa 	bl	800a0ac <FATFS_LinkDriverEx>
 800a158:	4603      	mov	r3, r0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
	...

0800a164 <__errno>:
 800a164:	4b01      	ldr	r3, [pc, #4]	; (800a16c <__errno+0x8>)
 800a166:	6818      	ldr	r0, [r3, #0]
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	20000028 	.word	0x20000028

0800a170 <__libc_init_array>:
 800a170:	b570      	push	{r4, r5, r6, lr}
 800a172:	4e0d      	ldr	r6, [pc, #52]	; (800a1a8 <__libc_init_array+0x38>)
 800a174:	4c0d      	ldr	r4, [pc, #52]	; (800a1ac <__libc_init_array+0x3c>)
 800a176:	1ba4      	subs	r4, r4, r6
 800a178:	10a4      	asrs	r4, r4, #2
 800a17a:	2500      	movs	r5, #0
 800a17c:	42a5      	cmp	r5, r4
 800a17e:	d109      	bne.n	800a194 <__libc_init_array+0x24>
 800a180:	4e0b      	ldr	r6, [pc, #44]	; (800a1b0 <__libc_init_array+0x40>)
 800a182:	4c0c      	ldr	r4, [pc, #48]	; (800a1b4 <__libc_init_array+0x44>)
 800a184:	f000 ff04 	bl	800af90 <_init>
 800a188:	1ba4      	subs	r4, r4, r6
 800a18a:	10a4      	asrs	r4, r4, #2
 800a18c:	2500      	movs	r5, #0
 800a18e:	42a5      	cmp	r5, r4
 800a190:	d105      	bne.n	800a19e <__libc_init_array+0x2e>
 800a192:	bd70      	pop	{r4, r5, r6, pc}
 800a194:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a198:	4798      	blx	r3
 800a19a:	3501      	adds	r5, #1
 800a19c:	e7ee      	b.n	800a17c <__libc_init_array+0xc>
 800a19e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a1a2:	4798      	blx	r3
 800a1a4:	3501      	adds	r5, #1
 800a1a6:	e7f2      	b.n	800a18e <__libc_init_array+0x1e>
 800a1a8:	0800b5b4 	.word	0x0800b5b4
 800a1ac:	0800b5b4 	.word	0x0800b5b4
 800a1b0:	0800b5b4 	.word	0x0800b5b4
 800a1b4:	0800b5b8 	.word	0x0800b5b8

0800a1b8 <memset>:
 800a1b8:	4402      	add	r2, r0
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d100      	bne.n	800a1c2 <memset+0xa>
 800a1c0:	4770      	bx	lr
 800a1c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a1c6:	e7f9      	b.n	800a1bc <memset+0x4>

0800a1c8 <_free_r>:
 800a1c8:	b538      	push	{r3, r4, r5, lr}
 800a1ca:	4605      	mov	r5, r0
 800a1cc:	2900      	cmp	r1, #0
 800a1ce:	d045      	beq.n	800a25c <_free_r+0x94>
 800a1d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1d4:	1f0c      	subs	r4, r1, #4
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	bfb8      	it	lt
 800a1da:	18e4      	addlt	r4, r4, r3
 800a1dc:	f000 fb62 	bl	800a8a4 <__malloc_lock>
 800a1e0:	4a1f      	ldr	r2, [pc, #124]	; (800a260 <_free_r+0x98>)
 800a1e2:	6813      	ldr	r3, [r2, #0]
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	b933      	cbnz	r3, 800a1f6 <_free_r+0x2e>
 800a1e8:	6063      	str	r3, [r4, #4]
 800a1ea:	6014      	str	r4, [r2, #0]
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1f2:	f000 bb58 	b.w	800a8a6 <__malloc_unlock>
 800a1f6:	42a3      	cmp	r3, r4
 800a1f8:	d90c      	bls.n	800a214 <_free_r+0x4c>
 800a1fa:	6821      	ldr	r1, [r4, #0]
 800a1fc:	1862      	adds	r2, r4, r1
 800a1fe:	4293      	cmp	r3, r2
 800a200:	bf04      	itt	eq
 800a202:	681a      	ldreq	r2, [r3, #0]
 800a204:	685b      	ldreq	r3, [r3, #4]
 800a206:	6063      	str	r3, [r4, #4]
 800a208:	bf04      	itt	eq
 800a20a:	1852      	addeq	r2, r2, r1
 800a20c:	6022      	streq	r2, [r4, #0]
 800a20e:	6004      	str	r4, [r0, #0]
 800a210:	e7ec      	b.n	800a1ec <_free_r+0x24>
 800a212:	4613      	mov	r3, r2
 800a214:	685a      	ldr	r2, [r3, #4]
 800a216:	b10a      	cbz	r2, 800a21c <_free_r+0x54>
 800a218:	42a2      	cmp	r2, r4
 800a21a:	d9fa      	bls.n	800a212 <_free_r+0x4a>
 800a21c:	6819      	ldr	r1, [r3, #0]
 800a21e:	1858      	adds	r0, r3, r1
 800a220:	42a0      	cmp	r0, r4
 800a222:	d10b      	bne.n	800a23c <_free_r+0x74>
 800a224:	6820      	ldr	r0, [r4, #0]
 800a226:	4401      	add	r1, r0
 800a228:	1858      	adds	r0, r3, r1
 800a22a:	4282      	cmp	r2, r0
 800a22c:	6019      	str	r1, [r3, #0]
 800a22e:	d1dd      	bne.n	800a1ec <_free_r+0x24>
 800a230:	6810      	ldr	r0, [r2, #0]
 800a232:	6852      	ldr	r2, [r2, #4]
 800a234:	605a      	str	r2, [r3, #4]
 800a236:	4401      	add	r1, r0
 800a238:	6019      	str	r1, [r3, #0]
 800a23a:	e7d7      	b.n	800a1ec <_free_r+0x24>
 800a23c:	d902      	bls.n	800a244 <_free_r+0x7c>
 800a23e:	230c      	movs	r3, #12
 800a240:	602b      	str	r3, [r5, #0]
 800a242:	e7d3      	b.n	800a1ec <_free_r+0x24>
 800a244:	6820      	ldr	r0, [r4, #0]
 800a246:	1821      	adds	r1, r4, r0
 800a248:	428a      	cmp	r2, r1
 800a24a:	bf04      	itt	eq
 800a24c:	6811      	ldreq	r1, [r2, #0]
 800a24e:	6852      	ldreq	r2, [r2, #4]
 800a250:	6062      	str	r2, [r4, #4]
 800a252:	bf04      	itt	eq
 800a254:	1809      	addeq	r1, r1, r0
 800a256:	6021      	streq	r1, [r4, #0]
 800a258:	605c      	str	r4, [r3, #4]
 800a25a:	e7c7      	b.n	800a1ec <_free_r+0x24>
 800a25c:	bd38      	pop	{r3, r4, r5, pc}
 800a25e:	bf00      	nop
 800a260:	2000033c 	.word	0x2000033c

0800a264 <_malloc_r>:
 800a264:	b570      	push	{r4, r5, r6, lr}
 800a266:	1ccd      	adds	r5, r1, #3
 800a268:	f025 0503 	bic.w	r5, r5, #3
 800a26c:	3508      	adds	r5, #8
 800a26e:	2d0c      	cmp	r5, #12
 800a270:	bf38      	it	cc
 800a272:	250c      	movcc	r5, #12
 800a274:	2d00      	cmp	r5, #0
 800a276:	4606      	mov	r6, r0
 800a278:	db01      	blt.n	800a27e <_malloc_r+0x1a>
 800a27a:	42a9      	cmp	r1, r5
 800a27c:	d903      	bls.n	800a286 <_malloc_r+0x22>
 800a27e:	230c      	movs	r3, #12
 800a280:	6033      	str	r3, [r6, #0]
 800a282:	2000      	movs	r0, #0
 800a284:	bd70      	pop	{r4, r5, r6, pc}
 800a286:	f000 fb0d 	bl	800a8a4 <__malloc_lock>
 800a28a:	4a21      	ldr	r2, [pc, #132]	; (800a310 <_malloc_r+0xac>)
 800a28c:	6814      	ldr	r4, [r2, #0]
 800a28e:	4621      	mov	r1, r4
 800a290:	b991      	cbnz	r1, 800a2b8 <_malloc_r+0x54>
 800a292:	4c20      	ldr	r4, [pc, #128]	; (800a314 <_malloc_r+0xb0>)
 800a294:	6823      	ldr	r3, [r4, #0]
 800a296:	b91b      	cbnz	r3, 800a2a0 <_malloc_r+0x3c>
 800a298:	4630      	mov	r0, r6
 800a29a:	f000 f855 	bl	800a348 <_sbrk_r>
 800a29e:	6020      	str	r0, [r4, #0]
 800a2a0:	4629      	mov	r1, r5
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	f000 f850 	bl	800a348 <_sbrk_r>
 800a2a8:	1c43      	adds	r3, r0, #1
 800a2aa:	d124      	bne.n	800a2f6 <_malloc_r+0x92>
 800a2ac:	230c      	movs	r3, #12
 800a2ae:	6033      	str	r3, [r6, #0]
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	f000 faf8 	bl	800a8a6 <__malloc_unlock>
 800a2b6:	e7e4      	b.n	800a282 <_malloc_r+0x1e>
 800a2b8:	680b      	ldr	r3, [r1, #0]
 800a2ba:	1b5b      	subs	r3, r3, r5
 800a2bc:	d418      	bmi.n	800a2f0 <_malloc_r+0x8c>
 800a2be:	2b0b      	cmp	r3, #11
 800a2c0:	d90f      	bls.n	800a2e2 <_malloc_r+0x7e>
 800a2c2:	600b      	str	r3, [r1, #0]
 800a2c4:	50cd      	str	r5, [r1, r3]
 800a2c6:	18cc      	adds	r4, r1, r3
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	f000 faec 	bl	800a8a6 <__malloc_unlock>
 800a2ce:	f104 000b 	add.w	r0, r4, #11
 800a2d2:	1d23      	adds	r3, r4, #4
 800a2d4:	f020 0007 	bic.w	r0, r0, #7
 800a2d8:	1ac3      	subs	r3, r0, r3
 800a2da:	d0d3      	beq.n	800a284 <_malloc_r+0x20>
 800a2dc:	425a      	negs	r2, r3
 800a2de:	50e2      	str	r2, [r4, r3]
 800a2e0:	e7d0      	b.n	800a284 <_malloc_r+0x20>
 800a2e2:	428c      	cmp	r4, r1
 800a2e4:	684b      	ldr	r3, [r1, #4]
 800a2e6:	bf16      	itet	ne
 800a2e8:	6063      	strne	r3, [r4, #4]
 800a2ea:	6013      	streq	r3, [r2, #0]
 800a2ec:	460c      	movne	r4, r1
 800a2ee:	e7eb      	b.n	800a2c8 <_malloc_r+0x64>
 800a2f0:	460c      	mov	r4, r1
 800a2f2:	6849      	ldr	r1, [r1, #4]
 800a2f4:	e7cc      	b.n	800a290 <_malloc_r+0x2c>
 800a2f6:	1cc4      	adds	r4, r0, #3
 800a2f8:	f024 0403 	bic.w	r4, r4, #3
 800a2fc:	42a0      	cmp	r0, r4
 800a2fe:	d005      	beq.n	800a30c <_malloc_r+0xa8>
 800a300:	1a21      	subs	r1, r4, r0
 800a302:	4630      	mov	r0, r6
 800a304:	f000 f820 	bl	800a348 <_sbrk_r>
 800a308:	3001      	adds	r0, #1
 800a30a:	d0cf      	beq.n	800a2ac <_malloc_r+0x48>
 800a30c:	6025      	str	r5, [r4, #0]
 800a30e:	e7db      	b.n	800a2c8 <_malloc_r+0x64>
 800a310:	2000033c 	.word	0x2000033c
 800a314:	20000340 	.word	0x20000340

0800a318 <iprintf>:
 800a318:	b40f      	push	{r0, r1, r2, r3}
 800a31a:	4b0a      	ldr	r3, [pc, #40]	; (800a344 <iprintf+0x2c>)
 800a31c:	b513      	push	{r0, r1, r4, lr}
 800a31e:	681c      	ldr	r4, [r3, #0]
 800a320:	b124      	cbz	r4, 800a32c <iprintf+0x14>
 800a322:	69a3      	ldr	r3, [r4, #24]
 800a324:	b913      	cbnz	r3, 800a32c <iprintf+0x14>
 800a326:	4620      	mov	r0, r4
 800a328:	f000 f9ce 	bl	800a6c8 <__sinit>
 800a32c:	ab05      	add	r3, sp, #20
 800a32e:	9a04      	ldr	r2, [sp, #16]
 800a330:	68a1      	ldr	r1, [r4, #8]
 800a332:	9301      	str	r3, [sp, #4]
 800a334:	4620      	mov	r0, r4
 800a336:	f000 fae1 	bl	800a8fc <_vfiprintf_r>
 800a33a:	b002      	add	sp, #8
 800a33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a340:	b004      	add	sp, #16
 800a342:	4770      	bx	lr
 800a344:	20000028 	.word	0x20000028

0800a348 <_sbrk_r>:
 800a348:	b538      	push	{r3, r4, r5, lr}
 800a34a:	4c06      	ldr	r4, [pc, #24]	; (800a364 <_sbrk_r+0x1c>)
 800a34c:	2300      	movs	r3, #0
 800a34e:	4605      	mov	r5, r0
 800a350:	4608      	mov	r0, r1
 800a352:	6023      	str	r3, [r4, #0]
 800a354:	f7f7 fe4e 	bl	8001ff4 <_sbrk>
 800a358:	1c43      	adds	r3, r0, #1
 800a35a:	d102      	bne.n	800a362 <_sbrk_r+0x1a>
 800a35c:	6823      	ldr	r3, [r4, #0]
 800a35e:	b103      	cbz	r3, 800a362 <_sbrk_r+0x1a>
 800a360:	602b      	str	r3, [r5, #0]
 800a362:	bd38      	pop	{r3, r4, r5, pc}
 800a364:	200077a8 	.word	0x200077a8

0800a368 <__swbuf_r>:
 800a368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36a:	460e      	mov	r6, r1
 800a36c:	4614      	mov	r4, r2
 800a36e:	4605      	mov	r5, r0
 800a370:	b118      	cbz	r0, 800a37a <__swbuf_r+0x12>
 800a372:	6983      	ldr	r3, [r0, #24]
 800a374:	b90b      	cbnz	r3, 800a37a <__swbuf_r+0x12>
 800a376:	f000 f9a7 	bl	800a6c8 <__sinit>
 800a37a:	4b21      	ldr	r3, [pc, #132]	; (800a400 <__swbuf_r+0x98>)
 800a37c:	429c      	cmp	r4, r3
 800a37e:	d12a      	bne.n	800a3d6 <__swbuf_r+0x6e>
 800a380:	686c      	ldr	r4, [r5, #4]
 800a382:	69a3      	ldr	r3, [r4, #24]
 800a384:	60a3      	str	r3, [r4, #8]
 800a386:	89a3      	ldrh	r3, [r4, #12]
 800a388:	071a      	lsls	r2, r3, #28
 800a38a:	d52e      	bpl.n	800a3ea <__swbuf_r+0x82>
 800a38c:	6923      	ldr	r3, [r4, #16]
 800a38e:	b363      	cbz	r3, 800a3ea <__swbuf_r+0x82>
 800a390:	6923      	ldr	r3, [r4, #16]
 800a392:	6820      	ldr	r0, [r4, #0]
 800a394:	1ac0      	subs	r0, r0, r3
 800a396:	6963      	ldr	r3, [r4, #20]
 800a398:	b2f6      	uxtb	r6, r6
 800a39a:	4283      	cmp	r3, r0
 800a39c:	4637      	mov	r7, r6
 800a39e:	dc04      	bgt.n	800a3aa <__swbuf_r+0x42>
 800a3a0:	4621      	mov	r1, r4
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	f000 f926 	bl	800a5f4 <_fflush_r>
 800a3a8:	bb28      	cbnz	r0, 800a3f6 <__swbuf_r+0x8e>
 800a3aa:	68a3      	ldr	r3, [r4, #8]
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	60a3      	str	r3, [r4, #8]
 800a3b0:	6823      	ldr	r3, [r4, #0]
 800a3b2:	1c5a      	adds	r2, r3, #1
 800a3b4:	6022      	str	r2, [r4, #0]
 800a3b6:	701e      	strb	r6, [r3, #0]
 800a3b8:	6963      	ldr	r3, [r4, #20]
 800a3ba:	3001      	adds	r0, #1
 800a3bc:	4283      	cmp	r3, r0
 800a3be:	d004      	beq.n	800a3ca <__swbuf_r+0x62>
 800a3c0:	89a3      	ldrh	r3, [r4, #12]
 800a3c2:	07db      	lsls	r3, r3, #31
 800a3c4:	d519      	bpl.n	800a3fa <__swbuf_r+0x92>
 800a3c6:	2e0a      	cmp	r6, #10
 800a3c8:	d117      	bne.n	800a3fa <__swbuf_r+0x92>
 800a3ca:	4621      	mov	r1, r4
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	f000 f911 	bl	800a5f4 <_fflush_r>
 800a3d2:	b190      	cbz	r0, 800a3fa <__swbuf_r+0x92>
 800a3d4:	e00f      	b.n	800a3f6 <__swbuf_r+0x8e>
 800a3d6:	4b0b      	ldr	r3, [pc, #44]	; (800a404 <__swbuf_r+0x9c>)
 800a3d8:	429c      	cmp	r4, r3
 800a3da:	d101      	bne.n	800a3e0 <__swbuf_r+0x78>
 800a3dc:	68ac      	ldr	r4, [r5, #8]
 800a3de:	e7d0      	b.n	800a382 <__swbuf_r+0x1a>
 800a3e0:	4b09      	ldr	r3, [pc, #36]	; (800a408 <__swbuf_r+0xa0>)
 800a3e2:	429c      	cmp	r4, r3
 800a3e4:	bf08      	it	eq
 800a3e6:	68ec      	ldreq	r4, [r5, #12]
 800a3e8:	e7cb      	b.n	800a382 <__swbuf_r+0x1a>
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	f000 f80d 	bl	800a40c <__swsetup_r>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d0cc      	beq.n	800a390 <__swbuf_r+0x28>
 800a3f6:	f04f 37ff 	mov.w	r7, #4294967295
 800a3fa:	4638      	mov	r0, r7
 800a3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3fe:	bf00      	nop
 800a400:	0800b538 	.word	0x0800b538
 800a404:	0800b558 	.word	0x0800b558
 800a408:	0800b518 	.word	0x0800b518

0800a40c <__swsetup_r>:
 800a40c:	4b32      	ldr	r3, [pc, #200]	; (800a4d8 <__swsetup_r+0xcc>)
 800a40e:	b570      	push	{r4, r5, r6, lr}
 800a410:	681d      	ldr	r5, [r3, #0]
 800a412:	4606      	mov	r6, r0
 800a414:	460c      	mov	r4, r1
 800a416:	b125      	cbz	r5, 800a422 <__swsetup_r+0x16>
 800a418:	69ab      	ldr	r3, [r5, #24]
 800a41a:	b913      	cbnz	r3, 800a422 <__swsetup_r+0x16>
 800a41c:	4628      	mov	r0, r5
 800a41e:	f000 f953 	bl	800a6c8 <__sinit>
 800a422:	4b2e      	ldr	r3, [pc, #184]	; (800a4dc <__swsetup_r+0xd0>)
 800a424:	429c      	cmp	r4, r3
 800a426:	d10f      	bne.n	800a448 <__swsetup_r+0x3c>
 800a428:	686c      	ldr	r4, [r5, #4]
 800a42a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a42e:	b29a      	uxth	r2, r3
 800a430:	0715      	lsls	r5, r2, #28
 800a432:	d42c      	bmi.n	800a48e <__swsetup_r+0x82>
 800a434:	06d0      	lsls	r0, r2, #27
 800a436:	d411      	bmi.n	800a45c <__swsetup_r+0x50>
 800a438:	2209      	movs	r2, #9
 800a43a:	6032      	str	r2, [r6, #0]
 800a43c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a440:	81a3      	strh	r3, [r4, #12]
 800a442:	f04f 30ff 	mov.w	r0, #4294967295
 800a446:	e03e      	b.n	800a4c6 <__swsetup_r+0xba>
 800a448:	4b25      	ldr	r3, [pc, #148]	; (800a4e0 <__swsetup_r+0xd4>)
 800a44a:	429c      	cmp	r4, r3
 800a44c:	d101      	bne.n	800a452 <__swsetup_r+0x46>
 800a44e:	68ac      	ldr	r4, [r5, #8]
 800a450:	e7eb      	b.n	800a42a <__swsetup_r+0x1e>
 800a452:	4b24      	ldr	r3, [pc, #144]	; (800a4e4 <__swsetup_r+0xd8>)
 800a454:	429c      	cmp	r4, r3
 800a456:	bf08      	it	eq
 800a458:	68ec      	ldreq	r4, [r5, #12]
 800a45a:	e7e6      	b.n	800a42a <__swsetup_r+0x1e>
 800a45c:	0751      	lsls	r1, r2, #29
 800a45e:	d512      	bpl.n	800a486 <__swsetup_r+0x7a>
 800a460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a462:	b141      	cbz	r1, 800a476 <__swsetup_r+0x6a>
 800a464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a468:	4299      	cmp	r1, r3
 800a46a:	d002      	beq.n	800a472 <__swsetup_r+0x66>
 800a46c:	4630      	mov	r0, r6
 800a46e:	f7ff feab 	bl	800a1c8 <_free_r>
 800a472:	2300      	movs	r3, #0
 800a474:	6363      	str	r3, [r4, #52]	; 0x34
 800a476:	89a3      	ldrh	r3, [r4, #12]
 800a478:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a47c:	81a3      	strh	r3, [r4, #12]
 800a47e:	2300      	movs	r3, #0
 800a480:	6063      	str	r3, [r4, #4]
 800a482:	6923      	ldr	r3, [r4, #16]
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	89a3      	ldrh	r3, [r4, #12]
 800a488:	f043 0308 	orr.w	r3, r3, #8
 800a48c:	81a3      	strh	r3, [r4, #12]
 800a48e:	6923      	ldr	r3, [r4, #16]
 800a490:	b94b      	cbnz	r3, 800a4a6 <__swsetup_r+0x9a>
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a49c:	d003      	beq.n	800a4a6 <__swsetup_r+0x9a>
 800a49e:	4621      	mov	r1, r4
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	f000 f9bf 	bl	800a824 <__smakebuf_r>
 800a4a6:	89a2      	ldrh	r2, [r4, #12]
 800a4a8:	f012 0301 	ands.w	r3, r2, #1
 800a4ac:	d00c      	beq.n	800a4c8 <__swsetup_r+0xbc>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	60a3      	str	r3, [r4, #8]
 800a4b2:	6963      	ldr	r3, [r4, #20]
 800a4b4:	425b      	negs	r3, r3
 800a4b6:	61a3      	str	r3, [r4, #24]
 800a4b8:	6923      	ldr	r3, [r4, #16]
 800a4ba:	b953      	cbnz	r3, 800a4d2 <__swsetup_r+0xc6>
 800a4bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a4c4:	d1ba      	bne.n	800a43c <__swsetup_r+0x30>
 800a4c6:	bd70      	pop	{r4, r5, r6, pc}
 800a4c8:	0792      	lsls	r2, r2, #30
 800a4ca:	bf58      	it	pl
 800a4cc:	6963      	ldrpl	r3, [r4, #20]
 800a4ce:	60a3      	str	r3, [r4, #8]
 800a4d0:	e7f2      	b.n	800a4b8 <__swsetup_r+0xac>
 800a4d2:	2000      	movs	r0, #0
 800a4d4:	e7f7      	b.n	800a4c6 <__swsetup_r+0xba>
 800a4d6:	bf00      	nop
 800a4d8:	20000028 	.word	0x20000028
 800a4dc:	0800b538 	.word	0x0800b538
 800a4e0:	0800b558 	.word	0x0800b558
 800a4e4:	0800b518 	.word	0x0800b518

0800a4e8 <__sflush_r>:
 800a4e8:	898a      	ldrh	r2, [r1, #12]
 800a4ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ee:	4605      	mov	r5, r0
 800a4f0:	0710      	lsls	r0, r2, #28
 800a4f2:	460c      	mov	r4, r1
 800a4f4:	d458      	bmi.n	800a5a8 <__sflush_r+0xc0>
 800a4f6:	684b      	ldr	r3, [r1, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	dc05      	bgt.n	800a508 <__sflush_r+0x20>
 800a4fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	dc02      	bgt.n	800a508 <__sflush_r+0x20>
 800a502:	2000      	movs	r0, #0
 800a504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a508:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a50a:	2e00      	cmp	r6, #0
 800a50c:	d0f9      	beq.n	800a502 <__sflush_r+0x1a>
 800a50e:	2300      	movs	r3, #0
 800a510:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a514:	682f      	ldr	r7, [r5, #0]
 800a516:	6a21      	ldr	r1, [r4, #32]
 800a518:	602b      	str	r3, [r5, #0]
 800a51a:	d032      	beq.n	800a582 <__sflush_r+0x9a>
 800a51c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a51e:	89a3      	ldrh	r3, [r4, #12]
 800a520:	075a      	lsls	r2, r3, #29
 800a522:	d505      	bpl.n	800a530 <__sflush_r+0x48>
 800a524:	6863      	ldr	r3, [r4, #4]
 800a526:	1ac0      	subs	r0, r0, r3
 800a528:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a52a:	b10b      	cbz	r3, 800a530 <__sflush_r+0x48>
 800a52c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a52e:	1ac0      	subs	r0, r0, r3
 800a530:	2300      	movs	r3, #0
 800a532:	4602      	mov	r2, r0
 800a534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a536:	6a21      	ldr	r1, [r4, #32]
 800a538:	4628      	mov	r0, r5
 800a53a:	47b0      	blx	r6
 800a53c:	1c43      	adds	r3, r0, #1
 800a53e:	89a3      	ldrh	r3, [r4, #12]
 800a540:	d106      	bne.n	800a550 <__sflush_r+0x68>
 800a542:	6829      	ldr	r1, [r5, #0]
 800a544:	291d      	cmp	r1, #29
 800a546:	d848      	bhi.n	800a5da <__sflush_r+0xf2>
 800a548:	4a29      	ldr	r2, [pc, #164]	; (800a5f0 <__sflush_r+0x108>)
 800a54a:	40ca      	lsrs	r2, r1
 800a54c:	07d6      	lsls	r6, r2, #31
 800a54e:	d544      	bpl.n	800a5da <__sflush_r+0xf2>
 800a550:	2200      	movs	r2, #0
 800a552:	6062      	str	r2, [r4, #4]
 800a554:	04d9      	lsls	r1, r3, #19
 800a556:	6922      	ldr	r2, [r4, #16]
 800a558:	6022      	str	r2, [r4, #0]
 800a55a:	d504      	bpl.n	800a566 <__sflush_r+0x7e>
 800a55c:	1c42      	adds	r2, r0, #1
 800a55e:	d101      	bne.n	800a564 <__sflush_r+0x7c>
 800a560:	682b      	ldr	r3, [r5, #0]
 800a562:	b903      	cbnz	r3, 800a566 <__sflush_r+0x7e>
 800a564:	6560      	str	r0, [r4, #84]	; 0x54
 800a566:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a568:	602f      	str	r7, [r5, #0]
 800a56a:	2900      	cmp	r1, #0
 800a56c:	d0c9      	beq.n	800a502 <__sflush_r+0x1a>
 800a56e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a572:	4299      	cmp	r1, r3
 800a574:	d002      	beq.n	800a57c <__sflush_r+0x94>
 800a576:	4628      	mov	r0, r5
 800a578:	f7ff fe26 	bl	800a1c8 <_free_r>
 800a57c:	2000      	movs	r0, #0
 800a57e:	6360      	str	r0, [r4, #52]	; 0x34
 800a580:	e7c0      	b.n	800a504 <__sflush_r+0x1c>
 800a582:	2301      	movs	r3, #1
 800a584:	4628      	mov	r0, r5
 800a586:	47b0      	blx	r6
 800a588:	1c41      	adds	r1, r0, #1
 800a58a:	d1c8      	bne.n	800a51e <__sflush_r+0x36>
 800a58c:	682b      	ldr	r3, [r5, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d0c5      	beq.n	800a51e <__sflush_r+0x36>
 800a592:	2b1d      	cmp	r3, #29
 800a594:	d001      	beq.n	800a59a <__sflush_r+0xb2>
 800a596:	2b16      	cmp	r3, #22
 800a598:	d101      	bne.n	800a59e <__sflush_r+0xb6>
 800a59a:	602f      	str	r7, [r5, #0]
 800a59c:	e7b1      	b.n	800a502 <__sflush_r+0x1a>
 800a59e:	89a3      	ldrh	r3, [r4, #12]
 800a5a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5a4:	81a3      	strh	r3, [r4, #12]
 800a5a6:	e7ad      	b.n	800a504 <__sflush_r+0x1c>
 800a5a8:	690f      	ldr	r7, [r1, #16]
 800a5aa:	2f00      	cmp	r7, #0
 800a5ac:	d0a9      	beq.n	800a502 <__sflush_r+0x1a>
 800a5ae:	0793      	lsls	r3, r2, #30
 800a5b0:	680e      	ldr	r6, [r1, #0]
 800a5b2:	bf08      	it	eq
 800a5b4:	694b      	ldreq	r3, [r1, #20]
 800a5b6:	600f      	str	r7, [r1, #0]
 800a5b8:	bf18      	it	ne
 800a5ba:	2300      	movne	r3, #0
 800a5bc:	eba6 0807 	sub.w	r8, r6, r7
 800a5c0:	608b      	str	r3, [r1, #8]
 800a5c2:	f1b8 0f00 	cmp.w	r8, #0
 800a5c6:	dd9c      	ble.n	800a502 <__sflush_r+0x1a>
 800a5c8:	4643      	mov	r3, r8
 800a5ca:	463a      	mov	r2, r7
 800a5cc:	6a21      	ldr	r1, [r4, #32]
 800a5ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	47b0      	blx	r6
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	dc06      	bgt.n	800a5e6 <__sflush_r+0xfe>
 800a5d8:	89a3      	ldrh	r3, [r4, #12]
 800a5da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5de:	81a3      	strh	r3, [r4, #12]
 800a5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e4:	e78e      	b.n	800a504 <__sflush_r+0x1c>
 800a5e6:	4407      	add	r7, r0
 800a5e8:	eba8 0800 	sub.w	r8, r8, r0
 800a5ec:	e7e9      	b.n	800a5c2 <__sflush_r+0xda>
 800a5ee:	bf00      	nop
 800a5f0:	20400001 	.word	0x20400001

0800a5f4 <_fflush_r>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	690b      	ldr	r3, [r1, #16]
 800a5f8:	4605      	mov	r5, r0
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	b1db      	cbz	r3, 800a636 <_fflush_r+0x42>
 800a5fe:	b118      	cbz	r0, 800a608 <_fflush_r+0x14>
 800a600:	6983      	ldr	r3, [r0, #24]
 800a602:	b90b      	cbnz	r3, 800a608 <_fflush_r+0x14>
 800a604:	f000 f860 	bl	800a6c8 <__sinit>
 800a608:	4b0c      	ldr	r3, [pc, #48]	; (800a63c <_fflush_r+0x48>)
 800a60a:	429c      	cmp	r4, r3
 800a60c:	d109      	bne.n	800a622 <_fflush_r+0x2e>
 800a60e:	686c      	ldr	r4, [r5, #4]
 800a610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a614:	b17b      	cbz	r3, 800a636 <_fflush_r+0x42>
 800a616:	4621      	mov	r1, r4
 800a618:	4628      	mov	r0, r5
 800a61a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a61e:	f7ff bf63 	b.w	800a4e8 <__sflush_r>
 800a622:	4b07      	ldr	r3, [pc, #28]	; (800a640 <_fflush_r+0x4c>)
 800a624:	429c      	cmp	r4, r3
 800a626:	d101      	bne.n	800a62c <_fflush_r+0x38>
 800a628:	68ac      	ldr	r4, [r5, #8]
 800a62a:	e7f1      	b.n	800a610 <_fflush_r+0x1c>
 800a62c:	4b05      	ldr	r3, [pc, #20]	; (800a644 <_fflush_r+0x50>)
 800a62e:	429c      	cmp	r4, r3
 800a630:	bf08      	it	eq
 800a632:	68ec      	ldreq	r4, [r5, #12]
 800a634:	e7ec      	b.n	800a610 <_fflush_r+0x1c>
 800a636:	2000      	movs	r0, #0
 800a638:	bd38      	pop	{r3, r4, r5, pc}
 800a63a:	bf00      	nop
 800a63c:	0800b538 	.word	0x0800b538
 800a640:	0800b558 	.word	0x0800b558
 800a644:	0800b518 	.word	0x0800b518

0800a648 <std>:
 800a648:	2300      	movs	r3, #0
 800a64a:	b510      	push	{r4, lr}
 800a64c:	4604      	mov	r4, r0
 800a64e:	e9c0 3300 	strd	r3, r3, [r0]
 800a652:	6083      	str	r3, [r0, #8]
 800a654:	8181      	strh	r1, [r0, #12]
 800a656:	6643      	str	r3, [r0, #100]	; 0x64
 800a658:	81c2      	strh	r2, [r0, #14]
 800a65a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a65e:	6183      	str	r3, [r0, #24]
 800a660:	4619      	mov	r1, r3
 800a662:	2208      	movs	r2, #8
 800a664:	305c      	adds	r0, #92	; 0x5c
 800a666:	f7ff fda7 	bl	800a1b8 <memset>
 800a66a:	4b05      	ldr	r3, [pc, #20]	; (800a680 <std+0x38>)
 800a66c:	6263      	str	r3, [r4, #36]	; 0x24
 800a66e:	4b05      	ldr	r3, [pc, #20]	; (800a684 <std+0x3c>)
 800a670:	62a3      	str	r3, [r4, #40]	; 0x28
 800a672:	4b05      	ldr	r3, [pc, #20]	; (800a688 <std+0x40>)
 800a674:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a676:	4b05      	ldr	r3, [pc, #20]	; (800a68c <std+0x44>)
 800a678:	6224      	str	r4, [r4, #32]
 800a67a:	6323      	str	r3, [r4, #48]	; 0x30
 800a67c:	bd10      	pop	{r4, pc}
 800a67e:	bf00      	nop
 800a680:	0800ae39 	.word	0x0800ae39
 800a684:	0800ae5b 	.word	0x0800ae5b
 800a688:	0800ae93 	.word	0x0800ae93
 800a68c:	0800aeb7 	.word	0x0800aeb7

0800a690 <_cleanup_r>:
 800a690:	4901      	ldr	r1, [pc, #4]	; (800a698 <_cleanup_r+0x8>)
 800a692:	f000 b885 	b.w	800a7a0 <_fwalk_reent>
 800a696:	bf00      	nop
 800a698:	0800a5f5 	.word	0x0800a5f5

0800a69c <__sfmoreglue>:
 800a69c:	b570      	push	{r4, r5, r6, lr}
 800a69e:	1e4a      	subs	r2, r1, #1
 800a6a0:	2568      	movs	r5, #104	; 0x68
 800a6a2:	4355      	muls	r5, r2
 800a6a4:	460e      	mov	r6, r1
 800a6a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a6aa:	f7ff fddb 	bl	800a264 <_malloc_r>
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	b140      	cbz	r0, 800a6c4 <__sfmoreglue+0x28>
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	e9c0 1600 	strd	r1, r6, [r0]
 800a6b8:	300c      	adds	r0, #12
 800a6ba:	60a0      	str	r0, [r4, #8]
 800a6bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a6c0:	f7ff fd7a 	bl	800a1b8 <memset>
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	bd70      	pop	{r4, r5, r6, pc}

0800a6c8 <__sinit>:
 800a6c8:	6983      	ldr	r3, [r0, #24]
 800a6ca:	b510      	push	{r4, lr}
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	bb33      	cbnz	r3, 800a71e <__sinit+0x56>
 800a6d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a6d4:	6503      	str	r3, [r0, #80]	; 0x50
 800a6d6:	4b12      	ldr	r3, [pc, #72]	; (800a720 <__sinit+0x58>)
 800a6d8:	4a12      	ldr	r2, [pc, #72]	; (800a724 <__sinit+0x5c>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	6282      	str	r2, [r0, #40]	; 0x28
 800a6de:	4298      	cmp	r0, r3
 800a6e0:	bf04      	itt	eq
 800a6e2:	2301      	moveq	r3, #1
 800a6e4:	6183      	streq	r3, [r0, #24]
 800a6e6:	f000 f81f 	bl	800a728 <__sfp>
 800a6ea:	6060      	str	r0, [r4, #4]
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f000 f81b 	bl	800a728 <__sfp>
 800a6f2:	60a0      	str	r0, [r4, #8]
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	f000 f817 	bl	800a728 <__sfp>
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	60e0      	str	r0, [r4, #12]
 800a6fe:	2104      	movs	r1, #4
 800a700:	6860      	ldr	r0, [r4, #4]
 800a702:	f7ff ffa1 	bl	800a648 <std>
 800a706:	2201      	movs	r2, #1
 800a708:	2109      	movs	r1, #9
 800a70a:	68a0      	ldr	r0, [r4, #8]
 800a70c:	f7ff ff9c 	bl	800a648 <std>
 800a710:	2202      	movs	r2, #2
 800a712:	2112      	movs	r1, #18
 800a714:	68e0      	ldr	r0, [r4, #12]
 800a716:	f7ff ff97 	bl	800a648 <std>
 800a71a:	2301      	movs	r3, #1
 800a71c:	61a3      	str	r3, [r4, #24]
 800a71e:	bd10      	pop	{r4, pc}
 800a720:	0800b514 	.word	0x0800b514
 800a724:	0800a691 	.word	0x0800a691

0800a728 <__sfp>:
 800a728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72a:	4b1b      	ldr	r3, [pc, #108]	; (800a798 <__sfp+0x70>)
 800a72c:	681e      	ldr	r6, [r3, #0]
 800a72e:	69b3      	ldr	r3, [r6, #24]
 800a730:	4607      	mov	r7, r0
 800a732:	b913      	cbnz	r3, 800a73a <__sfp+0x12>
 800a734:	4630      	mov	r0, r6
 800a736:	f7ff ffc7 	bl	800a6c8 <__sinit>
 800a73a:	3648      	adds	r6, #72	; 0x48
 800a73c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a740:	3b01      	subs	r3, #1
 800a742:	d503      	bpl.n	800a74c <__sfp+0x24>
 800a744:	6833      	ldr	r3, [r6, #0]
 800a746:	b133      	cbz	r3, 800a756 <__sfp+0x2e>
 800a748:	6836      	ldr	r6, [r6, #0]
 800a74a:	e7f7      	b.n	800a73c <__sfp+0x14>
 800a74c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a750:	b16d      	cbz	r5, 800a76e <__sfp+0x46>
 800a752:	3468      	adds	r4, #104	; 0x68
 800a754:	e7f4      	b.n	800a740 <__sfp+0x18>
 800a756:	2104      	movs	r1, #4
 800a758:	4638      	mov	r0, r7
 800a75a:	f7ff ff9f 	bl	800a69c <__sfmoreglue>
 800a75e:	6030      	str	r0, [r6, #0]
 800a760:	2800      	cmp	r0, #0
 800a762:	d1f1      	bne.n	800a748 <__sfp+0x20>
 800a764:	230c      	movs	r3, #12
 800a766:	603b      	str	r3, [r7, #0]
 800a768:	4604      	mov	r4, r0
 800a76a:	4620      	mov	r0, r4
 800a76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a76e:	4b0b      	ldr	r3, [pc, #44]	; (800a79c <__sfp+0x74>)
 800a770:	6665      	str	r5, [r4, #100]	; 0x64
 800a772:	e9c4 5500 	strd	r5, r5, [r4]
 800a776:	60a5      	str	r5, [r4, #8]
 800a778:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a77c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a780:	2208      	movs	r2, #8
 800a782:	4629      	mov	r1, r5
 800a784:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a788:	f7ff fd16 	bl	800a1b8 <memset>
 800a78c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a790:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a794:	e7e9      	b.n	800a76a <__sfp+0x42>
 800a796:	bf00      	nop
 800a798:	0800b514 	.word	0x0800b514
 800a79c:	ffff0001 	.word	0xffff0001

0800a7a0 <_fwalk_reent>:
 800a7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7a4:	4680      	mov	r8, r0
 800a7a6:	4689      	mov	r9, r1
 800a7a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a7ac:	2600      	movs	r6, #0
 800a7ae:	b914      	cbnz	r4, 800a7b6 <_fwalk_reent+0x16>
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a7ba:	3f01      	subs	r7, #1
 800a7bc:	d501      	bpl.n	800a7c2 <_fwalk_reent+0x22>
 800a7be:	6824      	ldr	r4, [r4, #0]
 800a7c0:	e7f5      	b.n	800a7ae <_fwalk_reent+0xe>
 800a7c2:	89ab      	ldrh	r3, [r5, #12]
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d907      	bls.n	800a7d8 <_fwalk_reent+0x38>
 800a7c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	d003      	beq.n	800a7d8 <_fwalk_reent+0x38>
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	4640      	mov	r0, r8
 800a7d4:	47c8      	blx	r9
 800a7d6:	4306      	orrs	r6, r0
 800a7d8:	3568      	adds	r5, #104	; 0x68
 800a7da:	e7ee      	b.n	800a7ba <_fwalk_reent+0x1a>

0800a7dc <__swhatbuf_r>:
 800a7dc:	b570      	push	{r4, r5, r6, lr}
 800a7de:	460e      	mov	r6, r1
 800a7e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7e4:	2900      	cmp	r1, #0
 800a7e6:	b096      	sub	sp, #88	; 0x58
 800a7e8:	4614      	mov	r4, r2
 800a7ea:	461d      	mov	r5, r3
 800a7ec:	da07      	bge.n	800a7fe <__swhatbuf_r+0x22>
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	602b      	str	r3, [r5, #0]
 800a7f2:	89b3      	ldrh	r3, [r6, #12]
 800a7f4:	061a      	lsls	r2, r3, #24
 800a7f6:	d410      	bmi.n	800a81a <__swhatbuf_r+0x3e>
 800a7f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7fc:	e00e      	b.n	800a81c <__swhatbuf_r+0x40>
 800a7fe:	466a      	mov	r2, sp
 800a800:	f000 fb80 	bl	800af04 <_fstat_r>
 800a804:	2800      	cmp	r0, #0
 800a806:	dbf2      	blt.n	800a7ee <__swhatbuf_r+0x12>
 800a808:	9a01      	ldr	r2, [sp, #4]
 800a80a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a80e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a812:	425a      	negs	r2, r3
 800a814:	415a      	adcs	r2, r3
 800a816:	602a      	str	r2, [r5, #0]
 800a818:	e7ee      	b.n	800a7f8 <__swhatbuf_r+0x1c>
 800a81a:	2340      	movs	r3, #64	; 0x40
 800a81c:	2000      	movs	r0, #0
 800a81e:	6023      	str	r3, [r4, #0]
 800a820:	b016      	add	sp, #88	; 0x58
 800a822:	bd70      	pop	{r4, r5, r6, pc}

0800a824 <__smakebuf_r>:
 800a824:	898b      	ldrh	r3, [r1, #12]
 800a826:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a828:	079d      	lsls	r5, r3, #30
 800a82a:	4606      	mov	r6, r0
 800a82c:	460c      	mov	r4, r1
 800a82e:	d507      	bpl.n	800a840 <__smakebuf_r+0x1c>
 800a830:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	6123      	str	r3, [r4, #16]
 800a838:	2301      	movs	r3, #1
 800a83a:	6163      	str	r3, [r4, #20]
 800a83c:	b002      	add	sp, #8
 800a83e:	bd70      	pop	{r4, r5, r6, pc}
 800a840:	ab01      	add	r3, sp, #4
 800a842:	466a      	mov	r2, sp
 800a844:	f7ff ffca 	bl	800a7dc <__swhatbuf_r>
 800a848:	9900      	ldr	r1, [sp, #0]
 800a84a:	4605      	mov	r5, r0
 800a84c:	4630      	mov	r0, r6
 800a84e:	f7ff fd09 	bl	800a264 <_malloc_r>
 800a852:	b948      	cbnz	r0, 800a868 <__smakebuf_r+0x44>
 800a854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a858:	059a      	lsls	r2, r3, #22
 800a85a:	d4ef      	bmi.n	800a83c <__smakebuf_r+0x18>
 800a85c:	f023 0303 	bic.w	r3, r3, #3
 800a860:	f043 0302 	orr.w	r3, r3, #2
 800a864:	81a3      	strh	r3, [r4, #12]
 800a866:	e7e3      	b.n	800a830 <__smakebuf_r+0xc>
 800a868:	4b0d      	ldr	r3, [pc, #52]	; (800a8a0 <__smakebuf_r+0x7c>)
 800a86a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a86c:	89a3      	ldrh	r3, [r4, #12]
 800a86e:	6020      	str	r0, [r4, #0]
 800a870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a874:	81a3      	strh	r3, [r4, #12]
 800a876:	9b00      	ldr	r3, [sp, #0]
 800a878:	6163      	str	r3, [r4, #20]
 800a87a:	9b01      	ldr	r3, [sp, #4]
 800a87c:	6120      	str	r0, [r4, #16]
 800a87e:	b15b      	cbz	r3, 800a898 <__smakebuf_r+0x74>
 800a880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a884:	4630      	mov	r0, r6
 800a886:	f000 fb4f 	bl	800af28 <_isatty_r>
 800a88a:	b128      	cbz	r0, 800a898 <__smakebuf_r+0x74>
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	f023 0303 	bic.w	r3, r3, #3
 800a892:	f043 0301 	orr.w	r3, r3, #1
 800a896:	81a3      	strh	r3, [r4, #12]
 800a898:	89a3      	ldrh	r3, [r4, #12]
 800a89a:	431d      	orrs	r5, r3
 800a89c:	81a5      	strh	r5, [r4, #12]
 800a89e:	e7cd      	b.n	800a83c <__smakebuf_r+0x18>
 800a8a0:	0800a691 	.word	0x0800a691

0800a8a4 <__malloc_lock>:
 800a8a4:	4770      	bx	lr

0800a8a6 <__malloc_unlock>:
 800a8a6:	4770      	bx	lr

0800a8a8 <__sfputc_r>:
 800a8a8:	6893      	ldr	r3, [r2, #8]
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	b410      	push	{r4}
 800a8b0:	6093      	str	r3, [r2, #8]
 800a8b2:	da08      	bge.n	800a8c6 <__sfputc_r+0x1e>
 800a8b4:	6994      	ldr	r4, [r2, #24]
 800a8b6:	42a3      	cmp	r3, r4
 800a8b8:	db01      	blt.n	800a8be <__sfputc_r+0x16>
 800a8ba:	290a      	cmp	r1, #10
 800a8bc:	d103      	bne.n	800a8c6 <__sfputc_r+0x1e>
 800a8be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8c2:	f7ff bd51 	b.w	800a368 <__swbuf_r>
 800a8c6:	6813      	ldr	r3, [r2, #0]
 800a8c8:	1c58      	adds	r0, r3, #1
 800a8ca:	6010      	str	r0, [r2, #0]
 800a8cc:	7019      	strb	r1, [r3, #0]
 800a8ce:	4608      	mov	r0, r1
 800a8d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8d4:	4770      	bx	lr

0800a8d6 <__sfputs_r>:
 800a8d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d8:	4606      	mov	r6, r0
 800a8da:	460f      	mov	r7, r1
 800a8dc:	4614      	mov	r4, r2
 800a8de:	18d5      	adds	r5, r2, r3
 800a8e0:	42ac      	cmp	r4, r5
 800a8e2:	d101      	bne.n	800a8e8 <__sfputs_r+0x12>
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	e007      	b.n	800a8f8 <__sfputs_r+0x22>
 800a8e8:	463a      	mov	r2, r7
 800a8ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f7ff ffda 	bl	800a8a8 <__sfputc_r>
 800a8f4:	1c43      	adds	r3, r0, #1
 800a8f6:	d1f3      	bne.n	800a8e0 <__sfputs_r+0xa>
 800a8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8fc <_vfiprintf_r>:
 800a8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a900:	460c      	mov	r4, r1
 800a902:	b09d      	sub	sp, #116	; 0x74
 800a904:	4617      	mov	r7, r2
 800a906:	461d      	mov	r5, r3
 800a908:	4606      	mov	r6, r0
 800a90a:	b118      	cbz	r0, 800a914 <_vfiprintf_r+0x18>
 800a90c:	6983      	ldr	r3, [r0, #24]
 800a90e:	b90b      	cbnz	r3, 800a914 <_vfiprintf_r+0x18>
 800a910:	f7ff feda 	bl	800a6c8 <__sinit>
 800a914:	4b7c      	ldr	r3, [pc, #496]	; (800ab08 <_vfiprintf_r+0x20c>)
 800a916:	429c      	cmp	r4, r3
 800a918:	d158      	bne.n	800a9cc <_vfiprintf_r+0xd0>
 800a91a:	6874      	ldr	r4, [r6, #4]
 800a91c:	89a3      	ldrh	r3, [r4, #12]
 800a91e:	0718      	lsls	r0, r3, #28
 800a920:	d55e      	bpl.n	800a9e0 <_vfiprintf_r+0xe4>
 800a922:	6923      	ldr	r3, [r4, #16]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d05b      	beq.n	800a9e0 <_vfiprintf_r+0xe4>
 800a928:	2300      	movs	r3, #0
 800a92a:	9309      	str	r3, [sp, #36]	; 0x24
 800a92c:	2320      	movs	r3, #32
 800a92e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a932:	2330      	movs	r3, #48	; 0x30
 800a934:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a938:	9503      	str	r5, [sp, #12]
 800a93a:	f04f 0b01 	mov.w	fp, #1
 800a93e:	46b8      	mov	r8, r7
 800a940:	4645      	mov	r5, r8
 800a942:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a946:	b10b      	cbz	r3, 800a94c <_vfiprintf_r+0x50>
 800a948:	2b25      	cmp	r3, #37	; 0x25
 800a94a:	d154      	bne.n	800a9f6 <_vfiprintf_r+0xfa>
 800a94c:	ebb8 0a07 	subs.w	sl, r8, r7
 800a950:	d00b      	beq.n	800a96a <_vfiprintf_r+0x6e>
 800a952:	4653      	mov	r3, sl
 800a954:	463a      	mov	r2, r7
 800a956:	4621      	mov	r1, r4
 800a958:	4630      	mov	r0, r6
 800a95a:	f7ff ffbc 	bl	800a8d6 <__sfputs_r>
 800a95e:	3001      	adds	r0, #1
 800a960:	f000 80c2 	beq.w	800aae8 <_vfiprintf_r+0x1ec>
 800a964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a966:	4453      	add	r3, sl
 800a968:	9309      	str	r3, [sp, #36]	; 0x24
 800a96a:	f898 3000 	ldrb.w	r3, [r8]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f000 80ba 	beq.w	800aae8 <_vfiprintf_r+0x1ec>
 800a974:	2300      	movs	r3, #0
 800a976:	f04f 32ff 	mov.w	r2, #4294967295
 800a97a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a97e:	9304      	str	r3, [sp, #16]
 800a980:	9307      	str	r3, [sp, #28]
 800a982:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a986:	931a      	str	r3, [sp, #104]	; 0x68
 800a988:	46a8      	mov	r8, r5
 800a98a:	2205      	movs	r2, #5
 800a98c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a990:	485e      	ldr	r0, [pc, #376]	; (800ab0c <_vfiprintf_r+0x210>)
 800a992:	f7f5 fc45 	bl	8000220 <memchr>
 800a996:	9b04      	ldr	r3, [sp, #16]
 800a998:	bb78      	cbnz	r0, 800a9fa <_vfiprintf_r+0xfe>
 800a99a:	06d9      	lsls	r1, r3, #27
 800a99c:	bf44      	itt	mi
 800a99e:	2220      	movmi	r2, #32
 800a9a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a9a4:	071a      	lsls	r2, r3, #28
 800a9a6:	bf44      	itt	mi
 800a9a8:	222b      	movmi	r2, #43	; 0x2b
 800a9aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a9ae:	782a      	ldrb	r2, [r5, #0]
 800a9b0:	2a2a      	cmp	r2, #42	; 0x2a
 800a9b2:	d02a      	beq.n	800aa0a <_vfiprintf_r+0x10e>
 800a9b4:	9a07      	ldr	r2, [sp, #28]
 800a9b6:	46a8      	mov	r8, r5
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	250a      	movs	r5, #10
 800a9bc:	4641      	mov	r1, r8
 800a9be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9c2:	3b30      	subs	r3, #48	; 0x30
 800a9c4:	2b09      	cmp	r3, #9
 800a9c6:	d969      	bls.n	800aa9c <_vfiprintf_r+0x1a0>
 800a9c8:	b360      	cbz	r0, 800aa24 <_vfiprintf_r+0x128>
 800a9ca:	e024      	b.n	800aa16 <_vfiprintf_r+0x11a>
 800a9cc:	4b50      	ldr	r3, [pc, #320]	; (800ab10 <_vfiprintf_r+0x214>)
 800a9ce:	429c      	cmp	r4, r3
 800a9d0:	d101      	bne.n	800a9d6 <_vfiprintf_r+0xda>
 800a9d2:	68b4      	ldr	r4, [r6, #8]
 800a9d4:	e7a2      	b.n	800a91c <_vfiprintf_r+0x20>
 800a9d6:	4b4f      	ldr	r3, [pc, #316]	; (800ab14 <_vfiprintf_r+0x218>)
 800a9d8:	429c      	cmp	r4, r3
 800a9da:	bf08      	it	eq
 800a9dc:	68f4      	ldreq	r4, [r6, #12]
 800a9de:	e79d      	b.n	800a91c <_vfiprintf_r+0x20>
 800a9e0:	4621      	mov	r1, r4
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	f7ff fd12 	bl	800a40c <__swsetup_r>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	d09d      	beq.n	800a928 <_vfiprintf_r+0x2c>
 800a9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f0:	b01d      	add	sp, #116	; 0x74
 800a9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f6:	46a8      	mov	r8, r5
 800a9f8:	e7a2      	b.n	800a940 <_vfiprintf_r+0x44>
 800a9fa:	4a44      	ldr	r2, [pc, #272]	; (800ab0c <_vfiprintf_r+0x210>)
 800a9fc:	1a80      	subs	r0, r0, r2
 800a9fe:	fa0b f000 	lsl.w	r0, fp, r0
 800aa02:	4318      	orrs	r0, r3
 800aa04:	9004      	str	r0, [sp, #16]
 800aa06:	4645      	mov	r5, r8
 800aa08:	e7be      	b.n	800a988 <_vfiprintf_r+0x8c>
 800aa0a:	9a03      	ldr	r2, [sp, #12]
 800aa0c:	1d11      	adds	r1, r2, #4
 800aa0e:	6812      	ldr	r2, [r2, #0]
 800aa10:	9103      	str	r1, [sp, #12]
 800aa12:	2a00      	cmp	r2, #0
 800aa14:	db01      	blt.n	800aa1a <_vfiprintf_r+0x11e>
 800aa16:	9207      	str	r2, [sp, #28]
 800aa18:	e004      	b.n	800aa24 <_vfiprintf_r+0x128>
 800aa1a:	4252      	negs	r2, r2
 800aa1c:	f043 0302 	orr.w	r3, r3, #2
 800aa20:	9207      	str	r2, [sp, #28]
 800aa22:	9304      	str	r3, [sp, #16]
 800aa24:	f898 3000 	ldrb.w	r3, [r8]
 800aa28:	2b2e      	cmp	r3, #46	; 0x2e
 800aa2a:	d10e      	bne.n	800aa4a <_vfiprintf_r+0x14e>
 800aa2c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800aa30:	2b2a      	cmp	r3, #42	; 0x2a
 800aa32:	d138      	bne.n	800aaa6 <_vfiprintf_r+0x1aa>
 800aa34:	9b03      	ldr	r3, [sp, #12]
 800aa36:	1d1a      	adds	r2, r3, #4
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	9203      	str	r2, [sp, #12]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	bfb8      	it	lt
 800aa40:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa44:	f108 0802 	add.w	r8, r8, #2
 800aa48:	9305      	str	r3, [sp, #20]
 800aa4a:	4d33      	ldr	r5, [pc, #204]	; (800ab18 <_vfiprintf_r+0x21c>)
 800aa4c:	f898 1000 	ldrb.w	r1, [r8]
 800aa50:	2203      	movs	r2, #3
 800aa52:	4628      	mov	r0, r5
 800aa54:	f7f5 fbe4 	bl	8000220 <memchr>
 800aa58:	b140      	cbz	r0, 800aa6c <_vfiprintf_r+0x170>
 800aa5a:	2340      	movs	r3, #64	; 0x40
 800aa5c:	1b40      	subs	r0, r0, r5
 800aa5e:	fa03 f000 	lsl.w	r0, r3, r0
 800aa62:	9b04      	ldr	r3, [sp, #16]
 800aa64:	4303      	orrs	r3, r0
 800aa66:	f108 0801 	add.w	r8, r8, #1
 800aa6a:	9304      	str	r3, [sp, #16]
 800aa6c:	f898 1000 	ldrb.w	r1, [r8]
 800aa70:	482a      	ldr	r0, [pc, #168]	; (800ab1c <_vfiprintf_r+0x220>)
 800aa72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa76:	2206      	movs	r2, #6
 800aa78:	f108 0701 	add.w	r7, r8, #1
 800aa7c:	f7f5 fbd0 	bl	8000220 <memchr>
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d037      	beq.n	800aaf4 <_vfiprintf_r+0x1f8>
 800aa84:	4b26      	ldr	r3, [pc, #152]	; (800ab20 <_vfiprintf_r+0x224>)
 800aa86:	bb1b      	cbnz	r3, 800aad0 <_vfiprintf_r+0x1d4>
 800aa88:	9b03      	ldr	r3, [sp, #12]
 800aa8a:	3307      	adds	r3, #7
 800aa8c:	f023 0307 	bic.w	r3, r3, #7
 800aa90:	3308      	adds	r3, #8
 800aa92:	9303      	str	r3, [sp, #12]
 800aa94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa96:	444b      	add	r3, r9
 800aa98:	9309      	str	r3, [sp, #36]	; 0x24
 800aa9a:	e750      	b.n	800a93e <_vfiprintf_r+0x42>
 800aa9c:	fb05 3202 	mla	r2, r5, r2, r3
 800aaa0:	2001      	movs	r0, #1
 800aaa2:	4688      	mov	r8, r1
 800aaa4:	e78a      	b.n	800a9bc <_vfiprintf_r+0xc0>
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	f108 0801 	add.w	r8, r8, #1
 800aaac:	9305      	str	r3, [sp, #20]
 800aaae:	4619      	mov	r1, r3
 800aab0:	250a      	movs	r5, #10
 800aab2:	4640      	mov	r0, r8
 800aab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aab8:	3a30      	subs	r2, #48	; 0x30
 800aaba:	2a09      	cmp	r2, #9
 800aabc:	d903      	bls.n	800aac6 <_vfiprintf_r+0x1ca>
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d0c3      	beq.n	800aa4a <_vfiprintf_r+0x14e>
 800aac2:	9105      	str	r1, [sp, #20]
 800aac4:	e7c1      	b.n	800aa4a <_vfiprintf_r+0x14e>
 800aac6:	fb05 2101 	mla	r1, r5, r1, r2
 800aaca:	2301      	movs	r3, #1
 800aacc:	4680      	mov	r8, r0
 800aace:	e7f0      	b.n	800aab2 <_vfiprintf_r+0x1b6>
 800aad0:	ab03      	add	r3, sp, #12
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	4622      	mov	r2, r4
 800aad6:	4b13      	ldr	r3, [pc, #76]	; (800ab24 <_vfiprintf_r+0x228>)
 800aad8:	a904      	add	r1, sp, #16
 800aada:	4630      	mov	r0, r6
 800aadc:	f3af 8000 	nop.w
 800aae0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aae4:	4681      	mov	r9, r0
 800aae6:	d1d5      	bne.n	800aa94 <_vfiprintf_r+0x198>
 800aae8:	89a3      	ldrh	r3, [r4, #12]
 800aaea:	065b      	lsls	r3, r3, #25
 800aaec:	f53f af7e 	bmi.w	800a9ec <_vfiprintf_r+0xf0>
 800aaf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaf2:	e77d      	b.n	800a9f0 <_vfiprintf_r+0xf4>
 800aaf4:	ab03      	add	r3, sp, #12
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	4622      	mov	r2, r4
 800aafa:	4b0a      	ldr	r3, [pc, #40]	; (800ab24 <_vfiprintf_r+0x228>)
 800aafc:	a904      	add	r1, sp, #16
 800aafe:	4630      	mov	r0, r6
 800ab00:	f000 f888 	bl	800ac14 <_printf_i>
 800ab04:	e7ec      	b.n	800aae0 <_vfiprintf_r+0x1e4>
 800ab06:	bf00      	nop
 800ab08:	0800b538 	.word	0x0800b538
 800ab0c:	0800b578 	.word	0x0800b578
 800ab10:	0800b558 	.word	0x0800b558
 800ab14:	0800b518 	.word	0x0800b518
 800ab18:	0800b57e 	.word	0x0800b57e
 800ab1c:	0800b582 	.word	0x0800b582
 800ab20:	00000000 	.word	0x00000000
 800ab24:	0800a8d7 	.word	0x0800a8d7

0800ab28 <_printf_common>:
 800ab28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab2c:	4691      	mov	r9, r2
 800ab2e:	461f      	mov	r7, r3
 800ab30:	688a      	ldr	r2, [r1, #8]
 800ab32:	690b      	ldr	r3, [r1, #16]
 800ab34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	bfb8      	it	lt
 800ab3c:	4613      	movlt	r3, r2
 800ab3e:	f8c9 3000 	str.w	r3, [r9]
 800ab42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab46:	4606      	mov	r6, r0
 800ab48:	460c      	mov	r4, r1
 800ab4a:	b112      	cbz	r2, 800ab52 <_printf_common+0x2a>
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	f8c9 3000 	str.w	r3, [r9]
 800ab52:	6823      	ldr	r3, [r4, #0]
 800ab54:	0699      	lsls	r1, r3, #26
 800ab56:	bf42      	ittt	mi
 800ab58:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ab5c:	3302      	addmi	r3, #2
 800ab5e:	f8c9 3000 	strmi.w	r3, [r9]
 800ab62:	6825      	ldr	r5, [r4, #0]
 800ab64:	f015 0506 	ands.w	r5, r5, #6
 800ab68:	d107      	bne.n	800ab7a <_printf_common+0x52>
 800ab6a:	f104 0a19 	add.w	sl, r4, #25
 800ab6e:	68e3      	ldr	r3, [r4, #12]
 800ab70:	f8d9 2000 	ldr.w	r2, [r9]
 800ab74:	1a9b      	subs	r3, r3, r2
 800ab76:	42ab      	cmp	r3, r5
 800ab78:	dc28      	bgt.n	800abcc <_printf_common+0xa4>
 800ab7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ab7e:	6822      	ldr	r2, [r4, #0]
 800ab80:	3300      	adds	r3, #0
 800ab82:	bf18      	it	ne
 800ab84:	2301      	movne	r3, #1
 800ab86:	0692      	lsls	r2, r2, #26
 800ab88:	d42d      	bmi.n	800abe6 <_printf_common+0xbe>
 800ab8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab8e:	4639      	mov	r1, r7
 800ab90:	4630      	mov	r0, r6
 800ab92:	47c0      	blx	r8
 800ab94:	3001      	adds	r0, #1
 800ab96:	d020      	beq.n	800abda <_printf_common+0xb2>
 800ab98:	6823      	ldr	r3, [r4, #0]
 800ab9a:	68e5      	ldr	r5, [r4, #12]
 800ab9c:	f8d9 2000 	ldr.w	r2, [r9]
 800aba0:	f003 0306 	and.w	r3, r3, #6
 800aba4:	2b04      	cmp	r3, #4
 800aba6:	bf08      	it	eq
 800aba8:	1aad      	subeq	r5, r5, r2
 800abaa:	68a3      	ldr	r3, [r4, #8]
 800abac:	6922      	ldr	r2, [r4, #16]
 800abae:	bf0c      	ite	eq
 800abb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abb4:	2500      	movne	r5, #0
 800abb6:	4293      	cmp	r3, r2
 800abb8:	bfc4      	itt	gt
 800abba:	1a9b      	subgt	r3, r3, r2
 800abbc:	18ed      	addgt	r5, r5, r3
 800abbe:	f04f 0900 	mov.w	r9, #0
 800abc2:	341a      	adds	r4, #26
 800abc4:	454d      	cmp	r5, r9
 800abc6:	d11a      	bne.n	800abfe <_printf_common+0xd6>
 800abc8:	2000      	movs	r0, #0
 800abca:	e008      	b.n	800abde <_printf_common+0xb6>
 800abcc:	2301      	movs	r3, #1
 800abce:	4652      	mov	r2, sl
 800abd0:	4639      	mov	r1, r7
 800abd2:	4630      	mov	r0, r6
 800abd4:	47c0      	blx	r8
 800abd6:	3001      	adds	r0, #1
 800abd8:	d103      	bne.n	800abe2 <_printf_common+0xba>
 800abda:	f04f 30ff 	mov.w	r0, #4294967295
 800abde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abe2:	3501      	adds	r5, #1
 800abe4:	e7c3      	b.n	800ab6e <_printf_common+0x46>
 800abe6:	18e1      	adds	r1, r4, r3
 800abe8:	1c5a      	adds	r2, r3, #1
 800abea:	2030      	movs	r0, #48	; 0x30
 800abec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800abf0:	4422      	add	r2, r4
 800abf2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800abf6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800abfa:	3302      	adds	r3, #2
 800abfc:	e7c5      	b.n	800ab8a <_printf_common+0x62>
 800abfe:	2301      	movs	r3, #1
 800ac00:	4622      	mov	r2, r4
 800ac02:	4639      	mov	r1, r7
 800ac04:	4630      	mov	r0, r6
 800ac06:	47c0      	blx	r8
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d0e6      	beq.n	800abda <_printf_common+0xb2>
 800ac0c:	f109 0901 	add.w	r9, r9, #1
 800ac10:	e7d8      	b.n	800abc4 <_printf_common+0x9c>
	...

0800ac14 <_printf_i>:
 800ac14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ac1c:	460c      	mov	r4, r1
 800ac1e:	7e09      	ldrb	r1, [r1, #24]
 800ac20:	b085      	sub	sp, #20
 800ac22:	296e      	cmp	r1, #110	; 0x6e
 800ac24:	4617      	mov	r7, r2
 800ac26:	4606      	mov	r6, r0
 800ac28:	4698      	mov	r8, r3
 800ac2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac2c:	f000 80b3 	beq.w	800ad96 <_printf_i+0x182>
 800ac30:	d822      	bhi.n	800ac78 <_printf_i+0x64>
 800ac32:	2963      	cmp	r1, #99	; 0x63
 800ac34:	d036      	beq.n	800aca4 <_printf_i+0x90>
 800ac36:	d80a      	bhi.n	800ac4e <_printf_i+0x3a>
 800ac38:	2900      	cmp	r1, #0
 800ac3a:	f000 80b9 	beq.w	800adb0 <_printf_i+0x19c>
 800ac3e:	2958      	cmp	r1, #88	; 0x58
 800ac40:	f000 8083 	beq.w	800ad4a <_printf_i+0x136>
 800ac44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ac4c:	e032      	b.n	800acb4 <_printf_i+0xa0>
 800ac4e:	2964      	cmp	r1, #100	; 0x64
 800ac50:	d001      	beq.n	800ac56 <_printf_i+0x42>
 800ac52:	2969      	cmp	r1, #105	; 0x69
 800ac54:	d1f6      	bne.n	800ac44 <_printf_i+0x30>
 800ac56:	6820      	ldr	r0, [r4, #0]
 800ac58:	6813      	ldr	r3, [r2, #0]
 800ac5a:	0605      	lsls	r5, r0, #24
 800ac5c:	f103 0104 	add.w	r1, r3, #4
 800ac60:	d52a      	bpl.n	800acb8 <_printf_i+0xa4>
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	6011      	str	r1, [r2, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	da03      	bge.n	800ac72 <_printf_i+0x5e>
 800ac6a:	222d      	movs	r2, #45	; 0x2d
 800ac6c:	425b      	negs	r3, r3
 800ac6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ac72:	486f      	ldr	r0, [pc, #444]	; (800ae30 <_printf_i+0x21c>)
 800ac74:	220a      	movs	r2, #10
 800ac76:	e039      	b.n	800acec <_printf_i+0xd8>
 800ac78:	2973      	cmp	r1, #115	; 0x73
 800ac7a:	f000 809d 	beq.w	800adb8 <_printf_i+0x1a4>
 800ac7e:	d808      	bhi.n	800ac92 <_printf_i+0x7e>
 800ac80:	296f      	cmp	r1, #111	; 0x6f
 800ac82:	d020      	beq.n	800acc6 <_printf_i+0xb2>
 800ac84:	2970      	cmp	r1, #112	; 0x70
 800ac86:	d1dd      	bne.n	800ac44 <_printf_i+0x30>
 800ac88:	6823      	ldr	r3, [r4, #0]
 800ac8a:	f043 0320 	orr.w	r3, r3, #32
 800ac8e:	6023      	str	r3, [r4, #0]
 800ac90:	e003      	b.n	800ac9a <_printf_i+0x86>
 800ac92:	2975      	cmp	r1, #117	; 0x75
 800ac94:	d017      	beq.n	800acc6 <_printf_i+0xb2>
 800ac96:	2978      	cmp	r1, #120	; 0x78
 800ac98:	d1d4      	bne.n	800ac44 <_printf_i+0x30>
 800ac9a:	2378      	movs	r3, #120	; 0x78
 800ac9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aca0:	4864      	ldr	r0, [pc, #400]	; (800ae34 <_printf_i+0x220>)
 800aca2:	e055      	b.n	800ad50 <_printf_i+0x13c>
 800aca4:	6813      	ldr	r3, [r2, #0]
 800aca6:	1d19      	adds	r1, r3, #4
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	6011      	str	r1, [r2, #0]
 800acac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acb4:	2301      	movs	r3, #1
 800acb6:	e08c      	b.n	800add2 <_printf_i+0x1be>
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	6011      	str	r1, [r2, #0]
 800acbc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800acc0:	bf18      	it	ne
 800acc2:	b21b      	sxthne	r3, r3
 800acc4:	e7cf      	b.n	800ac66 <_printf_i+0x52>
 800acc6:	6813      	ldr	r3, [r2, #0]
 800acc8:	6825      	ldr	r5, [r4, #0]
 800acca:	1d18      	adds	r0, r3, #4
 800accc:	6010      	str	r0, [r2, #0]
 800acce:	0628      	lsls	r0, r5, #24
 800acd0:	d501      	bpl.n	800acd6 <_printf_i+0xc2>
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	e002      	b.n	800acdc <_printf_i+0xc8>
 800acd6:	0668      	lsls	r0, r5, #25
 800acd8:	d5fb      	bpl.n	800acd2 <_printf_i+0xbe>
 800acda:	881b      	ldrh	r3, [r3, #0]
 800acdc:	4854      	ldr	r0, [pc, #336]	; (800ae30 <_printf_i+0x21c>)
 800acde:	296f      	cmp	r1, #111	; 0x6f
 800ace0:	bf14      	ite	ne
 800ace2:	220a      	movne	r2, #10
 800ace4:	2208      	moveq	r2, #8
 800ace6:	2100      	movs	r1, #0
 800ace8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acec:	6865      	ldr	r5, [r4, #4]
 800acee:	60a5      	str	r5, [r4, #8]
 800acf0:	2d00      	cmp	r5, #0
 800acf2:	f2c0 8095 	blt.w	800ae20 <_printf_i+0x20c>
 800acf6:	6821      	ldr	r1, [r4, #0]
 800acf8:	f021 0104 	bic.w	r1, r1, #4
 800acfc:	6021      	str	r1, [r4, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d13d      	bne.n	800ad7e <_printf_i+0x16a>
 800ad02:	2d00      	cmp	r5, #0
 800ad04:	f040 808e 	bne.w	800ae24 <_printf_i+0x210>
 800ad08:	4665      	mov	r5, ip
 800ad0a:	2a08      	cmp	r2, #8
 800ad0c:	d10b      	bne.n	800ad26 <_printf_i+0x112>
 800ad0e:	6823      	ldr	r3, [r4, #0]
 800ad10:	07db      	lsls	r3, r3, #31
 800ad12:	d508      	bpl.n	800ad26 <_printf_i+0x112>
 800ad14:	6923      	ldr	r3, [r4, #16]
 800ad16:	6862      	ldr	r2, [r4, #4]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	bfde      	ittt	le
 800ad1c:	2330      	movle	r3, #48	; 0x30
 800ad1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad22:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad26:	ebac 0305 	sub.w	r3, ip, r5
 800ad2a:	6123      	str	r3, [r4, #16]
 800ad2c:	f8cd 8000 	str.w	r8, [sp]
 800ad30:	463b      	mov	r3, r7
 800ad32:	aa03      	add	r2, sp, #12
 800ad34:	4621      	mov	r1, r4
 800ad36:	4630      	mov	r0, r6
 800ad38:	f7ff fef6 	bl	800ab28 <_printf_common>
 800ad3c:	3001      	adds	r0, #1
 800ad3e:	d14d      	bne.n	800addc <_printf_i+0x1c8>
 800ad40:	f04f 30ff 	mov.w	r0, #4294967295
 800ad44:	b005      	add	sp, #20
 800ad46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad4a:	4839      	ldr	r0, [pc, #228]	; (800ae30 <_printf_i+0x21c>)
 800ad4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ad50:	6813      	ldr	r3, [r2, #0]
 800ad52:	6821      	ldr	r1, [r4, #0]
 800ad54:	1d1d      	adds	r5, r3, #4
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	6015      	str	r5, [r2, #0]
 800ad5a:	060a      	lsls	r2, r1, #24
 800ad5c:	d50b      	bpl.n	800ad76 <_printf_i+0x162>
 800ad5e:	07ca      	lsls	r2, r1, #31
 800ad60:	bf44      	itt	mi
 800ad62:	f041 0120 	orrmi.w	r1, r1, #32
 800ad66:	6021      	strmi	r1, [r4, #0]
 800ad68:	b91b      	cbnz	r3, 800ad72 <_printf_i+0x15e>
 800ad6a:	6822      	ldr	r2, [r4, #0]
 800ad6c:	f022 0220 	bic.w	r2, r2, #32
 800ad70:	6022      	str	r2, [r4, #0]
 800ad72:	2210      	movs	r2, #16
 800ad74:	e7b7      	b.n	800ace6 <_printf_i+0xd2>
 800ad76:	064d      	lsls	r5, r1, #25
 800ad78:	bf48      	it	mi
 800ad7a:	b29b      	uxthmi	r3, r3
 800ad7c:	e7ef      	b.n	800ad5e <_printf_i+0x14a>
 800ad7e:	4665      	mov	r5, ip
 800ad80:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad84:	fb02 3311 	mls	r3, r2, r1, r3
 800ad88:	5cc3      	ldrb	r3, [r0, r3]
 800ad8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ad8e:	460b      	mov	r3, r1
 800ad90:	2900      	cmp	r1, #0
 800ad92:	d1f5      	bne.n	800ad80 <_printf_i+0x16c>
 800ad94:	e7b9      	b.n	800ad0a <_printf_i+0xf6>
 800ad96:	6813      	ldr	r3, [r2, #0]
 800ad98:	6825      	ldr	r5, [r4, #0]
 800ad9a:	6961      	ldr	r1, [r4, #20]
 800ad9c:	1d18      	adds	r0, r3, #4
 800ad9e:	6010      	str	r0, [r2, #0]
 800ada0:	0628      	lsls	r0, r5, #24
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	d501      	bpl.n	800adaa <_printf_i+0x196>
 800ada6:	6019      	str	r1, [r3, #0]
 800ada8:	e002      	b.n	800adb0 <_printf_i+0x19c>
 800adaa:	066a      	lsls	r2, r5, #25
 800adac:	d5fb      	bpl.n	800ada6 <_printf_i+0x192>
 800adae:	8019      	strh	r1, [r3, #0]
 800adb0:	2300      	movs	r3, #0
 800adb2:	6123      	str	r3, [r4, #16]
 800adb4:	4665      	mov	r5, ip
 800adb6:	e7b9      	b.n	800ad2c <_printf_i+0x118>
 800adb8:	6813      	ldr	r3, [r2, #0]
 800adba:	1d19      	adds	r1, r3, #4
 800adbc:	6011      	str	r1, [r2, #0]
 800adbe:	681d      	ldr	r5, [r3, #0]
 800adc0:	6862      	ldr	r2, [r4, #4]
 800adc2:	2100      	movs	r1, #0
 800adc4:	4628      	mov	r0, r5
 800adc6:	f7f5 fa2b 	bl	8000220 <memchr>
 800adca:	b108      	cbz	r0, 800add0 <_printf_i+0x1bc>
 800adcc:	1b40      	subs	r0, r0, r5
 800adce:	6060      	str	r0, [r4, #4]
 800add0:	6863      	ldr	r3, [r4, #4]
 800add2:	6123      	str	r3, [r4, #16]
 800add4:	2300      	movs	r3, #0
 800add6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adda:	e7a7      	b.n	800ad2c <_printf_i+0x118>
 800addc:	6923      	ldr	r3, [r4, #16]
 800adde:	462a      	mov	r2, r5
 800ade0:	4639      	mov	r1, r7
 800ade2:	4630      	mov	r0, r6
 800ade4:	47c0      	blx	r8
 800ade6:	3001      	adds	r0, #1
 800ade8:	d0aa      	beq.n	800ad40 <_printf_i+0x12c>
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	079b      	lsls	r3, r3, #30
 800adee:	d413      	bmi.n	800ae18 <_printf_i+0x204>
 800adf0:	68e0      	ldr	r0, [r4, #12]
 800adf2:	9b03      	ldr	r3, [sp, #12]
 800adf4:	4298      	cmp	r0, r3
 800adf6:	bfb8      	it	lt
 800adf8:	4618      	movlt	r0, r3
 800adfa:	e7a3      	b.n	800ad44 <_printf_i+0x130>
 800adfc:	2301      	movs	r3, #1
 800adfe:	464a      	mov	r2, r9
 800ae00:	4639      	mov	r1, r7
 800ae02:	4630      	mov	r0, r6
 800ae04:	47c0      	blx	r8
 800ae06:	3001      	adds	r0, #1
 800ae08:	d09a      	beq.n	800ad40 <_printf_i+0x12c>
 800ae0a:	3501      	adds	r5, #1
 800ae0c:	68e3      	ldr	r3, [r4, #12]
 800ae0e:	9a03      	ldr	r2, [sp, #12]
 800ae10:	1a9b      	subs	r3, r3, r2
 800ae12:	42ab      	cmp	r3, r5
 800ae14:	dcf2      	bgt.n	800adfc <_printf_i+0x1e8>
 800ae16:	e7eb      	b.n	800adf0 <_printf_i+0x1dc>
 800ae18:	2500      	movs	r5, #0
 800ae1a:	f104 0919 	add.w	r9, r4, #25
 800ae1e:	e7f5      	b.n	800ae0c <_printf_i+0x1f8>
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d1ac      	bne.n	800ad7e <_printf_i+0x16a>
 800ae24:	7803      	ldrb	r3, [r0, #0]
 800ae26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae2e:	e76c      	b.n	800ad0a <_printf_i+0xf6>
 800ae30:	0800b589 	.word	0x0800b589
 800ae34:	0800b59a 	.word	0x0800b59a

0800ae38 <__sread>:
 800ae38:	b510      	push	{r4, lr}
 800ae3a:	460c      	mov	r4, r1
 800ae3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae40:	f000 f894 	bl	800af6c <_read_r>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	bfab      	itete	ge
 800ae48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae4a:	89a3      	ldrhlt	r3, [r4, #12]
 800ae4c:	181b      	addge	r3, r3, r0
 800ae4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae52:	bfac      	ite	ge
 800ae54:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae56:	81a3      	strhlt	r3, [r4, #12]
 800ae58:	bd10      	pop	{r4, pc}

0800ae5a <__swrite>:
 800ae5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae5e:	461f      	mov	r7, r3
 800ae60:	898b      	ldrh	r3, [r1, #12]
 800ae62:	05db      	lsls	r3, r3, #23
 800ae64:	4605      	mov	r5, r0
 800ae66:	460c      	mov	r4, r1
 800ae68:	4616      	mov	r6, r2
 800ae6a:	d505      	bpl.n	800ae78 <__swrite+0x1e>
 800ae6c:	2302      	movs	r3, #2
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae74:	f000 f868 	bl	800af48 <_lseek_r>
 800ae78:	89a3      	ldrh	r3, [r4, #12]
 800ae7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae82:	81a3      	strh	r3, [r4, #12]
 800ae84:	4632      	mov	r2, r6
 800ae86:	463b      	mov	r3, r7
 800ae88:	4628      	mov	r0, r5
 800ae8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae8e:	f000 b817 	b.w	800aec0 <_write_r>

0800ae92 <__sseek>:
 800ae92:	b510      	push	{r4, lr}
 800ae94:	460c      	mov	r4, r1
 800ae96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae9a:	f000 f855 	bl	800af48 <_lseek_r>
 800ae9e:	1c43      	adds	r3, r0, #1
 800aea0:	89a3      	ldrh	r3, [r4, #12]
 800aea2:	bf15      	itete	ne
 800aea4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aea6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aeaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aeae:	81a3      	strheq	r3, [r4, #12]
 800aeb0:	bf18      	it	ne
 800aeb2:	81a3      	strhne	r3, [r4, #12]
 800aeb4:	bd10      	pop	{r4, pc}

0800aeb6 <__sclose>:
 800aeb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeba:	f000 b813 	b.w	800aee4 <_close_r>
	...

0800aec0 <_write_r>:
 800aec0:	b538      	push	{r3, r4, r5, lr}
 800aec2:	4c07      	ldr	r4, [pc, #28]	; (800aee0 <_write_r+0x20>)
 800aec4:	4605      	mov	r5, r0
 800aec6:	4608      	mov	r0, r1
 800aec8:	4611      	mov	r1, r2
 800aeca:	2200      	movs	r2, #0
 800aecc:	6022      	str	r2, [r4, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	f7f7 f840 	bl	8001f54 <_write>
 800aed4:	1c43      	adds	r3, r0, #1
 800aed6:	d102      	bne.n	800aede <_write_r+0x1e>
 800aed8:	6823      	ldr	r3, [r4, #0]
 800aeda:	b103      	cbz	r3, 800aede <_write_r+0x1e>
 800aedc:	602b      	str	r3, [r5, #0]
 800aede:	bd38      	pop	{r3, r4, r5, pc}
 800aee0:	200077a8 	.word	0x200077a8

0800aee4 <_close_r>:
 800aee4:	b538      	push	{r3, r4, r5, lr}
 800aee6:	4c06      	ldr	r4, [pc, #24]	; (800af00 <_close_r+0x1c>)
 800aee8:	2300      	movs	r3, #0
 800aeea:	4605      	mov	r5, r0
 800aeec:	4608      	mov	r0, r1
 800aeee:	6023      	str	r3, [r4, #0]
 800aef0:	f7f7 f84c 	bl	8001f8c <_close>
 800aef4:	1c43      	adds	r3, r0, #1
 800aef6:	d102      	bne.n	800aefe <_close_r+0x1a>
 800aef8:	6823      	ldr	r3, [r4, #0]
 800aefa:	b103      	cbz	r3, 800aefe <_close_r+0x1a>
 800aefc:	602b      	str	r3, [r5, #0]
 800aefe:	bd38      	pop	{r3, r4, r5, pc}
 800af00:	200077a8 	.word	0x200077a8

0800af04 <_fstat_r>:
 800af04:	b538      	push	{r3, r4, r5, lr}
 800af06:	4c07      	ldr	r4, [pc, #28]	; (800af24 <_fstat_r+0x20>)
 800af08:	2300      	movs	r3, #0
 800af0a:	4605      	mov	r5, r0
 800af0c:	4608      	mov	r0, r1
 800af0e:	4611      	mov	r1, r2
 800af10:	6023      	str	r3, [r4, #0]
 800af12:	f7f7 f847 	bl	8001fa4 <_fstat>
 800af16:	1c43      	adds	r3, r0, #1
 800af18:	d102      	bne.n	800af20 <_fstat_r+0x1c>
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	b103      	cbz	r3, 800af20 <_fstat_r+0x1c>
 800af1e:	602b      	str	r3, [r5, #0]
 800af20:	bd38      	pop	{r3, r4, r5, pc}
 800af22:	bf00      	nop
 800af24:	200077a8 	.word	0x200077a8

0800af28 <_isatty_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	4c06      	ldr	r4, [pc, #24]	; (800af44 <_isatty_r+0x1c>)
 800af2c:	2300      	movs	r3, #0
 800af2e:	4605      	mov	r5, r0
 800af30:	4608      	mov	r0, r1
 800af32:	6023      	str	r3, [r4, #0]
 800af34:	f7f7 f846 	bl	8001fc4 <_isatty>
 800af38:	1c43      	adds	r3, r0, #1
 800af3a:	d102      	bne.n	800af42 <_isatty_r+0x1a>
 800af3c:	6823      	ldr	r3, [r4, #0]
 800af3e:	b103      	cbz	r3, 800af42 <_isatty_r+0x1a>
 800af40:	602b      	str	r3, [r5, #0]
 800af42:	bd38      	pop	{r3, r4, r5, pc}
 800af44:	200077a8 	.word	0x200077a8

0800af48 <_lseek_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	4c07      	ldr	r4, [pc, #28]	; (800af68 <_lseek_r+0x20>)
 800af4c:	4605      	mov	r5, r0
 800af4e:	4608      	mov	r0, r1
 800af50:	4611      	mov	r1, r2
 800af52:	2200      	movs	r2, #0
 800af54:	6022      	str	r2, [r4, #0]
 800af56:	461a      	mov	r2, r3
 800af58:	f7f7 f83f 	bl	8001fda <_lseek>
 800af5c:	1c43      	adds	r3, r0, #1
 800af5e:	d102      	bne.n	800af66 <_lseek_r+0x1e>
 800af60:	6823      	ldr	r3, [r4, #0]
 800af62:	b103      	cbz	r3, 800af66 <_lseek_r+0x1e>
 800af64:	602b      	str	r3, [r5, #0]
 800af66:	bd38      	pop	{r3, r4, r5, pc}
 800af68:	200077a8 	.word	0x200077a8

0800af6c <_read_r>:
 800af6c:	b538      	push	{r3, r4, r5, lr}
 800af6e:	4c07      	ldr	r4, [pc, #28]	; (800af8c <_read_r+0x20>)
 800af70:	4605      	mov	r5, r0
 800af72:	4608      	mov	r0, r1
 800af74:	4611      	mov	r1, r2
 800af76:	2200      	movs	r2, #0
 800af78:	6022      	str	r2, [r4, #0]
 800af7a:	461a      	mov	r2, r3
 800af7c:	f7f6 ffcd 	bl	8001f1a <_read>
 800af80:	1c43      	adds	r3, r0, #1
 800af82:	d102      	bne.n	800af8a <_read_r+0x1e>
 800af84:	6823      	ldr	r3, [r4, #0]
 800af86:	b103      	cbz	r3, 800af8a <_read_r+0x1e>
 800af88:	602b      	str	r3, [r5, #0]
 800af8a:	bd38      	pop	{r3, r4, r5, pc}
 800af8c:	200077a8 	.word	0x200077a8

0800af90 <_init>:
 800af90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af92:	bf00      	nop
 800af94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af96:	bc08      	pop	{r3}
 800af98:	469e      	mov	lr, r3
 800af9a:	4770      	bx	lr

0800af9c <_fini>:
 800af9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9e:	bf00      	nop
 800afa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afa2:	bc08      	pop	{r3}
 800afa4:	469e      	mov	lr, r3
 800afa6:	4770      	bx	lr
