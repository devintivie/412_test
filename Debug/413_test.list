
413_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0bc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  0800c29c  0800c29c  0001c29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca6c  0800ca6c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca6c  0800ca6c  0001ca6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca74  0800ca74  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca74  0800ca74  0001ca74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca78  0800ca78  0001ca78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800ca7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000749c  20000094  0800cb10  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007530  0800cb10  00027530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002322f  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000045ae  00000000  00000000  000432f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c10  00000000  00000000  000478a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019e8  00000000  00000000  000494b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000292e4  00000000  00000000  0004aea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c814  00000000  00000000  00074184  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e30e4  00000000  00000000  00090998  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00173a7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e44  00000000  00000000  00173af8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000094 	.word	0x20000094
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c284 	.word	0x0800c284

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000098 	.word	0x20000098
 800021c:	0800c284 	.word	0x0800c284

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b972 	b.w	80005cc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	4688      	mov	r8, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14b      	bne.n	80003a6 <__udivmoddi4+0xa6>
 800030e:	428a      	cmp	r2, r1
 8000310:	4615      	mov	r5, r2
 8000312:	d967      	bls.n	80003e4 <__udivmoddi4+0xe4>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0720 	rsb	r7, r2, #32
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	fa20 f707 	lsr.w	r7, r0, r7
 8000326:	4095      	lsls	r5, r2
 8000328:	ea47 0803 	orr.w	r8, r7, r3
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbb8 f7fe 	udiv	r7, r8, lr
 8000338:	fa1f fc85 	uxth.w	ip, r5
 800033c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000340:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000344:	fb07 f10c 	mul.w	r1, r7, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000352:	f080 811b 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8118 	bls.w	800058c <__udivmoddi4+0x28c>
 800035c:	3f02      	subs	r7, #2
 800035e:	442b      	add	r3, r5
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0fe 	udiv	r0, r3, lr
 8000368:	fb0e 3310 	mls	r3, lr, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fc0c 	mul.w	ip, r0, ip
 8000374:	45a4      	cmp	ip, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	192c      	adds	r4, r5, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	f080 8107 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000382:	45a4      	cmp	ip, r4
 8000384:	f240 8104 	bls.w	8000590 <__udivmoddi4+0x290>
 8000388:	3802      	subs	r0, #2
 800038a:	442c      	add	r4, r5
 800038c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	2700      	movs	r7, #0
 8000396:	b11e      	cbz	r6, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c6 4300 	strd	r4, r3, [r6]
 80003a0:	4639      	mov	r1, r7
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d909      	bls.n	80003be <__udivmoddi4+0xbe>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80eb 	beq.w	8000586 <__udivmoddi4+0x286>
 80003b0:	2700      	movs	r7, #0
 80003b2:	e9c6 0100 	strd	r0, r1, [r6]
 80003b6:	4638      	mov	r0, r7
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	fab3 f783 	clz	r7, r3
 80003c2:	2f00      	cmp	r7, #0
 80003c4:	d147      	bne.n	8000456 <__udivmoddi4+0x156>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xd0>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 80fa 	bhi.w	80005c4 <__udivmoddi4+0x2c4>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb61 0303 	sbc.w	r3, r1, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4698      	mov	r8, r3
 80003da:	2e00      	cmp	r6, #0
 80003dc:	d0e0      	beq.n	80003a0 <__udivmoddi4+0xa0>
 80003de:	e9c6 4800 	strd	r4, r8, [r6]
 80003e2:	e7dd      	b.n	80003a0 <__udivmoddi4+0xa0>
 80003e4:	b902      	cbnz	r2, 80003e8 <__udivmoddi4+0xe8>
 80003e6:	deff      	udf	#255	; 0xff
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f040 808f 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f2:	1b49      	subs	r1, r1, r5
 80003f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f8:	fa1f f885 	uxth.w	r8, r5
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fb0e 111c 	mls	r1, lr, ip, r1
 8000408:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800040c:	fb08 f10c 	mul.w	r1, r8, ip
 8000410:	4299      	cmp	r1, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x124>
 8000414:	18eb      	adds	r3, r5, r3
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4299      	cmp	r1, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 8000422:	4684      	mov	ip, r0
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000430:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x14c>
 800043c:	192c      	adds	r4, r5, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x14a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80b6 	bhi.w	80005b6 <__udivmoddi4+0x2b6>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e79f      	b.n	8000396 <__udivmoddi4+0x96>
 8000456:	f1c7 0c20 	rsb	ip, r7, #32
 800045a:	40bb      	lsls	r3, r7
 800045c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000460:	ea4e 0e03 	orr.w	lr, lr, r3
 8000464:	fa01 f407 	lsl.w	r4, r1, r7
 8000468:	fa20 f50c 	lsr.w	r5, r0, ip
 800046c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000470:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000474:	4325      	orrs	r5, r4
 8000476:	fbb3 f9f8 	udiv	r9, r3, r8
 800047a:	0c2c      	lsrs	r4, r5, #16
 800047c:	fb08 3319 	mls	r3, r8, r9, r3
 8000480:	fa1f fa8e 	uxth.w	sl, lr
 8000484:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000488:	fb09 f40a 	mul.w	r4, r9, sl
 800048c:	429c      	cmp	r4, r3
 800048e:	fa02 f207 	lsl.w	r2, r2, r7
 8000492:	fa00 f107 	lsl.w	r1, r0, r7
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1e 0303 	adds.w	r3, lr, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	f080 8087 	bcs.w	80005b2 <__udivmoddi4+0x2b2>
 80004a4:	429c      	cmp	r4, r3
 80004a6:	f240 8084 	bls.w	80005b2 <__udivmoddi4+0x2b2>
 80004aa:	f1a9 0902 	sub.w	r9, r9, #2
 80004ae:	4473      	add	r3, lr
 80004b0:	1b1b      	subs	r3, r3, r4
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b8:	fb08 3310 	mls	r3, r8, r0, r3
 80004bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004c4:	45a2      	cmp	sl, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1e 0404 	adds.w	r4, lr, r4
 80004cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d0:	d26b      	bcs.n	80005aa <__udivmoddi4+0x2aa>
 80004d2:	45a2      	cmp	sl, r4
 80004d4:	d969      	bls.n	80005aa <__udivmoddi4+0x2aa>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4474      	add	r4, lr
 80004da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	eba4 040a 	sub.w	r4, r4, sl
 80004e6:	454c      	cmp	r4, r9
 80004e8:	46c2      	mov	sl, r8
 80004ea:	464b      	mov	r3, r9
 80004ec:	d354      	bcc.n	8000598 <__udivmoddi4+0x298>
 80004ee:	d051      	beq.n	8000594 <__udivmoddi4+0x294>
 80004f0:	2e00      	cmp	r6, #0
 80004f2:	d069      	beq.n	80005c8 <__udivmoddi4+0x2c8>
 80004f4:	ebb1 050a 	subs.w	r5, r1, sl
 80004f8:	eb64 0403 	sbc.w	r4, r4, r3
 80004fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000500:	40fd      	lsrs	r5, r7
 8000502:	40fc      	lsrs	r4, r7
 8000504:	ea4c 0505 	orr.w	r5, ip, r5
 8000508:	e9c6 5400 	strd	r5, r4, [r6]
 800050c:	2700      	movs	r7, #0
 800050e:	e747      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000510:	f1c2 0320 	rsb	r3, r2, #32
 8000514:	fa20 f703 	lsr.w	r7, r0, r3
 8000518:	4095      	lsls	r5, r2
 800051a:	fa01 f002 	lsl.w	r0, r1, r2
 800051e:	fa21 f303 	lsr.w	r3, r1, r3
 8000522:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000526:	4338      	orrs	r0, r7
 8000528:	0c01      	lsrs	r1, r0, #16
 800052a:	fbb3 f7fe 	udiv	r7, r3, lr
 800052e:	fa1f f885 	uxth.w	r8, r5
 8000532:	fb0e 3317 	mls	r3, lr, r7, r3
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb07 f308 	mul.w	r3, r7, r8
 800053e:	428b      	cmp	r3, r1
 8000540:	fa04 f402 	lsl.w	r4, r4, r2
 8000544:	d907      	bls.n	8000556 <__udivmoddi4+0x256>
 8000546:	1869      	adds	r1, r5, r1
 8000548:	f107 3cff 	add.w	ip, r7, #4294967295
 800054c:	d22f      	bcs.n	80005ae <__udivmoddi4+0x2ae>
 800054e:	428b      	cmp	r3, r1
 8000550:	d92d      	bls.n	80005ae <__udivmoddi4+0x2ae>
 8000552:	3f02      	subs	r7, #2
 8000554:	4429      	add	r1, r5
 8000556:	1acb      	subs	r3, r1, r3
 8000558:	b281      	uxth	r1, r0
 800055a:	fbb3 f0fe 	udiv	r0, r3, lr
 800055e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000562:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000566:	fb00 f308 	mul.w	r3, r0, r8
 800056a:	428b      	cmp	r3, r1
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x27e>
 800056e:	1869      	adds	r1, r5, r1
 8000570:	f100 3cff 	add.w	ip, r0, #4294967295
 8000574:	d217      	bcs.n	80005a6 <__udivmoddi4+0x2a6>
 8000576:	428b      	cmp	r3, r1
 8000578:	d915      	bls.n	80005a6 <__udivmoddi4+0x2a6>
 800057a:	3802      	subs	r0, #2
 800057c:	4429      	add	r1, r5
 800057e:	1ac9      	subs	r1, r1, r3
 8000580:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000584:	e73b      	b.n	80003fe <__udivmoddi4+0xfe>
 8000586:	4637      	mov	r7, r6
 8000588:	4630      	mov	r0, r6
 800058a:	e709      	b.n	80003a0 <__udivmoddi4+0xa0>
 800058c:	4607      	mov	r7, r0
 800058e:	e6e7      	b.n	8000360 <__udivmoddi4+0x60>
 8000590:	4618      	mov	r0, r3
 8000592:	e6fb      	b.n	800038c <__udivmoddi4+0x8c>
 8000594:	4541      	cmp	r1, r8
 8000596:	d2ab      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 8000598:	ebb8 0a02 	subs.w	sl, r8, r2
 800059c:	eb69 020e 	sbc.w	r2, r9, lr
 80005a0:	3801      	subs	r0, #1
 80005a2:	4613      	mov	r3, r2
 80005a4:	e7a4      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a6:	4660      	mov	r0, ip
 80005a8:	e7e9      	b.n	800057e <__udivmoddi4+0x27e>
 80005aa:	4618      	mov	r0, r3
 80005ac:	e795      	b.n	80004da <__udivmoddi4+0x1da>
 80005ae:	4667      	mov	r7, ip
 80005b0:	e7d1      	b.n	8000556 <__udivmoddi4+0x256>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e77c      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b6:	3802      	subs	r0, #2
 80005b8:	442c      	add	r4, r5
 80005ba:	e747      	b.n	800044c <__udivmoddi4+0x14c>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	442b      	add	r3, r5
 80005c2:	e72f      	b.n	8000424 <__udivmoddi4+0x124>
 80005c4:	4638      	mov	r0, r7
 80005c6:	e708      	b.n	80003da <__udivmoddi4+0xda>
 80005c8:	4637      	mov	r7, r6
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0xa0>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <write_PCM16_stereo_header>:
#include "fatfs.h"


/*Return 0 on success and -1 on failure*/
int write_PCM16_stereo_header(FILE* file_p, int32_t SampleRate, int32_t FrameCount)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
    int32_t subchunk2_size;
    int32_t chunk_size;

    size_t write_count;

    subchunk2_size  = FrameCount * NUM_CHANNELS * BITS_PER_SAMPLE/8;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	011b      	lsls	r3, r3, #4
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	da00      	bge.n	80005e6 <write_PCM16_stereo_header+0x16>
 80005e4:	3307      	adds	r3, #7
 80005e6:	10db      	asrs	r3, r3, #3
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    chunk_size      = 4 + (8 + SUBCHUNK1SIZE) + (8 + subchunk2_size);
 80005ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005ec:	3324      	adds	r3, #36	; 0x24
 80005ee:	64bb      	str	r3, [r7, #72]	; 0x48

    wav_header.ChunkID[0] = 'R';
 80005f0:	2352      	movs	r3, #82	; 0x52
 80005f2:	763b      	strb	r3, [r7, #24]
    wav_header.ChunkID[1] = 'I';
 80005f4:	2349      	movs	r3, #73	; 0x49
 80005f6:	767b      	strb	r3, [r7, #25]
    wav_header.ChunkID[2] = 'F';
 80005f8:	2346      	movs	r3, #70	; 0x46
 80005fa:	76bb      	strb	r3, [r7, #26]
    wav_header.ChunkID[3] = 'F';
 80005fc:	2346      	movs	r3, #70	; 0x46
 80005fe:	76fb      	strb	r3, [r7, #27]

    wav_header.ChunkSize = chunk_size;
 8000600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000602:	61fb      	str	r3, [r7, #28]

    wav_header.Format[0] = 'W';
 8000604:	2357      	movs	r3, #87	; 0x57
 8000606:	f887 3020 	strb.w	r3, [r7, #32]
    wav_header.Format[1] = 'A';
 800060a:	2341      	movs	r3, #65	; 0x41
 800060c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    wav_header.Format[2] = 'V';
 8000610:	2356      	movs	r3, #86	; 0x56
 8000612:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    wav_header.Format[3] = 'E';
 8000616:	2345      	movs	r3, #69	; 0x45
 8000618:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    wav_header.Subchunk1ID[0] = 'f';
 800061c:	2366      	movs	r3, #102	; 0x66
 800061e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    wav_header.Subchunk1ID[1] = 'm';
 8000622:	236d      	movs	r3, #109	; 0x6d
 8000624:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    wav_header.Subchunk1ID[2] = 't';
 8000628:	2374      	movs	r3, #116	; 0x74
 800062a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    wav_header.Subchunk1ID[3] = ' ';
 800062e:	2320      	movs	r3, #32
 8000630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    wav_header.Subchunk1Size = SUBCHUNK1SIZE;
 8000634:	2310      	movs	r3, #16
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
    wav_header.AudioFormat = AUDIO_FORMAT;
 8000638:	2301      	movs	r3, #1
 800063a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    wav_header.NumChannels = NUM_CHANNELS;
 800063c:	2301      	movs	r3, #1
 800063e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    wav_header.SampleRate = SampleRate;
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
    wav_header.ByteRate = BYTE_RATE;
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <write_PCM16_stereo_header+0xcc>)
 8000646:	637b      	str	r3, [r7, #52]	; 0x34
    wav_header.BlockAlign = BLOCK_ALIGN;
 8000648:	2302      	movs	r3, #2
 800064a:	873b      	strh	r3, [r7, #56]	; 0x38
    wav_header.BitsPerSample = BITS_PER_SAMPLE;
 800064c:	2310      	movs	r3, #16
 800064e:	877b      	strh	r3, [r7, #58]	; 0x3a

    wav_header.Subchunk2ID[0] = 'd';
 8000650:	2364      	movs	r3, #100	; 0x64
 8000652:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    wav_header.Subchunk2ID[1] = 'a';
 8000656:	2361      	movs	r3, #97	; 0x61
 8000658:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    wav_header.Subchunk2ID[2] = 't';
 800065c:	2374      	movs	r3, #116	; 0x74
 800065e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    wav_header.Subchunk2ID[3] = 'a';
 8000662:	2361      	movs	r3, #97	; 0x61
 8000664:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    wav_header.Subchunk2Size = subchunk2_size;
 8000668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800066a:	643b      	str	r3, [r7, #64]	; 0x40

    UINT byteCount;
	ret = f_write(file_p, &wav_header, sizeof(wavfile_header_t), &byteCount);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	f107 0118 	add.w	r1, r7, #24
 8000674:	222c      	movs	r2, #44	; 0x2c
 8000676:	68f8      	ldr	r0, [r7, #12]
 8000678:	f00a fb76 	bl	800ad68 <f_write>
 800067c:	4603      	mov	r3, r0
 800067e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	printf("header write result = %d\r\n", ret);
 8000682:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <write_PCM16_stereo_header+0xd0>)
 800068a:	f00a ff05 	bl	800b498 <iprintf>
//	ret = f_close(file_p);
//	printf("header close result = %d\r\n", ret);
    return ret;
 800068e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000692:	4618      	mov	r0, r3
 8000694:	3750      	adds	r7, #80	; 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	00017700 	.word	0x00017700
 80006a0:	0800c29c 	.word	0x0800c29c

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006aa:	f002 faf7 	bl	8002c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ae:	f000 f867 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b2:	f000 fadb 	bl	8000c6c <MX_GPIO_Init>
  MX_DMA_Init();
 80006b6:	f000 fab9 	bl	8000c2c <MX_DMA_Init>
  MX_ADC1_Init();
 80006ba:	f000 f8f1 	bl	80008a0 <MX_ADC1_Init>
  MX_DAC_Init();
 80006be:	f000 f941 	bl	8000944 <MX_DAC_Init>
  MX_DFSDM1_Init();
 80006c2:	f000 f969 	bl	8000998 <MX_DFSDM1_Init>
  MX_FMPI2C1_Init();
 80006c6:	f000 f9cd 	bl	8000a64 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 80006ca:	f000 fcfb 	bl	80010c4 <MX_FSMC_Init>
  MX_QUADSPI_Init();
 80006ce:	f000 f9ff 	bl	8000ad0 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 80006d2:	f000 fa29 	bl	8000b28 <MX_SDIO_SD_Init>
  MX_USART6_UART_Init();
 80006d6:	f000 fa7f 	bl	8000bd8 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80006da:	f007 fd03 	bl	80080e4 <MX_FATFS_Init>
  MX_SPI3_Init();
 80006de:	f000 fa43 	bl	8000b68 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2120      	movs	r1, #32
 80006e6:	481b      	ldr	r0, [pc, #108]	; (8000754 <main+0xb0>)
 80006e8:	f004 f8e8 	bl	80048bc <HAL_GPIO_WritePin>
  InitWifi();
 80006ec:	f000 ff40 	bl	8001570 <InitWifi>
//  GetWifiConnectionStatus();
//  SendHelpCommand();
//  GetHelpCommand();


	printf("path: '%s'\r\n", SDPath);
 80006f0:	4919      	ldr	r1, [pc, #100]	; (8000758 <main+0xb4>)
 80006f2:	481a      	ldr	r0, [pc, #104]	; (800075c <main+0xb8>)
 80006f4:	f00a fed0 	bl	800b498 <iprintf>
//	double duration = 10; /*seconds*/


	fRet = f_mount(&myFAT, SDPath, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	4917      	ldr	r1, [pc, #92]	; (8000758 <main+0xb4>)
 80006fc:	4818      	ldr	r0, [pc, #96]	; (8000760 <main+0xbc>)
 80006fe:	f00a f921 	bl	800a944 <f_mount>
 8000702:	4603      	mov	r3, r0
 8000704:	461a      	mov	r2, r3
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <main+0xc0>)
 8000708:	701a      	strb	r2, [r3, #0]
//	printf("header write result = %d\r\n", fRet);

	f_open(&myFile, fname, FA_WRITE | FA_CREATE_ALWAYS);
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <main+0xc4>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	220a      	movs	r2, #10
 8000710:	4619      	mov	r1, r3
 8000712:	4816      	ldr	r0, [pc, #88]	; (800076c <main+0xc8>)
 8000714:	f00a f95c 	bl	800a9d0 <f_open>

	write_PCM16_stereo_header(&myFile, SAMPLE_RATE, FrameCount * AUDIO_REC);
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <main+0xcc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	029b      	lsls	r3, r3, #10
 800071e:	461a      	mov	r2, r3
 8000720:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8000724:	4811      	ldr	r0, [pc, #68]	; (800076c <main+0xc8>)
 8000726:	f7ff ff53 	bl	80005d0 <write_PCM16_stereo_header>
//	write_PCM16_stereo_header(&myFile, SAMPLE_RATE, 131072);
//	write_PCM_mono_2khz(&myFile);


  ret = HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, Rec1Buf, AUDIO_REC);
 800072a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800072e:	4911      	ldr	r1, [pc, #68]	; (8000774 <main+0xd0>)
 8000730:	4811      	ldr	r0, [pc, #68]	; (8000778 <main+0xd4>)
 8000732:	f003 f95b 	bl	80039ec <HAL_DFSDM_FilterRegularStart_DMA>
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
  if(ret != HAL_OK)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d002      	beq.n	8000746 <main+0xa2>
  {
	  printf("DMA on filter not started");
 8000740:	480e      	ldr	r0, [pc, #56]	; (800077c <main+0xd8>)
 8000742:	f00a fea9 	bl	800b498 <iprintf>
  }
   HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2120      	movs	r1, #32
 800074a:	4802      	ldr	r0, [pc, #8]	; (8000754 <main+0xb0>)
 800074c:	f004 f8b6 	bl	80048bc <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000750:	e7fe      	b.n	8000750 <main+0xac>
 8000752:	bf00      	nop
 8000754:	40020800 	.word	0x40020800
 8000758:	200054c0 	.word	0x200054c0
 800075c:	0800c2c4 	.word	0x0800c2c4
 8000760:	200036e0 	.word	0x200036e0
 8000764:	200000b0 	.word	0x200000b0
 8000768:	20000004 	.word	0x20000004
 800076c:	20001394 	.word	0x20001394
 8000770:	20000000 	.word	0x20000000
 8000774:	200023c4 	.word	0x200023c4
 8000778:	200033c4 	.word	0x200033c4
 800077c:	0800c2d4 	.word	0x0800c2d4

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b0aa      	sub	sp, #168	; 0xa8
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800078a:	2234      	movs	r2, #52	; 0x34
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f00a fdd1 	bl	800b336 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	2258      	movs	r2, #88	; 0x58
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f00a fdc2 	bl	800b336 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b38      	ldr	r3, [pc, #224]	; (8000898 <SystemClock_Config+0x118>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	4a37      	ldr	r2, [pc, #220]	; (8000898 <SystemClock_Config+0x118>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c0:	6413      	str	r3, [r2, #64]	; 0x40
 80007c2:	4b35      	ldr	r3, [pc, #212]	; (8000898 <SystemClock_Config+0x118>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b32      	ldr	r3, [pc, #200]	; (800089c <SystemClock_Config+0x11c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a31      	ldr	r2, [pc, #196]	; (800089c <SystemClock_Config+0x11c>)
 80007d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007dc:	6013      	str	r3, [r2, #0]
 80007de:	4b2f      	ldr	r3, [pc, #188]	; (800089c <SystemClock_Config+0x11c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ea:	2302      	movs	r3, #2
 80007ec:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ee:	2301      	movs	r3, #1
 80007f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f4:	2310      	movs	r3, #16
 80007f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	2302      	movs	r3, #2
 80007fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000800:	2300      	movs	r3, #0
 8000802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000806:	2308      	movs	r3, #8
 8000808:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 96;
 800080c:	2360      	movs	r3, #96	; 0x60
 800080e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000812:	2302      	movs	r3, #2
 8000814:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000818:	2304      	movs	r3, #4
 800081a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800081e:	2302      	movs	r3, #2
 8000820:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000828:	4618      	mov	r0, r3
 800082a:	f004 fd7b 	bl	8005324 <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000834:	f000 fea8 	bl	8001588 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	230f      	movs	r3, #15
 800083a:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083c:	2302      	movs	r3, #2
 800083e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000848:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800084e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000852:	2103      	movs	r1, #3
 8000854:	4618      	mov	r0, r3
 8000856:	f004 f90d 	bl	8004a74 <HAL_RCC_ClockConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000860:	f000 fe92 	bl	8001588 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_SDIO
 8000864:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8000868:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800086a:	2300      	movs	r3, #0
 800086c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 800086e:	2300      	movs	r3, #0
 8000870:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000872:	2300      	movs	r3, #0
 8000874:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8000876:	2300      	movs	r3, #0
 8000878:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	4618      	mov	r0, r3
 8000880:	f004 fac4 	bl	8004e0c <HAL_RCCEx_PeriphCLKConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800088a:	f000 fe7d 	bl	8001588 <Error_Handler>
  }
}
 800088e:	bf00      	nop
 8000890:	37a8      	adds	r7, #168	; 0xa8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800
 800089c:	40007000 	.word	0x40007000

080008a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008a6:	463b      	mov	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008b2:	4b21      	ldr	r3, [pc, #132]	; (8000938 <MX_ADC1_Init+0x98>)
 80008b4:	4a21      	ldr	r2, [pc, #132]	; (800093c <MX_ADC1_Init+0x9c>)
 80008b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <MX_ADC1_Init+0x98>)
 80008ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008c0:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <MX_ADC1_Init+0x98>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <MX_ADC1_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008cc:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <MX_ADC1_Init+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <MX_ADC1_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_ADC1_Init+0x98>)
 80008dc:	2200      	movs	r2, #0
 80008de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_ADC1_Init+0x98>)
 80008e2:	4a17      	ldr	r2, [pc, #92]	; (8000940 <MX_ADC1_Init+0xa0>)
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_ADC1_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_ADC1_Init+0x98>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_ADC1_Init+0x98>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_ADC1_Init+0x98>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC1_Init+0x98>)
 8000902:	f002 fa5f 	bl	8002dc4 <HAL_ADC_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800090c:	f000 fe3c 	bl	8001588 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000910:	230a      	movs	r3, #10
 8000912:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000914:	2301      	movs	r3, #1
 8000916:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091c:	463b      	mov	r3, r7
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_ADC1_Init+0x98>)
 8000922:	f002 fa93 	bl	8002e4c <HAL_ADC_ConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800092c:	f000 fe2c 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200034c4 	.word	0x200034c4
 800093c:	40012000 	.word	0x40012000
 8000940:	0f000001 	.word	0x0f000001

08000944 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800094a:	463b      	mov	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_DAC_Init+0x4c>)
 8000954:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <MX_DAC_Init+0x50>)
 8000956:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000958:	480d      	ldr	r0, [pc, #52]	; (8000990 <MX_DAC_Init+0x4c>)
 800095a:	f002 fdb6 	bl	80034ca <HAL_DAC_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000964:	f000 fe10 	bl	8001588 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000968:	2300      	movs	r3, #0
 800096a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	; (8000990 <MX_DAC_Init+0x4c>)
 8000978:	f002 fdc9 	bl	800350e <HAL_DAC_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000982:	f000 fe01 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000356c 	.word	0x2000356c
 8000994:	40007400 	.word	0x40007400

08000998 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800099c:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <MX_DFSDM1_Init+0xb8>)
 800099e:	4a2d      	ldr	r2, [pc, #180]	; (8000a54 <MX_DFSDM1_Init+0xbc>)
 80009a0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80009a2:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <MX_DFSDM1_Init+0xb8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80009a8:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <MX_DFSDM1_Init+0xb8>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80009ae:	4b28      	ldr	r3, [pc, #160]	; (8000a50 <MX_DFSDM1_Init+0xb8>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80009b4:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <MX_DFSDM1_Init+0xb8>)
 80009b6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80009ba:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 50;
 80009bc:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <MX_DFSDM1_Init+0xb8>)
 80009be:	2232      	movs	r2, #50	; 0x32
 80009c0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80009c2:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <MX_DFSDM1_Init+0xb8>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80009c8:	4821      	ldr	r0, [pc, #132]	; (8000a50 <MX_DFSDM1_Init+0xb8>)
 80009ca:	f002 fedd 	bl	8003788 <HAL_DFSDM_FilterInit>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80009d4:	f000 fdd8 	bl	8001588 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80009d8:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <MX_DFSDM1_Init+0xc0>)
 80009da:	4a20      	ldr	r2, [pc, #128]	; (8000a5c <MX_DFSDM1_Init+0xc4>)
 80009dc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <MX_DFSDM1_Init+0xc0>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80009e4:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <MX_DFSDM1_Init+0xc0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 40;
 80009ea:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_DFSDM1_Init+0xc0>)
 80009ec:	2228      	movs	r2, #40	; 0x28
 80009ee:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <MX_DFSDM1_Init+0xc0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_DFSDM1_Init+0xc0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_DFSDM1_Init+0xc0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_DFSDM1_Init+0xc0>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_DFSDM1_Init+0xc0>)
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_DFSDM1_Init+0xc0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000a14:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <MX_DFSDM1_Init+0xc0>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_DFSDM1_Init+0xc0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x0;
 8000a20:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <MX_DFSDM1_Init+0xc0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000a26:	480c      	ldr	r0, [pc, #48]	; (8000a58 <MX_DFSDM1_Init+0xc0>)
 8000a28:	f002 fdbe 	bl	80035a8 <HAL_DFSDM_ChannelInit>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000a32:	f000 fda9 	bl	8001588 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000a36:	2201      	movs	r2, #1
 8000a38:	4909      	ldr	r1, [pc, #36]	; (8000a60 <MX_DFSDM1_Init+0xc8>)
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_DFSDM1_Init+0xb8>)
 8000a3c:	f002 ff90 	bl	8003960 <HAL_DFSDM_FilterConfigRegChannel>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000a46:	f000 fd9f 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200033c4 	.word	0x200033c4
 8000a54:	40016100 	.word	0x40016100
 8000a58:	2000035c 	.word	0x2000035c
 8000a5c:	40016020 	.word	0x40016020
 8000a60:	00010002 	.word	0x00010002

08000a64 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000a68:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <MX_FMPI2C1_Init+0x60>)
 8000a6a:	4a17      	ldr	r2, [pc, #92]	; (8000ac8 <MX_FMPI2C1_Init+0x64>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x20303E5D;
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <MX_FMPI2C1_Init+0x60>)
 8000a70:	4a16      	ldr	r2, [pc, #88]	; (8000acc <MX_FMPI2C1_Init+0x68>)
 8000a72:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_FMPI2C1_Init+0x60>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <MX_FMPI2C1_Init+0x60>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <MX_FMPI2C1_Init+0x60>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_FMPI2C1_Init+0x60>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <MX_FMPI2C1_Init+0x60>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_FMPI2C1_Init+0x60>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <MX_FMPI2C1_Init+0x60>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000a9e:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <MX_FMPI2C1_Init+0x60>)
 8000aa0:	f003 fc88 	bl	80043b4 <HAL_FMPI2C_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000aaa:	f000 fd6d 	bl	8001588 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_FMPI2C1_Init+0x60>)
 8000ab2:	f003 fd0e 	bl	80044d2 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000abc:	f000 fd64 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20003580 	.word	0x20003580
 8000ac8:	40006000 	.word	0x40006000
 8000acc:	20303e5d 	.word	0x20303e5d

08000ad0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_QUADSPI_Init+0x50>)
 8000ad6:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <MX_QUADSPI_Init+0x54>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_QUADSPI_Init+0x50>)
 8000adc:	22ff      	movs	r2, #255	; 0xff
 8000ade:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_QUADSPI_Init+0x50>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_QUADSPI_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_QUADSPI_Init+0x50>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_QUADSPI_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_QUADSPI_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_QUADSPI_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_QUADSPI_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_QUADSPI_Init+0x50>)
 8000b0c:	f003 fef0 	bl	80048f0 <HAL_QSPI_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000b16:	f000 fd37 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20004f18 	.word	0x20004f18
 8000b24:	a0001000 	.word	0xa0001000

08000b28 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_SDIO_SD_Init+0x38>)
 8000b2e:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <MX_SDIO_SD_Init+0x3c>)
 8000b30:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <MX_SDIO_SD_Init+0x38>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_SDIO_SD_Init+0x38>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <MX_SDIO_SD_Init+0x38>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_SDIO_SD_Init+0x38>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <MX_SDIO_SD_Init+0x38>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <MX_SDIO_SD_Init+0x38>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	2000361c 	.word	0x2000361c
 8000b64:	40012c00 	.word	0x40012c00

08000b68 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_SPI3_Init+0x68>)
 8000b6e:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <MX_SPI3_Init+0x6c>)
 8000b70:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_SPI3_Init+0x68>)
 8000b74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b78:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <MX_SPI3_Init+0x68>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <MX_SPI3_Init+0x68>)
 8000b82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b86:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_SPI3_Init+0x68>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_SPI3_Init+0x68>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_SPI3_Init+0x68>)
 8000b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b9a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_SPI3_Init+0x68>)
 8000b9e:	2220      	movs	r2, #32
 8000ba0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_SPI3_Init+0x68>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_SPI3_Init+0x68>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_SPI3_Init+0x68>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_SPI3_Init+0x68>)
 8000bb6:	220a      	movs	r2, #10
 8000bb8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_SPI3_Init+0x68>)
 8000bbc:	f005 fd90 	bl	80066e0 <HAL_SPI_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8000bc6:	f000 fcdf 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000346c 	.word	0x2000346c
 8000bd4:	40003c00 	.word	0x40003c00

08000bd8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_USART6_UART_Init+0x4c>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <MX_USART6_UART_Init+0x50>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_USART6_UART_Init+0x4c>)
 8000be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART6_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_USART6_UART_Init+0x4c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_USART6_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_USART6_UART_Init+0x4c>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_USART6_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_USART6_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_USART6_UART_Init+0x4c>)
 8000c10:	f006 f85c 	bl	8006ccc <HAL_UART_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c1a:	f000 fcb5 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200036a0 	.word	0x200036a0
 8000c28:	40011400 	.word	0x40011400

08000c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_DMA_Init+0x3c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <MX_DMA_Init+0x3c>)
 8000c3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_DMA_Init+0x3c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2038      	movs	r0, #56	; 0x38
 8000c54:	f002 fc03 	bl	800345e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c58:	2038      	movs	r0, #56	; 0x38
 8000c5a:	f002 fc1c 	bl	8003496 <HAL_NVIC_EnableIRQ>

}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08e      	sub	sp, #56	; 0x38
 8000c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
 8000c86:	4bb0      	ldr	r3, [pc, #704]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4aaf      	ldr	r2, [pc, #700]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000c8c:	f043 0310 	orr.w	r3, r3, #16
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4bad      	ldr	r3, [pc, #692]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0310 	and.w	r3, r3, #16
 8000c9a:	623b      	str	r3, [r7, #32]
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
 8000ca2:	4ba9      	ldr	r3, [pc, #676]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4aa8      	ldr	r2, [pc, #672]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4ba6      	ldr	r3, [pc, #664]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	61fb      	str	r3, [r7, #28]
 8000cb8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
 8000cbe:	4ba2      	ldr	r3, [pc, #648]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4aa1      	ldr	r2, [pc, #644]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000cc4:	f043 0320 	orr.w	r3, r3, #32
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b9f      	ldr	r3, [pc, #636]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0320 	and.w	r3, r3, #32
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	4b9b      	ldr	r3, [pc, #620]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a9a      	ldr	r2, [pc, #616]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b98      	ldr	r3, [pc, #608]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	4b94      	ldr	r3, [pc, #592]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a93      	ldr	r2, [pc, #588]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b91      	ldr	r3, [pc, #580]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b8d      	ldr	r3, [pc, #564]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a8c      	ldr	r2, [pc, #560]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b8a      	ldr	r3, [pc, #552]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	4b86      	ldr	r3, [pc, #536]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a85      	ldr	r2, [pc, #532]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b83      	ldr	r3, [pc, #524]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4b7f      	ldr	r3, [pc, #508]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a7e      	ldr	r2, [pc, #504]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b7c      	ldr	r3, [pc, #496]	; (8000f48 <MX_GPIO_Init+0x2dc>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2138      	movs	r1, #56	; 0x38
 8000d66:	4879      	ldr	r0, [pc, #484]	; (8000f4c <MX_GPIO_Init+0x2e0>)
 8000d68:	f003 fda8 	bl	80048bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2120      	movs	r1, #32
 8000d70:	4877      	ldr	r0, [pc, #476]	; (8000f50 <MX_GPIO_Init+0x2e4>)
 8000d72:	f003 fda3 	bl	80048bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000d7c:	4875      	ldr	r0, [pc, #468]	; (8000f54 <MX_GPIO_Init+0x2e8>)
 8000d7e:	f003 fd9d 	bl	80048bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|WIFI_SPI_CSN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 5124 	mov.w	r1, #10496	; 0x2900
 8000d88:	4873      	ldr	r0, [pc, #460]	; (8000f58 <MX_GPIO_Init+0x2ec>)
 8000d8a:	f003 fd97 	bl	80048bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000d8e:	2338      	movs	r3, #56	; 0x38
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4869      	ldr	r0, [pc, #420]	; (8000f4c <MX_GPIO_Init+0x2e0>)
 8000da6:	f003 fbdf 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000daa:	2340      	movs	r3, #64	; 0x40
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4861      	ldr	r0, [pc, #388]	; (8000f4c <MX_GPIO_Init+0x2e0>)
 8000dc6:	f003 fbcf 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	485d      	ldr	r0, [pc, #372]	; (8000f5c <MX_GPIO_Init+0x2f0>)
 8000de8:	f003 fbbe 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000dec:	2302      	movs	r3, #2
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df0:	4b5b      	ldr	r3, [pc, #364]	; (8000f60 <MX_GPIO_Init+0x2f4>)
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4854      	ldr	r0, [pc, #336]	; (8000f50 <MX_GPIO_Init+0x2e4>)
 8000e00:	f003 fbb2 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_ext_SD_Pin */
  GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8000e04:	2304      	movs	r3, #4
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8000e14:	2306      	movs	r3, #6
 8000e16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	484c      	ldr	r0, [pc, #304]	; (8000f50 <MX_GPIO_Init+0x2e4>)
 8000e20:	f003 fba2 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_SD_Pin */
  GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8000e24:	2308      	movs	r3, #8
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e34:	2305      	movs	r3, #5
 8000e36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4844      	ldr	r0, [pc, #272]	; (8000f50 <MX_GPIO_Init+0x2e4>)
 8000e40:	f003 fb92 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000e44:	2301      	movs	r3, #1
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e48:	4b45      	ldr	r3, [pc, #276]	; (8000f60 <MX_GPIO_Init+0x2f4>)
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	4843      	ldr	r0, [pc, #268]	; (8000f64 <MX_GPIO_Init+0x2f8>)
 8000e58:	f003 fb86 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_MCK_Pin */
  GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8000e5c:	2308      	movs	r3, #8
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e6c:	2305      	movs	r3, #5
 8000e6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e74:	4619      	mov	r1, r3
 8000e76:	483b      	ldr	r0, [pc, #236]	; (8000f64 <MX_GPIO_Init+0x2f8>)
 8000e78:	f003 fb76 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_DATIN1_Pin */
  GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e94:	4619      	mov	r1, r3
 8000e96:	4833      	ldr	r0, [pc, #204]	; (8000f64 <MX_GPIO_Init+0x2f8>)
 8000e98:	f003 fb66 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000e9c:	2320      	movs	r3, #32
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4827      	ldr	r0, [pc, #156]	; (8000f50 <MX_GPIO_Init+0x2e4>)
 8000eb4:	f003 fb58 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4820      	ldr	r0, [pc, #128]	; (8000f54 <MX_GPIO_Init+0x2e8>)
 8000ed4:	f003 fb48 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000ed8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eea:	4619      	mov	r1, r3
 8000eec:	481b      	ldr	r0, [pc, #108]	; (8000f5c <MX_GPIO_Init+0x2f0>)
 8000eee:	f003 fb3b 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000ef2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef8:	2312      	movs	r3, #18
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f04:	2304      	movs	r3, #4
 8000f06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4811      	ldr	r0, [pc, #68]	; (8000f54 <MX_GPIO_Init+0x2e8>)
 8000f10:	f003 fb2a 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8000f14:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4809      	ldr	r0, [pc, #36]	; (8000f54 <MX_GPIO_Init+0x2e8>)
 8000f2e:	f003 fb1b 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8000f32:	f248 0380 	movw	r3, #32896	; 0x8080
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_GPIO_Init+0x2f4>)
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f44:	4619      	mov	r1, r3
 8000f46:	e00f      	b.n	8000f68 <MX_GPIO_Init+0x2fc>
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40020800 	.word	0x40020800
 8000f54:	40020400 	.word	0x40020400
 8000f58:	40021800 	.word	0x40021800
 8000f5c:	40021400 	.word	0x40021400
 8000f60:	10110000 	.word	0x10110000
 8000f64:	40020000 	.word	0x40020000
 8000f68:	4851      	ldr	r0, [pc, #324]	; (80010b0 <MX_GPIO_Init+0x444>)
 8000f6a:	f003 fafd 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin WIFI_SPI_CSN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|WIFI_SPI_CSN_Pin|ARD_D2_Pin;
 8000f6e:	f44f 5324 	mov.w	r3, #10496	; 0x2900
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f84:	4619      	mov	r1, r3
 8000f86:	484a      	ldr	r0, [pc, #296]	; (80010b0 <MX_GPIO_Init+0x444>)
 8000f88:	f003 faee 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000f8c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f9e:	230a      	movs	r3, #10
 8000fa0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4842      	ldr	r0, [pc, #264]	; (80010b4 <MX_GPIO_Init+0x448>)
 8000faa:	f003 fadd 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8000fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc8:	4619      	mov	r1, r3
 8000fca:	483a      	ldr	r0, [pc, #232]	; (80010b4 <MX_GPIO_Init+0x448>)
 8000fcc:	f003 facc 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4833      	ldr	r0, [pc, #204]	; (80010b8 <MX_GPIO_Init+0x44c>)
 8000fec:	f003 fabc 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_CK_Pin */
  GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001000:	2305      	movs	r3, #5
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001008:	4619      	mov	r1, r3
 800100a:	482b      	ldr	r0, [pc, #172]	; (80010b8 <MX_GPIO_Init+0x44c>)
 800100c:	f003 faac 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_DRDY_Pin */
  GPIO_InitStruct.Pin = WIFI_DRDY_Pin;
 8001010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001016:	2300      	movs	r3, #0
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(WIFI_DRDY_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001022:	4619      	mov	r1, r3
 8001024:	4822      	ldr	r0, [pc, #136]	; (80010b0 <MX_GPIO_Init+0x444>)
 8001026:	f003 fa9f 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800102a:	2340      	movs	r3, #64	; 0x40
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800102e:	4b23      	ldr	r3, [pc, #140]	; (80010bc <MX_GPIO_Init+0x450>)
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	4619      	mov	r1, r3
 800103c:	4820      	ldr	r0, [pc, #128]	; (80010c0 <MX_GPIO_Init+0x454>)
 800103e:	f003 fa93 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_DATIN7_Pin */
  GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001042:	2380      	movs	r3, #128	; 0x80
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001052:	2306      	movs	r3, #6
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105a:	4619      	mov	r1, r3
 800105c:	4818      	ldr	r0, [pc, #96]	; (80010c0 <MX_GPIO_Init+0x454>)
 800105e:	f003 fa83 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001074:	2302      	movs	r3, #2
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	4810      	ldr	r0, [pc, #64]	; (80010c0 <MX_GPIO_Init+0x454>)
 8001080:	f003 fa72 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_WS_Pin */
  GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001096:	2305      	movs	r3, #5
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	4807      	ldr	r0, [pc, #28]	; (80010c0 <MX_GPIO_Init+0x454>)
 80010a2:	f003 fa61 	bl	8004568 <HAL_GPIO_Init>

}
 80010a6:	bf00      	nop
 80010a8:	3738      	adds	r7, #56	; 0x38
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021800 	.word	0x40021800
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40020c00 	.word	0x40020c00
 80010bc:	10110000 	.word	0x10110000
 80010c0:	40020400 	.word	0x40020400

080010c4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
 80010d8:	615a      	str	r2, [r3, #20]
 80010da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80010dc:	4b4f      	ldr	r3, [pc, #316]	; (800121c <MX_FSMC_Init+0x158>)
 80010de:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80010e2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80010e4:	4b4d      	ldr	r3, [pc, #308]	; (800121c <MX_FSMC_Init+0x158>)
 80010e6:	4a4e      	ldr	r2, [pc, #312]	; (8001220 <MX_FSMC_Init+0x15c>)
 80010e8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80010ea:	4b4c      	ldr	r3, [pc, #304]	; (800121c <MX_FSMC_Init+0x158>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80010f0:	4b4a      	ldr	r3, [pc, #296]	; (800121c <MX_FSMC_Init+0x158>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80010f6:	4b49      	ldr	r3, [pc, #292]	; (800121c <MX_FSMC_Init+0x158>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80010fc:	4b47      	ldr	r3, [pc, #284]	; (800121c <MX_FSMC_Init+0x158>)
 80010fe:	2210      	movs	r2, #16
 8001100:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001102:	4b46      	ldr	r3, [pc, #280]	; (800121c <MX_FSMC_Init+0x158>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001108:	4b44      	ldr	r3, [pc, #272]	; (800121c <MX_FSMC_Init+0x158>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800110e:	4b43      	ldr	r3, [pc, #268]	; (800121c <MX_FSMC_Init+0x158>)
 8001110:	2200      	movs	r2, #0
 8001112:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8001114:	4b41      	ldr	r3, [pc, #260]	; (800121c <MX_FSMC_Init+0x158>)
 8001116:	2200      	movs	r2, #0
 8001118:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800111a:	4b40      	ldr	r3, [pc, #256]	; (800121c <MX_FSMC_Init+0x158>)
 800111c:	2200      	movs	r2, #0
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001120:	4b3e      	ldr	r3, [pc, #248]	; (800121c <MX_FSMC_Init+0x158>)
 8001122:	2200      	movs	r2, #0
 8001124:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001126:	4b3d      	ldr	r3, [pc, #244]	; (800121c <MX_FSMC_Init+0x158>)
 8001128:	2200      	movs	r2, #0
 800112a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800112c:	4b3b      	ldr	r3, [pc, #236]	; (800121c <MX_FSMC_Init+0x158>)
 800112e:	2200      	movs	r2, #0
 8001130:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001132:	4b3a      	ldr	r3, [pc, #232]	; (800121c <MX_FSMC_Init+0x158>)
 8001134:	2200      	movs	r2, #0
 8001136:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001138:	4b38      	ldr	r3, [pc, #224]	; (800121c <MX_FSMC_Init+0x158>)
 800113a:	2200      	movs	r2, #0
 800113c:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800113e:	4b37      	ldr	r3, [pc, #220]	; (800121c <MX_FSMC_Init+0x158>)
 8001140:	2200      	movs	r2, #0
 8001142:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001144:	230f      	movs	r3, #15
 8001146:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001148:	230f      	movs	r3, #15
 800114a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800114c:	23ff      	movs	r3, #255	; 0xff
 800114e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001150:	230f      	movs	r3, #15
 8001152:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001154:	2310      	movs	r3, #16
 8001156:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001158:	2311      	movs	r3, #17
 800115a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	4619      	mov	r1, r3
 8001166:	482d      	ldr	r0, [pc, #180]	; (800121c <MX_FSMC_Init+0x158>)
 8001168:	f005 fd6c 	bl	8006c44 <HAL_SRAM_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 8001172:	f000 fa09 	bl	8001588 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8001176:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <MX_FSMC_Init+0x160>)
 8001178:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800117c:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800117e:	4b29      	ldr	r3, [pc, #164]	; (8001224 <MX_FSMC_Init+0x160>)
 8001180:	4a27      	ldr	r2, [pc, #156]	; (8001220 <MX_FSMC_Init+0x15c>)
 8001182:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <MX_FSMC_Init+0x160>)
 8001186:	2204      	movs	r2, #4
 8001188:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <MX_FSMC_Init+0x160>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001190:	4b24      	ldr	r3, [pc, #144]	; (8001224 <MX_FSMC_Init+0x160>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001196:	4b23      	ldr	r3, [pc, #140]	; (8001224 <MX_FSMC_Init+0x160>)
 8001198:	2210      	movs	r2, #16
 800119a:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800119c:	4b21      	ldr	r3, [pc, #132]	; (8001224 <MX_FSMC_Init+0x160>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <MX_FSMC_Init+0x160>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80011a8:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <MX_FSMC_Init+0x160>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <MX_FSMC_Init+0x160>)
 80011b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011b4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <MX_FSMC_Init+0x160>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <MX_FSMC_Init+0x160>)
 80011be:	2200      	movs	r2, #0
 80011c0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <MX_FSMC_Init+0x160>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <MX_FSMC_Init+0x160>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_FSMC_Init+0x160>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <MX_FSMC_Init+0x160>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_FSMC_Init+0x160>)
 80011dc:	2200      	movs	r2, #0
 80011de:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80011e0:	230f      	movs	r3, #15
 80011e2:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80011e4:	230f      	movs	r3, #15
 80011e6:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80011e8:	23ff      	movs	r3, #255	; 0xff
 80011ea:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80011ec:	230f      	movs	r3, #15
 80011ee:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80011f0:	2310      	movs	r3, #16
 80011f2:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80011f4:	2311      	movs	r3, #17
 80011f6:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2200      	movs	r2, #0
 8001200:	4619      	mov	r1, r3
 8001202:	4808      	ldr	r0, [pc, #32]	; (8001224 <MX_FSMC_Init+0x160>)
 8001204:	f005 fd1e 	bl	8006c44 <HAL_SRAM_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_FSMC_Init+0x14e>
  {
    Error_Handler( );
 800120e:	f000 f9bb 	bl	8001588 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001212:	bf00      	nop
 8001214:	3720      	adds	r7, #32
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000341c 	.word	0x2000341c
 8001220:	a0000104 	.word	0xa0000104
 8001224:	200035cc 	.word	0x200035cc

08001228 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
//	DmaRecHalfBuffCplt=1;
	float lsamp, rsamp;
	float ltmp, rtmp;
	uint16_t lfinal, rfinal;

	for(int i = 0; i < AUDIO_REC/2; i++)
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	e0ab      	b.n	800138e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x166>
	{
		lsamp = (float)Rec1Buf[i];
 8001236:	4a5b      	ldr	r2, [pc, #364]	; (80013a4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x17c>)
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001246:	edc7 7a06 	vstr	s15, [r7, #24]
		rsamp = (float)Rec2Buf[i];
 800124a:	4a57      	ldr	r2, [pc, #348]	; (80013a8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x180>)
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125a:	edc7 7a05 	vstr	s15, [r7, #20]
		ltmp = a0* lsamp + a1*lin_z1 + a2*lin_z2 - b1*lout_z1 - b2 * lout_z2;
 800125e:	4b53      	ldr	r3, [pc, #332]	; (80013ac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x184>)
 8001260:	ed93 7a00 	vldr	s14, [r3]
 8001264:	edd7 7a06 	vldr	s15, [r7, #24]
 8001268:	ee27 7a27 	vmul.f32	s14, s14, s15
 800126c:	4b50      	ldr	r3, [pc, #320]	; (80013b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x188>)
 800126e:	edd3 6a00 	vldr	s13, [r3]
 8001272:	4b50      	ldr	r3, [pc, #320]	; (80013b4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18c>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800127c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001280:	4b4d      	ldr	r3, [pc, #308]	; (80013b8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x190>)
 8001282:	edd3 6a00 	vldr	s13, [r3]
 8001286:	4b4d      	ldr	r3, [pc, #308]	; (80013bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x194>)
 8001288:	edd3 7a00 	vldr	s15, [r3]
 800128c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001290:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001294:	4b4a      	ldr	r3, [pc, #296]	; (80013c0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x198>)
 8001296:	edd3 6a00 	vldr	s13, [r3]
 800129a:	4b4a      	ldr	r3, [pc, #296]	; (80013c4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19c>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012a8:	4b47      	ldr	r3, [pc, #284]	; (80013c8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a0>)
 80012aa:	edd3 6a00 	vldr	s13, [r3]
 80012ae:	4b47      	ldr	r3, [pc, #284]	; (80013cc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a4>)
 80012b0:	edd3 7a00 	vldr	s15, [r3]
 80012b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012bc:	edc7 7a04 	vstr	s15, [r7, #16]
		rtmp = a0* rsamp + a1*rin_z1 + a2*rin_z2 - b1*rout_z1 - b2 * rout_z2;
 80012c0:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x184>)
 80012c2:	ed93 7a00 	vldr	s14, [r3]
 80012c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80012ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ce:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x188>)
 80012d0:	edd3 6a00 	vldr	s13, [r3]
 80012d4:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a8>)
 80012d6:	edd3 7a00 	vldr	s15, [r3]
 80012da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012e2:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x190>)
 80012e4:	edd3 6a00 	vldr	s13, [r3]
 80012e8:	4b3a      	ldr	r3, [pc, #232]	; (80013d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ac>)
 80012ea:	edd3 7a00 	vldr	s15, [r3]
 80012ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012f6:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x198>)
 80012f8:	edd3 6a00 	vldr	s13, [r3]
 80012fc:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b0>)
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001306:	ee37 7a67 	vsub.f32	s14, s14, s15
 800130a:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a0>)
 800130c:	edd3 6a00 	vldr	s13, [r3]
 8001310:	4b32      	ldr	r3, [pc, #200]	; (80013dc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b4>)
 8001312:	edd3 7a00 	vldr	s15, [r3]
 8001316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131e:	edc7 7a03 	vstr	s15, [r7, #12]

		lin_z2 = lin_z1;
 8001322:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a25      	ldr	r2, [pc, #148]	; (80013bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x194>)
 8001328:	6013      	str	r3, [r2, #0]
		rin_z2 = rin_z1;
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a29      	ldr	r2, [pc, #164]	; (80013d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ac>)
 8001330:	6013      	str	r3, [r2, #0]
		lin_z1 = lsamp;
 8001332:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18c>)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	6013      	str	r3, [r2, #0]
		rin_z1 = rsamp;
 8001338:	4a25      	ldr	r2, [pc, #148]	; (80013d0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a8>)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	6013      	str	r3, [r2, #0]
		lout_z2 = lout_z1;
 800133e:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a22      	ldr	r2, [pc, #136]	; (80013cc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a4>)
 8001344:	6013      	str	r3, [r2, #0]
		rout_z2 = rout_z1;
 8001346:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a24      	ldr	r2, [pc, #144]	; (80013dc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b4>)
 800134c:	6013      	str	r3, [r2, #0]
		lout_z1 = ltmp;
 800134e:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19c>)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	6013      	str	r3, [r2, #0]
		rout_z1 = rtmp;
 8001354:	4a20      	ldr	r2, [pc, #128]	; (80013d8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b0>)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6013      	str	r3, [r2, #0]

//			Value1Buf[i] = (uint16_t)(((int32_t)tmp >> 8) & 0xffff);//(Rec1Buf[i] >> 8) & 0xffff;
		lfinal = (uint16_t)(((int32_t)ltmp >> 8) & 0xffff);//(Rec1Buf[i] >> 8) & 0xffff;
 800135a:	edd7 7a04 	vldr	s15, [r7, #16]
 800135e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001362:	ee17 3a90 	vmov	r3, s15
 8001366:	121b      	asrs	r3, r3, #8
 8001368:	817b      	strh	r3, [r7, #10]
		AudioBuf[i*NUM_CHANNELS*2 + 1] = lfinal >> 8;
 800136a:	897b      	ldrh	r3, [r7, #10]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	b29a      	uxth	r2, r3
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	3301      	adds	r3, #1
 8001376:	b2d1      	uxtb	r1, r2
 8001378:	4a19      	ldr	r2, [pc, #100]	; (80013e0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b8>)
 800137a:	54d1      	strb	r1, [r2, r3]
		AudioBuf[i*NUM_CHANNELS*2] = lfinal & 0xff;
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	897a      	ldrh	r2, [r7, #10]
 8001382:	b2d1      	uxtb	r1, r2
 8001384:	4a16      	ldr	r2, [pc, #88]	; (80013e0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b8>)
 8001386:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < AUDIO_REC/2; i++)
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	3301      	adds	r3, #1
 800138c:	61fb      	str	r3, [r7, #28]
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001394:	f6ff af4f 	blt.w	8001236 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xe>
//		//	  {
//		//		  simpleBuf[i*2 +1] = toneBuf[i] >> 8;
//		//		  simpleBuf[i*2] = toneBuf[i];
//		//	  }
	}
}
 8001398:	bf00      	nop
 800139a:	3724      	adds	r7, #36	; 0x24
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	200023c4 	.word	0x200023c4
 80013a8:	20000394 	.word	0x20000394
 80013ac:	20000008 	.word	0x20000008
 80013b0:	2000000c 	.word	0x2000000c
 80013b4:	200000b8 	.word	0x200000b8
 80013b8:	20000010 	.word	0x20000010
 80013bc:	200000bc 	.word	0x200000bc
 80013c0:	20000014 	.word	0x20000014
 80013c4:	200000c0 	.word	0x200000c0
 80013c8:	20000018 	.word	0x20000018
 80013cc:	200000c4 	.word	0x200000c4
 80013d0:	200000c8 	.word	0x200000c8
 80013d4:	200000cc 	.word	0x200000cc
 80013d8:	200000d0 	.word	0x200000d0
 80013dc:	200000d4 	.word	0x200000d4
 80013e0:	20004718 	.word	0x20004718

080013e4 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
//	uint16_t finaltmp;
	float lsamp, rsamp;
	float ltmp, rtmp;
	uint16_t lfinal, rfinal;

	for(int i = AUDIO_REC/2; i < AUDIO_REC; i++)
 80013ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	e062      	b.n	80014ba <HAL_DFSDM_FilterRegConvCpltCallback+0xd6>
	{
		lsamp = (float)Rec1Buf[i];
 80013f4:	4a4d      	ldr	r2, [pc, #308]	; (800152c <HAL_DFSDM_FilterRegConvCpltCallback+0x148>)
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001404:	edc7 7a04 	vstr	s15, [r7, #16]
		ltmp = a0* lsamp + a1*lin_z1 + a2*lin_z2 - b1*lout_z1 - b2 * lout_z2;
 8001408:	4b49      	ldr	r3, [pc, #292]	; (8001530 <HAL_DFSDM_FilterRegConvCpltCallback+0x14c>)
 800140a:	ed93 7a00 	vldr	s14, [r3]
 800140e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001412:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001416:	4b47      	ldr	r3, [pc, #284]	; (8001534 <HAL_DFSDM_FilterRegConvCpltCallback+0x150>)
 8001418:	edd3 6a00 	vldr	s13, [r3]
 800141c:	4b46      	ldr	r3, [pc, #280]	; (8001538 <HAL_DFSDM_FilterRegConvCpltCallback+0x154>)
 800141e:	edd3 7a00 	vldr	s15, [r3]
 8001422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001426:	ee37 7a27 	vadd.f32	s14, s14, s15
 800142a:	4b44      	ldr	r3, [pc, #272]	; (800153c <HAL_DFSDM_FilterRegConvCpltCallback+0x158>)
 800142c:	edd3 6a00 	vldr	s13, [r3]
 8001430:	4b43      	ldr	r3, [pc, #268]	; (8001540 <HAL_DFSDM_FilterRegConvCpltCallback+0x15c>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800143e:	4b41      	ldr	r3, [pc, #260]	; (8001544 <HAL_DFSDM_FilterRegConvCpltCallback+0x160>)
 8001440:	edd3 6a00 	vldr	s13, [r3]
 8001444:	4b40      	ldr	r3, [pc, #256]	; (8001548 <HAL_DFSDM_FilterRegConvCpltCallback+0x164>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800144e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001452:	4b3e      	ldr	r3, [pc, #248]	; (800154c <HAL_DFSDM_FilterRegConvCpltCallback+0x168>)
 8001454:	edd3 6a00 	vldr	s13, [r3]
 8001458:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <HAL_DFSDM_FilterRegConvCpltCallback+0x16c>)
 800145a:	edd3 7a00 	vldr	s15, [r3]
 800145e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001466:	edc7 7a03 	vstr	s15, [r7, #12]
		lin_z2 = lin_z1;
 800146a:	4b33      	ldr	r3, [pc, #204]	; (8001538 <HAL_DFSDM_FilterRegConvCpltCallback+0x154>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a34      	ldr	r2, [pc, #208]	; (8001540 <HAL_DFSDM_FilterRegConvCpltCallback+0x15c>)
 8001470:	6013      	str	r3, [r2, #0]
		lin_z1 = lsamp;
 8001472:	4a31      	ldr	r2, [pc, #196]	; (8001538 <HAL_DFSDM_FilterRegConvCpltCallback+0x154>)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	6013      	str	r3, [r2, #0]
		lout_z2 = lout_z1;
 8001478:	4b33      	ldr	r3, [pc, #204]	; (8001548 <HAL_DFSDM_FilterRegConvCpltCallback+0x164>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a34      	ldr	r2, [pc, #208]	; (8001550 <HAL_DFSDM_FilterRegConvCpltCallback+0x16c>)
 800147e:	6013      	str	r3, [r2, #0]
		lout_z1 = ltmp;
 8001480:	4a31      	ldr	r2, [pc, #196]	; (8001548 <HAL_DFSDM_FilterRegConvCpltCallback+0x164>)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6013      	str	r3, [r2, #0]
//		rin_z1 = rsamp;
//		rout_z2 = rout_z1;
//		rout_z1 = rtmp;

//			Value1Buf[i] = (uint16_t)(((int32_t)tmp >> 8) & 0xffff);//(Rec1Buf[i] >> 8) & 0xffff;
		lfinal = (uint16_t)(((int32_t)ltmp >> 8) & 0xffff);//(Rec1Buf[i] >> 8) & 0xffff;
 8001486:	edd7 7a03 	vldr	s15, [r7, #12]
 800148a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800148e:	ee17 3a90 	vmov	r3, s15
 8001492:	121b      	asrs	r3, r3, #8
 8001494:	817b      	strh	r3, [r7, #10]
		AudioBuf[i*2 + 1] = lfinal >> 8;
 8001496:	897b      	ldrh	r3, [r7, #10]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	b29a      	uxth	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	3301      	adds	r3, #1
 80014a2:	b2d1      	uxtb	r1, r2
 80014a4:	4a2b      	ldr	r2, [pc, #172]	; (8001554 <HAL_DFSDM_FilterRegConvCpltCallback+0x170>)
 80014a6:	54d1      	strb	r1, [r2, r3]
		AudioBuf[i*2] = lfinal & 0xff;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	897a      	ldrh	r2, [r7, #10]
 80014ae:	b2d1      	uxtb	r1, r2
 80014b0:	4a28      	ldr	r2, [pc, #160]	; (8001554 <HAL_DFSDM_FilterRegConvCpltCallback+0x170>)
 80014b2:	54d1      	strb	r1, [r2, r3]
	for(int i = AUDIO_REC/2; i < AUDIO_REC; i++)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	3301      	adds	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c0:	db98      	blt.n	80013f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x10>
//		finaltmp = (uint16_t)(((int32_t)tmp >> 8) & 0xffff);//(Rec1Buf[i] >> 8) & 0xffff;
//		AudioBuf[i*2 + 1] = finaltmp >> 8;
//		AudioBuf[i*2] = finaltmp & 0xff;
	}

	if(pass > 20 && pass < FrameCount + 20)
 80014c2:	4b25      	ldr	r3, [pc, #148]	; (8001558 <HAL_DFSDM_FilterRegConvCpltCallback+0x174>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b14      	cmp	r3, #20
 80014c8:	dd12      	ble.n	80014f0 <HAL_DFSDM_FilterRegConvCpltCallback+0x10c>
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <HAL_DFSDM_FilterRegConvCpltCallback+0x178>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f103 0214 	add.w	r2, r3, #20
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <HAL_DFSDM_FilterRegConvCpltCallback+0x174>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	dd0a      	ble.n	80014f0 <HAL_DFSDM_FilterRegConvCpltCallback+0x10c>
	{
	//			  fRet = f_open(&myFile, fname, FA_WRITE | FA_OPEN_APPEND);// | FA_CREATE_ALWAYS);
	//			  printf("f_open error == %d\r\n", fRet);
		fRet = f_write(&myFile, AudioBuf, WRITE_LENGTH, &byteCount);
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <HAL_DFSDM_FilterRegConvCpltCallback+0x17c>)
 80014dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014e0:	491c      	ldr	r1, [pc, #112]	; (8001554 <HAL_DFSDM_FilterRegConvCpltCallback+0x170>)
 80014e2:	4820      	ldr	r0, [pc, #128]	; (8001564 <HAL_DFSDM_FilterRegConvCpltCallback+0x180>)
 80014e4:	f009 fc40 	bl	800ad68 <f_write>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <HAL_DFSDM_FilterRegConvCpltCallback+0x184>)
 80014ee:	701a      	strb	r2, [r3, #0]
//		printf("f_write error == %d\r\n", fRet);
	//			  fRet = f_close(&myFile);
	//			  printf("f_close error == %d\r\n\n", fRet);
	}
	if(pass == FrameCount + 20)
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <HAL_DFSDM_FilterRegConvCpltCallback+0x178>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f103 0214 	add.w	r2, r3, #20
 80014f8:	4b17      	ldr	r3, [pc, #92]	; (8001558 <HAL_DFSDM_FilterRegConvCpltCallback+0x174>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d10b      	bne.n	8001518 <HAL_DFSDM_FilterRegConvCpltCallback+0x134>
	{
	  fRet = f_close(&myFile);
 8001500:	4818      	ldr	r0, [pc, #96]	; (8001564 <HAL_DFSDM_FilterRegConvCpltCallback+0x180>)
 8001502:	f009 fe43 	bl	800b18c <f_close>
 8001506:	4603      	mov	r3, r0
 8001508:	461a      	mov	r2, r3
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_DFSDM_FilterRegConvCpltCallback+0x184>)
 800150c:	701a      	strb	r2, [r3, #0]
//	  printf("f_close error == %d\r\n\n", fRet);
	  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	2120      	movs	r1, #32
 8001512:	4816      	ldr	r0, [pc, #88]	; (800156c <HAL_DFSDM_FilterRegConvCpltCallback+0x188>)
 8001514:	f003 f9d2 	bl	80048bc <HAL_GPIO_WritePin>
	}

	pass++;
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <HAL_DFSDM_FilterRegConvCpltCallback+0x174>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <HAL_DFSDM_FilterRegConvCpltCallback+0x174>)
 8001520:	6013      	str	r3, [r2, #0]

}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200023c4 	.word	0x200023c4
 8001530:	20000008 	.word	0x20000008
 8001534:	2000000c 	.word	0x2000000c
 8001538:	200000b8 	.word	0x200000b8
 800153c:	20000010 	.word	0x20000010
 8001540:	200000bc 	.word	0x200000bc
 8001544:	20000014 	.word	0x20000014
 8001548:	200000c0 	.word	0x200000c0
 800154c:	20000018 	.word	0x20000018
 8001550:	200000c4 	.word	0x200000c4
 8001554:	20004718 	.word	0x20004718
 8001558:	200000b4 	.word	0x200000b4
 800155c:	20000000 	.word	0x20000000
 8001560:	20003418 	.word	0x20003418
 8001564:	20001394 	.word	0x20001394
 8001568:	200000b0 	.word	0x200000b0
 800156c:	40020800 	.word	0x40020800

08001570 <InitWifi>:

void InitWifi()
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	ConnectWifi(&hspi3);
 8001574:	4803      	ldr	r0, [pc, #12]	; (8001584 <InitWifi+0x14>)
 8001576:	f000 fe05 	bl	8002184 <ConnectWifi>
	Wifi_Init();
 800157a:	f000 fe51 	bl	8002220 <Wifi_Init>


//	SetSSID();
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000346c 	.word	0x2000346c

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <HAL_MspInit+0x4c>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	4a0f      	ldr	r2, [pc, #60]	; (80015e4 <HAL_MspInit+0x4c>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ac:	6453      	str	r3, [r2, #68]	; 0x44
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <HAL_MspInit+0x4c>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	603b      	str	r3, [r7, #0]
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_MspInit+0x4c>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <HAL_MspInit+0x4c>)
 80015c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_MspInit+0x4c>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800

080015e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	; 0x30
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a31      	ldr	r2, [pc, #196]	; (80016cc <HAL_ADC_MspInit+0xe4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d15b      	bne.n	80016c2 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <HAL_ADC_MspInit+0xe8>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	4a2f      	ldr	r2, [pc, #188]	; (80016d0 <HAL_ADC_MspInit+0xe8>)
 8001614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001618:	6453      	str	r3, [r2, #68]	; 0x44
 800161a:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_ADC_MspInit+0xe8>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <HAL_ADC_MspInit+0xe8>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a28      	ldr	r2, [pc, #160]	; (80016d0 <HAL_ADC_MspInit+0xe8>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <HAL_ADC_MspInit+0xe8>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <HAL_ADC_MspInit+0xe8>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a21      	ldr	r2, [pc, #132]	; (80016d0 <HAL_ADC_MspInit+0xe8>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <HAL_ADC_MspInit+0xe8>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <HAL_ADC_MspInit+0xe8>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a1a      	ldr	r2, [pc, #104]	; (80016d0 <HAL_ADC_MspInit+0xe8>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_ADC_MspInit+0xe8>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 800167a:	2311      	movs	r3, #17
 800167c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800167e:	2303      	movs	r3, #3
 8001680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001686:	f107 031c 	add.w	r3, r7, #28
 800168a:	4619      	mov	r1, r3
 800168c:	4811      	ldr	r0, [pc, #68]	; (80016d4 <HAL_ADC_MspInit+0xec>)
 800168e:	f002 ff6b 	bl	8004568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 8001692:	2326      	movs	r3, #38	; 0x26
 8001694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001696:	2303      	movs	r3, #3
 8001698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4619      	mov	r1, r3
 80016a4:	480c      	ldr	r0, [pc, #48]	; (80016d8 <HAL_ADC_MspInit+0xf0>)
 80016a6:	f002 ff5f 	bl	8004568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ae:	2303      	movs	r3, #3
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	4807      	ldr	r0, [pc, #28]	; (80016dc <HAL_ADC_MspInit+0xf4>)
 80016be:	f002 ff53 	bl	8004568 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016c2:	bf00      	nop
 80016c4:	3730      	adds	r7, #48	; 0x30
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40012000 	.word	0x40012000
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40020000 	.word	0x40020000
 80016dc:	40020400 	.word	0x40020400

080016e0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a17      	ldr	r2, [pc, #92]	; (800175c <HAL_DAC_MspInit+0x7c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d127      	bne.n	8001752 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <HAL_DAC_MspInit+0x80>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a15      	ldr	r2, [pc, #84]	; (8001760 <HAL_DAC_MspInit+0x80>)
 800170c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b13      	ldr	r3, [pc, #76]	; (8001760 <HAL_DAC_MspInit+0x80>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <HAL_DAC_MspInit+0x80>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <HAL_DAC_MspInit+0x80>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_DAC_MspInit+0x80>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 800173a:	2310      	movs	r3, #16
 800173c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800173e:	2303      	movs	r3, #3
 8001740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	4805      	ldr	r0, [pc, #20]	; (8001764 <HAL_DAC_MspInit+0x84>)
 800174e:	f002 ff0b 	bl	8004568 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001752:	bf00      	nop
 8001754:	3728      	adds	r7, #40	; 0x28
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40007400 	.word	0x40007400
 8001760:	40023800 	.word	0x40023800
 8001764:	40020000 	.word	0x40020000

08001768 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_FILTER_INSTANCE(hdfsdm_filter->Instance))&&(DFSDM1_Init == 0))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a52      	ldr	r2, [pc, #328]	; (80018d0 <HAL_DFSDM_FilterMspInit+0x168>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d004      	beq.n	8001794 <HAL_DFSDM_FilterMspInit+0x2c>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a51      	ldr	r2, [pc, #324]	; (80018d4 <HAL_DFSDM_FilterMspInit+0x16c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d15c      	bne.n	800184e <HAL_DFSDM_FilterMspInit+0xe6>
 8001794:	4b50      	ldr	r3, [pc, #320]	; (80018d8 <HAL_DFSDM_FilterMspInit+0x170>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d158      	bne.n	800184e <HAL_DFSDM_FilterMspInit+0xe6>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800179c:	4b4f      	ldr	r3, [pc, #316]	; (80018dc <HAL_DFSDM_FilterMspInit+0x174>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	4a4e      	ldr	r2, [pc, #312]	; (80018dc <HAL_DFSDM_FilterMspInit+0x174>)
 80017a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80017a6:	4b4d      	ldr	r3, [pc, #308]	; (80018dc <HAL_DFSDM_FilterMspInit+0x174>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d10d      	bne.n	80017ca <HAL_DFSDM_FilterMspInit+0x62>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b4b      	ldr	r3, [pc, #300]	; (80018e0 <HAL_DFSDM_FilterMspInit+0x178>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	4a4a      	ldr	r2, [pc, #296]	; (80018e0 <HAL_DFSDM_FilterMspInit+0x178>)
 80017b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017bc:	6453      	str	r3, [r2, #68]	; 0x44
 80017be:	4b48      	ldr	r3, [pc, #288]	; (80018e0 <HAL_DFSDM_FilterMspInit+0x178>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <HAL_DFSDM_FilterMspInit+0x178>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a43      	ldr	r2, [pc, #268]	; (80018e0 <HAL_DFSDM_FilterMspInit+0x178>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <HAL_DFSDM_FilterMspInit+0x178>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4b3d      	ldr	r3, [pc, #244]	; (80018e0 <HAL_DFSDM_FilterMspInit+0x178>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a3c      	ldr	r2, [pc, #240]	; (80018e0 <HAL_DFSDM_FilterMspInit+0x178>)
 80017f0:	f043 0308 	orr.w	r3, r3, #8
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b3a      	ldr	r3, [pc, #232]	; (80018e0 <HAL_DFSDM_FilterMspInit+0x178>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001814:	2306      	movs	r3, #6
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	4619      	mov	r1, r3
 800181e:	4831      	ldr	r0, [pc, #196]	; (80018e4 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001820:	f002 fea2 	bl	8004568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001824:	2340      	movs	r3, #64	; 0x40
 8001826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001834:	2306      	movs	r3, #6
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	482a      	ldr	r0, [pc, #168]	; (80018e8 <HAL_DFSDM_FilterMspInit+0x180>)
 8001840:	f002 fe92 	bl	8004568 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001844:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <HAL_DFSDM_FilterMspInit+0x170>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	3301      	adds	r3, #1
 800184a:	4a23      	ldr	r2, [pc, #140]	; (80018d8 <HAL_DFSDM_FilterMspInit+0x170>)
 800184c:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a1f      	ldr	r2, [pc, #124]	; (80018d0 <HAL_DFSDM_FilterMspInit+0x168>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d137      	bne.n	80018c8 <HAL_DFSDM_FilterMspInit+0x160>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8001858:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_DFSDM_FilterMspInit+0x184>)
 800185a:	4a25      	ldr	r2, [pc, #148]	; (80018f0 <HAL_DFSDM_FilterMspInit+0x188>)
 800185c:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_7;
 800185e:	4b23      	ldr	r3, [pc, #140]	; (80018ec <HAL_DFSDM_FilterMspInit+0x184>)
 8001860:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001864:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001866:	4b21      	ldr	r3, [pc, #132]	; (80018ec <HAL_DFSDM_FilterMspInit+0x184>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800186c:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <HAL_DFSDM_FilterMspInit+0x184>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001872:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <HAL_DFSDM_FilterMspInit+0x184>)
 8001874:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001878:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <HAL_DFSDM_FilterMspInit+0x184>)
 800187c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001880:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <HAL_DFSDM_FilterMspInit+0x184>)
 8001884:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001888:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_DFSDM_FilterMspInit+0x184>)
 800188c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001890:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <HAL_DFSDM_FilterMspInit+0x184>)
 8001894:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001898:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800189a:	4b14      	ldr	r3, [pc, #80]	; (80018ec <HAL_DFSDM_FilterMspInit+0x184>)
 800189c:	2200      	movs	r2, #0
 800189e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80018a0:	4812      	ldr	r0, [pc, #72]	; (80018ec <HAL_DFSDM_FilterMspInit+0x184>)
 80018a2:	f002 fa19 	bl	8003cd8 <HAL_DMA_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_DFSDM_FilterMspInit+0x148>
    {
      Error_Handler();
 80018ac:	f7ff fe6c 	bl	8001588 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <HAL_DFSDM_FilterMspInit+0x184>)
 80018b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80018b6:	4a0d      	ldr	r2, [pc, #52]	; (80018ec <HAL_DFSDM_FilterMspInit+0x184>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <HAL_DFSDM_FilterMspInit+0x184>)
 80018c0:	629a      	str	r2, [r3, #40]	; 0x28
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <HAL_DFSDM_FilterMspInit+0x184>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	; 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40016100 	.word	0x40016100
 80018d4:	40016180 	.word	0x40016180
 80018d8:	200000dc 	.word	0x200000dc
 80018dc:	200000d8 	.word	0x200000d8
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40020000 	.word	0x40020000
 80018e8:	40020c00 	.word	0x40020c00
 80018ec:	2000350c 	.word	0x2000350c
 80018f0:	40026410 	.word	0x40026410

080018f4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a39      	ldr	r2, [pc, #228]	; (80019f8 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d00e      	beq.n	8001934 <HAL_DFSDM_ChannelMspInit+0x40>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a38      	ldr	r2, [pc, #224]	; (80019fc <HAL_DFSDM_ChannelMspInit+0x108>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d009      	beq.n	8001934 <HAL_DFSDM_ChannelMspInit+0x40>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a36      	ldr	r2, [pc, #216]	; (8001a00 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d004      	beq.n	8001934 <HAL_DFSDM_ChannelMspInit+0x40>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a35      	ldr	r2, [pc, #212]	; (8001a04 <HAL_DFSDM_ChannelMspInit+0x110>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d15c      	bne.n	80019ee <HAL_DFSDM_ChannelMspInit+0xfa>
 8001934:	4b34      	ldr	r3, [pc, #208]	; (8001a08 <HAL_DFSDM_ChannelMspInit+0x114>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d158      	bne.n	80019ee <HAL_DFSDM_ChannelMspInit+0xfa>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800193c:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <HAL_DFSDM_ChannelMspInit+0x118>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	4a32      	ldr	r2, [pc, #200]	; (8001a0c <HAL_DFSDM_ChannelMspInit+0x118>)
 8001944:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001946:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <HAL_DFSDM_ChannelMspInit+0x118>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d10d      	bne.n	800196a <HAL_DFSDM_ChannelMspInit+0x76>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a2e      	ldr	r2, [pc, #184]	; (8001a10 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001958:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
 800195e:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b28      	ldr	r3, [pc, #160]	; (8001a10 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a27      	ldr	r2, [pc, #156]	; (8001a10 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <HAL_DFSDM_ChannelMspInit+0x11c>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <HAL_DFSDM_ChannelMspInit+0x11c>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a20      	ldr	r2, [pc, #128]	; (8001a10 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001990:	f043 0308 	orr.w	r3, r3, #8
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 80019a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80019b4:	2306      	movs	r3, #6
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4619      	mov	r1, r3
 80019be:	4815      	ldr	r0, [pc, #84]	; (8001a14 <HAL_DFSDM_ChannelMspInit+0x120>)
 80019c0:	f002 fdd2 	bl	8004568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 80019c4:	2340      	movs	r3, #64	; 0x40
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80019d4:	2306      	movs	r3, #6
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	480e      	ldr	r0, [pc, #56]	; (8001a18 <HAL_DFSDM_ChannelMspInit+0x124>)
 80019e0:	f002 fdc2 	bl	8004568 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <HAL_DFSDM_ChannelMspInit+0x114>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	4a07      	ldr	r2, [pc, #28]	; (8001a08 <HAL_DFSDM_ChannelMspInit+0x114>)
 80019ec:	6013      	str	r3, [r2, #0]
  }

}
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	; 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40016000 	.word	0x40016000
 80019fc:	40016020 	.word	0x40016020
 8001a00:	40016040 	.word	0x40016040
 8001a04:	40016060 	.word	0x40016060
 8001a08:	200000dc 	.word	0x200000dc
 8001a0c:	200000d8 	.word	0x200000d8
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40020c00 	.word	0x40020c00

08001a1c <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a19      	ldr	r2, [pc, #100]	; (8001aa0 <HAL_FMPI2C_MspInit+0x84>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d12b      	bne.n	8001a96 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_FMPI2C_MspInit+0x88>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <HAL_FMPI2C_MspInit+0x88>)
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_FMPI2C_MspInit+0x88>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8001a5a:	23c0      	movs	r3, #192	; 0xc0
 8001a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a5e:	2312      	movs	r3, #18
 8001a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <HAL_FMPI2C_MspInit+0x8c>)
 8001a76:	f002 fd77 	bl	8004568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_FMPI2C_MspInit+0x88>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	4a08      	ldr	r2, [pc, #32]	; (8001aa4 <HAL_FMPI2C_MspInit+0x88>)
 8001a84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a88:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_FMPI2C_MspInit+0x88>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8001a96:	bf00      	nop
 8001a98:	3728      	adds	r7, #40	; 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40006000 	.word	0x40006000
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020800 	.word	0x40020800

08001aac <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08e      	sub	sp, #56	; 0x38
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a56      	ldr	r2, [pc, #344]	; (8001c24 <HAL_QSPI_MspInit+0x178>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	f040 80a6 	bne.w	8001c1c <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
 8001ad4:	4b54      	ldr	r3, [pc, #336]	; (8001c28 <HAL_QSPI_MspInit+0x17c>)
 8001ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad8:	4a53      	ldr	r2, [pc, #332]	; (8001c28 <HAL_QSPI_MspInit+0x17c>)
 8001ada:	f043 0302 	orr.w	r3, r3, #2
 8001ade:	6393      	str	r3, [r2, #56]	; 0x38
 8001ae0:	4b51      	ldr	r3, [pc, #324]	; (8001c28 <HAL_QSPI_MspInit+0x17c>)
 8001ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	623b      	str	r3, [r7, #32]
 8001aea:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	4b4d      	ldr	r3, [pc, #308]	; (8001c28 <HAL_QSPI_MspInit+0x17c>)
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	4a4c      	ldr	r2, [pc, #304]	; (8001c28 <HAL_QSPI_MspInit+0x17c>)
 8001af6:	f043 0310 	orr.w	r3, r3, #16
 8001afa:	6313      	str	r3, [r2, #48]	; 0x30
 8001afc:	4b4a      	ldr	r3, [pc, #296]	; (8001c28 <HAL_QSPI_MspInit+0x17c>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	61fb      	str	r3, [r7, #28]
 8001b06:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	4b46      	ldr	r3, [pc, #280]	; (8001c28 <HAL_QSPI_MspInit+0x17c>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	4a45      	ldr	r2, [pc, #276]	; (8001c28 <HAL_QSPI_MspInit+0x17c>)
 8001b12:	f043 0320 	orr.w	r3, r3, #32
 8001b16:	6313      	str	r3, [r2, #48]	; 0x30
 8001b18:	4b43      	ldr	r3, [pc, #268]	; (8001c28 <HAL_QSPI_MspInit+0x17c>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	f003 0320 	and.w	r3, r3, #32
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	4b3f      	ldr	r3, [pc, #252]	; (8001c28 <HAL_QSPI_MspInit+0x17c>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	4a3e      	ldr	r2, [pc, #248]	; (8001c28 <HAL_QSPI_MspInit+0x17c>)
 8001b2e:	f043 0302 	orr.w	r3, r3, #2
 8001b32:	6313      	str	r3, [r2, #48]	; 0x30
 8001b34:	4b3c      	ldr	r3, [pc, #240]	; (8001c28 <HAL_QSPI_MspInit+0x17c>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b40:	2300      	movs	r3, #0
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	4b38      	ldr	r3, [pc, #224]	; (8001c28 <HAL_QSPI_MspInit+0x17c>)
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	4a37      	ldr	r2, [pc, #220]	; (8001c28 <HAL_QSPI_MspInit+0x17c>)
 8001b4a:	f043 0308 	orr.w	r3, r3, #8
 8001b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b50:	4b35      	ldr	r3, [pc, #212]	; (8001c28 <HAL_QSPI_MspInit+0x17c>)
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	4b31      	ldr	r3, [pc, #196]	; (8001c28 <HAL_QSPI_MspInit+0x17c>)
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	4a30      	ldr	r2, [pc, #192]	; (8001c28 <HAL_QSPI_MspInit+0x17c>)
 8001b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6c:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <HAL_QSPI_MspInit+0x17c>)
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001b78:	2304      	movs	r3, #4
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001b88:	2309      	movs	r3, #9
 8001b8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b90:	4619      	mov	r1, r3
 8001b92:	4826      	ldr	r0, [pc, #152]	; (8001c2c <HAL_QSPI_MspInit+0x180>)
 8001b94:	f002 fce8 	bl	8004568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001b98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001baa:	230a      	movs	r3, #10
 8001bac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	481e      	ldr	r0, [pc, #120]	; (8001c30 <HAL_QSPI_MspInit+0x184>)
 8001bb6:	f002 fcd7 	bl	8004568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001bba:	2304      	movs	r3, #4
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001bca:	2309      	movs	r3, #9
 8001bcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4817      	ldr	r0, [pc, #92]	; (8001c34 <HAL_QSPI_MspInit+0x188>)
 8001bd6:	f002 fcc7 	bl	8004568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be8:	2303      	movs	r3, #3
 8001bea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001bec:	2309      	movs	r3, #9
 8001bee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4810      	ldr	r0, [pc, #64]	; (8001c38 <HAL_QSPI_MspInit+0x18c>)
 8001bf8:	f002 fcb6 	bl	8004568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001bfc:	2340      	movs	r3, #64	; 0x40
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c0c:	230a      	movs	r3, #10
 8001c0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c14:	4619      	mov	r1, r3
 8001c16:	4809      	ldr	r0, [pc, #36]	; (8001c3c <HAL_QSPI_MspInit+0x190>)
 8001c18:	f002 fca6 	bl	8004568 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001c1c:	bf00      	nop
 8001c1e:	3738      	adds	r7, #56	; 0x38
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	a0001000 	.word	0xa0001000
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40021400 	.word	0x40021400
 8001c34:	40020400 	.word	0x40020400
 8001c38:	40020c00 	.word	0x40020c00
 8001c3c:	40021800 	.word	0x40021800

08001c40 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a31      	ldr	r2, [pc, #196]	; (8001d24 <HAL_SD_MspInit+0xe4>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d15b      	bne.n	8001d1a <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	4b30      	ldr	r3, [pc, #192]	; (8001d28 <HAL_SD_MspInit+0xe8>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	4a2f      	ldr	r2, [pc, #188]	; (8001d28 <HAL_SD_MspInit+0xe8>)
 8001c6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c70:	6453      	str	r3, [r2, #68]	; 0x44
 8001c72:	4b2d      	ldr	r3, [pc, #180]	; (8001d28 <HAL_SD_MspInit+0xe8>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	4b29      	ldr	r3, [pc, #164]	; (8001d28 <HAL_SD_MspInit+0xe8>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a28      	ldr	r2, [pc, #160]	; (8001d28 <HAL_SD_MspInit+0xe8>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <HAL_SD_MspInit+0xe8>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <HAL_SD_MspInit+0xe8>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a21      	ldr	r2, [pc, #132]	; (8001d28 <HAL_SD_MspInit+0xe8>)
 8001ca4:	f043 0304 	orr.w	r3, r3, #4
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <HAL_SD_MspInit+0xe8>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001cb6:	2340      	movs	r3, #64	; 0x40
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001cc6:	230c      	movs	r3, #12
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4816      	ldr	r0, [pc, #88]	; (8001d2c <HAL_SD_MspInit+0xec>)
 8001cd2:	f002 fc49 	bl	8004568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin;
 8001cd6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001ce8:	230c      	movs	r3, #12
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	480f      	ldr	r0, [pc, #60]	; (8001d30 <HAL_SD_MspInit+0xf0>)
 8001cf4:	f002 fc38 	bl	8004568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_CLK_Pin;
 8001cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001d0a:	230c      	movs	r3, #12
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CLK_GPIO_Port, &GPIO_InitStruct);
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4619      	mov	r1, r3
 8001d14:	4806      	ldr	r0, [pc, #24]	; (8001d30 <HAL_SD_MspInit+0xf0>)
 8001d16:	f002 fc27 	bl	8004568 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001d1a:	bf00      	nop
 8001d1c:	3728      	adds	r7, #40	; 0x28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40012c00 	.word	0x40012c00
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	40020800 	.word	0x40020800

08001d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a21      	ldr	r2, [pc, #132]	; (8001dd8 <HAL_SPI_MspInit+0xa4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d13c      	bne.n	8001dd0 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <HAL_SPI_MspInit+0xa8>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <HAL_SPI_MspInit+0xa8>)
 8001d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HAL_SPI_MspInit+0xa8>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_SPI_MspInit+0xa8>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <HAL_SPI_MspInit+0xa8>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <HAL_SPI_MspInit+0xa8>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB12     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin;
 8001d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001da0:	2307      	movs	r3, #7
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	480d      	ldr	r0, [pc, #52]	; (8001de0 <HAL_SPI_MspInit+0xac>)
 8001dac:	f002 fbdc 	bl	8004568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001db0:	2330      	movs	r3, #48	; 0x30
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dc0:	2306      	movs	r3, #6
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4805      	ldr	r0, [pc, #20]	; (8001de0 <HAL_SPI_MspInit+0xac>)
 8001dcc:	f002 fbcc 	bl	8004568 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001dd0:	bf00      	nop
 8001dd2:	3728      	adds	r7, #40	; 0x28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40003c00 	.word	0x40003c00
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020400 	.word	0x40020400

08001de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a19      	ldr	r2, [pc, #100]	; (8001e68 <HAL_UART_MspInit+0x84>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d12c      	bne.n	8001e60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <HAL_UART_MspInit+0x88>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <HAL_UART_MspInit+0x88>)
 8001e10:	f043 0320 	orr.w	r3, r3, #32
 8001e14:	6453      	str	r3, [r2, #68]	; 0x44
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_UART_MspInit+0x88>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	f003 0320 	and.w	r3, r3, #32
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <HAL_UART_MspInit+0x88>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <HAL_UART_MspInit+0x88>)
 8001e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <HAL_UART_MspInit+0x88>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001e3e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e50:	2308      	movs	r3, #8
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4805      	ldr	r0, [pc, #20]	; (8001e70 <HAL_UART_MspInit+0x8c>)
 8001e5c:	f002 fb84 	bl	8004568 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e60:	bf00      	nop
 8001e62:	3728      	adds	r7, #40	; 0x28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40011400 	.word	0x40011400
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40021800 	.word	0x40021800

08001e74 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001e88:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <HAL_FSMC_MspInit+0xc8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d151      	bne.n	8001f34 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001e90:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <HAL_FSMC_MspInit+0xc8>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	603b      	str	r3, [r7, #0]
 8001e9a:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <HAL_FSMC_MspInit+0xcc>)
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9e:	4a28      	ldr	r2, [pc, #160]	; (8001f40 <HAL_FSMC_MspInit+0xcc>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6393      	str	r3, [r2, #56]	; 0x38
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <HAL_FSMC_MspInit+0xcc>)
 8001ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8001eb2:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001eb6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001ec4:	230c      	movs	r3, #12
 8001ec6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	4619      	mov	r1, r3
 8001ecc:	481d      	ldr	r0, [pc, #116]	; (8001f44 <HAL_FSMC_MspInit+0xd0>)
 8001ece:	f002 fb4b 	bl	8004568 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8001ed2:	f240 433f 	movw	r3, #1087	; 0x43f
 8001ed6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001ee4:	230c      	movs	r3, #12
 8001ee6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	4619      	mov	r1, r3
 8001eec:	4816      	ldr	r0, [pc, #88]	; (8001f48 <HAL_FSMC_MspInit+0xd4>)
 8001eee:	f002 fb3b 	bl	8004568 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8001ef2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001ef6:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f00:	2303      	movs	r3, #3
 8001f02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001f04:	230c      	movs	r3, #12
 8001f06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	480f      	ldr	r0, [pc, #60]	; (8001f4c <HAL_FSMC_MspInit+0xd8>)
 8001f0e:	f002 fb2b 	bl	8004568 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8001f12:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001f16:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f20:	2303      	movs	r3, #3
 8001f22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001f24:	230c      	movs	r3, #12
 8001f26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4808      	ldr	r0, [pc, #32]	; (8001f50 <HAL_FSMC_MspInit+0xdc>)
 8001f2e:	f002 fb1b 	bl	8004568 <HAL_GPIO_Init>
 8001f32:	e000      	b.n	8001f36 <HAL_FSMC_MspInit+0xc2>
    return;
 8001f34:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	200000e0 	.word	0x200000e0
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40021400 	.word	0x40021400
 8001f48:	40021800 	.word	0x40021800
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40020c00 	.word	0x40020c00

08001f54 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001f5c:	f7ff ff8a 	bl	8001e74 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7a:	e7fe      	b.n	8001f7a <HardFault_Handler+0x4>

08001f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <MemManage_Handler+0x4>

08001f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f86:	e7fe      	b.n	8001f86 <BusFault_Handler+0x4>

08001f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <UsageFault_Handler+0x4>

08001f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fbc:	f000 fec0 	bl	8002d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <DMA2_Stream0_IRQHandler+0x10>)
 8001fca:	f001 ff8b 	bl	8003ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2000350c 	.word	0x2000350c

08001fd8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001fe0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001fe4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001ff0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ff4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001ff8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00b      	beq.n	8002018 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002000:	e000      	b.n	8002004 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002002:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002004:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f9      	beq.n	8002002 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800200e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002018:	687b      	ldr	r3, [r7, #4]
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	e00a      	b.n	800204e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002038:	f3af 8000 	nop.w
 800203c:	4601      	mov	r1, r0
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	60ba      	str	r2, [r7, #8]
 8002044:	b2ca      	uxtb	r2, r1
 8002046:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	3301      	adds	r3, #1
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	429a      	cmp	r2, r3
 8002054:	dbf0      	blt.n	8002038 <_read+0x12>
	}

return len;
 8002056:	687b      	ldr	r3, [r7, #4]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
		for(int i = 0; i < len; i++){
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	e009      	b.n	8002086 <_write+0x26>
			ITM_SendChar(*ptr++);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	60ba      	str	r2, [r7, #8]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ffac 	bl	8001fd8 <ITM_SendChar>
		for(int i = 0; i < len; i++){
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	3301      	adds	r3, #1
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	429a      	cmp	r2, r3
 800208c:	dbf1      	blt.n	8002072 <_write+0x12>
		}
		return len;
 800208e:	687b      	ldr	r3, [r7, #4]

	//	errno = ENOSYS;
	//	return -1;
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <_close>:

int _close(int file)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	return -1;
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c0:	605a      	str	r2, [r3, #4]
	return 0;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_isatty>:

int _isatty(int file)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	return 1;
 80020d8:	2301      	movs	r3, #1
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
	return 0;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <_sbrk+0x50>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <_sbrk+0x16>
		heap_end = &end;
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <_sbrk+0x50>)
 8002112:	4a10      	ldr	r2, [pc, #64]	; (8002154 <_sbrk+0x54>)
 8002114:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <_sbrk+0x50>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <_sbrk+0x50>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	466a      	mov	r2, sp
 8002126:	4293      	cmp	r3, r2
 8002128:	d907      	bls.n	800213a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800212a:	f009 f8b5 	bl	800b298 <__errno>
 800212e:	4602      	mov	r2, r0
 8002130:	230c      	movs	r3, #12
 8002132:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002134:	f04f 33ff 	mov.w	r3, #4294967295
 8002138:	e006      	b.n	8002148 <_sbrk+0x48>
	}

	heap_end += incr;
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <_sbrk+0x50>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	4a03      	ldr	r2, [pc, #12]	; (8002150 <_sbrk+0x50>)
 8002144:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002146:	68fb      	ldr	r3, [r7, #12]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	200000e4 	.word	0x200000e4
 8002154:	20007530 	.word	0x20007530

08002158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <SystemInit+0x28>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	4a07      	ldr	r2, [pc, #28]	; (8002180 <SystemInit+0x28>)
 8002164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <SystemInit+0x28>)
 800216e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002172:	609a      	str	r2, [r3, #8]
#endif
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <ConnectWifi>:
char full_command[1024];
char *CR = "\r";
char *NL = "\n";

void ConnectWifi(SPI_HandleTypeDef *spidef)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	wifi_spi = *spidef;
 800218c:	4a05      	ldr	r2, [pc, #20]	; (80021a4 <ConnectWifi+0x20>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	2358      	movs	r3, #88	; 0x58
 8002196:	461a      	mov	r2, r3
 8002198:	f009 f8c2 	bl	800b320 <memcpy>
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20005460 	.word	0x20005460

080021a8 <Wifi_ChipDeselect>:

//WiFi SPI ChipDeselect
void Wifi_ChipDeselect(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIFI_SPI_CSN_GPIO_Port, WIFI_SPI_CSN_Pin, GPIO_PIN_SET);
 80021ac:	2201      	movs	r2, #1
 80021ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021b2:	4802      	ldr	r0, [pc, #8]	; (80021bc <Wifi_ChipDeselect+0x14>)
 80021b4:	f002 fb82 	bl	80048bc <HAL_GPIO_WritePin>
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021800 	.word	0x40021800

080021c0 <Wifi_ChipSelect>:

//WiFi SPI ChipSelect
void Wifi_ChipSelect(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIFI_SPI_CSN_GPIO_Port, WIFI_SPI_CSN_Pin, GPIO_PIN_RESET);
 80021c4:	2200      	movs	r2, #0
 80021c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021ca:	4802      	ldr	r0, [pc, #8]	; (80021d4 <Wifi_ChipSelect+0x14>)
 80021cc:	f002 fb76 	bl	80048bc <HAL_GPIO_WritePin>
}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021800 	.word	0x40021800

080021d8 <GetCmdDataReady>:

uint8_t GetCmdDataReady()
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
	return (uint8_t)HAL_GPIO_ReadPin(WIFI_DRDY_GPIO_Port, WIFI_DRDY_Pin);
 80021dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021e0:	4802      	ldr	r0, [pc, #8]	; (80021ec <GetCmdDataReady+0x14>)
 80021e2:	f002 fb53 	bl	800488c <HAL_GPIO_ReadPin>
 80021e6:	4603      	mov	r3, r0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021800 	.word	0x40021800

080021f0 <IsCommandPhaseReady>:

bool IsCommandPhaseReady()
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
	if(GetCmdDataReady() != 0)
 80021f4:	f7ff fff0 	bl	80021d8 <GetCmdDataReady>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <IsCommandPhaseReady+0x12>
	{
		return true;
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <IsCommandPhaseReady+0x14>
	}
	return false;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}

08002208 <IsDataPhaseReady>:

bool IsDataPhaseReady()
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
	if(GetCmdDataReady() != 0)
 800220c:	f7ff ffe4 	bl	80021d8 <GetCmdDataReady>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <IsDataPhaseReady+0x12>
	{
		return true;
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <IsDataPhaseReady+0x14>
	}
	return false;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	bd80      	pop	{r7, pc}

08002220 <Wifi_Init>:

void Wifi_Init()
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
	WifiStartup();
 8002224:	f000 f954 	bl	80024d0 <WifiStartup>
	StartJoinNetwork("DevinsHotWifi", "RickAndMorty123");
 8002228:	4904      	ldr	r1, [pc, #16]	; (800223c <Wifi_Init+0x1c>)
 800222a:	4805      	ldr	r0, [pc, #20]	; (8002240 <Wifi_Init+0x20>)
 800222c:	f000 fbf0 	bl	8002a10 <StartJoinNetwork>
	StartTCP(5025);
 8002230:	f241 30a1 	movw	r0, #5025	; 0x13a1
 8002234:	f000 fcf0 	bl	8002c18 <StartTCP>
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	0800c2f8 	.word	0x0800c2f8
 8002240:	0800c308 	.word	0x0800c308

08002244 <GetSPIResponse>:

void GetSPIResponse()
{
 8002244:	b5b0      	push	{r4, r5, r7, lr}
 8002246:	b08a      	sub	sp, #40	; 0x28
 8002248:	af02      	add	r7, sp, #8
	uint8_t checkReady = GetCmdDataReady();
 800224a:	f7ff ffc5 	bl	80021d8 <GetCmdDataReady>
 800224e:	4603      	mov	r3, r0
 8002250:	75fb      	strb	r3, [r7, #23]
	while(!IsDataPhaseReady())
 8002252:	e003      	b.n	800225c <GetSPIResponse+0x18>
	{
		checkReady = GetCmdDataReady();
 8002254:	f7ff ffc0 	bl	80021d8 <GetCmdDataReady>
 8002258:	4603      	mov	r3, r0
 800225a:	75fb      	strb	r3, [r7, #23]
	while(!IsDataPhaseReady())
 800225c:	f7ff ffd4 	bl	8002208 <IsDataPhaseReady>
 8002260:	4603      	mov	r3, r0
 8002262:	f083 0301 	eor.w	r3, r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f3      	bne.n	8002254 <GetSPIResponse+0x10>
//		printf("Wait for CMD/DATARDY to be high again [%d]\r\n", checkReady);

	}
	int length = 1;
 800226c:	2301      	movs	r3, #1
 800226e:	613b      	str	r3, [r7, #16]
	uint16_t wb2[] = { 0x0A0A };
 8002270:	f640 230a 	movw	r3, #2570	; 0xa0a
 8002274:	80bb      	strh	r3, [r7, #4]
	uint16_t rb2[length];
 8002276:	6938      	ldr	r0, [r7, #16]
 8002278:	466b      	mov	r3, sp
 800227a:	461d      	mov	r5, r3
 800227c:	1e43      	subs	r3, r0, #1
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	4603      	mov	r3, r0
 8002282:	4619      	mov	r1, r3
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	f04f 0400 	mov.w	r4, #0
 8002290:	0114      	lsls	r4, r2, #4
 8002292:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8002296:	010b      	lsls	r3, r1, #4
 8002298:	4603      	mov	r3, r0
 800229a:	4619      	mov	r1, r3
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	f04f 0400 	mov.w	r4, #0
 80022a8:	0114      	lsls	r4, r2, #4
 80022aa:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80022ae:	010b      	lsls	r3, r1, #4
 80022b0:	4603      	mov	r3, r0
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	3301      	adds	r3, #1
 80022b6:	3307      	adds	r3, #7
 80022b8:	08db      	lsrs	r3, r3, #3
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	ebad 0d03 	sub.w	sp, sp, r3
 80022c0:	ab02      	add	r3, sp, #8
 80022c2:	3301      	adds	r3, #1
 80022c4:	085b      	lsrs	r3, r3, #1
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	60bb      	str	r3, [r7, #8]

//	checkReady = GetCmdDataReady();
//	printf("Starting read data phase, checkReady = [%d]\r\n", checkReady);
	Wifi_ChipSelect();
 80022ca:	f7ff ff79 	bl	80021c0 <Wifi_ChipSelect>

	int i = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61bb      	str	r3, [r7, #24]
	int index = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
	while(IsDataPhaseReady())
 80022d6:	e035      	b.n	8002344 <GetSPIResponse+0x100>
	{
		HAL_Delay(20);
 80022d8:	2014      	movs	r0, #20
 80022da:	f000 fd51 	bl	8002d80 <HAL_Delay>
		HAL_SPI_TransmitReceive(&wifi_spi, &wb2, &rb2, length, HAL_MAX_DELAY);
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	b298      	uxth	r0, r3
 80022e4:	1d39      	adds	r1, r7, #4
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	4603      	mov	r3, r0
 80022ee:	481d      	ldr	r0, [pc, #116]	; (8002364 <GetSPIResponse+0x120>)
 80022f0:	f004 fa5a 	bl	80067a8 <HAL_SPI_TransmitReceive>
		checkReady = GetCmdDataReady();
 80022f4:	f7ff ff70 	bl	80021d8 <GetCmdDataReady>
 80022f8:	4603      	mov	r3, r0
 80022fa:	75fb      	strb	r3, [r7, #23]

		printf("i = %d, value = %0x\r\n", i, rb2[0]);
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	69b9      	ldr	r1, [r7, #24]
 8002304:	4818      	ldr	r0, [pc, #96]	; (8002368 <GetSPIResponse+0x124>)
 8002306:	f009 f8c7 	bl	800b498 <iprintf>
		char first = rb2[0] & 0xff;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
		char second = rb2[0] >> 8;
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	0a1b      	lsrs	r3, r3, #8
 8002316:	b29b      	uxth	r3, r3
 8002318:	71bb      	strb	r3, [r7, #6]
		//		uint16_t first = (uint16_t)rb2[0];// && 0xff;
//		uint16_t second = (*rb2 && 0xff00) >> 8;//   tmp[i*2+1] << 8;

//		printf("wb2[i] = %0x\r\n", wb2[0]);
		if(first != 0x15)
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	2b15      	cmp	r3, #21
 800231e:	d005      	beq.n	800232c <GetSPIResponse+0xe8>
		{
			spi_response[index++] = first;
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	61fa      	str	r2, [r7, #28]
 8002326:	4911      	ldr	r1, [pc, #68]	; (800236c <GetSPIResponse+0x128>)
 8002328:	79fa      	ldrb	r2, [r7, #7]
 800232a:	54ca      	strb	r2, [r1, r3]
		}
		if(second != 0x15)
 800232c:	79bb      	ldrb	r3, [r7, #6]
 800232e:	2b15      	cmp	r3, #21
 8002330:	d005      	beq.n	800233e <GetSPIResponse+0xfa>
		{
			spi_response[index++] = (char)second;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	61fa      	str	r2, [r7, #28]
 8002338:	490c      	ldr	r1, [pc, #48]	; (800236c <GetSPIResponse+0x128>)
 800233a:	79ba      	ldrb	r2, [r7, #6]
 800233c:	54ca      	strb	r2, [r1, r3]
		}

		i++;
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	3301      	adds	r3, #1
 8002342:	61bb      	str	r3, [r7, #24]
	while(IsDataPhaseReady())
 8002344:	f7ff ff60 	bl	8002208 <IsDataPhaseReady>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1c4      	bne.n	80022d8 <GetSPIResponse+0x94>
	}

	printf("%s\r\n", spi_response);
 800234e:	4907      	ldr	r1, [pc, #28]	; (800236c <GetSPIResponse+0x128>)
 8002350:	4807      	ldr	r0, [pc, #28]	; (8002370 <GetSPIResponse+0x12c>)
 8002352:	f009 f8a1 	bl	800b498 <iprintf>

	Wifi_ChipDeselect();
 8002356:	f7ff ff27 	bl	80021a8 <Wifi_ChipDeselect>
 800235a:	46ad      	mov	sp, r5
//	printf("ChipDeselect == [%d]\r\n", checkReady);
}
 800235c:	bf00      	nop
 800235e:	3720      	adds	r7, #32
 8002360:	46bd      	mov	sp, r7
 8002362:	bdb0      	pop	{r4, r5, r7, pc}
 8002364:	20005460 	.word	0x20005460
 8002368:	0800c318 	.word	0x0800c318
 800236c:	20005364 	.word	0x20005364
 8002370:	0800c330 	.word	0x0800c330

08002374 <SendSPICommand>:

void SendSPICommand(char *command)
{
 8002374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002376:	b08d      	sub	sp, #52	; 0x34
 8002378:	af02      	add	r7, sp, #8
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	466b      	mov	r3, sp
 800237e:	461d      	mov	r5, r3
	uint8_t checkReady;
	int length = strlen(command)/2;
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7fd ff4d 	bl	8000220 <strlen>
 8002386:	4603      	mov	r3, r0
 8002388:	085b      	lsrs	r3, r3, #1
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t wb[length];
 800238c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800238e:	1e43      	subs	r3, r0, #1
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	4603      	mov	r3, r0
 8002394:	4619      	mov	r1, r3
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	f04f 0400 	mov.w	r4, #0
 80023a2:	0114      	lsls	r4, r2, #4
 80023a4:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80023a8:	010b      	lsls	r3, r1, #4
 80023aa:	4603      	mov	r3, r0
 80023ac:	4619      	mov	r1, r3
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	f04f 0400 	mov.w	r4, #0
 80023ba:	0114      	lsls	r4, r2, #4
 80023bc:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80023c0:	010b      	lsls	r3, r1, #4
 80023c2:	4603      	mov	r3, r0
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	3301      	adds	r3, #1
 80023c8:	3307      	adds	r3, #7
 80023ca:	08db      	lsrs	r3, r3, #3
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	ebad 0d03 	sub.w	sp, sp, r3
 80023d2:	ab02      	add	r3, sp, #8
 80023d4:	3301      	adds	r3, #1
 80023d6:	085b      	lsrs	r3, r3, #1
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	61bb      	str	r3, [r7, #24]
	memset(wb, 0, length);
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e0:	2100      	movs	r1, #0
 80023e2:	4618      	mov	r0, r3
 80023e4:	f008 ffa7 	bl	800b336 <memset>

	for(int i = 0; i < length; i++)
 80023e8:	2300      	movs	r3, #0
 80023ea:	623b      	str	r3, [r7, #32]
 80023ec:	e01a      	b.n	8002424 <SendSPICommand+0xb0>
	{
		uint16_t lo = command[i*2];
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	461a      	mov	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4413      	add	r3, r2
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	81fb      	strh	r3, [r7, #14]
		uint16_t hi = command[i*2+1] << 8;
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	3301      	adds	r3, #1
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	b29b      	uxth	r3, r3
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	81bb      	strh	r3, [r7, #12]
		wb[i] = lo | hi;
 800240e:	89fa      	ldrh	r2, [r7, #14]
 8002410:	89bb      	ldrh	r3, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	b299      	uxth	r1, r3
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	6a3a      	ldr	r2, [r7, #32]
 800241a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < length; i++)
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	3301      	adds	r3, #1
 8002422:	623b      	str	r3, [r7, #32]
 8002424:	6a3a      	ldr	r2, [r7, #32]
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	429a      	cmp	r2, r3
 800242a:	dbe0      	blt.n	80023ee <SendSPICommand+0x7a>

//		printf("wb[i] = %0x\r\n", wb[i]);
	}
	uint16_t rb[length];
 800242c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800242e:	466b      	mov	r3, sp
 8002430:	461e      	mov	r6, r3
 8002432:	1e43      	subs	r3, r0, #1
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	4603      	mov	r3, r0
 8002438:	4619      	mov	r1, r3
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	f04f 0400 	mov.w	r4, #0
 8002446:	0114      	lsls	r4, r2, #4
 8002448:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 800244c:	010b      	lsls	r3, r1, #4
 800244e:	4603      	mov	r3, r0
 8002450:	4619      	mov	r1, r3
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	f04f 0400 	mov.w	r4, #0
 800245e:	0114      	lsls	r4, r2, #4
 8002460:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8002464:	010b      	lsls	r3, r1, #4
 8002466:	4603      	mov	r3, r0
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	3301      	adds	r3, #1
 800246c:	3307      	adds	r3, #7
 800246e:	08db      	lsrs	r3, r3, #3
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	ebad 0d03 	sub.w	sp, sp, r3
 8002476:	ab02      	add	r3, sp, #8
 8002478:	3301      	adds	r3, #1
 800247a:	085b      	lsrs	r3, r3, #1
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	613b      	str	r3, [r7, #16]

	//Wait for chip to be ready for command
//	printf("waiting for chip to be ready to send spi command\r\n");
	while(!IsCommandPhaseReady())
 8002480:	bf00      	nop
 8002482:	f7ff feb5 	bl	80021f0 <IsCommandPhaseReady>
 8002486:	4603      	mov	r3, r0
 8002488:	f083 0301 	eor.w	r3, r3, #1
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f7      	bne.n	8002482 <SendSPICommand+0x10e>
	{

	}

	Wifi_ChipSelect();
 8002492:	f7ff fe95 	bl	80021c0 <Wifi_ChipSelect>
	HAL_SPI_TransmitReceive(&wifi_spi, &wb, &rb, length, HAL_MAX_DELAY);
 8002496:	69b9      	ldr	r1, [r7, #24]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	b298      	uxth	r0, r3
 800249e:	f04f 33ff 	mov.w	r3, #4294967295
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	4603      	mov	r3, r0
 80024a6:	4809      	ldr	r0, [pc, #36]	; (80024cc <SendSPICommand+0x158>)
 80024a8:	f004 f97e 	bl	80067a8 <HAL_SPI_TransmitReceive>
	Wifi_ChipDeselect();
 80024ac:	f7ff fe7c 	bl	80021a8 <Wifi_ChipDeselect>

	while(IsCommandPhaseReady())
 80024b0:	bf00      	nop
 80024b2:	f7ff fe9d 	bl	80021f0 <IsCommandPhaseReady>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1fa      	bne.n	80024b2 <SendSPICommand+0x13e>
	{

	}

	GetSPIResponse();
 80024bc:	f7ff fec2 	bl	8002244 <GetSPIResponse>
 80024c0:	46b5      	mov	sp, r6
 80024c2:	46ad      	mov	sp, r5


}
 80024c4:	bf00      	nop
 80024c6:	372c      	adds	r7, #44	; 0x2c
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024cc:	20005460 	.word	0x20005460

080024d0 <WifiStartup>:
	Wifi_ChipDeselect();
}


void WifiStartup()
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af02      	add	r7, sp, #8
	int length = 1;
 80024d6:	2301      	movs	r3, #1
 80024d8:	60fb      	str	r3, [r7, #12]
//	uint8_t wb[] = {0x0a, 0x0a};
//	uint8_t rb[2];
	uint16_t wb[] = {0x0a0a};
 80024da:	f640 230a 	movw	r3, #2570	; 0xa0a
 80024de:	813b      	strh	r3, [r7, #8]
	uint16_t rb[1];
	Wifi_ChipSelect();
 80024e0:	f7ff fe6e 	bl	80021c0 <Wifi_ChipSelect>

	while(IsDataPhaseReady())
 80024e4:	e012      	b.n	800250c <WifiStartup+0x3c>
	{
		HAL_SPI_TransmitReceive(&wifi_spi, &wb, &rb, length, HAL_MAX_DELAY);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	b298      	uxth	r0, r3
 80024ea:	1d3a      	adds	r2, r7, #4
 80024ec:	f107 0108 	add.w	r1, r7, #8
 80024f0:	f04f 33ff 	mov.w	r3, #4294967295
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	4603      	mov	r3, r0
 80024f8:	480a      	ldr	r0, [pc, #40]	; (8002524 <WifiStartup+0x54>)
 80024fa:	f004 f955 	bl	80067a8 <HAL_SPI_TransmitReceive>
		printf("in first data phase, rb = 0x%0x, 0x%0x\r\n", rb[1], rb[0]);
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	4619      	mov	r1, r3
 8002502:	88bb      	ldrh	r3, [r7, #4]
 8002504:	461a      	mov	r2, r3
 8002506:	4808      	ldr	r0, [pc, #32]	; (8002528 <WifiStartup+0x58>)
 8002508:	f008 ffc6 	bl	800b498 <iprintf>
	while(IsDataPhaseReady())
 800250c:	f7ff fe7c 	bl	8002208 <IsDataPhaseReady>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1e7      	bne.n	80024e6 <WifiStartup+0x16>
//	for(int i = 0; i < 4; i++)
//	{
//		printf("i = %d, value = %0x\r\n", i, rb2[i]);
//	}

	Wifi_ChipDeselect();
 8002516:	f7ff fe47 	bl	80021a8 <Wifi_ChipDeselect>
}
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20005460 	.word	0x20005460
 8002528:	0800c33c 	.word	0x0800c33c

0800252c <SetProductName>:
	Wifi_ChipDeselect();
	printf("ChipDeselect == [%d]\r\n", checkReady);
}

void SetProductName(char *name)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	uint8_t checkReady;
	char command[] = "ZN=";
 8002534:	4b18      	ldr	r3, [pc, #96]	; (8002598 <SetProductName+0x6c>)
 8002536:	60bb      	str	r3, [r7, #8]

	strcpy(full_command, command);
 8002538:	f107 0308 	add.w	r3, r7, #8
 800253c:	4619      	mov	r1, r3
 800253e:	4817      	ldr	r0, [pc, #92]	; (800259c <SetProductName+0x70>)
 8002540:	f009 f845 	bl	800b5ce <strcpy>
	strcat(full_command, name);
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4815      	ldr	r0, [pc, #84]	; (800259c <SetProductName+0x70>)
 8002548:	f009 f832 	bl	800b5b0 <strcat>
	strcat(full_command, CR);
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <SetProductName+0x74>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4619      	mov	r1, r3
 8002552:	4812      	ldr	r0, [pc, #72]	; (800259c <SetProductName+0x70>)
 8002554:	f009 f82c 	bl	800b5b0 <strcat>

	int totalLength = strlen(full_command);
 8002558:	4810      	ldr	r0, [pc, #64]	; (800259c <SetProductName+0x70>)
 800255a:	f7fd fe61 	bl	8000220 <strlen>
 800255e:	4603      	mov	r3, r0
 8002560:	60fb      	str	r3, [r7, #12]
//	printf("total length before = %d", totalLength);
	if(totalLength % 2 == 1)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	bfb8      	it	lt
 800256c:	425b      	neglt	r3, r3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d105      	bne.n	800257e <SetProductName+0x52>
	{
		strcat(full_command, NL);
 8002572:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <SetProductName+0x78>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4619      	mov	r1, r3
 8002578:	4808      	ldr	r0, [pc, #32]	; (800259c <SetProductName+0x70>)
 800257a:	f009 f819 	bl	800b5b0 <strcat>
	}
	totalLength = strlen(full_command);
 800257e:	4807      	ldr	r0, [pc, #28]	; (800259c <SetProductName+0x70>)
 8002580:	f7fd fe4e 	bl	8000220 <strlen>
 8002584:	4603      	mov	r3, r0
 8002586:	60fb      	str	r3, [r7, #12]
//	printf("total length after = %d", totalLength);

	SendSPICommand(full_command);
 8002588:	4804      	ldr	r0, [pc, #16]	; (800259c <SetProductName+0x70>)
 800258a:	f7ff fef3 	bl	8002374 <SendSPICommand>
}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	003d4e5a 	.word	0x003d4e5a
 800259c:	20004f64 	.word	0x20004f64
 80025a0:	20000020 	.word	0x20000020
 80025a4:	20000024 	.word	0x20000024

080025a8 <SetAPSSID>:

void SetAPSSID(char *ssid)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	uint8_t checkReady;
	char command[] = "C1=";
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <SetAPSSID+0x6c>)
 80025b2:	60bb      	str	r3, [r7, #8]

	strcpy(full_command, command);
 80025b4:	f107 0308 	add.w	r3, r7, #8
 80025b8:	4619      	mov	r1, r3
 80025ba:	4817      	ldr	r0, [pc, #92]	; (8002618 <SetAPSSID+0x70>)
 80025bc:	f009 f807 	bl	800b5ce <strcpy>
	strcat(full_command, ssid);
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	4815      	ldr	r0, [pc, #84]	; (8002618 <SetAPSSID+0x70>)
 80025c4:	f008 fff4 	bl	800b5b0 <strcat>
	strcat(full_command, CR);
 80025c8:	4b14      	ldr	r3, [pc, #80]	; (800261c <SetAPSSID+0x74>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	4812      	ldr	r0, [pc, #72]	; (8002618 <SetAPSSID+0x70>)
 80025d0:	f008 ffee 	bl	800b5b0 <strcat>

	int totalLength = strlen(full_command);
 80025d4:	4810      	ldr	r0, [pc, #64]	; (8002618 <SetAPSSID+0x70>)
 80025d6:	f7fd fe23 	bl	8000220 <strlen>
 80025da:	4603      	mov	r3, r0
 80025dc:	60fb      	str	r3, [r7, #12]
//	printf("total length before = %d", totalLength);
	if(totalLength % 2 == 1)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	bfb8      	it	lt
 80025e8:	425b      	neglt	r3, r3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d105      	bne.n	80025fa <SetAPSSID+0x52>
	{
		strcat(full_command, NL);
 80025ee:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <SetAPSSID+0x78>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4619      	mov	r1, r3
 80025f4:	4808      	ldr	r0, [pc, #32]	; (8002618 <SetAPSSID+0x70>)
 80025f6:	f008 ffdb 	bl	800b5b0 <strcat>
	}
	totalLength = strlen(full_command);
 80025fa:	4807      	ldr	r0, [pc, #28]	; (8002618 <SetAPSSID+0x70>)
 80025fc:	f7fd fe10 	bl	8000220 <strlen>
 8002600:	4603      	mov	r3, r0
 8002602:	60fb      	str	r3, [r7, #12]
//	printf("total length after = %d", totalLength);

	SendSPICommand(full_command);
 8002604:	4804      	ldr	r0, [pc, #16]	; (8002618 <SetAPSSID+0x70>)
 8002606:	f7ff feb5 	bl	8002374 <SendSPICommand>
}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	003d3143 	.word	0x003d3143
 8002618:	20004f64 	.word	0x20004f64
 800261c:	20000020 	.word	0x20000020
 8002620:	20000024 	.word	0x20000024

08002624 <SetAPPassword>:

void SetAPPassword(char *pass)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	uint8_t checkReady;
	char command[] = "C2=";
 800262c:	4b18      	ldr	r3, [pc, #96]	; (8002690 <SetAPPassword+0x6c>)
 800262e:	60bb      	str	r3, [r7, #8]

	strcpy(full_command, command);
 8002630:	f107 0308 	add.w	r3, r7, #8
 8002634:	4619      	mov	r1, r3
 8002636:	4817      	ldr	r0, [pc, #92]	; (8002694 <SetAPPassword+0x70>)
 8002638:	f008 ffc9 	bl	800b5ce <strcpy>
	strcat(full_command, pass);
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4815      	ldr	r0, [pc, #84]	; (8002694 <SetAPPassword+0x70>)
 8002640:	f008 ffb6 	bl	800b5b0 <strcat>
	strcat(full_command, CR);
 8002644:	4b14      	ldr	r3, [pc, #80]	; (8002698 <SetAPPassword+0x74>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4619      	mov	r1, r3
 800264a:	4812      	ldr	r0, [pc, #72]	; (8002694 <SetAPPassword+0x70>)
 800264c:	f008 ffb0 	bl	800b5b0 <strcat>

	int totalLength = strlen(full_command);
 8002650:	4810      	ldr	r0, [pc, #64]	; (8002694 <SetAPPassword+0x70>)
 8002652:	f7fd fde5 	bl	8000220 <strlen>
 8002656:	4603      	mov	r3, r0
 8002658:	60fb      	str	r3, [r7, #12]
//	printf("total length before = %d", totalLength);
	if(totalLength % 2 == 1)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	bfb8      	it	lt
 8002664:	425b      	neglt	r3, r3
 8002666:	2b01      	cmp	r3, #1
 8002668:	d105      	bne.n	8002676 <SetAPPassword+0x52>
	{
		strcat(full_command, NL);
 800266a:	4b0c      	ldr	r3, [pc, #48]	; (800269c <SetAPPassword+0x78>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4619      	mov	r1, r3
 8002670:	4808      	ldr	r0, [pc, #32]	; (8002694 <SetAPPassword+0x70>)
 8002672:	f008 ff9d 	bl	800b5b0 <strcat>
	}
	totalLength = strlen(full_command);
 8002676:	4807      	ldr	r0, [pc, #28]	; (8002694 <SetAPPassword+0x70>)
 8002678:	f7fd fdd2 	bl	8000220 <strlen>
 800267c:	4603      	mov	r3, r0
 800267e:	60fb      	str	r3, [r7, #12]
//	printf("total length after = %d", totalLength);

	SendSPICommand(full_command);
 8002680:	4804      	ldr	r0, [pc, #16]	; (8002694 <SetAPPassword+0x70>)
 8002682:	f7ff fe77 	bl	8002374 <SendSPICommand>
}
 8002686:	bf00      	nop
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	003d3243 	.word	0x003d3243
 8002694:	20004f64 	.word	0x20004f64
 8002698:	20000020 	.word	0x20000020
 800269c:	20000024 	.word	0x20000024

080026a0 <SetAPSecurityMode>:

void SetAPSecurityMode(char *mode)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	uint8_t checkReady;
	char command[] = "C3=";
 80026a8:	4b18      	ldr	r3, [pc, #96]	; (800270c <SetAPSecurityMode+0x6c>)
 80026aa:	60bb      	str	r3, [r7, #8]

	strcpy(full_command, command);
 80026ac:	f107 0308 	add.w	r3, r7, #8
 80026b0:	4619      	mov	r1, r3
 80026b2:	4817      	ldr	r0, [pc, #92]	; (8002710 <SetAPSecurityMode+0x70>)
 80026b4:	f008 ff8b 	bl	800b5ce <strcpy>
	strcat(full_command, mode);
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4815      	ldr	r0, [pc, #84]	; (8002710 <SetAPSecurityMode+0x70>)
 80026bc:	f008 ff78 	bl	800b5b0 <strcat>
	strcat(full_command, CR);
 80026c0:	4b14      	ldr	r3, [pc, #80]	; (8002714 <SetAPSecurityMode+0x74>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4619      	mov	r1, r3
 80026c6:	4812      	ldr	r0, [pc, #72]	; (8002710 <SetAPSecurityMode+0x70>)
 80026c8:	f008 ff72 	bl	800b5b0 <strcat>

	int totalLength = strlen(full_command);
 80026cc:	4810      	ldr	r0, [pc, #64]	; (8002710 <SetAPSecurityMode+0x70>)
 80026ce:	f7fd fda7 	bl	8000220 <strlen>
 80026d2:	4603      	mov	r3, r0
 80026d4:	60fb      	str	r3, [r7, #12]
//	printf("total length before = %d", totalLength);
	if(totalLength % 2 == 1)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	bfb8      	it	lt
 80026e0:	425b      	neglt	r3, r3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d105      	bne.n	80026f2 <SetAPSecurityMode+0x52>
	{
		strcat(full_command, NL);
 80026e6:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <SetAPSecurityMode+0x78>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4619      	mov	r1, r3
 80026ec:	4808      	ldr	r0, [pc, #32]	; (8002710 <SetAPSecurityMode+0x70>)
 80026ee:	f008 ff5f 	bl	800b5b0 <strcat>
	}
	totalLength = strlen(full_command);
 80026f2:	4807      	ldr	r0, [pc, #28]	; (8002710 <SetAPSecurityMode+0x70>)
 80026f4:	f7fd fd94 	bl	8000220 <strlen>
 80026f8:	4603      	mov	r3, r0
 80026fa:	60fb      	str	r3, [r7, #12]
//	printf("total length after = %d", totalLength);

	SendSPICommand(full_command);
 80026fc:	4804      	ldr	r0, [pc, #16]	; (8002710 <SetAPSecurityMode+0x70>)
 80026fe:	f7ff fe39 	bl	8002374 <SendSPICommand>
}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	003d3343 	.word	0x003d3343
 8002710:	20004f64 	.word	0x20004f64
 8002714:	20000020 	.word	0x20000020
 8002718:	20000024 	.word	0x20000024

0800271c <SetDHCPSetting>:

void SetDHCPSetting(char *dhcp)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	uint8_t checkReady;
	char command[] = "C4=";
 8002724:	4b18      	ldr	r3, [pc, #96]	; (8002788 <SetDHCPSetting+0x6c>)
 8002726:	60bb      	str	r3, [r7, #8]

	strcpy(full_command, command);
 8002728:	f107 0308 	add.w	r3, r7, #8
 800272c:	4619      	mov	r1, r3
 800272e:	4817      	ldr	r0, [pc, #92]	; (800278c <SetDHCPSetting+0x70>)
 8002730:	f008 ff4d 	bl	800b5ce <strcpy>
	strcat(full_command, dhcp);
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4815      	ldr	r0, [pc, #84]	; (800278c <SetDHCPSetting+0x70>)
 8002738:	f008 ff3a 	bl	800b5b0 <strcat>
	strcat(full_command, CR);
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <SetDHCPSetting+0x74>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4619      	mov	r1, r3
 8002742:	4812      	ldr	r0, [pc, #72]	; (800278c <SetDHCPSetting+0x70>)
 8002744:	f008 ff34 	bl	800b5b0 <strcat>

	int totalLength = strlen(full_command);
 8002748:	4810      	ldr	r0, [pc, #64]	; (800278c <SetDHCPSetting+0x70>)
 800274a:	f7fd fd69 	bl	8000220 <strlen>
 800274e:	4603      	mov	r3, r0
 8002750:	60fb      	str	r3, [r7, #12]
//	printf("total length before = %d", totalLength);
	if(totalLength % 2 == 1)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	bfb8      	it	lt
 800275c:	425b      	neglt	r3, r3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d105      	bne.n	800276e <SetDHCPSetting+0x52>
	{
		strcat(full_command, NL);
 8002762:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <SetDHCPSetting+0x78>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4619      	mov	r1, r3
 8002768:	4808      	ldr	r0, [pc, #32]	; (800278c <SetDHCPSetting+0x70>)
 800276a:	f008 ff21 	bl	800b5b0 <strcat>
	}
	totalLength = strlen(full_command);
 800276e:	4807      	ldr	r0, [pc, #28]	; (800278c <SetDHCPSetting+0x70>)
 8002770:	f7fd fd56 	bl	8000220 <strlen>
 8002774:	4603      	mov	r3, r0
 8002776:	60fb      	str	r3, [r7, #12]
//	printf("total length after = %d", totalLength);

	SendSPICommand(full_command);
 8002778:	4804      	ldr	r0, [pc, #16]	; (800278c <SetDHCPSetting+0x70>)
 800277a:	f7ff fdfb 	bl	8002374 <SendSPICommand>
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	003d3443 	.word	0x003d3443
 800278c:	20004f64 	.word	0x20004f64
 8002790:	20000020 	.word	0x20000020
 8002794:	20000024 	.word	0x20000024

08002798 <JoinNetwork>:

void JoinNetwork()
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
	uint8_t checkReady;
	char command[] = "C0";
 800279e:	4a19      	ldr	r2, [pc, #100]	; (8002804 <JoinNetwork+0x6c>)
 80027a0:	463b      	mov	r3, r7
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	4611      	mov	r1, r2
 80027a6:	8019      	strh	r1, [r3, #0]
 80027a8:	3302      	adds	r3, #2
 80027aa:	0c12      	lsrs	r2, r2, #16
 80027ac:	701a      	strb	r2, [r3, #0]

	strcpy(full_command, command);
 80027ae:	463b      	mov	r3, r7
 80027b0:	4619      	mov	r1, r3
 80027b2:	4815      	ldr	r0, [pc, #84]	; (8002808 <JoinNetwork+0x70>)
 80027b4:	f008 ff0b 	bl	800b5ce <strcpy>
	strcat(full_command, CR);
 80027b8:	4b14      	ldr	r3, [pc, #80]	; (800280c <JoinNetwork+0x74>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4619      	mov	r1, r3
 80027be:	4812      	ldr	r0, [pc, #72]	; (8002808 <JoinNetwork+0x70>)
 80027c0:	f008 fef6 	bl	800b5b0 <strcat>

	int totalLength = strlen(full_command);
 80027c4:	4810      	ldr	r0, [pc, #64]	; (8002808 <JoinNetwork+0x70>)
 80027c6:	f7fd fd2b 	bl	8000220 <strlen>
 80027ca:	4603      	mov	r3, r0
 80027cc:	607b      	str	r3, [r7, #4]
//	printf("total length before = %d", totalLength);
	if(totalLength % 2 == 1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	bfb8      	it	lt
 80027d8:	425b      	neglt	r3, r3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d105      	bne.n	80027ea <JoinNetwork+0x52>
	{
		strcat(full_command, NL);
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <JoinNetwork+0x78>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4619      	mov	r1, r3
 80027e4:	4808      	ldr	r0, [pc, #32]	; (8002808 <JoinNetwork+0x70>)
 80027e6:	f008 fee3 	bl	800b5b0 <strcat>
	}
	totalLength = strlen(full_command);
 80027ea:	4807      	ldr	r0, [pc, #28]	; (8002808 <JoinNetwork+0x70>)
 80027ec:	f7fd fd18 	bl	8000220 <strlen>
 80027f0:	4603      	mov	r3, r0
 80027f2:	607b      	str	r3, [r7, #4]
//	printf("total length after = %d", totalLength);

	SendSPICommand(full_command);
 80027f4:	4804      	ldr	r0, [pc, #16]	; (8002808 <JoinNetwork+0x70>)
 80027f6:	f7ff fdbd 	bl	8002374 <SendSPICommand>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	0800c47c 	.word	0x0800c47c
 8002808:	20004f64 	.word	0x20004f64
 800280c:	20000020 	.word	0x20000020
 8002810:	20000024 	.word	0x20000024

08002814 <SetSocket>:

void SetSocket(char *protocol)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	uint8_t checkReady;
	char command[] = "P0=";
 800281c:	4b18      	ldr	r3, [pc, #96]	; (8002880 <SetSocket+0x6c>)
 800281e:	60bb      	str	r3, [r7, #8]

	strcpy(full_command, command);
 8002820:	f107 0308 	add.w	r3, r7, #8
 8002824:	4619      	mov	r1, r3
 8002826:	4817      	ldr	r0, [pc, #92]	; (8002884 <SetSocket+0x70>)
 8002828:	f008 fed1 	bl	800b5ce <strcpy>
	strcat(full_command, protocol);
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4815      	ldr	r0, [pc, #84]	; (8002884 <SetSocket+0x70>)
 8002830:	f008 febe 	bl	800b5b0 <strcat>
	strcat(full_command, CR);
 8002834:	4b14      	ldr	r3, [pc, #80]	; (8002888 <SetSocket+0x74>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4619      	mov	r1, r3
 800283a:	4812      	ldr	r0, [pc, #72]	; (8002884 <SetSocket+0x70>)
 800283c:	f008 feb8 	bl	800b5b0 <strcat>

	int totalLength = strlen(full_command);
 8002840:	4810      	ldr	r0, [pc, #64]	; (8002884 <SetSocket+0x70>)
 8002842:	f7fd fced 	bl	8000220 <strlen>
 8002846:	4603      	mov	r3, r0
 8002848:	60fb      	str	r3, [r7, #12]
//	printf("total length before = %d", totalLength);
	if(totalLength % 2 == 1)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	bfb8      	it	lt
 8002854:	425b      	neglt	r3, r3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d105      	bne.n	8002866 <SetSocket+0x52>
	{
		strcat(full_command, NL);
 800285a:	4b0c      	ldr	r3, [pc, #48]	; (800288c <SetSocket+0x78>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4619      	mov	r1, r3
 8002860:	4808      	ldr	r0, [pc, #32]	; (8002884 <SetSocket+0x70>)
 8002862:	f008 fea5 	bl	800b5b0 <strcat>
	}
	totalLength = strlen(full_command);
 8002866:	4807      	ldr	r0, [pc, #28]	; (8002884 <SetSocket+0x70>)
 8002868:	f7fd fcda 	bl	8000220 <strlen>
 800286c:	4603      	mov	r3, r0
 800286e:	60fb      	str	r3, [r7, #12]
//	printf("total length after = %d", totalLength);

	SendSPICommand(full_command);
 8002870:	4804      	ldr	r0, [pc, #16]	; (8002884 <SetSocket+0x70>)
 8002872:	f7ff fd7f 	bl	8002374 <SendSPICommand>
}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	003d3050 	.word	0x003d3050
 8002884:	20004f64 	.word	0x20004f64
 8002888:	20000020 	.word	0x20000020
 800288c:	20000024 	.word	0x20000024

08002890 <SetProtocol>:

void SetProtocol(char *protocol)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
	uint8_t checkReady;
	char command[] = "P1=";
 8002898:	4b18      	ldr	r3, [pc, #96]	; (80028fc <SetProtocol+0x6c>)
 800289a:	60bb      	str	r3, [r7, #8]

	strcpy(full_command, command);
 800289c:	f107 0308 	add.w	r3, r7, #8
 80028a0:	4619      	mov	r1, r3
 80028a2:	4817      	ldr	r0, [pc, #92]	; (8002900 <SetProtocol+0x70>)
 80028a4:	f008 fe93 	bl	800b5ce <strcpy>
	strcat(full_command, protocol);
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4815      	ldr	r0, [pc, #84]	; (8002900 <SetProtocol+0x70>)
 80028ac:	f008 fe80 	bl	800b5b0 <strcat>
	strcat(full_command, CR);
 80028b0:	4b14      	ldr	r3, [pc, #80]	; (8002904 <SetProtocol+0x74>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4619      	mov	r1, r3
 80028b6:	4812      	ldr	r0, [pc, #72]	; (8002900 <SetProtocol+0x70>)
 80028b8:	f008 fe7a 	bl	800b5b0 <strcat>

	int totalLength = strlen(full_command);
 80028bc:	4810      	ldr	r0, [pc, #64]	; (8002900 <SetProtocol+0x70>)
 80028be:	f7fd fcaf 	bl	8000220 <strlen>
 80028c2:	4603      	mov	r3, r0
 80028c4:	60fb      	str	r3, [r7, #12]
//	printf("total length before = %d", totalLength);
	if(totalLength % 2 == 1)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	bfb8      	it	lt
 80028d0:	425b      	neglt	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d105      	bne.n	80028e2 <SetProtocol+0x52>
	{
		strcat(full_command, NL);
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <SetProtocol+0x78>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4619      	mov	r1, r3
 80028dc:	4808      	ldr	r0, [pc, #32]	; (8002900 <SetProtocol+0x70>)
 80028de:	f008 fe67 	bl	800b5b0 <strcat>
	}
	totalLength = strlen(full_command);
 80028e2:	4807      	ldr	r0, [pc, #28]	; (8002900 <SetProtocol+0x70>)
 80028e4:	f7fd fc9c 	bl	8000220 <strlen>
 80028e8:	4603      	mov	r3, r0
 80028ea:	60fb      	str	r3, [r7, #12]
//	printf("total length after = %d", totalLength);

	SendSPICommand(full_command);
 80028ec:	4804      	ldr	r0, [pc, #16]	; (8002900 <SetProtocol+0x70>)
 80028ee:	f7ff fd41 	bl	8002374 <SendSPICommand>
}
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	003d3150 	.word	0x003d3150
 8002900:	20004f64 	.word	0x20004f64
 8002904:	20000020 	.word	0x20000020
 8002908:	20000024 	.word	0x20000024

0800290c <SetPort>:

void SetPort(int port)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	uint8_t checkReady;
	char command[] = "P2=";
 8002914:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <SetPort+0x7c>)
 8002916:	613b      	str	r3, [r7, #16]

	strcpy(full_command, command);
 8002918:	f107 0310 	add.w	r3, r7, #16
 800291c:	4619      	mov	r1, r3
 800291e:	481b      	ldr	r0, [pc, #108]	; (800298c <SetPort+0x80>)
 8002920:	f008 fe55 	bl	800b5ce <strcpy>
	char portString[5];
	itoa(port, portString, 10);
 8002924:	f107 0308 	add.w	r3, r7, #8
 8002928:	220a      	movs	r2, #10
 800292a:	4619      	mov	r1, r3
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f008 fcf5 	bl	800b31c <itoa>
	strcat(full_command, portString);
 8002932:	f107 0308 	add.w	r3, r7, #8
 8002936:	4619      	mov	r1, r3
 8002938:	4814      	ldr	r0, [pc, #80]	; (800298c <SetPort+0x80>)
 800293a:	f008 fe39 	bl	800b5b0 <strcat>
	strcat(full_command, CR);
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <SetPort+0x84>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4619      	mov	r1, r3
 8002944:	4811      	ldr	r0, [pc, #68]	; (800298c <SetPort+0x80>)
 8002946:	f008 fe33 	bl	800b5b0 <strcat>

	int totalLength = strlen(full_command);
 800294a:	4810      	ldr	r0, [pc, #64]	; (800298c <SetPort+0x80>)
 800294c:	f7fd fc68 	bl	8000220 <strlen>
 8002950:	4603      	mov	r3, r0
 8002952:	617b      	str	r3, [r7, #20]
//	printf("total length before = %d", totalLength);
	if(totalLength % 2 == 1)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	bfb8      	it	lt
 800295e:	425b      	neglt	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	d105      	bne.n	8002970 <SetPort+0x64>
	{
		strcat(full_command, NL);
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <SetPort+0x88>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	4808      	ldr	r0, [pc, #32]	; (800298c <SetPort+0x80>)
 800296c:	f008 fe20 	bl	800b5b0 <strcat>
	}
	totalLength = strlen(full_command);
 8002970:	4806      	ldr	r0, [pc, #24]	; (800298c <SetPort+0x80>)
 8002972:	f7fd fc55 	bl	8000220 <strlen>
 8002976:	4603      	mov	r3, r0
 8002978:	617b      	str	r3, [r7, #20]
//	printf("total length after = %d", totalLength);

	SendSPICommand(full_command);
 800297a:	4804      	ldr	r0, [pc, #16]	; (800298c <SetPort+0x80>)
 800297c:	f7ff fcfa 	bl	8002374 <SendSPICommand>
}
 8002980:	bf00      	nop
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	003d3250 	.word	0x003d3250
 800298c:	20004f64 	.word	0x20004f64
 8002990:	20000020 	.word	0x20000020
 8002994:	20000024 	.word	0x20000024

08002998 <StartTCPComm>:

void StartTCPComm()
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
	uint8_t checkReady;
	char command[] = "P5=1";
 800299e:	4a18      	ldr	r2, [pc, #96]	; (8002a00 <StartTCPComm+0x68>)
 80029a0:	1d3b      	adds	r3, r7, #4
 80029a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029a6:	6018      	str	r0, [r3, #0]
 80029a8:	3304      	adds	r3, #4
 80029aa:	7019      	strb	r1, [r3, #0]

	strcpy(full_command, command);
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	4619      	mov	r1, r3
 80029b0:	4814      	ldr	r0, [pc, #80]	; (8002a04 <StartTCPComm+0x6c>)
 80029b2:	f008 fe0c 	bl	800b5ce <strcpy>
	strcat(full_command, CR);
 80029b6:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <StartTCPComm+0x70>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4619      	mov	r1, r3
 80029bc:	4811      	ldr	r0, [pc, #68]	; (8002a04 <StartTCPComm+0x6c>)
 80029be:	f008 fdf7 	bl	800b5b0 <strcat>

	int totalLength = strlen(full_command);
 80029c2:	4810      	ldr	r0, [pc, #64]	; (8002a04 <StartTCPComm+0x6c>)
 80029c4:	f7fd fc2c 	bl	8000220 <strlen>
 80029c8:	4603      	mov	r3, r0
 80029ca:	60fb      	str	r3, [r7, #12]
//	printf("total length before = %d", totalLength);
	if(totalLength % 2 == 1)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	bfb8      	it	lt
 80029d6:	425b      	neglt	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d105      	bne.n	80029e8 <StartTCPComm+0x50>
	{
		strcat(full_command, NL);
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <StartTCPComm+0x74>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4619      	mov	r1, r3
 80029e2:	4808      	ldr	r0, [pc, #32]	; (8002a04 <StartTCPComm+0x6c>)
 80029e4:	f008 fde4 	bl	800b5b0 <strcat>
	}
	totalLength = strlen(full_command);
 80029e8:	4806      	ldr	r0, [pc, #24]	; (8002a04 <StartTCPComm+0x6c>)
 80029ea:	f7fd fc19 	bl	8000220 <strlen>
 80029ee:	4603      	mov	r3, r0
 80029f0:	60fb      	str	r3, [r7, #12]
//	printf("total length after = %d", totalLength);

	SendSPICommand(full_command);
 80029f2:	4804      	ldr	r0, [pc, #16]	; (8002a04 <StartTCPComm+0x6c>)
 80029f4:	f7ff fcbe 	bl	8002374 <SendSPICommand>
}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	0800c480 	.word	0x0800c480
 8002a04:	20004f64 	.word	0x20004f64
 8002a08:	20000020 	.word	0x20000020
 8002a0c:	20000024 	.word	0x20000024

08002a10 <StartJoinNetwork>:
	SendSPICommand(full_command);
}


void StartJoinNetwork(char *ssid, char *pw)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
	SetProductName("devin_test_simple");
 8002a1a:	480a      	ldr	r0, [pc, #40]	; (8002a44 <StartJoinNetwork+0x34>)
 8002a1c:	f7ff fd86 	bl	800252c <SetProductName>
	SetAPSSID(ssid);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff fdc1 	bl	80025a8 <SetAPSSID>
	SetAPPassword(pw);
 8002a26:	6838      	ldr	r0, [r7, #0]
 8002a28:	f7ff fdfc 	bl	8002624 <SetAPPassword>
	SetAPSecurityMode("3");
 8002a2c:	4806      	ldr	r0, [pc, #24]	; (8002a48 <StartJoinNetwork+0x38>)
 8002a2e:	f7ff fe37 	bl	80026a0 <SetAPSecurityMode>
	SetDHCPSetting("1");
 8002a32:	4806      	ldr	r0, [pc, #24]	; (8002a4c <StartJoinNetwork+0x3c>)
 8002a34:	f7ff fe72 	bl	800271c <SetDHCPSetting>
	JoinNetwork();
 8002a38:	f7ff feae 	bl	8002798 <JoinNetwork>
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	0800c490 	.word	0x0800c490
 8002a48:	0800c4a4 	.word	0x0800c4a4
 8002a4c:	0800c4a8 	.word	0x0800c4a8

08002a50 <GetStatus>:

void GetStatus()
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
	//	while(true)
	//	{
	//		GetSPIResponse();
	//	}
		printf("poll for data start\r\n");
 8002a56:	481c      	ldr	r0, [pc, #112]	; (8002ac8 <GetStatus+0x78>)
 8002a58:	f008 fd92 	bl	800b580 <puts>

		uint8_t checkReady;
		char command[] = "P?";
 8002a5c:	4a1b      	ldr	r2, [pc, #108]	; (8002acc <GetStatus+0x7c>)
 8002a5e:	463b      	mov	r3, r7
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	4611      	mov	r1, r2
 8002a64:	8019      	strh	r1, [r3, #0]
 8002a66:	3302      	adds	r3, #2
 8002a68:	0c12      	lsrs	r2, r2, #16
 8002a6a:	701a      	strb	r2, [r3, #0]

		strcpy(full_command, command);
 8002a6c:	463b      	mov	r3, r7
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4817      	ldr	r0, [pc, #92]	; (8002ad0 <GetStatus+0x80>)
 8002a72:	f008 fdac 	bl	800b5ce <strcpy>
		strcat(full_command, CR);
 8002a76:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <GetStatus+0x84>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4814      	ldr	r0, [pc, #80]	; (8002ad0 <GetStatus+0x80>)
 8002a7e:	f008 fd97 	bl	800b5b0 <strcat>

		int totalLength = strlen(full_command);
 8002a82:	4813      	ldr	r0, [pc, #76]	; (8002ad0 <GetStatus+0x80>)
 8002a84:	f7fd fbcc 	bl	8000220 <strlen>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	607b      	str	r3, [r7, #4]
	//	printf("total length before = %d", totalLength);
		if(totalLength % 2 == 1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	bfb8      	it	lt
 8002a96:	425b      	neglt	r3, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d105      	bne.n	8002aa8 <GetStatus+0x58>
		{
			strcat(full_command, NL);
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <GetStatus+0x88>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	480b      	ldr	r0, [pc, #44]	; (8002ad0 <GetStatus+0x80>)
 8002aa4:	f008 fd84 	bl	800b5b0 <strcat>
		}
		totalLength = strlen(full_command);
 8002aa8:	4809      	ldr	r0, [pc, #36]	; (8002ad0 <GetStatus+0x80>)
 8002aaa:	f7fd fbb9 	bl	8000220 <strlen>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	607b      	str	r3, [r7, #4]
	//	printf("total length after = %d", totalLength);

		SendSPICommand(full_command);
 8002ab2:	4807      	ldr	r0, [pc, #28]	; (8002ad0 <GetStatus+0x80>)
 8002ab4:	f7ff fc5e 	bl	8002374 <SendSPICommand>
		printf("poll for data end\r\n");
 8002ab8:	4808      	ldr	r0, [pc, #32]	; (8002adc <GetStatus+0x8c>)
 8002aba:	f008 fd61 	bl	800b580 <puts>

	//	while(true)
	//	{
	//		GetSPIResponse();
	//	}
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	0800c4ac 	.word	0x0800c4ac
 8002acc:	0800c4d8 	.word	0x0800c4d8
 8002ad0:	20004f64 	.word	0x20004f64
 8002ad4:	20000020 	.word	0x20000020
 8002ad8:	20000024 	.word	0x20000024
 8002adc:	0800c4c4 	.word	0x0800c4c4

08002ae0 <GetData>:

void GetData()
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
	//	while(true)
	//	{
	//		GetSPIResponse();
	//	}
		printf("poll for data start\r\n");
 8002ae6:	481c      	ldr	r0, [pc, #112]	; (8002b58 <GetData+0x78>)
 8002ae8:	f008 fd4a 	bl	800b580 <puts>

		uint8_t checkReady;
		char command[] = "R0";
 8002aec:	4a1b      	ldr	r2, [pc, #108]	; (8002b5c <GetData+0x7c>)
 8002aee:	463b      	mov	r3, r7
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	4611      	mov	r1, r2
 8002af4:	8019      	strh	r1, [r3, #0]
 8002af6:	3302      	adds	r3, #2
 8002af8:	0c12      	lsrs	r2, r2, #16
 8002afa:	701a      	strb	r2, [r3, #0]

		strcpy(full_command, command);
 8002afc:	463b      	mov	r3, r7
 8002afe:	4619      	mov	r1, r3
 8002b00:	4817      	ldr	r0, [pc, #92]	; (8002b60 <GetData+0x80>)
 8002b02:	f008 fd64 	bl	800b5ce <strcpy>
		strcat(full_command, CR);
 8002b06:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <GetData+0x84>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4814      	ldr	r0, [pc, #80]	; (8002b60 <GetData+0x80>)
 8002b0e:	f008 fd4f 	bl	800b5b0 <strcat>

		int totalLength = strlen(full_command);
 8002b12:	4813      	ldr	r0, [pc, #76]	; (8002b60 <GetData+0x80>)
 8002b14:	f7fd fb84 	bl	8000220 <strlen>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	607b      	str	r3, [r7, #4]
	//	printf("total length before = %d", totalLength);
		if(totalLength % 2 == 1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	bfb8      	it	lt
 8002b26:	425b      	neglt	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d105      	bne.n	8002b38 <GetData+0x58>
		{
			strcat(full_command, NL);
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <GetData+0x88>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4619      	mov	r1, r3
 8002b32:	480b      	ldr	r0, [pc, #44]	; (8002b60 <GetData+0x80>)
 8002b34:	f008 fd3c 	bl	800b5b0 <strcat>
		}
		totalLength = strlen(full_command);
 8002b38:	4809      	ldr	r0, [pc, #36]	; (8002b60 <GetData+0x80>)
 8002b3a:	f7fd fb71 	bl	8000220 <strlen>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	607b      	str	r3, [r7, #4]
	//	printf("total length after = %d", totalLength);

		SendSPICommand(full_command);
 8002b42:	4807      	ldr	r0, [pc, #28]	; (8002b60 <GetData+0x80>)
 8002b44:	f7ff fc16 	bl	8002374 <SendSPICommand>
		printf("poll for data end\r\n");
 8002b48:	4808      	ldr	r0, [pc, #32]	; (8002b6c <GetData+0x8c>)
 8002b4a:	f008 fd19 	bl	800b580 <puts>

	//	while(true)
	//	{
	//		GetSPIResponse();
	//	}
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	0800c4ac 	.word	0x0800c4ac
 8002b5c:	0800c4dc 	.word	0x0800c4dc
 8002b60:	20004f64 	.word	0x20004f64
 8002b64:	20000020 	.word	0x20000020
 8002b68:	20000024 	.word	0x20000024
 8002b6c:	0800c4c4 	.word	0x0800c4c4

08002b70 <SendResponse>:

void SendResponse()
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
	//	while(true)
	//	{
	//		GetSPIResponse();
	//	}
		printf("poll for data start\r\n");
 8002b76:	481a      	ldr	r0, [pc, #104]	; (8002be0 <SendResponse+0x70>)
 8002b78:	f008 fd02 	bl	800b580 <puts>

		uint8_t checkReady;
		char command[] = "S0\r01256";
 8002b7c:	4a19      	ldr	r2, [pc, #100]	; (8002be4 <SendResponse+0x74>)
 8002b7e:	463b      	mov	r3, r7
 8002b80:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b82:	c303      	stmia	r3!, {r0, r1}
 8002b84:	701a      	strb	r2, [r3, #0]

		strcpy(full_command, command);
 8002b86:	463b      	mov	r3, r7
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4817      	ldr	r0, [pc, #92]	; (8002be8 <SendResponse+0x78>)
 8002b8c:	f008 fd1f 	bl	800b5ce <strcpy>
		strcat(full_command, CR);
 8002b90:	4b16      	ldr	r3, [pc, #88]	; (8002bec <SendResponse+0x7c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4619      	mov	r1, r3
 8002b96:	4814      	ldr	r0, [pc, #80]	; (8002be8 <SendResponse+0x78>)
 8002b98:	f008 fd0a 	bl	800b5b0 <strcat>

		int totalLength = strlen(full_command);
 8002b9c:	4812      	ldr	r0, [pc, #72]	; (8002be8 <SendResponse+0x78>)
 8002b9e:	f7fd fb3f 	bl	8000220 <strlen>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	60fb      	str	r3, [r7, #12]
	//	printf("total length before = %d", totalLength);
		if(totalLength % 2 == 1)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	bfb8      	it	lt
 8002bb0:	425b      	neglt	r3, r3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d105      	bne.n	8002bc2 <SendResponse+0x52>
		{
			strcat(full_command, NL);
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <SendResponse+0x80>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	480a      	ldr	r0, [pc, #40]	; (8002be8 <SendResponse+0x78>)
 8002bbe:	f008 fcf7 	bl	800b5b0 <strcat>
		}
		totalLength = strlen(full_command);
 8002bc2:	4809      	ldr	r0, [pc, #36]	; (8002be8 <SendResponse+0x78>)
 8002bc4:	f7fd fb2c 	bl	8000220 <strlen>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	60fb      	str	r3, [r7, #12]
	//	printf("total length after = %d", totalLength);

		SendSPICommand(full_command);
 8002bcc:	4806      	ldr	r0, [pc, #24]	; (8002be8 <SendResponse+0x78>)
 8002bce:	f7ff fbd1 	bl	8002374 <SendSPICommand>
		printf("poll for data end\r\n");
 8002bd2:	4808      	ldr	r0, [pc, #32]	; (8002bf4 <SendResponse+0x84>)
 8002bd4:	f008 fcd4 	bl	800b580 <puts>

	//	while(true)
	//	{
	//		GetSPIResponse();
	//	}
}
 8002bd8:	bf00      	nop
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	0800c4ac 	.word	0x0800c4ac
 8002be4:	0800c4e0 	.word	0x0800c4e0
 8002be8:	20004f64 	.word	0x20004f64
 8002bec:	20000020 	.word	0x20000020
 8002bf0:	20000024 	.word	0x20000024
 8002bf4:	0800c4c4 	.word	0x0800c4c4

08002bf8 <PollForData>:

void PollForData()
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
	GetStatus();
 8002bfc:	f7ff ff28 	bl	8002a50 <GetStatus>
	GetData();
 8002c00:	f7ff ff6e 	bl	8002ae0 <GetData>
	SendResponse();
 8002c04:	f7ff ffb4 	bl	8002b70 <SendResponse>
	HAL_Delay(500);
 8002c08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c0c:	f000 f8b8 	bl	8002d80 <HAL_Delay>

	PollForData();
 8002c10:	f7ff fff2 	bl	8002bf8 <PollForData>
}
 8002c14:	bf00      	nop
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <StartTCP>:


void StartTCP(int port)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
	SetSocket("0");
 8002c20:	4808      	ldr	r0, [pc, #32]	; (8002c44 <StartTCP+0x2c>)
 8002c22:	f7ff fdf7 	bl	8002814 <SetSocket>
	SetProtocol("0");
 8002c26:	4807      	ldr	r0, [pc, #28]	; (8002c44 <StartTCP+0x2c>)
 8002c28:	f7ff fe32 	bl	8002890 <SetProtocol>
	SetPort(port);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff fe6d 	bl	800290c <SetPort>
	StartTCPComm();
 8002c32:	f7ff feb1 	bl	8002998 <StartTCPComm>
	PollForData();
 8002c36:	f7ff ffdf 	bl	8002bf8 <PollForData>
//	SetSocketToReopen();
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	0800c4ec 	.word	0x0800c4ec

08002c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002c4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c4e:	e003      	b.n	8002c58 <LoopCopyDataInit>

08002c50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c56:	3104      	adds	r1, #4

08002c58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c58:	480b      	ldr	r0, [pc, #44]	; (8002c88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c60:	d3f6      	bcc.n	8002c50 <CopyDataInit>
  ldr  r2, =_sbss
 8002c62:	4a0b      	ldr	r2, [pc, #44]	; (8002c90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c64:	e002      	b.n	8002c6c <LoopFillZerobss>

08002c66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002c66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c68:	f842 3b04 	str.w	r3, [r2], #4

08002c6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c6c:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c70:	d3f9      	bcc.n	8002c66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c72:	f7ff fa71 	bl	8002158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c76:	f008 fb15 	bl	800b2a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c7a:	f7fd fd13 	bl	80006a4 <main>
  bx  lr    
 8002c7e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002c80:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002c84:	0800ca7c 	.word	0x0800ca7c
  ldr  r0, =_sdata
 8002c88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c8c:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8002c90:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8002c94:	20007530 	.word	0x20007530

08002c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c98:	e7fe      	b.n	8002c98 <ADC_IRQHandler>
	...

08002c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ca0:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <HAL_Init+0x40>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0d      	ldr	r2, [pc, #52]	; (8002cdc <HAL_Init+0x40>)
 8002ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cac:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <HAL_Init+0x40>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <HAL_Init+0x40>)
 8002cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <HAL_Init+0x40>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a07      	ldr	r2, [pc, #28]	; (8002cdc <HAL_Init+0x40>)
 8002cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc4:	2003      	movs	r0, #3
 8002cc6:	f000 fbbf 	bl	8003448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f000 f808 	bl	8002ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cd0:	f7fe fc62 	bl	8001598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023c00 	.word	0x40023c00

08002ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ce8:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <HAL_InitTick+0x54>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <HAL_InitTick+0x58>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fbd7 	bl	80034b2 <HAL_SYSTICK_Config>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e00e      	b.n	8002d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b0f      	cmp	r3, #15
 8002d12:	d80a      	bhi.n	8002d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d14:	2200      	movs	r2, #0
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1c:	f000 fb9f 	bl	800345e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d20:	4a06      	ldr	r2, [pc, #24]	; (8002d3c <HAL_InitTick+0x5c>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e000      	b.n	8002d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	2000001c 	.word	0x2000001c
 8002d38:	2000002c 	.word	0x2000002c
 8002d3c:	20000028 	.word	0x20000028

08002d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <HAL_IncTick+0x20>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <HAL_IncTick+0x24>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <HAL_IncTick+0x24>)
 8002d52:	6013      	str	r3, [r2, #0]
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	2000002c 	.word	0x2000002c
 8002d64:	200054b8 	.word	0x200054b8

08002d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <HAL_GetTick+0x14>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	200054b8 	.word	0x200054b8

08002d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d88:	f7ff ffee 	bl	8002d68 <HAL_GetTick>
 8002d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d005      	beq.n	8002da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_Delay+0x40>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4413      	add	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002da6:	bf00      	nop
 8002da8:	f7ff ffde 	bl	8002d68 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d8f7      	bhi.n	8002da8 <HAL_Delay+0x28>
  {
  }
}
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	2000002c 	.word	0x2000002c

08002dc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e033      	b.n	8002e42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fe fc00 	bl	80015e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d118      	bne.n	8002e34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e0a:	f023 0302 	bic.w	r3, r3, #2
 8002e0e:	f043 0202 	orr.w	r2, r3, #2
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f94a 	bl	80030b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f023 0303 	bic.w	r3, r3, #3
 8002e2a:	f043 0201 	orr.w	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40
 8002e32:	e001      	b.n	8002e38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x1c>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e113      	b.n	8003090 <HAL_ADC_ConfigChannel+0x244>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b09      	cmp	r3, #9
 8002e76:	d925      	bls.n	8002ec4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68d9      	ldr	r1, [r3, #12]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	461a      	mov	r2, r3
 8002e86:	4613      	mov	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3b1e      	subs	r3, #30
 8002e8e:	2207      	movs	r2, #7
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43da      	mvns	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	400a      	ands	r2, r1
 8002e9c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68d9      	ldr	r1, [r3, #12]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	4618      	mov	r0, r3
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4403      	add	r3, r0
 8002eb6:	3b1e      	subs	r3, #30
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	e022      	b.n	8002f0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6919      	ldr	r1, [r3, #16]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	2207      	movs	r2, #7
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	400a      	ands	r2, r1
 8002ee6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6919      	ldr	r1, [r3, #16]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	4618      	mov	r0, r3
 8002efa:	4603      	mov	r3, r0
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	4403      	add	r3, r0
 8002f00:	409a      	lsls	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b06      	cmp	r3, #6
 8002f10:	d824      	bhi.n	8002f5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	3b05      	subs	r3, #5
 8002f24:	221f      	movs	r2, #31
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43da      	mvns	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	400a      	ands	r2, r1
 8002f32:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	4618      	mov	r0, r3
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3b05      	subs	r3, #5
 8002f4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	635a      	str	r2, [r3, #52]	; 0x34
 8002f5a:	e04c      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b0c      	cmp	r3, #12
 8002f62:	d824      	bhi.n	8002fae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	3b23      	subs	r3, #35	; 0x23
 8002f76:	221f      	movs	r2, #31
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43da      	mvns	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	400a      	ands	r2, r1
 8002f84:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	4618      	mov	r0, r3
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3b23      	subs	r3, #35	; 0x23
 8002fa0:	fa00 f203 	lsl.w	r2, r0, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
 8002fac:	e023      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3b41      	subs	r3, #65	; 0x41
 8002fc0:	221f      	movs	r2, #31
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	400a      	ands	r2, r1
 8002fce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	4618      	mov	r0, r3
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3b41      	subs	r3, #65	; 0x41
 8002fea:	fa00 f203 	lsl.w	r2, r0, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ff6:	4b29      	ldr	r3, [pc, #164]	; (800309c <HAL_ADC_ConfigChannel+0x250>)
 8002ff8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a28      	ldr	r2, [pc, #160]	; (80030a0 <HAL_ADC_ConfigChannel+0x254>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d10f      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x1d8>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b12      	cmp	r3, #18
 800300a:	d10b      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <HAL_ADC_ConfigChannel+0x254>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d12b      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x23a>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a1c      	ldr	r2, [pc, #112]	; (80030a4 <HAL_ADC_ConfigChannel+0x258>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d003      	beq.n	8003040 <HAL_ADC_ConfigChannel+0x1f4>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b11      	cmp	r3, #17
 800303e:	d122      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a11      	ldr	r2, [pc, #68]	; (80030a4 <HAL_ADC_ConfigChannel+0x258>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d111      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003062:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <HAL_ADC_ConfigChannel+0x25c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a11      	ldr	r2, [pc, #68]	; (80030ac <HAL_ADC_ConfigChannel+0x260>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	0c9a      	lsrs	r2, r3, #18
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003078:	e002      	b.n	8003080 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	3b01      	subs	r3, #1
 800307e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f9      	bne.n	800307a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	40012300 	.word	0x40012300
 80030a0:	40012000 	.word	0x40012000
 80030a4:	10000012 	.word	0x10000012
 80030a8:	2000001c 	.word	0x2000001c
 80030ac:	431bde83 	.word	0x431bde83

080030b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030b8:	4b79      	ldr	r3, [pc, #484]	; (80032a0 <ADC_Init+0x1f0>)
 80030ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	431a      	orrs	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6859      	ldr	r1, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	021a      	lsls	r2, r3, #8
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003108:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6859      	ldr	r1, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800312a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6899      	ldr	r1, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003142:	4a58      	ldr	r2, [pc, #352]	; (80032a4 <ADC_Init+0x1f4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d022      	beq.n	800318e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003156:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6899      	ldr	r1, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003178:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6899      	ldr	r1, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	e00f      	b.n	80031ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800319c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0202 	bic.w	r2, r2, #2
 80031bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6899      	ldr	r1, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	7e1b      	ldrb	r3, [r3, #24]
 80031c8:	005a      	lsls	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01b      	beq.n	8003214 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6859      	ldr	r1, [r3, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	3b01      	subs	r3, #1
 8003208:	035a      	lsls	r2, r3, #13
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	e007      	b.n	8003224 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003222:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003232:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	3b01      	subs	r3, #1
 8003240:	051a      	lsls	r2, r3, #20
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003258:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6899      	ldr	r1, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003266:	025a      	lsls	r2, r3, #9
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6899      	ldr	r1, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	029a      	lsls	r2, r3, #10
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	609a      	str	r2, [r3, #8]
}
 8003294:	bf00      	nop
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	40012300 	.word	0x40012300
 80032a4:	0f000001 	.word	0x0f000001

080032a8 <__NVIC_SetPriorityGrouping>:
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032b8:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <__NVIC_SetPriorityGrouping+0x44>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032c4:	4013      	ands	r3, r2
 80032c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032da:	4a04      	ldr	r2, [pc, #16]	; (80032ec <__NVIC_SetPriorityGrouping+0x44>)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	60d3      	str	r3, [r2, #12]
}
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <__NVIC_GetPriorityGrouping>:
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032f4:	4b04      	ldr	r3, [pc, #16]	; (8003308 <__NVIC_GetPriorityGrouping+0x18>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	0a1b      	lsrs	r3, r3, #8
 80032fa:	f003 0307 	and.w	r3, r3, #7
}
 80032fe:	4618      	mov	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <__NVIC_EnableIRQ>:
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331a:	2b00      	cmp	r3, #0
 800331c:	db0b      	blt.n	8003336 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	f003 021f 	and.w	r2, r3, #31
 8003324:	4907      	ldr	r1, [pc, #28]	; (8003344 <__NVIC_EnableIRQ+0x38>)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	2001      	movs	r0, #1
 800332e:	fa00 f202 	lsl.w	r2, r0, r2
 8003332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	e000e100 	.word	0xe000e100

08003348 <__NVIC_SetPriority>:
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	6039      	str	r1, [r7, #0]
 8003352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003358:	2b00      	cmp	r3, #0
 800335a:	db0a      	blt.n	8003372 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	490c      	ldr	r1, [pc, #48]	; (8003394 <__NVIC_SetPriority+0x4c>)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	0112      	lsls	r2, r2, #4
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	440b      	add	r3, r1
 800336c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003370:	e00a      	b.n	8003388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	b2da      	uxtb	r2, r3
 8003376:	4908      	ldr	r1, [pc, #32]	; (8003398 <__NVIC_SetPriority+0x50>)
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	3b04      	subs	r3, #4
 8003380:	0112      	lsls	r2, r2, #4
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	440b      	add	r3, r1
 8003386:	761a      	strb	r2, [r3, #24]
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000e100 	.word	0xe000e100
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <NVIC_EncodePriority>:
{
 800339c:	b480      	push	{r7}
 800339e:	b089      	sub	sp, #36	; 0x24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f1c3 0307 	rsb	r3, r3, #7
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	bf28      	it	cs
 80033ba:	2304      	movcs	r3, #4
 80033bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	3304      	adds	r3, #4
 80033c2:	2b06      	cmp	r3, #6
 80033c4:	d902      	bls.n	80033cc <NVIC_EncodePriority+0x30>
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3b03      	subs	r3, #3
 80033ca:	e000      	b.n	80033ce <NVIC_EncodePriority+0x32>
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d0:	f04f 32ff 	mov.w	r2, #4294967295
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43da      	mvns	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	401a      	ands	r2, r3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e4:	f04f 31ff 	mov.w	r1, #4294967295
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	fa01 f303 	lsl.w	r3, r1, r3
 80033ee:	43d9      	mvns	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f4:	4313      	orrs	r3, r2
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3724      	adds	r7, #36	; 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <SysTick_Config>:
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003414:	d301      	bcc.n	800341a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003416:	2301      	movs	r3, #1
 8003418:	e00f      	b.n	800343a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341a:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <SysTick_Config+0x40>)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003422:	210f      	movs	r1, #15
 8003424:	f04f 30ff 	mov.w	r0, #4294967295
 8003428:	f7ff ff8e 	bl	8003348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <SysTick_Config+0x40>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003432:	4b04      	ldr	r3, [pc, #16]	; (8003444 <SysTick_Config+0x40>)
 8003434:	2207      	movs	r2, #7
 8003436:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	e000e010 	.word	0xe000e010

08003448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ff29 	bl	80032a8 <__NVIC_SetPriorityGrouping>
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	4603      	mov	r3, r0
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003470:	f7ff ff3e 	bl	80032f0 <__NVIC_GetPriorityGrouping>
 8003474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	6978      	ldr	r0, [r7, #20]
 800347c:	f7ff ff8e 	bl	800339c <NVIC_EncodePriority>
 8003480:	4602      	mov	r2, r0
 8003482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003486:	4611      	mov	r1, r2
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff5d 	bl	8003348 <__NVIC_SetPriority>
}
 800348e:	bf00      	nop
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	4603      	mov	r3, r0
 800349e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff ff31 	bl	800330c <__NVIC_EnableIRQ>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ffa2 	bl	8003404 <SysTick_Config>
 80034c0:	4603      	mov	r3, r0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e014      	b.n	8003506 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	791b      	ldrb	r3, [r3, #4]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d105      	bne.n	80034f2 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7fe f8f7 	bl	80016e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2202      	movs	r2, #2
 80034f6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800350e:	b480      	push	{r7}
 8003510:	b087      	sub	sp, #28
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	2300      	movs	r3, #0
 8003520:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	795b      	ldrb	r3, [r3, #5]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_DAC_ConfigChannel+0x20>
 800352a:	2302      	movs	r3, #2
 800352c:	e036      	b.n	800359c <HAL_DAC_ConfigChannel+0x8e>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2202      	movs	r2, #2
 8003538:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003542:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4013      	ands	r3, r2
 8003552:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6819      	ldr	r1, [r3, #0]
 800357c:	22c0      	movs	r2, #192	; 0xc0
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43da      	mvns	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	400a      	ands	r2, r1
 800358c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e0cf      	b.n	800375a <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a69      	ldr	r2, [pc, #420]	; (8003764 <HAL_DFSDM_ChannelInit+0x1bc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d00e      	beq.n	80035e2 <HAL_DFSDM_ChannelInit+0x3a>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a67      	ldr	r2, [pc, #412]	; (8003768 <HAL_DFSDM_ChannelInit+0x1c0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d009      	beq.n	80035e2 <HAL_DFSDM_ChannelInit+0x3a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a66      	ldr	r2, [pc, #408]	; (800376c <HAL_DFSDM_ChannelInit+0x1c4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d004      	beq.n	80035e2 <HAL_DFSDM_ChannelInit+0x3a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a64      	ldr	r2, [pc, #400]	; (8003770 <HAL_DFSDM_ChannelInit+0x1c8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d106      	bne.n	80035f0 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 80035e2:	4b64      	ldr	r3, [pc, #400]	; (8003774 <HAL_DFSDM_ChannelInit+0x1cc>)
 80035e4:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 80035e6:	4b64      	ldr	r3, [pc, #400]	; (8003778 <HAL_DFSDM_ChannelInit+0x1d0>)
 80035e8:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 80035ea:	4b5e      	ldr	r3, [pc, #376]	; (8003764 <HAL_DFSDM_ChannelInit+0x1bc>)
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	e005      	b.n	80035fc <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 80035f0:	4b62      	ldr	r3, [pc, #392]	; (800377c <HAL_DFSDM_ChannelInit+0x1d4>)
 80035f2:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 80035f4:	4b62      	ldr	r3, [pc, #392]	; (8003780 <HAL_DFSDM_ChannelInit+0x1d8>)
 80035f6:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 80035f8:	4b62      	ldr	r3, [pc, #392]	; (8003784 <HAL_DFSDM_ChannelInit+0x1dc>)
 80035fa:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f000 faaf 	bl	8003b64 <DFSDM_GetChannelFromInstance>
 8003606:	4603      	mov	r3, r0
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4413      	add	r3, r2
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0a0      	b.n	800375a <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7fe f96b 	bl	80018f4 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d125      	bne.n	800367c <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	431a      	orrs	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	791b      	ldrb	r3, [r3, #4]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d108      	bne.n	8003670 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	3b01      	subs	r3, #1
 8003668:	041b      	lsls	r3, r3, #16
 800366a:	431a      	orrs	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800368a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6819      	ldr	r1, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800369a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80036a0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 020f 	bic.w	r2, r2, #15
 80036b8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6819      	ldr	r1, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80036e0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6899      	ldr	r1, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	3b01      	subs	r3, #1
 80036f2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f002 0207 	and.w	r2, r2, #7
 800370c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6859      	ldr	r1, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003738:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fa0c 	bl	8003b64 <DFSDM_GetChannelFromInstance>
 800374c:	4603      	mov	r3, r0
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4413      	add	r3, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40016000 	.word	0x40016000
 8003768:	40016020 	.word	0x40016020
 800376c:	40016040 	.word	0x40016040
 8003770:	40016060 	.word	0x40016060
 8003774:	200000e8 	.word	0x200000e8
 8003778:	200000ec 	.word	0x200000ec
 800377c:	200000fc 	.word	0x200000fc
 8003780:	20000100 	.word	0x20000100
 8003784:	40016400 	.word	0x40016400

08003788 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e0d9      	b.n	800394e <HAL_DFSDM_FilterInit+0x1c6>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a6e      	ldr	r2, [pc, #440]	; (8003958 <HAL_DFSDM_FilterInit+0x1d0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d109      	bne.n	80037b8 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d003      	beq.n	80037b4 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0ca      	b.n	800394e <HAL_DFSDM_FilterInit+0x1c6>
  }
#if defined (DFSDM2_Channel0)  
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a67      	ldr	r2, [pc, #412]	; (800395c <HAL_DFSDM_FilterInit+0x1d4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d109      	bne.n	80037d6 <HAL_DFSDM_FilterInit+0x4e>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d003      	beq.n	80037d2 <HAL_DFSDM_FilterInit+0x4a>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_DFSDM_FilterInit+0x4e>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e0bb      	b.n	800394e <HAL_DFSDM_FilterInit+0x1c6>
  }  
#endif /* DFSDM2_Channel0 */
       
  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1U;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1U;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7fd ffba 	bl	8001768 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003802:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	7a1b      	ldrb	r3, [r3, #8]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d108      	bne.n	800381e <HAL_DFSDM_FilterInit+0x96>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e007      	b.n	800382e <HAL_DFSDM_FilterInit+0xa6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800382c:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	7a5b      	ldrb	r3, [r3, #9]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d108      	bne.n	8003848 <HAL_DFSDM_FilterInit+0xc0>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	e007      	b.n	8003858 <HAL_DFSDM_FilterInit+0xd0>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003856:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8003866:	f023 0308 	bic.w	r3, r3, #8
 800386a:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d108      	bne.n	8003886 <HAL_DFSDM_FilterInit+0xfe>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6819      	ldr	r1, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	7c1b      	ldrb	r3, [r3, #16]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d108      	bne.n	80038a0 <HAL_DFSDM_FilterInit+0x118>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0210 	orr.w	r2, r2, #16
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	e007      	b.n	80038b0 <HAL_DFSDM_FilterInit+0x128>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0210 	bic.w	r2, r2, #16
 80038ae:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	7c5b      	ldrb	r3, [r3, #17]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d108      	bne.n	80038ca <HAL_DFSDM_FilterInit+0x142>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0220 	orr.w	r2, r2, #32
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	e007      	b.n	80038da <HAL_DFSDM_FilterInit+0x152>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0220 	bic.w	r2, r2, #32
 80038d8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80038e8:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80038ec:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6959      	ldr	r1, [r3, #20]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003900:	431a      	orrs	r2, r3
                                     (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003908:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	7c1a      	ldrb	r2, [r3, #16]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40016100 	.word	0x40016100
 800395c:	40016500 	.word	0x40016500

08003960 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d02e      	beq.n	80039d8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8003980:	2bff      	cmp	r3, #255	; 0xff
 8003982:	d029      	beq.n	80039d8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003996:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d10d      	bne.n	80039ba <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	021b      	lsls	r3, r3, #8
 80039a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80039ac:	431a      	orrs	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	e00a      	b.n	80039d0 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6819      	ldr	r1, [r3, #0]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30
 80039d6:	e001      	b.n	80039dc <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }  
  else
  {
    status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0U))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d102      	bne.n	8003a0e <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	75fb      	strb	r3, [r7, #23]
 8003a0c:	e066      	b.n	8003adc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a1c:	d002      	beq.n	8003a24 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	75fb      	strb	r3, [r7, #23]
 8003a22:	e05b      	b.n	8003adc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10e      	bne.n	8003a4a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a38:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d105      	bne.n	8003a4a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d002      	beq.n	8003a4a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1U))
  {
    status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	75fb      	strb	r3, [r7, #23]
 8003a48:	e048      	b.n	8003adc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10c      	bne.n	8003a6c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d108      	bne.n	8003a6c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5e:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a64:	d102      	bne.n	8003a6c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	75fb      	strb	r3, [r7, #23]
 8003a6a:	e037      	b.n	8003adc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d004      	beq.n	8003a80 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d12b      	bne.n	8003ad8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a84:	4a18      	ldr	r2, [pc, #96]	; (8003ae8 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8003a86:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	4a17      	ldr	r2, [pc, #92]	; (8003aec <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8003a8e:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a9a:	d101      	bne.n	8003aa0 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8003a9c:	4a14      	ldr	r2, [pc, #80]	; (8003af0 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8003a9e:	e000      	b.n	8003aa2 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8003aa0:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	331c      	adds	r3, #28
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f000 f9bc 	bl	8003e34 <HAL_DMA_Start_IT>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d006      	beq.n	8003ad0 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	22ff      	movs	r2, #255	; 0xff
 8003ac6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003ace:	e005      	b.n	8003adc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f8ab 	bl	8003c2c <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003ad6:	e001      	b.n	8003adc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	08003b25 	.word	0x08003b25
 8003aec:	08003b41 	.word	0x08003b41
 8003af0:	08003b09 	.word	0x08003b09

08003af4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdfsdm_filter);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f7fd fb86 	bl	8001228 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8003b1c:	bf00      	nop
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b30:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f7fd fc56 	bl	80013e4 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8003b38:	bf00      	nop
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2203      	movs	r2, #3
 8003b52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f7ff ffcd 	bl	8003af4 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8003b5a:	bf00      	nop
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a24      	ldr	r2, [pc, #144]	; (8003c00 <DFSDM_GetChannelFromInstance+0x9c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d003      	beq.n	8003b7c <DFSDM_GetChannelFromInstance+0x18>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a23      	ldr	r2, [pc, #140]	; (8003c04 <DFSDM_GetChannelFromInstance+0xa0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d102      	bne.n	8003b82 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	e037      	b.n	8003bf2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a20      	ldr	r2, [pc, #128]	; (8003c08 <DFSDM_GetChannelFromInstance+0xa4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d003      	beq.n	8003b92 <DFSDM_GetChannelFromInstance+0x2e>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a1f      	ldr	r2, [pc, #124]	; (8003c0c <DFSDM_GetChannelFromInstance+0xa8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d102      	bne.n	8003b98 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8003b92:	2301      	movs	r3, #1
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	e02c      	b.n	8003bf2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a1d      	ldr	r2, [pc, #116]	; (8003c10 <DFSDM_GetChannelFromInstance+0xac>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d003      	beq.n	8003ba8 <DFSDM_GetChannelFromInstance+0x44>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a1c      	ldr	r2, [pc, #112]	; (8003c14 <DFSDM_GetChannelFromInstance+0xb0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d102      	bne.n	8003bae <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e021      	b.n	8003bf2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a19      	ldr	r2, [pc, #100]	; (8003c18 <DFSDM_GetChannelFromInstance+0xb4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d003      	beq.n	8003bbe <DFSDM_GetChannelFromInstance+0x5a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a18      	ldr	r2, [pc, #96]	; (8003c1c <DFSDM_GetChannelFromInstance+0xb8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d102      	bne.n	8003bc4 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	e016      	b.n	8003bf2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <DFSDM_GetChannelFromInstance+0xbc>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d102      	bne.n	8003bd2 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8003bcc:	2304      	movs	r3, #4
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e00f      	b.n	8003bf2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a13      	ldr	r2, [pc, #76]	; (8003c24 <DFSDM_GetChannelFromInstance+0xc0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d102      	bne.n	8003be0 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8003bda:	2305      	movs	r3, #5
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	e008      	b.n	8003bf2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a11      	ldr	r2, [pc, #68]	; (8003c28 <DFSDM_GetChannelFromInstance+0xc4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d102      	bne.n	8003bee <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8003be8:	2306      	movs	r3, #6
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	e001      	b.n	8003bf2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8003bee:	2307      	movs	r3, #7
 8003bf0:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	40016000 	.word	0x40016000
 8003c04:	40016400 	.word	0x40016400
 8003c08:	40016020 	.word	0x40016020
 8003c0c:	40016420 	.word	0x40016420
 8003c10:	40016040 	.word	0x40016040
 8003c14:	40016440 	.word	0x40016440
 8003c18:	40016060 	.word	0x40016060
 8003c1c:	40016460 	.word	0x40016460
 8003c20:	40016480 	.word	0x40016480
 8003c24:	400164a0 	.word	0x400164a0
 8003c28:	400164c0 	.word	0x400164c0

08003c2c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d108      	bne.n	8003c4e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	e033      	b.n	8003cb6 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0201 	bic.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003c6c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0201 	orr.w	r2, r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d116      	bne.n	8003cb6 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d107      	bne.n	8003ca0 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0202 	orr.w	r2, r2, #2
 8003c9e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d102      	bne.n	8003cb0 <DFSDM_RegConvStart+0x84>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	e000      	b.n	8003cb2 <DFSDM_RegConvStart+0x86>
 8003cb0:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <DFSDM_RegConvStart+0x98>
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	e000      	b.n	8003cc6 <DFSDM_RegConvStart+0x9a>
 8003cc4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ce4:	f7ff f840 	bl	8002d68 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e099      	b.n	8003e28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d14:	e00f      	b.n	8003d36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d16:	f7ff f827 	bl	8002d68 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b05      	cmp	r3, #5
 8003d22:	d908      	bls.n	8003d36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e078      	b.n	8003e28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e8      	bne.n	8003d16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	4b38      	ldr	r3, [pc, #224]	; (8003e30 <HAL_DMA_Init+0x158>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d107      	bne.n	8003da0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f023 0307 	bic.w	r3, r3, #7
 8003db6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d117      	bne.n	8003dfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00e      	beq.n	8003dfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fa6f 	bl	80042c0 <DMA_CheckFifoParam>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2240      	movs	r2, #64	; 0x40
 8003dec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003df6:	2301      	movs	r3, #1
 8003df8:	e016      	b.n	8003e28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fa26 	bl	8004254 <DMA_CalcBaseAndBitshift>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e10:	223f      	movs	r2, #63	; 0x3f
 8003e12:	409a      	lsls	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	e010803f 	.word	0xe010803f

08003e34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_DMA_Start_IT+0x26>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e040      	b.n	8003edc <HAL_DMA_Start_IT+0xa8>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d12f      	bne.n	8003ece <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2202      	movs	r2, #2
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68b9      	ldr	r1, [r7, #8]
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f9b8 	bl	80041f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8c:	223f      	movs	r2, #63	; 0x3f
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0216 	orr.w	r2, r2, #22
 8003ea2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d007      	beq.n	8003ebc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0208 	orr.w	r2, r2, #8
 8003eba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	e005      	b.n	8003eda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ef0:	4b92      	ldr	r3, [pc, #584]	; (800413c <HAL_DMA_IRQHandler+0x258>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a92      	ldr	r2, [pc, #584]	; (8004140 <HAL_DMA_IRQHandler+0x25c>)
 8003ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8003efa:	0a9b      	lsrs	r3, r3, #10
 8003efc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0e:	2208      	movs	r2, #8
 8003f10:	409a      	lsls	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d01a      	beq.n	8003f50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d013      	beq.n	8003f50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0204 	bic.w	r2, r2, #4
 8003f36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f48:	f043 0201 	orr.w	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f54:	2201      	movs	r2, #1
 8003f56:	409a      	lsls	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d012      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00b      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f72:	2201      	movs	r2, #1
 8003f74:	409a      	lsls	r2, r3
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7e:	f043 0202 	orr.w	r2, r3, #2
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8a:	2204      	movs	r2, #4
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d012      	beq.n	8003fbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00b      	beq.n	8003fbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa8:	2204      	movs	r2, #4
 8003faa:	409a      	lsls	r2, r3
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb4:	f043 0204 	orr.w	r2, r3, #4
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d043      	beq.n	8004054 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d03c      	beq.n	8004054 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fde:	2210      	movs	r2, #16
 8003fe0:	409a      	lsls	r2, r3
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d018      	beq.n	8004026 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d108      	bne.n	8004014 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	2b00      	cmp	r3, #0
 8004008:	d024      	beq.n	8004054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	4798      	blx	r3
 8004012:	e01f      	b.n	8004054 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004018:	2b00      	cmp	r3, #0
 800401a:	d01b      	beq.n	8004054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	4798      	blx	r3
 8004024:	e016      	b.n	8004054 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d107      	bne.n	8004044 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0208 	bic.w	r2, r2, #8
 8004042:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004058:	2220      	movs	r2, #32
 800405a:	409a      	lsls	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 808e 	beq.w	8004182 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0310 	and.w	r3, r3, #16
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 8086 	beq.w	8004182 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407a:	2220      	movs	r2, #32
 800407c:	409a      	lsls	r2, r3
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b05      	cmp	r3, #5
 800408c:	d136      	bne.n	80040fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0216 	bic.w	r2, r2, #22
 800409c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695a      	ldr	r2, [r3, #20]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d103      	bne.n	80040be <HAL_DMA_IRQHandler+0x1da>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d007      	beq.n	80040ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0208 	bic.w	r2, r2, #8
 80040cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d2:	223f      	movs	r2, #63	; 0x3f
 80040d4:	409a      	lsls	r2, r3
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d07d      	beq.n	80041ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	4798      	blx	r3
        }
        return;
 80040fa:	e078      	b.n	80041ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d01c      	beq.n	8004144 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d108      	bne.n	800412a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411c:	2b00      	cmp	r3, #0
 800411e:	d030      	beq.n	8004182 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	4798      	blx	r3
 8004128:	e02b      	b.n	8004182 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412e:	2b00      	cmp	r3, #0
 8004130:	d027      	beq.n	8004182 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	4798      	blx	r3
 800413a:	e022      	b.n	8004182 <HAL_DMA_IRQHandler+0x29e>
 800413c:	2000001c 	.word	0x2000001c
 8004140:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10f      	bne.n	8004172 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0210 	bic.w	r2, r2, #16
 8004160:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004186:	2b00      	cmp	r3, #0
 8004188:	d032      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d022      	beq.n	80041dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2205      	movs	r2, #5
 800419a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0201 	bic.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	3301      	adds	r3, #1
 80041b2:	60bb      	str	r3, [r7, #8]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d307      	bcc.n	80041ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1f2      	bne.n	80041ae <HAL_DMA_IRQHandler+0x2ca>
 80041c8:	e000      	b.n	80041cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80041ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	4798      	blx	r3
 80041ec:	e000      	b.n	80041f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80041ee:	bf00      	nop
    }
  }
}
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop

080041f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004214:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b40      	cmp	r3, #64	; 0x40
 8004224:	d108      	bne.n	8004238 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004236:	e007      	b.n	8004248 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	60da      	str	r2, [r3, #12]
}
 8004248:	bf00      	nop
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	3b10      	subs	r3, #16
 8004264:	4a14      	ldr	r2, [pc, #80]	; (80042b8 <DMA_CalcBaseAndBitshift+0x64>)
 8004266:	fba2 2303 	umull	r2, r3, r2, r3
 800426a:	091b      	lsrs	r3, r3, #4
 800426c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800426e:	4a13      	ldr	r2, [pc, #76]	; (80042bc <DMA_CalcBaseAndBitshift+0x68>)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4413      	add	r3, r2
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b03      	cmp	r3, #3
 8004280:	d909      	bls.n	8004296 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800428a:	f023 0303 	bic.w	r3, r3, #3
 800428e:	1d1a      	adds	r2, r3, #4
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	659a      	str	r2, [r3, #88]	; 0x58
 8004294:	e007      	b.n	80042a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800429e:	f023 0303 	bic.w	r3, r3, #3
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	aaaaaaab 	.word	0xaaaaaaab
 80042bc:	0800c550 	.word	0x0800c550

080042c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d11f      	bne.n	800431a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d855      	bhi.n	800438c <DMA_CheckFifoParam+0xcc>
 80042e0:	a201      	add	r2, pc, #4	; (adr r2, 80042e8 <DMA_CheckFifoParam+0x28>)
 80042e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e6:	bf00      	nop
 80042e8:	080042f9 	.word	0x080042f9
 80042ec:	0800430b 	.word	0x0800430b
 80042f0:	080042f9 	.word	0x080042f9
 80042f4:	0800438d 	.word	0x0800438d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d045      	beq.n	8004390 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004308:	e042      	b.n	8004390 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004312:	d13f      	bne.n	8004394 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004318:	e03c      	b.n	8004394 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004322:	d121      	bne.n	8004368 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b03      	cmp	r3, #3
 8004328:	d836      	bhi.n	8004398 <DMA_CheckFifoParam+0xd8>
 800432a:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <DMA_CheckFifoParam+0x70>)
 800432c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004330:	08004341 	.word	0x08004341
 8004334:	08004347 	.word	0x08004347
 8004338:	08004341 	.word	0x08004341
 800433c:	08004359 	.word	0x08004359
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
      break;
 8004344:	e02f      	b.n	80043a6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d024      	beq.n	800439c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004356:	e021      	b.n	800439c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004360:	d11e      	bne.n	80043a0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004366:	e01b      	b.n	80043a0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d902      	bls.n	8004374 <DMA_CheckFifoParam+0xb4>
 800436e:	2b03      	cmp	r3, #3
 8004370:	d003      	beq.n	800437a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004372:	e018      	b.n	80043a6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
      break;
 8004378:	e015      	b.n	80043a6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00e      	beq.n	80043a4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
      break;
 800438a:	e00b      	b.n	80043a4 <DMA_CheckFifoParam+0xe4>
      break;
 800438c:	bf00      	nop
 800438e:	e00a      	b.n	80043a6 <DMA_CheckFifoParam+0xe6>
      break;
 8004390:	bf00      	nop
 8004392:	e008      	b.n	80043a6 <DMA_CheckFifoParam+0xe6>
      break;
 8004394:	bf00      	nop
 8004396:	e006      	b.n	80043a6 <DMA_CheckFifoParam+0xe6>
      break;
 8004398:	bf00      	nop
 800439a:	e004      	b.n	80043a6 <DMA_CheckFifoParam+0xe6>
      break;
 800439c:	bf00      	nop
 800439e:	e002      	b.n	80043a6 <DMA_CheckFifoParam+0xe6>
      break;   
 80043a0:	bf00      	nop
 80043a2:	e000      	b.n	80043a6 <DMA_CheckFifoParam+0xe6>
      break;
 80043a4:	bf00      	nop
    }
  } 
  
  return status; 
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e081      	b.n	80044ca <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d106      	bne.n	80043e0 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fd fb1e 	bl	8001a1c <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2224      	movs	r2, #36	; 0x24
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0201 	bic.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004404:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004414:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d107      	bne.n	800442e <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800442a:	609a      	str	r2, [r3, #8]
 800442c:	e006      	b.n	800443c <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800443a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d104      	bne.n	800444e <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800444c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800445c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004460:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004470:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	ea42 0103 	orr.w	r1, r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	021a      	lsls	r2, r3, #8
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69d9      	ldr	r1, [r3, #28]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1a      	ldr	r2, [r3, #32]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	d138      	bne.n	800455a <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e032      	b.n	800455c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2224      	movs	r2, #36	; 0x24
 8004502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0201 	bic.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004524:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6819      	ldr	r1, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0201 	orr.w	r2, r2, #1
 8004544:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	e000      	b.n	800455c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800455a:	2302      	movs	r3, #2
  }
}
 800455c:	4618      	mov	r0, r3
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004568:	b480      	push	{r7}
 800456a:	b089      	sub	sp, #36	; 0x24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004572:	2300      	movs	r3, #0
 8004574:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004576:	2300      	movs	r3, #0
 8004578:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800457a:	2300      	movs	r3, #0
 800457c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	e165      	b.n	8004850 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004584:	2201      	movs	r2, #1
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4013      	ands	r3, r2
 8004596:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	429a      	cmp	r2, r3
 800459e:	f040 8154 	bne.w	800484a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d00b      	beq.n	80045c2 <HAL_GPIO_Init+0x5a>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d007      	beq.n	80045c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045b6:	2b11      	cmp	r3, #17
 80045b8:	d003      	beq.n	80045c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b12      	cmp	r3, #18
 80045c0:	d130      	bne.n	8004624 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	2203      	movs	r2, #3
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	43db      	mvns	r3, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4013      	ands	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045f8:	2201      	movs	r2, #1
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	43db      	mvns	r3, r3
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	4013      	ands	r3, r2
 8004606:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	091b      	lsrs	r3, r3, #4
 800460e:	f003 0201 	and.w	r2, r3, #1
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	4313      	orrs	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	2203      	movs	r2, #3
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	43db      	mvns	r3, r3
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	4013      	ands	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4313      	orrs	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b02      	cmp	r3, #2
 800465a:	d003      	beq.n	8004664 <HAL_GPIO_Init+0xfc>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b12      	cmp	r3, #18
 8004662:	d123      	bne.n	80046ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	08da      	lsrs	r2, r3, #3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3208      	adds	r2, #8
 800466c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004670:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	220f      	movs	r2, #15
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	43db      	mvns	r3, r3
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	4013      	ands	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4313      	orrs	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	08da      	lsrs	r2, r3, #3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3208      	adds	r2, #8
 80046a6:	69b9      	ldr	r1, [r7, #24]
 80046a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	2203      	movs	r2, #3
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4013      	ands	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 0203 	and.w	r2, r3, #3
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80ae 	beq.w	800484a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ee:	2300      	movs	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	4b5c      	ldr	r3, [pc, #368]	; (8004864 <HAL_GPIO_Init+0x2fc>)
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	4a5b      	ldr	r2, [pc, #364]	; (8004864 <HAL_GPIO_Init+0x2fc>)
 80046f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046fc:	6453      	str	r3, [r2, #68]	; 0x44
 80046fe:	4b59      	ldr	r3, [pc, #356]	; (8004864 <HAL_GPIO_Init+0x2fc>)
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800470a:	4a57      	ldr	r2, [pc, #348]	; (8004868 <HAL_GPIO_Init+0x300>)
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	089b      	lsrs	r3, r3, #2
 8004710:	3302      	adds	r3, #2
 8004712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	220f      	movs	r2, #15
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43db      	mvns	r3, r3
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	4013      	ands	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a4e      	ldr	r2, [pc, #312]	; (800486c <HAL_GPIO_Init+0x304>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d025      	beq.n	8004782 <HAL_GPIO_Init+0x21a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a4d      	ldr	r2, [pc, #308]	; (8004870 <HAL_GPIO_Init+0x308>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d01f      	beq.n	800477e <HAL_GPIO_Init+0x216>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a4c      	ldr	r2, [pc, #304]	; (8004874 <HAL_GPIO_Init+0x30c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d019      	beq.n	800477a <HAL_GPIO_Init+0x212>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a4b      	ldr	r2, [pc, #300]	; (8004878 <HAL_GPIO_Init+0x310>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d013      	beq.n	8004776 <HAL_GPIO_Init+0x20e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a4a      	ldr	r2, [pc, #296]	; (800487c <HAL_GPIO_Init+0x314>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00d      	beq.n	8004772 <HAL_GPIO_Init+0x20a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a49      	ldr	r2, [pc, #292]	; (8004880 <HAL_GPIO_Init+0x318>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d007      	beq.n	800476e <HAL_GPIO_Init+0x206>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a48      	ldr	r2, [pc, #288]	; (8004884 <HAL_GPIO_Init+0x31c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d101      	bne.n	800476a <HAL_GPIO_Init+0x202>
 8004766:	2306      	movs	r3, #6
 8004768:	e00c      	b.n	8004784 <HAL_GPIO_Init+0x21c>
 800476a:	2307      	movs	r3, #7
 800476c:	e00a      	b.n	8004784 <HAL_GPIO_Init+0x21c>
 800476e:	2305      	movs	r3, #5
 8004770:	e008      	b.n	8004784 <HAL_GPIO_Init+0x21c>
 8004772:	2304      	movs	r3, #4
 8004774:	e006      	b.n	8004784 <HAL_GPIO_Init+0x21c>
 8004776:	2303      	movs	r3, #3
 8004778:	e004      	b.n	8004784 <HAL_GPIO_Init+0x21c>
 800477a:	2302      	movs	r3, #2
 800477c:	e002      	b.n	8004784 <HAL_GPIO_Init+0x21c>
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <HAL_GPIO_Init+0x21c>
 8004782:	2300      	movs	r3, #0
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	f002 0203 	and.w	r2, r2, #3
 800478a:	0092      	lsls	r2, r2, #2
 800478c:	4093      	lsls	r3, r2
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004794:	4934      	ldr	r1, [pc, #208]	; (8004868 <HAL_GPIO_Init+0x300>)
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	089b      	lsrs	r3, r3, #2
 800479a:	3302      	adds	r3, #2
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047a2:	4b39      	ldr	r3, [pc, #228]	; (8004888 <HAL_GPIO_Init+0x320>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	43db      	mvns	r3, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4013      	ands	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047c6:	4a30      	ldr	r2, [pc, #192]	; (8004888 <HAL_GPIO_Init+0x320>)
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80047cc:	4b2e      	ldr	r3, [pc, #184]	; (8004888 <HAL_GPIO_Init+0x320>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	43db      	mvns	r3, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4013      	ands	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047f0:	4a25      	ldr	r2, [pc, #148]	; (8004888 <HAL_GPIO_Init+0x320>)
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047f6:	4b24      	ldr	r3, [pc, #144]	; (8004888 <HAL_GPIO_Init+0x320>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	43db      	mvns	r3, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4013      	ands	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800481a:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <HAL_GPIO_Init+0x320>)
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004820:	4b19      	ldr	r3, [pc, #100]	; (8004888 <HAL_GPIO_Init+0x320>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	43db      	mvns	r3, r3
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4013      	ands	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004844:	4a10      	ldr	r2, [pc, #64]	; (8004888 <HAL_GPIO_Init+0x320>)
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	3301      	adds	r3, #1
 800484e:	61fb      	str	r3, [r7, #28]
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	2b0f      	cmp	r3, #15
 8004854:	f67f ae96 	bls.w	8004584 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004858:	bf00      	nop
 800485a:	3724      	adds	r7, #36	; 0x24
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	40023800 	.word	0x40023800
 8004868:	40013800 	.word	0x40013800
 800486c:	40020000 	.word	0x40020000
 8004870:	40020400 	.word	0x40020400
 8004874:	40020800 	.word	0x40020800
 8004878:	40020c00 	.word	0x40020c00
 800487c:	40021000 	.word	0x40021000
 8004880:	40021400 	.word	0x40021400
 8004884:	40021800 	.word	0x40021800
 8004888:	40013c00 	.word	0x40013c00

0800488c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	887b      	ldrh	r3, [r7, #2]
 800489e:	4013      	ands	r3, r2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048a4:	2301      	movs	r3, #1
 80048a6:	73fb      	strb	r3, [r7, #15]
 80048a8:	e001      	b.n	80048ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048aa:	2300      	movs	r3, #0
 80048ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	807b      	strh	r3, [r7, #2]
 80048c8:	4613      	mov	r3, r2
 80048ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048cc:	787b      	ldrb	r3, [r7, #1]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048d2:	887a      	ldrh	r2, [r7, #2]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048d8:	e003      	b.n	80048e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048da:	887b      	ldrh	r3, [r7, #2]
 80048dc:	041a      	lsls	r2, r3, #16
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	619a      	str	r2, [r3, #24]
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
	...

080048f0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80048f8:	f7fe fa36 	bl	8002d68 <HAL_GetTick>
 80048fc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e069      	b.n	80049dc <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10b      	bne.n	800492c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7fd f8c5 	bl	8001aac <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004922:	f241 3188 	movw	r1, #5000	; 0x1388
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f85e 	bl	80049e8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	3b01      	subs	r3, #1
 800493c:	021a      	lsls	r2, r3, #8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	2120      	movs	r1, #32
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f856 	bl	8004a04 <QSPI_WaitFlagStateUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800495c:	7afb      	ldrb	r3, [r7, #11]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d137      	bne.n	80049d2 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800496c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6852      	ldr	r2, [r2, #4]
 8004974:	0611      	lsls	r1, r2, #24
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	68d2      	ldr	r2, [r2, #12]
 800497a:	4311      	orrs	r1, r2
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	69d2      	ldr	r2, [r2, #28]
 8004980:	4311      	orrs	r1, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6a12      	ldr	r2, [r2, #32]
 8004986:	4311      	orrs	r1, r2
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6812      	ldr	r2, [r2, #0]
 800498c:	430b      	orrs	r3, r1
 800498e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <HAL_QSPI_Init+0xf4>)
 8004998:	4013      	ands	r3, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6912      	ldr	r2, [r2, #16]
 800499e:	0411      	lsls	r1, r2, #16
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6952      	ldr	r2, [r2, #20]
 80049a4:	4311      	orrs	r1, r2
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6992      	ldr	r2, [r2, #24]
 80049aa:	4311      	orrs	r1, r2
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	430b      	orrs	r3, r1
 80049b2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80049da:	7afb      	ldrb	r3, [r7, #11]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	ffe0f8fe 	.word	0xffe0f8fe

080049e8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	603b      	str	r3, [r7, #0]
 8004a10:	4613      	mov	r3, r2
 8004a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004a14:	e01a      	b.n	8004a4c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1c:	d016      	beq.n	8004a4c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1e:	f7fe f9a3 	bl	8002d68 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d302      	bcc.n	8004a34 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10b      	bne.n	8004a4c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2204      	movs	r2, #4
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a40:	f043 0201 	orr.w	r2, r3, #1
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e00e      	b.n	8004a6a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4013      	ands	r3, r2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	bf14      	ite	ne
 8004a5a:	2301      	movne	r3, #1
 8004a5c:	2300      	moveq	r3, #0
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	461a      	mov	r2, r3
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d1d6      	bne.n	8004a16 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0cc      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a88:	4b68      	ldr	r3, [pc, #416]	; (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d90c      	bls.n	8004ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a96:	4b65      	ldr	r3, [pc, #404]	; (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9e:	4b63      	ldr	r3, [pc, #396]	; (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0b8      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d020      	beq.n	8004afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ac8:	4b59      	ldr	r3, [pc, #356]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	4a58      	ldr	r2, [pc, #352]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ad2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0308 	and.w	r3, r3, #8
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ae0:	4b53      	ldr	r3, [pc, #332]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	4a52      	ldr	r2, [pc, #328]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aec:	4b50      	ldr	r3, [pc, #320]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	494d      	ldr	r1, [pc, #308]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d044      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b12:	4b47      	ldr	r3, [pc, #284]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d119      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e07f      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d003      	beq.n	8004b32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d107      	bne.n	8004b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b32:	4b3f      	ldr	r3, [pc, #252]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d109      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e06f      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b42:	4b3b      	ldr	r3, [pc, #236]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e067      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b52:	4b37      	ldr	r3, [pc, #220]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f023 0203 	bic.w	r2, r3, #3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4934      	ldr	r1, [pc, #208]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b64:	f7fe f900 	bl	8002d68 <HAL_GetTick>
 8004b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6a:	e00a      	b.n	8004b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b6c:	f7fe f8fc 	bl	8002d68 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e04f      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b82:	4b2b      	ldr	r3, [pc, #172]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 020c 	and.w	r2, r3, #12
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d1eb      	bne.n	8004b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b94:	4b25      	ldr	r3, [pc, #148]	; (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 030f 	and.w	r3, r3, #15
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d20c      	bcs.n	8004bbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba2:	4b22      	ldr	r3, [pc, #136]	; (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004baa:	4b20      	ldr	r3, [pc, #128]	; (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d001      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e032      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d008      	beq.n	8004bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bc8:	4b19      	ldr	r3, [pc, #100]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	4916      	ldr	r1, [pc, #88]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d009      	beq.n	8004bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004be6:	4b12      	ldr	r3, [pc, #72]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	490e      	ldr	r1, [pc, #56]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bfa:	f000 f821 	bl	8004c40 <HAL_RCC_GetSysClockFreq>
 8004bfe:	4601      	mov	r1, r0
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	4a0a      	ldr	r2, [pc, #40]	; (8004c34 <HAL_RCC_ClockConfig+0x1c0>)
 8004c0c:	5cd3      	ldrb	r3, [r2, r3]
 8004c0e:	fa21 f303 	lsr.w	r3, r1, r3
 8004c12:	4a09      	ldr	r2, [pc, #36]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c16:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fe f860 	bl	8002ce0 <HAL_InitTick>

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40023c00 	.word	0x40023c00
 8004c30:	40023800 	.word	0x40023800
 8004c34:	0800c538 	.word	0x0800c538
 8004c38:	2000001c 	.word	0x2000001c
 8004c3c:	20000028 	.word	0x20000028

08004c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	607b      	str	r3, [r7, #4]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c56:	4b50      	ldr	r3, [pc, #320]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x158>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 030c 	and.w	r3, r3, #12
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	d007      	beq.n	8004c72 <HAL_RCC_GetSysClockFreq+0x32>
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d008      	beq.n	8004c78 <HAL_RCC_GetSysClockFreq+0x38>
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f040 808d 	bne.w	8004d86 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c6c:	4b4b      	ldr	r3, [pc, #300]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004c6e:	60bb      	str	r3, [r7, #8]
       break;
 8004c70:	e08c      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c72:	4b4b      	ldr	r3, [pc, #300]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c74:	60bb      	str	r3, [r7, #8]
      break;
 8004c76:	e089      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c78:	4b47      	ldr	r3, [pc, #284]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x158>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c82:	4b45      	ldr	r3, [pc, #276]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x158>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d023      	beq.n	8004cd6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c8e:	4b42      	ldr	r3, [pc, #264]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x158>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	099b      	lsrs	r3, r3, #6
 8004c94:	f04f 0400 	mov.w	r4, #0
 8004c98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	ea03 0501 	and.w	r5, r3, r1
 8004ca4:	ea04 0602 	and.w	r6, r4, r2
 8004ca8:	4a3d      	ldr	r2, [pc, #244]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004caa:	fb02 f106 	mul.w	r1, r2, r6
 8004cae:	2200      	movs	r2, #0
 8004cb0:	fb02 f205 	mul.w	r2, r2, r5
 8004cb4:	440a      	add	r2, r1
 8004cb6:	493a      	ldr	r1, [pc, #232]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004cb8:	fba5 0101 	umull	r0, r1, r5, r1
 8004cbc:	1853      	adds	r3, r2, r1
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f04f 0400 	mov.w	r4, #0
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	4623      	mov	r3, r4
 8004cca:	f7fb fb01 	bl	80002d0 <__aeabi_uldivmod>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	e049      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd6:	4b30      	ldr	r3, [pc, #192]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x158>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	099b      	lsrs	r3, r3, #6
 8004cdc:	f04f 0400 	mov.w	r4, #0
 8004ce0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	ea03 0501 	and.w	r5, r3, r1
 8004cec:	ea04 0602 	and.w	r6, r4, r2
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	4632      	mov	r2, r6
 8004cf4:	f04f 0300 	mov.w	r3, #0
 8004cf8:	f04f 0400 	mov.w	r4, #0
 8004cfc:	0154      	lsls	r4, r2, #5
 8004cfe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d02:	014b      	lsls	r3, r1, #5
 8004d04:	4619      	mov	r1, r3
 8004d06:	4622      	mov	r2, r4
 8004d08:	1b49      	subs	r1, r1, r5
 8004d0a:	eb62 0206 	sbc.w	r2, r2, r6
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	f04f 0400 	mov.w	r4, #0
 8004d16:	0194      	lsls	r4, r2, #6
 8004d18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d1c:	018b      	lsls	r3, r1, #6
 8004d1e:	1a5b      	subs	r3, r3, r1
 8004d20:	eb64 0402 	sbc.w	r4, r4, r2
 8004d24:	f04f 0100 	mov.w	r1, #0
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	00e2      	lsls	r2, r4, #3
 8004d2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d32:	00d9      	lsls	r1, r3, #3
 8004d34:	460b      	mov	r3, r1
 8004d36:	4614      	mov	r4, r2
 8004d38:	195b      	adds	r3, r3, r5
 8004d3a:	eb44 0406 	adc.w	r4, r4, r6
 8004d3e:	f04f 0100 	mov.w	r1, #0
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	02a2      	lsls	r2, r4, #10
 8004d48:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004d4c:	0299      	lsls	r1, r3, #10
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4614      	mov	r4, r2
 8004d52:	4618      	mov	r0, r3
 8004d54:	4621      	mov	r1, r4
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f04f 0400 	mov.w	r4, #0
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	4623      	mov	r3, r4
 8004d60:	f7fb fab6 	bl	80002d0 <__aeabi_uldivmod>
 8004d64:	4603      	mov	r3, r0
 8004d66:	460c      	mov	r4, r1
 8004d68:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d6a:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x158>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	0c1b      	lsrs	r3, r3, #16
 8004d70:	f003 0303 	and.w	r3, r3, #3
 8004d74:	3301      	adds	r3, #1
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d82:	60bb      	str	r3, [r7, #8]
      break;
 8004d84:	e002      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d86:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004d88:	60bb      	str	r3, [r7, #8]
      break;
 8004d8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	00f42400 	.word	0x00f42400
 8004da0:	017d7840 	.word	0x017d7840

08004da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004da8:	4b03      	ldr	r3, [pc, #12]	; (8004db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004daa:	681b      	ldr	r3, [r3, #0]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	2000001c 	.word	0x2000001c

08004dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dc0:	f7ff fff0 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8004dc4:	4601      	mov	r1, r0
 8004dc6:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	0a9b      	lsrs	r3, r3, #10
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	4a03      	ldr	r2, [pc, #12]	; (8004de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dd2:	5cd3      	ldrb	r3, [r2, r3]
 8004dd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	0800c548 	.word	0x0800c548

08004de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004de8:	f7ff ffdc 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8004dec:	4601      	mov	r1, r0
 8004dee:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	0b5b      	lsrs	r3, r3, #13
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	4a03      	ldr	r2, [pc, #12]	; (8004e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dfa:	5cd3      	ldrb	r3, [r2, r3]
 8004dfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40023800 	.word	0x40023800
 8004e08:	0800c548 	.word	0x0800c548

08004e0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d010      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004e30:	4b7a      	ldr	r3, [pc, #488]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e36:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	4977      	ldr	r1, [pc, #476]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d010      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004e5e:	4b6f      	ldr	r3, [pc, #444]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e64:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	496b      	ldr	r1, [pc, #428]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d022      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8004e8c:	4b63      	ldr	r3, [pc, #396]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9a:	4960      	ldr	r1, [pc, #384]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eb6:	d10c      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004eb8:	4b58      	ldr	r3, [pc, #352]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ebe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	021b      	lsls	r3, r3, #8
 8004eca:	4954      	ldr	r1, [pc, #336]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d022      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8004ede:	4b4f      	ldr	r3, [pc, #316]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ee4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eec:	494b      	ldr	r1, [pc, #300]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004efc:	2301      	movs	r3, #1
 8004efe:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f08:	d10c      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004f0a:	4b44      	ldr	r3, [pc, #272]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f10:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	021b      	lsls	r3, r3, #8
 8004f1c:	493f      	ldr	r1, [pc, #252]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 808a 	beq.w	8005046 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	4b39      	ldr	r3, [pc, #228]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	4a38      	ldr	r2, [pc, #224]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f40:	6413      	str	r3, [r2, #64]	; 0x40
 8004f42:	4b36      	ldr	r3, [pc, #216]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f4e:	4b34      	ldr	r3, [pc, #208]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a33      	ldr	r2, [pc, #204]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f5a:	f7fd ff05 	bl	8002d68 <HAL_GetTick>
 8004f5e:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f60:	e008      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f62:	f7fd ff01 	bl	8002d68 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e1d1      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f74:	4b2a      	ldr	r3, [pc, #168]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0f0      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f80:	4b26      	ldr	r3, [pc, #152]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f88:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d02f      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d028      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f9e:	4b1f      	ldr	r3, [pc, #124]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa6:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fa8:	4b1e      	ldr	r3, [pc, #120]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fae:	4b1d      	ldr	r3, [pc, #116]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fb4:	4a19      	ldr	r2, [pc, #100]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fba:	4b18      	ldr	r3, [pc, #96]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d114      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fc6:	f7fd fecf 	bl	8002d68 <HAL_GetTick>
 8004fca:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fcc:	e00a      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fce:	f7fd fecb 	bl	8002d68 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e199      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe4:	4b0d      	ldr	r3, [pc, #52]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0ee      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ffc:	d114      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004ffe:	4b07      	ldr	r3, [pc, #28]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800500e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005012:	4902      	ldr	r1, [pc, #8]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005014:	4313      	orrs	r3, r2
 8005016:	608b      	str	r3, [r1, #8]
 8005018:	e00c      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800501a:	bf00      	nop
 800501c:	40023800 	.word	0x40023800
 8005020:	40007000 	.word	0x40007000
 8005024:	42470e40 	.word	0x42470e40
 8005028:	4b89      	ldr	r3, [pc, #548]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	4a88      	ldr	r2, [pc, #544]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800502e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005032:	6093      	str	r3, [r2, #8]
 8005034:	4b86      	ldr	r3, [pc, #536]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005036:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005040:	4983      	ldr	r1, [pc, #524]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005042:	4313      	orrs	r3, r2
 8005044:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	2b00      	cmp	r3, #0
 8005050:	d004      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8005058:	4b7e      	ldr	r3, [pc, #504]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800505a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0310 	and.w	r3, r3, #16
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005068:	4b79      	ldr	r3, [pc, #484]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800506a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800506e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	4976      	ldr	r1, [pc, #472]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b00      	cmp	r3, #0
 8005088:	d011      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800508a:	4b71      	ldr	r3, [pc, #452]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800508c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005090:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	496d      	ldr	r1, [pc, #436]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050a8:	d101      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80050aa:	2301      	movs	r3, #1
 80050ac:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80050ba:	4b65      	ldr	r3, [pc, #404]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80050bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050c0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c8:	4961      	ldr	r1, [pc, #388]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d004      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b80      	cmp	r3, #128	; 0x80
 80050dc:	f040 80c6 	bne.w	800526c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050e0:	4b5d      	ldr	r3, [pc, #372]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050e6:	f7fd fe3f 	bl	8002d68 <HAL_GetTick>
 80050ea:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050ec:	e008      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050ee:	f7fd fe3b 	bl	8002d68 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e10b      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005100:	4b53      	ldr	r3, [pc, #332]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1f0      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 800510c:	4a53      	ldr	r2, [pc, #332]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005112:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d023      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d019      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005144:	2b00      	cmp	r3, #0
 8005146:	d004      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005150:	d00e      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800515a:	2b00      	cmp	r3, #0
 800515c:	d019      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005162:	2b00      	cmp	r3, #0
 8005164:	d115      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800516e:	d110      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	019b      	lsls	r3, r3, #6
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	061b      	lsls	r3, r3, #24
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	071b      	lsls	r3, r3, #28
 800518a:	4931      	ldr	r1, [pc, #196]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d009      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d026      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d122      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051ba:	4b25      	ldr	r3, [pc, #148]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80051bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c0:	0e1b      	lsrs	r3, r3, #24
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	019b      	lsls	r3, r3, #6
 80051d2:	431a      	orrs	r2, r3
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	061b      	lsls	r3, r3, #24
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	071b      	lsls	r3, r3, #28
 80051e0:	491b      	ldr	r1, [pc, #108]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80051e8:	4b19      	ldr	r3, [pc, #100]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80051ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ee:	f023 021f 	bic.w	r2, r3, #31
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	4915      	ldr	r1, [pc, #84]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005208:	2b00      	cmp	r3, #0
 800520a:	d010      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	019b      	lsls	r3, r3, #6
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	061b      	lsls	r3, r3, #24
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	071b      	lsls	r3, r3, #28
 8005226:	490a      	ldr	r1, [pc, #40]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800522e:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005230:	2201      	movs	r2, #1
 8005232:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005234:	f7fd fd98 	bl	8002d68 <HAL_GetTick>
 8005238:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800523a:	e011      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800523c:	f7fd fd94 	bl	8002d68 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d90a      	bls.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e064      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800524e:	bf00      	nop
 8005250:	40023800 	.word	0x40023800
 8005254:	424711e0 	.word	0x424711e0
 8005258:	42470068 	.word	0x42470068
 800525c:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005260:	4b2f      	ldr	r3, [pc, #188]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0e7      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00a      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005278:	4b29      	ldr	r3, [pc, #164]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800527a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800527e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005286:	4926      	ldr	r1, [pc, #152]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005288:	4313      	orrs	r3, r2
 800528a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800529a:	4b21      	ldr	r3, [pc, #132]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800529c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052a0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a8:	491d      	ldr	r1, [pc, #116]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00a      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80052bc:	4b18      	ldr	r3, [pc, #96]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80052be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ca:	4915      	ldr	r1, [pc, #84]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80052de:	4b10      	ldr	r3, [pc, #64]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80052e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052e4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	490c      	ldr	r1, [pc, #48]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005300:	4b07      	ldr	r3, [pc, #28]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005306:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530e:	4904      	ldr	r1, [pc, #16]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3720      	adds	r7, #32
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40023800 	.word	0x40023800

08005324 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d075      	beq.n	8005428 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800533c:	4ba2      	ldr	r3, [pc, #648]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 030c 	and.w	r3, r3, #12
 8005344:	2b04      	cmp	r3, #4
 8005346:	d00c      	beq.n	8005362 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005348:	4b9f      	ldr	r3, [pc, #636]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005350:	2b08      	cmp	r3, #8
 8005352:	d112      	bne.n	800537a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005354:	4b9c      	ldr	r3, [pc, #624]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005360:	d10b      	bne.n	800537a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005362:	4b99      	ldr	r3, [pc, #612]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d05b      	beq.n	8005426 <HAL_RCC_OscConfig+0x102>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d157      	bne.n	8005426 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e20b      	b.n	8005792 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005382:	d106      	bne.n	8005392 <HAL_RCC_OscConfig+0x6e>
 8005384:	4b90      	ldr	r3, [pc, #576]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a8f      	ldr	r2, [pc, #572]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 800538a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	e01d      	b.n	80053ce <HAL_RCC_OscConfig+0xaa>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800539a:	d10c      	bne.n	80053b6 <HAL_RCC_OscConfig+0x92>
 800539c:	4b8a      	ldr	r3, [pc, #552]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a89      	ldr	r2, [pc, #548]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 80053a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	4b87      	ldr	r3, [pc, #540]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a86      	ldr	r2, [pc, #536]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 80053ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	e00b      	b.n	80053ce <HAL_RCC_OscConfig+0xaa>
 80053b6:	4b84      	ldr	r3, [pc, #528]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a83      	ldr	r2, [pc, #524]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 80053bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	4b81      	ldr	r3, [pc, #516]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a80      	ldr	r2, [pc, #512]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 80053c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d013      	beq.n	80053fe <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d6:	f7fd fcc7 	bl	8002d68 <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053de:	f7fd fcc3 	bl	8002d68 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b64      	cmp	r3, #100	; 0x64
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e1d0      	b.n	8005792 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f0:	4b75      	ldr	r3, [pc, #468]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0f0      	beq.n	80053de <HAL_RCC_OscConfig+0xba>
 80053fc:	e014      	b.n	8005428 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fe:	f7fd fcb3 	bl	8002d68 <HAL_GetTick>
 8005402:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005404:	e008      	b.n	8005418 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005406:	f7fd fcaf 	bl	8002d68 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b64      	cmp	r3, #100	; 0x64
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e1bc      	b.n	8005792 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005418:	4b6b      	ldr	r3, [pc, #428]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1f0      	bne.n	8005406 <HAL_RCC_OscConfig+0xe2>
 8005424:	e000      	b.n	8005428 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005426:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d063      	beq.n	80054fc <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005434:	4b64      	ldr	r3, [pc, #400]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f003 030c 	and.w	r3, r3, #12
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00b      	beq.n	8005458 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005440:	4b61      	ldr	r3, [pc, #388]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005448:	2b08      	cmp	r3, #8
 800544a:	d11c      	bne.n	8005486 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800544c:	4b5e      	ldr	r3, [pc, #376]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d116      	bne.n	8005486 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005458:	4b5b      	ldr	r3, [pc, #364]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <HAL_RCC_OscConfig+0x14c>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d001      	beq.n	8005470 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e190      	b.n	8005792 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005470:	4b55      	ldr	r3, [pc, #340]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	4952      	ldr	r1, [pc, #328]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 8005480:	4313      	orrs	r3, r2
 8005482:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005484:	e03a      	b.n	80054fc <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d020      	beq.n	80054d0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800548e:	4b4f      	ldr	r3, [pc, #316]	; (80055cc <HAL_RCC_OscConfig+0x2a8>)
 8005490:	2201      	movs	r2, #1
 8005492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005494:	f7fd fc68 	bl	8002d68 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800549c:	f7fd fc64 	bl	8002d68 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e171      	b.n	8005792 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ae:	4b46      	ldr	r3, [pc, #280]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ba:	4b43      	ldr	r3, [pc, #268]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	493f      	ldr	r1, [pc, #252]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	600b      	str	r3, [r1, #0]
 80054ce:	e015      	b.n	80054fc <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054d0:	4b3e      	ldr	r3, [pc, #248]	; (80055cc <HAL_RCC_OscConfig+0x2a8>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d6:	f7fd fc47 	bl	8002d68 <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054de:	f7fd fc43 	bl	8002d68 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e150      	b.n	8005792 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054f0:	4b35      	ldr	r3, [pc, #212]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1f0      	bne.n	80054de <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	d030      	beq.n	800556a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d016      	beq.n	800553e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005510:	4b2f      	ldr	r3, [pc, #188]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 8005512:	2201      	movs	r2, #1
 8005514:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005516:	f7fd fc27 	bl	8002d68 <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800551e:	f7fd fc23 	bl	8002d68 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e130      	b.n	8005792 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005530:	4b25      	ldr	r3, [pc, #148]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 8005532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0f0      	beq.n	800551e <HAL_RCC_OscConfig+0x1fa>
 800553c:	e015      	b.n	800556a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800553e:	4b24      	ldr	r3, [pc, #144]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005544:	f7fd fc10 	bl	8002d68 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800554c:	f7fd fc0c 	bl	8002d68 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e119      	b.n	8005792 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800555e:	4b1a      	ldr	r3, [pc, #104]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 8005560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f0      	bne.n	800554c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0304 	and.w	r3, r3, #4
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 809f 	beq.w	80056b6 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005578:	2300      	movs	r3, #0
 800557a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800557c:	4b12      	ldr	r3, [pc, #72]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10f      	bne.n	80055a8 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	4b0e      	ldr	r3, [pc, #56]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	4a0d      	ldr	r2, [pc, #52]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 8005592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005596:	6413      	str	r3, [r2, #64]	; 0x40
 8005598:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <HAL_RCC_OscConfig+0x2a4>)
 800559a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80055a4:	2301      	movs	r3, #1
 80055a6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a8:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <HAL_RCC_OscConfig+0x2b0>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d120      	bne.n	80055f6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055b4:	4b07      	ldr	r3, [pc, #28]	; (80055d4 <HAL_RCC_OscConfig+0x2b0>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a06      	ldr	r2, [pc, #24]	; (80055d4 <HAL_RCC_OscConfig+0x2b0>)
 80055ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055c0:	f7fd fbd2 	bl	8002d68 <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c6:	e010      	b.n	80055ea <HAL_RCC_OscConfig+0x2c6>
 80055c8:	40023800 	.word	0x40023800
 80055cc:	42470000 	.word	0x42470000
 80055d0:	42470e80 	.word	0x42470e80
 80055d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055d8:	f7fd fbc6 	bl	8002d68 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e0d3      	b.n	8005792 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ea:	4b6c      	ldr	r3, [pc, #432]	; (800579c <HAL_RCC_OscConfig+0x478>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0f0      	beq.n	80055d8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d106      	bne.n	800560c <HAL_RCC_OscConfig+0x2e8>
 80055fe:	4b68      	ldr	r3, [pc, #416]	; (80057a0 <HAL_RCC_OscConfig+0x47c>)
 8005600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005602:	4a67      	ldr	r2, [pc, #412]	; (80057a0 <HAL_RCC_OscConfig+0x47c>)
 8005604:	f043 0301 	orr.w	r3, r3, #1
 8005608:	6713      	str	r3, [r2, #112]	; 0x70
 800560a:	e01c      	b.n	8005646 <HAL_RCC_OscConfig+0x322>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2b05      	cmp	r3, #5
 8005612:	d10c      	bne.n	800562e <HAL_RCC_OscConfig+0x30a>
 8005614:	4b62      	ldr	r3, [pc, #392]	; (80057a0 <HAL_RCC_OscConfig+0x47c>)
 8005616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005618:	4a61      	ldr	r2, [pc, #388]	; (80057a0 <HAL_RCC_OscConfig+0x47c>)
 800561a:	f043 0304 	orr.w	r3, r3, #4
 800561e:	6713      	str	r3, [r2, #112]	; 0x70
 8005620:	4b5f      	ldr	r3, [pc, #380]	; (80057a0 <HAL_RCC_OscConfig+0x47c>)
 8005622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005624:	4a5e      	ldr	r2, [pc, #376]	; (80057a0 <HAL_RCC_OscConfig+0x47c>)
 8005626:	f043 0301 	orr.w	r3, r3, #1
 800562a:	6713      	str	r3, [r2, #112]	; 0x70
 800562c:	e00b      	b.n	8005646 <HAL_RCC_OscConfig+0x322>
 800562e:	4b5c      	ldr	r3, [pc, #368]	; (80057a0 <HAL_RCC_OscConfig+0x47c>)
 8005630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005632:	4a5b      	ldr	r2, [pc, #364]	; (80057a0 <HAL_RCC_OscConfig+0x47c>)
 8005634:	f023 0301 	bic.w	r3, r3, #1
 8005638:	6713      	str	r3, [r2, #112]	; 0x70
 800563a:	4b59      	ldr	r3, [pc, #356]	; (80057a0 <HAL_RCC_OscConfig+0x47c>)
 800563c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563e:	4a58      	ldr	r2, [pc, #352]	; (80057a0 <HAL_RCC_OscConfig+0x47c>)
 8005640:	f023 0304 	bic.w	r3, r3, #4
 8005644:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d015      	beq.n	800567a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564e:	f7fd fb8b 	bl	8002d68 <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005654:	e00a      	b.n	800566c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005656:	f7fd fb87 	bl	8002d68 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	f241 3288 	movw	r2, #5000	; 0x1388
 8005664:	4293      	cmp	r3, r2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e092      	b.n	8005792 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800566c:	4b4c      	ldr	r3, [pc, #304]	; (80057a0 <HAL_RCC_OscConfig+0x47c>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0ee      	beq.n	8005656 <HAL_RCC_OscConfig+0x332>
 8005678:	e014      	b.n	80056a4 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800567a:	f7fd fb75 	bl	8002d68 <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005680:	e00a      	b.n	8005698 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005682:	f7fd fb71 	bl	8002d68 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005690:	4293      	cmp	r3, r2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e07c      	b.n	8005792 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005698:	4b41      	ldr	r3, [pc, #260]	; (80057a0 <HAL_RCC_OscConfig+0x47c>)
 800569a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1ee      	bne.n	8005682 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056a4:	7dfb      	ldrb	r3, [r7, #23]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d105      	bne.n	80056b6 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056aa:	4b3d      	ldr	r3, [pc, #244]	; (80057a0 <HAL_RCC_OscConfig+0x47c>)
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	4a3c      	ldr	r2, [pc, #240]	; (80057a0 <HAL_RCC_OscConfig+0x47c>)
 80056b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d068      	beq.n	8005790 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056be:	4b38      	ldr	r3, [pc, #224]	; (80057a0 <HAL_RCC_OscConfig+0x47c>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 030c 	and.w	r3, r3, #12
 80056c6:	2b08      	cmp	r3, #8
 80056c8:	d060      	beq.n	800578c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d145      	bne.n	800575e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d2:	4b34      	ldr	r3, [pc, #208]	; (80057a4 <HAL_RCC_OscConfig+0x480>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d8:	f7fd fb46 	bl	8002d68 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056e0:	f7fd fb42 	bl	8002d68 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e04f      	b.n	8005792 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f2:	4b2b      	ldr	r3, [pc, #172]	; (80057a0 <HAL_RCC_OscConfig+0x47c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f0      	bne.n	80056e0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69da      	ldr	r2, [r3, #28]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	019b      	lsls	r3, r3, #6
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005714:	085b      	lsrs	r3, r3, #1
 8005716:	3b01      	subs	r3, #1
 8005718:	041b      	lsls	r3, r3, #16
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	061b      	lsls	r3, r3, #24
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	071b      	lsls	r3, r3, #28
 800572a:	491d      	ldr	r1, [pc, #116]	; (80057a0 <HAL_RCC_OscConfig+0x47c>)
 800572c:	4313      	orrs	r3, r2
 800572e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005730:	4b1c      	ldr	r3, [pc, #112]	; (80057a4 <HAL_RCC_OscConfig+0x480>)
 8005732:	2201      	movs	r2, #1
 8005734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005736:	f7fd fb17 	bl	8002d68 <HAL_GetTick>
 800573a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800573c:	e008      	b.n	8005750 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800573e:	f7fd fb13 	bl	8002d68 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d901      	bls.n	8005750 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e020      	b.n	8005792 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005750:	4b13      	ldr	r3, [pc, #76]	; (80057a0 <HAL_RCC_OscConfig+0x47c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0f0      	beq.n	800573e <HAL_RCC_OscConfig+0x41a>
 800575c:	e018      	b.n	8005790 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800575e:	4b11      	ldr	r3, [pc, #68]	; (80057a4 <HAL_RCC_OscConfig+0x480>)
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005764:	f7fd fb00 	bl	8002d68 <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800576c:	f7fd fafc 	bl	8002d68 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e009      	b.n	8005792 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800577e:	4b08      	ldr	r3, [pc, #32]	; (80057a0 <HAL_RCC_OscConfig+0x47c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f0      	bne.n	800576c <HAL_RCC_OscConfig+0x448>
 800578a:	e001      	b.n	8005790 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e000      	b.n	8005792 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40007000 	.word	0x40007000
 80057a0:	40023800 	.word	0x40023800
 80057a4:	42470060 	.word	0x42470060

080057a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e022      	b.n	8005800 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d105      	bne.n	80057d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7fc fa37 	bl	8001c40 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2203      	movs	r2, #3
 80057d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f814 	bl	8005808 <HAL_SD_InitCard>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e00a      	b.n	8005800 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005808:	b5b0      	push	{r4, r5, r7, lr}
 800580a:	b08e      	sub	sp, #56	; 0x38
 800580c:	af04      	add	r7, sp, #16
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005810:	2300      	movs	r3, #0
 8005812:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005814:	2300      	movs	r3, #0
 8005816:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005818:	2300      	movs	r3, #0
 800581a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800581c:	2300      	movs	r3, #0
 800581e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005820:	2300      	movs	r3, #0
 8005822:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005824:	2376      	movs	r3, #118	; 0x76
 8005826:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681d      	ldr	r5, [r3, #0]
 800582c:	466c      	mov	r4, sp
 800582e:	f107 0314 	add.w	r3, r7, #20
 8005832:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005836:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800583a:	f107 0308 	add.w	r3, r7, #8
 800583e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005840:	4628      	mov	r0, r5
 8005842:	f001 ff2d 	bl	80076a0 <SDIO_Init>
 8005846:	4603      	mov	r3, r0
 8005848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800584c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e031      	b.n	80058bc <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005858:	4b1a      	ldr	r3, [pc, #104]	; (80058c4 <HAL_SD_InitCard+0xbc>)
 800585a:	2200      	movs	r2, #0
 800585c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	f001 ff65 	bl	8007732 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005868:	4b16      	ldr	r3, [pc, #88]	; (80058c4 <HAL_SD_InitCard+0xbc>)
 800586a:	2201      	movs	r2, #1
 800586c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fe80 	bl	8006574 <SD_PowerON>
 8005874:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00b      	beq.n	8005894 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e013      	b.n	80058bc <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fd9f 	bl	80063d8 <SD_InitCard>
 800589a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00b      	beq.n	80058ba <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e000      	b.n	80058bc <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3728      	adds	r7, #40	; 0x28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bdb0      	pop	{r4, r5, r7, pc}
 80058c4:	422580a0 	.word	0x422580a0

080058c8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b092      	sub	sp, #72	; 0x48
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80058d6:	f7fd fa47 	bl	8002d68 <HAL_GetTick>
 80058da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d107      	bne.n	80058fa <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e1d7      	b.n	8005caa <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b01      	cmp	r3, #1
 8005904:	f040 81ca 	bne.w	8005c9c <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800590e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	441a      	add	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005918:	429a      	cmp	r2, r3
 800591a:	d907      	bls.n	800592c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e1be      	b.n	8005caa <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2203      	movs	r2, #3
 8005930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2200      	movs	r2, #0
 800593a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005940:	2b01      	cmp	r3, #1
 8005942:	d002      	beq.n	800594a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005946:	025b      	lsls	r3, r3, #9
 8005948:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005952:	4618      	mov	r0, r3
 8005954:	f001 ff80 	bl	8007858 <SDMMC_CmdBlockLength>
 8005958:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800595a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00f      	beq.n	8005980 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a9a      	ldr	r2, [pc, #616]	; (8005bd0 <HAL_SD_ReadBlocks+0x308>)
 8005966:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800596c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800596e:	431a      	orrs	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e194      	b.n	8005caa <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005980:	f04f 33ff 	mov.w	r3, #4294967295
 8005984:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	025b      	lsls	r3, r3, #9
 800598a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800598c:	2390      	movs	r3, #144	; 0x90
 800598e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005990:	2302      	movs	r3, #2
 8005992:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005994:	2300      	movs	r3, #0
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005998:	2301      	movs	r3, #1
 800599a:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f107 0214 	add.w	r2, r7, #20
 80059a4:	4611      	mov	r1, r2
 80059a6:	4618      	mov	r0, r3
 80059a8:	f001 ff2a 	bl	8007800 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d90a      	bls.n	80059c8 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2202      	movs	r2, #2
 80059b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059be:	4618      	mov	r0, r3
 80059c0:	f001 ff8e 	bl	80078e0 <SDMMC_CmdReadMultiBlock>
 80059c4:	6478      	str	r0, [r7, #68]	; 0x44
 80059c6:	e009      	b.n	80059dc <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059d4:	4618      	mov	r0, r3
 80059d6:	f001 ff61 	bl	800789c <SDMMC_CmdReadSingleBlock>
 80059da:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80059dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d012      	beq.n	8005a08 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a7a      	ldr	r2, [pc, #488]	; (8005bd0 <HAL_SD_ReadBlocks+0x308>)
 80059e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059f0:	431a      	orrs	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e150      	b.n	8005caa <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005a0c:	e061      	b.n	8005ad2 <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d03c      	beq.n	8005a96 <HAL_SD_ReadBlocks+0x1ce>
 8005a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d039      	beq.n	8005a96 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005a22:	2300      	movs	r3, #0
 8005a24:	643b      	str	r3, [r7, #64]	; 0x40
 8005a26:	e033      	b.n	8005a90 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f001 fe62 	bl	80076f6 <SDIO_ReadFIFO>
 8005a32:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3e:	3301      	adds	r3, #1
 8005a40:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a44:	3b01      	subs	r3, #1
 8005a46:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4a:	0a1b      	lsrs	r3, r3, #8
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a50:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a54:	3301      	adds	r3, #1
 8005a56:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a60:	0c1b      	lsrs	r3, r3, #16
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a66:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a70:	3b01      	subs	r3, #1
 8005a72:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a76:	0e1b      	lsrs	r3, r3, #24
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a80:	3301      	adds	r3, #1
 8005a82:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a86:	3b01      	subs	r3, #1
 8005a88:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	643b      	str	r3, [r7, #64]	; 0x40
 8005a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a92:	2b07      	cmp	r3, #7
 8005a94:	d9c8      	bls.n	8005a28 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005a96:	f7fd f967 	bl	8002d68 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d902      	bls.n	8005aac <HAL_SD_ReadBlocks+0x1e4>
 8005aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d112      	bne.n	8005ad2 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a47      	ldr	r2, [pc, #284]	; (8005bd0 <HAL_SD_ReadBlocks+0x308>)
 8005ab2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e0eb      	b.n	8005caa <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad8:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d096      	beq.n	8005a0e <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d022      	beq.n	8005b34 <HAL_SD_ReadBlocks+0x26c>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d91f      	bls.n	8005b34 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d01b      	beq.n	8005b34 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f001 ff53 	bl	80079ac <SDMMC_CmdStopTransfer>
 8005b06:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d012      	beq.n	8005b34 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a2f      	ldr	r2, [pc, #188]	; (8005bd0 <HAL_SD_ReadBlocks+0x308>)
 8005b14:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e0ba      	b.n	8005caa <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b3a:	f003 0308 	and.w	r3, r3, #8
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d012      	beq.n	8005b68 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a22      	ldr	r2, [pc, #136]	; (8005bd0 <HAL_SD_ReadBlocks+0x308>)
 8005b48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4e:	f043 0208 	orr.w	r2, r3, #8
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e0a0      	b.n	8005caa <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d012      	beq.n	8005b9c <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a15      	ldr	r2, [pc, #84]	; (8005bd0 <HAL_SD_ReadBlocks+0x308>)
 8005b7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	f043 0202 	orr.w	r2, r3, #2
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e086      	b.n	8005caa <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d063      	beq.n	8005c72 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a08      	ldr	r2, [pc, #32]	; (8005bd0 <HAL_SD_ReadBlocks+0x308>)
 8005bb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	f043 0220 	orr.w	r2, r3, #32
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e06c      	b.n	8005caa <HAL_SD_ReadBlocks+0x3e2>
 8005bd0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f001 fd8c 	bl	80076f6 <SDIO_ReadFIFO>
 8005bde:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bea:	3301      	adds	r3, #1
 8005bec:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf6:	0a1b      	lsrs	r3, r3, #8
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c00:	3301      	adds	r3, #1
 8005c02:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c06:	3b01      	subs	r3, #1
 8005c08:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0c:	0c1b      	lsrs	r3, r3, #16
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c12:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c16:	3301      	adds	r3, #1
 8005c18:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c22:	0e1b      	lsrs	r3, r3, #24
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c28:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c32:	3b01      	subs	r3, #1
 8005c34:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005c36:	f7fd f897 	bl	8002d68 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d902      	bls.n	8005c4c <HAL_SD_ReadBlocks+0x384>
 8005c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d112      	bne.n	8005c72 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a18      	ldr	r2, [pc, #96]	; (8005cb4 <HAL_SD_ReadBlocks+0x3ec>)
 8005c52:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e01b      	b.n	8005caa <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <HAL_SD_ReadBlocks+0x3be>
 8005c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1a6      	bne.n	8005bd4 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f240 523a 	movw	r2, #1338	; 0x53a
 8005c8e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e006      	b.n	8005caa <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
  }
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3748      	adds	r7, #72	; 0x48
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	004005ff 	.word	0x004005ff

08005cb8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b092      	sub	sp, #72	; 0x48
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005cc6:	f7fd f84f 	bl	8002d68 <HAL_GetTick>
 8005cca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d107      	bne.n	8005cea <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cde:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e182      	b.n	8005ff0 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	f040 8175 	bne.w	8005fe2 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005cfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	441a      	add	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d907      	bls.n	8005d1c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e169      	b.n	8005ff0 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2203      	movs	r2, #3
 8005d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d002      	beq.n	8005d3a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d36:	025b      	lsls	r3, r3, #9
 8005d38:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d42:	4618      	mov	r0, r3
 8005d44:	f001 fd88 	bl	8007858 <SDMMC_CmdBlockLength>
 8005d48:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00f      	beq.n	8005d70 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a9c      	ldr	r2, [pc, #624]	; (8005fc8 <HAL_SD_WriteBlocks+0x310>)
 8005d56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e13f      	b.n	8005ff0 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d70:	f04f 33ff 	mov.w	r3, #4294967295
 8005d74:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	025b      	lsls	r3, r3, #9
 8005d7a:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005d7c:	2390      	movs	r3, #144	; 0x90
 8005d7e:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005d80:	2300      	movs	r3, #0
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f107 0218 	add.w	r2, r7, #24
 8005d94:	4611      	mov	r1, r2
 8005d96:	4618      	mov	r0, r3
 8005d98:	f001 fd32 	bl	8007800 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d90a      	bls.n	8005db8 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dae:	4618      	mov	r0, r3
 8005db0:	f001 fdda 	bl	8007968 <SDMMC_CmdWriteMultiBlock>
 8005db4:	6478      	str	r0, [r7, #68]	; 0x44
 8005db6:	e009      	b.n	8005dcc <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2210      	movs	r2, #16
 8005dbc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f001 fdad 	bl	8007924 <SDMMC_CmdWriteSingleBlock>
 8005dca:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d012      	beq.n	8005df8 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a7c      	ldr	r2, [pc, #496]	; (8005fc8 <HAL_SD_WriteBlocks+0x310>)
 8005dd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de0:	431a      	orrs	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e0fb      	b.n	8005ff0 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005dfc:	e065      	b.n	8005eca <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d040      	beq.n	8005e8e <HAL_SD_WriteBlocks+0x1d6>
 8005e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d03d      	beq.n	8005e8e <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005e12:	2300      	movs	r3, #0
 8005e14:	643b      	str	r3, [r7, #64]	; 0x40
 8005e16:	e037      	b.n	8005e88 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8005e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e20:	3301      	adds	r3, #1
 8005e22:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e26:	3b01      	subs	r3, #1
 8005e28:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	021a      	lsls	r2, r3, #8
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e38:	3301      	adds	r3, #1
 8005e3a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	041a      	lsls	r2, r3, #16
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e50:	3301      	adds	r3, #1
 8005e52:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e56:	3b01      	subs	r3, #1
 8005e58:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	061a      	lsls	r2, r3, #24
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e68:	3301      	adds	r3, #1
 8005e6a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f107 0214 	add.w	r2, r7, #20
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f001 fc47 	bl	8007710 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e84:	3301      	adds	r3, #1
 8005e86:	643b      	str	r3, [r7, #64]	; 0x40
 8005e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e8a:	2b07      	cmp	r3, #7
 8005e8c:	d9c4      	bls.n	8005e18 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005e8e:	f7fc ff6b 	bl	8002d68 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d902      	bls.n	8005ea4 <HAL_SD_WriteBlocks+0x1ec>
 8005e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d112      	bne.n	8005eca <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a47      	ldr	r2, [pc, #284]	; (8005fc8 <HAL_SD_WriteBlocks+0x310>)
 8005eaa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e092      	b.n	8005ff0 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed0:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d092      	beq.n	8005dfe <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d022      	beq.n	8005f2c <HAL_SD_WriteBlocks+0x274>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d91f      	bls.n	8005f2c <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d01b      	beq.n	8005f2c <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f001 fd57 	bl	80079ac <SDMMC_CmdStopTransfer>
 8005efe:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d012      	beq.n	8005f2c <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a2f      	ldr	r2, [pc, #188]	; (8005fc8 <HAL_SD_WriteBlocks+0x310>)
 8005f0c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f14:	431a      	orrs	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e061      	b.n	8005ff0 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f32:	f003 0308 	and.w	r3, r3, #8
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d012      	beq.n	8005f60 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a22      	ldr	r2, [pc, #136]	; (8005fc8 <HAL_SD_WriteBlocks+0x310>)
 8005f40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	f043 0208 	orr.w	r2, r3, #8
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e047      	b.n	8005ff0 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d012      	beq.n	8005f94 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a15      	ldr	r2, [pc, #84]	; (8005fc8 <HAL_SD_WriteBlocks+0x310>)
 8005f74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7a:	f043 0202 	orr.w	r2, r3, #2
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e02d      	b.n	8005ff0 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9a:	f003 0310 	and.w	r3, r3, #16
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d014      	beq.n	8005fcc <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a08      	ldr	r2, [pc, #32]	; (8005fc8 <HAL_SD_WriteBlocks+0x310>)
 8005fa8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fae:	f043 0210 	orr.w	r2, r3, #16
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e013      	b.n	8005ff0 <HAL_SD_WriteBlocks+0x338>
 8005fc8:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f240 523a 	movw	r2, #1338	; 0x53a
 8005fd4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e006      	b.n	8005ff0 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
  }
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3748      	adds	r7, #72	; 0x48
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006006:	0f9b      	lsrs	r3, r3, #30
 8006008:	b2da      	uxtb	r2, r3
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006012:	0e9b      	lsrs	r3, r3, #26
 8006014:	b2db      	uxtb	r3, r3
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	b2da      	uxtb	r2, r3
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006024:	0e1b      	lsrs	r3, r3, #24
 8006026:	b2db      	uxtb	r3, r3
 8006028:	f003 0303 	and.w	r3, r3, #3
 800602c:	b2da      	uxtb	r2, r3
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006036:	0c1b      	lsrs	r3, r3, #16
 8006038:	b2da      	uxtb	r2, r3
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006042:	0a1b      	lsrs	r3, r3, #8
 8006044:	b2da      	uxtb	r2, r3
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800604e:	b2da      	uxtb	r2, r3
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006058:	0d1b      	lsrs	r3, r3, #20
 800605a:	b29a      	uxth	r2, r3
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006064:	0c1b      	lsrs	r3, r3, #16
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f003 030f 	and.w	r3, r3, #15
 800606c:	b2da      	uxtb	r2, r3
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006076:	0bdb      	lsrs	r3, r3, #15
 8006078:	b2db      	uxtb	r3, r3
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	b2da      	uxtb	r2, r3
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006088:	0b9b      	lsrs	r3, r3, #14
 800608a:	b2db      	uxtb	r3, r3
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	b2da      	uxtb	r2, r3
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800609a:	0b5b      	lsrs	r3, r3, #13
 800609c:	b2db      	uxtb	r3, r3
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060ac:	0b1b      	lsrs	r3, r3, #12
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2200      	movs	r2, #0
 80060be:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d163      	bne.n	8006190 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060cc:	009a      	lsls	r2, r3, #2
 80060ce:	f640 73fc 	movw	r3, #4092	; 0xffc
 80060d2:	4013      	ands	r3, r2
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80060d8:	0f92      	lsrs	r2, r2, #30
 80060da:	431a      	orrs	r2, r3
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060e4:	0edb      	lsrs	r3, r3, #27
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060f6:	0e1b      	lsrs	r3, r3, #24
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006108:	0d5b      	lsrs	r3, r3, #21
 800610a:	b2db      	uxtb	r3, r3
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	b2da      	uxtb	r2, r3
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800611a:	0c9b      	lsrs	r3, r3, #18
 800611c:	b2db      	uxtb	r3, r3
 800611e:	f003 0307 	and.w	r3, r3, #7
 8006122:	b2da      	uxtb	r2, r3
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800612c:	0bdb      	lsrs	r3, r3, #15
 800612e:	b2db      	uxtb	r3, r3
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	b2da      	uxtb	r2, r3
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	7e1b      	ldrb	r3, [r3, #24]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	3302      	adds	r3, #2
 8006150:	2201      	movs	r2, #1
 8006152:	fa02 f303 	lsl.w	r3, r2, r3
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800615a:	fb02 f203 	mul.w	r2, r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	7a1b      	ldrb	r3, [r3, #8]
 8006166:	b2db      	uxtb	r3, r3
 8006168:	f003 030f 	and.w	r3, r3, #15
 800616c:	2201      	movs	r2, #1
 800616e:	409a      	lsls	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800617c:	0a52      	lsrs	r2, r2, #9
 800617e:	fb02 f203 	mul.w	r2, r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800618c:	661a      	str	r2, [r3, #96]	; 0x60
 800618e:	e031      	b.n	80061f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006194:	2b01      	cmp	r3, #1
 8006196:	d11d      	bne.n	80061d4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800619c:	041b      	lsls	r3, r3, #16
 800619e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061a6:	0c1b      	lsrs	r3, r3, #16
 80061a8:	431a      	orrs	r2, r3
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	3301      	adds	r3, #1
 80061b4:	029a      	lsls	r2, r3, #10
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061c8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	661a      	str	r2, [r3, #96]	; 0x60
 80061d2:	e00f      	b.n	80061f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a58      	ldr	r2, [pc, #352]	; (800633c <HAL_SD_GetCardCSD+0x344>)
 80061da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e09d      	b.n	8006330 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061f8:	0b9b      	lsrs	r3, r3, #14
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	b2da      	uxtb	r2, r3
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800620a:	09db      	lsrs	r3, r3, #7
 800620c:	b2db      	uxtb	r3, r3
 800620e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006212:	b2da      	uxtb	r2, r3
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800621c:	b2db      	uxtb	r3, r3
 800621e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006222:	b2da      	uxtb	r2, r3
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622c:	0fdb      	lsrs	r3, r3, #31
 800622e:	b2da      	uxtb	r2, r3
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006238:	0f5b      	lsrs	r3, r3, #29
 800623a:	b2db      	uxtb	r3, r3
 800623c:	f003 0303 	and.w	r3, r3, #3
 8006240:	b2da      	uxtb	r2, r3
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624a:	0e9b      	lsrs	r3, r3, #26
 800624c:	b2db      	uxtb	r3, r3
 800624e:	f003 0307 	and.w	r3, r3, #7
 8006252:	b2da      	uxtb	r2, r3
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625c:	0d9b      	lsrs	r3, r3, #22
 800625e:	b2db      	uxtb	r3, r3
 8006260:	f003 030f 	and.w	r3, r3, #15
 8006264:	b2da      	uxtb	r2, r3
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626e:	0d5b      	lsrs	r3, r3, #21
 8006270:	b2db      	uxtb	r3, r3
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	b2da      	uxtb	r2, r3
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628a:	0c1b      	lsrs	r3, r3, #16
 800628c:	b2db      	uxtb	r3, r3
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	b2da      	uxtb	r2, r3
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629e:	0bdb      	lsrs	r3, r3, #15
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b2:	0b9b      	lsrs	r3, r3, #14
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c6:	0b5b      	lsrs	r3, r3, #13
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062da:	0b1b      	lsrs	r3, r3, #12
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ee:	0a9b      	lsrs	r3, r3, #10
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006302:	0a1b      	lsrs	r3, r3, #8
 8006304:	b2db      	uxtb	r3, r3
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	b2da      	uxtb	r2, r3
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006316:	085b      	lsrs	r3, r3, #1
 8006318:	b2db      	uxtb	r3, r3
 800631a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800631e:	b2da      	uxtb	r2, r3
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	004005ff 	.word	0x004005ff

08006340 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80063a0:	2300      	movs	r3, #0
 80063a2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80063a4:	f107 030c 	add.w	r3, r7, #12
 80063a8:	4619      	mov	r1, r3
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f970 	bl	8006690 <SD_SendStatus>
 80063b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d005      	beq.n	80063c4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	431a      	orrs	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	0a5b      	lsrs	r3, r3, #9
 80063c8:	f003 030f 	and.w	r3, r3, #15
 80063cc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80063ce:	693b      	ldr	r3, [r7, #16]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80063d8:	b5b0      	push	{r4, r5, r7, lr}
 80063da:	b094      	sub	sp, #80	; 0x50
 80063dc:	af04      	add	r7, sp, #16
 80063de:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80063e0:	2301      	movs	r3, #1
 80063e2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f001 f9b1 	bl	8007750 <SDIO_GetPowerState>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d102      	bne.n	80063fa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80063f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80063f8:	e0b7      	b.n	800656a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d02f      	beq.n	8006462 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4618      	mov	r0, r3
 8006408:	f001 fb97 	bl	8007b3a <SDMMC_CmdSendCID>
 800640c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800640e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <SD_InitCard+0x40>
    {
      return errorstate;
 8006414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006416:	e0a8      	b.n	800656a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2100      	movs	r1, #0
 800641e:	4618      	mov	r0, r3
 8006420:	f001 f9db 	bl	80077da <SDIO_GetResponse>
 8006424:	4602      	mov	r2, r0
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2104      	movs	r1, #4
 8006430:	4618      	mov	r0, r3
 8006432:	f001 f9d2 	bl	80077da <SDIO_GetResponse>
 8006436:	4602      	mov	r2, r0
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2108      	movs	r1, #8
 8006442:	4618      	mov	r0, r3
 8006444:	f001 f9c9 	bl	80077da <SDIO_GetResponse>
 8006448:	4602      	mov	r2, r0
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	210c      	movs	r1, #12
 8006454:	4618      	mov	r0, r3
 8006456:	f001 f9c0 	bl	80077da <SDIO_GetResponse>
 800645a:	4602      	mov	r2, r0
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006466:	2b03      	cmp	r3, #3
 8006468:	d00d      	beq.n	8006486 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f107 020e 	add.w	r2, r7, #14
 8006472:	4611      	mov	r1, r2
 8006474:	4618      	mov	r0, r3
 8006476:	f001 fb9d 	bl	8007bb4 <SDMMC_CmdSetRelAdd>
 800647a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800647c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <SD_InitCard+0xae>
    {
      return errorstate;
 8006482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006484:	e071      	b.n	800656a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648a:	2b03      	cmp	r3, #3
 800648c:	d036      	beq.n	80064fc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800648e:	89fb      	ldrh	r3, [r7, #14]
 8006490:	461a      	mov	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800649e:	041b      	lsls	r3, r3, #16
 80064a0:	4619      	mov	r1, r3
 80064a2:	4610      	mov	r0, r2
 80064a4:	f001 fb67 	bl	8007b76 <SDMMC_CmdSendCSD>
 80064a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80064aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80064b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b2:	e05a      	b.n	800656a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2100      	movs	r1, #0
 80064ba:	4618      	mov	r0, r3
 80064bc:	f001 f98d 	bl	80077da <SDIO_GetResponse>
 80064c0:	4602      	mov	r2, r0
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2104      	movs	r1, #4
 80064cc:	4618      	mov	r0, r3
 80064ce:	f001 f984 	bl	80077da <SDIO_GetResponse>
 80064d2:	4602      	mov	r2, r0
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2108      	movs	r1, #8
 80064de:	4618      	mov	r0, r3
 80064e0:	f001 f97b 	bl	80077da <SDIO_GetResponse>
 80064e4:	4602      	mov	r2, r0
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	210c      	movs	r1, #12
 80064f0:	4618      	mov	r0, r3
 80064f2:	f001 f972 	bl	80077da <SDIO_GetResponse>
 80064f6:	4602      	mov	r2, r0
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2104      	movs	r1, #4
 8006502:	4618      	mov	r0, r3
 8006504:	f001 f969 	bl	80077da <SDIO_GetResponse>
 8006508:	4603      	mov	r3, r0
 800650a:	0d1a      	lsrs	r2, r3, #20
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006510:	f107 0310 	add.w	r3, r7, #16
 8006514:	4619      	mov	r1, r3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7ff fd6e 	bl	8005ff8 <HAL_SD_GetCardCSD>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006522:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006526:	e020      	b.n	800656a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6819      	ldr	r1, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006530:	041b      	lsls	r3, r3, #16
 8006532:	f04f 0400 	mov.w	r4, #0
 8006536:	461a      	mov	r2, r3
 8006538:	4623      	mov	r3, r4
 800653a:	4608      	mov	r0, r1
 800653c:	f001 fa58 	bl	80079f0 <SDMMC_CmdSelDesel>
 8006540:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <SD_InitCard+0x174>
  {
    return errorstate;
 8006548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800654a:	e00e      	b.n	800656a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681d      	ldr	r5, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	466c      	mov	r4, sp
 8006554:	f103 0210 	add.w	r2, r3, #16
 8006558:	ca07      	ldmia	r2, {r0, r1, r2}
 800655a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800655e:	3304      	adds	r3, #4
 8006560:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006562:	4628      	mov	r0, r5
 8006564:	f001 f89c 	bl	80076a0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3740      	adds	r7, #64	; 0x40
 800656e:	46bd      	mov	sp, r7
 8006570:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006574 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800657c:	2300      	movs	r3, #0
 800657e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	2300      	movs	r3, #0
 8006586:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4618      	mov	r0, r3
 800658e:	f001 fa52 	bl	8007a36 <SDMMC_CmdGoIdleState>
 8006592:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <SD_PowerON+0x2a>
  {
    return errorstate;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	e072      	b.n	8006684 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f001 fa65 	bl	8007a72 <SDMMC_CmdOperCond>
 80065a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00d      	beq.n	80065cc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f001 fa3b 	bl	8007a36 <SDMMC_CmdGoIdleState>
 80065c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d004      	beq.n	80065d2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	e05b      	b.n	8006684 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d137      	bne.n	800664a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2100      	movs	r1, #0
 80065e0:	4618      	mov	r0, r3
 80065e2:	f001 fa65 	bl	8007ab0 <SDMMC_CmdAppCommand>
 80065e6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d02d      	beq.n	800664a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80065f2:	e047      	b.n	8006684 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2100      	movs	r1, #0
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 fa58 	bl	8007ab0 <SDMMC_CmdAppCommand>
 8006600:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <SD_PowerON+0x98>
    {
      return errorstate;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	e03b      	b.n	8006684 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	491e      	ldr	r1, [pc, #120]	; (800668c <SD_PowerON+0x118>)
 8006612:	4618      	mov	r0, r3
 8006614:	f001 fa6e 	bl	8007af4 <SDMMC_CmdAppOperCommand>
 8006618:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006620:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006624:	e02e      	b.n	8006684 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2100      	movs	r1, #0
 800662c:	4618      	mov	r0, r3
 800662e:	f001 f8d4 	bl	80077da <SDIO_GetResponse>
 8006632:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	0fdb      	lsrs	r3, r3, #31
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <SD_PowerON+0xcc>
 800663c:	2301      	movs	r3, #1
 800663e:	e000      	b.n	8006642 <SD_PowerON+0xce>
 8006640:	2300      	movs	r3, #0
 8006642:	613b      	str	r3, [r7, #16]

    count++;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	3301      	adds	r3, #1
 8006648:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006650:	4293      	cmp	r3, r2
 8006652:	d802      	bhi.n	800665a <SD_PowerON+0xe6>
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0cc      	beq.n	80065f4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006660:	4293      	cmp	r3, r2
 8006662:	d902      	bls.n	800666a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006664:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006668:	e00c      	b.n	8006684 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	645a      	str	r2, [r3, #68]	; 0x44
 800667a:	e002      	b.n	8006682 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	c1100000 	.word	0xc1100000

08006690 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d102      	bne.n	80066a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80066a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066a4:	e018      	b.n	80066d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ae:	041b      	lsls	r3, r3, #16
 80066b0:	4619      	mov	r1, r3
 80066b2:	4610      	mov	r0, r2
 80066b4:	f001 fa9f 	bl	8007bf6 <SDMMC_CmdSendStatus>
 80066b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	e009      	b.n	80066d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2100      	movs	r1, #0
 80066ca:	4618      	mov	r0, r3
 80066cc:	f001 f885 	bl	80077da <SDIO_GetResponse>
 80066d0:	4602      	mov	r2, r0
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e056      	b.n	80067a0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d106      	bne.n	8006712 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7fb fb11 	bl	8001d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2202      	movs	r2, #2
 8006716:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006728:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	431a      	orrs	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	431a      	orrs	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	431a      	orrs	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	69db      	ldr	r3, [r3, #28]
 8006754:	431a      	orrs	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	ea42 0103 	orr.w	r1, r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	0c1b      	lsrs	r3, r3, #16
 8006770:	f003 0104 	and.w	r1, r3, #4
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	69da      	ldr	r2, [r3, #28]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800678e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08c      	sub	sp, #48	; 0x30
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80067b6:	2301      	movs	r3, #1
 80067b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d101      	bne.n	80067ce <HAL_SPI_TransmitReceive+0x26>
 80067ca:	2302      	movs	r3, #2
 80067cc:	e18a      	b.n	8006ae4 <HAL_SPI_TransmitReceive+0x33c>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067d6:	f7fc fac7 	bl	8002d68 <HAL_GetTick>
 80067da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80067ec:	887b      	ldrh	r3, [r7, #2]
 80067ee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d00f      	beq.n	8006818 <HAL_SPI_TransmitReceive+0x70>
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067fe:	d107      	bne.n	8006810 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d103      	bne.n	8006810 <HAL_SPI_TransmitReceive+0x68>
 8006808:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800680c:	2b04      	cmp	r3, #4
 800680e:	d003      	beq.n	8006818 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006810:	2302      	movs	r3, #2
 8006812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006816:	e15b      	b.n	8006ad0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d005      	beq.n	800682a <HAL_SPI_TransmitReceive+0x82>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <HAL_SPI_TransmitReceive+0x82>
 8006824:	887b      	ldrh	r3, [r7, #2]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d103      	bne.n	8006832 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006830:	e14e      	b.n	8006ad0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b04      	cmp	r3, #4
 800683c:	d003      	beq.n	8006846 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2205      	movs	r2, #5
 8006842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	887a      	ldrh	r2, [r7, #2]
 8006856:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	887a      	ldrh	r2, [r7, #2]
 800685c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	887a      	ldrh	r2, [r7, #2]
 8006868:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	887a      	ldrh	r2, [r7, #2]
 800686e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006886:	2b40      	cmp	r3, #64	; 0x40
 8006888:	d007      	beq.n	800689a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006898:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068a2:	d178      	bne.n	8006996 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <HAL_SPI_TransmitReceive+0x10a>
 80068ac:	8b7b      	ldrh	r3, [r7, #26]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d166      	bne.n	8006980 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	881a      	ldrh	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c2:	1c9a      	adds	r2, r3, #2
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	3b01      	subs	r3, #1
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068d6:	e053      	b.n	8006980 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d11b      	bne.n	800691e <HAL_SPI_TransmitReceive+0x176>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d016      	beq.n	800691e <HAL_SPI_TransmitReceive+0x176>
 80068f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d113      	bne.n	800691e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fa:	881a      	ldrh	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006906:	1c9a      	adds	r2, r3, #2
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006910:	b29b      	uxth	r3, r3
 8006912:	3b01      	subs	r3, #1
 8006914:	b29a      	uxth	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b01      	cmp	r3, #1
 800692a:	d119      	bne.n	8006960 <HAL_SPI_TransmitReceive+0x1b8>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d014      	beq.n	8006960 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68da      	ldr	r2, [r3, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	b292      	uxth	r2, r2
 8006942:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006948:	1c9a      	adds	r2, r3, #2
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006952:	b29b      	uxth	r3, r3
 8006954:	3b01      	subs	r3, #1
 8006956:	b29a      	uxth	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800695c:	2301      	movs	r3, #1
 800695e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006960:	f7fc fa02 	bl	8002d68 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800696c:	429a      	cmp	r2, r3
 800696e:	d807      	bhi.n	8006980 <HAL_SPI_TransmitReceive+0x1d8>
 8006970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006976:	d003      	beq.n	8006980 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800697e:	e0a7      	b.n	8006ad0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1a6      	bne.n	80068d8 <HAL_SPI_TransmitReceive+0x130>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800698e:	b29b      	uxth	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1a1      	bne.n	80068d8 <HAL_SPI_TransmitReceive+0x130>
 8006994:	e07c      	b.n	8006a90 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d002      	beq.n	80069a4 <HAL_SPI_TransmitReceive+0x1fc>
 800699e:	8b7b      	ldrh	r3, [r7, #26]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d16b      	bne.n	8006a7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	330c      	adds	r3, #12
 80069ae:	7812      	ldrb	r2, [r2, #0]
 80069b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069ca:	e057      	b.n	8006a7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d11c      	bne.n	8006a14 <HAL_SPI_TransmitReceive+0x26c>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069de:	b29b      	uxth	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d017      	beq.n	8006a14 <HAL_SPI_TransmitReceive+0x26c>
 80069e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d114      	bne.n	8006a14 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	330c      	adds	r3, #12
 80069f4:	7812      	ldrb	r2, [r2, #0]
 80069f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d119      	bne.n	8006a56 <HAL_SPI_TransmitReceive+0x2ae>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d014      	beq.n	8006a56 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a36:	b2d2      	uxtb	r2, r2
 8006a38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a52:	2301      	movs	r3, #1
 8006a54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006a56:	f7fc f987 	bl	8002d68 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d803      	bhi.n	8006a6e <HAL_SPI_TransmitReceive+0x2c6>
 8006a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6c:	d102      	bne.n	8006a74 <HAL_SPI_TransmitReceive+0x2cc>
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d103      	bne.n	8006a7c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a7a:	e029      	b.n	8006ad0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1a2      	bne.n	80069cc <HAL_SPI_TransmitReceive+0x224>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d19d      	bne.n	80069cc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 f893 	bl	8006bc0 <SPI_EndRxTxTransaction>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d006      	beq.n	8006aae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006aac:	e010      	b.n	8006ad0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10b      	bne.n	8006ace <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	617b      	str	r3, [r7, #20]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	617b      	str	r3, [r7, #20]
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	e000      	b.n	8006ad0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006ace:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ae0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3730      	adds	r7, #48	; 0x30
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	603b      	str	r3, [r7, #0]
 8006af8:	4613      	mov	r3, r2
 8006afa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006afc:	e04c      	b.n	8006b98 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b04:	d048      	beq.n	8006b98 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006b06:	f7fc f92f 	bl	8002d68 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d902      	bls.n	8006b1c <SPI_WaitFlagStateUntilTimeout+0x30>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d13d      	bne.n	8006b98 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b34:	d111      	bne.n	8006b5a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b3e:	d004      	beq.n	8006b4a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b48:	d107      	bne.n	8006b5a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b62:	d10f      	bne.n	8006b84 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e00f      	b.n	8006bb8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689a      	ldr	r2, [r3, #8]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	bf0c      	ite	eq
 8006ba8:	2301      	moveq	r3, #1
 8006baa:	2300      	movne	r3, #0
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	461a      	mov	r2, r3
 8006bb0:	79fb      	ldrb	r3, [r7, #7]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d1a3      	bne.n	8006afe <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b088      	sub	sp, #32
 8006bc4:	af02      	add	r7, sp, #8
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006bcc:	4b1b      	ldr	r3, [pc, #108]	; (8006c3c <SPI_EndRxTxTransaction+0x7c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a1b      	ldr	r2, [pc, #108]	; (8006c40 <SPI_EndRxTxTransaction+0x80>)
 8006bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd6:	0d5b      	lsrs	r3, r3, #21
 8006bd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006bdc:	fb02 f303 	mul.w	r3, r2, r3
 8006be0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bea:	d112      	bne.n	8006c12 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	2180      	movs	r1, #128	; 0x80
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f7ff ff78 	bl	8006aec <SPI_WaitFlagStateUntilTimeout>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d016      	beq.n	8006c30 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c06:	f043 0220 	orr.w	r2, r3, #32
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e00f      	b.n	8006c32 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00a      	beq.n	8006c2e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c28:	2b80      	cmp	r3, #128	; 0x80
 8006c2a:	d0f2      	beq.n	8006c12 <SPI_EndRxTxTransaction+0x52>
 8006c2c:	e000      	b.n	8006c30 <SPI_EndRxTxTransaction+0x70>
        break;
 8006c2e:	bf00      	nop
  }

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3718      	adds	r7, #24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	2000001c 	.word	0x2000001c
 8006c40:	165e9f81 	.word	0x165e9f81

08006c44 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e034      	b.n	8006cc4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f7fb f970 	bl	8001f54 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	3308      	adds	r3, #8
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	4610      	mov	r0, r2
 8006c80:	f000 fc0a 	bl	8007498 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6818      	ldr	r0, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	68b9      	ldr	r1, [r7, #8]
 8006c90:	f000 fc72 	bl	8007578 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6858      	ldr	r0, [r3, #4]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca0:	6879      	ldr	r1, [r7, #4]
 8006ca2:	f000 fcbd 	bl	8007620 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	6892      	ldr	r2, [r2, #8]
 8006cae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	6892      	ldr	r2, [r2, #8]
 8006cba:	f041 0101 	orr.w	r1, r1, #1
 8006cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e03f      	b.n	8006d5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d106      	bne.n	8006cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7fb f876 	bl	8001de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2224      	movs	r2, #36	; 0x24
 8006cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68da      	ldr	r2, [r3, #12]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f829 	bl	8006d68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	691a      	ldr	r2, [r3, #16]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	695a      	ldr	r2, [r3, #20]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68da      	ldr	r2, [r3, #12]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2220      	movs	r2, #32
 8006d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
	...

08006d68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d6c:	b085      	sub	sp, #20
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68da      	ldr	r2, [r3, #12]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	431a      	orrs	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006daa:	f023 030c 	bic.w	r3, r3, #12
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	6812      	ldr	r2, [r2, #0]
 8006db2:	68f9      	ldr	r1, [r7, #12]
 8006db4:	430b      	orrs	r3, r1
 8006db6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	699a      	ldr	r2, [r3, #24]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dd6:	f040 8199 	bne.w	800710c <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4ac6      	ldr	r2, [pc, #792]	; (80070f8 <UART_SetConfig+0x390>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d00f      	beq.n	8006e04 <UART_SetConfig+0x9c>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4ac4      	ldr	r2, [pc, #784]	; (80070fc <UART_SetConfig+0x394>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00a      	beq.n	8006e04 <UART_SetConfig+0x9c>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4ac3      	ldr	r2, [pc, #780]	; (8007100 <UART_SetConfig+0x398>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d005      	beq.n	8006e04 <UART_SetConfig+0x9c>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4ac1      	ldr	r2, [pc, #772]	; (8007104 <UART_SetConfig+0x39c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	f040 80bd 	bne.w	8006f7e <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e04:	f7fd ffee 	bl	8004de4 <HAL_RCC_GetPCLK2Freq>
 8006e08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	461d      	mov	r5, r3
 8006e0e:	f04f 0600 	mov.w	r6, #0
 8006e12:	46a8      	mov	r8, r5
 8006e14:	46b1      	mov	r9, r6
 8006e16:	eb18 0308 	adds.w	r3, r8, r8
 8006e1a:	eb49 0409 	adc.w	r4, r9, r9
 8006e1e:	4698      	mov	r8, r3
 8006e20:	46a1      	mov	r9, r4
 8006e22:	eb18 0805 	adds.w	r8, r8, r5
 8006e26:	eb49 0906 	adc.w	r9, r9, r6
 8006e2a:	f04f 0100 	mov.w	r1, #0
 8006e2e:	f04f 0200 	mov.w	r2, #0
 8006e32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e3e:	4688      	mov	r8, r1
 8006e40:	4691      	mov	r9, r2
 8006e42:	eb18 0005 	adds.w	r0, r8, r5
 8006e46:	eb49 0106 	adc.w	r1, r9, r6
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	461d      	mov	r5, r3
 8006e50:	f04f 0600 	mov.w	r6, #0
 8006e54:	196b      	adds	r3, r5, r5
 8006e56:	eb46 0406 	adc.w	r4, r6, r6
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	4623      	mov	r3, r4
 8006e5e:	f7f9 fa37 	bl	80002d0 <__aeabi_uldivmod>
 8006e62:	4603      	mov	r3, r0
 8006e64:	460c      	mov	r4, r1
 8006e66:	461a      	mov	r2, r3
 8006e68:	4ba7      	ldr	r3, [pc, #668]	; (8007108 <UART_SetConfig+0x3a0>)
 8006e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e6e:	095b      	lsrs	r3, r3, #5
 8006e70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	461d      	mov	r5, r3
 8006e78:	f04f 0600 	mov.w	r6, #0
 8006e7c:	46a9      	mov	r9, r5
 8006e7e:	46b2      	mov	sl, r6
 8006e80:	eb19 0309 	adds.w	r3, r9, r9
 8006e84:	eb4a 040a 	adc.w	r4, sl, sl
 8006e88:	4699      	mov	r9, r3
 8006e8a:	46a2      	mov	sl, r4
 8006e8c:	eb19 0905 	adds.w	r9, r9, r5
 8006e90:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e94:	f04f 0100 	mov.w	r1, #0
 8006e98:	f04f 0200 	mov.w	r2, #0
 8006e9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ea0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ea4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ea8:	4689      	mov	r9, r1
 8006eaa:	4692      	mov	sl, r2
 8006eac:	eb19 0005 	adds.w	r0, r9, r5
 8006eb0:	eb4a 0106 	adc.w	r1, sl, r6
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	461d      	mov	r5, r3
 8006eba:	f04f 0600 	mov.w	r6, #0
 8006ebe:	196b      	adds	r3, r5, r5
 8006ec0:	eb46 0406 	adc.w	r4, r6, r6
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	4623      	mov	r3, r4
 8006ec8:	f7f9 fa02 	bl	80002d0 <__aeabi_uldivmod>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	460c      	mov	r4, r1
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	4b8d      	ldr	r3, [pc, #564]	; (8007108 <UART_SetConfig+0x3a0>)
 8006ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ed8:	095b      	lsrs	r3, r3, #5
 8006eda:	2164      	movs	r1, #100	; 0x64
 8006edc:	fb01 f303 	mul.w	r3, r1, r3
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	3332      	adds	r3, #50	; 0x32
 8006ee6:	4a88      	ldr	r2, [pc, #544]	; (8007108 <UART_SetConfig+0x3a0>)
 8006ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8006eec:	095b      	lsrs	r3, r3, #5
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ef4:	4498      	add	r8, r3
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	461d      	mov	r5, r3
 8006efa:	f04f 0600 	mov.w	r6, #0
 8006efe:	46a9      	mov	r9, r5
 8006f00:	46b2      	mov	sl, r6
 8006f02:	eb19 0309 	adds.w	r3, r9, r9
 8006f06:	eb4a 040a 	adc.w	r4, sl, sl
 8006f0a:	4699      	mov	r9, r3
 8006f0c:	46a2      	mov	sl, r4
 8006f0e:	eb19 0905 	adds.w	r9, r9, r5
 8006f12:	eb4a 0a06 	adc.w	sl, sl, r6
 8006f16:	f04f 0100 	mov.w	r1, #0
 8006f1a:	f04f 0200 	mov.w	r2, #0
 8006f1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f2a:	4689      	mov	r9, r1
 8006f2c:	4692      	mov	sl, r2
 8006f2e:	eb19 0005 	adds.w	r0, r9, r5
 8006f32:	eb4a 0106 	adc.w	r1, sl, r6
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	461d      	mov	r5, r3
 8006f3c:	f04f 0600 	mov.w	r6, #0
 8006f40:	196b      	adds	r3, r5, r5
 8006f42:	eb46 0406 	adc.w	r4, r6, r6
 8006f46:	461a      	mov	r2, r3
 8006f48:	4623      	mov	r3, r4
 8006f4a:	f7f9 f9c1 	bl	80002d0 <__aeabi_uldivmod>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	460c      	mov	r4, r1
 8006f52:	461a      	mov	r2, r3
 8006f54:	4b6c      	ldr	r3, [pc, #432]	; (8007108 <UART_SetConfig+0x3a0>)
 8006f56:	fba3 1302 	umull	r1, r3, r3, r2
 8006f5a:	095b      	lsrs	r3, r3, #5
 8006f5c:	2164      	movs	r1, #100	; 0x64
 8006f5e:	fb01 f303 	mul.w	r3, r1, r3
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	00db      	lsls	r3, r3, #3
 8006f66:	3332      	adds	r3, #50	; 0x32
 8006f68:	4a67      	ldr	r2, [pc, #412]	; (8007108 <UART_SetConfig+0x3a0>)
 8006f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f6e:	095b      	lsrs	r3, r3, #5
 8006f70:	f003 0207 	and.w	r2, r3, #7
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4442      	add	r2, r8
 8006f7a:	609a      	str	r2, [r3, #8]
 8006f7c:	e27d      	b.n	800747a <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f7e:	f7fd ff1d 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 8006f82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	461d      	mov	r5, r3
 8006f88:	f04f 0600 	mov.w	r6, #0
 8006f8c:	46a8      	mov	r8, r5
 8006f8e:	46b1      	mov	r9, r6
 8006f90:	eb18 0308 	adds.w	r3, r8, r8
 8006f94:	eb49 0409 	adc.w	r4, r9, r9
 8006f98:	4698      	mov	r8, r3
 8006f9a:	46a1      	mov	r9, r4
 8006f9c:	eb18 0805 	adds.w	r8, r8, r5
 8006fa0:	eb49 0906 	adc.w	r9, r9, r6
 8006fa4:	f04f 0100 	mov.w	r1, #0
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006fb0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006fb4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006fb8:	4688      	mov	r8, r1
 8006fba:	4691      	mov	r9, r2
 8006fbc:	eb18 0005 	adds.w	r0, r8, r5
 8006fc0:	eb49 0106 	adc.w	r1, r9, r6
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	461d      	mov	r5, r3
 8006fca:	f04f 0600 	mov.w	r6, #0
 8006fce:	196b      	adds	r3, r5, r5
 8006fd0:	eb46 0406 	adc.w	r4, r6, r6
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	4623      	mov	r3, r4
 8006fd8:	f7f9 f97a 	bl	80002d0 <__aeabi_uldivmod>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	460c      	mov	r4, r1
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	4b49      	ldr	r3, [pc, #292]	; (8007108 <UART_SetConfig+0x3a0>)
 8006fe4:	fba3 2302 	umull	r2, r3, r3, r2
 8006fe8:	095b      	lsrs	r3, r3, #5
 8006fea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	461d      	mov	r5, r3
 8006ff2:	f04f 0600 	mov.w	r6, #0
 8006ff6:	46a9      	mov	r9, r5
 8006ff8:	46b2      	mov	sl, r6
 8006ffa:	eb19 0309 	adds.w	r3, r9, r9
 8006ffe:	eb4a 040a 	adc.w	r4, sl, sl
 8007002:	4699      	mov	r9, r3
 8007004:	46a2      	mov	sl, r4
 8007006:	eb19 0905 	adds.w	r9, r9, r5
 800700a:	eb4a 0a06 	adc.w	sl, sl, r6
 800700e:	f04f 0100 	mov.w	r1, #0
 8007012:	f04f 0200 	mov.w	r2, #0
 8007016:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800701a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800701e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007022:	4689      	mov	r9, r1
 8007024:	4692      	mov	sl, r2
 8007026:	eb19 0005 	adds.w	r0, r9, r5
 800702a:	eb4a 0106 	adc.w	r1, sl, r6
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	461d      	mov	r5, r3
 8007034:	f04f 0600 	mov.w	r6, #0
 8007038:	196b      	adds	r3, r5, r5
 800703a:	eb46 0406 	adc.w	r4, r6, r6
 800703e:	461a      	mov	r2, r3
 8007040:	4623      	mov	r3, r4
 8007042:	f7f9 f945 	bl	80002d0 <__aeabi_uldivmod>
 8007046:	4603      	mov	r3, r0
 8007048:	460c      	mov	r4, r1
 800704a:	461a      	mov	r2, r3
 800704c:	4b2e      	ldr	r3, [pc, #184]	; (8007108 <UART_SetConfig+0x3a0>)
 800704e:	fba3 1302 	umull	r1, r3, r3, r2
 8007052:	095b      	lsrs	r3, r3, #5
 8007054:	2164      	movs	r1, #100	; 0x64
 8007056:	fb01 f303 	mul.w	r3, r1, r3
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	00db      	lsls	r3, r3, #3
 800705e:	3332      	adds	r3, #50	; 0x32
 8007060:	4a29      	ldr	r2, [pc, #164]	; (8007108 <UART_SetConfig+0x3a0>)
 8007062:	fba2 2303 	umull	r2, r3, r2, r3
 8007066:	095b      	lsrs	r3, r3, #5
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800706e:	4498      	add	r8, r3
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	461d      	mov	r5, r3
 8007074:	f04f 0600 	mov.w	r6, #0
 8007078:	46a9      	mov	r9, r5
 800707a:	46b2      	mov	sl, r6
 800707c:	eb19 0309 	adds.w	r3, r9, r9
 8007080:	eb4a 040a 	adc.w	r4, sl, sl
 8007084:	4699      	mov	r9, r3
 8007086:	46a2      	mov	sl, r4
 8007088:	eb19 0905 	adds.w	r9, r9, r5
 800708c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007090:	f04f 0100 	mov.w	r1, #0
 8007094:	f04f 0200 	mov.w	r2, #0
 8007098:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800709c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070a4:	4689      	mov	r9, r1
 80070a6:	4692      	mov	sl, r2
 80070a8:	eb19 0005 	adds.w	r0, r9, r5
 80070ac:	eb4a 0106 	adc.w	r1, sl, r6
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	461d      	mov	r5, r3
 80070b6:	f04f 0600 	mov.w	r6, #0
 80070ba:	196b      	adds	r3, r5, r5
 80070bc:	eb46 0406 	adc.w	r4, r6, r6
 80070c0:	461a      	mov	r2, r3
 80070c2:	4623      	mov	r3, r4
 80070c4:	f7f9 f904 	bl	80002d0 <__aeabi_uldivmod>
 80070c8:	4603      	mov	r3, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	461a      	mov	r2, r3
 80070ce:	4b0e      	ldr	r3, [pc, #56]	; (8007108 <UART_SetConfig+0x3a0>)
 80070d0:	fba3 1302 	umull	r1, r3, r3, r2
 80070d4:	095b      	lsrs	r3, r3, #5
 80070d6:	2164      	movs	r1, #100	; 0x64
 80070d8:	fb01 f303 	mul.w	r3, r1, r3
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	3332      	adds	r3, #50	; 0x32
 80070e2:	4a09      	ldr	r2, [pc, #36]	; (8007108 <UART_SetConfig+0x3a0>)
 80070e4:	fba2 2303 	umull	r2, r3, r2, r3
 80070e8:	095b      	lsrs	r3, r3, #5
 80070ea:	f003 0207 	and.w	r2, r3, #7
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4442      	add	r2, r8
 80070f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80070f6:	e1c0      	b.n	800747a <UART_SetConfig+0x712>
 80070f8:	40011000 	.word	0x40011000
 80070fc:	40011400 	.word	0x40011400
 8007100:	40011800 	.word	0x40011800
 8007104:	40011c00 	.word	0x40011c00
 8007108:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4adc      	ldr	r2, [pc, #880]	; (8007484 <UART_SetConfig+0x71c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00f      	beq.n	8007136 <UART_SetConfig+0x3ce>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4adb      	ldr	r2, [pc, #876]	; (8007488 <UART_SetConfig+0x720>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d00a      	beq.n	8007136 <UART_SetConfig+0x3ce>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4ad9      	ldr	r2, [pc, #868]	; (800748c <UART_SetConfig+0x724>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d005      	beq.n	8007136 <UART_SetConfig+0x3ce>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4ad8      	ldr	r2, [pc, #864]	; (8007490 <UART_SetConfig+0x728>)
 8007130:	4293      	cmp	r3, r2
 8007132:	f040 80d1 	bne.w	80072d8 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007136:	f7fd fe55 	bl	8004de4 <HAL_RCC_GetPCLK2Freq>
 800713a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	469a      	mov	sl, r3
 8007140:	f04f 0b00 	mov.w	fp, #0
 8007144:	46d0      	mov	r8, sl
 8007146:	46d9      	mov	r9, fp
 8007148:	eb18 0308 	adds.w	r3, r8, r8
 800714c:	eb49 0409 	adc.w	r4, r9, r9
 8007150:	4698      	mov	r8, r3
 8007152:	46a1      	mov	r9, r4
 8007154:	eb18 080a 	adds.w	r8, r8, sl
 8007158:	eb49 090b 	adc.w	r9, r9, fp
 800715c:	f04f 0100 	mov.w	r1, #0
 8007160:	f04f 0200 	mov.w	r2, #0
 8007164:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007168:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800716c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007170:	4688      	mov	r8, r1
 8007172:	4691      	mov	r9, r2
 8007174:	eb1a 0508 	adds.w	r5, sl, r8
 8007178:	eb4b 0609 	adc.w	r6, fp, r9
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	4619      	mov	r1, r3
 8007182:	f04f 0200 	mov.w	r2, #0
 8007186:	f04f 0300 	mov.w	r3, #0
 800718a:	f04f 0400 	mov.w	r4, #0
 800718e:	0094      	lsls	r4, r2, #2
 8007190:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007194:	008b      	lsls	r3, r1, #2
 8007196:	461a      	mov	r2, r3
 8007198:	4623      	mov	r3, r4
 800719a:	4628      	mov	r0, r5
 800719c:	4631      	mov	r1, r6
 800719e:	f7f9 f897 	bl	80002d0 <__aeabi_uldivmod>
 80071a2:	4603      	mov	r3, r0
 80071a4:	460c      	mov	r4, r1
 80071a6:	461a      	mov	r2, r3
 80071a8:	4bba      	ldr	r3, [pc, #744]	; (8007494 <UART_SetConfig+0x72c>)
 80071aa:	fba3 2302 	umull	r2, r3, r3, r2
 80071ae:	095b      	lsrs	r3, r3, #5
 80071b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	469b      	mov	fp, r3
 80071b8:	f04f 0c00 	mov.w	ip, #0
 80071bc:	46d9      	mov	r9, fp
 80071be:	46e2      	mov	sl, ip
 80071c0:	eb19 0309 	adds.w	r3, r9, r9
 80071c4:	eb4a 040a 	adc.w	r4, sl, sl
 80071c8:	4699      	mov	r9, r3
 80071ca:	46a2      	mov	sl, r4
 80071cc:	eb19 090b 	adds.w	r9, r9, fp
 80071d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80071d4:	f04f 0100 	mov.w	r1, #0
 80071d8:	f04f 0200 	mov.w	r2, #0
 80071dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80071e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071e8:	4689      	mov	r9, r1
 80071ea:	4692      	mov	sl, r2
 80071ec:	eb1b 0509 	adds.w	r5, fp, r9
 80071f0:	eb4c 060a 	adc.w	r6, ip, sl
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	4619      	mov	r1, r3
 80071fa:	f04f 0200 	mov.w	r2, #0
 80071fe:	f04f 0300 	mov.w	r3, #0
 8007202:	f04f 0400 	mov.w	r4, #0
 8007206:	0094      	lsls	r4, r2, #2
 8007208:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800720c:	008b      	lsls	r3, r1, #2
 800720e:	461a      	mov	r2, r3
 8007210:	4623      	mov	r3, r4
 8007212:	4628      	mov	r0, r5
 8007214:	4631      	mov	r1, r6
 8007216:	f7f9 f85b 	bl	80002d0 <__aeabi_uldivmod>
 800721a:	4603      	mov	r3, r0
 800721c:	460c      	mov	r4, r1
 800721e:	461a      	mov	r2, r3
 8007220:	4b9c      	ldr	r3, [pc, #624]	; (8007494 <UART_SetConfig+0x72c>)
 8007222:	fba3 1302 	umull	r1, r3, r3, r2
 8007226:	095b      	lsrs	r3, r3, #5
 8007228:	2164      	movs	r1, #100	; 0x64
 800722a:	fb01 f303 	mul.w	r3, r1, r3
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	011b      	lsls	r3, r3, #4
 8007232:	3332      	adds	r3, #50	; 0x32
 8007234:	4a97      	ldr	r2, [pc, #604]	; (8007494 <UART_SetConfig+0x72c>)
 8007236:	fba2 2303 	umull	r2, r3, r2, r3
 800723a:	095b      	lsrs	r3, r3, #5
 800723c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007240:	4498      	add	r8, r3
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	469b      	mov	fp, r3
 8007246:	f04f 0c00 	mov.w	ip, #0
 800724a:	46d9      	mov	r9, fp
 800724c:	46e2      	mov	sl, ip
 800724e:	eb19 0309 	adds.w	r3, r9, r9
 8007252:	eb4a 040a 	adc.w	r4, sl, sl
 8007256:	4699      	mov	r9, r3
 8007258:	46a2      	mov	sl, r4
 800725a:	eb19 090b 	adds.w	r9, r9, fp
 800725e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007262:	f04f 0100 	mov.w	r1, #0
 8007266:	f04f 0200 	mov.w	r2, #0
 800726a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800726e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007272:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007276:	4689      	mov	r9, r1
 8007278:	4692      	mov	sl, r2
 800727a:	eb1b 0509 	adds.w	r5, fp, r9
 800727e:	eb4c 060a 	adc.w	r6, ip, sl
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	4619      	mov	r1, r3
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	f04f 0300 	mov.w	r3, #0
 8007290:	f04f 0400 	mov.w	r4, #0
 8007294:	0094      	lsls	r4, r2, #2
 8007296:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800729a:	008b      	lsls	r3, r1, #2
 800729c:	461a      	mov	r2, r3
 800729e:	4623      	mov	r3, r4
 80072a0:	4628      	mov	r0, r5
 80072a2:	4631      	mov	r1, r6
 80072a4:	f7f9 f814 	bl	80002d0 <__aeabi_uldivmod>
 80072a8:	4603      	mov	r3, r0
 80072aa:	460c      	mov	r4, r1
 80072ac:	461a      	mov	r2, r3
 80072ae:	4b79      	ldr	r3, [pc, #484]	; (8007494 <UART_SetConfig+0x72c>)
 80072b0:	fba3 1302 	umull	r1, r3, r3, r2
 80072b4:	095b      	lsrs	r3, r3, #5
 80072b6:	2164      	movs	r1, #100	; 0x64
 80072b8:	fb01 f303 	mul.w	r3, r1, r3
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	011b      	lsls	r3, r3, #4
 80072c0:	3332      	adds	r3, #50	; 0x32
 80072c2:	4a74      	ldr	r2, [pc, #464]	; (8007494 <UART_SetConfig+0x72c>)
 80072c4:	fba2 2303 	umull	r2, r3, r2, r3
 80072c8:	095b      	lsrs	r3, r3, #5
 80072ca:	f003 020f 	and.w	r2, r3, #15
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4442      	add	r2, r8
 80072d4:	609a      	str	r2, [r3, #8]
 80072d6:	e0d0      	b.n	800747a <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 80072d8:	f7fd fd70 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 80072dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	469a      	mov	sl, r3
 80072e2:	f04f 0b00 	mov.w	fp, #0
 80072e6:	46d0      	mov	r8, sl
 80072e8:	46d9      	mov	r9, fp
 80072ea:	eb18 0308 	adds.w	r3, r8, r8
 80072ee:	eb49 0409 	adc.w	r4, r9, r9
 80072f2:	4698      	mov	r8, r3
 80072f4:	46a1      	mov	r9, r4
 80072f6:	eb18 080a 	adds.w	r8, r8, sl
 80072fa:	eb49 090b 	adc.w	r9, r9, fp
 80072fe:	f04f 0100 	mov.w	r1, #0
 8007302:	f04f 0200 	mov.w	r2, #0
 8007306:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800730a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800730e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007312:	4688      	mov	r8, r1
 8007314:	4691      	mov	r9, r2
 8007316:	eb1a 0508 	adds.w	r5, sl, r8
 800731a:	eb4b 0609 	adc.w	r6, fp, r9
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	4619      	mov	r1, r3
 8007324:	f04f 0200 	mov.w	r2, #0
 8007328:	f04f 0300 	mov.w	r3, #0
 800732c:	f04f 0400 	mov.w	r4, #0
 8007330:	0094      	lsls	r4, r2, #2
 8007332:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007336:	008b      	lsls	r3, r1, #2
 8007338:	461a      	mov	r2, r3
 800733a:	4623      	mov	r3, r4
 800733c:	4628      	mov	r0, r5
 800733e:	4631      	mov	r1, r6
 8007340:	f7f8 ffc6 	bl	80002d0 <__aeabi_uldivmod>
 8007344:	4603      	mov	r3, r0
 8007346:	460c      	mov	r4, r1
 8007348:	461a      	mov	r2, r3
 800734a:	4b52      	ldr	r3, [pc, #328]	; (8007494 <UART_SetConfig+0x72c>)
 800734c:	fba3 2302 	umull	r2, r3, r3, r2
 8007350:	095b      	lsrs	r3, r3, #5
 8007352:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	469b      	mov	fp, r3
 800735a:	f04f 0c00 	mov.w	ip, #0
 800735e:	46d9      	mov	r9, fp
 8007360:	46e2      	mov	sl, ip
 8007362:	eb19 0309 	adds.w	r3, r9, r9
 8007366:	eb4a 040a 	adc.w	r4, sl, sl
 800736a:	4699      	mov	r9, r3
 800736c:	46a2      	mov	sl, r4
 800736e:	eb19 090b 	adds.w	r9, r9, fp
 8007372:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007376:	f04f 0100 	mov.w	r1, #0
 800737a:	f04f 0200 	mov.w	r2, #0
 800737e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007382:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007386:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800738a:	4689      	mov	r9, r1
 800738c:	4692      	mov	sl, r2
 800738e:	eb1b 0509 	adds.w	r5, fp, r9
 8007392:	eb4c 060a 	adc.w	r6, ip, sl
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	4619      	mov	r1, r3
 800739c:	f04f 0200 	mov.w	r2, #0
 80073a0:	f04f 0300 	mov.w	r3, #0
 80073a4:	f04f 0400 	mov.w	r4, #0
 80073a8:	0094      	lsls	r4, r2, #2
 80073aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80073ae:	008b      	lsls	r3, r1, #2
 80073b0:	461a      	mov	r2, r3
 80073b2:	4623      	mov	r3, r4
 80073b4:	4628      	mov	r0, r5
 80073b6:	4631      	mov	r1, r6
 80073b8:	f7f8 ff8a 	bl	80002d0 <__aeabi_uldivmod>
 80073bc:	4603      	mov	r3, r0
 80073be:	460c      	mov	r4, r1
 80073c0:	461a      	mov	r2, r3
 80073c2:	4b34      	ldr	r3, [pc, #208]	; (8007494 <UART_SetConfig+0x72c>)
 80073c4:	fba3 1302 	umull	r1, r3, r3, r2
 80073c8:	095b      	lsrs	r3, r3, #5
 80073ca:	2164      	movs	r1, #100	; 0x64
 80073cc:	fb01 f303 	mul.w	r3, r1, r3
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	011b      	lsls	r3, r3, #4
 80073d4:	3332      	adds	r3, #50	; 0x32
 80073d6:	4a2f      	ldr	r2, [pc, #188]	; (8007494 <UART_SetConfig+0x72c>)
 80073d8:	fba2 2303 	umull	r2, r3, r2, r3
 80073dc:	095b      	lsrs	r3, r3, #5
 80073de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073e2:	4498      	add	r8, r3
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	469b      	mov	fp, r3
 80073e8:	f04f 0c00 	mov.w	ip, #0
 80073ec:	46d9      	mov	r9, fp
 80073ee:	46e2      	mov	sl, ip
 80073f0:	eb19 0309 	adds.w	r3, r9, r9
 80073f4:	eb4a 040a 	adc.w	r4, sl, sl
 80073f8:	4699      	mov	r9, r3
 80073fa:	46a2      	mov	sl, r4
 80073fc:	eb19 090b 	adds.w	r9, r9, fp
 8007400:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007404:	f04f 0100 	mov.w	r1, #0
 8007408:	f04f 0200 	mov.w	r2, #0
 800740c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007410:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007414:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007418:	4689      	mov	r9, r1
 800741a:	4692      	mov	sl, r2
 800741c:	eb1b 0509 	adds.w	r5, fp, r9
 8007420:	eb4c 060a 	adc.w	r6, ip, sl
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	4619      	mov	r1, r3
 800742a:	f04f 0200 	mov.w	r2, #0
 800742e:	f04f 0300 	mov.w	r3, #0
 8007432:	f04f 0400 	mov.w	r4, #0
 8007436:	0094      	lsls	r4, r2, #2
 8007438:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800743c:	008b      	lsls	r3, r1, #2
 800743e:	461a      	mov	r2, r3
 8007440:	4623      	mov	r3, r4
 8007442:	4628      	mov	r0, r5
 8007444:	4631      	mov	r1, r6
 8007446:	f7f8 ff43 	bl	80002d0 <__aeabi_uldivmod>
 800744a:	4603      	mov	r3, r0
 800744c:	460c      	mov	r4, r1
 800744e:	461a      	mov	r2, r3
 8007450:	4b10      	ldr	r3, [pc, #64]	; (8007494 <UART_SetConfig+0x72c>)
 8007452:	fba3 1302 	umull	r1, r3, r3, r2
 8007456:	095b      	lsrs	r3, r3, #5
 8007458:	2164      	movs	r1, #100	; 0x64
 800745a:	fb01 f303 	mul.w	r3, r1, r3
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	011b      	lsls	r3, r3, #4
 8007462:	3332      	adds	r3, #50	; 0x32
 8007464:	4a0b      	ldr	r2, [pc, #44]	; (8007494 <UART_SetConfig+0x72c>)
 8007466:	fba2 2303 	umull	r2, r3, r2, r3
 800746a:	095b      	lsrs	r3, r3, #5
 800746c:	f003 020f 	and.w	r2, r3, #15
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4442      	add	r2, r8
 8007476:	609a      	str	r2, [r3, #8]
}
 8007478:	e7ff      	b.n	800747a <UART_SetConfig+0x712>
 800747a:	bf00      	nop
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007484:	40011000 	.word	0x40011000
 8007488:	40011400 	.word	0x40011400
 800748c:	40011800 	.word	0x40011800
 8007490:	40011c00 	.word	0x40011c00
 8007494:	51eb851f 	.word	0x51eb851f

08007498 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b0:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4b2f      	ldr	r3, [pc, #188]	; (8007574 <FSMC_NORSRAM_Init+0xdc>)
 80074b6:	4013      	ands	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80074c2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80074c8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80074ce:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80074d4:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 80074da:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80074e0:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80074e6:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80074ec:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80074f2:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 80074f8:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 80074fe:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8007504:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800750a:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	2b08      	cmp	r3, #8
 8007518:	d103      	bne.n	8007522 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007520:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	68f9      	ldr	r1, [r7, #12]
 800752a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007536:	d10a      	bne.n	800754e <FSMC_NORSRAM_Init+0xb6>
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d006      	beq.n	800754e <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007548:	431a      	orrs	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d006      	beq.n	8007564 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755e:	431a      	orrs	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	ffc00480 	.word	0xffc00480

08007578 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007578:	b480      	push	{r7}
 800757a:	b087      	sub	sp, #28
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007584:	2300      	movs	r3, #0
 8007586:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007592:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800759a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80075a6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80075ae:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80075b6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	3b01      	subs	r3, #1
 80075be:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80075c0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	3b02      	subs	r3, #2
 80075c8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80075ca:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80075d0:	4313      	orrs	r3, r2
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6979      	ldr	r1, [r7, #20]
 80075e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075f0:	d10e      	bne.n	8007610 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075fa:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	3b01      	subs	r3, #1
 8007602:	051b      	lsls	r3, r3, #20
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	4313      	orrs	r3, r2
 8007608:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	371c      	adds	r7, #28
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
	...

08007620 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007620:	b480      	push	{r7}
 8007622:	b087      	sub	sp, #28
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
 800762c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007638:	d122      	bne.n	8007680 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007642:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	4b15      	ldr	r3, [pc, #84]	; (800769c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007648:	4013      	ands	r3, r2
 800764a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007656:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800765e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007666:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800766c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	4313      	orrs	r3, r2
 8007672:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	6979      	ldr	r1, [r7, #20]
 800767a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800767e:	e005      	b.n	800768c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	371c      	adds	r7, #28
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	cff00000 	.word	0xcff00000

080076a0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80076a0:	b084      	sub	sp, #16
 80076a2:	b480      	push	{r7}
 80076a4:	b085      	sub	sp, #20
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	f107 001c 	add.w	r0, r7, #28
 80076ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80076b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80076b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80076ba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80076bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80076be:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80076c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80076c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80076c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80076ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80076da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	431a      	orrs	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	b004      	add	sp, #16
 80076f4:	4770      	bx	lr

080076f6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b083      	sub	sp, #12
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007704:	4618      	mov	r0, r3
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007732:	b580      	push	{r7, lr}
 8007734:	b082      	sub	sp, #8
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2203      	movs	r2, #3
 800773e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007740:	2002      	movs	r0, #2
 8007742:	f7fb fb1d 	bl	8002d80 <HAL_Delay>
  
  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0303 	and.w	r3, r3, #3
}
 8007760:	4618      	mov	r0, r3
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800778a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007790:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007796:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	4313      	orrs	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80077a6:	f023 030f 	bic.w	r3, r3, #15
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	431a      	orrs	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	b2db      	uxtb	r3, r3
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80077da:	b480      	push	{r7}
 80077dc:	b085      	sub	sp, #20
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3314      	adds	r3, #20
 80077e8:	461a      	mov	r2, r3
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	4413      	add	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
}  
 80077f4:	4618      	mov	r0, r3
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800780a:	2300      	movs	r3, #0
 800780c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007826:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800782c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007832:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	4313      	orrs	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800784a:	2300      	movs	r3, #0

}
 800784c:	4618      	mov	r0, r3
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b088      	sub	sp, #32
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007866:	2310      	movs	r3, #16
 8007868:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800786a:	2340      	movs	r3, #64	; 0x40
 800786c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800786e:	2300      	movs	r3, #0
 8007870:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007876:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007878:	f107 0308 	add.w	r3, r7, #8
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7ff ff74 	bl	800776c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007884:	f241 3288 	movw	r2, #5000	; 0x1388
 8007888:	2110      	movs	r1, #16
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f9fe 	bl	8007c8c <SDMMC_GetCmdResp1>
 8007890:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007892:	69fb      	ldr	r3, [r7, #28]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3720      	adds	r7, #32
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b088      	sub	sp, #32
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80078aa:	2311      	movs	r3, #17
 80078ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078ae:	2340      	movs	r3, #64	; 0x40
 80078b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078b2:	2300      	movs	r3, #0
 80078b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078bc:	f107 0308 	add.w	r3, r7, #8
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7ff ff52 	bl	800776c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80078c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80078cc:	2111      	movs	r1, #17
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f9dc 	bl	8007c8c <SDMMC_GetCmdResp1>
 80078d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078d6:	69fb      	ldr	r3, [r7, #28]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3720      	adds	r7, #32
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b088      	sub	sp, #32
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80078ee:	2312      	movs	r3, #18
 80078f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078f2:	2340      	movs	r3, #64	; 0x40
 80078f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078f6:	2300      	movs	r3, #0
 80078f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007900:	f107 0308 	add.w	r3, r7, #8
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff ff30 	bl	800776c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800790c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007910:	2112      	movs	r1, #18
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f9ba 	bl	8007c8c <SDMMC_GetCmdResp1>
 8007918:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800791a:	69fb      	ldr	r3, [r7, #28]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3720      	adds	r7, #32
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007932:	2318      	movs	r3, #24
 8007934:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007936:	2340      	movs	r3, #64	; 0x40
 8007938:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800793a:	2300      	movs	r3, #0
 800793c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800793e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007942:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007944:	f107 0308 	add.w	r3, r7, #8
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7ff ff0e 	bl	800776c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007950:	f241 3288 	movw	r2, #5000	; 0x1388
 8007954:	2118      	movs	r1, #24
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f998 	bl	8007c8c <SDMMC_GetCmdResp1>
 800795c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800795e:	69fb      	ldr	r3, [r7, #28]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3720      	adds	r7, #32
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007976:	2319      	movs	r3, #25
 8007978:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800797a:	2340      	movs	r3, #64	; 0x40
 800797c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800797e:	2300      	movs	r3, #0
 8007980:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007986:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007988:	f107 0308 	add.w	r3, r7, #8
 800798c:	4619      	mov	r1, r3
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7ff feec 	bl	800776c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007994:	f241 3288 	movw	r2, #5000	; 0x1388
 8007998:	2119      	movs	r1, #25
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f976 	bl	8007c8c <SDMMC_GetCmdResp1>
 80079a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079a2:	69fb      	ldr	r3, [r7, #28]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3720      	adds	r7, #32
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b088      	sub	sp, #32
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80079b8:	230c      	movs	r3, #12
 80079ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079bc:	2340      	movs	r3, #64	; 0x40
 80079be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079c0:	2300      	movs	r3, #0
 80079c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079ca:	f107 0308 	add.w	r3, r7, #8
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7ff fecb 	bl	800776c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80079d6:	4a05      	ldr	r2, [pc, #20]	; (80079ec <SDMMC_CmdStopTransfer+0x40>)
 80079d8:	210c      	movs	r1, #12
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f956 	bl	8007c8c <SDMMC_GetCmdResp1>
 80079e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079e2:	69fb      	ldr	r3, [r7, #28]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3720      	adds	r7, #32
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	05f5e100 	.word	0x05f5e100

080079f0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b08a      	sub	sp, #40	; 0x28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007a00:	2307      	movs	r3, #7
 8007a02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a04:	2340      	movs	r3, #64	; 0x40
 8007a06:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a10:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a12:	f107 0310 	add.w	r3, r7, #16
 8007a16:	4619      	mov	r1, r3
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f7ff fea7 	bl	800776c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a22:	2107      	movs	r1, #7
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 f931 	bl	8007c8c <SDMMC_GetCmdResp1>
 8007a2a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3728      	adds	r7, #40	; 0x28
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b088      	sub	sp, #32
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007a42:	2300      	movs	r3, #0
 8007a44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007a46:	2300      	movs	r3, #0
 8007a48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a54:	f107 0308 	add.w	r3, r7, #8
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7ff fe86 	bl	800776c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f8eb 	bl	8007c3c <SDMMC_GetCmdError>
 8007a66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a68:	69fb      	ldr	r3, [r7, #28]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3720      	adds	r7, #32
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b088      	sub	sp, #32
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007a7a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007a7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007a80:	2308      	movs	r3, #8
 8007a82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a84:	2340      	movs	r3, #64	; 0x40
 8007a86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a92:	f107 0308 	add.w	r3, r7, #8
 8007a96:	4619      	mov	r1, r3
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7ff fe67 	bl	800776c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fad4 	bl	800804c <SDMMC_GetCmdResp7>
 8007aa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007aa6:	69fb      	ldr	r3, [r7, #28]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3720      	adds	r7, #32
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b088      	sub	sp, #32
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007abe:	2337      	movs	r3, #55	; 0x37
 8007ac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ac2:	2340      	movs	r3, #64	; 0x40
 8007ac4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ace:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ad0:	f107 0308 	add.w	r3, r7, #8
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7ff fe48 	bl	800776c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ae0:	2137      	movs	r1, #55	; 0x37
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f8d2 	bl	8007c8c <SDMMC_GetCmdResp1>
 8007ae8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007aea:	69fb      	ldr	r3, [r7, #28]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3720      	adds	r7, #32
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007b0a:	2329      	movs	r3, #41	; 0x29
 8007b0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b0e:	2340      	movs	r3, #64	; 0x40
 8007b10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b12:	2300      	movs	r3, #0
 8007b14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b1c:	f107 0308 	add.w	r3, r7, #8
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7ff fe22 	bl	800776c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f9e1 	bl	8007ef0 <SDMMC_GetCmdResp3>
 8007b2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b30:	69fb      	ldr	r3, [r7, #28]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3720      	adds	r7, #32
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b088      	sub	sp, #32
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007b46:	2302      	movs	r3, #2
 8007b48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007b4a:	23c0      	movs	r3, #192	; 0xc0
 8007b4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b58:	f107 0308 	add.w	r3, r7, #8
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7ff fe04 	bl	800776c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f97d 	bl	8007e64 <SDMMC_GetCmdResp2>
 8007b6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b6c:	69fb      	ldr	r3, [r7, #28]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3720      	adds	r7, #32
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b088      	sub	sp, #32
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007b84:	2309      	movs	r3, #9
 8007b86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007b88:	23c0      	movs	r3, #192	; 0xc0
 8007b8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b96:	f107 0308 	add.w	r3, r7, #8
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7ff fde5 	bl	800776c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f95e 	bl	8007e64 <SDMMC_GetCmdResp2>
 8007ba8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007baa:	69fb      	ldr	r3, [r7, #28]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3720      	adds	r7, #32
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bc6:	2340      	movs	r3, #64	; 0x40
 8007bc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bd4:	f107 0308 	add.w	r3, r7, #8
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7ff fdc6 	bl	800776c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	2103      	movs	r1, #3
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f9bd 	bl	8007f64 <SDMMC_GetCmdResp6>
 8007bea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bec:	69fb      	ldr	r3, [r7, #28]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3720      	adds	r7, #32
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b088      	sub	sp, #32
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007c04:	230d      	movs	r3, #13
 8007c06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c08:	2340      	movs	r3, #64	; 0x40
 8007c0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c16:	f107 0308 	add.w	r3, r7, #8
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff fda5 	bl	800776c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c26:	210d      	movs	r1, #13
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f82f 	bl	8007c8c <SDMMC_GetCmdResp1>
 8007c2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c30:	69fb      	ldr	r3, [r7, #28]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3720      	adds	r7, #32
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
	...

08007c3c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007c3c:	b490      	push	{r4, r7}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c44:	4b0f      	ldr	r3, [pc, #60]	; (8007c84 <SDMMC_GetCmdError+0x48>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a0f      	ldr	r2, [pc, #60]	; (8007c88 <SDMMC_GetCmdError+0x4c>)
 8007c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c4e:	0a5b      	lsrs	r3, r3, #9
 8007c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c54:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007c58:	4623      	mov	r3, r4
 8007c5a:	1e5c      	subs	r4, r3, #1
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d102      	bne.n	8007c66 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c64:	e009      	b.n	8007c7a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0f2      	beq.n	8007c58 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	22c5      	movs	r2, #197	; 0xc5
 8007c76:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bc90      	pop	{r4, r7}
 8007c82:	4770      	bx	lr
 8007c84:	2000001c 	.word	0x2000001c
 8007c88:	10624dd3 	.word	0x10624dd3

08007c8c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007c8c:	b590      	push	{r4, r7, lr}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	460b      	mov	r3, r1
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007c9a:	4b6f      	ldr	r3, [pc, #444]	; (8007e58 <SDMMC_GetCmdResp1+0x1cc>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a6f      	ldr	r2, [pc, #444]	; (8007e5c <SDMMC_GetCmdResp1+0x1d0>)
 8007ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca4:	0a5b      	lsrs	r3, r3, #9
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007cac:	4623      	mov	r3, r4
 8007cae:	1e5c      	subs	r4, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d102      	bne.n	8007cba <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007cb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007cb8:	e0c9      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cbe:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d0f0      	beq.n	8007cac <SDMMC_GetCmdResp1+0x20>
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1eb      	bne.n	8007cac <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd8:	f003 0304 	and.w	r3, r3, #4
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d004      	beq.n	8007cea <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2204      	movs	r2, #4
 8007ce4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ce6:	2304      	movs	r3, #4
 8007ce8:	e0b1      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d004      	beq.n	8007d00 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e0a6      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	22c5      	movs	r2, #197	; 0xc5
 8007d04:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f7ff fd5a 	bl	80077c0 <SDIO_GetCommandResponse>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	461a      	mov	r2, r3
 8007d10:	7afb      	ldrb	r3, [r7, #11]
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d001      	beq.n	8007d1a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e099      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f7ff fd5c 	bl	80077da <SDIO_GetResponse>
 8007d22:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	4b4e      	ldr	r3, [pc, #312]	; (8007e60 <SDMMC_GetCmdResp1+0x1d4>)
 8007d28:	4013      	ands	r3, r2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e08d      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	da02      	bge.n	8007d3e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007d38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d3c:	e087      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007d48:	2340      	movs	r3, #64	; 0x40
 8007d4a:	e080      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007d56:	2380      	movs	r3, #128	; 0x80
 8007d58:	e079      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d002      	beq.n	8007d6a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d68:	e071      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d002      	beq.n	8007d7a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d78:	e069      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d88:	e061      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007d94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d98:	e059      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007da8:	e051      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007db4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007db8:	e049      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d002      	beq.n	8007dca <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007dc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007dc8:	e041      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8007dd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dd8:	e039      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d002      	beq.n	8007dea <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007de8:	e031      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007df4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007df8:	e029      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007e04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007e08:	e021      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d002      	beq.n	8007e1a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007e14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007e18:	e019      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007e24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007e28:	e011      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007e34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007e38:	e009      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f003 0308 	and.w	r3, r3, #8
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007e44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007e48:	e001      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007e4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	371c      	adds	r7, #28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd90      	pop	{r4, r7, pc}
 8007e56:	bf00      	nop
 8007e58:	2000001c 	.word	0x2000001c
 8007e5c:	10624dd3 	.word	0x10624dd3
 8007e60:	fdffe008 	.word	0xfdffe008

08007e64 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007e64:	b490      	push	{r4, r7}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e6c:	4b1e      	ldr	r3, [pc, #120]	; (8007ee8 <SDMMC_GetCmdResp2+0x84>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a1e      	ldr	r2, [pc, #120]	; (8007eec <SDMMC_GetCmdResp2+0x88>)
 8007e72:	fba2 2303 	umull	r2, r3, r2, r3
 8007e76:	0a5b      	lsrs	r3, r3, #9
 8007e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e7c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007e80:	4623      	mov	r3, r4
 8007e82:	1e5c      	subs	r4, r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d102      	bne.n	8007e8e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e8c:	e026      	b.n	8007edc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e92:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0f0      	beq.n	8007e80 <SDMMC_GetCmdResp2+0x1c>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1eb      	bne.n	8007e80 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eac:	f003 0304 	and.w	r3, r3, #4
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d004      	beq.n	8007ebe <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2204      	movs	r2, #4
 8007eb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007eba:	2304      	movs	r3, #4
 8007ebc:	e00e      	b.n	8007edc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d004      	beq.n	8007ed4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e003      	b.n	8007edc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	22c5      	movs	r2, #197	; 0xc5
 8007ed8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bc90      	pop	{r4, r7}
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	2000001c 	.word	0x2000001c
 8007eec:	10624dd3 	.word	0x10624dd3

08007ef0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007ef0:	b490      	push	{r4, r7}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ef8:	4b18      	ldr	r3, [pc, #96]	; (8007f5c <SDMMC_GetCmdResp3+0x6c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a18      	ldr	r2, [pc, #96]	; (8007f60 <SDMMC_GetCmdResp3+0x70>)
 8007efe:	fba2 2303 	umull	r2, r3, r2, r3
 8007f02:	0a5b      	lsrs	r3, r3, #9
 8007f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f08:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007f0c:	4623      	mov	r3, r4
 8007f0e:	1e5c      	subs	r4, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d102      	bne.n	8007f1a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f18:	e01b      	b.n	8007f52 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0f0      	beq.n	8007f0c <SDMMC_GetCmdResp3+0x1c>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1eb      	bne.n	8007f0c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d004      	beq.n	8007f4a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2204      	movs	r2, #4
 8007f44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f46:	2304      	movs	r3, #4
 8007f48:	e003      	b.n	8007f52 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	22c5      	movs	r2, #197	; 0xc5
 8007f4e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bc90      	pop	{r4, r7}
 8007f5a:	4770      	bx	lr
 8007f5c:	2000001c 	.word	0x2000001c
 8007f60:	10624dd3 	.word	0x10624dd3

08007f64 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007f64:	b590      	push	{r4, r7, lr}
 8007f66:	b087      	sub	sp, #28
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	607a      	str	r2, [r7, #4]
 8007f70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f72:	4b34      	ldr	r3, [pc, #208]	; (8008044 <SDMMC_GetCmdResp6+0xe0>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a34      	ldr	r2, [pc, #208]	; (8008048 <SDMMC_GetCmdResp6+0xe4>)
 8007f78:	fba2 2303 	umull	r2, r3, r2, r3
 8007f7c:	0a5b      	lsrs	r3, r3, #9
 8007f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f82:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007f86:	4623      	mov	r3, r4
 8007f88:	1e5c      	subs	r4, r3, #1
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d102      	bne.n	8007f94 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f92:	e052      	b.n	800803a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f98:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d0f0      	beq.n	8007f86 <SDMMC_GetCmdResp6+0x22>
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1eb      	bne.n	8007f86 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb2:	f003 0304 	and.w	r3, r3, #4
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d004      	beq.n	8007fc4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2204      	movs	r2, #4
 8007fbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007fc0:	2304      	movs	r3, #4
 8007fc2:	e03a      	b.n	800803a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d004      	beq.n	8007fda <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e02f      	b.n	800803a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f7ff fbf0 	bl	80077c0 <SDIO_GetCommandResponse>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	7afb      	ldrb	r3, [r7, #11]
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d001      	beq.n	8007fee <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e025      	b.n	800803a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	22c5      	movs	r2, #197	; 0xc5
 8007ff2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f7ff fbef 	bl	80077da <SDIO_GetResponse>
 8007ffc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d106      	bne.n	8008016 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	0c1b      	lsrs	r3, r3, #16
 800800c:	b29a      	uxth	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008012:	2300      	movs	r3, #0
 8008014:	e011      	b.n	800803a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d002      	beq.n	8008026 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008024:	e009      	b.n	800803a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d002      	beq.n	8008036 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008034:	e001      	b.n	800803a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008036:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800803a:	4618      	mov	r0, r3
 800803c:	371c      	adds	r7, #28
 800803e:	46bd      	mov	sp, r7
 8008040:	bd90      	pop	{r4, r7, pc}
 8008042:	bf00      	nop
 8008044:	2000001c 	.word	0x2000001c
 8008048:	10624dd3 	.word	0x10624dd3

0800804c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800804c:	b490      	push	{r4, r7}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008054:	4b21      	ldr	r3, [pc, #132]	; (80080dc <SDMMC_GetCmdResp7+0x90>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a21      	ldr	r2, [pc, #132]	; (80080e0 <SDMMC_GetCmdResp7+0x94>)
 800805a:	fba2 2303 	umull	r2, r3, r2, r3
 800805e:	0a5b      	lsrs	r3, r3, #9
 8008060:	f241 3288 	movw	r2, #5000	; 0x1388
 8008064:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008068:	4623      	mov	r3, r4
 800806a:	1e5c      	subs	r4, r3, #1
 800806c:	2b00      	cmp	r3, #0
 800806e:	d102      	bne.n	8008076 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008070:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008074:	e02c      	b.n	80080d0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800807a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008082:	2b00      	cmp	r3, #0
 8008084:	d0f0      	beq.n	8008068 <SDMMC_GetCmdResp7+0x1c>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1eb      	bne.n	8008068 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008094:	f003 0304 	and.w	r3, r3, #4
 8008098:	2b00      	cmp	r3, #0
 800809a:	d004      	beq.n	80080a6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2204      	movs	r2, #4
 80080a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80080a2:	2304      	movs	r3, #4
 80080a4:	e014      	b.n	80080d0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080aa:	f003 0301 	and.w	r3, r3, #1
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d004      	beq.n	80080bc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e009      	b.n	80080d0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d002      	beq.n	80080ce <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2240      	movs	r2, #64	; 0x40
 80080cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80080ce:	2300      	movs	r3, #0
  
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bc90      	pop	{r4, r7}
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	2000001c 	.word	0x2000001c
 80080e0:	10624dd3 	.word	0x10624dd3

080080e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80080e8:	4904      	ldr	r1, [pc, #16]	; (80080fc <MX_FATFS_Init+0x18>)
 80080ea:	4805      	ldr	r0, [pc, #20]	; (8008100 <MX_FATFS_Init+0x1c>)
 80080ec:	f003 f8c4 	bl	800b278 <FATFS_LinkDriver>
 80080f0:	4603      	mov	r3, r0
 80080f2:	461a      	mov	r2, r3
 80080f4:	4b03      	ldr	r3, [pc, #12]	; (8008104 <MX_FATFS_Init+0x20>)
 80080f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80080f8:	bf00      	nop
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	200054c0 	.word	0x200054c0
 8008100:	0800c558 	.word	0x0800c558
 8008104:	200054bc 	.word	0x200054bc

08008108 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008108:	b480      	push	{r7}
 800810a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800810c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800810e:	4618      	mov	r0, r3
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008122:	f000 f86b 	bl	80081fc <BSP_SD_IsDetected>
 8008126:	4603      	mov	r3, r0
 8008128:	2b01      	cmp	r3, #1
 800812a:	d001      	beq.n	8008130 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e005      	b.n	800813c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008130:	4804      	ldr	r0, [pc, #16]	; (8008144 <BSP_SD_Init+0x2c>)
 8008132:	f7fd fb39 	bl	80057a8 <HAL_SD_Init>
 8008136:	4603      	mov	r3, r0
 8008138:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800813a:	79fb      	ldrb	r3, [r7, #7]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	2000361c 	.word	0x2000361c

08008148 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b088      	sub	sp, #32
 800814c:	af02      	add	r7, sp, #8
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	68f9      	ldr	r1, [r7, #12]
 8008164:	4806      	ldr	r0, [pc, #24]	; (8008180 <BSP_SD_ReadBlocks+0x38>)
 8008166:	f7fd fbaf 	bl	80058c8 <HAL_SD_ReadBlocks>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d001      	beq.n	8008174 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008174:	7dfb      	ldrb	r3, [r7, #23]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	2000361c 	.word	0x2000361c

08008184 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b088      	sub	sp, #32
 8008188:	af02      	add	r7, sp, #8
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
 8008190:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	68f9      	ldr	r1, [r7, #12]
 80081a0:	4806      	ldr	r0, [pc, #24]	; (80081bc <BSP_SD_WriteBlocks+0x38>)
 80081a2:	f7fd fd89 	bl	8005cb8 <HAL_SD_WriteBlocks>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3718      	adds	r7, #24
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	2000361c 	.word	0x2000361c

080081c0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80081c4:	4805      	ldr	r0, [pc, #20]	; (80081dc <BSP_SD_GetCardState+0x1c>)
 80081c6:	f7fe f8e7 	bl	8006398 <HAL_SD_GetCardState>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b04      	cmp	r3, #4
 80081ce:	bf14      	ite	ne
 80081d0:	2301      	movne	r3, #1
 80081d2:	2300      	moveq	r3, #0
 80081d4:	b2db      	uxtb	r3, r3
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	2000361c 	.word	0x2000361c

080081e0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80081e8:	6879      	ldr	r1, [r7, #4]
 80081ea:	4803      	ldr	r0, [pc, #12]	; (80081f8 <BSP_SD_GetCardInfo+0x18>)
 80081ec:	f7fe f8a8 	bl	8006340 <HAL_SD_GetCardInfo>
}
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	2000361c 	.word	0x2000361c

080081fc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008202:	2301      	movs	r3, #1
 8008204:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008206:	f000 f80b 	bl	8008220 <BSP_PlatformIsDetected>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008210:	2300      	movs	r3, #0
 8008212:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008214:	79fb      	ldrb	r3, [r7, #7]
 8008216:	b2db      	uxtb	r3, r3
}
 8008218:	4618      	mov	r0, r3
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008226:	2301      	movs	r3, #1
 8008228:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800822a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800822e:	4806      	ldr	r0, [pc, #24]	; (8008248 <BSP_PlatformIsDetected+0x28>)
 8008230:	f7fc fb2c 	bl	800488c <HAL_GPIO_ReadPin>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800823a:	2300      	movs	r3, #0
 800823c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800823e:	79fb      	ldrb	r3, [r7, #7]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	40021400 	.word	0x40021400

0800824c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	4603      	mov	r3, r0
 8008254:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008256:	4b0b      	ldr	r3, [pc, #44]	; (8008284 <SD_CheckStatus+0x38>)
 8008258:	2201      	movs	r2, #1
 800825a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800825c:	f7ff ffb0 	bl	80081c0 <BSP_SD_GetCardState>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d107      	bne.n	8008276 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008266:	4b07      	ldr	r3, [pc, #28]	; (8008284 <SD_CheckStatus+0x38>)
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	b2db      	uxtb	r3, r3
 800826c:	f023 0301 	bic.w	r3, r3, #1
 8008270:	b2da      	uxtb	r2, r3
 8008272:	4b04      	ldr	r3, [pc, #16]	; (8008284 <SD_CheckStatus+0x38>)
 8008274:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008276:	4b03      	ldr	r3, [pc, #12]	; (8008284 <SD_CheckStatus+0x38>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	b2db      	uxtb	r3, r3
}
 800827c:	4618      	mov	r0, r3
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	2000002d 	.word	0x2000002d

08008288 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	4603      	mov	r3, r0
 8008290:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008292:	4b0b      	ldr	r3, [pc, #44]	; (80082c0 <SD_initialize+0x38>)
 8008294:	2201      	movs	r2, #1
 8008296:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008298:	f7ff ff3e 	bl	8008118 <BSP_SD_Init>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d107      	bne.n	80082b2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80082a2:	79fb      	ldrb	r3, [r7, #7]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7ff ffd1 	bl	800824c <SD_CheckStatus>
 80082aa:	4603      	mov	r3, r0
 80082ac:	461a      	mov	r2, r3
 80082ae:	4b04      	ldr	r3, [pc, #16]	; (80082c0 <SD_initialize+0x38>)
 80082b0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80082b2:	4b03      	ldr	r3, [pc, #12]	; (80082c0 <SD_initialize+0x38>)
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	b2db      	uxtb	r3, r3
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	2000002d 	.word	0x2000002d

080082c4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	4603      	mov	r3, r0
 80082cc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80082ce:	79fb      	ldrb	r3, [r7, #7]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7ff ffbb 	bl	800824c <SD_CheckStatus>
 80082d6:	4603      	mov	r3, r0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60b9      	str	r1, [r7, #8]
 80082e8:	607a      	str	r2, [r7, #4]
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	4603      	mov	r3, r0
 80082ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80082f4:	f04f 33ff 	mov.w	r3, #4294967295
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	6879      	ldr	r1, [r7, #4]
 80082fc:	68b8      	ldr	r0, [r7, #8]
 80082fe:	f7ff ff23 	bl	8008148 <BSP_SD_ReadBlocks>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d107      	bne.n	8008318 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008308:	bf00      	nop
 800830a:	f7ff ff59 	bl	80081c0 <BSP_SD_GetCardState>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1fa      	bne.n	800830a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008318:	7dfb      	ldrb	r3, [r7, #23]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b086      	sub	sp, #24
 8008326:	af00      	add	r7, sp, #0
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	603b      	str	r3, [r7, #0]
 800832e:	4603      	mov	r3, r0
 8008330:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8008336:	f04f 33ff 	mov.w	r3, #4294967295
 800833a:	683a      	ldr	r2, [r7, #0]
 800833c:	6879      	ldr	r1, [r7, #4]
 800833e:	68b8      	ldr	r0, [r7, #8]
 8008340:	f7ff ff20 	bl	8008184 <BSP_SD_WriteBlocks>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d107      	bne.n	800835a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800834a:	bf00      	nop
 800834c:	f7ff ff38 	bl	80081c0 <BSP_SD_GetCardState>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1fa      	bne.n	800834c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800835a:	7dfb      	ldrb	r3, [r7, #23]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b08c      	sub	sp, #48	; 0x30
 8008368:	af00      	add	r7, sp, #0
 800836a:	4603      	mov	r3, r0
 800836c:	603a      	str	r2, [r7, #0]
 800836e:	71fb      	strb	r3, [r7, #7]
 8008370:	460b      	mov	r3, r1
 8008372:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800837a:	4b25      	ldr	r3, [pc, #148]	; (8008410 <SD_ioctl+0xac>)
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	b2db      	uxtb	r3, r3
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <SD_ioctl+0x28>
 8008388:	2303      	movs	r3, #3
 800838a:	e03c      	b.n	8008406 <SD_ioctl+0xa2>

  switch (cmd)
 800838c:	79bb      	ldrb	r3, [r7, #6]
 800838e:	2b03      	cmp	r3, #3
 8008390:	d834      	bhi.n	80083fc <SD_ioctl+0x98>
 8008392:	a201      	add	r2, pc, #4	; (adr r2, 8008398 <SD_ioctl+0x34>)
 8008394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008398:	080083a9 	.word	0x080083a9
 800839c:	080083b1 	.word	0x080083b1
 80083a0:	080083c9 	.word	0x080083c9
 80083a4:	080083e3 	.word	0x080083e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80083a8:	2300      	movs	r3, #0
 80083aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80083ae:	e028      	b.n	8008402 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80083b0:	f107 030c 	add.w	r3, r7, #12
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7ff ff13 	bl	80081e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80083ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80083c6:	e01c      	b.n	8008402 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80083c8:	f107 030c 	add.w	r3, r7, #12
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7ff ff07 	bl	80081e0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80083d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80083e0:	e00f      	b.n	8008402 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80083e2:	f107 030c 	add.w	r3, r7, #12
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7ff fefa 	bl	80081e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80083ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ee:	0a5a      	lsrs	r2, r3, #9
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80083fa:	e002      	b.n	8008402 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80083fc:	2304      	movs	r3, #4
 80083fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008402:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008406:	4618      	mov	r0, r3
 8008408:	3730      	adds	r7, #48	; 0x30
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	2000002d 	.word	0x2000002d

08008414 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	6039      	str	r1, [r7, #0]
 800841e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008420:	88fb      	ldrh	r3, [r7, #6]
 8008422:	2b7f      	cmp	r3, #127	; 0x7f
 8008424:	d802      	bhi.n	800842c <ff_convert+0x18>
		c = chr;
 8008426:	88fb      	ldrh	r3, [r7, #6]
 8008428:	81fb      	strh	r3, [r7, #14]
 800842a:	e025      	b.n	8008478 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00b      	beq.n	800844a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008432:	88fb      	ldrh	r3, [r7, #6]
 8008434:	2bff      	cmp	r3, #255	; 0xff
 8008436:	d805      	bhi.n	8008444 <ff_convert+0x30>
 8008438:	88fb      	ldrh	r3, [r7, #6]
 800843a:	3b80      	subs	r3, #128	; 0x80
 800843c:	4a12      	ldr	r2, [pc, #72]	; (8008488 <ff_convert+0x74>)
 800843e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008442:	e000      	b.n	8008446 <ff_convert+0x32>
 8008444:	2300      	movs	r3, #0
 8008446:	81fb      	strh	r3, [r7, #14]
 8008448:	e016      	b.n	8008478 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800844a:	2300      	movs	r3, #0
 800844c:	81fb      	strh	r3, [r7, #14]
 800844e:	e009      	b.n	8008464 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008450:	89fb      	ldrh	r3, [r7, #14]
 8008452:	4a0d      	ldr	r2, [pc, #52]	; (8008488 <ff_convert+0x74>)
 8008454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008458:	88fa      	ldrh	r2, [r7, #6]
 800845a:	429a      	cmp	r2, r3
 800845c:	d006      	beq.n	800846c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800845e:	89fb      	ldrh	r3, [r7, #14]
 8008460:	3301      	adds	r3, #1
 8008462:	81fb      	strh	r3, [r7, #14]
 8008464:	89fb      	ldrh	r3, [r7, #14]
 8008466:	2b7f      	cmp	r3, #127	; 0x7f
 8008468:	d9f2      	bls.n	8008450 <ff_convert+0x3c>
 800846a:	e000      	b.n	800846e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800846c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800846e:	89fb      	ldrh	r3, [r7, #14]
 8008470:	3380      	adds	r3, #128	; 0x80
 8008472:	b29b      	uxth	r3, r3
 8008474:	b2db      	uxtb	r3, r3
 8008476:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008478:	89fb      	ldrh	r3, [r7, #14]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	0800c56c 	.word	0x0800c56c

0800848c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800848c:	b480      	push	{r7}
 800848e:	b087      	sub	sp, #28
 8008490:	af00      	add	r7, sp, #0
 8008492:	4603      	mov	r3, r0
 8008494:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008496:	88fb      	ldrh	r3, [r7, #6]
 8008498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800849c:	d201      	bcs.n	80084a2 <ff_wtoupper+0x16>
 800849e:	4b3e      	ldr	r3, [pc, #248]	; (8008598 <ff_wtoupper+0x10c>)
 80084a0:	e000      	b.n	80084a4 <ff_wtoupper+0x18>
 80084a2:	4b3e      	ldr	r3, [pc, #248]	; (800859c <ff_wtoupper+0x110>)
 80084a4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	1c9a      	adds	r2, r3, #2
 80084aa:	617a      	str	r2, [r7, #20]
 80084ac:	881b      	ldrh	r3, [r3, #0]
 80084ae:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80084b0:	8a7b      	ldrh	r3, [r7, #18]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d068      	beq.n	8008588 <ff_wtoupper+0xfc>
 80084b6:	88fa      	ldrh	r2, [r7, #6]
 80084b8:	8a7b      	ldrh	r3, [r7, #18]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d364      	bcc.n	8008588 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	1c9a      	adds	r2, r3, #2
 80084c2:	617a      	str	r2, [r7, #20]
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	823b      	strh	r3, [r7, #16]
 80084c8:	8a3b      	ldrh	r3, [r7, #16]
 80084ca:	0a1b      	lsrs	r3, r3, #8
 80084cc:	81fb      	strh	r3, [r7, #14]
 80084ce:	8a3b      	ldrh	r3, [r7, #16]
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80084d4:	88fa      	ldrh	r2, [r7, #6]
 80084d6:	8a79      	ldrh	r1, [r7, #18]
 80084d8:	8a3b      	ldrh	r3, [r7, #16]
 80084da:	440b      	add	r3, r1
 80084dc:	429a      	cmp	r2, r3
 80084de:	da49      	bge.n	8008574 <ff_wtoupper+0xe8>
			switch (cmd) {
 80084e0:	89fb      	ldrh	r3, [r7, #14]
 80084e2:	2b08      	cmp	r3, #8
 80084e4:	d84f      	bhi.n	8008586 <ff_wtoupper+0xfa>
 80084e6:	a201      	add	r2, pc, #4	; (adr r2, 80084ec <ff_wtoupper+0x60>)
 80084e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ec:	08008511 	.word	0x08008511
 80084f0:	08008523 	.word	0x08008523
 80084f4:	08008539 	.word	0x08008539
 80084f8:	08008541 	.word	0x08008541
 80084fc:	08008549 	.word	0x08008549
 8008500:	08008551 	.word	0x08008551
 8008504:	08008559 	.word	0x08008559
 8008508:	08008561 	.word	0x08008561
 800850c:	08008569 	.word	0x08008569
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008510:	88fa      	ldrh	r2, [r7, #6]
 8008512:	8a7b      	ldrh	r3, [r7, #18]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	005b      	lsls	r3, r3, #1
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	4413      	add	r3, r2
 800851c:	881b      	ldrh	r3, [r3, #0]
 800851e:	80fb      	strh	r3, [r7, #6]
 8008520:	e027      	b.n	8008572 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008522:	88fa      	ldrh	r2, [r7, #6]
 8008524:	8a7b      	ldrh	r3, [r7, #18]
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	b29b      	uxth	r3, r3
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	b29b      	uxth	r3, r3
 8008530:	88fa      	ldrh	r2, [r7, #6]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	80fb      	strh	r3, [r7, #6]
 8008536:	e01c      	b.n	8008572 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008538:	88fb      	ldrh	r3, [r7, #6]
 800853a:	3b10      	subs	r3, #16
 800853c:	80fb      	strh	r3, [r7, #6]
 800853e:	e018      	b.n	8008572 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008540:	88fb      	ldrh	r3, [r7, #6]
 8008542:	3b20      	subs	r3, #32
 8008544:	80fb      	strh	r3, [r7, #6]
 8008546:	e014      	b.n	8008572 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008548:	88fb      	ldrh	r3, [r7, #6]
 800854a:	3b30      	subs	r3, #48	; 0x30
 800854c:	80fb      	strh	r3, [r7, #6]
 800854e:	e010      	b.n	8008572 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008550:	88fb      	ldrh	r3, [r7, #6]
 8008552:	3b1a      	subs	r3, #26
 8008554:	80fb      	strh	r3, [r7, #6]
 8008556:	e00c      	b.n	8008572 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008558:	88fb      	ldrh	r3, [r7, #6]
 800855a:	3308      	adds	r3, #8
 800855c:	80fb      	strh	r3, [r7, #6]
 800855e:	e008      	b.n	8008572 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008560:	88fb      	ldrh	r3, [r7, #6]
 8008562:	3b50      	subs	r3, #80	; 0x50
 8008564:	80fb      	strh	r3, [r7, #6]
 8008566:	e004      	b.n	8008572 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008568:	88fb      	ldrh	r3, [r7, #6]
 800856a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800856e:	80fb      	strh	r3, [r7, #6]
 8008570:	bf00      	nop
			}
			break;
 8008572:	e008      	b.n	8008586 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008574:	89fb      	ldrh	r3, [r7, #14]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d195      	bne.n	80084a6 <ff_wtoupper+0x1a>
 800857a:	8a3b      	ldrh	r3, [r7, #16]
 800857c:	005b      	lsls	r3, r3, #1
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	4413      	add	r3, r2
 8008582:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008584:	e78f      	b.n	80084a6 <ff_wtoupper+0x1a>
			break;
 8008586:	bf00      	nop
	}

	return chr;
 8008588:	88fb      	ldrh	r3, [r7, #6]
}
 800858a:	4618      	mov	r0, r3
 800858c:	371c      	adds	r7, #28
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	0800c66c 	.word	0x0800c66c
 800859c:	0800c860 	.word	0x0800c860

080085a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4603      	mov	r3, r0
 80085a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80085aa:	79fb      	ldrb	r3, [r7, #7]
 80085ac:	4a08      	ldr	r2, [pc, #32]	; (80085d0 <disk_status+0x30>)
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4413      	add	r3, r2
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	79fa      	ldrb	r2, [r7, #7]
 80085b8:	4905      	ldr	r1, [pc, #20]	; (80085d0 <disk_status+0x30>)
 80085ba:	440a      	add	r2, r1
 80085bc:	7a12      	ldrb	r2, [r2, #8]
 80085be:	4610      	mov	r0, r2
 80085c0:	4798      	blx	r3
 80085c2:	4603      	mov	r3, r0
 80085c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	20000348 	.word	0x20000348

080085d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	4603      	mov	r3, r0
 80085dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80085e2:	79fb      	ldrb	r3, [r7, #7]
 80085e4:	4a0d      	ldr	r2, [pc, #52]	; (800861c <disk_initialize+0x48>)
 80085e6:	5cd3      	ldrb	r3, [r2, r3]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d111      	bne.n	8008610 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80085ec:	79fb      	ldrb	r3, [r7, #7]
 80085ee:	4a0b      	ldr	r2, [pc, #44]	; (800861c <disk_initialize+0x48>)
 80085f0:	2101      	movs	r1, #1
 80085f2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80085f4:	79fb      	ldrb	r3, [r7, #7]
 80085f6:	4a09      	ldr	r2, [pc, #36]	; (800861c <disk_initialize+0x48>)
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	79fa      	ldrb	r2, [r7, #7]
 8008602:	4906      	ldr	r1, [pc, #24]	; (800861c <disk_initialize+0x48>)
 8008604:	440a      	add	r2, r1
 8008606:	7a12      	ldrb	r2, [r2, #8]
 8008608:	4610      	mov	r0, r2
 800860a:	4798      	blx	r3
 800860c:	4603      	mov	r3, r0
 800860e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008610:	7bfb      	ldrb	r3, [r7, #15]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	20000348 	.word	0x20000348

08008620 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008620:	b590      	push	{r4, r7, lr}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	60b9      	str	r1, [r7, #8]
 8008628:	607a      	str	r2, [r7, #4]
 800862a:	603b      	str	r3, [r7, #0]
 800862c:	4603      	mov	r3, r0
 800862e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008630:	7bfb      	ldrb	r3, [r7, #15]
 8008632:	4a0a      	ldr	r2, [pc, #40]	; (800865c <disk_read+0x3c>)
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4413      	add	r3, r2
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	689c      	ldr	r4, [r3, #8]
 800863c:	7bfb      	ldrb	r3, [r7, #15]
 800863e:	4a07      	ldr	r2, [pc, #28]	; (800865c <disk_read+0x3c>)
 8008640:	4413      	add	r3, r2
 8008642:	7a18      	ldrb	r0, [r3, #8]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	68b9      	ldr	r1, [r7, #8]
 800864a:	47a0      	blx	r4
 800864c:	4603      	mov	r3, r0
 800864e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008650:	7dfb      	ldrb	r3, [r7, #23]
}
 8008652:	4618      	mov	r0, r3
 8008654:	371c      	adds	r7, #28
 8008656:	46bd      	mov	sp, r7
 8008658:	bd90      	pop	{r4, r7, pc}
 800865a:	bf00      	nop
 800865c:	20000348 	.word	0x20000348

08008660 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008660:	b590      	push	{r4, r7, lr}
 8008662:	b087      	sub	sp, #28
 8008664:	af00      	add	r7, sp, #0
 8008666:	60b9      	str	r1, [r7, #8]
 8008668:	607a      	str	r2, [r7, #4]
 800866a:	603b      	str	r3, [r7, #0]
 800866c:	4603      	mov	r3, r0
 800866e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008670:	7bfb      	ldrb	r3, [r7, #15]
 8008672:	4a0a      	ldr	r2, [pc, #40]	; (800869c <disk_write+0x3c>)
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	68dc      	ldr	r4, [r3, #12]
 800867c:	7bfb      	ldrb	r3, [r7, #15]
 800867e:	4a07      	ldr	r2, [pc, #28]	; (800869c <disk_write+0x3c>)
 8008680:	4413      	add	r3, r2
 8008682:	7a18      	ldrb	r0, [r3, #8]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	68b9      	ldr	r1, [r7, #8]
 800868a:	47a0      	blx	r4
 800868c:	4603      	mov	r3, r0
 800868e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008690:	7dfb      	ldrb	r3, [r7, #23]
}
 8008692:	4618      	mov	r0, r3
 8008694:	371c      	adds	r7, #28
 8008696:	46bd      	mov	sp, r7
 8008698:	bd90      	pop	{r4, r7, pc}
 800869a:	bf00      	nop
 800869c:	20000348 	.word	0x20000348

080086a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	4603      	mov	r3, r0
 80086a8:	603a      	str	r2, [r7, #0]
 80086aa:	71fb      	strb	r3, [r7, #7]
 80086ac:	460b      	mov	r3, r1
 80086ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80086b0:	79fb      	ldrb	r3, [r7, #7]
 80086b2:	4a09      	ldr	r2, [pc, #36]	; (80086d8 <disk_ioctl+0x38>)
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	79fa      	ldrb	r2, [r7, #7]
 80086be:	4906      	ldr	r1, [pc, #24]	; (80086d8 <disk_ioctl+0x38>)
 80086c0:	440a      	add	r2, r1
 80086c2:	7a10      	ldrb	r0, [r2, #8]
 80086c4:	79b9      	ldrb	r1, [r7, #6]
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	4798      	blx	r3
 80086ca:	4603      	mov	r3, r0
 80086cc:	73fb      	strb	r3, [r7, #15]
  return res;
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	20000348 	.word	0x20000348

080086dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	3301      	adds	r3, #1
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80086ec:	89fb      	ldrh	r3, [r7, #14]
 80086ee:	021b      	lsls	r3, r3, #8
 80086f0:	b21a      	sxth	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	b21b      	sxth	r3, r3
 80086f8:	4313      	orrs	r3, r2
 80086fa:	b21b      	sxth	r3, r3
 80086fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80086fe:	89fb      	ldrh	r3, [r7, #14]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3714      	adds	r7, #20
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	3303      	adds	r3, #3
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	021b      	lsls	r3, r3, #8
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	3202      	adds	r2, #2
 8008724:	7812      	ldrb	r2, [r2, #0]
 8008726:	4313      	orrs	r3, r2
 8008728:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	021b      	lsls	r3, r3, #8
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	3201      	adds	r2, #1
 8008732:	7812      	ldrb	r2, [r2, #0]
 8008734:	4313      	orrs	r3, r2
 8008736:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	021b      	lsls	r3, r3, #8
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	7812      	ldrb	r2, [r2, #0]
 8008740:	4313      	orrs	r3, r2
 8008742:	60fb      	str	r3, [r7, #12]
	return rv;
 8008744:	68fb      	ldr	r3, [r7, #12]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008752:	b480      	push	{r7}
 8008754:	b083      	sub	sp, #12
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	460b      	mov	r3, r1
 800875c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	1c5a      	adds	r2, r3, #1
 8008762:	607a      	str	r2, [r7, #4]
 8008764:	887a      	ldrh	r2, [r7, #2]
 8008766:	b2d2      	uxtb	r2, r2
 8008768:	701a      	strb	r2, [r3, #0]
 800876a:	887b      	ldrh	r3, [r7, #2]
 800876c:	0a1b      	lsrs	r3, r3, #8
 800876e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	607a      	str	r2, [r7, #4]
 8008776:	887a      	ldrh	r2, [r7, #2]
 8008778:	b2d2      	uxtb	r2, r2
 800877a:	701a      	strb	r2, [r3, #0]
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	1c5a      	adds	r2, r3, #1
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	683a      	ldr	r2, [r7, #0]
 800879a:	b2d2      	uxtb	r2, r2
 800879c:	701a      	strb	r2, [r3, #0]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	0a1b      	lsrs	r3, r3, #8
 80087a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	607a      	str	r2, [r7, #4]
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	b2d2      	uxtb	r2, r2
 80087ae:	701a      	strb	r2, [r3, #0]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	0a1b      	lsrs	r3, r3, #8
 80087b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	607a      	str	r2, [r7, #4]
 80087bc:	683a      	ldr	r2, [r7, #0]
 80087be:	b2d2      	uxtb	r2, r2
 80087c0:	701a      	strb	r2, [r3, #0]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	0a1b      	lsrs	r3, r3, #8
 80087c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	1c5a      	adds	r2, r3, #1
 80087cc:	607a      	str	r2, [r7, #4]
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	b2d2      	uxtb	r2, r2
 80087d2:	701a      	strb	r2, [r3, #0]
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00d      	beq.n	8008816 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	1c53      	adds	r3, r2, #1
 80087fe:	613b      	str	r3, [r7, #16]
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	1c59      	adds	r1, r3, #1
 8008804:	6179      	str	r1, [r7, #20]
 8008806:	7812      	ldrb	r2, [r2, #0]
 8008808:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	3b01      	subs	r3, #1
 800880e:	607b      	str	r3, [r7, #4]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1f1      	bne.n	80087fa <mem_cpy+0x1a>
	}
}
 8008816:	bf00      	nop
 8008818:	371c      	adds	r7, #28
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008822:	b480      	push	{r7}
 8008824:	b087      	sub	sp, #28
 8008826:	af00      	add	r7, sp, #0
 8008828:	60f8      	str	r0, [r7, #12]
 800882a:	60b9      	str	r1, [r7, #8]
 800882c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	1c5a      	adds	r2, r3, #1
 8008836:	617a      	str	r2, [r7, #20]
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	b2d2      	uxtb	r2, r2
 800883c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	3b01      	subs	r3, #1
 8008842:	607b      	str	r3, [r7, #4]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1f3      	bne.n	8008832 <mem_set+0x10>
}
 800884a:	bf00      	nop
 800884c:	371c      	adds	r7, #28
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008856:	b480      	push	{r7}
 8008858:	b089      	sub	sp, #36	; 0x24
 800885a:	af00      	add	r7, sp, #0
 800885c:	60f8      	str	r0, [r7, #12]
 800885e:	60b9      	str	r1, [r7, #8]
 8008860:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	61fb      	str	r3, [r7, #28]
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800886a:	2300      	movs	r3, #0
 800886c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	61fa      	str	r2, [r7, #28]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	4619      	mov	r1, r3
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	1c5a      	adds	r2, r3, #1
 800887c:	61ba      	str	r2, [r7, #24]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	1acb      	subs	r3, r1, r3
 8008882:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	3b01      	subs	r3, #1
 8008888:	607b      	str	r3, [r7, #4]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d002      	beq.n	8008896 <mem_cmp+0x40>
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d0eb      	beq.n	800886e <mem_cmp+0x18>

	return r;
 8008896:	697b      	ldr	r3, [r7, #20]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3724      	adds	r7, #36	; 0x24
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80088ae:	e002      	b.n	80088b6 <chk_chr+0x12>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3301      	adds	r3, #1
 80088b4:	607b      	str	r3, [r7, #4]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d005      	beq.n	80088ca <chk_chr+0x26>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	461a      	mov	r2, r3
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d1f2      	bne.n	80088b0 <chk_chr+0xc>
	return *str;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	781b      	ldrb	r3, [r3, #0]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
	...

080088dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80088e6:	2300      	movs	r3, #0
 80088e8:	60bb      	str	r3, [r7, #8]
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	60fb      	str	r3, [r7, #12]
 80088ee:	e029      	b.n	8008944 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80088f0:	4a27      	ldr	r2, [pc, #156]	; (8008990 <chk_lock+0xb4>)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	011b      	lsls	r3, r3, #4
 80088f6:	4413      	add	r3, r2
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d01d      	beq.n	800893a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80088fe:	4a24      	ldr	r2, [pc, #144]	; (8008990 <chk_lock+0xb4>)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	011b      	lsls	r3, r3, #4
 8008904:	4413      	add	r3, r2
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	429a      	cmp	r2, r3
 800890e:	d116      	bne.n	800893e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008910:	4a1f      	ldr	r2, [pc, #124]	; (8008990 <chk_lock+0xb4>)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	011b      	lsls	r3, r3, #4
 8008916:	4413      	add	r3, r2
 8008918:	3304      	adds	r3, #4
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008920:	429a      	cmp	r2, r3
 8008922:	d10c      	bne.n	800893e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008924:	4a1a      	ldr	r2, [pc, #104]	; (8008990 <chk_lock+0xb4>)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	011b      	lsls	r3, r3, #4
 800892a:	4413      	add	r3, r2
 800892c:	3308      	adds	r3, #8
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008934:	429a      	cmp	r2, r3
 8008936:	d102      	bne.n	800893e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008938:	e007      	b.n	800894a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800893a:	2301      	movs	r3, #1
 800893c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3301      	adds	r3, #1
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d9d2      	bls.n	80088f0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2b02      	cmp	r3, #2
 800894e:	d109      	bne.n	8008964 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d102      	bne.n	800895c <chk_lock+0x80>
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2b02      	cmp	r3, #2
 800895a:	d101      	bne.n	8008960 <chk_lock+0x84>
 800895c:	2300      	movs	r3, #0
 800895e:	e010      	b.n	8008982 <chk_lock+0xa6>
 8008960:	2312      	movs	r3, #18
 8008962:	e00e      	b.n	8008982 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d108      	bne.n	800897c <chk_lock+0xa0>
 800896a:	4a09      	ldr	r2, [pc, #36]	; (8008990 <chk_lock+0xb4>)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	011b      	lsls	r3, r3, #4
 8008970:	4413      	add	r3, r2
 8008972:	330c      	adds	r3, #12
 8008974:	881b      	ldrh	r3, [r3, #0]
 8008976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800897a:	d101      	bne.n	8008980 <chk_lock+0xa4>
 800897c:	2310      	movs	r3, #16
 800897e:	e000      	b.n	8008982 <chk_lock+0xa6>
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3714      	adds	r7, #20
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	20000128 	.word	0x20000128

08008994 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800899a:	2300      	movs	r3, #0
 800899c:	607b      	str	r3, [r7, #4]
 800899e:	e002      	b.n	80089a6 <enq_lock+0x12>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	3301      	adds	r3, #1
 80089a4:	607b      	str	r3, [r7, #4]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d806      	bhi.n	80089ba <enq_lock+0x26>
 80089ac:	4a09      	ldr	r2, [pc, #36]	; (80089d4 <enq_lock+0x40>)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	011b      	lsls	r3, r3, #4
 80089b2:	4413      	add	r3, r2
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1f2      	bne.n	80089a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2b02      	cmp	r3, #2
 80089be:	bf14      	ite	ne
 80089c0:	2301      	movne	r3, #1
 80089c2:	2300      	moveq	r3, #0
 80089c4:	b2db      	uxtb	r3, r3
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	20000128 	.word	0x20000128

080089d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80089e2:	2300      	movs	r3, #0
 80089e4:	60fb      	str	r3, [r7, #12]
 80089e6:	e01f      	b.n	8008a28 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80089e8:	4a41      	ldr	r2, [pc, #260]	; (8008af0 <inc_lock+0x118>)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	011b      	lsls	r3, r3, #4
 80089ee:	4413      	add	r3, r2
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d113      	bne.n	8008a22 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80089fa:	4a3d      	ldr	r2, [pc, #244]	; (8008af0 <inc_lock+0x118>)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	011b      	lsls	r3, r3, #4
 8008a00:	4413      	add	r3, r2
 8008a02:	3304      	adds	r3, #4
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d109      	bne.n	8008a22 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008a0e:	4a38      	ldr	r2, [pc, #224]	; (8008af0 <inc_lock+0x118>)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	011b      	lsls	r3, r3, #4
 8008a14:	4413      	add	r3, r2
 8008a16:	3308      	adds	r3, #8
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d006      	beq.n	8008a30 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3301      	adds	r3, #1
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d9dc      	bls.n	80089e8 <inc_lock+0x10>
 8008a2e:	e000      	b.n	8008a32 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008a30:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d132      	bne.n	8008a9e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	e002      	b.n	8008a44 <inc_lock+0x6c>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3301      	adds	r3, #1
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d806      	bhi.n	8008a58 <inc_lock+0x80>
 8008a4a:	4a29      	ldr	r2, [pc, #164]	; (8008af0 <inc_lock+0x118>)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	011b      	lsls	r3, r3, #4
 8008a50:	4413      	add	r3, r2
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1f2      	bne.n	8008a3e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d101      	bne.n	8008a62 <inc_lock+0x8a>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	e040      	b.n	8008ae4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	4922      	ldr	r1, [pc, #136]	; (8008af0 <inc_lock+0x118>)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	011b      	lsls	r3, r3, #4
 8008a6c:	440b      	add	r3, r1
 8008a6e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	689a      	ldr	r2, [r3, #8]
 8008a74:	491e      	ldr	r1, [pc, #120]	; (8008af0 <inc_lock+0x118>)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	011b      	lsls	r3, r3, #4
 8008a7a:	440b      	add	r3, r1
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	695a      	ldr	r2, [r3, #20]
 8008a84:	491a      	ldr	r1, [pc, #104]	; (8008af0 <inc_lock+0x118>)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	011b      	lsls	r3, r3, #4
 8008a8a:	440b      	add	r3, r1
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008a90:	4a17      	ldr	r2, [pc, #92]	; (8008af0 <inc_lock+0x118>)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	011b      	lsls	r3, r3, #4
 8008a96:	4413      	add	r3, r2
 8008a98:	330c      	adds	r3, #12
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d009      	beq.n	8008ab8 <inc_lock+0xe0>
 8008aa4:	4a12      	ldr	r2, [pc, #72]	; (8008af0 <inc_lock+0x118>)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	011b      	lsls	r3, r3, #4
 8008aaa:	4413      	add	r3, r2
 8008aac:	330c      	adds	r3, #12
 8008aae:	881b      	ldrh	r3, [r3, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d001      	beq.n	8008ab8 <inc_lock+0xe0>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	e015      	b.n	8008ae4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d108      	bne.n	8008ad0 <inc_lock+0xf8>
 8008abe:	4a0c      	ldr	r2, [pc, #48]	; (8008af0 <inc_lock+0x118>)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	011b      	lsls	r3, r3, #4
 8008ac4:	4413      	add	r3, r2
 8008ac6:	330c      	adds	r3, #12
 8008ac8:	881b      	ldrh	r3, [r3, #0]
 8008aca:	3301      	adds	r3, #1
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	e001      	b.n	8008ad4 <inc_lock+0xfc>
 8008ad0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ad4:	4906      	ldr	r1, [pc, #24]	; (8008af0 <inc_lock+0x118>)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	011b      	lsls	r3, r3, #4
 8008ada:	440b      	add	r3, r1
 8008adc:	330c      	adds	r3, #12
 8008ade:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3301      	adds	r3, #1
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr
 8008af0:	20000128 	.word	0x20000128

08008af4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	3b01      	subs	r3, #1
 8008b00:	607b      	str	r3, [r7, #4]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d825      	bhi.n	8008b54 <dec_lock+0x60>
		n = Files[i].ctr;
 8008b08:	4a17      	ldr	r2, [pc, #92]	; (8008b68 <dec_lock+0x74>)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	4413      	add	r3, r2
 8008b10:	330c      	adds	r3, #12
 8008b12:	881b      	ldrh	r3, [r3, #0]
 8008b14:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008b16:	89fb      	ldrh	r3, [r7, #14]
 8008b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b1c:	d101      	bne.n	8008b22 <dec_lock+0x2e>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008b22:	89fb      	ldrh	r3, [r7, #14]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d002      	beq.n	8008b2e <dec_lock+0x3a>
 8008b28:	89fb      	ldrh	r3, [r7, #14]
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008b2e:	4a0e      	ldr	r2, [pc, #56]	; (8008b68 <dec_lock+0x74>)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	011b      	lsls	r3, r3, #4
 8008b34:	4413      	add	r3, r2
 8008b36:	330c      	adds	r3, #12
 8008b38:	89fa      	ldrh	r2, [r7, #14]
 8008b3a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008b3c:	89fb      	ldrh	r3, [r7, #14]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d105      	bne.n	8008b4e <dec_lock+0x5a>
 8008b42:	4a09      	ldr	r2, [pc, #36]	; (8008b68 <dec_lock+0x74>)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	011b      	lsls	r3, r3, #4
 8008b48:	4413      	add	r3, r2
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	737b      	strb	r3, [r7, #13]
 8008b52:	e001      	b.n	8008b58 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008b54:	2302      	movs	r3, #2
 8008b56:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008b58:	7b7b      	ldrb	r3, [r7, #13]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	20000128 	.word	0x20000128

08008b6c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008b74:	2300      	movs	r3, #0
 8008b76:	60fb      	str	r3, [r7, #12]
 8008b78:	e010      	b.n	8008b9c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008b7a:	4a0d      	ldr	r2, [pc, #52]	; (8008bb0 <clear_lock+0x44>)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	011b      	lsls	r3, r3, #4
 8008b80:	4413      	add	r3, r2
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d105      	bne.n	8008b96 <clear_lock+0x2a>
 8008b8a:	4a09      	ldr	r2, [pc, #36]	; (8008bb0 <clear_lock+0x44>)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	011b      	lsls	r3, r3, #4
 8008b90:	4413      	add	r3, r2
 8008b92:	2200      	movs	r2, #0
 8008b94:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d9eb      	bls.n	8008b7a <clear_lock+0xe>
	}
}
 8008ba2:	bf00      	nop
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	20000128 	.word	0x20000128

08008bb4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	78db      	ldrb	r3, [r3, #3]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d034      	beq.n	8008c32 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bcc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	7858      	ldrb	r0, [r3, #1]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008bd8:	2301      	movs	r3, #1
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	f7ff fd40 	bl	8008660 <disk_write>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d002      	beq.n	8008bec <sync_window+0x38>
			res = FR_DISK_ERR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	73fb      	strb	r3, [r7, #15]
 8008bea:	e022      	b.n	8008c32 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	1ad2      	subs	r2, r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d217      	bcs.n	8008c32 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	789b      	ldrb	r3, [r3, #2]
 8008c06:	613b      	str	r3, [r7, #16]
 8008c08:	e010      	b.n	8008c2c <sync_window+0x78>
					wsect += fs->fsize;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	697a      	ldr	r2, [r7, #20]
 8008c10:	4413      	add	r3, r2
 8008c12:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	7858      	ldrb	r0, [r3, #1]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008c1e:	2301      	movs	r3, #1
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	f7ff fd1d 	bl	8008660 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	613b      	str	r3, [r7, #16]
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d8eb      	bhi.n	8008c0a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008c46:	2300      	movs	r3, #0
 8008c48:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d01b      	beq.n	8008c8c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7ff ffad 	bl	8008bb4 <sync_window>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008c5e:	7bfb      	ldrb	r3, [r7, #15]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d113      	bne.n	8008c8c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	7858      	ldrb	r0, [r3, #1]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008c6e:	2301      	movs	r3, #1
 8008c70:	683a      	ldr	r2, [r7, #0]
 8008c72:	f7ff fcd5 	bl	8008620 <disk_read>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d004      	beq.n	8008c86 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c80:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	683a      	ldr	r2, [r7, #0]
 8008c8a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f7ff ff87 	bl	8008bb4 <sync_window>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d159      	bne.n	8008d64 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	2b03      	cmp	r3, #3
 8008cb6:	d149      	bne.n	8008d4c <sync_fs+0xb4>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	791b      	ldrb	r3, [r3, #4]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d145      	bne.n	8008d4c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	899b      	ldrh	r3, [r3, #12]
 8008cca:	461a      	mov	r2, r3
 8008ccc:	2100      	movs	r1, #0
 8008cce:	f7ff fda8 	bl	8008822 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	3338      	adds	r3, #56	; 0x38
 8008cd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008cda:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7ff fd37 	bl	8008752 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	3338      	adds	r3, #56	; 0x38
 8008ce8:	4921      	ldr	r1, [pc, #132]	; (8008d70 <sync_fs+0xd8>)
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7ff fd4c 	bl	8008788 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	3338      	adds	r3, #56	; 0x38
 8008cf4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008cf8:	491e      	ldr	r1, [pc, #120]	; (8008d74 <sync_fs+0xdc>)
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7ff fd44 	bl	8008788 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	3338      	adds	r3, #56	; 0x38
 8008d04:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	4610      	mov	r0, r2
 8008d10:	f7ff fd3a 	bl	8008788 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3338      	adds	r3, #56	; 0x38
 8008d18:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	4619      	mov	r1, r3
 8008d22:	4610      	mov	r0, r2
 8008d24:	f7ff fd30 	bl	8008788 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2c:	1c5a      	adds	r2, r3, #1
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	7858      	ldrb	r0, [r3, #1]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d40:	2301      	movs	r3, #1
 8008d42:	f7ff fc8d 	bl	8008660 <disk_write>
			fs->fsi_flag = 0;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	785b      	ldrb	r3, [r3, #1]
 8008d50:	2200      	movs	r2, #0
 8008d52:	2100      	movs	r1, #0
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7ff fca3 	bl	80086a0 <disk_ioctl>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <sync_fs+0xcc>
 8008d60:	2301      	movs	r3, #1
 8008d62:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	41615252 	.word	0x41615252
 8008d74:	61417272 	.word	0x61417272

08008d78 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	3b02      	subs	r3, #2
 8008d86:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	69db      	ldr	r3, [r3, #28]
 8008d8c:	3b02      	subs	r3, #2
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d301      	bcc.n	8008d98 <clust2sect+0x20>
 8008d94:	2300      	movs	r3, #0
 8008d96:	e008      	b.n	8008daa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	895b      	ldrh	r3, [r3, #10]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	fb03 f202 	mul.w	r2, r3, r2
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da8:	4413      	add	r3, r2
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b086      	sub	sp, #24
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d904      	bls.n	8008dd6 <get_fat+0x20>
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d302      	bcc.n	8008ddc <get_fat+0x26>
		val = 1;	/* Internal error */
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	617b      	str	r3, [r7, #20]
 8008dda:	e0b7      	b.n	8008f4c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8008de0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d05a      	beq.n	8008ea0 <get_fat+0xea>
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d07d      	beq.n	8008eea <get_fat+0x134>
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	f040 80a2 	bne.w	8008f38 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	60fb      	str	r3, [r7, #12]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	085b      	lsrs	r3, r3, #1
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	4413      	add	r3, r2
 8008e00:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	899b      	ldrh	r3, [r3, #12]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e12:	4413      	add	r3, r2
 8008e14:	4619      	mov	r1, r3
 8008e16:	6938      	ldr	r0, [r7, #16]
 8008e18:	f7ff ff10 	bl	8008c3c <move_window>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f040 808d 	bne.w	8008f3e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	1c5a      	adds	r2, r3, #1
 8008e28:	60fa      	str	r2, [r7, #12]
 8008e2a:	693a      	ldr	r2, [r7, #16]
 8008e2c:	8992      	ldrh	r2, [r2, #12]
 8008e2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e32:	fb02 f201 	mul.w	r2, r2, r1
 8008e36:	1a9b      	subs	r3, r3, r2
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e40:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	899b      	ldrh	r3, [r3, #12]
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e52:	4413      	add	r3, r2
 8008e54:	4619      	mov	r1, r3
 8008e56:	6938      	ldr	r0, [r7, #16]
 8008e58:	f7ff fef0 	bl	8008c3c <move_window>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d16f      	bne.n	8008f42 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	899b      	ldrh	r3, [r3, #12]
 8008e66:	461a      	mov	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e6e:	fb02 f201 	mul.w	r2, r2, r1
 8008e72:	1a9b      	subs	r3, r3, r2
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	4413      	add	r3, r2
 8008e78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	461a      	mov	r2, r3
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	f003 0301 	and.w	r3, r3, #1
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d002      	beq.n	8008e96 <get_fat+0xe0>
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	091b      	lsrs	r3, r3, #4
 8008e94:	e002      	b.n	8008e9c <get_fat+0xe6>
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e9c:	617b      	str	r3, [r7, #20]
			break;
 8008e9e:	e055      	b.n	8008f4c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	899b      	ldrh	r3, [r3, #12]
 8008ea8:	085b      	lsrs	r3, r3, #1
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	4619      	mov	r1, r3
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8008eb4:	4413      	add	r3, r2
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	6938      	ldr	r0, [r7, #16]
 8008eba:	f7ff febf 	bl	8008c3c <move_window>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d140      	bne.n	8008f46 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	005b      	lsls	r3, r3, #1
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	8992      	ldrh	r2, [r2, #12]
 8008ed2:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ed6:	fb02 f200 	mul.w	r2, r2, r0
 8008eda:	1a9b      	subs	r3, r3, r2
 8008edc:	440b      	add	r3, r1
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7ff fbfc 	bl	80086dc <ld_word>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	617b      	str	r3, [r7, #20]
			break;
 8008ee8:	e030      	b.n	8008f4c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	899b      	ldrh	r3, [r3, #12]
 8008ef2:	089b      	lsrs	r3, r3, #2
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8008efe:	4413      	add	r3, r2
 8008f00:	4619      	mov	r1, r3
 8008f02:	6938      	ldr	r0, [r7, #16]
 8008f04:	f7ff fe9a 	bl	8008c3c <move_window>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d11d      	bne.n	8008f4a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	693a      	ldr	r2, [r7, #16]
 8008f1a:	8992      	ldrh	r2, [r2, #12]
 8008f1c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f20:	fb02 f200 	mul.w	r2, r2, r0
 8008f24:	1a9b      	subs	r3, r3, r2
 8008f26:	440b      	add	r3, r1
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7ff fbef 	bl	800870c <ld_dword>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008f34:	617b      	str	r3, [r7, #20]
			break;
 8008f36:	e009      	b.n	8008f4c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008f38:	2301      	movs	r3, #1
 8008f3a:	617b      	str	r3, [r7, #20]
 8008f3c:	e006      	b.n	8008f4c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f3e:	bf00      	nop
 8008f40:	e004      	b.n	8008f4c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f42:	bf00      	nop
 8008f44:	e002      	b.n	8008f4c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008f46:	bf00      	nop
 8008f48:	e000      	b.n	8008f4c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008f4a:	bf00      	nop
		}
	}

	return val;
 8008f4c:	697b      	ldr	r3, [r7, #20]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3718      	adds	r7, #24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008f56:	b590      	push	{r4, r7, lr}
 8008f58:	b089      	sub	sp, #36	; 0x24
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	60f8      	str	r0, [r7, #12]
 8008f5e:	60b9      	str	r1, [r7, #8]
 8008f60:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008f62:	2302      	movs	r3, #2
 8008f64:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	f240 8106 	bls.w	800917a <put_fat+0x224>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	69db      	ldr	r3, [r3, #28]
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	f080 8100 	bcs.w	800917a <put_fat+0x224>
		switch (fs->fs_type) {
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	f000 8088 	beq.w	8009094 <put_fat+0x13e>
 8008f84:	2b03      	cmp	r3, #3
 8008f86:	f000 80b0 	beq.w	80090ea <put_fat+0x194>
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	f040 80f5 	bne.w	800917a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	61bb      	str	r3, [r7, #24]
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	085b      	lsrs	r3, r3, #1
 8008f98:	69ba      	ldr	r2, [r7, #24]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	899b      	ldrh	r3, [r3, #12]
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fae:	4413      	add	r3, r2
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f7ff fe42 	bl	8008c3c <move_window>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008fbc:	7ffb      	ldrb	r3, [r7, #31]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f040 80d4 	bne.w	800916c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	1c5a      	adds	r2, r3, #1
 8008fce:	61ba      	str	r2, [r7, #24]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	8992      	ldrh	r2, [r2, #12]
 8008fd4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008fd8:	fb02 f200 	mul.w	r2, r2, r0
 8008fdc:	1a9b      	subs	r3, r3, r2
 8008fde:	440b      	add	r3, r1
 8008fe0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	f003 0301 	and.w	r3, r3, #1
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00d      	beq.n	8009008 <put_fat+0xb2>
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	b25b      	sxtb	r3, r3
 8008ff2:	f003 030f 	and.w	r3, r3, #15
 8008ff6:	b25a      	sxtb	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	011b      	lsls	r3, r3, #4
 8008ffe:	b25b      	sxtb	r3, r3
 8009000:	4313      	orrs	r3, r2
 8009002:	b25b      	sxtb	r3, r3
 8009004:	b2db      	uxtb	r3, r3
 8009006:	e001      	b.n	800900c <put_fat+0xb6>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	b2db      	uxtb	r3, r3
 800900c:	697a      	ldr	r2, [r7, #20]
 800900e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2201      	movs	r2, #1
 8009014:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	899b      	ldrh	r3, [r3, #12]
 800901e:	4619      	mov	r1, r3
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	fbb3 f3f1 	udiv	r3, r3, r1
 8009026:	4413      	add	r3, r2
 8009028:	4619      	mov	r1, r3
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f7ff fe06 	bl	8008c3c <move_window>
 8009030:	4603      	mov	r3, r0
 8009032:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009034:	7ffb      	ldrb	r3, [r7, #31]
 8009036:	2b00      	cmp	r3, #0
 8009038:	f040 809a 	bne.w	8009170 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	899b      	ldrh	r3, [r3, #12]
 8009046:	461a      	mov	r2, r3
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	fbb3 f0f2 	udiv	r0, r3, r2
 800904e:	fb02 f200 	mul.w	r2, r2, r0
 8009052:	1a9b      	subs	r3, r3, r2
 8009054:	440b      	add	r3, r1
 8009056:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	2b00      	cmp	r3, #0
 8009060:	d003      	beq.n	800906a <put_fat+0x114>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	091b      	lsrs	r3, r3, #4
 8009066:	b2db      	uxtb	r3, r3
 8009068:	e00e      	b.n	8009088 <put_fat+0x132>
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	b25b      	sxtb	r3, r3
 8009070:	f023 030f 	bic.w	r3, r3, #15
 8009074:	b25a      	sxtb	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	0a1b      	lsrs	r3, r3, #8
 800907a:	b25b      	sxtb	r3, r3
 800907c:	f003 030f 	and.w	r3, r3, #15
 8009080:	b25b      	sxtb	r3, r3
 8009082:	4313      	orrs	r3, r2
 8009084:	b25b      	sxtb	r3, r3
 8009086:	b2db      	uxtb	r3, r3
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2201      	movs	r2, #1
 8009090:	70da      	strb	r2, [r3, #3]
			break;
 8009092:	e072      	b.n	800917a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	899b      	ldrh	r3, [r3, #12]
 800909c:	085b      	lsrs	r3, r3, #1
 800909e:	b29b      	uxth	r3, r3
 80090a0:	4619      	mov	r1, r3
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80090a8:	4413      	add	r3, r2
 80090aa:	4619      	mov	r1, r3
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f7ff fdc5 	bl	8008c3c <move_window>
 80090b2:	4603      	mov	r3, r0
 80090b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80090b6:	7ffb      	ldrb	r3, [r7, #31]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d15b      	bne.n	8009174 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	005b      	lsls	r3, r3, #1
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	8992      	ldrh	r2, [r2, #12]
 80090ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80090ce:	fb02 f200 	mul.w	r2, r2, r0
 80090d2:	1a9b      	subs	r3, r3, r2
 80090d4:	440b      	add	r3, r1
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	b292      	uxth	r2, r2
 80090da:	4611      	mov	r1, r2
 80090dc:	4618      	mov	r0, r3
 80090de:	f7ff fb38 	bl	8008752 <st_word>
			fs->wflag = 1;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2201      	movs	r2, #1
 80090e6:	70da      	strb	r2, [r3, #3]
			break;
 80090e8:	e047      	b.n	800917a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	899b      	ldrh	r3, [r3, #12]
 80090f2:	089b      	lsrs	r3, r3, #2
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	4619      	mov	r1, r3
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80090fe:	4413      	add	r3, r2
 8009100:	4619      	mov	r1, r3
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f7ff fd9a 	bl	8008c3c <move_window>
 8009108:	4603      	mov	r3, r0
 800910a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800910c:	7ffb      	ldrb	r3, [r7, #31]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d132      	bne.n	8009178 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	8992      	ldrh	r2, [r2, #12]
 8009126:	fbb3 f0f2 	udiv	r0, r3, r2
 800912a:	fb02 f200 	mul.w	r2, r2, r0
 800912e:	1a9b      	subs	r3, r3, r2
 8009130:	440b      	add	r3, r1
 8009132:	4618      	mov	r0, r3
 8009134:	f7ff faea 	bl	800870c <ld_dword>
 8009138:	4603      	mov	r3, r0
 800913a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800913e:	4323      	orrs	r3, r4
 8009140:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	8992      	ldrh	r2, [r2, #12]
 8009150:	fbb3 f0f2 	udiv	r0, r3, r2
 8009154:	fb02 f200 	mul.w	r2, r2, r0
 8009158:	1a9b      	subs	r3, r3, r2
 800915a:	440b      	add	r3, r1
 800915c:	6879      	ldr	r1, [r7, #4]
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff fb12 	bl	8008788 <st_dword>
			fs->wflag = 1;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2201      	movs	r2, #1
 8009168:	70da      	strb	r2, [r3, #3]
			break;
 800916a:	e006      	b.n	800917a <put_fat+0x224>
			if (res != FR_OK) break;
 800916c:	bf00      	nop
 800916e:	e004      	b.n	800917a <put_fat+0x224>
			if (res != FR_OK) break;
 8009170:	bf00      	nop
 8009172:	e002      	b.n	800917a <put_fat+0x224>
			if (res != FR_OK) break;
 8009174:	bf00      	nop
 8009176:	e000      	b.n	800917a <put_fat+0x224>
			if (res != FR_OK) break;
 8009178:	bf00      	nop
		}
	}
	return res;
 800917a:	7ffb      	ldrb	r3, [r7, #31]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3724      	adds	r7, #36	; 0x24
 8009180:	46bd      	mov	sp, r7
 8009182:	bd90      	pop	{r4, r7, pc}

08009184 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b088      	sub	sp, #32
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d904      	bls.n	80091aa <remove_chain+0x26>
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	69db      	ldr	r3, [r3, #28]
 80091a4:	68ba      	ldr	r2, [r7, #8]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d301      	bcc.n	80091ae <remove_chain+0x2a>
 80091aa:	2302      	movs	r3, #2
 80091ac:	e04b      	b.n	8009246 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00c      	beq.n	80091ce <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80091b4:	f04f 32ff 	mov.w	r2, #4294967295
 80091b8:	6879      	ldr	r1, [r7, #4]
 80091ba:	69b8      	ldr	r0, [r7, #24]
 80091bc:	f7ff fecb 	bl	8008f56 <put_fat>
 80091c0:	4603      	mov	r3, r0
 80091c2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80091c4:	7ffb      	ldrb	r3, [r7, #31]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <remove_chain+0x4a>
 80091ca:	7ffb      	ldrb	r3, [r7, #31]
 80091cc:	e03b      	b.n	8009246 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80091ce:	68b9      	ldr	r1, [r7, #8]
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f7ff fdf0 	bl	8008db6 <get_fat>
 80091d6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d031      	beq.n	8009242 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d101      	bne.n	80091e8 <remove_chain+0x64>
 80091e4:	2302      	movs	r3, #2
 80091e6:	e02e      	b.n	8009246 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ee:	d101      	bne.n	80091f4 <remove_chain+0x70>
 80091f0:	2301      	movs	r3, #1
 80091f2:	e028      	b.n	8009246 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80091f4:	2200      	movs	r2, #0
 80091f6:	68b9      	ldr	r1, [r7, #8]
 80091f8:	69b8      	ldr	r0, [r7, #24]
 80091fa:	f7ff feac 	bl	8008f56 <put_fat>
 80091fe:	4603      	mov	r3, r0
 8009200:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009202:	7ffb      	ldrb	r3, [r7, #31]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <remove_chain+0x88>
 8009208:	7ffb      	ldrb	r3, [r7, #31]
 800920a:	e01c      	b.n	8009246 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	699a      	ldr	r2, [r3, #24]
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	69db      	ldr	r3, [r3, #28]
 8009214:	3b02      	subs	r3, #2
 8009216:	429a      	cmp	r2, r3
 8009218:	d20b      	bcs.n	8009232 <remove_chain+0xae>
			fs->free_clst++;
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	1c5a      	adds	r2, r3, #1
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	791b      	ldrb	r3, [r3, #4]
 8009228:	f043 0301 	orr.w	r3, r3, #1
 800922c:	b2da      	uxtb	r2, r3
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	429a      	cmp	r2, r3
 800923e:	d3c6      	bcc.n	80091ce <remove_chain+0x4a>
 8009240:	e000      	b.n	8009244 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009242:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3720      	adds	r7, #32
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b088      	sub	sp, #32
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d10d      	bne.n	8009280 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	695b      	ldr	r3, [r3, #20]
 8009268:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d004      	beq.n	800927a <create_chain+0x2c>
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	69db      	ldr	r3, [r3, #28]
 8009274:	69ba      	ldr	r2, [r7, #24]
 8009276:	429a      	cmp	r2, r3
 8009278:	d31b      	bcc.n	80092b2 <create_chain+0x64>
 800927a:	2301      	movs	r3, #1
 800927c:	61bb      	str	r3, [r7, #24]
 800927e:	e018      	b.n	80092b2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009280:	6839      	ldr	r1, [r7, #0]
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7ff fd97 	bl	8008db6 <get_fat>
 8009288:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2b01      	cmp	r3, #1
 800928e:	d801      	bhi.n	8009294 <create_chain+0x46>
 8009290:	2301      	movs	r3, #1
 8009292:	e070      	b.n	8009376 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800929a:	d101      	bne.n	80092a0 <create_chain+0x52>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	e06a      	b.n	8009376 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d201      	bcs.n	80092ae <create_chain+0x60>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	e063      	b.n	8009376 <create_chain+0x128>
		scl = clst;
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	3301      	adds	r3, #1
 80092ba:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	69db      	ldr	r3, [r3, #28]
 80092c0:	69fa      	ldr	r2, [r7, #28]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d307      	bcc.n	80092d6 <create_chain+0x88>
				ncl = 2;
 80092c6:	2302      	movs	r3, #2
 80092c8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80092ca:	69fa      	ldr	r2, [r7, #28]
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d901      	bls.n	80092d6 <create_chain+0x88>
 80092d2:	2300      	movs	r3, #0
 80092d4:	e04f      	b.n	8009376 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80092d6:	69f9      	ldr	r1, [r7, #28]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f7ff fd6c 	bl	8008db6 <get_fat>
 80092de:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00e      	beq.n	8009304 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d003      	beq.n	80092f4 <create_chain+0xa6>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f2:	d101      	bne.n	80092f8 <create_chain+0xaa>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	e03e      	b.n	8009376 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80092f8:	69fa      	ldr	r2, [r7, #28]
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d1da      	bne.n	80092b6 <create_chain+0x68>
 8009300:	2300      	movs	r3, #0
 8009302:	e038      	b.n	8009376 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009304:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009306:	f04f 32ff 	mov.w	r2, #4294967295
 800930a:	69f9      	ldr	r1, [r7, #28]
 800930c:	6938      	ldr	r0, [r7, #16]
 800930e:	f7ff fe22 	bl	8008f56 <put_fat>
 8009312:	4603      	mov	r3, r0
 8009314:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009316:	7dfb      	ldrb	r3, [r7, #23]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d109      	bne.n	8009330 <create_chain+0xe2>
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d006      	beq.n	8009330 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009322:	69fa      	ldr	r2, [r7, #28]
 8009324:	6839      	ldr	r1, [r7, #0]
 8009326:	6938      	ldr	r0, [r7, #16]
 8009328:	f7ff fe15 	bl	8008f56 <put_fat>
 800932c:	4603      	mov	r3, r0
 800932e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009330:	7dfb      	ldrb	r3, [r7, #23]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d116      	bne.n	8009364 <create_chain+0x116>
		fs->last_clst = ncl;
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	69fa      	ldr	r2, [r7, #28]
 800933a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	699a      	ldr	r2, [r3, #24]
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	69db      	ldr	r3, [r3, #28]
 8009344:	3b02      	subs	r3, #2
 8009346:	429a      	cmp	r2, r3
 8009348:	d804      	bhi.n	8009354 <create_chain+0x106>
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	1e5a      	subs	r2, r3, #1
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	791b      	ldrb	r3, [r3, #4]
 8009358:	f043 0301 	orr.w	r3, r3, #1
 800935c:	b2da      	uxtb	r2, r3
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	711a      	strb	r2, [r3, #4]
 8009362:	e007      	b.n	8009374 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009364:	7dfb      	ldrb	r3, [r7, #23]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d102      	bne.n	8009370 <create_chain+0x122>
 800936a:	f04f 33ff 	mov.w	r3, #4294967295
 800936e:	e000      	b.n	8009372 <create_chain+0x124>
 8009370:	2301      	movs	r3, #1
 8009372:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009374:	69fb      	ldr	r3, [r7, #28]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3720      	adds	r7, #32
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800937e:	b480      	push	{r7}
 8009380:	b087      	sub	sp, #28
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009392:	3304      	adds	r3, #4
 8009394:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	899b      	ldrh	r3, [r3, #12]
 800939a:	461a      	mov	r2, r3
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	fbb3 f3f2 	udiv	r3, r3, r2
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	8952      	ldrh	r2, [r2, #10]
 80093a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80093aa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	1d1a      	adds	r2, r3, #4
 80093b0:	613a      	str	r2, [r7, #16]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d101      	bne.n	80093c0 <clmt_clust+0x42>
 80093bc:	2300      	movs	r3, #0
 80093be:	e010      	b.n	80093e2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d307      	bcc.n	80093d8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	617b      	str	r3, [r7, #20]
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	3304      	adds	r3, #4
 80093d4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80093d6:	e7e9      	b.n	80093ac <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80093d8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	4413      	add	r3, r2
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	371c      	adds	r7, #28
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b086      	sub	sp, #24
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009404:	d204      	bcs.n	8009410 <dir_sdi+0x22>
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	f003 031f 	and.w	r3, r3, #31
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009410:	2302      	movs	r3, #2
 8009412:	e071      	b.n	80094f8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	683a      	ldr	r2, [r7, #0]
 8009418:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d106      	bne.n	8009434 <dir_sdi+0x46>
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	2b02      	cmp	r3, #2
 800942c:	d902      	bls.n	8009434 <dir_sdi+0x46>
		clst = fs->dirbase;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009432:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10c      	bne.n	8009454 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	095b      	lsrs	r3, r3, #5
 800943e:	693a      	ldr	r2, [r7, #16]
 8009440:	8912      	ldrh	r2, [r2, #8]
 8009442:	4293      	cmp	r3, r2
 8009444:	d301      	bcc.n	800944a <dir_sdi+0x5c>
 8009446:	2302      	movs	r3, #2
 8009448:	e056      	b.n	80094f8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	61da      	str	r2, [r3, #28]
 8009452:	e02d      	b.n	80094b0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	895b      	ldrh	r3, [r3, #10]
 8009458:	461a      	mov	r2, r3
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	899b      	ldrh	r3, [r3, #12]
 800945e:	fb03 f302 	mul.w	r3, r3, r2
 8009462:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009464:	e019      	b.n	800949a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6979      	ldr	r1, [r7, #20]
 800946a:	4618      	mov	r0, r3
 800946c:	f7ff fca3 	bl	8008db6 <get_fat>
 8009470:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009478:	d101      	bne.n	800947e <dir_sdi+0x90>
 800947a:	2301      	movs	r3, #1
 800947c:	e03c      	b.n	80094f8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d904      	bls.n	800948e <dir_sdi+0xa0>
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	69db      	ldr	r3, [r3, #28]
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	429a      	cmp	r2, r3
 800948c:	d301      	bcc.n	8009492 <dir_sdi+0xa4>
 800948e:	2302      	movs	r3, #2
 8009490:	e032      	b.n	80094f8 <dir_sdi+0x10a>
			ofs -= csz;
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d2e1      	bcs.n	8009466 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80094a2:	6979      	ldr	r1, [r7, #20]
 80094a4:	6938      	ldr	r0, [r7, #16]
 80094a6:	f7ff fc67 	bl	8008d78 <clust2sect>
 80094aa:	4602      	mov	r2, r0
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	69db      	ldr	r3, [r3, #28]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <dir_sdi+0xd4>
 80094be:	2302      	movs	r3, #2
 80094c0:	e01a      	b.n	80094f8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	69da      	ldr	r2, [r3, #28]
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	899b      	ldrh	r3, [r3, #12]
 80094ca:	4619      	mov	r1, r3
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80094d2:	441a      	add	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	899b      	ldrh	r3, [r3, #12]
 80094e2:	461a      	mov	r2, r3
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80094ea:	fb02 f200 	mul.w	r2, r2, r0
 80094ee:	1a9b      	subs	r3, r3, r2
 80094f0:	18ca      	adds	r2, r1, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3718      	adds	r7, #24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	695b      	ldr	r3, [r3, #20]
 8009514:	3320      	adds	r3, #32
 8009516:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	69db      	ldr	r3, [r3, #28]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d003      	beq.n	8009528 <dir_next+0x28>
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009526:	d301      	bcc.n	800952c <dir_next+0x2c>
 8009528:	2304      	movs	r3, #4
 800952a:	e0bb      	b.n	80096a4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	899b      	ldrh	r3, [r3, #12]
 8009530:	461a      	mov	r2, r3
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	fbb3 f1f2 	udiv	r1, r3, r2
 8009538:	fb02 f201 	mul.w	r2, r2, r1
 800953c:	1a9b      	subs	r3, r3, r2
 800953e:	2b00      	cmp	r3, #0
 8009540:	f040 809d 	bne.w	800967e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	69db      	ldr	r3, [r3, #28]
 8009548:	1c5a      	adds	r2, r3, #1
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d10b      	bne.n	800956e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	095b      	lsrs	r3, r3, #5
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	8912      	ldrh	r2, [r2, #8]
 800955e:	4293      	cmp	r3, r2
 8009560:	f0c0 808d 	bcc.w	800967e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	61da      	str	r2, [r3, #28]
 800956a:	2304      	movs	r3, #4
 800956c:	e09a      	b.n	80096a4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	899b      	ldrh	r3, [r3, #12]
 8009572:	461a      	mov	r2, r3
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	fbb3 f3f2 	udiv	r3, r3, r2
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	8952      	ldrh	r2, [r2, #10]
 800957e:	3a01      	subs	r2, #1
 8009580:	4013      	ands	r3, r2
 8009582:	2b00      	cmp	r3, #0
 8009584:	d17b      	bne.n	800967e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	4619      	mov	r1, r3
 800958e:	4610      	mov	r0, r2
 8009590:	f7ff fc11 	bl	8008db6 <get_fat>
 8009594:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2b01      	cmp	r3, #1
 800959a:	d801      	bhi.n	80095a0 <dir_next+0xa0>
 800959c:	2302      	movs	r3, #2
 800959e:	e081      	b.n	80096a4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a6:	d101      	bne.n	80095ac <dir_next+0xac>
 80095a8:	2301      	movs	r3, #1
 80095aa:	e07b      	b.n	80096a4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	69db      	ldr	r3, [r3, #28]
 80095b0:	697a      	ldr	r2, [r7, #20]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d359      	bcc.n	800966a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d104      	bne.n	80095c6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	61da      	str	r2, [r3, #28]
 80095c2:	2304      	movs	r3, #4
 80095c4:	e06e      	b.n	80096a4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	4619      	mov	r1, r3
 80095ce:	4610      	mov	r0, r2
 80095d0:	f7ff fe3d 	bl	800924e <create_chain>
 80095d4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d101      	bne.n	80095e0 <dir_next+0xe0>
 80095dc:	2307      	movs	r3, #7
 80095de:	e061      	b.n	80096a4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d101      	bne.n	80095ea <dir_next+0xea>
 80095e6:	2302      	movs	r3, #2
 80095e8:	e05c      	b.n	80096a4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f0:	d101      	bne.n	80095f6 <dir_next+0xf6>
 80095f2:	2301      	movs	r3, #1
 80095f4:	e056      	b.n	80096a4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f7ff fadc 	bl	8008bb4 <sync_window>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <dir_next+0x106>
 8009602:	2301      	movs	r3, #1
 8009604:	e04e      	b.n	80096a4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	899b      	ldrh	r3, [r3, #12]
 8009610:	461a      	mov	r2, r3
 8009612:	2100      	movs	r1, #0
 8009614:	f7ff f905 	bl	8008822 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009618:	2300      	movs	r3, #0
 800961a:	613b      	str	r3, [r7, #16]
 800961c:	6979      	ldr	r1, [r7, #20]
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f7ff fbaa 	bl	8008d78 <clust2sect>
 8009624:	4602      	mov	r2, r0
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	635a      	str	r2, [r3, #52]	; 0x34
 800962a:	e012      	b.n	8009652 <dir_next+0x152>
						fs->wflag = 1;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2201      	movs	r2, #1
 8009630:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f7ff fabe 	bl	8008bb4 <sync_window>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d001      	beq.n	8009642 <dir_next+0x142>
 800963e:	2301      	movs	r3, #1
 8009640:	e030      	b.n	80096a4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	3301      	adds	r3, #1
 8009646:	613b      	str	r3, [r7, #16]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800964c:	1c5a      	adds	r2, r3, #1
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	635a      	str	r2, [r3, #52]	; 0x34
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	895b      	ldrh	r3, [r3, #10]
 8009656:	461a      	mov	r2, r3
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	4293      	cmp	r3, r2
 800965c:	d3e6      	bcc.n	800962c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	1ad2      	subs	r2, r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	697a      	ldr	r2, [r7, #20]
 800966e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009670:	6979      	ldr	r1, [r7, #20]
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f7ff fb80 	bl	8008d78 <clust2sect>
 8009678:	4602      	mov	r2, r0
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	899b      	ldrh	r3, [r3, #12]
 800968e:	461a      	mov	r2, r3
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	fbb3 f0f2 	udiv	r0, r3, r2
 8009696:	fb02 f200 	mul.w	r2, r2, r0
 800969a:	1a9b      	subs	r3, r3, r2
 800969c:	18ca      	adds	r2, r1, r3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3718      	adds	r7, #24
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80096bc:	2100      	movs	r1, #0
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7ff fe95 	bl	80093ee <dir_sdi>
 80096c4:	4603      	mov	r3, r0
 80096c6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80096c8:	7dfb      	ldrb	r3, [r7, #23]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d12b      	bne.n	8009726 <dir_alloc+0x7a>
		n = 0;
 80096ce:	2300      	movs	r3, #0
 80096d0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	69db      	ldr	r3, [r3, #28]
 80096d6:	4619      	mov	r1, r3
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f7ff faaf 	bl	8008c3c <move_window>
 80096de:	4603      	mov	r3, r0
 80096e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d11d      	bne.n	8009724 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6a1b      	ldr	r3, [r3, #32]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	2be5      	cmp	r3, #229	; 0xe5
 80096f0:	d004      	beq.n	80096fc <dir_alloc+0x50>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d107      	bne.n	800970c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	3301      	adds	r3, #1
 8009700:	613b      	str	r3, [r7, #16]
 8009702:	693a      	ldr	r2, [r7, #16]
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	429a      	cmp	r2, r3
 8009708:	d102      	bne.n	8009710 <dir_alloc+0x64>
 800970a:	e00c      	b.n	8009726 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800970c:	2300      	movs	r3, #0
 800970e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009710:	2101      	movs	r1, #1
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f7ff fef4 	bl	8009500 <dir_next>
 8009718:	4603      	mov	r3, r0
 800971a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800971c:	7dfb      	ldrb	r3, [r7, #23]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d0d7      	beq.n	80096d2 <dir_alloc+0x26>
 8009722:	e000      	b.n	8009726 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009724:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009726:	7dfb      	ldrb	r3, [r7, #23]
 8009728:	2b04      	cmp	r3, #4
 800972a:	d101      	bne.n	8009730 <dir_alloc+0x84>
 800972c:	2307      	movs	r3, #7
 800972e:	75fb      	strb	r3, [r7, #23]
	return res;
 8009730:	7dfb      	ldrb	r3, [r7, #23]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b084      	sub	sp, #16
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	331a      	adds	r3, #26
 8009748:	4618      	mov	r0, r3
 800974a:	f7fe ffc7 	bl	80086dc <ld_word>
 800974e:	4603      	mov	r3, r0
 8009750:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	2b03      	cmp	r3, #3
 8009758:	d109      	bne.n	800976e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	3314      	adds	r3, #20
 800975e:	4618      	mov	r0, r3
 8009760:	f7fe ffbc 	bl	80086dc <ld_word>
 8009764:	4603      	mov	r3, r0
 8009766:	041b      	lsls	r3, r3, #16
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	4313      	orrs	r3, r2
 800976c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800976e:	68fb      	ldr	r3, [r7, #12]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	331a      	adds	r3, #26
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	b292      	uxth	r2, r2
 800978c:	4611      	mov	r1, r2
 800978e:	4618      	mov	r0, r3
 8009790:	f7fe ffdf 	bl	8008752 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	2b03      	cmp	r3, #3
 800979a:	d109      	bne.n	80097b0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	f103 0214 	add.w	r2, r3, #20
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	0c1b      	lsrs	r3, r3, #16
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	4619      	mov	r1, r3
 80097aa:	4610      	mov	r0, r2
 80097ac:	f7fe ffd1 	bl	8008752 <st_word>
	}
}
 80097b0:	bf00      	nop
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80097b8:	b590      	push	{r4, r7, lr}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	331a      	adds	r3, #26
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fe ff88 	bl	80086dc <ld_word>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <cmp_lfn+0x1e>
 80097d2:	2300      	movs	r3, #0
 80097d4:	e059      	b.n	800988a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097de:	1e5a      	subs	r2, r3, #1
 80097e0:	4613      	mov	r3, r2
 80097e2:	005b      	lsls	r3, r3, #1
 80097e4:	4413      	add	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80097ec:	2301      	movs	r3, #1
 80097ee:	81fb      	strh	r3, [r7, #14]
 80097f0:	2300      	movs	r3, #0
 80097f2:	613b      	str	r3, [r7, #16]
 80097f4:	e033      	b.n	800985e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80097f6:	4a27      	ldr	r2, [pc, #156]	; (8009894 <cmp_lfn+0xdc>)
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	4413      	add	r3, r2
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	4413      	add	r3, r2
 8009804:	4618      	mov	r0, r3
 8009806:	f7fe ff69 	bl	80086dc <ld_word>
 800980a:	4603      	mov	r3, r0
 800980c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800980e:	89fb      	ldrh	r3, [r7, #14]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d01a      	beq.n	800984a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	2bfe      	cmp	r3, #254	; 0xfe
 8009818:	d812      	bhi.n	8009840 <cmp_lfn+0x88>
 800981a:	89bb      	ldrh	r3, [r7, #12]
 800981c:	4618      	mov	r0, r3
 800981e:	f7fe fe35 	bl	800848c <ff_wtoupper>
 8009822:	4603      	mov	r3, r0
 8009824:	461c      	mov	r4, r3
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	1c5a      	adds	r2, r3, #1
 800982a:	617a      	str	r2, [r7, #20]
 800982c:	005b      	lsls	r3, r3, #1
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	4413      	add	r3, r2
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	4618      	mov	r0, r3
 8009836:	f7fe fe29 	bl	800848c <ff_wtoupper>
 800983a:	4603      	mov	r3, r0
 800983c:	429c      	cmp	r4, r3
 800983e:	d001      	beq.n	8009844 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009840:	2300      	movs	r3, #0
 8009842:	e022      	b.n	800988a <cmp_lfn+0xd2>
			}
			wc = uc;
 8009844:	89bb      	ldrh	r3, [r7, #12]
 8009846:	81fb      	strh	r3, [r7, #14]
 8009848:	e006      	b.n	8009858 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800984a:	89bb      	ldrh	r3, [r7, #12]
 800984c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009850:	4293      	cmp	r3, r2
 8009852:	d001      	beq.n	8009858 <cmp_lfn+0xa0>
 8009854:	2300      	movs	r3, #0
 8009856:	e018      	b.n	800988a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	3301      	adds	r3, #1
 800985c:	613b      	str	r3, [r7, #16]
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	2b0c      	cmp	r3, #12
 8009862:	d9c8      	bls.n	80097f6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00b      	beq.n	8009888 <cmp_lfn+0xd0>
 8009870:	89fb      	ldrh	r3, [r7, #14]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d008      	beq.n	8009888 <cmp_lfn+0xd0>
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	005b      	lsls	r3, r3, #1
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	4413      	add	r3, r2
 800987e:	881b      	ldrh	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d001      	beq.n	8009888 <cmp_lfn+0xd0>
 8009884:	2300      	movs	r3, #0
 8009886:	e000      	b.n	800988a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009888:	2301      	movs	r3, #1
}
 800988a:	4618      	mov	r0, r3
 800988c:	371c      	adds	r7, #28
 800988e:	46bd      	mov	sp, r7
 8009890:	bd90      	pop	{r4, r7, pc}
 8009892:	bf00      	nop
 8009894:	0800c99c 	.word	0x0800c99c

08009898 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b088      	sub	sp, #32
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	4611      	mov	r1, r2
 80098a4:	461a      	mov	r2, r3
 80098a6:	460b      	mov	r3, r1
 80098a8:	71fb      	strb	r3, [r7, #7]
 80098aa:	4613      	mov	r3, r2
 80098ac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	330d      	adds	r3, #13
 80098b2:	79ba      	ldrb	r2, [r7, #6]
 80098b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	330b      	adds	r3, #11
 80098ba:	220f      	movs	r2, #15
 80098bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	330c      	adds	r3, #12
 80098c2:	2200      	movs	r2, #0
 80098c4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	331a      	adds	r3, #26
 80098ca:	2100      	movs	r1, #0
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fe ff40 	bl	8008752 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80098d2:	79fb      	ldrb	r3, [r7, #7]
 80098d4:	1e5a      	subs	r2, r3, #1
 80098d6:	4613      	mov	r3, r2
 80098d8:	005b      	lsls	r3, r3, #1
 80098da:	4413      	add	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4413      	add	r3, r2
 80098e0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80098e2:	2300      	movs	r3, #0
 80098e4:	82fb      	strh	r3, [r7, #22]
 80098e6:	2300      	movs	r3, #0
 80098e8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80098ea:	8afb      	ldrh	r3, [r7, #22]
 80098ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d007      	beq.n	8009904 <put_lfn+0x6c>
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	1c5a      	adds	r2, r3, #1
 80098f8:	61fa      	str	r2, [r7, #28]
 80098fa:	005b      	lsls	r3, r3, #1
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	4413      	add	r3, r2
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009904:	4a17      	ldr	r2, [pc, #92]	; (8009964 <put_lfn+0xcc>)
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	4413      	add	r3, r2
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	461a      	mov	r2, r3
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	4413      	add	r3, r2
 8009912:	8afa      	ldrh	r2, [r7, #22]
 8009914:	4611      	mov	r1, r2
 8009916:	4618      	mov	r0, r3
 8009918:	f7fe ff1b 	bl	8008752 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800991c:	8afb      	ldrh	r3, [r7, #22]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d102      	bne.n	8009928 <put_lfn+0x90>
 8009922:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009926:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	3301      	adds	r3, #1
 800992c:	61bb      	str	r3, [r7, #24]
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	2b0c      	cmp	r3, #12
 8009932:	d9da      	bls.n	80098ea <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009934:	8afb      	ldrh	r3, [r7, #22]
 8009936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800993a:	4293      	cmp	r3, r2
 800993c:	d006      	beq.n	800994c <put_lfn+0xb4>
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	005b      	lsls	r3, r3, #1
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	4413      	add	r3, r2
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d103      	bne.n	8009954 <put_lfn+0xbc>
 800994c:	79fb      	ldrb	r3, [r7, #7]
 800994e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009952:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	79fa      	ldrb	r2, [r7, #7]
 8009958:	701a      	strb	r2, [r3, #0]
}
 800995a:	bf00      	nop
 800995c:	3720      	adds	r7, #32
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	0800c99c 	.word	0x0800c99c

08009968 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b08c      	sub	sp, #48	; 0x30
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
 8009974:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009976:	220b      	movs	r2, #11
 8009978:	68b9      	ldr	r1, [r7, #8]
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f7fe ff30 	bl	80087e0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	2b05      	cmp	r3, #5
 8009984:	d92b      	bls.n	80099de <gen_numname+0x76>
		sr = seq;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800998a:	e022      	b.n	80099d2 <gen_numname+0x6a>
			wc = *lfn++;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	1c9a      	adds	r2, r3, #2
 8009990:	607a      	str	r2, [r7, #4]
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009996:	2300      	movs	r3, #0
 8009998:	62bb      	str	r3, [r7, #40]	; 0x28
 800999a:	e017      	b.n	80099cc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	005a      	lsls	r2, r3, #1
 80099a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80099a2:	f003 0301 	and.w	r3, r3, #1
 80099a6:	4413      	add	r3, r2
 80099a8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80099aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80099ac:	085b      	lsrs	r3, r3, #1
 80099ae:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d005      	beq.n	80099c6 <gen_numname+0x5e>
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80099c0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80099c4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80099c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c8:	3301      	adds	r3, #1
 80099ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80099cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ce:	2b0f      	cmp	r3, #15
 80099d0:	d9e4      	bls.n	800999c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1d8      	bne.n	800998c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80099de:	2307      	movs	r3, #7
 80099e0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	f003 030f 	and.w	r3, r3, #15
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	3330      	adds	r3, #48	; 0x30
 80099ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80099f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099f6:	2b39      	cmp	r3, #57	; 0x39
 80099f8:	d904      	bls.n	8009a04 <gen_numname+0x9c>
 80099fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099fe:	3307      	adds	r3, #7
 8009a00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	1e5a      	subs	r2, r3, #1
 8009a08:	62ba      	str	r2, [r7, #40]	; 0x28
 8009a0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009a0e:	4413      	add	r3, r2
 8009a10:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009a14:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	091b      	lsrs	r3, r3, #4
 8009a1c:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1de      	bne.n	80099e2 <gen_numname+0x7a>
	ns[i] = '~';
 8009a24:	f107 0214 	add.w	r2, r7, #20
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	4413      	add	r3, r2
 8009a2c:	227e      	movs	r2, #126	; 0x7e
 8009a2e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009a30:	2300      	movs	r3, #0
 8009a32:	627b      	str	r3, [r7, #36]	; 0x24
 8009a34:	e002      	b.n	8009a3c <gen_numname+0xd4>
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a38:	3301      	adds	r3, #1
 8009a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d205      	bcs.n	8009a50 <gen_numname+0xe8>
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a48:	4413      	add	r3, r2
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	2b20      	cmp	r3, #32
 8009a4e:	d1f2      	bne.n	8009a36 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a52:	2b07      	cmp	r3, #7
 8009a54:	d808      	bhi.n	8009a68 <gen_numname+0x100>
 8009a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a58:	1c5a      	adds	r2, r3, #1
 8009a5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8009a5c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009a60:	4413      	add	r3, r2
 8009a62:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009a66:	e000      	b.n	8009a6a <gen_numname+0x102>
 8009a68:	2120      	movs	r1, #32
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6c:	1c5a      	adds	r2, r3, #1
 8009a6e:	627a      	str	r2, [r7, #36]	; 0x24
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	4413      	add	r3, r2
 8009a74:	460a      	mov	r2, r1
 8009a76:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7a:	2b07      	cmp	r3, #7
 8009a7c:	d9e8      	bls.n	8009a50 <gen_numname+0xe8>
}
 8009a7e:	bf00      	nop
 8009a80:	3730      	adds	r7, #48	; 0x30
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009a86:	b480      	push	{r7}
 8009a88:	b085      	sub	sp, #20
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009a92:	230b      	movs	r3, #11
 8009a94:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009a96:	7bfb      	ldrb	r3, [r7, #15]
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	0852      	lsrs	r2, r2, #1
 8009a9c:	01db      	lsls	r3, r3, #7
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	b2da      	uxtb	r2, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	1c59      	adds	r1, r3, #1
 8009aa6:	6079      	str	r1, [r7, #4]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	4413      	add	r3, r2
 8009aac:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	60bb      	str	r3, [r7, #8]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1ed      	bne.n	8009a96 <sum_sfn+0x10>
	return sum;
 8009aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3714      	adds	r7, #20
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7ff fc88 	bl	80093ee <dir_sdi>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009ae2:	7dfb      	ldrb	r3, [r7, #23]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d001      	beq.n	8009aec <dir_find+0x24>
 8009ae8:	7dfb      	ldrb	r3, [r7, #23]
 8009aea:	e0a9      	b.n	8009c40 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009aec:	23ff      	movs	r3, #255	; 0xff
 8009aee:	753b      	strb	r3, [r7, #20]
 8009af0:	7d3b      	ldrb	r3, [r7, #20]
 8009af2:	757b      	strb	r3, [r7, #21]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f04f 32ff 	mov.w	r2, #4294967295
 8009afa:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	69db      	ldr	r3, [r3, #28]
 8009b00:	4619      	mov	r1, r3
 8009b02:	6938      	ldr	r0, [r7, #16]
 8009b04:	f7ff f89a 	bl	8008c3c <move_window>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009b0c:	7dfb      	ldrb	r3, [r7, #23]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f040 8090 	bne.w	8009c34 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a1b      	ldr	r3, [r3, #32]
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009b1c:	7dbb      	ldrb	r3, [r7, #22]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d102      	bne.n	8009b28 <dir_find+0x60>
 8009b22:	2304      	movs	r3, #4
 8009b24:	75fb      	strb	r3, [r7, #23]
 8009b26:	e08a      	b.n	8009c3e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a1b      	ldr	r3, [r3, #32]
 8009b2c:	330b      	adds	r3, #11
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b34:	73fb      	strb	r3, [r7, #15]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	7bfa      	ldrb	r2, [r7, #15]
 8009b3a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009b3c:	7dbb      	ldrb	r3, [r7, #22]
 8009b3e:	2be5      	cmp	r3, #229	; 0xe5
 8009b40:	d007      	beq.n	8009b52 <dir_find+0x8a>
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
 8009b44:	f003 0308 	and.w	r3, r3, #8
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d009      	beq.n	8009b60 <dir_find+0x98>
 8009b4c:	7bfb      	ldrb	r3, [r7, #15]
 8009b4e:	2b0f      	cmp	r3, #15
 8009b50:	d006      	beq.n	8009b60 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009b52:	23ff      	movs	r3, #255	; 0xff
 8009b54:	757b      	strb	r3, [r7, #21]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f04f 32ff 	mov.w	r2, #4294967295
 8009b5c:	631a      	str	r2, [r3, #48]	; 0x30
 8009b5e:	e05e      	b.n	8009c1e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
 8009b62:	2b0f      	cmp	r3, #15
 8009b64:	d136      	bne.n	8009bd4 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d154      	bne.n	8009c1e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009b74:	7dbb      	ldrb	r3, [r7, #22]
 8009b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00d      	beq.n	8009b9a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	7b5b      	ldrb	r3, [r3, #13]
 8009b84:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009b86:	7dbb      	ldrb	r3, [r7, #22]
 8009b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b8c:	75bb      	strb	r3, [r7, #22]
 8009b8e:	7dbb      	ldrb	r3, [r7, #22]
 8009b90:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	695a      	ldr	r2, [r3, #20]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009b9a:	7dba      	ldrb	r2, [r7, #22]
 8009b9c:	7d7b      	ldrb	r3, [r7, #21]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d115      	bne.n	8009bce <dir_find+0x106>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a1b      	ldr	r3, [r3, #32]
 8009ba6:	330d      	adds	r3, #13
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	7d3a      	ldrb	r2, [r7, #20]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d10e      	bne.n	8009bce <dir_find+0x106>
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	691a      	ldr	r2, [r3, #16]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a1b      	ldr	r3, [r3, #32]
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4610      	mov	r0, r2
 8009bbc:	f7ff fdfc 	bl	80097b8 <cmp_lfn>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d003      	beq.n	8009bce <dir_find+0x106>
 8009bc6:	7d7b      	ldrb	r3, [r7, #21]
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	e000      	b.n	8009bd0 <dir_find+0x108>
 8009bce:	23ff      	movs	r3, #255	; 0xff
 8009bd0:	757b      	strb	r3, [r7, #21]
 8009bd2:	e024      	b.n	8009c1e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009bd4:	7d7b      	ldrb	r3, [r7, #21]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d109      	bne.n	8009bee <dir_find+0x126>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a1b      	ldr	r3, [r3, #32]
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7ff ff51 	bl	8009a86 <sum_sfn>
 8009be4:	4603      	mov	r3, r0
 8009be6:	461a      	mov	r2, r3
 8009be8:	7d3b      	ldrb	r3, [r7, #20]
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d024      	beq.n	8009c38 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009bf4:	f003 0301 	and.w	r3, r3, #1
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10a      	bne.n	8009c12 <dir_find+0x14a>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6a18      	ldr	r0, [r3, #32]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	3324      	adds	r3, #36	; 0x24
 8009c04:	220b      	movs	r2, #11
 8009c06:	4619      	mov	r1, r3
 8009c08:	f7fe fe25 	bl	8008856 <mem_cmp>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d014      	beq.n	8009c3c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009c12:	23ff      	movs	r3, #255	; 0xff
 8009c14:	757b      	strb	r3, [r7, #21]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009c1e:	2100      	movs	r1, #0
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7ff fc6d 	bl	8009500 <dir_next>
 8009c26:	4603      	mov	r3, r0
 8009c28:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009c2a:	7dfb      	ldrb	r3, [r7, #23]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f43f af65 	beq.w	8009afc <dir_find+0x34>
 8009c32:	e004      	b.n	8009c3e <dir_find+0x176>
		if (res != FR_OK) break;
 8009c34:	bf00      	nop
 8009c36:	e002      	b.n	8009c3e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009c38:	bf00      	nop
 8009c3a:	e000      	b.n	8009c3e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009c3c:	bf00      	nop

	return res;
 8009c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3718      	adds	r7, #24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08c      	sub	sp, #48	; 0x30
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c5c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d001      	beq.n	8009c68 <dir_register+0x20>
 8009c64:	2306      	movs	r3, #6
 8009c66:	e0e0      	b.n	8009e2a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009c68:	2300      	movs	r3, #0
 8009c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c6c:	e002      	b.n	8009c74 <dir_register+0x2c>
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c70:	3301      	adds	r3, #1
 8009c72:	627b      	str	r3, [r7, #36]	; 0x24
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	691a      	ldr	r2, [r3, #16]
 8009c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7a:	005b      	lsls	r3, r3, #1
 8009c7c:	4413      	add	r3, r2
 8009c7e:	881b      	ldrh	r3, [r3, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1f4      	bne.n	8009c6e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009c8a:	f107 030c 	add.w	r3, r7, #12
 8009c8e:	220c      	movs	r2, #12
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fe fda5 	bl	80087e0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009c96:	7dfb      	ldrb	r3, [r7, #23]
 8009c98:	f003 0301 	and.w	r3, r3, #1
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d032      	beq.n	8009d06 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2240      	movs	r2, #64	; 0x40
 8009ca4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009ca8:	2301      	movs	r3, #1
 8009caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cac:	e016      	b.n	8009cdc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	691a      	ldr	r2, [r3, #16]
 8009cb8:	f107 010c 	add.w	r1, r7, #12
 8009cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbe:	f7ff fe53 	bl	8009968 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f7ff ff00 	bl	8009ac8 <dir_find>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009cce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d106      	bne.n	8009ce4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd8:	3301      	adds	r3, #1
 8009cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cde:	2b63      	cmp	r3, #99	; 0x63
 8009ce0:	d9e5      	bls.n	8009cae <dir_register+0x66>
 8009ce2:	e000      	b.n	8009ce6 <dir_register+0x9e>
			if (res != FR_OK) break;
 8009ce4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce8:	2b64      	cmp	r3, #100	; 0x64
 8009cea:	d101      	bne.n	8009cf0 <dir_register+0xa8>
 8009cec:	2307      	movs	r3, #7
 8009cee:	e09c      	b.n	8009e2a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009cf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	d002      	beq.n	8009cfe <dir_register+0xb6>
 8009cf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cfc:	e095      	b.n	8009e2a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009cfe:	7dfa      	ldrb	r2, [r7, #23]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009d06:	7dfb      	ldrb	r3, [r7, #23]
 8009d08:	f003 0302 	and.w	r3, r3, #2
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d007      	beq.n	8009d20 <dir_register+0xd8>
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	330c      	adds	r3, #12
 8009d14:	4a47      	ldr	r2, [pc, #284]	; (8009e34 <dir_register+0x1ec>)
 8009d16:	fba2 2303 	umull	r2, r3, r2, r3
 8009d1a:	089b      	lsrs	r3, r3, #2
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	e000      	b.n	8009d22 <dir_register+0xda>
 8009d20:	2301      	movs	r3, #1
 8009d22:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009d24:	6a39      	ldr	r1, [r7, #32]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7ff fcc0 	bl	80096ac <dir_alloc>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009d32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d148      	bne.n	8009dcc <dir_register+0x184>
 8009d3a:	6a3b      	ldr	r3, [r7, #32]
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	623b      	str	r3, [r7, #32]
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d042      	beq.n	8009dcc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	695a      	ldr	r2, [r3, #20]
 8009d4a:	6a3b      	ldr	r3, [r7, #32]
 8009d4c:	015b      	lsls	r3, r3, #5
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	4619      	mov	r1, r3
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7ff fb4b 	bl	80093ee <dir_sdi>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d132      	bne.n	8009dcc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	3324      	adds	r3, #36	; 0x24
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7ff fe8b 	bl	8009a86 <sum_sfn>
 8009d70:	4603      	mov	r3, r0
 8009d72:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	69db      	ldr	r3, [r3, #28]
 8009d78:	4619      	mov	r1, r3
 8009d7a:	69f8      	ldr	r0, [r7, #28]
 8009d7c:	f7fe ff5e 	bl	8008c3c <move_window>
 8009d80:	4603      	mov	r3, r0
 8009d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009d86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d11d      	bne.n	8009dca <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	6918      	ldr	r0, [r3, #16]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6a19      	ldr	r1, [r3, #32]
 8009d96:	6a3b      	ldr	r3, [r7, #32]
 8009d98:	b2da      	uxtb	r2, r3
 8009d9a:	7efb      	ldrb	r3, [r7, #27]
 8009d9c:	f7ff fd7c 	bl	8009898 <put_lfn>
				fs->wflag = 1;
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	2201      	movs	r2, #1
 8009da4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009da6:	2100      	movs	r1, #0
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f7ff fba9 	bl	8009500 <dir_next>
 8009dae:	4603      	mov	r3, r0
 8009db0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009db4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d107      	bne.n	8009dcc <dir_register+0x184>
 8009dbc:	6a3b      	ldr	r3, [r7, #32]
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	623b      	str	r3, [r7, #32]
 8009dc2:	6a3b      	ldr	r3, [r7, #32]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d1d5      	bne.n	8009d74 <dir_register+0x12c>
 8009dc8:	e000      	b.n	8009dcc <dir_register+0x184>
				if (res != FR_OK) break;
 8009dca:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009dcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d128      	bne.n	8009e26 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	69db      	ldr	r3, [r3, #28]
 8009dd8:	4619      	mov	r1, r3
 8009dda:	69f8      	ldr	r0, [r7, #28]
 8009ddc:	f7fe ff2e 	bl	8008c3c <move_window>
 8009de0:	4603      	mov	r3, r0
 8009de2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009de6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d11b      	bne.n	8009e26 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a1b      	ldr	r3, [r3, #32]
 8009df2:	2220      	movs	r2, #32
 8009df4:	2100      	movs	r1, #0
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fe fd13 	bl	8008822 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a18      	ldr	r0, [r3, #32]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	3324      	adds	r3, #36	; 0x24
 8009e04:	220b      	movs	r2, #11
 8009e06:	4619      	mov	r1, r3
 8009e08:	f7fe fcea 	bl	80087e0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	330c      	adds	r3, #12
 8009e18:	f002 0218 	and.w	r2, r2, #24
 8009e1c:	b2d2      	uxtb	r2, r2
 8009e1e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	2201      	movs	r2, #1
 8009e24:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009e26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3730      	adds	r7, #48	; 0x30
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	4ec4ec4f 	.word	0x4ec4ec4f

08009e38 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b08a      	sub	sp, #40	; 0x28
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	613b      	str	r3, [r7, #16]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	60fb      	str	r3, [r7, #12]
 8009e50:	2300      	movs	r3, #0
 8009e52:	617b      	str	r3, [r7, #20]
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	1c5a      	adds	r2, r3, #1
 8009e5c:	61ba      	str	r2, [r7, #24]
 8009e5e:	693a      	ldr	r2, [r7, #16]
 8009e60:	4413      	add	r3, r2
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009e66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e68:	2b1f      	cmp	r3, #31
 8009e6a:	d940      	bls.n	8009eee <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009e6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e6e:	2b2f      	cmp	r3, #47	; 0x2f
 8009e70:	d006      	beq.n	8009e80 <create_name+0x48>
 8009e72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e74:	2b5c      	cmp	r3, #92	; 0x5c
 8009e76:	d110      	bne.n	8009e9a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009e78:	e002      	b.n	8009e80 <create_name+0x48>
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	61bb      	str	r3, [r7, #24]
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	4413      	add	r3, r2
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	2b2f      	cmp	r3, #47	; 0x2f
 8009e8a:	d0f6      	beq.n	8009e7a <create_name+0x42>
 8009e8c:	693a      	ldr	r2, [r7, #16]
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	4413      	add	r3, r2
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	2b5c      	cmp	r3, #92	; 0x5c
 8009e96:	d0f0      	beq.n	8009e7a <create_name+0x42>
			break;
 8009e98:	e02a      	b.n	8009ef0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	2bfe      	cmp	r3, #254	; 0xfe
 8009e9e:	d901      	bls.n	8009ea4 <create_name+0x6c>
 8009ea0:	2306      	movs	r3, #6
 8009ea2:	e177      	b.n	800a194 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009ea4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009eaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009eac:	2101      	movs	r1, #1
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7fe fab0 	bl	8008414 <ff_convert>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009eb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <create_name+0x8a>
 8009ebe:	2306      	movs	r3, #6
 8009ec0:	e168      	b.n	800a194 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009ec2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ec4:	2b7f      	cmp	r3, #127	; 0x7f
 8009ec6:	d809      	bhi.n	8009edc <create_name+0xa4>
 8009ec8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009eca:	4619      	mov	r1, r3
 8009ecc:	48b3      	ldr	r0, [pc, #716]	; (800a19c <create_name+0x364>)
 8009ece:	f7fe fce9 	bl	80088a4 <chk_chr>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d001      	beq.n	8009edc <create_name+0xa4>
 8009ed8:	2306      	movs	r3, #6
 8009eda:	e15b      	b.n	800a194 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	1c5a      	adds	r2, r3, #1
 8009ee0:	617a      	str	r2, [r7, #20]
 8009ee2:	005b      	lsls	r3, r3, #1
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009eea:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009eec:	e7b4      	b.n	8009e58 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009eee:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	441a      	add	r2, r3
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009efa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009efc:	2b1f      	cmp	r3, #31
 8009efe:	d801      	bhi.n	8009f04 <create_name+0xcc>
 8009f00:	2304      	movs	r3, #4
 8009f02:	e000      	b.n	8009f06 <create_name+0xce>
 8009f04:	2300      	movs	r3, #0
 8009f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009f0a:	e011      	b.n	8009f30 <create_name+0xf8>
		w = lfn[di - 1];
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009f12:	3b01      	subs	r3, #1
 8009f14:	005b      	lsls	r3, r3, #1
 8009f16:	68fa      	ldr	r2, [r7, #12]
 8009f18:	4413      	add	r3, r2
 8009f1a:	881b      	ldrh	r3, [r3, #0]
 8009f1c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009f1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f20:	2b20      	cmp	r3, #32
 8009f22:	d002      	beq.n	8009f2a <create_name+0xf2>
 8009f24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f26:	2b2e      	cmp	r3, #46	; 0x2e
 8009f28:	d106      	bne.n	8009f38 <create_name+0x100>
		di--;
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1ea      	bne.n	8009f0c <create_name+0xd4>
 8009f36:	e000      	b.n	8009f3a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009f38:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	005b      	lsls	r3, r3, #1
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	4413      	add	r3, r2
 8009f42:	2200      	movs	r2, #0
 8009f44:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <create_name+0x118>
 8009f4c:	2306      	movs	r3, #6
 8009f4e:	e121      	b.n	800a194 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	3324      	adds	r3, #36	; 0x24
 8009f54:	220b      	movs	r2, #11
 8009f56:	2120      	movs	r1, #32
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fe fc62 	bl	8008822 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009f5e:	2300      	movs	r3, #0
 8009f60:	61bb      	str	r3, [r7, #24]
 8009f62:	e002      	b.n	8009f6a <create_name+0x132>
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	3301      	adds	r3, #1
 8009f68:	61bb      	str	r3, [r7, #24]
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	005b      	lsls	r3, r3, #1
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	4413      	add	r3, r2
 8009f72:	881b      	ldrh	r3, [r3, #0]
 8009f74:	2b20      	cmp	r3, #32
 8009f76:	d0f5      	beq.n	8009f64 <create_name+0x12c>
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	005b      	lsls	r3, r3, #1
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	4413      	add	r3, r2
 8009f80:	881b      	ldrh	r3, [r3, #0]
 8009f82:	2b2e      	cmp	r3, #46	; 0x2e
 8009f84:	d0ee      	beq.n	8009f64 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d009      	beq.n	8009fa0 <create_name+0x168>
 8009f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f90:	f043 0303 	orr.w	r3, r3, #3
 8009f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009f98:	e002      	b.n	8009fa0 <create_name+0x168>
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	617b      	str	r3, [r7, #20]
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d009      	beq.n	8009fba <create_name+0x182>
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009fac:	3b01      	subs	r3, #1
 8009fae:	005b      	lsls	r3, r3, #1
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	881b      	ldrh	r3, [r3, #0]
 8009fb6:	2b2e      	cmp	r3, #46	; 0x2e
 8009fb8:	d1ef      	bne.n	8009f9a <create_name+0x162>

	i = b = 0; ni = 8;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	623b      	str	r3, [r7, #32]
 8009fc4:	2308      	movs	r3, #8
 8009fc6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	1c5a      	adds	r2, r3, #1
 8009fcc:	61ba      	str	r2, [r7, #24]
 8009fce:	005b      	lsls	r3, r3, #1
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	881b      	ldrh	r3, [r3, #0]
 8009fd6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009fd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f000 8090 	beq.w	800a100 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009fe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fe2:	2b20      	cmp	r3, #32
 8009fe4:	d006      	beq.n	8009ff4 <create_name+0x1bc>
 8009fe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fe8:	2b2e      	cmp	r3, #46	; 0x2e
 8009fea:	d10a      	bne.n	800a002 <create_name+0x1ca>
 8009fec:	69ba      	ldr	r2, [r7, #24]
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d006      	beq.n	800a002 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ff8:	f043 0303 	orr.w	r3, r3, #3
 8009ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a000:	e07d      	b.n	800a0fe <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a002:	6a3a      	ldr	r2, [r7, #32]
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	429a      	cmp	r2, r3
 800a008:	d203      	bcs.n	800a012 <create_name+0x1da>
 800a00a:	69ba      	ldr	r2, [r7, #24]
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d123      	bne.n	800a05a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	2b0b      	cmp	r3, #11
 800a016:	d106      	bne.n	800a026 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a01c:	f043 0303 	orr.w	r3, r3, #3
 800a020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a024:	e06f      	b.n	800a106 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a026:	69ba      	ldr	r2, [r7, #24]
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d005      	beq.n	800a03a <create_name+0x202>
 800a02e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a032:	f043 0303 	orr.w	r3, r3, #3
 800a036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a03a:	69ba      	ldr	r2, [r7, #24]
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d860      	bhi.n	800a104 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	61bb      	str	r3, [r7, #24]
 800a046:	2308      	movs	r3, #8
 800a048:	623b      	str	r3, [r7, #32]
 800a04a:	230b      	movs	r3, #11
 800a04c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a04e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a058:	e051      	b.n	800a0fe <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a05a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a05c:	2b7f      	cmp	r3, #127	; 0x7f
 800a05e:	d914      	bls.n	800a08a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a060:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a062:	2100      	movs	r1, #0
 800a064:	4618      	mov	r0, r3
 800a066:	f7fe f9d5 	bl	8008414 <ff_convert>
 800a06a:	4603      	mov	r3, r0
 800a06c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a06e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a070:	2b00      	cmp	r3, #0
 800a072:	d004      	beq.n	800a07e <create_name+0x246>
 800a074:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a076:	3b80      	subs	r3, #128	; 0x80
 800a078:	4a49      	ldr	r2, [pc, #292]	; (800a1a0 <create_name+0x368>)
 800a07a:	5cd3      	ldrb	r3, [r2, r3]
 800a07c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a07e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a082:	f043 0302 	orr.w	r3, r3, #2
 800a086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a08a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d007      	beq.n	800a0a0 <create_name+0x268>
 800a090:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a092:	4619      	mov	r1, r3
 800a094:	4843      	ldr	r0, [pc, #268]	; (800a1a4 <create_name+0x36c>)
 800a096:	f7fe fc05 	bl	80088a4 <chk_chr>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d008      	beq.n	800a0b2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a0a0:	235f      	movs	r3, #95	; 0x5f
 800a0a2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a0a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0a8:	f043 0303 	orr.w	r3, r3, #3
 800a0ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a0b0:	e01b      	b.n	800a0ea <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a0b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0b4:	2b40      	cmp	r3, #64	; 0x40
 800a0b6:	d909      	bls.n	800a0cc <create_name+0x294>
 800a0b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0ba:	2b5a      	cmp	r3, #90	; 0x5a
 800a0bc:	d806      	bhi.n	800a0cc <create_name+0x294>
					b |= 2;
 800a0be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a0c2:	f043 0302 	orr.w	r3, r3, #2
 800a0c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a0ca:	e00e      	b.n	800a0ea <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a0cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0ce:	2b60      	cmp	r3, #96	; 0x60
 800a0d0:	d90b      	bls.n	800a0ea <create_name+0x2b2>
 800a0d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0d4:	2b7a      	cmp	r3, #122	; 0x7a
 800a0d6:	d808      	bhi.n	800a0ea <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a0d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a0dc:	f043 0301 	orr.w	r3, r3, #1
 800a0e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a0e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0e6:	3b20      	subs	r3, #32
 800a0e8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a0ea:	6a3b      	ldr	r3, [r7, #32]
 800a0ec:	1c5a      	adds	r2, r3, #1
 800a0ee:	623a      	str	r2, [r7, #32]
 800a0f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a0f2:	b2d1      	uxtb	r1, r2
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	460a      	mov	r2, r1
 800a0fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800a0fe:	e763      	b.n	8009fc8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a100:	bf00      	nop
 800a102:	e000      	b.n	800a106 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800a104:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a10c:	2be5      	cmp	r3, #229	; 0xe5
 800a10e:	d103      	bne.n	800a118 <create_name+0x2e0>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2205      	movs	r2, #5
 800a114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	2b08      	cmp	r3, #8
 800a11c:	d104      	bne.n	800a128 <create_name+0x2f0>
 800a11e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a128:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a12c:	f003 030c 	and.w	r3, r3, #12
 800a130:	2b0c      	cmp	r3, #12
 800a132:	d005      	beq.n	800a140 <create_name+0x308>
 800a134:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a138:	f003 0303 	and.w	r3, r3, #3
 800a13c:	2b03      	cmp	r3, #3
 800a13e:	d105      	bne.n	800a14c <create_name+0x314>
 800a140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a144:	f043 0302 	orr.w	r3, r3, #2
 800a148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a14c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a150:	f003 0302 	and.w	r3, r3, #2
 800a154:	2b00      	cmp	r3, #0
 800a156:	d117      	bne.n	800a188 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a158:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a15c:	f003 0303 	and.w	r3, r3, #3
 800a160:	2b01      	cmp	r3, #1
 800a162:	d105      	bne.n	800a170 <create_name+0x338>
 800a164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a168:	f043 0310 	orr.w	r3, r3, #16
 800a16c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a170:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a174:	f003 030c 	and.w	r3, r3, #12
 800a178:	2b04      	cmp	r3, #4
 800a17a:	d105      	bne.n	800a188 <create_name+0x350>
 800a17c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a180:	f043 0308 	orr.w	r3, r3, #8
 800a184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a18e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800a192:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a194:	4618      	mov	r0, r3
 800a196:	3728      	adds	r7, #40	; 0x28
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	0800c4f0 	.word	0x0800c4f0
 800a1a0:	0800c91c 	.word	0x0800c91c
 800a1a4:	0800c4fc 	.word	0x0800c4fc

0800a1a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a1bc:	e002      	b.n	800a1c4 <follow_path+0x1c>
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	603b      	str	r3, [r7, #0]
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	2b2f      	cmp	r3, #47	; 0x2f
 800a1ca:	d0f8      	beq.n	800a1be <follow_path+0x16>
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	2b5c      	cmp	r3, #92	; 0x5c
 800a1d2:	d0f4      	beq.n	800a1be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	2b1f      	cmp	r3, #31
 800a1e0:	d80a      	bhi.n	800a1f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2280      	movs	r2, #128	; 0x80
 800a1e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f7ff f8fe 	bl	80093ee <dir_sdi>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	75fb      	strb	r3, [r7, #23]
 800a1f6:	e048      	b.n	800a28a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a1f8:	463b      	mov	r3, r7
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f7ff fe1b 	bl	8009e38 <create_name>
 800a202:	4603      	mov	r3, r0
 800a204:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a206:	7dfb      	ldrb	r3, [r7, #23]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d139      	bne.n	800a280 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f7ff fc5b 	bl	8009ac8 <dir_find>
 800a212:	4603      	mov	r3, r0
 800a214:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a21c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a21e:	7dfb      	ldrb	r3, [r7, #23]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00a      	beq.n	800a23a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a224:	7dfb      	ldrb	r3, [r7, #23]
 800a226:	2b04      	cmp	r3, #4
 800a228:	d12c      	bne.n	800a284 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a22a:	7afb      	ldrb	r3, [r7, #11]
 800a22c:	f003 0304 	and.w	r3, r3, #4
 800a230:	2b00      	cmp	r3, #0
 800a232:	d127      	bne.n	800a284 <follow_path+0xdc>
 800a234:	2305      	movs	r3, #5
 800a236:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a238:	e024      	b.n	800a284 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a23a:	7afb      	ldrb	r3, [r7, #11]
 800a23c:	f003 0304 	and.w	r3, r3, #4
 800a240:	2b00      	cmp	r3, #0
 800a242:	d121      	bne.n	800a288 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	799b      	ldrb	r3, [r3, #6]
 800a248:	f003 0310 	and.w	r3, r3, #16
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d102      	bne.n	800a256 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a250:	2305      	movs	r3, #5
 800a252:	75fb      	strb	r3, [r7, #23]
 800a254:	e019      	b.n	800a28a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	695b      	ldr	r3, [r3, #20]
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	8992      	ldrh	r2, [r2, #12]
 800a264:	fbb3 f0f2 	udiv	r0, r3, r2
 800a268:	fb02 f200 	mul.w	r2, r2, r0
 800a26c:	1a9b      	subs	r3, r3, r2
 800a26e:	440b      	add	r3, r1
 800a270:	4619      	mov	r1, r3
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f7ff fa61 	bl	800973a <ld_clust>
 800a278:	4602      	mov	r2, r0
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a27e:	e7bb      	b.n	800a1f8 <follow_path+0x50>
			if (res != FR_OK) break;
 800a280:	bf00      	nop
 800a282:	e002      	b.n	800a28a <follow_path+0xe2>
				break;
 800a284:	bf00      	nop
 800a286:	e000      	b.n	800a28a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a288:	bf00      	nop
			}
		}
	}

	return res;
 800a28a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3718      	adds	r7, #24
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a294:	b480      	push	{r7}
 800a296:	b087      	sub	sp, #28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a29c:	f04f 33ff 	mov.w	r3, #4294967295
 800a2a0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d031      	beq.n	800a30e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	617b      	str	r3, [r7, #20]
 800a2b0:	e002      	b.n	800a2b8 <get_ldnumber+0x24>
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	617b      	str	r3, [r7, #20]
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	2b1f      	cmp	r3, #31
 800a2be:	d903      	bls.n	800a2c8 <get_ldnumber+0x34>
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	2b3a      	cmp	r3, #58	; 0x3a
 800a2c6:	d1f4      	bne.n	800a2b2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	2b3a      	cmp	r3, #58	; 0x3a
 800a2ce:	d11c      	bne.n	800a30a <get_ldnumber+0x76>
			tp = *path;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	1c5a      	adds	r2, r3, #1
 800a2da:	60fa      	str	r2, [r7, #12]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	3b30      	subs	r3, #48	; 0x30
 800a2e0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	2b09      	cmp	r3, #9
 800a2e6:	d80e      	bhi.n	800a306 <get_ldnumber+0x72>
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d10a      	bne.n	800a306 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d107      	bne.n	800a306 <get_ldnumber+0x72>
					vol = (int)i;
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	617b      	str	r3, [r7, #20]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	697a      	ldr	r2, [r7, #20]
 800a304:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	e002      	b.n	800a310 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a30a:	2300      	movs	r3, #0
 800a30c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a30e:	693b      	ldr	r3, [r7, #16]
}
 800a310:	4618      	mov	r0, r3
 800a312:	371c      	adds	r7, #28
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	70da      	strb	r2, [r3, #3]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f04f 32ff 	mov.w	r2, #4294967295
 800a332:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f7fe fc80 	bl	8008c3c <move_window>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d001      	beq.n	800a346 <check_fs+0x2a>
 800a342:	2304      	movs	r3, #4
 800a344:	e038      	b.n	800a3b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	3338      	adds	r3, #56	; 0x38
 800a34a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a34e:	4618      	mov	r0, r3
 800a350:	f7fe f9c4 	bl	80086dc <ld_word>
 800a354:	4603      	mov	r3, r0
 800a356:	461a      	mov	r2, r3
 800a358:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d001      	beq.n	800a364 <check_fs+0x48>
 800a360:	2303      	movs	r3, #3
 800a362:	e029      	b.n	800a3b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a36a:	2be9      	cmp	r3, #233	; 0xe9
 800a36c:	d009      	beq.n	800a382 <check_fs+0x66>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a374:	2beb      	cmp	r3, #235	; 0xeb
 800a376:	d11e      	bne.n	800a3b6 <check_fs+0x9a>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a37e:	2b90      	cmp	r3, #144	; 0x90
 800a380:	d119      	bne.n	800a3b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	3338      	adds	r3, #56	; 0x38
 800a386:	3336      	adds	r3, #54	; 0x36
 800a388:	4618      	mov	r0, r3
 800a38a:	f7fe f9bf 	bl	800870c <ld_dword>
 800a38e:	4603      	mov	r3, r0
 800a390:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a394:	4a0a      	ldr	r2, [pc, #40]	; (800a3c0 <check_fs+0xa4>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d101      	bne.n	800a39e <check_fs+0x82>
 800a39a:	2300      	movs	r3, #0
 800a39c:	e00c      	b.n	800a3b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	3338      	adds	r3, #56	; 0x38
 800a3a2:	3352      	adds	r3, #82	; 0x52
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fe f9b1 	bl	800870c <ld_dword>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	4b05      	ldr	r3, [pc, #20]	; (800a3c4 <check_fs+0xa8>)
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d101      	bne.n	800a3b6 <check_fs+0x9a>
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	e000      	b.n	800a3b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a3b6:	2302      	movs	r3, #2
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3708      	adds	r7, #8
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	00544146 	.word	0x00544146
 800a3c4:	33544146 	.word	0x33544146

0800a3c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b096      	sub	sp, #88	; 0x58
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f7ff ff59 	bl	800a294 <get_ldnumber>
 800a3e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a3e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	da01      	bge.n	800a3ee <find_volume+0x26>
 800a3ea:	230b      	movs	r3, #11
 800a3ec:	e268      	b.n	800a8c0 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a3ee:	4ab0      	ldr	r2, [pc, #704]	; (800a6b0 <find_volume+0x2e8>)
 800a3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d101      	bne.n	800a402 <find_volume+0x3a>
 800a3fe:	230c      	movs	r3, #12
 800a400:	e25e      	b.n	800a8c0 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a406:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a408:	79fb      	ldrb	r3, [r7, #7]
 800a40a:	f023 0301 	bic.w	r3, r3, #1
 800a40e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d01a      	beq.n	800a44e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41a:	785b      	ldrb	r3, [r3, #1]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7fe f8bf 	bl	80085a0 <disk_status>
 800a422:	4603      	mov	r3, r0
 800a424:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a428:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a42c:	f003 0301 	and.w	r3, r3, #1
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10c      	bne.n	800a44e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a434:	79fb      	ldrb	r3, [r7, #7]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d007      	beq.n	800a44a <find_volume+0x82>
 800a43a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a43e:	f003 0304 	and.w	r3, r3, #4
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a446:	230a      	movs	r3, #10
 800a448:	e23a      	b.n	800a8c0 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800a44a:	2300      	movs	r3, #0
 800a44c:	e238      	b.n	800a8c0 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a450:	2200      	movs	r2, #0
 800a452:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a456:	b2da      	uxtb	r2, r3
 800a458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45e:	785b      	ldrb	r3, [r3, #1]
 800a460:	4618      	mov	r0, r3
 800a462:	f7fe f8b7 	bl	80085d4 <disk_initialize>
 800a466:	4603      	mov	r3, r0
 800a468:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a46c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a470:	f003 0301 	and.w	r3, r3, #1
 800a474:	2b00      	cmp	r3, #0
 800a476:	d001      	beq.n	800a47c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a478:	2303      	movs	r3, #3
 800a47a:	e221      	b.n	800a8c0 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a47c:	79fb      	ldrb	r3, [r7, #7]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d007      	beq.n	800a492 <find_volume+0xca>
 800a482:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a486:	f003 0304 	and.w	r3, r3, #4
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d001      	beq.n	800a492 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a48e:	230a      	movs	r3, #10
 800a490:	e216      	b.n	800a8c0 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a494:	7858      	ldrb	r0, [r3, #1]
 800a496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a498:	330c      	adds	r3, #12
 800a49a:	461a      	mov	r2, r3
 800a49c:	2102      	movs	r1, #2
 800a49e:	f7fe f8ff 	bl	80086a0 <disk_ioctl>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d001      	beq.n	800a4ac <find_volume+0xe4>
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e209      	b.n	800a8c0 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ae:	899b      	ldrh	r3, [r3, #12]
 800a4b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4b4:	d80d      	bhi.n	800a4d2 <find_volume+0x10a>
 800a4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b8:	899b      	ldrh	r3, [r3, #12]
 800a4ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4be:	d308      	bcc.n	800a4d2 <find_volume+0x10a>
 800a4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c2:	899b      	ldrh	r3, [r3, #12]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c8:	899b      	ldrh	r3, [r3, #12]
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <find_volume+0x10e>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e1f4      	b.n	800a8c0 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a4da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a4dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4de:	f7ff ff1d 	bl	800a31c <check_fs>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a4e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	d14b      	bne.n	800a588 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	643b      	str	r3, [r7, #64]	; 0x40
 800a4f4:	e01f      	b.n	800a536 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a4fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4fe:	011b      	lsls	r3, r3, #4
 800a500:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a504:	4413      	add	r3, r2
 800a506:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50a:	3304      	adds	r3, #4
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d006      	beq.n	800a520 <find_volume+0x158>
 800a512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a514:	3308      	adds	r3, #8
 800a516:	4618      	mov	r0, r3
 800a518:	f7fe f8f8 	bl	800870c <ld_dword>
 800a51c:	4602      	mov	r2, r0
 800a51e:	e000      	b.n	800a522 <find_volume+0x15a>
 800a520:	2200      	movs	r2, #0
 800a522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a52a:	440b      	add	r3, r1
 800a52c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a532:	3301      	adds	r3, #1
 800a534:	643b      	str	r3, [r7, #64]	; 0x40
 800a536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a538:	2b03      	cmp	r3, #3
 800a53a:	d9dc      	bls.n	800a4f6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a53c:	2300      	movs	r3, #0
 800a53e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a542:	2b00      	cmp	r3, #0
 800a544:	d002      	beq.n	800a54c <find_volume+0x184>
 800a546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a548:	3b01      	subs	r3, #1
 800a54a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a54c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a554:	4413      	add	r3, r2
 800a556:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a55a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a55c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d005      	beq.n	800a56e <find_volume+0x1a6>
 800a562:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a564:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a566:	f7ff fed9 	bl	800a31c <check_fs>
 800a56a:	4603      	mov	r3, r0
 800a56c:	e000      	b.n	800a570 <find_volume+0x1a8>
 800a56e:	2303      	movs	r3, #3
 800a570:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a574:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d905      	bls.n	800a588 <find_volume+0x1c0>
 800a57c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a57e:	3301      	adds	r3, #1
 800a580:	643b      	str	r3, [r7, #64]	; 0x40
 800a582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a584:	2b03      	cmp	r3, #3
 800a586:	d9e1      	bls.n	800a54c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a588:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a58c:	2b04      	cmp	r3, #4
 800a58e:	d101      	bne.n	800a594 <find_volume+0x1cc>
 800a590:	2301      	movs	r3, #1
 800a592:	e195      	b.n	800a8c0 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a594:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d901      	bls.n	800a5a0 <find_volume+0x1d8>
 800a59c:	230d      	movs	r3, #13
 800a59e:	e18f      	b.n	800a8c0 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a2:	3338      	adds	r3, #56	; 0x38
 800a5a4:	330b      	adds	r3, #11
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fe f898 	bl	80086dc <ld_word>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b2:	899b      	ldrh	r3, [r3, #12]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d001      	beq.n	800a5bc <find_volume+0x1f4>
 800a5b8:	230d      	movs	r3, #13
 800a5ba:	e181      	b.n	800a8c0 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5be:	3338      	adds	r3, #56	; 0x38
 800a5c0:	3316      	adds	r3, #22
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fe f88a 	bl	80086dc <ld_word>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a5cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d106      	bne.n	800a5e0 <find_volume+0x218>
 800a5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d4:	3338      	adds	r3, #56	; 0x38
 800a5d6:	3324      	adds	r3, #36	; 0x24
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7fe f897 	bl	800870c <ld_dword>
 800a5de:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a5e4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f2:	789b      	ldrb	r3, [r3, #2]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d005      	beq.n	800a604 <find_volume+0x23c>
 800a5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fa:	789b      	ldrb	r3, [r3, #2]
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d001      	beq.n	800a604 <find_volume+0x23c>
 800a600:	230d      	movs	r3, #13
 800a602:	e15d      	b.n	800a8c0 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a606:	789b      	ldrb	r3, [r3, #2]
 800a608:	461a      	mov	r2, r3
 800a60a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a60c:	fb02 f303 	mul.w	r3, r2, r3
 800a610:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a618:	b29a      	uxth	r2, r3
 800a61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a620:	895b      	ldrh	r3, [r3, #10]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d008      	beq.n	800a638 <find_volume+0x270>
 800a626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a628:	895b      	ldrh	r3, [r3, #10]
 800a62a:	461a      	mov	r2, r3
 800a62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62e:	895b      	ldrh	r3, [r3, #10]
 800a630:	3b01      	subs	r3, #1
 800a632:	4013      	ands	r3, r2
 800a634:	2b00      	cmp	r3, #0
 800a636:	d001      	beq.n	800a63c <find_volume+0x274>
 800a638:	230d      	movs	r3, #13
 800a63a:	e141      	b.n	800a8c0 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63e:	3338      	adds	r3, #56	; 0x38
 800a640:	3311      	adds	r3, #17
 800a642:	4618      	mov	r0, r3
 800a644:	f7fe f84a 	bl	80086dc <ld_word>
 800a648:	4603      	mov	r3, r0
 800a64a:	461a      	mov	r2, r3
 800a64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a652:	891b      	ldrh	r3, [r3, #8]
 800a654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a656:	8992      	ldrh	r2, [r2, #12]
 800a658:	0952      	lsrs	r2, r2, #5
 800a65a:	b292      	uxth	r2, r2
 800a65c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a660:	fb02 f201 	mul.w	r2, r2, r1
 800a664:	1a9b      	subs	r3, r3, r2
 800a666:	b29b      	uxth	r3, r3
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d001      	beq.n	800a670 <find_volume+0x2a8>
 800a66c:	230d      	movs	r3, #13
 800a66e:	e127      	b.n	800a8c0 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a672:	3338      	adds	r3, #56	; 0x38
 800a674:	3313      	adds	r3, #19
 800a676:	4618      	mov	r0, r3
 800a678:	f7fe f830 	bl	80086dc <ld_word>
 800a67c:	4603      	mov	r3, r0
 800a67e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a682:	2b00      	cmp	r3, #0
 800a684:	d106      	bne.n	800a694 <find_volume+0x2cc>
 800a686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a688:	3338      	adds	r3, #56	; 0x38
 800a68a:	3320      	adds	r3, #32
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fe f83d 	bl	800870c <ld_dword>
 800a692:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a696:	3338      	adds	r3, #56	; 0x38
 800a698:	330e      	adds	r3, #14
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fe f81e 	bl	80086dc <ld_word>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a6a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d104      	bne.n	800a6b4 <find_volume+0x2ec>
 800a6aa:	230d      	movs	r3, #13
 800a6ac:	e108      	b.n	800a8c0 <find_volume+0x4f8>
 800a6ae:	bf00      	nop
 800a6b0:	20000120 	.word	0x20000120

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a6b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a6b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6b8:	4413      	add	r3, r2
 800a6ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6bc:	8911      	ldrh	r1, [r2, #8]
 800a6be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6c0:	8992      	ldrh	r2, [r2, #12]
 800a6c2:	0952      	lsrs	r2, r2, #5
 800a6c4:	b292      	uxth	r2, r2
 800a6c6:	fbb1 f2f2 	udiv	r2, r1, r2
 800a6ca:	b292      	uxth	r2, r2
 800a6cc:	4413      	add	r3, r2
 800a6ce:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a6d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d201      	bcs.n	800a6dc <find_volume+0x314>
 800a6d8:	230d      	movs	r3, #13
 800a6da:	e0f1      	b.n	800a8c0 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a6dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6e4:	8952      	ldrh	r2, [r2, #10]
 800a6e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6ea:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d101      	bne.n	800a6f6 <find_volume+0x32e>
 800a6f2:	230d      	movs	r3, #13
 800a6f4:	e0e4      	b.n	800a8c0 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800a6f6:	2303      	movs	r3, #3
 800a6f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fe:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a702:	4293      	cmp	r3, r2
 800a704:	d802      	bhi.n	800a70c <find_volume+0x344>
 800a706:	2302      	movs	r3, #2
 800a708:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a712:	4293      	cmp	r3, r2
 800a714:	d802      	bhi.n	800a71c <find_volume+0x354>
 800a716:	2301      	movs	r3, #1
 800a718:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71e:	1c9a      	adds	r2, r3, #2
 800a720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a722:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a726:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a728:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a72a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a72c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a72e:	441a      	add	r2, r3
 800a730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a732:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a734:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a738:	441a      	add	r2, r3
 800a73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a73e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a742:	2b03      	cmp	r3, #3
 800a744:	d11e      	bne.n	800a784 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a748:	3338      	adds	r3, #56	; 0x38
 800a74a:	332a      	adds	r3, #42	; 0x2a
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7fd ffc5 	bl	80086dc <ld_word>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <find_volume+0x394>
 800a758:	230d      	movs	r3, #13
 800a75a:	e0b1      	b.n	800a8c0 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75e:	891b      	ldrh	r3, [r3, #8]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d001      	beq.n	800a768 <find_volume+0x3a0>
 800a764:	230d      	movs	r3, #13
 800a766:	e0ab      	b.n	800a8c0 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76a:	3338      	adds	r3, #56	; 0x38
 800a76c:	332c      	adds	r3, #44	; 0x2c
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fd ffcc 	bl	800870c <ld_dword>
 800a774:	4602      	mov	r2, r0
 800a776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a778:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77c:	69db      	ldr	r3, [r3, #28]
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	647b      	str	r3, [r7, #68]	; 0x44
 800a782:	e01f      	b.n	800a7c4 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a786:	891b      	ldrh	r3, [r3, #8]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d101      	bne.n	800a790 <find_volume+0x3c8>
 800a78c:	230d      	movs	r3, #13
 800a78e:	e097      	b.n	800a8c0 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a792:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a796:	441a      	add	r2, r3
 800a798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a79c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a7a0:	2b02      	cmp	r3, #2
 800a7a2:	d103      	bne.n	800a7ac <find_volume+0x3e4>
 800a7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a6:	69db      	ldr	r3, [r3, #28]
 800a7a8:	005b      	lsls	r3, r3, #1
 800a7aa:	e00a      	b.n	800a7c2 <find_volume+0x3fa>
 800a7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ae:	69da      	ldr	r2, [r3, #28]
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	005b      	lsls	r3, r3, #1
 800a7b4:	4413      	add	r3, r2
 800a7b6:	085a      	lsrs	r2, r3, #1
 800a7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ba:	69db      	ldr	r3, [r3, #28]
 800a7bc:	f003 0301 	and.w	r3, r3, #1
 800a7c0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a7c2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c6:	6a1a      	ldr	r2, [r3, #32]
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ca:	899b      	ldrh	r3, [r3, #12]
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7d0:	440b      	add	r3, r1
 800a7d2:	3b01      	subs	r3, #1
 800a7d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7d6:	8989      	ldrh	r1, [r1, #12]
 800a7d8:	fbb3 f3f1 	udiv	r3, r3, r1
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d201      	bcs.n	800a7e4 <find_volume+0x41c>
 800a7e0:	230d      	movs	r3, #13
 800a7e2:	e06d      	b.n	800a8c0 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ea:	619a      	str	r2, [r3, #24]
 800a7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ee:	699a      	ldr	r2, [r3, #24]
 800a7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f6:	2280      	movs	r2, #128	; 0x80
 800a7f8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a7fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a7fe:	2b03      	cmp	r3, #3
 800a800:	d149      	bne.n	800a896 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a804:	3338      	adds	r3, #56	; 0x38
 800a806:	3330      	adds	r3, #48	; 0x30
 800a808:	4618      	mov	r0, r3
 800a80a:	f7fd ff67 	bl	80086dc <ld_word>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b01      	cmp	r3, #1
 800a812:	d140      	bne.n	800a896 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a816:	3301      	adds	r3, #1
 800a818:	4619      	mov	r1, r3
 800a81a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a81c:	f7fe fa0e 	bl	8008c3c <move_window>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d137      	bne.n	800a896 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800a826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a828:	2200      	movs	r2, #0
 800a82a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82e:	3338      	adds	r3, #56	; 0x38
 800a830:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a834:	4618      	mov	r0, r3
 800a836:	f7fd ff51 	bl	80086dc <ld_word>
 800a83a:	4603      	mov	r3, r0
 800a83c:	461a      	mov	r2, r3
 800a83e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a842:	429a      	cmp	r2, r3
 800a844:	d127      	bne.n	800a896 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a848:	3338      	adds	r3, #56	; 0x38
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7fd ff5e 	bl	800870c <ld_dword>
 800a850:	4602      	mov	r2, r0
 800a852:	4b1d      	ldr	r3, [pc, #116]	; (800a8c8 <find_volume+0x500>)
 800a854:	429a      	cmp	r2, r3
 800a856:	d11e      	bne.n	800a896 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85a:	3338      	adds	r3, #56	; 0x38
 800a85c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a860:	4618      	mov	r0, r3
 800a862:	f7fd ff53 	bl	800870c <ld_dword>
 800a866:	4602      	mov	r2, r0
 800a868:	4b18      	ldr	r3, [pc, #96]	; (800a8cc <find_volume+0x504>)
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d113      	bne.n	800a896 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a870:	3338      	adds	r3, #56	; 0x38
 800a872:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a876:	4618      	mov	r0, r3
 800a878:	f7fd ff48 	bl	800870c <ld_dword>
 800a87c:	4602      	mov	r2, r0
 800a87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a880:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a884:	3338      	adds	r3, #56	; 0x38
 800a886:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7fd ff3e 	bl	800870c <ld_dword>
 800a890:	4602      	mov	r2, r0
 800a892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a894:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a898:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a89c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a89e:	4b0c      	ldr	r3, [pc, #48]	; (800a8d0 <find_volume+0x508>)
 800a8a0:	881b      	ldrh	r3, [r3, #0]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	4b0a      	ldr	r3, [pc, #40]	; (800a8d0 <find_volume+0x508>)
 800a8a8:	801a      	strh	r2, [r3, #0]
 800a8aa:	4b09      	ldr	r3, [pc, #36]	; (800a8d0 <find_volume+0x508>)
 800a8ac:	881a      	ldrh	r2, [r3, #0]
 800a8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b0:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b4:	4a07      	ldr	r2, [pc, #28]	; (800a8d4 <find_volume+0x50c>)
 800a8b6:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a8b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a8ba:	f7fe f957 	bl	8008b6c <clear_lock>
#endif
	return FR_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3758      	adds	r7, #88	; 0x58
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	41615252 	.word	0x41615252
 800a8cc:	61417272 	.word	0x61417272
 800a8d0:	20000124 	.word	0x20000124
 800a8d4:	20000148 	.word	0x20000148

0800a8d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a8e2:	2309      	movs	r3, #9
 800a8e4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d01c      	beq.n	800a926 <validate+0x4e>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d018      	beq.n	800a926 <validate+0x4e>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d013      	beq.n	800a926 <validate+0x4e>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	889a      	ldrh	r2, [r3, #4]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	88db      	ldrh	r3, [r3, #6]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d10c      	bne.n	800a926 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	785b      	ldrb	r3, [r3, #1]
 800a912:	4618      	mov	r0, r3
 800a914:	f7fd fe44 	bl	80085a0 <disk_status>
 800a918:	4603      	mov	r3, r0
 800a91a:	f003 0301 	and.w	r3, r3, #1
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d101      	bne.n	800a926 <validate+0x4e>
			res = FR_OK;
 800a922:	2300      	movs	r3, #0
 800a924:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a926:	7bfb      	ldrb	r3, [r7, #15]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d102      	bne.n	800a932 <validate+0x5a>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	e000      	b.n	800a934 <validate+0x5c>
 800a932:	2300      	movs	r3, #0
 800a934:	683a      	ldr	r2, [r7, #0]
 800a936:	6013      	str	r3, [r2, #0]
	return res;
 800a938:	7bfb      	ldrb	r3, [r7, #15]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
	...

0800a944 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b088      	sub	sp, #32
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	4613      	mov	r3, r2
 800a950:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a956:	f107 0310 	add.w	r3, r7, #16
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7ff fc9a 	bl	800a294 <get_ldnumber>
 800a960:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	2b00      	cmp	r3, #0
 800a966:	da01      	bge.n	800a96c <f_mount+0x28>
 800a968:	230b      	movs	r3, #11
 800a96a:	e02b      	b.n	800a9c4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a96c:	4a17      	ldr	r2, [pc, #92]	; (800a9cc <f_mount+0x88>)
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a974:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d005      	beq.n	800a988 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a97c:	69b8      	ldr	r0, [r7, #24]
 800a97e:	f7fe f8f5 	bl	8008b6c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	2200      	movs	r2, #0
 800a986:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d002      	beq.n	800a994 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2200      	movs	r2, #0
 800a992:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	490d      	ldr	r1, [pc, #52]	; (800a9cc <f_mount+0x88>)
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d002      	beq.n	800a9aa <f_mount+0x66>
 800a9a4:	79fb      	ldrb	r3, [r7, #7]
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d001      	beq.n	800a9ae <f_mount+0x6a>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	e00a      	b.n	800a9c4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a9ae:	f107 010c 	add.w	r1, r7, #12
 800a9b2:	f107 0308 	add.w	r3, r7, #8
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7ff fd05 	bl	800a3c8 <find_volume>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a9c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3720      	adds	r7, #32
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	20000120 	.word	0x20000120

0800a9d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b09a      	sub	sp, #104	; 0x68
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d101      	bne.n	800a9e8 <f_open+0x18>
 800a9e4:	2309      	movs	r3, #9
 800a9e6:	e1bb      	b.n	800ad60 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a9e8:	79fb      	ldrb	r3, [r7, #7]
 800a9ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a9f0:	79fa      	ldrb	r2, [r7, #7]
 800a9f2:	f107 0114 	add.w	r1, r7, #20
 800a9f6:	f107 0308 	add.w	r3, r7, #8
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7ff fce4 	bl	800a3c8 <find_volume>
 800aa00:	4603      	mov	r3, r0
 800aa02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800aa06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f040 819f 	bne.w	800ad4e <f_open+0x37e>
		dj.obj.fs = fs;
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800aa14:	68ba      	ldr	r2, [r7, #8]
 800aa16:	f107 0318 	add.w	r3, r7, #24
 800aa1a:	4611      	mov	r1, r2
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7ff fbc3 	bl	800a1a8 <follow_path>
 800aa22:	4603      	mov	r3, r0
 800aa24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800aa28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d11a      	bne.n	800aa66 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800aa30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800aa34:	b25b      	sxtb	r3, r3
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	da03      	bge.n	800aa42 <f_open+0x72>
				res = FR_INVALID_NAME;
 800aa3a:	2306      	movs	r3, #6
 800aa3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800aa40:	e011      	b.n	800aa66 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aa42:	79fb      	ldrb	r3, [r7, #7]
 800aa44:	f023 0301 	bic.w	r3, r3, #1
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	bf14      	ite	ne
 800aa4c:	2301      	movne	r3, #1
 800aa4e:	2300      	moveq	r3, #0
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	461a      	mov	r2, r3
 800aa54:	f107 0318 	add.w	r3, r7, #24
 800aa58:	4611      	mov	r1, r2
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fd ff3e 	bl	80088dc <chk_lock>
 800aa60:	4603      	mov	r3, r0
 800aa62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800aa66:	79fb      	ldrb	r3, [r7, #7]
 800aa68:	f003 031c 	and.w	r3, r3, #28
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d07f      	beq.n	800ab70 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800aa70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d017      	beq.n	800aaa8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800aa78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa7c:	2b04      	cmp	r3, #4
 800aa7e:	d10e      	bne.n	800aa9e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800aa80:	f7fd ff88 	bl	8008994 <enq_lock>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d006      	beq.n	800aa98 <f_open+0xc8>
 800aa8a:	f107 0318 	add.w	r3, r7, #24
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7ff f8da 	bl	8009c48 <dir_register>
 800aa94:	4603      	mov	r3, r0
 800aa96:	e000      	b.n	800aa9a <f_open+0xca>
 800aa98:	2312      	movs	r3, #18
 800aa9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800aa9e:	79fb      	ldrb	r3, [r7, #7]
 800aaa0:	f043 0308 	orr.w	r3, r3, #8
 800aaa4:	71fb      	strb	r3, [r7, #7]
 800aaa6:	e010      	b.n	800aaca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800aaa8:	7fbb      	ldrb	r3, [r7, #30]
 800aaaa:	f003 0311 	and.w	r3, r3, #17
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d003      	beq.n	800aaba <f_open+0xea>
					res = FR_DENIED;
 800aab2:	2307      	movs	r3, #7
 800aab4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800aab8:	e007      	b.n	800aaca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800aaba:	79fb      	ldrb	r3, [r7, #7]
 800aabc:	f003 0304 	and.w	r3, r3, #4
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d002      	beq.n	800aaca <f_open+0xfa>
 800aac4:	2308      	movs	r3, #8
 800aac6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800aaca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d168      	bne.n	800aba4 <f_open+0x1d4>
 800aad2:	79fb      	ldrb	r3, [r7, #7]
 800aad4:	f003 0308 	and.w	r3, r3, #8
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d063      	beq.n	800aba4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800aadc:	f7fd fb14 	bl	8008108 <get_fattime>
 800aae0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800aae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae4:	330e      	adds	r3, #14
 800aae6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7fd fe4d 	bl	8008788 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800aaee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf0:	3316      	adds	r3, #22
 800aaf2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7fd fe47 	bl	8008788 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800aafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafc:	330b      	adds	r3, #11
 800aafe:	2220      	movs	r2, #32
 800ab00:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab06:	4611      	mov	r1, r2
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7fe fe16 	bl	800973a <ld_clust>
 800ab0e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab14:	2200      	movs	r2, #0
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7fe fe2e 	bl	8009778 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ab1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1e:	331c      	adds	r3, #28
 800ab20:	2100      	movs	r1, #0
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7fd fe30 	bl	8008788 <st_dword>
					fs->wflag = 1;
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ab2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d037      	beq.n	800aba4 <f_open+0x1d4>
						dw = fs->winsect;
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab38:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ab3a:	f107 0318 	add.w	r3, r7, #24
 800ab3e:	2200      	movs	r2, #0
 800ab40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7fe fb1e 	bl	8009184 <remove_chain>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ab4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d126      	bne.n	800aba4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fe f86e 	bl	8008c3c <move_window>
 800ab60:	4603      	mov	r3, r0
 800ab62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab6a:	3a01      	subs	r2, #1
 800ab6c:	615a      	str	r2, [r3, #20]
 800ab6e:	e019      	b.n	800aba4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ab70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d115      	bne.n	800aba4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ab78:	7fbb      	ldrb	r3, [r7, #30]
 800ab7a:	f003 0310 	and.w	r3, r3, #16
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d003      	beq.n	800ab8a <f_open+0x1ba>
					res = FR_NO_FILE;
 800ab82:	2304      	movs	r3, #4
 800ab84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ab88:	e00c      	b.n	800aba4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ab8a:	79fb      	ldrb	r3, [r7, #7]
 800ab8c:	f003 0302 	and.w	r3, r3, #2
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d007      	beq.n	800aba4 <f_open+0x1d4>
 800ab94:	7fbb      	ldrb	r3, [r7, #30]
 800ab96:	f003 0301 	and.w	r3, r3, #1
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d002      	beq.n	800aba4 <f_open+0x1d4>
						res = FR_DENIED;
 800ab9e:	2307      	movs	r3, #7
 800aba0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800aba4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d128      	bne.n	800abfe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800abac:	79fb      	ldrb	r3, [r7, #7]
 800abae:	f003 0308 	and.w	r3, r3, #8
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d003      	beq.n	800abbe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800abb6:	79fb      	ldrb	r3, [r7, #7]
 800abb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abbc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800abc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800abcc:	79fb      	ldrb	r3, [r7, #7]
 800abce:	f023 0301 	bic.w	r3, r3, #1
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	bf14      	ite	ne
 800abd6:	2301      	movne	r3, #1
 800abd8:	2300      	moveq	r3, #0
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	461a      	mov	r2, r3
 800abde:	f107 0318 	add.w	r3, r7, #24
 800abe2:	4611      	mov	r1, r2
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7fd fef7 	bl	80089d8 <inc_lock>
 800abea:	4602      	mov	r2, r0
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	691b      	ldr	r3, [r3, #16]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d102      	bne.n	800abfe <f_open+0x22e>
 800abf8:	2302      	movs	r3, #2
 800abfa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800abfe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f040 80a3 	bne.w	800ad4e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7fe fd93 	bl	800973a <ld_clust>
 800ac14:	4602      	mov	r2, r0
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ac1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac1c:	331c      	adds	r3, #28
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7fd fd74 	bl	800870c <ld_dword>
 800ac24:	4602      	mov	r2, r0
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ac30:	697a      	ldr	r2, [r7, #20]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	88da      	ldrh	r2, [r3, #6]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	79fa      	ldrb	r2, [r7, #7]
 800ac42:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2200      	movs	r2, #0
 800ac48:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2200      	movs	r2, #0
 800ac54:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	3330      	adds	r3, #48	; 0x30
 800ac5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ac5e:	2100      	movs	r1, #0
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7fd fdde 	bl	8008822 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ac66:	79fb      	ldrb	r3, [r7, #7]
 800ac68:	f003 0320 	and.w	r3, r3, #32
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d06e      	beq.n	800ad4e <f_open+0x37e>
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d06a      	beq.n	800ad4e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	68da      	ldr	r2, [r3, #12]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	895b      	ldrh	r3, [r3, #10]
 800ac84:	461a      	mov	r2, r3
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	899b      	ldrh	r3, [r3, #12]
 800ac8a:	fb03 f302 	mul.w	r3, r3, r2
 800ac8e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac9c:	e016      	b.n	800accc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7fe f887 	bl	8008db6 <get_fat>
 800aca8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800acaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acac:	2b01      	cmp	r3, #1
 800acae:	d802      	bhi.n	800acb6 <f_open+0x2e6>
 800acb0:	2302      	movs	r3, #2
 800acb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800acb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acbc:	d102      	bne.n	800acc4 <f_open+0x2f4>
 800acbe:	2301      	movs	r3, #1
 800acc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800acc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800acc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acc8:	1ad3      	subs	r3, r2, r3
 800acca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800accc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d103      	bne.n	800acdc <f_open+0x30c>
 800acd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800acd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acd8:	429a      	cmp	r2, r3
 800acda:	d8e0      	bhi.n	800ac9e <f_open+0x2ce>
				}
				fp->clust = clst;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ace0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ace2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d131      	bne.n	800ad4e <f_open+0x37e>
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	899b      	ldrh	r3, [r3, #12]
 800acee:	461a      	mov	r2, r3
 800acf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acf2:	fbb3 f1f2 	udiv	r1, r3, r2
 800acf6:	fb02 f201 	mul.w	r2, r2, r1
 800acfa:	1a9b      	subs	r3, r3, r2
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d026      	beq.n	800ad4e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7fe f837 	bl	8008d78 <clust2sect>
 800ad0a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ad0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d103      	bne.n	800ad1a <f_open+0x34a>
						res = FR_INT_ERR;
 800ad12:	2302      	movs	r3, #2
 800ad14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ad18:	e019      	b.n	800ad4e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	899b      	ldrh	r3, [r3, #12]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad22:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad28:	441a      	add	r2, r3
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	7858      	ldrb	r0, [r3, #1]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6a1a      	ldr	r2, [r3, #32]
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	f7fd fc6f 	bl	8008620 <disk_read>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d002      	beq.n	800ad4e <f_open+0x37e>
 800ad48:	2301      	movs	r3, #1
 800ad4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ad4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d002      	beq.n	800ad5c <f_open+0x38c>
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ad5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3768      	adds	r7, #104	; 0x68
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b08c      	sub	sp, #48	; 0x30
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
 800ad74:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f107 0210 	add.w	r2, r7, #16
 800ad86:	4611      	mov	r1, r2
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7ff fda5 	bl	800a8d8 <validate>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ad94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d107      	bne.n	800adac <f_write+0x44>
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	7d5b      	ldrb	r3, [r3, #21]
 800ada0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ada4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d002      	beq.n	800adb2 <f_write+0x4a>
 800adac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800adb0:	e16a      	b.n	800b088 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	7d1b      	ldrb	r3, [r3, #20]
 800adb6:	f003 0302 	and.w	r3, r3, #2
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d101      	bne.n	800adc2 <f_write+0x5a>
 800adbe:	2307      	movs	r3, #7
 800adc0:	e162      	b.n	800b088 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	699a      	ldr	r2, [r3, #24]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	441a      	add	r2, r3
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	699b      	ldr	r3, [r3, #24]
 800adce:	429a      	cmp	r2, r3
 800add0:	f080 814c 	bcs.w	800b06c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	43db      	mvns	r3, r3
 800adda:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800addc:	e146      	b.n	800b06c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	699b      	ldr	r3, [r3, #24]
 800ade2:	693a      	ldr	r2, [r7, #16]
 800ade4:	8992      	ldrh	r2, [r2, #12]
 800ade6:	fbb3 f1f2 	udiv	r1, r3, r2
 800adea:	fb02 f201 	mul.w	r2, r2, r1
 800adee:	1a9b      	subs	r3, r3, r2
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f040 80f1 	bne.w	800afd8 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	699b      	ldr	r3, [r3, #24]
 800adfa:	693a      	ldr	r2, [r7, #16]
 800adfc:	8992      	ldrh	r2, [r2, #12]
 800adfe:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae02:	693a      	ldr	r2, [r7, #16]
 800ae04:	8952      	ldrh	r2, [r2, #10]
 800ae06:	3a01      	subs	r2, #1
 800ae08:	4013      	ands	r3, r2
 800ae0a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d143      	bne.n	800ae9a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d10c      	bne.n	800ae34 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ae20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d11a      	bne.n	800ae5c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2100      	movs	r1, #0
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7fe fa0f 	bl	800924e <create_chain>
 800ae30:	62b8      	str	r0, [r7, #40]	; 0x28
 800ae32:	e013      	b.n	800ae5c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d007      	beq.n	800ae4c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	699b      	ldr	r3, [r3, #24]
 800ae40:	4619      	mov	r1, r3
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f7fe fa9b 	bl	800937e <clmt_clust>
 800ae48:	62b8      	str	r0, [r7, #40]	; 0x28
 800ae4a:	e007      	b.n	800ae5c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	69db      	ldr	r3, [r3, #28]
 800ae52:	4619      	mov	r1, r3
 800ae54:	4610      	mov	r0, r2
 800ae56:	f7fe f9fa 	bl	800924e <create_chain>
 800ae5a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	f000 8109 	beq.w	800b076 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ae64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d104      	bne.n	800ae74 <f_write+0x10c>
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2202      	movs	r2, #2
 800ae6e:	755a      	strb	r2, [r3, #21]
 800ae70:	2302      	movs	r3, #2
 800ae72:	e109      	b.n	800b088 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ae74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7a:	d104      	bne.n	800ae86 <f_write+0x11e>
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	755a      	strb	r2, [r3, #21]
 800ae82:	2301      	movs	r3, #1
 800ae84:	e100      	b.n	800b088 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae8a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d102      	bne.n	800ae9a <f_write+0x132>
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae98:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	7d1b      	ldrb	r3, [r3, #20]
 800ae9e:	b25b      	sxtb	r3, r3
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	da18      	bge.n	800aed6 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	7858      	ldrb	r0, [r3, #1]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	6a1a      	ldr	r2, [r3, #32]
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	f7fd fbd4 	bl	8008660 <disk_write>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d004      	beq.n	800aec8 <f_write+0x160>
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2201      	movs	r2, #1
 800aec2:	755a      	strb	r2, [r3, #21]
 800aec4:	2301      	movs	r3, #1
 800aec6:	e0df      	b.n	800b088 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	7d1b      	ldrb	r3, [r3, #20]
 800aecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aed0:	b2da      	uxtb	r2, r3
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800aed6:	693a      	ldr	r2, [r7, #16]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	69db      	ldr	r3, [r3, #28]
 800aedc:	4619      	mov	r1, r3
 800aede:	4610      	mov	r0, r2
 800aee0:	f7fd ff4a 	bl	8008d78 <clust2sect>
 800aee4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d104      	bne.n	800aef6 <f_write+0x18e>
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2202      	movs	r2, #2
 800aef0:	755a      	strb	r2, [r3, #21]
 800aef2:	2302      	movs	r3, #2
 800aef4:	e0c8      	b.n	800b088 <f_write+0x320>
			sect += csect;
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	4413      	add	r3, r2
 800aefc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	899b      	ldrh	r3, [r3, #12]
 800af02:	461a      	mov	r2, r3
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	fbb3 f3f2 	udiv	r3, r3, r2
 800af0a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800af0c:	6a3b      	ldr	r3, [r7, #32]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d043      	beq.n	800af9a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800af12:	69ba      	ldr	r2, [r7, #24]
 800af14:	6a3b      	ldr	r3, [r7, #32]
 800af16:	4413      	add	r3, r2
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	8952      	ldrh	r2, [r2, #10]
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d905      	bls.n	800af2c <f_write+0x1c4>
					cc = fs->csize - csect;
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	895b      	ldrh	r3, [r3, #10]
 800af24:	461a      	mov	r2, r3
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	7858      	ldrb	r0, [r3, #1]
 800af30:	6a3b      	ldr	r3, [r7, #32]
 800af32:	697a      	ldr	r2, [r7, #20]
 800af34:	69f9      	ldr	r1, [r7, #28]
 800af36:	f7fd fb93 	bl	8008660 <disk_write>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d004      	beq.n	800af4a <f_write+0x1e2>
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2201      	movs	r2, #1
 800af44:	755a      	strb	r2, [r3, #21]
 800af46:	2301      	movs	r3, #1
 800af48:	e09e      	b.n	800b088 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	6a1a      	ldr	r2, [r3, #32]
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	1ad3      	subs	r3, r2, r3
 800af52:	6a3a      	ldr	r2, [r7, #32]
 800af54:	429a      	cmp	r2, r3
 800af56:	d918      	bls.n	800af8a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6a1a      	ldr	r2, [r3, #32]
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	8992      	ldrh	r2, [r2, #12]
 800af6a:	fb02 f303 	mul.w	r3, r2, r3
 800af6e:	69fa      	ldr	r2, [r7, #28]
 800af70:	18d1      	adds	r1, r2, r3
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	899b      	ldrh	r3, [r3, #12]
 800af76:	461a      	mov	r2, r3
 800af78:	f7fd fc32 	bl	80087e0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	7d1b      	ldrb	r3, [r3, #20]
 800af80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af84:	b2da      	uxtb	r2, r3
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	899b      	ldrh	r3, [r3, #12]
 800af8e:	461a      	mov	r2, r3
 800af90:	6a3b      	ldr	r3, [r7, #32]
 800af92:	fb02 f303 	mul.w	r3, r2, r3
 800af96:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800af98:	e04b      	b.n	800b032 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	697a      	ldr	r2, [r7, #20]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d016      	beq.n	800afd2 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	699a      	ldr	r2, [r3, #24]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800afac:	429a      	cmp	r2, r3
 800afae:	d210      	bcs.n	800afd2 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	7858      	ldrb	r0, [r3, #1]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800afba:	2301      	movs	r3, #1
 800afbc:	697a      	ldr	r2, [r7, #20]
 800afbe:	f7fd fb2f 	bl	8008620 <disk_read>
 800afc2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d004      	beq.n	800afd2 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2201      	movs	r2, #1
 800afcc:	755a      	strb	r2, [r3, #21]
 800afce:	2301      	movs	r3, #1
 800afd0:	e05a      	b.n	800b088 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	697a      	ldr	r2, [r7, #20]
 800afd6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	899b      	ldrh	r3, [r3, #12]
 800afdc:	4618      	mov	r0, r3
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	699b      	ldr	r3, [r3, #24]
 800afe2:	693a      	ldr	r2, [r7, #16]
 800afe4:	8992      	ldrh	r2, [r2, #12]
 800afe6:	fbb3 f1f2 	udiv	r1, r3, r2
 800afea:	fb02 f201 	mul.w	r2, r2, r1
 800afee:	1a9b      	subs	r3, r3, r2
 800aff0:	1ac3      	subs	r3, r0, r3
 800aff2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800aff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d901      	bls.n	800b000 <f_write+0x298>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	699b      	ldr	r3, [r3, #24]
 800b00a:	693a      	ldr	r2, [r7, #16]
 800b00c:	8992      	ldrh	r2, [r2, #12]
 800b00e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b012:	fb02 f200 	mul.w	r2, r2, r0
 800b016:	1a9b      	subs	r3, r3, r2
 800b018:	440b      	add	r3, r1
 800b01a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b01c:	69f9      	ldr	r1, [r7, #28]
 800b01e:	4618      	mov	r0, r3
 800b020:	f7fd fbde 	bl	80087e0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	7d1b      	ldrb	r3, [r3, #20]
 800b028:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b02c:	b2da      	uxtb	r2, r3
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b032:	69fa      	ldr	r2, [r7, #28]
 800b034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b036:	4413      	add	r3, r2
 800b038:	61fb      	str	r3, [r7, #28]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	699a      	ldr	r2, [r3, #24]
 800b03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b040:	441a      	add	r2, r3
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	619a      	str	r2, [r3, #24]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	68da      	ldr	r2, [r3, #12]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	699b      	ldr	r3, [r3, #24]
 800b04e:	429a      	cmp	r2, r3
 800b050:	bf38      	it	cc
 800b052:	461a      	movcc	r2, r3
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	60da      	str	r2, [r3, #12]
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05e:	441a      	add	r2, r3
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	601a      	str	r2, [r3, #0]
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f47f aeb5 	bne.w	800adde <f_write+0x76>
 800b074:	e000      	b.n	800b078 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b076:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	7d1b      	ldrb	r3, [r3, #20]
 800b07c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b080:	b2da      	uxtb	r2, r3
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b086:	2300      	movs	r3, #0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3730      	adds	r7, #48	; 0x30
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f107 0208 	add.w	r2, r7, #8
 800b09e:	4611      	mov	r1, r2
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7ff fc19 	bl	800a8d8 <validate>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b0aa:	7dfb      	ldrb	r3, [r7, #23]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d168      	bne.n	800b182 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	7d1b      	ldrb	r3, [r3, #20]
 800b0b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d062      	beq.n	800b182 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	7d1b      	ldrb	r3, [r3, #20]
 800b0c0:	b25b      	sxtb	r3, r3
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	da15      	bge.n	800b0f2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	7858      	ldrb	r0, [r3, #1]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6a1a      	ldr	r2, [r3, #32]
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	f7fd fac3 	bl	8008660 <disk_write>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d001      	beq.n	800b0e4 <f_sync+0x54>
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e04f      	b.n	800b184 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	7d1b      	ldrb	r3, [r3, #20]
 800b0e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0ec:	b2da      	uxtb	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b0f2:	f7fd f809 	bl	8008108 <get_fattime>
 800b0f6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fe:	4619      	mov	r1, r3
 800b100:	4610      	mov	r0, r2
 800b102:	f7fd fd9b 	bl	8008c3c <move_window>
 800b106:	4603      	mov	r3, r0
 800b108:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b10a:	7dfb      	ldrb	r3, [r7, #23]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d138      	bne.n	800b182 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b114:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	330b      	adds	r3, #11
 800b11a:	781a      	ldrb	r2, [r3, #0]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	330b      	adds	r3, #11
 800b120:	f042 0220 	orr.w	r2, r2, #32
 800b124:	b2d2      	uxtb	r2, r2
 800b126:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6818      	ldr	r0, [r3, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	461a      	mov	r2, r3
 800b132:	68f9      	ldr	r1, [r7, #12]
 800b134:	f7fe fb20 	bl	8009778 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f103 021c 	add.w	r2, r3, #28
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	4619      	mov	r1, r3
 800b144:	4610      	mov	r0, r2
 800b146:	f7fd fb1f 	bl	8008788 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	3316      	adds	r3, #22
 800b14e:	6939      	ldr	r1, [r7, #16]
 800b150:	4618      	mov	r0, r3
 800b152:	f7fd fb19 	bl	8008788 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	3312      	adds	r3, #18
 800b15a:	2100      	movs	r1, #0
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fd faf8 	bl	8008752 <st_word>
					fs->wflag = 1;
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	2201      	movs	r2, #1
 800b166:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7fd fd94 	bl	8008c98 <sync_fs>
 800b170:	4603      	mov	r3, r0
 800b172:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	7d1b      	ldrb	r3, [r3, #20]
 800b178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b17c:	b2da      	uxtb	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b182:	7dfb      	ldrb	r3, [r7, #23]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3718      	adds	r7, #24
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7ff ff7b 	bl	800b090 <f_sync>
 800b19a:	4603      	mov	r3, r0
 800b19c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b19e:	7bfb      	ldrb	r3, [r7, #15]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d118      	bne.n	800b1d6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f107 0208 	add.w	r2, r7, #8
 800b1aa:	4611      	mov	r1, r2
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7ff fb93 	bl	800a8d8 <validate>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b1b6:	7bfb      	ldrb	r3, [r7, #15]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d10c      	bne.n	800b1d6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	691b      	ldr	r3, [r3, #16]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7fd fc97 	bl	8008af4 <dec_lock>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b1ca:	7bfb      	ldrb	r3, [r7, #15]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d102      	bne.n	800b1d6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b1d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b087      	sub	sp, #28
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b1f6:	4b1f      	ldr	r3, [pc, #124]	; (800b274 <FATFS_LinkDriverEx+0x94>)
 800b1f8:	7a5b      	ldrb	r3, [r3, #9]
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d131      	bne.n	800b264 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b200:	4b1c      	ldr	r3, [pc, #112]	; (800b274 <FATFS_LinkDriverEx+0x94>)
 800b202:	7a5b      	ldrb	r3, [r3, #9]
 800b204:	b2db      	uxtb	r3, r3
 800b206:	461a      	mov	r2, r3
 800b208:	4b1a      	ldr	r3, [pc, #104]	; (800b274 <FATFS_LinkDriverEx+0x94>)
 800b20a:	2100      	movs	r1, #0
 800b20c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b20e:	4b19      	ldr	r3, [pc, #100]	; (800b274 <FATFS_LinkDriverEx+0x94>)
 800b210:	7a5b      	ldrb	r3, [r3, #9]
 800b212:	b2db      	uxtb	r3, r3
 800b214:	4a17      	ldr	r2, [pc, #92]	; (800b274 <FATFS_LinkDriverEx+0x94>)
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	4413      	add	r3, r2
 800b21a:	68fa      	ldr	r2, [r7, #12]
 800b21c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b21e:	4b15      	ldr	r3, [pc, #84]	; (800b274 <FATFS_LinkDriverEx+0x94>)
 800b220:	7a5b      	ldrb	r3, [r3, #9]
 800b222:	b2db      	uxtb	r3, r3
 800b224:	461a      	mov	r2, r3
 800b226:	4b13      	ldr	r3, [pc, #76]	; (800b274 <FATFS_LinkDriverEx+0x94>)
 800b228:	4413      	add	r3, r2
 800b22a:	79fa      	ldrb	r2, [r7, #7]
 800b22c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b22e:	4b11      	ldr	r3, [pc, #68]	; (800b274 <FATFS_LinkDriverEx+0x94>)
 800b230:	7a5b      	ldrb	r3, [r3, #9]
 800b232:	b2db      	uxtb	r3, r3
 800b234:	1c5a      	adds	r2, r3, #1
 800b236:	b2d1      	uxtb	r1, r2
 800b238:	4a0e      	ldr	r2, [pc, #56]	; (800b274 <FATFS_LinkDriverEx+0x94>)
 800b23a:	7251      	strb	r1, [r2, #9]
 800b23c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b23e:	7dbb      	ldrb	r3, [r7, #22]
 800b240:	3330      	adds	r3, #48	; 0x30
 800b242:	b2da      	uxtb	r2, r3
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	3301      	adds	r3, #1
 800b24c:	223a      	movs	r2, #58	; 0x3a
 800b24e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	3302      	adds	r3, #2
 800b254:	222f      	movs	r2, #47	; 0x2f
 800b256:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	3303      	adds	r3, #3
 800b25c:	2200      	movs	r2, #0
 800b25e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b260:	2300      	movs	r3, #0
 800b262:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b264:	7dfb      	ldrb	r3, [r7, #23]
}
 800b266:	4618      	mov	r0, r3
 800b268:	371c      	adds	r7, #28
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	20000348 	.word	0x20000348

0800b278 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b282:	2200      	movs	r2, #0
 800b284:	6839      	ldr	r1, [r7, #0]
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7ff ffaa 	bl	800b1e0 <FATFS_LinkDriverEx>
 800b28c:	4603      	mov	r3, r0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3708      	adds	r7, #8
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
	...

0800b298 <__errno>:
 800b298:	4b01      	ldr	r3, [pc, #4]	; (800b2a0 <__errno+0x8>)
 800b29a:	6818      	ldr	r0, [r3, #0]
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	20000030 	.word	0x20000030

0800b2a4 <__libc_init_array>:
 800b2a4:	b570      	push	{r4, r5, r6, lr}
 800b2a6:	4e0d      	ldr	r6, [pc, #52]	; (800b2dc <__libc_init_array+0x38>)
 800b2a8:	4c0d      	ldr	r4, [pc, #52]	; (800b2e0 <__libc_init_array+0x3c>)
 800b2aa:	1ba4      	subs	r4, r4, r6
 800b2ac:	10a4      	asrs	r4, r4, #2
 800b2ae:	2500      	movs	r5, #0
 800b2b0:	42a5      	cmp	r5, r4
 800b2b2:	d109      	bne.n	800b2c8 <__libc_init_array+0x24>
 800b2b4:	4e0b      	ldr	r6, [pc, #44]	; (800b2e4 <__libc_init_array+0x40>)
 800b2b6:	4c0c      	ldr	r4, [pc, #48]	; (800b2e8 <__libc_init_array+0x44>)
 800b2b8:	f000 ffe4 	bl	800c284 <_init>
 800b2bc:	1ba4      	subs	r4, r4, r6
 800b2be:	10a4      	asrs	r4, r4, #2
 800b2c0:	2500      	movs	r5, #0
 800b2c2:	42a5      	cmp	r5, r4
 800b2c4:	d105      	bne.n	800b2d2 <__libc_init_array+0x2e>
 800b2c6:	bd70      	pop	{r4, r5, r6, pc}
 800b2c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b2cc:	4798      	blx	r3
 800b2ce:	3501      	adds	r5, #1
 800b2d0:	e7ee      	b.n	800b2b0 <__libc_init_array+0xc>
 800b2d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b2d6:	4798      	blx	r3
 800b2d8:	3501      	adds	r5, #1
 800b2da:	e7f2      	b.n	800b2c2 <__libc_init_array+0x1e>
 800b2dc:	0800ca74 	.word	0x0800ca74
 800b2e0:	0800ca74 	.word	0x0800ca74
 800b2e4:	0800ca74 	.word	0x0800ca74
 800b2e8:	0800ca78 	.word	0x0800ca78

0800b2ec <__itoa>:
 800b2ec:	1e93      	subs	r3, r2, #2
 800b2ee:	2b22      	cmp	r3, #34	; 0x22
 800b2f0:	b510      	push	{r4, lr}
 800b2f2:	460c      	mov	r4, r1
 800b2f4:	d904      	bls.n	800b300 <__itoa+0x14>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	700b      	strb	r3, [r1, #0]
 800b2fa:	461c      	mov	r4, r3
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	bd10      	pop	{r4, pc}
 800b300:	2a0a      	cmp	r2, #10
 800b302:	d109      	bne.n	800b318 <__itoa+0x2c>
 800b304:	2800      	cmp	r0, #0
 800b306:	da07      	bge.n	800b318 <__itoa+0x2c>
 800b308:	232d      	movs	r3, #45	; 0x2d
 800b30a:	700b      	strb	r3, [r1, #0]
 800b30c:	4240      	negs	r0, r0
 800b30e:	2101      	movs	r1, #1
 800b310:	4421      	add	r1, r4
 800b312:	f000 f965 	bl	800b5e0 <__utoa>
 800b316:	e7f1      	b.n	800b2fc <__itoa+0x10>
 800b318:	2100      	movs	r1, #0
 800b31a:	e7f9      	b.n	800b310 <__itoa+0x24>

0800b31c <itoa>:
 800b31c:	f7ff bfe6 	b.w	800b2ec <__itoa>

0800b320 <memcpy>:
 800b320:	b510      	push	{r4, lr}
 800b322:	1e43      	subs	r3, r0, #1
 800b324:	440a      	add	r2, r1
 800b326:	4291      	cmp	r1, r2
 800b328:	d100      	bne.n	800b32c <memcpy+0xc>
 800b32a:	bd10      	pop	{r4, pc}
 800b32c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b330:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b334:	e7f7      	b.n	800b326 <memcpy+0x6>

0800b336 <memset>:
 800b336:	4402      	add	r2, r0
 800b338:	4603      	mov	r3, r0
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d100      	bne.n	800b340 <memset+0xa>
 800b33e:	4770      	bx	lr
 800b340:	f803 1b01 	strb.w	r1, [r3], #1
 800b344:	e7f9      	b.n	800b33a <memset+0x4>
	...

0800b348 <_free_r>:
 800b348:	b538      	push	{r3, r4, r5, lr}
 800b34a:	4605      	mov	r5, r0
 800b34c:	2900      	cmp	r1, #0
 800b34e:	d045      	beq.n	800b3dc <_free_r+0x94>
 800b350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b354:	1f0c      	subs	r4, r1, #4
 800b356:	2b00      	cmp	r3, #0
 800b358:	bfb8      	it	lt
 800b35a:	18e4      	addlt	r4, r4, r3
 800b35c:	f000 fc1c 	bl	800bb98 <__malloc_lock>
 800b360:	4a1f      	ldr	r2, [pc, #124]	; (800b3e0 <_free_r+0x98>)
 800b362:	6813      	ldr	r3, [r2, #0]
 800b364:	4610      	mov	r0, r2
 800b366:	b933      	cbnz	r3, 800b376 <_free_r+0x2e>
 800b368:	6063      	str	r3, [r4, #4]
 800b36a:	6014      	str	r4, [r2, #0]
 800b36c:	4628      	mov	r0, r5
 800b36e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b372:	f000 bc12 	b.w	800bb9a <__malloc_unlock>
 800b376:	42a3      	cmp	r3, r4
 800b378:	d90c      	bls.n	800b394 <_free_r+0x4c>
 800b37a:	6821      	ldr	r1, [r4, #0]
 800b37c:	1862      	adds	r2, r4, r1
 800b37e:	4293      	cmp	r3, r2
 800b380:	bf04      	itt	eq
 800b382:	681a      	ldreq	r2, [r3, #0]
 800b384:	685b      	ldreq	r3, [r3, #4]
 800b386:	6063      	str	r3, [r4, #4]
 800b388:	bf04      	itt	eq
 800b38a:	1852      	addeq	r2, r2, r1
 800b38c:	6022      	streq	r2, [r4, #0]
 800b38e:	6004      	str	r4, [r0, #0]
 800b390:	e7ec      	b.n	800b36c <_free_r+0x24>
 800b392:	4613      	mov	r3, r2
 800b394:	685a      	ldr	r2, [r3, #4]
 800b396:	b10a      	cbz	r2, 800b39c <_free_r+0x54>
 800b398:	42a2      	cmp	r2, r4
 800b39a:	d9fa      	bls.n	800b392 <_free_r+0x4a>
 800b39c:	6819      	ldr	r1, [r3, #0]
 800b39e:	1858      	adds	r0, r3, r1
 800b3a0:	42a0      	cmp	r0, r4
 800b3a2:	d10b      	bne.n	800b3bc <_free_r+0x74>
 800b3a4:	6820      	ldr	r0, [r4, #0]
 800b3a6:	4401      	add	r1, r0
 800b3a8:	1858      	adds	r0, r3, r1
 800b3aa:	4282      	cmp	r2, r0
 800b3ac:	6019      	str	r1, [r3, #0]
 800b3ae:	d1dd      	bne.n	800b36c <_free_r+0x24>
 800b3b0:	6810      	ldr	r0, [r2, #0]
 800b3b2:	6852      	ldr	r2, [r2, #4]
 800b3b4:	605a      	str	r2, [r3, #4]
 800b3b6:	4401      	add	r1, r0
 800b3b8:	6019      	str	r1, [r3, #0]
 800b3ba:	e7d7      	b.n	800b36c <_free_r+0x24>
 800b3bc:	d902      	bls.n	800b3c4 <_free_r+0x7c>
 800b3be:	230c      	movs	r3, #12
 800b3c0:	602b      	str	r3, [r5, #0]
 800b3c2:	e7d3      	b.n	800b36c <_free_r+0x24>
 800b3c4:	6820      	ldr	r0, [r4, #0]
 800b3c6:	1821      	adds	r1, r4, r0
 800b3c8:	428a      	cmp	r2, r1
 800b3ca:	bf04      	itt	eq
 800b3cc:	6811      	ldreq	r1, [r2, #0]
 800b3ce:	6852      	ldreq	r2, [r2, #4]
 800b3d0:	6062      	str	r2, [r4, #4]
 800b3d2:	bf04      	itt	eq
 800b3d4:	1809      	addeq	r1, r1, r0
 800b3d6:	6021      	streq	r1, [r4, #0]
 800b3d8:	605c      	str	r4, [r3, #4]
 800b3da:	e7c7      	b.n	800b36c <_free_r+0x24>
 800b3dc:	bd38      	pop	{r3, r4, r5, pc}
 800b3de:	bf00      	nop
 800b3e0:	20000354 	.word	0x20000354

0800b3e4 <_malloc_r>:
 800b3e4:	b570      	push	{r4, r5, r6, lr}
 800b3e6:	1ccd      	adds	r5, r1, #3
 800b3e8:	f025 0503 	bic.w	r5, r5, #3
 800b3ec:	3508      	adds	r5, #8
 800b3ee:	2d0c      	cmp	r5, #12
 800b3f0:	bf38      	it	cc
 800b3f2:	250c      	movcc	r5, #12
 800b3f4:	2d00      	cmp	r5, #0
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	db01      	blt.n	800b3fe <_malloc_r+0x1a>
 800b3fa:	42a9      	cmp	r1, r5
 800b3fc:	d903      	bls.n	800b406 <_malloc_r+0x22>
 800b3fe:	230c      	movs	r3, #12
 800b400:	6033      	str	r3, [r6, #0]
 800b402:	2000      	movs	r0, #0
 800b404:	bd70      	pop	{r4, r5, r6, pc}
 800b406:	f000 fbc7 	bl	800bb98 <__malloc_lock>
 800b40a:	4a21      	ldr	r2, [pc, #132]	; (800b490 <_malloc_r+0xac>)
 800b40c:	6814      	ldr	r4, [r2, #0]
 800b40e:	4621      	mov	r1, r4
 800b410:	b991      	cbnz	r1, 800b438 <_malloc_r+0x54>
 800b412:	4c20      	ldr	r4, [pc, #128]	; (800b494 <_malloc_r+0xb0>)
 800b414:	6823      	ldr	r3, [r4, #0]
 800b416:	b91b      	cbnz	r3, 800b420 <_malloc_r+0x3c>
 800b418:	4630      	mov	r0, r6
 800b41a:	f000 f8b9 	bl	800b590 <_sbrk_r>
 800b41e:	6020      	str	r0, [r4, #0]
 800b420:	4629      	mov	r1, r5
 800b422:	4630      	mov	r0, r6
 800b424:	f000 f8b4 	bl	800b590 <_sbrk_r>
 800b428:	1c43      	adds	r3, r0, #1
 800b42a:	d124      	bne.n	800b476 <_malloc_r+0x92>
 800b42c:	230c      	movs	r3, #12
 800b42e:	6033      	str	r3, [r6, #0]
 800b430:	4630      	mov	r0, r6
 800b432:	f000 fbb2 	bl	800bb9a <__malloc_unlock>
 800b436:	e7e4      	b.n	800b402 <_malloc_r+0x1e>
 800b438:	680b      	ldr	r3, [r1, #0]
 800b43a:	1b5b      	subs	r3, r3, r5
 800b43c:	d418      	bmi.n	800b470 <_malloc_r+0x8c>
 800b43e:	2b0b      	cmp	r3, #11
 800b440:	d90f      	bls.n	800b462 <_malloc_r+0x7e>
 800b442:	600b      	str	r3, [r1, #0]
 800b444:	50cd      	str	r5, [r1, r3]
 800b446:	18cc      	adds	r4, r1, r3
 800b448:	4630      	mov	r0, r6
 800b44a:	f000 fba6 	bl	800bb9a <__malloc_unlock>
 800b44e:	f104 000b 	add.w	r0, r4, #11
 800b452:	1d23      	adds	r3, r4, #4
 800b454:	f020 0007 	bic.w	r0, r0, #7
 800b458:	1ac3      	subs	r3, r0, r3
 800b45a:	d0d3      	beq.n	800b404 <_malloc_r+0x20>
 800b45c:	425a      	negs	r2, r3
 800b45e:	50e2      	str	r2, [r4, r3]
 800b460:	e7d0      	b.n	800b404 <_malloc_r+0x20>
 800b462:	428c      	cmp	r4, r1
 800b464:	684b      	ldr	r3, [r1, #4]
 800b466:	bf16      	itet	ne
 800b468:	6063      	strne	r3, [r4, #4]
 800b46a:	6013      	streq	r3, [r2, #0]
 800b46c:	460c      	movne	r4, r1
 800b46e:	e7eb      	b.n	800b448 <_malloc_r+0x64>
 800b470:	460c      	mov	r4, r1
 800b472:	6849      	ldr	r1, [r1, #4]
 800b474:	e7cc      	b.n	800b410 <_malloc_r+0x2c>
 800b476:	1cc4      	adds	r4, r0, #3
 800b478:	f024 0403 	bic.w	r4, r4, #3
 800b47c:	42a0      	cmp	r0, r4
 800b47e:	d005      	beq.n	800b48c <_malloc_r+0xa8>
 800b480:	1a21      	subs	r1, r4, r0
 800b482:	4630      	mov	r0, r6
 800b484:	f000 f884 	bl	800b590 <_sbrk_r>
 800b488:	3001      	adds	r0, #1
 800b48a:	d0cf      	beq.n	800b42c <_malloc_r+0x48>
 800b48c:	6025      	str	r5, [r4, #0]
 800b48e:	e7db      	b.n	800b448 <_malloc_r+0x64>
 800b490:	20000354 	.word	0x20000354
 800b494:	20000358 	.word	0x20000358

0800b498 <iprintf>:
 800b498:	b40f      	push	{r0, r1, r2, r3}
 800b49a:	4b0a      	ldr	r3, [pc, #40]	; (800b4c4 <iprintf+0x2c>)
 800b49c:	b513      	push	{r0, r1, r4, lr}
 800b49e:	681c      	ldr	r4, [r3, #0]
 800b4a0:	b124      	cbz	r4, 800b4ac <iprintf+0x14>
 800b4a2:	69a3      	ldr	r3, [r4, #24]
 800b4a4:	b913      	cbnz	r3, 800b4ac <iprintf+0x14>
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	f000 fa88 	bl	800b9bc <__sinit>
 800b4ac:	ab05      	add	r3, sp, #20
 800b4ae:	9a04      	ldr	r2, [sp, #16]
 800b4b0:	68a1      	ldr	r1, [r4, #8]
 800b4b2:	9301      	str	r3, [sp, #4]
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f000 fb9b 	bl	800bbf0 <_vfiprintf_r>
 800b4ba:	b002      	add	sp, #8
 800b4bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4c0:	b004      	add	sp, #16
 800b4c2:	4770      	bx	lr
 800b4c4:	20000030 	.word	0x20000030

0800b4c8 <_puts_r>:
 800b4c8:	b570      	push	{r4, r5, r6, lr}
 800b4ca:	460e      	mov	r6, r1
 800b4cc:	4605      	mov	r5, r0
 800b4ce:	b118      	cbz	r0, 800b4d8 <_puts_r+0x10>
 800b4d0:	6983      	ldr	r3, [r0, #24]
 800b4d2:	b90b      	cbnz	r3, 800b4d8 <_puts_r+0x10>
 800b4d4:	f000 fa72 	bl	800b9bc <__sinit>
 800b4d8:	69ab      	ldr	r3, [r5, #24]
 800b4da:	68ac      	ldr	r4, [r5, #8]
 800b4dc:	b913      	cbnz	r3, 800b4e4 <_puts_r+0x1c>
 800b4de:	4628      	mov	r0, r5
 800b4e0:	f000 fa6c 	bl	800b9bc <__sinit>
 800b4e4:	4b23      	ldr	r3, [pc, #140]	; (800b574 <_puts_r+0xac>)
 800b4e6:	429c      	cmp	r4, r3
 800b4e8:	d117      	bne.n	800b51a <_puts_r+0x52>
 800b4ea:	686c      	ldr	r4, [r5, #4]
 800b4ec:	89a3      	ldrh	r3, [r4, #12]
 800b4ee:	071b      	lsls	r3, r3, #28
 800b4f0:	d51d      	bpl.n	800b52e <_puts_r+0x66>
 800b4f2:	6923      	ldr	r3, [r4, #16]
 800b4f4:	b1db      	cbz	r3, 800b52e <_puts_r+0x66>
 800b4f6:	3e01      	subs	r6, #1
 800b4f8:	68a3      	ldr	r3, [r4, #8]
 800b4fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b4fe:	3b01      	subs	r3, #1
 800b500:	60a3      	str	r3, [r4, #8]
 800b502:	b9e9      	cbnz	r1, 800b540 <_puts_r+0x78>
 800b504:	2b00      	cmp	r3, #0
 800b506:	da2e      	bge.n	800b566 <_puts_r+0x9e>
 800b508:	4622      	mov	r2, r4
 800b50a:	210a      	movs	r1, #10
 800b50c:	4628      	mov	r0, r5
 800b50e:	f000 f8a5 	bl	800b65c <__swbuf_r>
 800b512:	3001      	adds	r0, #1
 800b514:	d011      	beq.n	800b53a <_puts_r+0x72>
 800b516:	200a      	movs	r0, #10
 800b518:	e011      	b.n	800b53e <_puts_r+0x76>
 800b51a:	4b17      	ldr	r3, [pc, #92]	; (800b578 <_puts_r+0xb0>)
 800b51c:	429c      	cmp	r4, r3
 800b51e:	d101      	bne.n	800b524 <_puts_r+0x5c>
 800b520:	68ac      	ldr	r4, [r5, #8]
 800b522:	e7e3      	b.n	800b4ec <_puts_r+0x24>
 800b524:	4b15      	ldr	r3, [pc, #84]	; (800b57c <_puts_r+0xb4>)
 800b526:	429c      	cmp	r4, r3
 800b528:	bf08      	it	eq
 800b52a:	68ec      	ldreq	r4, [r5, #12]
 800b52c:	e7de      	b.n	800b4ec <_puts_r+0x24>
 800b52e:	4621      	mov	r1, r4
 800b530:	4628      	mov	r0, r5
 800b532:	f000 f8e5 	bl	800b700 <__swsetup_r>
 800b536:	2800      	cmp	r0, #0
 800b538:	d0dd      	beq.n	800b4f6 <_puts_r+0x2e>
 800b53a:	f04f 30ff 	mov.w	r0, #4294967295
 800b53e:	bd70      	pop	{r4, r5, r6, pc}
 800b540:	2b00      	cmp	r3, #0
 800b542:	da04      	bge.n	800b54e <_puts_r+0x86>
 800b544:	69a2      	ldr	r2, [r4, #24]
 800b546:	429a      	cmp	r2, r3
 800b548:	dc06      	bgt.n	800b558 <_puts_r+0x90>
 800b54a:	290a      	cmp	r1, #10
 800b54c:	d004      	beq.n	800b558 <_puts_r+0x90>
 800b54e:	6823      	ldr	r3, [r4, #0]
 800b550:	1c5a      	adds	r2, r3, #1
 800b552:	6022      	str	r2, [r4, #0]
 800b554:	7019      	strb	r1, [r3, #0]
 800b556:	e7cf      	b.n	800b4f8 <_puts_r+0x30>
 800b558:	4622      	mov	r2, r4
 800b55a:	4628      	mov	r0, r5
 800b55c:	f000 f87e 	bl	800b65c <__swbuf_r>
 800b560:	3001      	adds	r0, #1
 800b562:	d1c9      	bne.n	800b4f8 <_puts_r+0x30>
 800b564:	e7e9      	b.n	800b53a <_puts_r+0x72>
 800b566:	6823      	ldr	r3, [r4, #0]
 800b568:	200a      	movs	r0, #10
 800b56a:	1c5a      	adds	r2, r3, #1
 800b56c:	6022      	str	r2, [r4, #0]
 800b56e:	7018      	strb	r0, [r3, #0]
 800b570:	e7e5      	b.n	800b53e <_puts_r+0x76>
 800b572:	bf00      	nop
 800b574:	0800c9f8 	.word	0x0800c9f8
 800b578:	0800ca18 	.word	0x0800ca18
 800b57c:	0800c9d8 	.word	0x0800c9d8

0800b580 <puts>:
 800b580:	4b02      	ldr	r3, [pc, #8]	; (800b58c <puts+0xc>)
 800b582:	4601      	mov	r1, r0
 800b584:	6818      	ldr	r0, [r3, #0]
 800b586:	f7ff bf9f 	b.w	800b4c8 <_puts_r>
 800b58a:	bf00      	nop
 800b58c:	20000030 	.word	0x20000030

0800b590 <_sbrk_r>:
 800b590:	b538      	push	{r3, r4, r5, lr}
 800b592:	4c06      	ldr	r4, [pc, #24]	; (800b5ac <_sbrk_r+0x1c>)
 800b594:	2300      	movs	r3, #0
 800b596:	4605      	mov	r5, r0
 800b598:	4608      	mov	r0, r1
 800b59a:	6023      	str	r3, [r4, #0]
 800b59c:	f7f6 fdb0 	bl	8002100 <_sbrk>
 800b5a0:	1c43      	adds	r3, r0, #1
 800b5a2:	d102      	bne.n	800b5aa <_sbrk_r+0x1a>
 800b5a4:	6823      	ldr	r3, [r4, #0]
 800b5a6:	b103      	cbz	r3, 800b5aa <_sbrk_r+0x1a>
 800b5a8:	602b      	str	r3, [r5, #0]
 800b5aa:	bd38      	pop	{r3, r4, r5, pc}
 800b5ac:	2000752c 	.word	0x2000752c

0800b5b0 <strcat>:
 800b5b0:	b510      	push	{r4, lr}
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	781a      	ldrb	r2, [r3, #0]
 800b5b6:	1c5c      	adds	r4, r3, #1
 800b5b8:	b93a      	cbnz	r2, 800b5ca <strcat+0x1a>
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5c4:	2a00      	cmp	r2, #0
 800b5c6:	d1f9      	bne.n	800b5bc <strcat+0xc>
 800b5c8:	bd10      	pop	{r4, pc}
 800b5ca:	4623      	mov	r3, r4
 800b5cc:	e7f2      	b.n	800b5b4 <strcat+0x4>

0800b5ce <strcpy>:
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5d4:	f803 2b01 	strb.w	r2, [r3], #1
 800b5d8:	2a00      	cmp	r2, #0
 800b5da:	d1f9      	bne.n	800b5d0 <strcpy+0x2>
 800b5dc:	4770      	bx	lr
	...

0800b5e0 <__utoa>:
 800b5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5e2:	4b1d      	ldr	r3, [pc, #116]	; (800b658 <__utoa+0x78>)
 800b5e4:	b08b      	sub	sp, #44	; 0x2c
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	460c      	mov	r4, r1
 800b5ea:	466e      	mov	r6, sp
 800b5ec:	f103 0c20 	add.w	ip, r3, #32
 800b5f0:	6818      	ldr	r0, [r3, #0]
 800b5f2:	6859      	ldr	r1, [r3, #4]
 800b5f4:	4637      	mov	r7, r6
 800b5f6:	c703      	stmia	r7!, {r0, r1}
 800b5f8:	3308      	adds	r3, #8
 800b5fa:	4563      	cmp	r3, ip
 800b5fc:	463e      	mov	r6, r7
 800b5fe:	d1f7      	bne.n	800b5f0 <__utoa+0x10>
 800b600:	6818      	ldr	r0, [r3, #0]
 800b602:	791b      	ldrb	r3, [r3, #4]
 800b604:	713b      	strb	r3, [r7, #4]
 800b606:	1e93      	subs	r3, r2, #2
 800b608:	2b22      	cmp	r3, #34	; 0x22
 800b60a:	6038      	str	r0, [r7, #0]
 800b60c:	f04f 0300 	mov.w	r3, #0
 800b610:	d904      	bls.n	800b61c <__utoa+0x3c>
 800b612:	7023      	strb	r3, [r4, #0]
 800b614:	461c      	mov	r4, r3
 800b616:	4620      	mov	r0, r4
 800b618:	b00b      	add	sp, #44	; 0x2c
 800b61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b61c:	1e66      	subs	r6, r4, #1
 800b61e:	fbb5 f0f2 	udiv	r0, r5, r2
 800b622:	af0a      	add	r7, sp, #40	; 0x28
 800b624:	fb02 5510 	mls	r5, r2, r0, r5
 800b628:	443d      	add	r5, r7
 800b62a:	1c59      	adds	r1, r3, #1
 800b62c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800b630:	f806 5f01 	strb.w	r5, [r6, #1]!
 800b634:	4605      	mov	r5, r0
 800b636:	b968      	cbnz	r0, 800b654 <__utoa+0x74>
 800b638:	5460      	strb	r0, [r4, r1]
 800b63a:	4423      	add	r3, r4
 800b63c:	4622      	mov	r2, r4
 800b63e:	1b19      	subs	r1, r3, r4
 800b640:	1b10      	subs	r0, r2, r4
 800b642:	4281      	cmp	r1, r0
 800b644:	dde7      	ble.n	800b616 <__utoa+0x36>
 800b646:	7811      	ldrb	r1, [r2, #0]
 800b648:	7818      	ldrb	r0, [r3, #0]
 800b64a:	f802 0b01 	strb.w	r0, [r2], #1
 800b64e:	f803 1901 	strb.w	r1, [r3], #-1
 800b652:	e7f4      	b.n	800b63e <__utoa+0x5e>
 800b654:	460b      	mov	r3, r1
 800b656:	e7e2      	b.n	800b61e <__utoa+0x3e>
 800b658:	0800c9b0 	.word	0x0800c9b0

0800b65c <__swbuf_r>:
 800b65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65e:	460e      	mov	r6, r1
 800b660:	4614      	mov	r4, r2
 800b662:	4605      	mov	r5, r0
 800b664:	b118      	cbz	r0, 800b66e <__swbuf_r+0x12>
 800b666:	6983      	ldr	r3, [r0, #24]
 800b668:	b90b      	cbnz	r3, 800b66e <__swbuf_r+0x12>
 800b66a:	f000 f9a7 	bl	800b9bc <__sinit>
 800b66e:	4b21      	ldr	r3, [pc, #132]	; (800b6f4 <__swbuf_r+0x98>)
 800b670:	429c      	cmp	r4, r3
 800b672:	d12a      	bne.n	800b6ca <__swbuf_r+0x6e>
 800b674:	686c      	ldr	r4, [r5, #4]
 800b676:	69a3      	ldr	r3, [r4, #24]
 800b678:	60a3      	str	r3, [r4, #8]
 800b67a:	89a3      	ldrh	r3, [r4, #12]
 800b67c:	071a      	lsls	r2, r3, #28
 800b67e:	d52e      	bpl.n	800b6de <__swbuf_r+0x82>
 800b680:	6923      	ldr	r3, [r4, #16]
 800b682:	b363      	cbz	r3, 800b6de <__swbuf_r+0x82>
 800b684:	6923      	ldr	r3, [r4, #16]
 800b686:	6820      	ldr	r0, [r4, #0]
 800b688:	1ac0      	subs	r0, r0, r3
 800b68a:	6963      	ldr	r3, [r4, #20]
 800b68c:	b2f6      	uxtb	r6, r6
 800b68e:	4283      	cmp	r3, r0
 800b690:	4637      	mov	r7, r6
 800b692:	dc04      	bgt.n	800b69e <__swbuf_r+0x42>
 800b694:	4621      	mov	r1, r4
 800b696:	4628      	mov	r0, r5
 800b698:	f000 f926 	bl	800b8e8 <_fflush_r>
 800b69c:	bb28      	cbnz	r0, 800b6ea <__swbuf_r+0x8e>
 800b69e:	68a3      	ldr	r3, [r4, #8]
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	60a3      	str	r3, [r4, #8]
 800b6a4:	6823      	ldr	r3, [r4, #0]
 800b6a6:	1c5a      	adds	r2, r3, #1
 800b6a8:	6022      	str	r2, [r4, #0]
 800b6aa:	701e      	strb	r6, [r3, #0]
 800b6ac:	6963      	ldr	r3, [r4, #20]
 800b6ae:	3001      	adds	r0, #1
 800b6b0:	4283      	cmp	r3, r0
 800b6b2:	d004      	beq.n	800b6be <__swbuf_r+0x62>
 800b6b4:	89a3      	ldrh	r3, [r4, #12]
 800b6b6:	07db      	lsls	r3, r3, #31
 800b6b8:	d519      	bpl.n	800b6ee <__swbuf_r+0x92>
 800b6ba:	2e0a      	cmp	r6, #10
 800b6bc:	d117      	bne.n	800b6ee <__swbuf_r+0x92>
 800b6be:	4621      	mov	r1, r4
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	f000 f911 	bl	800b8e8 <_fflush_r>
 800b6c6:	b190      	cbz	r0, 800b6ee <__swbuf_r+0x92>
 800b6c8:	e00f      	b.n	800b6ea <__swbuf_r+0x8e>
 800b6ca:	4b0b      	ldr	r3, [pc, #44]	; (800b6f8 <__swbuf_r+0x9c>)
 800b6cc:	429c      	cmp	r4, r3
 800b6ce:	d101      	bne.n	800b6d4 <__swbuf_r+0x78>
 800b6d0:	68ac      	ldr	r4, [r5, #8]
 800b6d2:	e7d0      	b.n	800b676 <__swbuf_r+0x1a>
 800b6d4:	4b09      	ldr	r3, [pc, #36]	; (800b6fc <__swbuf_r+0xa0>)
 800b6d6:	429c      	cmp	r4, r3
 800b6d8:	bf08      	it	eq
 800b6da:	68ec      	ldreq	r4, [r5, #12]
 800b6dc:	e7cb      	b.n	800b676 <__swbuf_r+0x1a>
 800b6de:	4621      	mov	r1, r4
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	f000 f80d 	bl	800b700 <__swsetup_r>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	d0cc      	beq.n	800b684 <__swbuf_r+0x28>
 800b6ea:	f04f 37ff 	mov.w	r7, #4294967295
 800b6ee:	4638      	mov	r0, r7
 800b6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	0800c9f8 	.word	0x0800c9f8
 800b6f8:	0800ca18 	.word	0x0800ca18
 800b6fc:	0800c9d8 	.word	0x0800c9d8

0800b700 <__swsetup_r>:
 800b700:	4b32      	ldr	r3, [pc, #200]	; (800b7cc <__swsetup_r+0xcc>)
 800b702:	b570      	push	{r4, r5, r6, lr}
 800b704:	681d      	ldr	r5, [r3, #0]
 800b706:	4606      	mov	r6, r0
 800b708:	460c      	mov	r4, r1
 800b70a:	b125      	cbz	r5, 800b716 <__swsetup_r+0x16>
 800b70c:	69ab      	ldr	r3, [r5, #24]
 800b70e:	b913      	cbnz	r3, 800b716 <__swsetup_r+0x16>
 800b710:	4628      	mov	r0, r5
 800b712:	f000 f953 	bl	800b9bc <__sinit>
 800b716:	4b2e      	ldr	r3, [pc, #184]	; (800b7d0 <__swsetup_r+0xd0>)
 800b718:	429c      	cmp	r4, r3
 800b71a:	d10f      	bne.n	800b73c <__swsetup_r+0x3c>
 800b71c:	686c      	ldr	r4, [r5, #4]
 800b71e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b722:	b29a      	uxth	r2, r3
 800b724:	0715      	lsls	r5, r2, #28
 800b726:	d42c      	bmi.n	800b782 <__swsetup_r+0x82>
 800b728:	06d0      	lsls	r0, r2, #27
 800b72a:	d411      	bmi.n	800b750 <__swsetup_r+0x50>
 800b72c:	2209      	movs	r2, #9
 800b72e:	6032      	str	r2, [r6, #0]
 800b730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b734:	81a3      	strh	r3, [r4, #12]
 800b736:	f04f 30ff 	mov.w	r0, #4294967295
 800b73a:	e03e      	b.n	800b7ba <__swsetup_r+0xba>
 800b73c:	4b25      	ldr	r3, [pc, #148]	; (800b7d4 <__swsetup_r+0xd4>)
 800b73e:	429c      	cmp	r4, r3
 800b740:	d101      	bne.n	800b746 <__swsetup_r+0x46>
 800b742:	68ac      	ldr	r4, [r5, #8]
 800b744:	e7eb      	b.n	800b71e <__swsetup_r+0x1e>
 800b746:	4b24      	ldr	r3, [pc, #144]	; (800b7d8 <__swsetup_r+0xd8>)
 800b748:	429c      	cmp	r4, r3
 800b74a:	bf08      	it	eq
 800b74c:	68ec      	ldreq	r4, [r5, #12]
 800b74e:	e7e6      	b.n	800b71e <__swsetup_r+0x1e>
 800b750:	0751      	lsls	r1, r2, #29
 800b752:	d512      	bpl.n	800b77a <__swsetup_r+0x7a>
 800b754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b756:	b141      	cbz	r1, 800b76a <__swsetup_r+0x6a>
 800b758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b75c:	4299      	cmp	r1, r3
 800b75e:	d002      	beq.n	800b766 <__swsetup_r+0x66>
 800b760:	4630      	mov	r0, r6
 800b762:	f7ff fdf1 	bl	800b348 <_free_r>
 800b766:	2300      	movs	r3, #0
 800b768:	6363      	str	r3, [r4, #52]	; 0x34
 800b76a:	89a3      	ldrh	r3, [r4, #12]
 800b76c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b770:	81a3      	strh	r3, [r4, #12]
 800b772:	2300      	movs	r3, #0
 800b774:	6063      	str	r3, [r4, #4]
 800b776:	6923      	ldr	r3, [r4, #16]
 800b778:	6023      	str	r3, [r4, #0]
 800b77a:	89a3      	ldrh	r3, [r4, #12]
 800b77c:	f043 0308 	orr.w	r3, r3, #8
 800b780:	81a3      	strh	r3, [r4, #12]
 800b782:	6923      	ldr	r3, [r4, #16]
 800b784:	b94b      	cbnz	r3, 800b79a <__swsetup_r+0x9a>
 800b786:	89a3      	ldrh	r3, [r4, #12]
 800b788:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b78c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b790:	d003      	beq.n	800b79a <__swsetup_r+0x9a>
 800b792:	4621      	mov	r1, r4
 800b794:	4630      	mov	r0, r6
 800b796:	f000 f9bf 	bl	800bb18 <__smakebuf_r>
 800b79a:	89a2      	ldrh	r2, [r4, #12]
 800b79c:	f012 0301 	ands.w	r3, r2, #1
 800b7a0:	d00c      	beq.n	800b7bc <__swsetup_r+0xbc>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	60a3      	str	r3, [r4, #8]
 800b7a6:	6963      	ldr	r3, [r4, #20]
 800b7a8:	425b      	negs	r3, r3
 800b7aa:	61a3      	str	r3, [r4, #24]
 800b7ac:	6923      	ldr	r3, [r4, #16]
 800b7ae:	b953      	cbnz	r3, 800b7c6 <__swsetup_r+0xc6>
 800b7b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b7b8:	d1ba      	bne.n	800b730 <__swsetup_r+0x30>
 800b7ba:	bd70      	pop	{r4, r5, r6, pc}
 800b7bc:	0792      	lsls	r2, r2, #30
 800b7be:	bf58      	it	pl
 800b7c0:	6963      	ldrpl	r3, [r4, #20]
 800b7c2:	60a3      	str	r3, [r4, #8]
 800b7c4:	e7f2      	b.n	800b7ac <__swsetup_r+0xac>
 800b7c6:	2000      	movs	r0, #0
 800b7c8:	e7f7      	b.n	800b7ba <__swsetup_r+0xba>
 800b7ca:	bf00      	nop
 800b7cc:	20000030 	.word	0x20000030
 800b7d0:	0800c9f8 	.word	0x0800c9f8
 800b7d4:	0800ca18 	.word	0x0800ca18
 800b7d8:	0800c9d8 	.word	0x0800c9d8

0800b7dc <__sflush_r>:
 800b7dc:	898a      	ldrh	r2, [r1, #12]
 800b7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e2:	4605      	mov	r5, r0
 800b7e4:	0710      	lsls	r0, r2, #28
 800b7e6:	460c      	mov	r4, r1
 800b7e8:	d458      	bmi.n	800b89c <__sflush_r+0xc0>
 800b7ea:	684b      	ldr	r3, [r1, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	dc05      	bgt.n	800b7fc <__sflush_r+0x20>
 800b7f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	dc02      	bgt.n	800b7fc <__sflush_r+0x20>
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7fe:	2e00      	cmp	r6, #0
 800b800:	d0f9      	beq.n	800b7f6 <__sflush_r+0x1a>
 800b802:	2300      	movs	r3, #0
 800b804:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b808:	682f      	ldr	r7, [r5, #0]
 800b80a:	6a21      	ldr	r1, [r4, #32]
 800b80c:	602b      	str	r3, [r5, #0]
 800b80e:	d032      	beq.n	800b876 <__sflush_r+0x9a>
 800b810:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b812:	89a3      	ldrh	r3, [r4, #12]
 800b814:	075a      	lsls	r2, r3, #29
 800b816:	d505      	bpl.n	800b824 <__sflush_r+0x48>
 800b818:	6863      	ldr	r3, [r4, #4]
 800b81a:	1ac0      	subs	r0, r0, r3
 800b81c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b81e:	b10b      	cbz	r3, 800b824 <__sflush_r+0x48>
 800b820:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b822:	1ac0      	subs	r0, r0, r3
 800b824:	2300      	movs	r3, #0
 800b826:	4602      	mov	r2, r0
 800b828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b82a:	6a21      	ldr	r1, [r4, #32]
 800b82c:	4628      	mov	r0, r5
 800b82e:	47b0      	blx	r6
 800b830:	1c43      	adds	r3, r0, #1
 800b832:	89a3      	ldrh	r3, [r4, #12]
 800b834:	d106      	bne.n	800b844 <__sflush_r+0x68>
 800b836:	6829      	ldr	r1, [r5, #0]
 800b838:	291d      	cmp	r1, #29
 800b83a:	d848      	bhi.n	800b8ce <__sflush_r+0xf2>
 800b83c:	4a29      	ldr	r2, [pc, #164]	; (800b8e4 <__sflush_r+0x108>)
 800b83e:	40ca      	lsrs	r2, r1
 800b840:	07d6      	lsls	r6, r2, #31
 800b842:	d544      	bpl.n	800b8ce <__sflush_r+0xf2>
 800b844:	2200      	movs	r2, #0
 800b846:	6062      	str	r2, [r4, #4]
 800b848:	04d9      	lsls	r1, r3, #19
 800b84a:	6922      	ldr	r2, [r4, #16]
 800b84c:	6022      	str	r2, [r4, #0]
 800b84e:	d504      	bpl.n	800b85a <__sflush_r+0x7e>
 800b850:	1c42      	adds	r2, r0, #1
 800b852:	d101      	bne.n	800b858 <__sflush_r+0x7c>
 800b854:	682b      	ldr	r3, [r5, #0]
 800b856:	b903      	cbnz	r3, 800b85a <__sflush_r+0x7e>
 800b858:	6560      	str	r0, [r4, #84]	; 0x54
 800b85a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b85c:	602f      	str	r7, [r5, #0]
 800b85e:	2900      	cmp	r1, #0
 800b860:	d0c9      	beq.n	800b7f6 <__sflush_r+0x1a>
 800b862:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b866:	4299      	cmp	r1, r3
 800b868:	d002      	beq.n	800b870 <__sflush_r+0x94>
 800b86a:	4628      	mov	r0, r5
 800b86c:	f7ff fd6c 	bl	800b348 <_free_r>
 800b870:	2000      	movs	r0, #0
 800b872:	6360      	str	r0, [r4, #52]	; 0x34
 800b874:	e7c0      	b.n	800b7f8 <__sflush_r+0x1c>
 800b876:	2301      	movs	r3, #1
 800b878:	4628      	mov	r0, r5
 800b87a:	47b0      	blx	r6
 800b87c:	1c41      	adds	r1, r0, #1
 800b87e:	d1c8      	bne.n	800b812 <__sflush_r+0x36>
 800b880:	682b      	ldr	r3, [r5, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d0c5      	beq.n	800b812 <__sflush_r+0x36>
 800b886:	2b1d      	cmp	r3, #29
 800b888:	d001      	beq.n	800b88e <__sflush_r+0xb2>
 800b88a:	2b16      	cmp	r3, #22
 800b88c:	d101      	bne.n	800b892 <__sflush_r+0xb6>
 800b88e:	602f      	str	r7, [r5, #0]
 800b890:	e7b1      	b.n	800b7f6 <__sflush_r+0x1a>
 800b892:	89a3      	ldrh	r3, [r4, #12]
 800b894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b898:	81a3      	strh	r3, [r4, #12]
 800b89a:	e7ad      	b.n	800b7f8 <__sflush_r+0x1c>
 800b89c:	690f      	ldr	r7, [r1, #16]
 800b89e:	2f00      	cmp	r7, #0
 800b8a0:	d0a9      	beq.n	800b7f6 <__sflush_r+0x1a>
 800b8a2:	0793      	lsls	r3, r2, #30
 800b8a4:	680e      	ldr	r6, [r1, #0]
 800b8a6:	bf08      	it	eq
 800b8a8:	694b      	ldreq	r3, [r1, #20]
 800b8aa:	600f      	str	r7, [r1, #0]
 800b8ac:	bf18      	it	ne
 800b8ae:	2300      	movne	r3, #0
 800b8b0:	eba6 0807 	sub.w	r8, r6, r7
 800b8b4:	608b      	str	r3, [r1, #8]
 800b8b6:	f1b8 0f00 	cmp.w	r8, #0
 800b8ba:	dd9c      	ble.n	800b7f6 <__sflush_r+0x1a>
 800b8bc:	4643      	mov	r3, r8
 800b8be:	463a      	mov	r2, r7
 800b8c0:	6a21      	ldr	r1, [r4, #32]
 800b8c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b8c4:	4628      	mov	r0, r5
 800b8c6:	47b0      	blx	r6
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	dc06      	bgt.n	800b8da <__sflush_r+0xfe>
 800b8cc:	89a3      	ldrh	r3, [r4, #12]
 800b8ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8d2:	81a3      	strh	r3, [r4, #12]
 800b8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d8:	e78e      	b.n	800b7f8 <__sflush_r+0x1c>
 800b8da:	4407      	add	r7, r0
 800b8dc:	eba8 0800 	sub.w	r8, r8, r0
 800b8e0:	e7e9      	b.n	800b8b6 <__sflush_r+0xda>
 800b8e2:	bf00      	nop
 800b8e4:	20400001 	.word	0x20400001

0800b8e8 <_fflush_r>:
 800b8e8:	b538      	push	{r3, r4, r5, lr}
 800b8ea:	690b      	ldr	r3, [r1, #16]
 800b8ec:	4605      	mov	r5, r0
 800b8ee:	460c      	mov	r4, r1
 800b8f0:	b1db      	cbz	r3, 800b92a <_fflush_r+0x42>
 800b8f2:	b118      	cbz	r0, 800b8fc <_fflush_r+0x14>
 800b8f4:	6983      	ldr	r3, [r0, #24]
 800b8f6:	b90b      	cbnz	r3, 800b8fc <_fflush_r+0x14>
 800b8f8:	f000 f860 	bl	800b9bc <__sinit>
 800b8fc:	4b0c      	ldr	r3, [pc, #48]	; (800b930 <_fflush_r+0x48>)
 800b8fe:	429c      	cmp	r4, r3
 800b900:	d109      	bne.n	800b916 <_fflush_r+0x2e>
 800b902:	686c      	ldr	r4, [r5, #4]
 800b904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b908:	b17b      	cbz	r3, 800b92a <_fflush_r+0x42>
 800b90a:	4621      	mov	r1, r4
 800b90c:	4628      	mov	r0, r5
 800b90e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b912:	f7ff bf63 	b.w	800b7dc <__sflush_r>
 800b916:	4b07      	ldr	r3, [pc, #28]	; (800b934 <_fflush_r+0x4c>)
 800b918:	429c      	cmp	r4, r3
 800b91a:	d101      	bne.n	800b920 <_fflush_r+0x38>
 800b91c:	68ac      	ldr	r4, [r5, #8]
 800b91e:	e7f1      	b.n	800b904 <_fflush_r+0x1c>
 800b920:	4b05      	ldr	r3, [pc, #20]	; (800b938 <_fflush_r+0x50>)
 800b922:	429c      	cmp	r4, r3
 800b924:	bf08      	it	eq
 800b926:	68ec      	ldreq	r4, [r5, #12]
 800b928:	e7ec      	b.n	800b904 <_fflush_r+0x1c>
 800b92a:	2000      	movs	r0, #0
 800b92c:	bd38      	pop	{r3, r4, r5, pc}
 800b92e:	bf00      	nop
 800b930:	0800c9f8 	.word	0x0800c9f8
 800b934:	0800ca18 	.word	0x0800ca18
 800b938:	0800c9d8 	.word	0x0800c9d8

0800b93c <std>:
 800b93c:	2300      	movs	r3, #0
 800b93e:	b510      	push	{r4, lr}
 800b940:	4604      	mov	r4, r0
 800b942:	e9c0 3300 	strd	r3, r3, [r0]
 800b946:	6083      	str	r3, [r0, #8]
 800b948:	8181      	strh	r1, [r0, #12]
 800b94a:	6643      	str	r3, [r0, #100]	; 0x64
 800b94c:	81c2      	strh	r2, [r0, #14]
 800b94e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b952:	6183      	str	r3, [r0, #24]
 800b954:	4619      	mov	r1, r3
 800b956:	2208      	movs	r2, #8
 800b958:	305c      	adds	r0, #92	; 0x5c
 800b95a:	f7ff fcec 	bl	800b336 <memset>
 800b95e:	4b05      	ldr	r3, [pc, #20]	; (800b974 <std+0x38>)
 800b960:	6263      	str	r3, [r4, #36]	; 0x24
 800b962:	4b05      	ldr	r3, [pc, #20]	; (800b978 <std+0x3c>)
 800b964:	62a3      	str	r3, [r4, #40]	; 0x28
 800b966:	4b05      	ldr	r3, [pc, #20]	; (800b97c <std+0x40>)
 800b968:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b96a:	4b05      	ldr	r3, [pc, #20]	; (800b980 <std+0x44>)
 800b96c:	6224      	str	r4, [r4, #32]
 800b96e:	6323      	str	r3, [r4, #48]	; 0x30
 800b970:	bd10      	pop	{r4, pc}
 800b972:	bf00      	nop
 800b974:	0800c12d 	.word	0x0800c12d
 800b978:	0800c14f 	.word	0x0800c14f
 800b97c:	0800c187 	.word	0x0800c187
 800b980:	0800c1ab 	.word	0x0800c1ab

0800b984 <_cleanup_r>:
 800b984:	4901      	ldr	r1, [pc, #4]	; (800b98c <_cleanup_r+0x8>)
 800b986:	f000 b885 	b.w	800ba94 <_fwalk_reent>
 800b98a:	bf00      	nop
 800b98c:	0800b8e9 	.word	0x0800b8e9

0800b990 <__sfmoreglue>:
 800b990:	b570      	push	{r4, r5, r6, lr}
 800b992:	1e4a      	subs	r2, r1, #1
 800b994:	2568      	movs	r5, #104	; 0x68
 800b996:	4355      	muls	r5, r2
 800b998:	460e      	mov	r6, r1
 800b99a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b99e:	f7ff fd21 	bl	800b3e4 <_malloc_r>
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	b140      	cbz	r0, 800b9b8 <__sfmoreglue+0x28>
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	e9c0 1600 	strd	r1, r6, [r0]
 800b9ac:	300c      	adds	r0, #12
 800b9ae:	60a0      	str	r0, [r4, #8]
 800b9b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b9b4:	f7ff fcbf 	bl	800b336 <memset>
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	bd70      	pop	{r4, r5, r6, pc}

0800b9bc <__sinit>:
 800b9bc:	6983      	ldr	r3, [r0, #24]
 800b9be:	b510      	push	{r4, lr}
 800b9c0:	4604      	mov	r4, r0
 800b9c2:	bb33      	cbnz	r3, 800ba12 <__sinit+0x56>
 800b9c4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b9c8:	6503      	str	r3, [r0, #80]	; 0x50
 800b9ca:	4b12      	ldr	r3, [pc, #72]	; (800ba14 <__sinit+0x58>)
 800b9cc:	4a12      	ldr	r2, [pc, #72]	; (800ba18 <__sinit+0x5c>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6282      	str	r2, [r0, #40]	; 0x28
 800b9d2:	4298      	cmp	r0, r3
 800b9d4:	bf04      	itt	eq
 800b9d6:	2301      	moveq	r3, #1
 800b9d8:	6183      	streq	r3, [r0, #24]
 800b9da:	f000 f81f 	bl	800ba1c <__sfp>
 800b9de:	6060      	str	r0, [r4, #4]
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	f000 f81b 	bl	800ba1c <__sfp>
 800b9e6:	60a0      	str	r0, [r4, #8]
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	f000 f817 	bl	800ba1c <__sfp>
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	60e0      	str	r0, [r4, #12]
 800b9f2:	2104      	movs	r1, #4
 800b9f4:	6860      	ldr	r0, [r4, #4]
 800b9f6:	f7ff ffa1 	bl	800b93c <std>
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	2109      	movs	r1, #9
 800b9fe:	68a0      	ldr	r0, [r4, #8]
 800ba00:	f7ff ff9c 	bl	800b93c <std>
 800ba04:	2202      	movs	r2, #2
 800ba06:	2112      	movs	r1, #18
 800ba08:	68e0      	ldr	r0, [r4, #12]
 800ba0a:	f7ff ff97 	bl	800b93c <std>
 800ba0e:	2301      	movs	r3, #1
 800ba10:	61a3      	str	r3, [r4, #24]
 800ba12:	bd10      	pop	{r4, pc}
 800ba14:	0800c9ac 	.word	0x0800c9ac
 800ba18:	0800b985 	.word	0x0800b985

0800ba1c <__sfp>:
 800ba1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba1e:	4b1b      	ldr	r3, [pc, #108]	; (800ba8c <__sfp+0x70>)
 800ba20:	681e      	ldr	r6, [r3, #0]
 800ba22:	69b3      	ldr	r3, [r6, #24]
 800ba24:	4607      	mov	r7, r0
 800ba26:	b913      	cbnz	r3, 800ba2e <__sfp+0x12>
 800ba28:	4630      	mov	r0, r6
 800ba2a:	f7ff ffc7 	bl	800b9bc <__sinit>
 800ba2e:	3648      	adds	r6, #72	; 0x48
 800ba30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba34:	3b01      	subs	r3, #1
 800ba36:	d503      	bpl.n	800ba40 <__sfp+0x24>
 800ba38:	6833      	ldr	r3, [r6, #0]
 800ba3a:	b133      	cbz	r3, 800ba4a <__sfp+0x2e>
 800ba3c:	6836      	ldr	r6, [r6, #0]
 800ba3e:	e7f7      	b.n	800ba30 <__sfp+0x14>
 800ba40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba44:	b16d      	cbz	r5, 800ba62 <__sfp+0x46>
 800ba46:	3468      	adds	r4, #104	; 0x68
 800ba48:	e7f4      	b.n	800ba34 <__sfp+0x18>
 800ba4a:	2104      	movs	r1, #4
 800ba4c:	4638      	mov	r0, r7
 800ba4e:	f7ff ff9f 	bl	800b990 <__sfmoreglue>
 800ba52:	6030      	str	r0, [r6, #0]
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d1f1      	bne.n	800ba3c <__sfp+0x20>
 800ba58:	230c      	movs	r3, #12
 800ba5a:	603b      	str	r3, [r7, #0]
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	4620      	mov	r0, r4
 800ba60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba62:	4b0b      	ldr	r3, [pc, #44]	; (800ba90 <__sfp+0x74>)
 800ba64:	6665      	str	r5, [r4, #100]	; 0x64
 800ba66:	e9c4 5500 	strd	r5, r5, [r4]
 800ba6a:	60a5      	str	r5, [r4, #8]
 800ba6c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ba70:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ba74:	2208      	movs	r2, #8
 800ba76:	4629      	mov	r1, r5
 800ba78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba7c:	f7ff fc5b 	bl	800b336 <memset>
 800ba80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba88:	e7e9      	b.n	800ba5e <__sfp+0x42>
 800ba8a:	bf00      	nop
 800ba8c:	0800c9ac 	.word	0x0800c9ac
 800ba90:	ffff0001 	.word	0xffff0001

0800ba94 <_fwalk_reent>:
 800ba94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba98:	4680      	mov	r8, r0
 800ba9a:	4689      	mov	r9, r1
 800ba9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800baa0:	2600      	movs	r6, #0
 800baa2:	b914      	cbnz	r4, 800baaa <_fwalk_reent+0x16>
 800baa4:	4630      	mov	r0, r6
 800baa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baaa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800baae:	3f01      	subs	r7, #1
 800bab0:	d501      	bpl.n	800bab6 <_fwalk_reent+0x22>
 800bab2:	6824      	ldr	r4, [r4, #0]
 800bab4:	e7f5      	b.n	800baa2 <_fwalk_reent+0xe>
 800bab6:	89ab      	ldrh	r3, [r5, #12]
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d907      	bls.n	800bacc <_fwalk_reent+0x38>
 800babc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bac0:	3301      	adds	r3, #1
 800bac2:	d003      	beq.n	800bacc <_fwalk_reent+0x38>
 800bac4:	4629      	mov	r1, r5
 800bac6:	4640      	mov	r0, r8
 800bac8:	47c8      	blx	r9
 800baca:	4306      	orrs	r6, r0
 800bacc:	3568      	adds	r5, #104	; 0x68
 800bace:	e7ee      	b.n	800baae <_fwalk_reent+0x1a>

0800bad0 <__swhatbuf_r>:
 800bad0:	b570      	push	{r4, r5, r6, lr}
 800bad2:	460e      	mov	r6, r1
 800bad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bad8:	2900      	cmp	r1, #0
 800bada:	b096      	sub	sp, #88	; 0x58
 800badc:	4614      	mov	r4, r2
 800bade:	461d      	mov	r5, r3
 800bae0:	da07      	bge.n	800baf2 <__swhatbuf_r+0x22>
 800bae2:	2300      	movs	r3, #0
 800bae4:	602b      	str	r3, [r5, #0]
 800bae6:	89b3      	ldrh	r3, [r6, #12]
 800bae8:	061a      	lsls	r2, r3, #24
 800baea:	d410      	bmi.n	800bb0e <__swhatbuf_r+0x3e>
 800baec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baf0:	e00e      	b.n	800bb10 <__swhatbuf_r+0x40>
 800baf2:	466a      	mov	r2, sp
 800baf4:	f000 fb80 	bl	800c1f8 <_fstat_r>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	dbf2      	blt.n	800bae2 <__swhatbuf_r+0x12>
 800bafc:	9a01      	ldr	r2, [sp, #4]
 800bafe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb06:	425a      	negs	r2, r3
 800bb08:	415a      	adcs	r2, r3
 800bb0a:	602a      	str	r2, [r5, #0]
 800bb0c:	e7ee      	b.n	800baec <__swhatbuf_r+0x1c>
 800bb0e:	2340      	movs	r3, #64	; 0x40
 800bb10:	2000      	movs	r0, #0
 800bb12:	6023      	str	r3, [r4, #0]
 800bb14:	b016      	add	sp, #88	; 0x58
 800bb16:	bd70      	pop	{r4, r5, r6, pc}

0800bb18 <__smakebuf_r>:
 800bb18:	898b      	ldrh	r3, [r1, #12]
 800bb1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb1c:	079d      	lsls	r5, r3, #30
 800bb1e:	4606      	mov	r6, r0
 800bb20:	460c      	mov	r4, r1
 800bb22:	d507      	bpl.n	800bb34 <__smakebuf_r+0x1c>
 800bb24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb28:	6023      	str	r3, [r4, #0]
 800bb2a:	6123      	str	r3, [r4, #16]
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	6163      	str	r3, [r4, #20]
 800bb30:	b002      	add	sp, #8
 800bb32:	bd70      	pop	{r4, r5, r6, pc}
 800bb34:	ab01      	add	r3, sp, #4
 800bb36:	466a      	mov	r2, sp
 800bb38:	f7ff ffca 	bl	800bad0 <__swhatbuf_r>
 800bb3c:	9900      	ldr	r1, [sp, #0]
 800bb3e:	4605      	mov	r5, r0
 800bb40:	4630      	mov	r0, r6
 800bb42:	f7ff fc4f 	bl	800b3e4 <_malloc_r>
 800bb46:	b948      	cbnz	r0, 800bb5c <__smakebuf_r+0x44>
 800bb48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb4c:	059a      	lsls	r2, r3, #22
 800bb4e:	d4ef      	bmi.n	800bb30 <__smakebuf_r+0x18>
 800bb50:	f023 0303 	bic.w	r3, r3, #3
 800bb54:	f043 0302 	orr.w	r3, r3, #2
 800bb58:	81a3      	strh	r3, [r4, #12]
 800bb5a:	e7e3      	b.n	800bb24 <__smakebuf_r+0xc>
 800bb5c:	4b0d      	ldr	r3, [pc, #52]	; (800bb94 <__smakebuf_r+0x7c>)
 800bb5e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb60:	89a3      	ldrh	r3, [r4, #12]
 800bb62:	6020      	str	r0, [r4, #0]
 800bb64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb68:	81a3      	strh	r3, [r4, #12]
 800bb6a:	9b00      	ldr	r3, [sp, #0]
 800bb6c:	6163      	str	r3, [r4, #20]
 800bb6e:	9b01      	ldr	r3, [sp, #4]
 800bb70:	6120      	str	r0, [r4, #16]
 800bb72:	b15b      	cbz	r3, 800bb8c <__smakebuf_r+0x74>
 800bb74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb78:	4630      	mov	r0, r6
 800bb7a:	f000 fb4f 	bl	800c21c <_isatty_r>
 800bb7e:	b128      	cbz	r0, 800bb8c <__smakebuf_r+0x74>
 800bb80:	89a3      	ldrh	r3, [r4, #12]
 800bb82:	f023 0303 	bic.w	r3, r3, #3
 800bb86:	f043 0301 	orr.w	r3, r3, #1
 800bb8a:	81a3      	strh	r3, [r4, #12]
 800bb8c:	89a3      	ldrh	r3, [r4, #12]
 800bb8e:	431d      	orrs	r5, r3
 800bb90:	81a5      	strh	r5, [r4, #12]
 800bb92:	e7cd      	b.n	800bb30 <__smakebuf_r+0x18>
 800bb94:	0800b985 	.word	0x0800b985

0800bb98 <__malloc_lock>:
 800bb98:	4770      	bx	lr

0800bb9a <__malloc_unlock>:
 800bb9a:	4770      	bx	lr

0800bb9c <__sfputc_r>:
 800bb9c:	6893      	ldr	r3, [r2, #8]
 800bb9e:	3b01      	subs	r3, #1
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	b410      	push	{r4}
 800bba4:	6093      	str	r3, [r2, #8]
 800bba6:	da08      	bge.n	800bbba <__sfputc_r+0x1e>
 800bba8:	6994      	ldr	r4, [r2, #24]
 800bbaa:	42a3      	cmp	r3, r4
 800bbac:	db01      	blt.n	800bbb2 <__sfputc_r+0x16>
 800bbae:	290a      	cmp	r1, #10
 800bbb0:	d103      	bne.n	800bbba <__sfputc_r+0x1e>
 800bbb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbb6:	f7ff bd51 	b.w	800b65c <__swbuf_r>
 800bbba:	6813      	ldr	r3, [r2, #0]
 800bbbc:	1c58      	adds	r0, r3, #1
 800bbbe:	6010      	str	r0, [r2, #0]
 800bbc0:	7019      	strb	r1, [r3, #0]
 800bbc2:	4608      	mov	r0, r1
 800bbc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbc8:	4770      	bx	lr

0800bbca <__sfputs_r>:
 800bbca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbcc:	4606      	mov	r6, r0
 800bbce:	460f      	mov	r7, r1
 800bbd0:	4614      	mov	r4, r2
 800bbd2:	18d5      	adds	r5, r2, r3
 800bbd4:	42ac      	cmp	r4, r5
 800bbd6:	d101      	bne.n	800bbdc <__sfputs_r+0x12>
 800bbd8:	2000      	movs	r0, #0
 800bbda:	e007      	b.n	800bbec <__sfputs_r+0x22>
 800bbdc:	463a      	mov	r2, r7
 800bbde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	f7ff ffda 	bl	800bb9c <__sfputc_r>
 800bbe8:	1c43      	adds	r3, r0, #1
 800bbea:	d1f3      	bne.n	800bbd4 <__sfputs_r+0xa>
 800bbec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bbf0 <_vfiprintf_r>:
 800bbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf4:	460c      	mov	r4, r1
 800bbf6:	b09d      	sub	sp, #116	; 0x74
 800bbf8:	4617      	mov	r7, r2
 800bbfa:	461d      	mov	r5, r3
 800bbfc:	4606      	mov	r6, r0
 800bbfe:	b118      	cbz	r0, 800bc08 <_vfiprintf_r+0x18>
 800bc00:	6983      	ldr	r3, [r0, #24]
 800bc02:	b90b      	cbnz	r3, 800bc08 <_vfiprintf_r+0x18>
 800bc04:	f7ff feda 	bl	800b9bc <__sinit>
 800bc08:	4b7c      	ldr	r3, [pc, #496]	; (800bdfc <_vfiprintf_r+0x20c>)
 800bc0a:	429c      	cmp	r4, r3
 800bc0c:	d158      	bne.n	800bcc0 <_vfiprintf_r+0xd0>
 800bc0e:	6874      	ldr	r4, [r6, #4]
 800bc10:	89a3      	ldrh	r3, [r4, #12]
 800bc12:	0718      	lsls	r0, r3, #28
 800bc14:	d55e      	bpl.n	800bcd4 <_vfiprintf_r+0xe4>
 800bc16:	6923      	ldr	r3, [r4, #16]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d05b      	beq.n	800bcd4 <_vfiprintf_r+0xe4>
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	9309      	str	r3, [sp, #36]	; 0x24
 800bc20:	2320      	movs	r3, #32
 800bc22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc26:	2330      	movs	r3, #48	; 0x30
 800bc28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc2c:	9503      	str	r5, [sp, #12]
 800bc2e:	f04f 0b01 	mov.w	fp, #1
 800bc32:	46b8      	mov	r8, r7
 800bc34:	4645      	mov	r5, r8
 800bc36:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bc3a:	b10b      	cbz	r3, 800bc40 <_vfiprintf_r+0x50>
 800bc3c:	2b25      	cmp	r3, #37	; 0x25
 800bc3e:	d154      	bne.n	800bcea <_vfiprintf_r+0xfa>
 800bc40:	ebb8 0a07 	subs.w	sl, r8, r7
 800bc44:	d00b      	beq.n	800bc5e <_vfiprintf_r+0x6e>
 800bc46:	4653      	mov	r3, sl
 800bc48:	463a      	mov	r2, r7
 800bc4a:	4621      	mov	r1, r4
 800bc4c:	4630      	mov	r0, r6
 800bc4e:	f7ff ffbc 	bl	800bbca <__sfputs_r>
 800bc52:	3001      	adds	r0, #1
 800bc54:	f000 80c2 	beq.w	800bddc <_vfiprintf_r+0x1ec>
 800bc58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc5a:	4453      	add	r3, sl
 800bc5c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc5e:	f898 3000 	ldrb.w	r3, [r8]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	f000 80ba 	beq.w	800bddc <_vfiprintf_r+0x1ec>
 800bc68:	2300      	movs	r3, #0
 800bc6a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc72:	9304      	str	r3, [sp, #16]
 800bc74:	9307      	str	r3, [sp, #28]
 800bc76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc7a:	931a      	str	r3, [sp, #104]	; 0x68
 800bc7c:	46a8      	mov	r8, r5
 800bc7e:	2205      	movs	r2, #5
 800bc80:	f818 1b01 	ldrb.w	r1, [r8], #1
 800bc84:	485e      	ldr	r0, [pc, #376]	; (800be00 <_vfiprintf_r+0x210>)
 800bc86:	f7f4 fad3 	bl	8000230 <memchr>
 800bc8a:	9b04      	ldr	r3, [sp, #16]
 800bc8c:	bb78      	cbnz	r0, 800bcee <_vfiprintf_r+0xfe>
 800bc8e:	06d9      	lsls	r1, r3, #27
 800bc90:	bf44      	itt	mi
 800bc92:	2220      	movmi	r2, #32
 800bc94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bc98:	071a      	lsls	r2, r3, #28
 800bc9a:	bf44      	itt	mi
 800bc9c:	222b      	movmi	r2, #43	; 0x2b
 800bc9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bca2:	782a      	ldrb	r2, [r5, #0]
 800bca4:	2a2a      	cmp	r2, #42	; 0x2a
 800bca6:	d02a      	beq.n	800bcfe <_vfiprintf_r+0x10e>
 800bca8:	9a07      	ldr	r2, [sp, #28]
 800bcaa:	46a8      	mov	r8, r5
 800bcac:	2000      	movs	r0, #0
 800bcae:	250a      	movs	r5, #10
 800bcb0:	4641      	mov	r1, r8
 800bcb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcb6:	3b30      	subs	r3, #48	; 0x30
 800bcb8:	2b09      	cmp	r3, #9
 800bcba:	d969      	bls.n	800bd90 <_vfiprintf_r+0x1a0>
 800bcbc:	b360      	cbz	r0, 800bd18 <_vfiprintf_r+0x128>
 800bcbe:	e024      	b.n	800bd0a <_vfiprintf_r+0x11a>
 800bcc0:	4b50      	ldr	r3, [pc, #320]	; (800be04 <_vfiprintf_r+0x214>)
 800bcc2:	429c      	cmp	r4, r3
 800bcc4:	d101      	bne.n	800bcca <_vfiprintf_r+0xda>
 800bcc6:	68b4      	ldr	r4, [r6, #8]
 800bcc8:	e7a2      	b.n	800bc10 <_vfiprintf_r+0x20>
 800bcca:	4b4f      	ldr	r3, [pc, #316]	; (800be08 <_vfiprintf_r+0x218>)
 800bccc:	429c      	cmp	r4, r3
 800bcce:	bf08      	it	eq
 800bcd0:	68f4      	ldreq	r4, [r6, #12]
 800bcd2:	e79d      	b.n	800bc10 <_vfiprintf_r+0x20>
 800bcd4:	4621      	mov	r1, r4
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	f7ff fd12 	bl	800b700 <__swsetup_r>
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	d09d      	beq.n	800bc1c <_vfiprintf_r+0x2c>
 800bce0:	f04f 30ff 	mov.w	r0, #4294967295
 800bce4:	b01d      	add	sp, #116	; 0x74
 800bce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcea:	46a8      	mov	r8, r5
 800bcec:	e7a2      	b.n	800bc34 <_vfiprintf_r+0x44>
 800bcee:	4a44      	ldr	r2, [pc, #272]	; (800be00 <_vfiprintf_r+0x210>)
 800bcf0:	1a80      	subs	r0, r0, r2
 800bcf2:	fa0b f000 	lsl.w	r0, fp, r0
 800bcf6:	4318      	orrs	r0, r3
 800bcf8:	9004      	str	r0, [sp, #16]
 800bcfa:	4645      	mov	r5, r8
 800bcfc:	e7be      	b.n	800bc7c <_vfiprintf_r+0x8c>
 800bcfe:	9a03      	ldr	r2, [sp, #12]
 800bd00:	1d11      	adds	r1, r2, #4
 800bd02:	6812      	ldr	r2, [r2, #0]
 800bd04:	9103      	str	r1, [sp, #12]
 800bd06:	2a00      	cmp	r2, #0
 800bd08:	db01      	blt.n	800bd0e <_vfiprintf_r+0x11e>
 800bd0a:	9207      	str	r2, [sp, #28]
 800bd0c:	e004      	b.n	800bd18 <_vfiprintf_r+0x128>
 800bd0e:	4252      	negs	r2, r2
 800bd10:	f043 0302 	orr.w	r3, r3, #2
 800bd14:	9207      	str	r2, [sp, #28]
 800bd16:	9304      	str	r3, [sp, #16]
 800bd18:	f898 3000 	ldrb.w	r3, [r8]
 800bd1c:	2b2e      	cmp	r3, #46	; 0x2e
 800bd1e:	d10e      	bne.n	800bd3e <_vfiprintf_r+0x14e>
 800bd20:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bd24:	2b2a      	cmp	r3, #42	; 0x2a
 800bd26:	d138      	bne.n	800bd9a <_vfiprintf_r+0x1aa>
 800bd28:	9b03      	ldr	r3, [sp, #12]
 800bd2a:	1d1a      	adds	r2, r3, #4
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	9203      	str	r2, [sp, #12]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	bfb8      	it	lt
 800bd34:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd38:	f108 0802 	add.w	r8, r8, #2
 800bd3c:	9305      	str	r3, [sp, #20]
 800bd3e:	4d33      	ldr	r5, [pc, #204]	; (800be0c <_vfiprintf_r+0x21c>)
 800bd40:	f898 1000 	ldrb.w	r1, [r8]
 800bd44:	2203      	movs	r2, #3
 800bd46:	4628      	mov	r0, r5
 800bd48:	f7f4 fa72 	bl	8000230 <memchr>
 800bd4c:	b140      	cbz	r0, 800bd60 <_vfiprintf_r+0x170>
 800bd4e:	2340      	movs	r3, #64	; 0x40
 800bd50:	1b40      	subs	r0, r0, r5
 800bd52:	fa03 f000 	lsl.w	r0, r3, r0
 800bd56:	9b04      	ldr	r3, [sp, #16]
 800bd58:	4303      	orrs	r3, r0
 800bd5a:	f108 0801 	add.w	r8, r8, #1
 800bd5e:	9304      	str	r3, [sp, #16]
 800bd60:	f898 1000 	ldrb.w	r1, [r8]
 800bd64:	482a      	ldr	r0, [pc, #168]	; (800be10 <_vfiprintf_r+0x220>)
 800bd66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd6a:	2206      	movs	r2, #6
 800bd6c:	f108 0701 	add.w	r7, r8, #1
 800bd70:	f7f4 fa5e 	bl	8000230 <memchr>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	d037      	beq.n	800bde8 <_vfiprintf_r+0x1f8>
 800bd78:	4b26      	ldr	r3, [pc, #152]	; (800be14 <_vfiprintf_r+0x224>)
 800bd7a:	bb1b      	cbnz	r3, 800bdc4 <_vfiprintf_r+0x1d4>
 800bd7c:	9b03      	ldr	r3, [sp, #12]
 800bd7e:	3307      	adds	r3, #7
 800bd80:	f023 0307 	bic.w	r3, r3, #7
 800bd84:	3308      	adds	r3, #8
 800bd86:	9303      	str	r3, [sp, #12]
 800bd88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd8a:	444b      	add	r3, r9
 800bd8c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd8e:	e750      	b.n	800bc32 <_vfiprintf_r+0x42>
 800bd90:	fb05 3202 	mla	r2, r5, r2, r3
 800bd94:	2001      	movs	r0, #1
 800bd96:	4688      	mov	r8, r1
 800bd98:	e78a      	b.n	800bcb0 <_vfiprintf_r+0xc0>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	f108 0801 	add.w	r8, r8, #1
 800bda0:	9305      	str	r3, [sp, #20]
 800bda2:	4619      	mov	r1, r3
 800bda4:	250a      	movs	r5, #10
 800bda6:	4640      	mov	r0, r8
 800bda8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdac:	3a30      	subs	r2, #48	; 0x30
 800bdae:	2a09      	cmp	r2, #9
 800bdb0:	d903      	bls.n	800bdba <_vfiprintf_r+0x1ca>
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d0c3      	beq.n	800bd3e <_vfiprintf_r+0x14e>
 800bdb6:	9105      	str	r1, [sp, #20]
 800bdb8:	e7c1      	b.n	800bd3e <_vfiprintf_r+0x14e>
 800bdba:	fb05 2101 	mla	r1, r5, r1, r2
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	4680      	mov	r8, r0
 800bdc2:	e7f0      	b.n	800bda6 <_vfiprintf_r+0x1b6>
 800bdc4:	ab03      	add	r3, sp, #12
 800bdc6:	9300      	str	r3, [sp, #0]
 800bdc8:	4622      	mov	r2, r4
 800bdca:	4b13      	ldr	r3, [pc, #76]	; (800be18 <_vfiprintf_r+0x228>)
 800bdcc:	a904      	add	r1, sp, #16
 800bdce:	4630      	mov	r0, r6
 800bdd0:	f3af 8000 	nop.w
 800bdd4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bdd8:	4681      	mov	r9, r0
 800bdda:	d1d5      	bne.n	800bd88 <_vfiprintf_r+0x198>
 800bddc:	89a3      	ldrh	r3, [r4, #12]
 800bdde:	065b      	lsls	r3, r3, #25
 800bde0:	f53f af7e 	bmi.w	800bce0 <_vfiprintf_r+0xf0>
 800bde4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bde6:	e77d      	b.n	800bce4 <_vfiprintf_r+0xf4>
 800bde8:	ab03      	add	r3, sp, #12
 800bdea:	9300      	str	r3, [sp, #0]
 800bdec:	4622      	mov	r2, r4
 800bdee:	4b0a      	ldr	r3, [pc, #40]	; (800be18 <_vfiprintf_r+0x228>)
 800bdf0:	a904      	add	r1, sp, #16
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	f000 f888 	bl	800bf08 <_printf_i>
 800bdf8:	e7ec      	b.n	800bdd4 <_vfiprintf_r+0x1e4>
 800bdfa:	bf00      	nop
 800bdfc:	0800c9f8 	.word	0x0800c9f8
 800be00:	0800ca38 	.word	0x0800ca38
 800be04:	0800ca18 	.word	0x0800ca18
 800be08:	0800c9d8 	.word	0x0800c9d8
 800be0c:	0800ca3e 	.word	0x0800ca3e
 800be10:	0800ca42 	.word	0x0800ca42
 800be14:	00000000 	.word	0x00000000
 800be18:	0800bbcb 	.word	0x0800bbcb

0800be1c <_printf_common>:
 800be1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be20:	4691      	mov	r9, r2
 800be22:	461f      	mov	r7, r3
 800be24:	688a      	ldr	r2, [r1, #8]
 800be26:	690b      	ldr	r3, [r1, #16]
 800be28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be2c:	4293      	cmp	r3, r2
 800be2e:	bfb8      	it	lt
 800be30:	4613      	movlt	r3, r2
 800be32:	f8c9 3000 	str.w	r3, [r9]
 800be36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be3a:	4606      	mov	r6, r0
 800be3c:	460c      	mov	r4, r1
 800be3e:	b112      	cbz	r2, 800be46 <_printf_common+0x2a>
 800be40:	3301      	adds	r3, #1
 800be42:	f8c9 3000 	str.w	r3, [r9]
 800be46:	6823      	ldr	r3, [r4, #0]
 800be48:	0699      	lsls	r1, r3, #26
 800be4a:	bf42      	ittt	mi
 800be4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800be50:	3302      	addmi	r3, #2
 800be52:	f8c9 3000 	strmi.w	r3, [r9]
 800be56:	6825      	ldr	r5, [r4, #0]
 800be58:	f015 0506 	ands.w	r5, r5, #6
 800be5c:	d107      	bne.n	800be6e <_printf_common+0x52>
 800be5e:	f104 0a19 	add.w	sl, r4, #25
 800be62:	68e3      	ldr	r3, [r4, #12]
 800be64:	f8d9 2000 	ldr.w	r2, [r9]
 800be68:	1a9b      	subs	r3, r3, r2
 800be6a:	42ab      	cmp	r3, r5
 800be6c:	dc28      	bgt.n	800bec0 <_printf_common+0xa4>
 800be6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800be72:	6822      	ldr	r2, [r4, #0]
 800be74:	3300      	adds	r3, #0
 800be76:	bf18      	it	ne
 800be78:	2301      	movne	r3, #1
 800be7a:	0692      	lsls	r2, r2, #26
 800be7c:	d42d      	bmi.n	800beda <_printf_common+0xbe>
 800be7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be82:	4639      	mov	r1, r7
 800be84:	4630      	mov	r0, r6
 800be86:	47c0      	blx	r8
 800be88:	3001      	adds	r0, #1
 800be8a:	d020      	beq.n	800bece <_printf_common+0xb2>
 800be8c:	6823      	ldr	r3, [r4, #0]
 800be8e:	68e5      	ldr	r5, [r4, #12]
 800be90:	f8d9 2000 	ldr.w	r2, [r9]
 800be94:	f003 0306 	and.w	r3, r3, #6
 800be98:	2b04      	cmp	r3, #4
 800be9a:	bf08      	it	eq
 800be9c:	1aad      	subeq	r5, r5, r2
 800be9e:	68a3      	ldr	r3, [r4, #8]
 800bea0:	6922      	ldr	r2, [r4, #16]
 800bea2:	bf0c      	ite	eq
 800bea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bea8:	2500      	movne	r5, #0
 800beaa:	4293      	cmp	r3, r2
 800beac:	bfc4      	itt	gt
 800beae:	1a9b      	subgt	r3, r3, r2
 800beb0:	18ed      	addgt	r5, r5, r3
 800beb2:	f04f 0900 	mov.w	r9, #0
 800beb6:	341a      	adds	r4, #26
 800beb8:	454d      	cmp	r5, r9
 800beba:	d11a      	bne.n	800bef2 <_printf_common+0xd6>
 800bebc:	2000      	movs	r0, #0
 800bebe:	e008      	b.n	800bed2 <_printf_common+0xb6>
 800bec0:	2301      	movs	r3, #1
 800bec2:	4652      	mov	r2, sl
 800bec4:	4639      	mov	r1, r7
 800bec6:	4630      	mov	r0, r6
 800bec8:	47c0      	blx	r8
 800beca:	3001      	adds	r0, #1
 800becc:	d103      	bne.n	800bed6 <_printf_common+0xba>
 800bece:	f04f 30ff 	mov.w	r0, #4294967295
 800bed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bed6:	3501      	adds	r5, #1
 800bed8:	e7c3      	b.n	800be62 <_printf_common+0x46>
 800beda:	18e1      	adds	r1, r4, r3
 800bedc:	1c5a      	adds	r2, r3, #1
 800bede:	2030      	movs	r0, #48	; 0x30
 800bee0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bee4:	4422      	add	r2, r4
 800bee6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800beea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800beee:	3302      	adds	r3, #2
 800bef0:	e7c5      	b.n	800be7e <_printf_common+0x62>
 800bef2:	2301      	movs	r3, #1
 800bef4:	4622      	mov	r2, r4
 800bef6:	4639      	mov	r1, r7
 800bef8:	4630      	mov	r0, r6
 800befa:	47c0      	blx	r8
 800befc:	3001      	adds	r0, #1
 800befe:	d0e6      	beq.n	800bece <_printf_common+0xb2>
 800bf00:	f109 0901 	add.w	r9, r9, #1
 800bf04:	e7d8      	b.n	800beb8 <_printf_common+0x9c>
	...

0800bf08 <_printf_i>:
 800bf08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf0c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bf10:	460c      	mov	r4, r1
 800bf12:	7e09      	ldrb	r1, [r1, #24]
 800bf14:	b085      	sub	sp, #20
 800bf16:	296e      	cmp	r1, #110	; 0x6e
 800bf18:	4617      	mov	r7, r2
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	4698      	mov	r8, r3
 800bf1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf20:	f000 80b3 	beq.w	800c08a <_printf_i+0x182>
 800bf24:	d822      	bhi.n	800bf6c <_printf_i+0x64>
 800bf26:	2963      	cmp	r1, #99	; 0x63
 800bf28:	d036      	beq.n	800bf98 <_printf_i+0x90>
 800bf2a:	d80a      	bhi.n	800bf42 <_printf_i+0x3a>
 800bf2c:	2900      	cmp	r1, #0
 800bf2e:	f000 80b9 	beq.w	800c0a4 <_printf_i+0x19c>
 800bf32:	2958      	cmp	r1, #88	; 0x58
 800bf34:	f000 8083 	beq.w	800c03e <_printf_i+0x136>
 800bf38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf3c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bf40:	e032      	b.n	800bfa8 <_printf_i+0xa0>
 800bf42:	2964      	cmp	r1, #100	; 0x64
 800bf44:	d001      	beq.n	800bf4a <_printf_i+0x42>
 800bf46:	2969      	cmp	r1, #105	; 0x69
 800bf48:	d1f6      	bne.n	800bf38 <_printf_i+0x30>
 800bf4a:	6820      	ldr	r0, [r4, #0]
 800bf4c:	6813      	ldr	r3, [r2, #0]
 800bf4e:	0605      	lsls	r5, r0, #24
 800bf50:	f103 0104 	add.w	r1, r3, #4
 800bf54:	d52a      	bpl.n	800bfac <_printf_i+0xa4>
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	6011      	str	r1, [r2, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	da03      	bge.n	800bf66 <_printf_i+0x5e>
 800bf5e:	222d      	movs	r2, #45	; 0x2d
 800bf60:	425b      	negs	r3, r3
 800bf62:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bf66:	486f      	ldr	r0, [pc, #444]	; (800c124 <_printf_i+0x21c>)
 800bf68:	220a      	movs	r2, #10
 800bf6a:	e039      	b.n	800bfe0 <_printf_i+0xd8>
 800bf6c:	2973      	cmp	r1, #115	; 0x73
 800bf6e:	f000 809d 	beq.w	800c0ac <_printf_i+0x1a4>
 800bf72:	d808      	bhi.n	800bf86 <_printf_i+0x7e>
 800bf74:	296f      	cmp	r1, #111	; 0x6f
 800bf76:	d020      	beq.n	800bfba <_printf_i+0xb2>
 800bf78:	2970      	cmp	r1, #112	; 0x70
 800bf7a:	d1dd      	bne.n	800bf38 <_printf_i+0x30>
 800bf7c:	6823      	ldr	r3, [r4, #0]
 800bf7e:	f043 0320 	orr.w	r3, r3, #32
 800bf82:	6023      	str	r3, [r4, #0]
 800bf84:	e003      	b.n	800bf8e <_printf_i+0x86>
 800bf86:	2975      	cmp	r1, #117	; 0x75
 800bf88:	d017      	beq.n	800bfba <_printf_i+0xb2>
 800bf8a:	2978      	cmp	r1, #120	; 0x78
 800bf8c:	d1d4      	bne.n	800bf38 <_printf_i+0x30>
 800bf8e:	2378      	movs	r3, #120	; 0x78
 800bf90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf94:	4864      	ldr	r0, [pc, #400]	; (800c128 <_printf_i+0x220>)
 800bf96:	e055      	b.n	800c044 <_printf_i+0x13c>
 800bf98:	6813      	ldr	r3, [r2, #0]
 800bf9a:	1d19      	adds	r1, r3, #4
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	6011      	str	r1, [r2, #0]
 800bfa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e08c      	b.n	800c0c6 <_printf_i+0x1be>
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	6011      	str	r1, [r2, #0]
 800bfb0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bfb4:	bf18      	it	ne
 800bfb6:	b21b      	sxthne	r3, r3
 800bfb8:	e7cf      	b.n	800bf5a <_printf_i+0x52>
 800bfba:	6813      	ldr	r3, [r2, #0]
 800bfbc:	6825      	ldr	r5, [r4, #0]
 800bfbe:	1d18      	adds	r0, r3, #4
 800bfc0:	6010      	str	r0, [r2, #0]
 800bfc2:	0628      	lsls	r0, r5, #24
 800bfc4:	d501      	bpl.n	800bfca <_printf_i+0xc2>
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	e002      	b.n	800bfd0 <_printf_i+0xc8>
 800bfca:	0668      	lsls	r0, r5, #25
 800bfcc:	d5fb      	bpl.n	800bfc6 <_printf_i+0xbe>
 800bfce:	881b      	ldrh	r3, [r3, #0]
 800bfd0:	4854      	ldr	r0, [pc, #336]	; (800c124 <_printf_i+0x21c>)
 800bfd2:	296f      	cmp	r1, #111	; 0x6f
 800bfd4:	bf14      	ite	ne
 800bfd6:	220a      	movne	r2, #10
 800bfd8:	2208      	moveq	r2, #8
 800bfda:	2100      	movs	r1, #0
 800bfdc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bfe0:	6865      	ldr	r5, [r4, #4]
 800bfe2:	60a5      	str	r5, [r4, #8]
 800bfe4:	2d00      	cmp	r5, #0
 800bfe6:	f2c0 8095 	blt.w	800c114 <_printf_i+0x20c>
 800bfea:	6821      	ldr	r1, [r4, #0]
 800bfec:	f021 0104 	bic.w	r1, r1, #4
 800bff0:	6021      	str	r1, [r4, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d13d      	bne.n	800c072 <_printf_i+0x16a>
 800bff6:	2d00      	cmp	r5, #0
 800bff8:	f040 808e 	bne.w	800c118 <_printf_i+0x210>
 800bffc:	4665      	mov	r5, ip
 800bffe:	2a08      	cmp	r2, #8
 800c000:	d10b      	bne.n	800c01a <_printf_i+0x112>
 800c002:	6823      	ldr	r3, [r4, #0]
 800c004:	07db      	lsls	r3, r3, #31
 800c006:	d508      	bpl.n	800c01a <_printf_i+0x112>
 800c008:	6923      	ldr	r3, [r4, #16]
 800c00a:	6862      	ldr	r2, [r4, #4]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	bfde      	ittt	le
 800c010:	2330      	movle	r3, #48	; 0x30
 800c012:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c016:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c01a:	ebac 0305 	sub.w	r3, ip, r5
 800c01e:	6123      	str	r3, [r4, #16]
 800c020:	f8cd 8000 	str.w	r8, [sp]
 800c024:	463b      	mov	r3, r7
 800c026:	aa03      	add	r2, sp, #12
 800c028:	4621      	mov	r1, r4
 800c02a:	4630      	mov	r0, r6
 800c02c:	f7ff fef6 	bl	800be1c <_printf_common>
 800c030:	3001      	adds	r0, #1
 800c032:	d14d      	bne.n	800c0d0 <_printf_i+0x1c8>
 800c034:	f04f 30ff 	mov.w	r0, #4294967295
 800c038:	b005      	add	sp, #20
 800c03a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c03e:	4839      	ldr	r0, [pc, #228]	; (800c124 <_printf_i+0x21c>)
 800c040:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c044:	6813      	ldr	r3, [r2, #0]
 800c046:	6821      	ldr	r1, [r4, #0]
 800c048:	1d1d      	adds	r5, r3, #4
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	6015      	str	r5, [r2, #0]
 800c04e:	060a      	lsls	r2, r1, #24
 800c050:	d50b      	bpl.n	800c06a <_printf_i+0x162>
 800c052:	07ca      	lsls	r2, r1, #31
 800c054:	bf44      	itt	mi
 800c056:	f041 0120 	orrmi.w	r1, r1, #32
 800c05a:	6021      	strmi	r1, [r4, #0]
 800c05c:	b91b      	cbnz	r3, 800c066 <_printf_i+0x15e>
 800c05e:	6822      	ldr	r2, [r4, #0]
 800c060:	f022 0220 	bic.w	r2, r2, #32
 800c064:	6022      	str	r2, [r4, #0]
 800c066:	2210      	movs	r2, #16
 800c068:	e7b7      	b.n	800bfda <_printf_i+0xd2>
 800c06a:	064d      	lsls	r5, r1, #25
 800c06c:	bf48      	it	mi
 800c06e:	b29b      	uxthmi	r3, r3
 800c070:	e7ef      	b.n	800c052 <_printf_i+0x14a>
 800c072:	4665      	mov	r5, ip
 800c074:	fbb3 f1f2 	udiv	r1, r3, r2
 800c078:	fb02 3311 	mls	r3, r2, r1, r3
 800c07c:	5cc3      	ldrb	r3, [r0, r3]
 800c07e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c082:	460b      	mov	r3, r1
 800c084:	2900      	cmp	r1, #0
 800c086:	d1f5      	bne.n	800c074 <_printf_i+0x16c>
 800c088:	e7b9      	b.n	800bffe <_printf_i+0xf6>
 800c08a:	6813      	ldr	r3, [r2, #0]
 800c08c:	6825      	ldr	r5, [r4, #0]
 800c08e:	6961      	ldr	r1, [r4, #20]
 800c090:	1d18      	adds	r0, r3, #4
 800c092:	6010      	str	r0, [r2, #0]
 800c094:	0628      	lsls	r0, r5, #24
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	d501      	bpl.n	800c09e <_printf_i+0x196>
 800c09a:	6019      	str	r1, [r3, #0]
 800c09c:	e002      	b.n	800c0a4 <_printf_i+0x19c>
 800c09e:	066a      	lsls	r2, r5, #25
 800c0a0:	d5fb      	bpl.n	800c09a <_printf_i+0x192>
 800c0a2:	8019      	strh	r1, [r3, #0]
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	6123      	str	r3, [r4, #16]
 800c0a8:	4665      	mov	r5, ip
 800c0aa:	e7b9      	b.n	800c020 <_printf_i+0x118>
 800c0ac:	6813      	ldr	r3, [r2, #0]
 800c0ae:	1d19      	adds	r1, r3, #4
 800c0b0:	6011      	str	r1, [r2, #0]
 800c0b2:	681d      	ldr	r5, [r3, #0]
 800c0b4:	6862      	ldr	r2, [r4, #4]
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	f7f4 f8b9 	bl	8000230 <memchr>
 800c0be:	b108      	cbz	r0, 800c0c4 <_printf_i+0x1bc>
 800c0c0:	1b40      	subs	r0, r0, r5
 800c0c2:	6060      	str	r0, [r4, #4]
 800c0c4:	6863      	ldr	r3, [r4, #4]
 800c0c6:	6123      	str	r3, [r4, #16]
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0ce:	e7a7      	b.n	800c020 <_printf_i+0x118>
 800c0d0:	6923      	ldr	r3, [r4, #16]
 800c0d2:	462a      	mov	r2, r5
 800c0d4:	4639      	mov	r1, r7
 800c0d6:	4630      	mov	r0, r6
 800c0d8:	47c0      	blx	r8
 800c0da:	3001      	adds	r0, #1
 800c0dc:	d0aa      	beq.n	800c034 <_printf_i+0x12c>
 800c0de:	6823      	ldr	r3, [r4, #0]
 800c0e0:	079b      	lsls	r3, r3, #30
 800c0e2:	d413      	bmi.n	800c10c <_printf_i+0x204>
 800c0e4:	68e0      	ldr	r0, [r4, #12]
 800c0e6:	9b03      	ldr	r3, [sp, #12]
 800c0e8:	4298      	cmp	r0, r3
 800c0ea:	bfb8      	it	lt
 800c0ec:	4618      	movlt	r0, r3
 800c0ee:	e7a3      	b.n	800c038 <_printf_i+0x130>
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	464a      	mov	r2, r9
 800c0f4:	4639      	mov	r1, r7
 800c0f6:	4630      	mov	r0, r6
 800c0f8:	47c0      	blx	r8
 800c0fa:	3001      	adds	r0, #1
 800c0fc:	d09a      	beq.n	800c034 <_printf_i+0x12c>
 800c0fe:	3501      	adds	r5, #1
 800c100:	68e3      	ldr	r3, [r4, #12]
 800c102:	9a03      	ldr	r2, [sp, #12]
 800c104:	1a9b      	subs	r3, r3, r2
 800c106:	42ab      	cmp	r3, r5
 800c108:	dcf2      	bgt.n	800c0f0 <_printf_i+0x1e8>
 800c10a:	e7eb      	b.n	800c0e4 <_printf_i+0x1dc>
 800c10c:	2500      	movs	r5, #0
 800c10e:	f104 0919 	add.w	r9, r4, #25
 800c112:	e7f5      	b.n	800c100 <_printf_i+0x1f8>
 800c114:	2b00      	cmp	r3, #0
 800c116:	d1ac      	bne.n	800c072 <_printf_i+0x16a>
 800c118:	7803      	ldrb	r3, [r0, #0]
 800c11a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c11e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c122:	e76c      	b.n	800bffe <_printf_i+0xf6>
 800c124:	0800ca49 	.word	0x0800ca49
 800c128:	0800ca5a 	.word	0x0800ca5a

0800c12c <__sread>:
 800c12c:	b510      	push	{r4, lr}
 800c12e:	460c      	mov	r4, r1
 800c130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c134:	f000 f894 	bl	800c260 <_read_r>
 800c138:	2800      	cmp	r0, #0
 800c13a:	bfab      	itete	ge
 800c13c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c13e:	89a3      	ldrhlt	r3, [r4, #12]
 800c140:	181b      	addge	r3, r3, r0
 800c142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c146:	bfac      	ite	ge
 800c148:	6563      	strge	r3, [r4, #84]	; 0x54
 800c14a:	81a3      	strhlt	r3, [r4, #12]
 800c14c:	bd10      	pop	{r4, pc}

0800c14e <__swrite>:
 800c14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c152:	461f      	mov	r7, r3
 800c154:	898b      	ldrh	r3, [r1, #12]
 800c156:	05db      	lsls	r3, r3, #23
 800c158:	4605      	mov	r5, r0
 800c15a:	460c      	mov	r4, r1
 800c15c:	4616      	mov	r6, r2
 800c15e:	d505      	bpl.n	800c16c <__swrite+0x1e>
 800c160:	2302      	movs	r3, #2
 800c162:	2200      	movs	r2, #0
 800c164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c168:	f000 f868 	bl	800c23c <_lseek_r>
 800c16c:	89a3      	ldrh	r3, [r4, #12]
 800c16e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c176:	81a3      	strh	r3, [r4, #12]
 800c178:	4632      	mov	r2, r6
 800c17a:	463b      	mov	r3, r7
 800c17c:	4628      	mov	r0, r5
 800c17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c182:	f000 b817 	b.w	800c1b4 <_write_r>

0800c186 <__sseek>:
 800c186:	b510      	push	{r4, lr}
 800c188:	460c      	mov	r4, r1
 800c18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c18e:	f000 f855 	bl	800c23c <_lseek_r>
 800c192:	1c43      	adds	r3, r0, #1
 800c194:	89a3      	ldrh	r3, [r4, #12]
 800c196:	bf15      	itete	ne
 800c198:	6560      	strne	r0, [r4, #84]	; 0x54
 800c19a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c19e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c1a2:	81a3      	strheq	r3, [r4, #12]
 800c1a4:	bf18      	it	ne
 800c1a6:	81a3      	strhne	r3, [r4, #12]
 800c1a8:	bd10      	pop	{r4, pc}

0800c1aa <__sclose>:
 800c1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1ae:	f000 b813 	b.w	800c1d8 <_close_r>
	...

0800c1b4 <_write_r>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	4c07      	ldr	r4, [pc, #28]	; (800c1d4 <_write_r+0x20>)
 800c1b8:	4605      	mov	r5, r0
 800c1ba:	4608      	mov	r0, r1
 800c1bc:	4611      	mov	r1, r2
 800c1be:	2200      	movs	r2, #0
 800c1c0:	6022      	str	r2, [r4, #0]
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	f7f5 ff4c 	bl	8002060 <_write>
 800c1c8:	1c43      	adds	r3, r0, #1
 800c1ca:	d102      	bne.n	800c1d2 <_write_r+0x1e>
 800c1cc:	6823      	ldr	r3, [r4, #0]
 800c1ce:	b103      	cbz	r3, 800c1d2 <_write_r+0x1e>
 800c1d0:	602b      	str	r3, [r5, #0]
 800c1d2:	bd38      	pop	{r3, r4, r5, pc}
 800c1d4:	2000752c 	.word	0x2000752c

0800c1d8 <_close_r>:
 800c1d8:	b538      	push	{r3, r4, r5, lr}
 800c1da:	4c06      	ldr	r4, [pc, #24]	; (800c1f4 <_close_r+0x1c>)
 800c1dc:	2300      	movs	r3, #0
 800c1de:	4605      	mov	r5, r0
 800c1e0:	4608      	mov	r0, r1
 800c1e2:	6023      	str	r3, [r4, #0]
 800c1e4:	f7f5 ff58 	bl	8002098 <_close>
 800c1e8:	1c43      	adds	r3, r0, #1
 800c1ea:	d102      	bne.n	800c1f2 <_close_r+0x1a>
 800c1ec:	6823      	ldr	r3, [r4, #0]
 800c1ee:	b103      	cbz	r3, 800c1f2 <_close_r+0x1a>
 800c1f0:	602b      	str	r3, [r5, #0]
 800c1f2:	bd38      	pop	{r3, r4, r5, pc}
 800c1f4:	2000752c 	.word	0x2000752c

0800c1f8 <_fstat_r>:
 800c1f8:	b538      	push	{r3, r4, r5, lr}
 800c1fa:	4c07      	ldr	r4, [pc, #28]	; (800c218 <_fstat_r+0x20>)
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	4605      	mov	r5, r0
 800c200:	4608      	mov	r0, r1
 800c202:	4611      	mov	r1, r2
 800c204:	6023      	str	r3, [r4, #0]
 800c206:	f7f5 ff53 	bl	80020b0 <_fstat>
 800c20a:	1c43      	adds	r3, r0, #1
 800c20c:	d102      	bne.n	800c214 <_fstat_r+0x1c>
 800c20e:	6823      	ldr	r3, [r4, #0]
 800c210:	b103      	cbz	r3, 800c214 <_fstat_r+0x1c>
 800c212:	602b      	str	r3, [r5, #0]
 800c214:	bd38      	pop	{r3, r4, r5, pc}
 800c216:	bf00      	nop
 800c218:	2000752c 	.word	0x2000752c

0800c21c <_isatty_r>:
 800c21c:	b538      	push	{r3, r4, r5, lr}
 800c21e:	4c06      	ldr	r4, [pc, #24]	; (800c238 <_isatty_r+0x1c>)
 800c220:	2300      	movs	r3, #0
 800c222:	4605      	mov	r5, r0
 800c224:	4608      	mov	r0, r1
 800c226:	6023      	str	r3, [r4, #0]
 800c228:	f7f5 ff52 	bl	80020d0 <_isatty>
 800c22c:	1c43      	adds	r3, r0, #1
 800c22e:	d102      	bne.n	800c236 <_isatty_r+0x1a>
 800c230:	6823      	ldr	r3, [r4, #0]
 800c232:	b103      	cbz	r3, 800c236 <_isatty_r+0x1a>
 800c234:	602b      	str	r3, [r5, #0]
 800c236:	bd38      	pop	{r3, r4, r5, pc}
 800c238:	2000752c 	.word	0x2000752c

0800c23c <_lseek_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4c07      	ldr	r4, [pc, #28]	; (800c25c <_lseek_r+0x20>)
 800c240:	4605      	mov	r5, r0
 800c242:	4608      	mov	r0, r1
 800c244:	4611      	mov	r1, r2
 800c246:	2200      	movs	r2, #0
 800c248:	6022      	str	r2, [r4, #0]
 800c24a:	461a      	mov	r2, r3
 800c24c:	f7f5 ff4b 	bl	80020e6 <_lseek>
 800c250:	1c43      	adds	r3, r0, #1
 800c252:	d102      	bne.n	800c25a <_lseek_r+0x1e>
 800c254:	6823      	ldr	r3, [r4, #0]
 800c256:	b103      	cbz	r3, 800c25a <_lseek_r+0x1e>
 800c258:	602b      	str	r3, [r5, #0]
 800c25a:	bd38      	pop	{r3, r4, r5, pc}
 800c25c:	2000752c 	.word	0x2000752c

0800c260 <_read_r>:
 800c260:	b538      	push	{r3, r4, r5, lr}
 800c262:	4c07      	ldr	r4, [pc, #28]	; (800c280 <_read_r+0x20>)
 800c264:	4605      	mov	r5, r0
 800c266:	4608      	mov	r0, r1
 800c268:	4611      	mov	r1, r2
 800c26a:	2200      	movs	r2, #0
 800c26c:	6022      	str	r2, [r4, #0]
 800c26e:	461a      	mov	r2, r3
 800c270:	f7f5 fed9 	bl	8002026 <_read>
 800c274:	1c43      	adds	r3, r0, #1
 800c276:	d102      	bne.n	800c27e <_read_r+0x1e>
 800c278:	6823      	ldr	r3, [r4, #0]
 800c27a:	b103      	cbz	r3, 800c27e <_read_r+0x1e>
 800c27c:	602b      	str	r3, [r5, #0]
 800c27e:	bd38      	pop	{r3, r4, r5, pc}
 800c280:	2000752c 	.word	0x2000752c

0800c284 <_init>:
 800c284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c286:	bf00      	nop
 800c288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c28a:	bc08      	pop	{r3}
 800c28c:	469e      	mov	lr, r3
 800c28e:	4770      	bx	lr

0800c290 <_fini>:
 800c290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c292:	bf00      	nop
 800c294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c296:	bc08      	pop	{r3}
 800c298:	469e      	mov	lr, r3
 800c29a:	4770      	bx	lr
