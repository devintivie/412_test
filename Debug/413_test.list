
413_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084ec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080086cc  080086cc  000186cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087bc  080087bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080087bc  080087bc  000187bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087c4  080087c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087c4  080087c4  000187c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087c8  080087c8  000187c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080087cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004538  20000070  0800883c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045a8  0800883c  000245a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018608  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000319f  00000000  00000000  000386a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001680  00000000  00000000  0003b848  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014e8  00000000  00000000  0003cec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025a99  00000000  00000000  0003e3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014a8d  00000000  00000000  00063e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e08ee  00000000  00000000  000788d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001591c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000670c  00000000  00000000  00159240  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	080086b4 	.word	0x080086b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	080086b4 	.word	0x080086b4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f001 fe4b 	bl	8002260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f891 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 fba9 	bl	8000d24 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d2:	f000 fb7f 	bl	8000cd4 <MX_DMA_Init>
  MX_ADC1_Init();
 80005d6:	f000 f925 	bl	8000824 <MX_ADC1_Init>
  MX_DAC_Init();
 80005da:	f000 f975 	bl	80008c8 <MX_DAC_Init>
  MX_DFSDM1_Init();
 80005de:	f000 f99d 	bl	800091c <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 80005e2:	f000 f9ff 	bl	80009e4 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 80005e6:	f000 fa61 	bl	8000aac <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 80005ea:	f000 fd57 	bl	800109c <MX_FSMC_Init>
  MX_I2S2_Init();
 80005ee:	f000 fa93 	bl	8000b18 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 80005f2:	f000 fabf 	bl	8000b74 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 80005f6:	f000 fae9 	bl	8000bcc <MX_SDIO_SD_Init>
  MX_UART10_Init();
 80005fa:	f000 fb17 	bl	8000c2c <MX_UART10_Init>
  MX_USART6_UART_Init();
 80005fe:	f000 fb3f 	bl	8000c80 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  ret = HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, Rec1Buf, AUDIO_REC);
 8000602:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000606:	492f      	ldr	r1, [pc, #188]	; (80006c4 <main+0x104>)
 8000608:	482f      	ldr	r0, [pc, #188]	; (80006c8 <main+0x108>)
 800060a:	f002 fcdf 	bl	8002fcc <HAL_DFSDM_FilterRegularStart_DMA>
 800060e:	4603      	mov	r3, r0
 8000610:	73fb      	strb	r3, [r7, #15]
  if(ret != HAL_OK)
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d002      	beq.n	800061e <main+0x5e>
  {
	  printf("DMA on filter not started");
 8000618:	482c      	ldr	r0, [pc, #176]	; (80006cc <main+0x10c>)
 800061a:	f007 f903 	bl	8007824 <iprintf>
  }

  ret = HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm2_filter0, Rec2Buf, AUDIO_REC);
 800061e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000622:	492b      	ldr	r1, [pc, #172]	; (80006d0 <main+0x110>)
 8000624:	482b      	ldr	r0, [pc, #172]	; (80006d4 <main+0x114>)
 8000626:	f002 fcd1 	bl	8002fcc <HAL_DFSDM_FilterRegularStart_DMA>
 800062a:	4603      	mov	r3, r0
 800062c:	73fb      	strb	r3, [r7, #15]
   if(ret != HAL_OK)
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <main+0x7a>
   {
 	  printf("DMA on filter not started");
 8000634:	4825      	ldr	r0, [pc, #148]	; (80006cc <main+0x10c>)
 8000636:	f007 f8f5 	bl	8007824 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int data = 1;
 800063a:	2301      	movs	r3, #1
 800063c:	60bb      	str	r3, [r7, #8]
	  HAL_DFSDM_Channel_StateTypeDef status = HAL_DFSDM_ChannelGetState(&hdfsdm1_channel1);
 800063e:	4826      	ldr	r0, [pc, #152]	; (80006d8 <main+0x118>)
 8000640:	f002 fb84 	bl	8002d4c <HAL_DFSDM_ChannelGetState>
 8000644:	4603      	mov	r3, r0
 8000646:	71fb      	strb	r3, [r7, #7]
//	  HAL_StatusTypeDef clk_pres = HAL_DFSDM_ChannelPollForCkab(&hdfsdm1_channel1, 1000);
//	  data = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0, 1);
	  printf("data = %ld\r\n", data);
 8000648:	68b9      	ldr	r1, [r7, #8]
 800064a:	4824      	ldr	r0, [pc, #144]	; (80006dc <main+0x11c>)
 800064c:	f007 f8ea 	bl	8007824 <iprintf>
	  if(DmaRecHalfBuffCplt == 1)
 8000650:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <main+0x120>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d115      	bne.n	8000684 <main+0xc4>
	  {
		  for(int i = 0; i < AUDIO_REC/2; i++)
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	e00b      	b.n	8000676 <main+0xb6>
		  {
			  Value1Buf[i] = Rec1Buf[i] & 0xffff;
 800065e:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <main+0x104>)
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000666:	b29a      	uxth	r2, r3
 8000668:	491e      	ldr	r1, [pc, #120]	; (80006e4 <main+0x124>)
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for(int i = 0; i < AUDIO_REC/2; i++)
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	3301      	adds	r3, #1
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800067c:	dbef      	blt.n	800065e <main+0x9e>
		  }
		  DmaRecHalfBuffCplt = 0;
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <main+0x120>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
	  }
	  if(DmaRecBuffCplt == 1)
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <main+0x128>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d1d6      	bne.n	800063a <main+0x7a>
	  {
		  printf("ooo wee\r\n");
 800068c:	4817      	ldr	r0, [pc, #92]	; (80006ec <main+0x12c>)
 800068e:	f007 f93d 	bl	800790c <puts>
		  for(int i = AUDIO_REC/2; i < AUDIO_REC; i++)
 8000692:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	e00b      	b.n	80006b2 <main+0xf2>
		  {
			  Value1Buf[i] = Rec1Buf[i] & 0xffff;
 800069a:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <main+0x104>)
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	490f      	ldr	r1, [pc, #60]	; (80006e4 <main+0x124>)
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for(int i = AUDIO_REC/2; i < AUDIO_REC; i++)
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	3301      	adds	r3, #1
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006b8:	dbef      	blt.n	800069a <main+0xda>
		  }
		  DmaRecBuffCplt = 0;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <main+0x128>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
  {
 80006c0:	e7bb      	b.n	800063a <main+0x7a>
 80006c2:	bf00      	nop
 80006c4:	20002120 	.word	0x20002120
 80006c8:	20003120 	.word	0x20003120
 80006cc:	080086cc 	.word	0x080086cc
 80006d0:	20001120 	.word	0x20001120
 80006d4:	20003344 	.word	0x20003344
 80006d8:	200010e8 	.word	0x200010e8
 80006dc:	080086e8 	.word	0x080086e8
 80006e0:	2000008c 	.word	0x2000008c
 80006e4:	200000e8 	.word	0x200000e8
 80006e8:	2000008d 	.word	0x2000008d
 80006ec:	080086f8 	.word	0x080086f8

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b0aa      	sub	sp, #168	; 0xa8
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80006fa:	2234      	movs	r2, #52	; 0x34
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f007 f888 	bl	8007814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	2258      	movs	r2, #88	; 0x58
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f007 f879 	bl	8007814 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b3d      	ldr	r3, [pc, #244]	; (800081c <SystemClock_Config+0x12c>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	4a3c      	ldr	r2, [pc, #240]	; (800081c <SystemClock_Config+0x12c>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000730:	6413      	str	r3, [r2, #64]	; 0x40
 8000732:	4b3a      	ldr	r3, [pc, #232]	; (800081c <SystemClock_Config+0x12c>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b37      	ldr	r3, [pc, #220]	; (8000820 <SystemClock_Config+0x130>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a36      	ldr	r2, [pc, #216]	; (8000820 <SystemClock_Config+0x130>)
 8000748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800074c:	6013      	str	r3, [r2, #0]
 800074e:	4b34      	ldr	r3, [pc, #208]	; (8000820 <SystemClock_Config+0x130>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800075a:	2301      	movs	r3, #1
 800075c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800075e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000762:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800076e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000772:	2319      	movs	r3, #25
 8000774:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000778:	23c0      	movs	r3, #192	; 0xc0
 800077a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077e:	2302      	movs	r3, #2
 8000780:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000784:	2304      	movs	r3, #4
 8000786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000794:	4618      	mov	r0, r3
 8000796:	f004 feaf 	bl	80054f8 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007a0:	f000 fd4e 	bl	8001240 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2302      	movs	r3, #2
 80007aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007be:	2103      	movs	r1, #3
 80007c0:	4618      	mov	r0, r3
 80007c2:	f004 f8f1 	bl	80049a8 <HAL_RCC_ClockConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80007cc:	f000 fd38 	bl	8001240 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 80007d0:	f240 1371 	movw	r3, #369	; 0x171
 80007d4:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80007d6:	2332      	movs	r3, #50	; 0x32
 80007d8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 80007da:	230c      	movs	r3, #12
 80007dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007de:	2302      	movs	r3, #2
 80007e0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80007e6:	2300      	movs	r3, #0
 80007e8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 80007ea:	2300      	movs	r3, #0
 80007ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80007ee:	2300      	movs	r3, #0
 80007f0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 80007f2:	2300      	movs	r3, #0
 80007f4:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 80007fa:	2300      	movs	r3, #0
 80007fc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	4618      	mov	r0, r3
 8000804:	f004 fa9c 	bl	8004d40 <HAL_RCCEx_PeriphCLKConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x122>
  {
    Error_Handler();
 800080e:	f000 fd17 	bl	8001240 <Error_Handler>
  }
}
 8000812:	bf00      	nop
 8000814:	37a8      	adds	r7, #168	; 0xa8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800
 8000820:	40007000 	.word	0x40007000

08000824 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082a:	463b      	mov	r3, r7
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000836:	4b21      	ldr	r3, [pc, #132]	; (80008bc <MX_ADC1_Init+0x98>)
 8000838:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <MX_ADC1_Init+0x9c>)
 800083a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <MX_ADC1_Init+0x98>)
 800083e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000842:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000844:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <MX_ADC1_Init+0x98>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800084a:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <MX_ADC1_Init+0x98>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000850:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_ADC1_Init+0x98>)
 8000852:	2200      	movs	r2, #0
 8000854:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <MX_ADC1_Init+0x98>)
 8000858:	2200      	movs	r2, #0
 800085a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_ADC1_Init+0x98>)
 8000860:	2200      	movs	r2, #0
 8000862:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_ADC1_Init+0x98>)
 8000866:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <MX_ADC1_Init+0xa0>)
 8000868:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_ADC1_Init+0x98>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_ADC1_Init+0x98>)
 8000872:	2201      	movs	r2, #1
 8000874:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_ADC1_Init+0x98>)
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_ADC1_Init+0x98>)
 8000880:	2201      	movs	r2, #1
 8000882:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000884:	480d      	ldr	r0, [pc, #52]	; (80008bc <MX_ADC1_Init+0x98>)
 8000886:	f001 fd7f 	bl	8002388 <HAL_ADC_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000890:	f000 fcd6 	bl	8001240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000894:	230a      	movs	r3, #10
 8000896:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000898:	2301      	movs	r3, #1
 800089a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a0:	463b      	mov	r3, r7
 80008a2:	4619      	mov	r1, r3
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_ADC1_Init+0x98>)
 80008a6:	f001 fdb3 	bl	8002410 <HAL_ADC_ConfigChannel>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008b0:	f000 fcc6 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	2000323c 	.word	0x2000323c
 80008c0:	40012000 	.word	0x40012000
 80008c4:	0f000001 	.word	0x0f000001

080008c8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008ce:	463b      	mov	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_DAC_Init+0x4c>)
 80008d8:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <MX_DAC_Init+0x50>)
 80008da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_DAC_Init+0x4c>)
 80008de:	f002 f8d6 	bl	8002a8e <HAL_DAC_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80008e8:	f000 fcaa 	bl	8001240 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	4619      	mov	r1, r3
 80008fa:	4806      	ldr	r0, [pc, #24]	; (8000914 <MX_DAC_Init+0x4c>)
 80008fc:	f002 f8e9 	bl	8002ad2 <HAL_DAC_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000906:	f000 fc9b 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200032e4 	.word	0x200032e4
 8000918:	40007400 	.word	0x40007400

0800091c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000920:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <MX_DFSDM1_Init+0xb4>)
 8000922:	4a2c      	ldr	r2, [pc, #176]	; (80009d4 <MX_DFSDM1_Init+0xb8>)
 8000924:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000926:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <MX_DFSDM1_Init+0xb4>)
 8000928:	2200      	movs	r2, #0
 800092a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 800092c:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <MX_DFSDM1_Init+0xb4>)
 800092e:	2200      	movs	r2, #0
 8000930:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000932:	4b27      	ldr	r3, [pc, #156]	; (80009d0 <MX_DFSDM1_Init+0xb4>)
 8000934:	2201      	movs	r2, #1
 8000936:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 8000938:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <MX_DFSDM1_Init+0xb4>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 50;
 800093e:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <MX_DFSDM1_Init+0xb4>)
 8000940:	2232      	movs	r2, #50	; 0x32
 8000942:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <MX_DFSDM1_Init+0xb4>)
 8000946:	2201      	movs	r2, #1
 8000948:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 800094a:	4821      	ldr	r0, [pc, #132]	; (80009d0 <MX_DFSDM1_Init+0xb4>)
 800094c:	f002 fa0c 	bl	8002d68 <HAL_DFSDM_FilterInit>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_DFSDM1_Init+0x3e>
  {
    Error_Handler();
 8000956:	f000 fc73 	bl	8001240 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_DFSDM1_Init+0xbc>)
 800095c:	4a1f      	ldr	r2, [pc, #124]	; (80009dc <MX_DFSDM1_Init+0xc0>)
 800095e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_DFSDM1_Init+0xbc>)
 8000962:	2201      	movs	r2, #1
 8000964:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_DFSDM1_Init+0xbc>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 40;
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_DFSDM1_Init+0xbc>)
 800096e:	2228      	movs	r2, #40	; 0x28
 8000970:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_DFSDM1_Init+0xbc>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_DFSDM1_Init+0xbc>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_DFSDM1_Init+0xbc>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_DFSDM1_Init+0xbc>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_DFSDM1_Init+0xbc>)
 800098c:	2204      	movs	r2, #4
 800098e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_DFSDM1_Init+0xbc>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_DFSDM1_Init+0xbc>)
 8000998:	2201      	movs	r2, #1
 800099a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_DFSDM1_Init+0xbc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <MX_DFSDM1_Init+0xbc>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80009a8:	480b      	ldr	r0, [pc, #44]	; (80009d8 <MX_DFSDM1_Init+0xbc>)
 80009aa:	f002 f8df 	bl	8002b6c <HAL_DFSDM_ChannelInit>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_DFSDM1_Init+0x9c>
  {
    Error_Handler();
 80009b4:	f000 fc44 	bl	8001240 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80009b8:	2201      	movs	r2, #1
 80009ba:	4909      	ldr	r1, [pc, #36]	; (80009e0 <MX_DFSDM1_Init+0xc4>)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_DFSDM1_Init+0xb4>)
 80009be:	f002 fabf 	bl	8002f40 <HAL_DFSDM_FilterConfigRegChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_DFSDM1_Init+0xb0>
  {
    Error_Handler();
 80009c8:	f000 fc3a 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20003120 	.word	0x20003120
 80009d4:	40016100 	.word	0x40016100
 80009d8:	200010e8 	.word	0x200010e8
 80009dc:	40016020 	.word	0x40016020
 80009e0:	00010002 	.word	0x00010002

080009e4 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_filter0.Instance = DFSDM2_Filter0;
 80009e8:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <MX_DFSDM2_Init+0xb4>)
 80009ea:	4a2c      	ldr	r2, [pc, #176]	; (8000a9c <MX_DFSDM2_Init+0xb8>)
 80009ec:	601a      	str	r2, [r3, #0]
  hdfsdm2_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80009ee:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <MX_DFSDM2_Init+0xb4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	605a      	str	r2, [r3, #4]
  hdfsdm2_filter0.Init.RegularParam.FastMode = ENABLE;
 80009f4:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <MX_DFSDM2_Init+0xb4>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	721a      	strb	r2, [r3, #8]
  hdfsdm2_filter0.Init.RegularParam.DmaMode = ENABLE;
 80009fa:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <MX_DFSDM2_Init+0xb4>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	725a      	strb	r2, [r3, #9]
  hdfsdm2_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 8000a00:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <MX_DFSDM2_Init+0xb4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  hdfsdm2_filter0.Init.FilterParam.Oversampling = 50;
 8000a06:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <MX_DFSDM2_Init+0xb4>)
 8000a08:	2232      	movs	r2, #50	; 0x32
 8000a0a:	621a      	str	r2, [r3, #32]
  hdfsdm2_filter0.Init.FilterParam.IntOversampling = 1;
 8000a0c:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <MX_DFSDM2_Init+0xb4>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm2_filter0) != HAL_OK)
 8000a12:	4821      	ldr	r0, [pc, #132]	; (8000a98 <MX_DFSDM2_Init+0xb4>)
 8000a14:	f002 f9a8 	bl	8002d68 <HAL_DFSDM_FilterInit>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_DFSDM2_Init+0x3e>
  {
    Error_Handler();
 8000a1e:	f000 fc0f 	bl	8001240 <Error_Handler>
  }
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8000a22:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <MX_DFSDM2_Init+0xbc>)
 8000a24:	4a1f      	ldr	r2, [pc, #124]	; (8000aa4 <MX_DFSDM2_Init+0xc0>)
 8000a26:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_DFSDM2_Init+0xbc>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <MX_DFSDM2_Init+0xbc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 40;
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_DFSDM2_Init+0xbc>)
 8000a36:	2228      	movs	r2, #40	; 0x28
 8000a38:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_DFSDM2_Init+0xbc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_DFSDM2_Init+0xbc>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_DFSDM2_Init+0xbc>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_DFSDM2_Init+0xbc>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_DFSDM2_Init+0xbc>)
 8000a54:	2204      	movs	r2, #4
 8000a56:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_DFSDM2_Init+0xbc>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_DFSDM2_Init+0xbc>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_DFSDM2_Init+0xbc>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <MX_DFSDM2_Init+0xbc>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 8000a70:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <MX_DFSDM2_Init+0xbc>)
 8000a72:	f002 f87b 	bl	8002b6c <HAL_DFSDM_ChannelInit>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_DFSDM2_Init+0x9c>
  {
    Error_Handler();
 8000a7c:	f000 fbe0 	bl	8001240 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm2_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000a80:	2201      	movs	r2, #1
 8000a82:	4909      	ldr	r1, [pc, #36]	; (8000aa8 <MX_DFSDM2_Init+0xc4>)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_DFSDM2_Init+0xb4>)
 8000a86:	f002 fa5b 	bl	8002f40 <HAL_DFSDM_FilterConfigRegChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_DFSDM2_Init+0xb0>
  {
    Error_Handler();
 8000a90:	f000 fbd6 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20003344 	.word	0x20003344
 8000a9c:	40016500 	.word	0x40016500
 8000aa0:	20003204 	.word	0x20003204
 8000aa4:	40016420 	.word	0x40016420
 8000aa8:	00010002 	.word	0x00010002

08000aac <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <MX_FMPI2C1_Init+0x60>)
 8000ab2:	4a17      	ldr	r2, [pc, #92]	; (8000b10 <MX_FMPI2C1_Init+0x64>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x20303E5D;
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_FMPI2C1_Init+0x60>)
 8000ab8:	4a16      	ldr	r2, [pc, #88]	; (8000b14 <MX_FMPI2C1_Init+0x68>)
 8000aba:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_FMPI2C1_Init+0x60>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_FMPI2C1_Init+0x60>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_FMPI2C1_Init+0x60>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_FMPI2C1_Init+0x60>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <MX_FMPI2C1_Init+0x60>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_FMPI2C1_Init+0x60>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <MX_FMPI2C1_Init+0x60>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000ae6:	4809      	ldr	r0, [pc, #36]	; (8000b0c <MX_FMPI2C1_Init+0x60>)
 8000ae8:	f002 ff54 	bl	8003994 <HAL_FMPI2C_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000af2:	f000 fba5 	bl	8001240 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_FMPI2C1_Init+0x60>)
 8000afa:	f002 ffda 	bl	8003ab2 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000b04:	f000 fb9c 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200032f8 	.word	0x200032f8
 8000b10:	40006000 	.word	0x40006000
 8000b14:	20303e5d 	.word	0x20303e5d

08000b18 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_I2S2_Init+0x54>)
 8000b1e:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <MX_I2S2_Init+0x58>)
 8000b20:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_I2S2_Init+0x54>)
 8000b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b28:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <MX_I2S2_Init+0x54>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_I2S2_Init+0x54>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <MX_I2S2_Init+0x54>)
 8000b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b3c:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_I2S2_Init+0x54>)
 8000b40:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000b44:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_I2S2_Init+0x54>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <MX_I2S2_Init+0x54>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_I2S2_Init+0x54>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_I2S2_Init+0x54>)
 8000b5a:	f003 f9a1 	bl	8003ea0 <HAL_I2S_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000b64:	f000 fb6c 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000450c 	.word	0x2000450c
 8000b70:	40003800 	.word	0x40003800

08000b74 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_QUADSPI_Init+0x50>)
 8000b7a:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <MX_QUADSPI_Init+0x54>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_QUADSPI_Init+0x50>)
 8000b80:	22ff      	movs	r2, #255	; 0xff
 8000b82:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_QUADSPI_Init+0x50>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_QUADSPI_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_QUADSPI_Init+0x50>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_QUADSPI_Init+0x50>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_QUADSPI_Init+0x50>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_QUADSPI_Init+0x50>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_QUADSPI_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_QUADSPI_Init+0x50>)
 8000bb0:	f003 fe38 	bl	8004824 <HAL_QSPI_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000bba:	f000 fb41 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20004554 	.word	0x20004554
 8000bc8:	a0001000 	.word	0xa0001000

08000bcc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_SDIO_SD_Init+0x58>)
 8000bd2:	4a15      	ldr	r2, [pc, #84]	; (8000c28 <MX_SDIO_SD_Init+0x5c>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_SDIO_SD_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_SDIO_SD_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_SDIO_SD_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_SDIO_SD_Init+0x58>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <MX_SDIO_SD_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_SDIO_SD_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000bfa:	480a      	ldr	r0, [pc, #40]	; (8000c24 <MX_SDIO_SD_Init+0x58>)
 8000bfc:	f004 febe 	bl	800597c <HAL_SD_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000c06:	f000 fb1b 	bl	8001240 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000c0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_SDIO_SD_Init+0x58>)
 8000c10:	f005 f8e8 	bl	8005de4 <HAL_SD_ConfigWideBusOperation>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000c1a:	f000 fb11 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20003448 	.word	0x20003448
 8000c28:	40012c00 	.word	0x40012c00

08000c2c <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_UART10_Init+0x4c>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <MX_UART10_Init+0x50>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <MX_UART10_Init+0x4c>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_UART10_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_UART10_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_UART10_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_UART10_Init+0x4c>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_UART10_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_UART10_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_UART10_Init+0x4c>)
 8000c64:	f005 fc3a 	bl	80064dc <HAL_UART_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000c6e:	f000 fae7 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20003174 	.word	0x20003174
 8000c7c:	40011c00 	.word	0x40011c00

08000c80 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_USART6_UART_Init+0x4c>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <MX_USART6_UART_Init+0x50>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <MX_USART6_UART_Init+0x4c>)
 8000c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c90:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_USART6_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_USART6_UART_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_USART6_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_USART6_UART_Init+0x4c>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_USART6_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_USART6_UART_Init+0x4c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_USART6_UART_Init+0x4c>)
 8000cb8:	f005 fc10 	bl	80064dc <HAL_UART_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000cc2:	f000 fabd 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200034cc 	.word	0x200034cc
 8000cd0:	40011400 	.word	0x40011400

08000cd4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <MX_DMA_Init+0x4c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <MX_DMA_Init+0x4c>)
 8000ce4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <MX_DMA_Init+0x4c>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2038      	movs	r0, #56	; 0x38
 8000cfc:	f001 fe91 	bl	8002a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d00:	2038      	movs	r0, #56	; 0x38
 8000d02:	f001 feaa 	bl	8002a5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	203c      	movs	r0, #60	; 0x3c
 8000d0c:	f001 fe89 	bl	8002a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000d10:	203c      	movs	r0, #60	; 0x3c
 8000d12:	f001 fea2 	bl	8002a5a <HAL_NVIC_EnableIRQ>

}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800

08000d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08e      	sub	sp, #56	; 0x38
 8000d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
 8000d3e:	4bb0      	ldr	r3, [pc, #704]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4aaf      	ldr	r2, [pc, #700]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000d44:	f043 0310 	orr.w	r3, r3, #16
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4bad      	ldr	r3, [pc, #692]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0310 	and.w	r3, r3, #16
 8000d52:	623b      	str	r3, [r7, #32]
 8000d54:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
 8000d5a:	4ba9      	ldr	r3, [pc, #676]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4aa8      	ldr	r2, [pc, #672]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4ba6      	ldr	r3, [pc, #664]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	61fb      	str	r3, [r7, #28]
 8000d70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	61bb      	str	r3, [r7, #24]
 8000d76:	4ba2      	ldr	r3, [pc, #648]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4aa1      	ldr	r2, [pc, #644]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000d7c:	f043 0320 	orr.w	r3, r3, #32
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b9f      	ldr	r3, [pc, #636]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0320 	and.w	r3, r3, #32
 8000d8a:	61bb      	str	r3, [r7, #24]
 8000d8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	4b9b      	ldr	r3, [pc, #620]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a9a      	ldr	r2, [pc, #616]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b98      	ldr	r3, [pc, #608]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	4b94      	ldr	r3, [pc, #592]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a93      	ldr	r2, [pc, #588]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b91      	ldr	r3, [pc, #580]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	4b8d      	ldr	r3, [pc, #564]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a8c      	ldr	r2, [pc, #560]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b8a      	ldr	r3, [pc, #552]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	4b86      	ldr	r3, [pc, #536]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a85      	ldr	r2, [pc, #532]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b83      	ldr	r3, [pc, #524]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	4b7f      	ldr	r3, [pc, #508]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a7e      	ldr	r2, [pc, #504]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000e08:	f043 0308 	orr.w	r3, r3, #8
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b7c      	ldr	r3, [pc, #496]	; (8001000 <MX_GPIO_Init+0x2dc>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0308 	and.w	r3, r3, #8
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2138      	movs	r1, #56	; 0x38
 8000e1e:	4879      	ldr	r0, [pc, #484]	; (8001004 <MX_GPIO_Init+0x2e0>)
 8000e20:	f003 f824 	bl	8003e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2120      	movs	r1, #32
 8000e28:	4877      	ldr	r0, [pc, #476]	; (8001008 <MX_GPIO_Init+0x2e4>)
 8000e2a:	f003 f81f 	bl	8003e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000e34:	4875      	ldr	r0, [pc, #468]	; (800100c <MX_GPIO_Init+0x2e8>)
 8000e36:	f003 f819 	bl	8003e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000e40:	4873      	ldr	r0, [pc, #460]	; (8001010 <MX_GPIO_Init+0x2ec>)
 8000e42:	f003 f813 	bl	8003e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000e46:	2338      	movs	r3, #56	; 0x38
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4869      	ldr	r0, [pc, #420]	; (8001004 <MX_GPIO_Init+0x2e0>)
 8000e5e:	f002 fe73 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000e62:	2340      	movs	r3, #64	; 0x40
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000e72:	2303      	movs	r3, #3
 8000e74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4861      	ldr	r0, [pc, #388]	; (8001004 <MX_GPIO_Init+0x2e0>)
 8000e7e:	f002 fe63 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e94:	2302      	movs	r3, #2
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	485d      	ldr	r0, [pc, #372]	; (8001014 <MX_GPIO_Init+0x2f0>)
 8000ea0:	f002 fe52 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea8:	4b5b      	ldr	r3, [pc, #364]	; (8001018 <MX_GPIO_Init+0x2f4>)
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4854      	ldr	r0, [pc, #336]	; (8001008 <MX_GPIO_Init+0x2e4>)
 8000eb8:	f002 fe46 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec0:	4b55      	ldr	r3, [pc, #340]	; (8001018 <MX_GPIO_Init+0x2f4>)
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4853      	ldr	r0, [pc, #332]	; (800101c <MX_GPIO_Init+0x2f8>)
 8000ed0:	f002 fe3a 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000ed4:	2320      	movs	r3, #32
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4847      	ldr	r0, [pc, #284]	; (8001008 <MX_GPIO_Init+0x2e4>)
 8000eec:	f002 fe2c 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f00:	2302      	movs	r3, #2
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4840      	ldr	r0, [pc, #256]	; (800100c <MX_GPIO_Init+0x2e8>)
 8000f0c:	f002 fe1c 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000f10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f16:	4b40      	ldr	r3, [pc, #256]	; (8001018 <MX_GPIO_Init+0x2f4>)
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	4619      	mov	r1, r3
 8000f24:	483b      	ldr	r0, [pc, #236]	; (8001014 <MX_GPIO_Init+0x2f0>)
 8000f26:	f002 fe0f 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000f2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f30:	2312      	movs	r3, #18
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f44:	4619      	mov	r1, r3
 8000f46:	4831      	ldr	r0, [pc, #196]	; (800100c <MX_GPIO_Init+0x2e8>)
 8000f48:	f002 fdfe 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8000f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000f5e:	2307      	movs	r3, #7
 8000f60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f66:	4619      	mov	r1, r3
 8000f68:	4828      	ldr	r0, [pc, #160]	; (800100c <MX_GPIO_Init+0x2e8>)
 8000f6a:	f002 fded 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8000f6e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f84:	4619      	mov	r1, r3
 8000f86:	4821      	ldr	r0, [pc, #132]	; (800100c <MX_GPIO_Init+0x2e8>)
 8000f88:	f002 fdde 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8000f8c:	f248 0380 	movw	r3, #32896	; 0x8080
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f92:	4b21      	ldr	r3, [pc, #132]	; (8001018 <MX_GPIO_Init+0x2f4>)
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	481b      	ldr	r0, [pc, #108]	; (8001010 <MX_GPIO_Init+0x2ec>)
 8000fa2:	f002 fdd1 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 8000fa6:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4814      	ldr	r0, [pc, #80]	; (8001010 <MX_GPIO_Init+0x2ec>)
 8000fc0:	f002 fdc2 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000fc4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fd6:	230a      	movs	r3, #10
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480e      	ldr	r0, [pc, #56]	; (800101c <MX_GPIO_Init+0x2f8>)
 8000fe2:	f002 fdb1 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8000fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8000ffc:	e010      	b.n	8001020 <MX_GPIO_Init+0x2fc>
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40021000 	.word	0x40021000
 8001008:	40020800 	.word	0x40020800
 800100c:	40020400 	.word	0x40020400
 8001010:	40021800 	.word	0x40021800
 8001014:	40021400 	.word	0x40021400
 8001018:	10110000 	.word	0x10110000
 800101c:	40020000 	.word	0x40020000
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001024:	4619      	mov	r1, r3
 8001026:	481a      	ldr	r0, [pc, #104]	; (8001090 <MX_GPIO_Init+0x36c>)
 8001028:	f002 fd8e 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800102c:	2330      	movs	r3, #48	; 0x30
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800103c:	2306      	movs	r3, #6
 800103e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001044:	4619      	mov	r1, r3
 8001046:	4813      	ldr	r0, [pc, #76]	; (8001094 <MX_GPIO_Init+0x370>)
 8001048:	f002 fd7e 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800104c:	2340      	movs	r3, #64	; 0x40
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_GPIO_Init+0x374>)
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	4619      	mov	r1, r3
 800105e:	480d      	ldr	r0, [pc, #52]	; (8001094 <MX_GPIO_Init+0x370>)
 8001060:	f002 fd72 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001064:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001076:	2302      	movs	r3, #2
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4619      	mov	r1, r3
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <MX_GPIO_Init+0x370>)
 8001082:	f002 fd61 	bl	8003b48 <HAL_GPIO_Init>

}
 8001086:	bf00      	nop
 8001088:	3738      	adds	r7, #56	; 0x38
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40020000 	.word	0x40020000
 8001094:	40020400 	.word	0x40020400
 8001098:	10110000 	.word	0x10110000

0800109c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
 80010b0:	615a      	str	r2, [r3, #20]
 80010b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80010b4:	4b4f      	ldr	r3, [pc, #316]	; (80011f4 <MX_FSMC_Init+0x158>)
 80010b6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80010ba:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80010bc:	4b4d      	ldr	r3, [pc, #308]	; (80011f4 <MX_FSMC_Init+0x158>)
 80010be:	4a4e      	ldr	r2, [pc, #312]	; (80011f8 <MX_FSMC_Init+0x15c>)
 80010c0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80010c2:	4b4c      	ldr	r3, [pc, #304]	; (80011f4 <MX_FSMC_Init+0x158>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80010c8:	4b4a      	ldr	r3, [pc, #296]	; (80011f4 <MX_FSMC_Init+0x158>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80010ce:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <MX_FSMC_Init+0x158>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80010d4:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <MX_FSMC_Init+0x158>)
 80010d6:	2210      	movs	r2, #16
 80010d8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80010da:	4b46      	ldr	r3, [pc, #280]	; (80011f4 <MX_FSMC_Init+0x158>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80010e0:	4b44      	ldr	r3, [pc, #272]	; (80011f4 <MX_FSMC_Init+0x158>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80010e6:	4b43      	ldr	r3, [pc, #268]	; (80011f4 <MX_FSMC_Init+0x158>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 80010ec:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <MX_FSMC_Init+0x158>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80010f2:	4b40      	ldr	r3, [pc, #256]	; (80011f4 <MX_FSMC_Init+0x158>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80010f8:	4b3e      	ldr	r3, [pc, #248]	; (80011f4 <MX_FSMC_Init+0x158>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80010fe:	4b3d      	ldr	r3, [pc, #244]	; (80011f4 <MX_FSMC_Init+0x158>)
 8001100:	2200      	movs	r2, #0
 8001102:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001104:	4b3b      	ldr	r3, [pc, #236]	; (80011f4 <MX_FSMC_Init+0x158>)
 8001106:	2200      	movs	r2, #0
 8001108:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800110a:	4b3a      	ldr	r3, [pc, #232]	; (80011f4 <MX_FSMC_Init+0x158>)
 800110c:	2200      	movs	r2, #0
 800110e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001110:	4b38      	ldr	r3, [pc, #224]	; (80011f4 <MX_FSMC_Init+0x158>)
 8001112:	2200      	movs	r2, #0
 8001114:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001116:	4b37      	ldr	r3, [pc, #220]	; (80011f4 <MX_FSMC_Init+0x158>)
 8001118:	2200      	movs	r2, #0
 800111a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800111c:	230f      	movs	r3, #15
 800111e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001120:	230f      	movs	r3, #15
 8001122:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001124:	23ff      	movs	r3, #255	; 0xff
 8001126:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001128:	230f      	movs	r3, #15
 800112a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800112c:	2310      	movs	r3, #16
 800112e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001130:	2311      	movs	r3, #17
 8001132:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2200      	movs	r2, #0
 800113c:	4619      	mov	r1, r3
 800113e:	482d      	ldr	r0, [pc, #180]	; (80011f4 <MX_FSMC_Init+0x158>)
 8001140:	f005 f988 	bl	8006454 <HAL_SRAM_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 800114a:	f000 f879 	bl	8001240 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 800114e:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <MX_FSMC_Init+0x160>)
 8001150:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001154:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001156:	4b29      	ldr	r3, [pc, #164]	; (80011fc <MX_FSMC_Init+0x160>)
 8001158:	4a27      	ldr	r2, [pc, #156]	; (80011f8 <MX_FSMC_Init+0x15c>)
 800115a:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 800115c:	4b27      	ldr	r3, [pc, #156]	; (80011fc <MX_FSMC_Init+0x160>)
 800115e:	2204      	movs	r2, #4
 8001160:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001162:	4b26      	ldr	r3, [pc, #152]	; (80011fc <MX_FSMC_Init+0x160>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <MX_FSMC_Init+0x160>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <MX_FSMC_Init+0x160>)
 8001170:	2210      	movs	r2, #16
 8001172:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001174:	4b21      	ldr	r3, [pc, #132]	; (80011fc <MX_FSMC_Init+0x160>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <MX_FSMC_Init+0x160>)
 800117c:	2200      	movs	r2, #0
 800117e:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <MX_FSMC_Init+0x160>)
 8001182:	2200      	movs	r2, #0
 8001184:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <MX_FSMC_Init+0x160>)
 8001188:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_FSMC_Init+0x160>)
 8001190:	2200      	movs	r2, #0
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_FSMC_Init+0x160>)
 8001196:	2200      	movs	r2, #0
 8001198:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_FSMC_Init+0x160>)
 800119c:	2200      	movs	r2, #0
 800119e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_FSMC_Init+0x160>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <MX_FSMC_Init+0x160>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <MX_FSMC_Init+0x160>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_FSMC_Init+0x160>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80011b8:	230f      	movs	r3, #15
 80011ba:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80011bc:	230f      	movs	r3, #15
 80011be:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80011c0:	23ff      	movs	r3, #255	; 0xff
 80011c2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80011c4:	230f      	movs	r3, #15
 80011c6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80011c8:	2310      	movs	r3, #16
 80011ca:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80011cc:	2311      	movs	r3, #17
 80011ce:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2200      	movs	r2, #0
 80011d8:	4619      	mov	r1, r3
 80011da:	4808      	ldr	r0, [pc, #32]	; (80011fc <MX_FSMC_Init+0x160>)
 80011dc:	f005 f93a 	bl	8006454 <HAL_SRAM_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_FSMC_Init+0x14e>
  {
    Error_Handler( );
 80011e6:	f000 f82b 	bl	8001240 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80011ea:	bf00      	nop
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200031b4 	.word	0x200031b4
 80011f8:	a0000104 	.word	0xa0000104
 80011fc:	200033f8 	.word	0x200033f8

08001200 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

		DmaRecHalfBuffCplt=1;
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]


}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	2000008c 	.word	0x2000008c

08001220 <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	DmaRecBuffCplt=1;
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 800122a:	2201      	movs	r2, #1
 800122c:	701a      	strb	r2, [r3, #0]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	2000008d 	.word	0x2000008d

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <HAL_MspInit+0x4c>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a0f      	ldr	r2, [pc, #60]	; (800129c <HAL_MspInit+0x4c>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <HAL_MspInit+0x4c>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_MspInit+0x4c>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	4a08      	ldr	r2, [pc, #32]	; (800129c <HAL_MspInit+0x4c>)
 800127c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001280:	6413      	str	r3, [r2, #64]	; 0x40
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_MspInit+0x4c>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800

080012a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08c      	sub	sp, #48	; 0x30
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a31      	ldr	r2, [pc, #196]	; (8001384 <HAL_ADC_MspInit+0xe4>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d15b      	bne.n	800137a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
 80012c6:	4b30      	ldr	r3, [pc, #192]	; (8001388 <HAL_ADC_MspInit+0xe8>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a2f      	ldr	r2, [pc, #188]	; (8001388 <HAL_ADC_MspInit+0xe8>)
 80012cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <HAL_ADC_MspInit+0xe8>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012da:	61bb      	str	r3, [r7, #24]
 80012dc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	4b29      	ldr	r3, [pc, #164]	; (8001388 <HAL_ADC_MspInit+0xe8>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a28      	ldr	r2, [pc, #160]	; (8001388 <HAL_ADC_MspInit+0xe8>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b26      	ldr	r3, [pc, #152]	; (8001388 <HAL_ADC_MspInit+0xe8>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b22      	ldr	r3, [pc, #136]	; (8001388 <HAL_ADC_MspInit+0xe8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a21      	ldr	r2, [pc, #132]	; (8001388 <HAL_ADC_MspInit+0xe8>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <HAL_ADC_MspInit+0xe8>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <HAL_ADC_MspInit+0xe8>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a1a      	ldr	r2, [pc, #104]	; (8001388 <HAL_ADC_MspInit+0xe8>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <HAL_ADC_MspInit+0xe8>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 8001332:	2311      	movs	r3, #17
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001336:	2303      	movs	r3, #3
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	4811      	ldr	r0, [pc, #68]	; (800138c <HAL_ADC_MspInit+0xec>)
 8001346:	f002 fbff 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 800134a:	2326      	movs	r3, #38	; 0x26
 800134c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134e:	2303      	movs	r3, #3
 8001350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	480c      	ldr	r0, [pc, #48]	; (8001390 <HAL_ADC_MspInit+0xf0>)
 800135e:	f002 fbf3 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 8001362:	2302      	movs	r3, #2
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001366:	2303      	movs	r3, #3
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	4619      	mov	r1, r3
 8001374:	4807      	ldr	r0, [pc, #28]	; (8001394 <HAL_ADC_MspInit+0xf4>)
 8001376:	f002 fbe7 	bl	8003b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800137a:	bf00      	nop
 800137c:	3730      	adds	r7, #48	; 0x30
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40012000 	.word	0x40012000
 8001388:	40023800 	.word	0x40023800
 800138c:	40020800 	.word	0x40020800
 8001390:	40020000 	.word	0x40020000
 8001394:	40020400 	.word	0x40020400

08001398 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a17      	ldr	r2, [pc, #92]	; (8001414 <HAL_DAC_MspInit+0x7c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d127      	bne.n	800140a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <HAL_DAC_MspInit+0x80>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a15      	ldr	r2, [pc, #84]	; (8001418 <HAL_DAC_MspInit+0x80>)
 80013c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_DAC_MspInit+0x80>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_DAC_MspInit+0x80>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <HAL_DAC_MspInit+0x80>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_DAC_MspInit+0x80>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 80013f2:	2310      	movs	r3, #16
 80013f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f6:	2303      	movs	r3, #3
 80013f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <HAL_DAC_MspInit+0x84>)
 8001406:	f002 fb9f 	bl	8003b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800140a:	bf00      	nop
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40007400 	.word	0x40007400
 8001418:	40023800 	.word	0x40023800
 800141c:	40020000 	.word	0x40020000

08001420 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08e      	sub	sp, #56	; 0x38
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_FILTER_INSTANCE(hdfsdm_filter->Instance))&&(DFSDM1_Init == 0))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a32      	ldr	r2, [pc, #200]	; (8001508 <HAL_DFSDM_FilterMspInit+0xe8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d004      	beq.n	800144c <HAL_DFSDM_FilterMspInit+0x2c>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a31      	ldr	r2, [pc, #196]	; (800150c <HAL_DFSDM_FilterMspInit+0xec>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d16b      	bne.n	8001524 <HAL_DFSDM_FilterMspInit+0x104>
 800144c:	4b30      	ldr	r3, [pc, #192]	; (8001510 <HAL_DFSDM_FilterMspInit+0xf0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d167      	bne.n	8001524 <HAL_DFSDM_FilterMspInit+0x104>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001454:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <HAL_DFSDM_FilterMspInit+0xf4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	4a2e      	ldr	r2, [pc, #184]	; (8001514 <HAL_DFSDM_FilterMspInit+0xf4>)
 800145c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800145e:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <HAL_DFSDM_FilterMspInit+0xf4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d10d      	bne.n	8001482 <HAL_DFSDM_FilterMspInit+0x62>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
 800146a:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <HAL_DFSDM_FilterMspInit+0xf8>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a2a      	ldr	r2, [pc, #168]	; (8001518 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001470:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b28      	ldr	r3, [pc, #160]	; (8001518 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800147e:	623b      	str	r3, [r7, #32]
 8001480:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	4b24      	ldr	r3, [pc, #144]	; (8001518 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a23      	ldr	r2, [pc, #140]	; (8001518 <HAL_DFSDM_FilterMspInit+0xf8>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <HAL_DFSDM_FilterMspInit+0xf8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <HAL_DFSDM_FilterMspInit+0xf8>)
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <HAL_DFSDM_FilterMspInit+0xf8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	61bb      	str	r3, [r7, #24]
 80014b8:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration    
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 80014ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80014cc:	2306      	movs	r3, #6
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	4619      	mov	r1, r3
 80014d6:	4811      	ldr	r0, [pc, #68]	; (800151c <HAL_DFSDM_FilterMspInit+0xfc>)
 80014d8:	f002 fb36 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 80014dc:	2340      	movs	r3, #64	; 0x40
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80014ec:	2306      	movs	r3, #6
 80014ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f4:	4619      	mov	r1, r3
 80014f6:	480a      	ldr	r0, [pc, #40]	; (8001520 <HAL_DFSDM_FilterMspInit+0x100>)
 80014f8:	f002 fb26 	bl	8003b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <HAL_DFSDM_FilterMspInit+0xf0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	4a03      	ldr	r2, [pc, #12]	; (8001510 <HAL_DFSDM_FilterMspInit+0xf0>)
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e091      	b.n	800162c <HAL_DFSDM_FilterMspInit+0x20c>
 8001508:	40016100 	.word	0x40016100
 800150c:	40016180 	.word	0x40016180
 8001510:	20000098 	.word	0x20000098
 8001514:	20000090 	.word	0x20000090
 8001518:	40023800 	.word	0x40023800
 800151c:	40020000 	.word	0x40020000
 8001520:	40020c00 	.word	0x40020c00
  }
  else if(!(IS_DFSDM1_FILTER_INSTANCE(hdfsdm_filter->Instance))&&(DFSDM2_Init == 0))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a87      	ldr	r2, [pc, #540]	; (8001748 <HAL_DFSDM_FilterMspInit+0x328>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d07e      	beq.n	800162c <HAL_DFSDM_FilterMspInit+0x20c>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a86      	ldr	r2, [pc, #536]	; (800174c <HAL_DFSDM_FilterMspInit+0x32c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d079      	beq.n	800162c <HAL_DFSDM_FilterMspInit+0x20c>
 8001538:	4b85      	ldr	r3, [pc, #532]	; (8001750 <HAL_DFSDM_FilterMspInit+0x330>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d175      	bne.n	800162c <HAL_DFSDM_FilterMspInit+0x20c>
  {
  /* USER CODE BEGIN DFSDM2_MspInit 0 */

  /* USER CODE END DFSDM2_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM2_CLK_ENABLED++;
 8001540:	4b84      	ldr	r3, [pc, #528]	; (8001754 <HAL_DFSDM_FilterMspInit+0x334>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	4a83      	ldr	r2, [pc, #524]	; (8001754 <HAL_DFSDM_FilterMspInit+0x334>)
 8001548:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM2_CLK_ENABLED==1){
 800154a:	4b82      	ldr	r3, [pc, #520]	; (8001754 <HAL_DFSDM_FilterMspInit+0x334>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d10d      	bne.n	800156e <HAL_DFSDM_FilterMspInit+0x14e>
      __HAL_RCC_DFSDM2_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	4b80      	ldr	r3, [pc, #512]	; (8001758 <HAL_DFSDM_FilterMspInit+0x338>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a7f      	ldr	r2, [pc, #508]	; (8001758 <HAL_DFSDM_FilterMspInit+0x338>)
 800155c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b7d      	ldr	r3, [pc, #500]	; (8001758 <HAL_DFSDM_FilterMspInit+0x338>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697b      	ldr	r3, [r7, #20]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b79      	ldr	r3, [pc, #484]	; (8001758 <HAL_DFSDM_FilterMspInit+0x338>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a78      	ldr	r2, [pc, #480]	; (8001758 <HAL_DFSDM_FilterMspInit+0x338>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b76      	ldr	r3, [pc, #472]	; (8001758 <HAL_DFSDM_FilterMspInit+0x338>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b72      	ldr	r3, [pc, #456]	; (8001758 <HAL_DFSDM_FilterMspInit+0x338>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a71      	ldr	r2, [pc, #452]	; (8001758 <HAL_DFSDM_FilterMspInit+0x338>)
 8001594:	f043 0308 	orr.w	r3, r3, #8
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b6f      	ldr	r3, [pc, #444]	; (8001758 <HAL_DFSDM_FilterMspInit+0x338>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	4b6b      	ldr	r3, [pc, #428]	; (8001758 <HAL_DFSDM_FilterMspInit+0x338>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a6a      	ldr	r2, [pc, #424]	; (8001758 <HAL_DFSDM_FilterMspInit+0x338>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b68      	ldr	r3, [pc, #416]	; (8001758 <HAL_DFSDM_FilterMspInit+0x338>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM2 GPIO Configuration    
    PA7     ------> DFSDM2_DATIN1
    PD2     ------> DFSDM2_CKOUT
    PB7     ------> DFSDM2_DATIN7 
    */
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 80015d2:	2307      	movs	r3, #7
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	485f      	ldr	r0, [pc, #380]	; (800175c <HAL_DFSDM_FilterMspInit+0x33c>)
 80015de:	f002 fab3 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 80015e2:	2304      	movs	r3, #4
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 80015f2:	2303      	movs	r3, #3
 80015f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fa:	4619      	mov	r1, r3
 80015fc:	4858      	ldr	r0, [pc, #352]	; (8001760 <HAL_DFSDM_FilterMspInit+0x340>)
 80015fe:	f002 faa3 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001612:	2306      	movs	r3, #6
 8001614:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161a:	4619      	mov	r1, r3
 800161c:	4851      	ldr	r0, [pc, #324]	; (8001764 <HAL_DFSDM_FilterMspInit+0x344>)
 800161e:	f002 fa93 	bl	8003b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM2_MspInit 1 */

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
 8001622:	4b4b      	ldr	r3, [pc, #300]	; (8001750 <HAL_DFSDM_FilterMspInit+0x330>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3301      	adds	r3, #1
 8001628:	4a49      	ldr	r2, [pc, #292]	; (8001750 <HAL_DFSDM_FilterMspInit+0x330>)
 800162a:	6013      	str	r3, [r2, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a45      	ldr	r2, [pc, #276]	; (8001748 <HAL_DFSDM_FilterMspInit+0x328>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d13f      	bne.n	80016b6 <HAL_DFSDM_FilterMspInit+0x296>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8001636:	4b4c      	ldr	r3, [pc, #304]	; (8001768 <HAL_DFSDM_FilterMspInit+0x348>)
 8001638:	4a4c      	ldr	r2, [pc, #304]	; (800176c <HAL_DFSDM_FilterMspInit+0x34c>)
 800163a:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_7;
 800163c:	4b4a      	ldr	r3, [pc, #296]	; (8001768 <HAL_DFSDM_FilterMspInit+0x348>)
 800163e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001642:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001644:	4b48      	ldr	r3, [pc, #288]	; (8001768 <HAL_DFSDM_FilterMspInit+0x348>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800164a:	4b47      	ldr	r3, [pc, #284]	; (8001768 <HAL_DFSDM_FilterMspInit+0x348>)
 800164c:	2200      	movs	r2, #0
 800164e:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001650:	4b45      	ldr	r3, [pc, #276]	; (8001768 <HAL_DFSDM_FilterMspInit+0x348>)
 8001652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001656:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001658:	4b43      	ldr	r3, [pc, #268]	; (8001768 <HAL_DFSDM_FilterMspInit+0x348>)
 800165a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800165e:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001660:	4b41      	ldr	r3, [pc, #260]	; (8001768 <HAL_DFSDM_FilterMspInit+0x348>)
 8001662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001666:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001668:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <HAL_DFSDM_FilterMspInit+0x348>)
 800166a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800166e:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8001670:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <HAL_DFSDM_FilterMspInit+0x348>)
 8001672:	2200      	movs	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001676:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <HAL_DFSDM_FilterMspInit+0x348>)
 8001678:	2204      	movs	r2, #4
 800167a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dfsdm1_flt0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800167c:	4b3a      	ldr	r3, [pc, #232]	; (8001768 <HAL_DFSDM_FilterMspInit+0x348>)
 800167e:	2203      	movs	r2, #3
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dfsdm1_flt0.Init.MemBurst = DMA_MBURST_SINGLE;
 8001682:	4b39      	ldr	r3, [pc, #228]	; (8001768 <HAL_DFSDM_FilterMspInit+0x348>)
 8001684:	2200      	movs	r2, #0
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dfsdm1_flt0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001688:	4b37      	ldr	r3, [pc, #220]	; (8001768 <HAL_DFSDM_FilterMspInit+0x348>)
 800168a:	2200      	movs	r2, #0
 800168c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800168e:	4836      	ldr	r0, [pc, #216]	; (8001768 <HAL_DFSDM_FilterMspInit+0x348>)
 8001690:	f001 fe12 	bl	80032b8 <HAL_DMA_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_DFSDM_FilterMspInit+0x27e>
    {
      Error_Handler();
 800169a:	f7ff fdd1 	bl	8001240 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a31      	ldr	r2, [pc, #196]	; (8001768 <HAL_DFSDM_FilterMspInit+0x348>)
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80016a4:	4a30      	ldr	r2, [pc, #192]	; (8001768 <HAL_DFSDM_FilterMspInit+0x348>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a2e      	ldr	r2, [pc, #184]	; (8001768 <HAL_DFSDM_FilterMspInit+0x348>)
 80016ae:	629a      	str	r2, [r3, #40]	; 0x28
 80016b0:	4a2d      	ldr	r2, [pc, #180]	; (8001768 <HAL_DFSDM_FilterMspInit+0x348>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM2 DMA Init */
    /* DFSDM2_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM2_Filter0){
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a2d      	ldr	r2, [pc, #180]	; (8001770 <HAL_DFSDM_FilterMspInit+0x350>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d13f      	bne.n	8001740 <HAL_DFSDM_FilterMspInit+0x320>
    hdma_dfsdm2_flt0.Instance = DMA2_Stream4;
 80016c0:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <HAL_DFSDM_FilterMspInit+0x354>)
 80016c2:	4a2d      	ldr	r2, [pc, #180]	; (8001778 <HAL_DFSDM_FilterMspInit+0x358>)
 80016c4:	601a      	str	r2, [r3, #0]
    hdma_dfsdm2_flt0.Init.Channel = DMA_CHANNEL_8;
 80016c6:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <HAL_DFSDM_FilterMspInit+0x354>)
 80016c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016cc:	605a      	str	r2, [r3, #4]
    hdma_dfsdm2_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ce:	4b29      	ldr	r3, [pc, #164]	; (8001774 <HAL_DFSDM_FilterMspInit+0x354>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
    hdma_dfsdm2_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d4:	4b27      	ldr	r3, [pc, #156]	; (8001774 <HAL_DFSDM_FilterMspInit+0x354>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
    hdma_dfsdm2_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80016da:	4b26      	ldr	r3, [pc, #152]	; (8001774 <HAL_DFSDM_FilterMspInit+0x354>)
 80016dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016e0:	611a      	str	r2, [r3, #16]
    hdma_dfsdm2_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016e2:	4b24      	ldr	r3, [pc, #144]	; (8001774 <HAL_DFSDM_FilterMspInit+0x354>)
 80016e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016e8:	615a      	str	r2, [r3, #20]
    hdma_dfsdm2_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016ea:	4b22      	ldr	r3, [pc, #136]	; (8001774 <HAL_DFSDM_FilterMspInit+0x354>)
 80016ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016f0:	619a      	str	r2, [r3, #24]
    hdma_dfsdm2_flt0.Init.Mode = DMA_CIRCULAR;
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <HAL_DFSDM_FilterMspInit+0x354>)
 80016f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f8:	61da      	str	r2, [r3, #28]
    hdma_dfsdm2_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <HAL_DFSDM_FilterMspInit+0x354>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	621a      	str	r2, [r3, #32]
    hdma_dfsdm2_flt0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001700:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <HAL_DFSDM_FilterMspInit+0x354>)
 8001702:	2204      	movs	r2, #4
 8001704:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dfsdm2_flt0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <HAL_DFSDM_FilterMspInit+0x354>)
 8001708:	2203      	movs	r2, #3
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dfsdm2_flt0.Init.MemBurst = DMA_MBURST_SINGLE;
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_DFSDM_FilterMspInit+0x354>)
 800170e:	2200      	movs	r2, #0
 8001710:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dfsdm2_flt0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001712:	4b18      	ldr	r3, [pc, #96]	; (8001774 <HAL_DFSDM_FilterMspInit+0x354>)
 8001714:	2200      	movs	r2, #0
 8001716:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dfsdm2_flt0) != HAL_OK)
 8001718:	4816      	ldr	r0, [pc, #88]	; (8001774 <HAL_DFSDM_FilterMspInit+0x354>)
 800171a:	f001 fdcd 	bl	80032b8 <HAL_DMA_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_DFSDM_FilterMspInit+0x308>
    {
      Error_Handler();
 8001724:	f7ff fd8c 	bl	8001240 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm2_flt0);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <HAL_DFSDM_FilterMspInit+0x354>)
 800172c:	62da      	str	r2, [r3, #44]	; 0x2c
 800172e:	4a11      	ldr	r2, [pc, #68]	; (8001774 <HAL_DFSDM_FilterMspInit+0x354>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm2_flt0);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a0f      	ldr	r2, [pc, #60]	; (8001774 <HAL_DFSDM_FilterMspInit+0x354>)
 8001738:	629a      	str	r2, [r3, #40]	; 0x28
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_DFSDM_FilterMspInit+0x354>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8001740:	bf00      	nop
 8001742:	3738      	adds	r7, #56	; 0x38
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40016100 	.word	0x40016100
 800174c:	40016180 	.word	0x40016180
 8001750:	2000009c 	.word	0x2000009c
 8001754:	20000094 	.word	0x20000094
 8001758:	40023800 	.word	0x40023800
 800175c:	40020000 	.word	0x40020000
 8001760:	40020c00 	.word	0x40020c00
 8001764:	40020400 	.word	0x40020400
 8001768:	20003284 	.word	0x20003284
 800176c:	40026410 	.word	0x40026410
 8001770:	40016500 	.word	0x40016500
 8001774:	20003398 	.word	0x20003398
 8001778:	40026470 	.word	0x40026470

0800177c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	; 0x38
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a81      	ldr	r2, [pc, #516]	; (80019a0 <HAL_DFSDM_ChannelMspInit+0x224>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d00e      	beq.n	80017bc <HAL_DFSDM_ChannelMspInit+0x40>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a80      	ldr	r2, [pc, #512]	; (80019a4 <HAL_DFSDM_ChannelMspInit+0x228>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d009      	beq.n	80017bc <HAL_DFSDM_ChannelMspInit+0x40>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a7e      	ldr	r2, [pc, #504]	; (80019a8 <HAL_DFSDM_ChannelMspInit+0x22c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d004      	beq.n	80017bc <HAL_DFSDM_ChannelMspInit+0x40>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a7d      	ldr	r2, [pc, #500]	; (80019ac <HAL_DFSDM_ChannelMspInit+0x230>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d15d      	bne.n	8001878 <HAL_DFSDM_ChannelMspInit+0xfc>
 80017bc:	4b7c      	ldr	r3, [pc, #496]	; (80019b0 <HAL_DFSDM_ChannelMspInit+0x234>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d159      	bne.n	8001878 <HAL_DFSDM_ChannelMspInit+0xfc>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80017c4:	4b7b      	ldr	r3, [pc, #492]	; (80019b4 <HAL_DFSDM_ChannelMspInit+0x238>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	3301      	adds	r3, #1
 80017ca:	4a7a      	ldr	r2, [pc, #488]	; (80019b4 <HAL_DFSDM_ChannelMspInit+0x238>)
 80017cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80017ce:	4b79      	ldr	r3, [pc, #484]	; (80019b4 <HAL_DFSDM_ChannelMspInit+0x238>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d10d      	bne.n	80017f2 <HAL_DFSDM_ChannelMspInit+0x76>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
 80017da:	4b77      	ldr	r3, [pc, #476]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a76      	ldr	r2, [pc, #472]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 80017e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b74      	ldr	r3, [pc, #464]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017ee:	623b      	str	r3, [r7, #32]
 80017f0:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
 80017f6:	4b70      	ldr	r3, [pc, #448]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a6f      	ldr	r2, [pc, #444]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b6d      	ldr	r3, [pc, #436]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	4b69      	ldr	r3, [pc, #420]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a68      	ldr	r2, [pc, #416]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b66      	ldr	r3, [pc, #408]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	61bb      	str	r3, [r7, #24]
 8001828:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration    
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 800182a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800183c:	2306      	movs	r3, #6
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001844:	4619      	mov	r1, r3
 8001846:	485d      	ldr	r0, [pc, #372]	; (80019bc <HAL_DFSDM_ChannelMspInit+0x240>)
 8001848:	f002 f97e 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 800184c:	2340      	movs	r3, #64	; 0x40
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800185c:	2306      	movs	r3, #6
 800185e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001864:	4619      	mov	r1, r3
 8001866:	4856      	ldr	r0, [pc, #344]	; (80019c0 <HAL_DFSDM_ChannelMspInit+0x244>)
 8001868:	f002 f96e 	bl	8003b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800186c:	4b50      	ldr	r3, [pc, #320]	; (80019b0 <HAL_DFSDM_ChannelMspInit+0x234>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	3301      	adds	r3, #1
 8001872:	4a4f      	ldr	r2, [pc, #316]	; (80019b0 <HAL_DFSDM_ChannelMspInit+0x234>)
 8001874:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8001876:	e08f      	b.n	8001998 <HAL_DFSDM_ChannelMspInit+0x21c>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a48      	ldr	r2, [pc, #288]	; (80019a0 <HAL_DFSDM_ChannelMspInit+0x224>)
 800187e:	4293      	cmp	r3, r2
 8001880:	f000 808a 	beq.w	8001998 <HAL_DFSDM_ChannelMspInit+0x21c>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a46      	ldr	r2, [pc, #280]	; (80019a4 <HAL_DFSDM_ChannelMspInit+0x228>)
 800188a:	4293      	cmp	r3, r2
 800188c:	f000 8084 	beq.w	8001998 <HAL_DFSDM_ChannelMspInit+0x21c>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a44      	ldr	r2, [pc, #272]	; (80019a8 <HAL_DFSDM_ChannelMspInit+0x22c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d07e      	beq.n	8001998 <HAL_DFSDM_ChannelMspInit+0x21c>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a43      	ldr	r2, [pc, #268]	; (80019ac <HAL_DFSDM_ChannelMspInit+0x230>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d079      	beq.n	8001998 <HAL_DFSDM_ChannelMspInit+0x21c>
 80018a4:	4b47      	ldr	r3, [pc, #284]	; (80019c4 <HAL_DFSDM_ChannelMspInit+0x248>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d175      	bne.n	8001998 <HAL_DFSDM_ChannelMspInit+0x21c>
    HAL_RCC_DFSDM2_CLK_ENABLED++;
 80018ac:	4b46      	ldr	r3, [pc, #280]	; (80019c8 <HAL_DFSDM_ChannelMspInit+0x24c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	4a45      	ldr	r2, [pc, #276]	; (80019c8 <HAL_DFSDM_ChannelMspInit+0x24c>)
 80018b4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM2_CLK_ENABLED==1){
 80018b6:	4b44      	ldr	r3, [pc, #272]	; (80019c8 <HAL_DFSDM_ChannelMspInit+0x24c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d10d      	bne.n	80018da <HAL_DFSDM_ChannelMspInit+0x15e>
      __HAL_RCC_DFSDM2_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	4b3d      	ldr	r3, [pc, #244]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	4a3c      	ldr	r2, [pc, #240]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 80018c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018cc:	6453      	str	r3, [r2, #68]	; 0x44
 80018ce:	4b3a      	ldr	r3, [pc, #232]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a35      	ldr	r2, [pc, #212]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b33      	ldr	r3, [pc, #204]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a2e      	ldr	r2, [pc, #184]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001900:	f043 0308 	orr.w	r3, r3, #8
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a27      	ldr	r2, [pc, #156]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <HAL_DFSDM_ChannelMspInit+0x23c>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 800193e:	2307      	movs	r3, #7
 8001940:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001946:	4619      	mov	r1, r3
 8001948:	481c      	ldr	r0, [pc, #112]	; (80019bc <HAL_DFSDM_ChannelMspInit+0x240>)
 800194a:	f002 f8fd 	bl	8003b48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 800194e:	2304      	movs	r3, #4
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 800195e:	2303      	movs	r3, #3
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001966:	4619      	mov	r1, r3
 8001968:	4815      	ldr	r0, [pc, #84]	; (80019c0 <HAL_DFSDM_ChannelMspInit+0x244>)
 800196a:	f002 f8ed 	bl	8003b48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 800197e:	2306      	movs	r3, #6
 8001980:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001986:	4619      	mov	r1, r3
 8001988:	4810      	ldr	r0, [pc, #64]	; (80019cc <HAL_DFSDM_ChannelMspInit+0x250>)
 800198a:	f002 f8dd 	bl	8003b48 <HAL_GPIO_Init>
  DFSDM2_Init++;
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_DFSDM_ChannelMspInit+0x248>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	3301      	adds	r3, #1
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_DFSDM_ChannelMspInit+0x248>)
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	3738      	adds	r7, #56	; 0x38
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40016000 	.word	0x40016000
 80019a4:	40016020 	.word	0x40016020
 80019a8:	40016040 	.word	0x40016040
 80019ac:	40016060 	.word	0x40016060
 80019b0:	20000098 	.word	0x20000098
 80019b4:	20000090 	.word	0x20000090
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000
 80019c0:	40020c00 	.word	0x40020c00
 80019c4:	2000009c 	.word	0x2000009c
 80019c8:	20000094 	.word	0x20000094
 80019cc:	40020400 	.word	0x40020400

080019d0 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a19      	ldr	r2, [pc, #100]	; (8001a54 <HAL_FMPI2C_MspInit+0x84>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d12b      	bne.n	8001a4a <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <HAL_FMPI2C_MspInit+0x88>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <HAL_FMPI2C_MspInit+0x88>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_FMPI2C_MspInit+0x88>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration    
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8001a0e:	23c0      	movs	r3, #192	; 0xc0
 8001a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a12:	2312      	movs	r3, #18
 8001a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a16:	2301      	movs	r3, #1
 8001a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001a1e:	2304      	movs	r3, #4
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	480c      	ldr	r0, [pc, #48]	; (8001a5c <HAL_FMPI2C_MspInit+0x8c>)
 8001a2a:	f002 f88d 	bl	8003b48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_FMPI2C_MspInit+0x88>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <HAL_FMPI2C_MspInit+0x88>)
 8001a38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_FMPI2C_MspInit+0x88>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8001a4a:	bf00      	nop
 8001a4c:	3728      	adds	r7, #40	; 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40006000 	.word	0x40006000
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40020800 	.word	0x40020800

08001a60 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08c      	sub	sp, #48	; 0x30
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 031c 	add.w	r3, r7, #28
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a4f      	ldr	r2, [pc, #316]	; (8001bbc <HAL_I2S_MspInit+0x15c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	f040 8097 	bne.w	8001bb2 <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a84:	2300      	movs	r3, #0
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	4b4d      	ldr	r3, [pc, #308]	; (8001bc0 <HAL_I2S_MspInit+0x160>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	4a4c      	ldr	r2, [pc, #304]	; (8001bc0 <HAL_I2S_MspInit+0x160>)
 8001a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a92:	6413      	str	r3, [r2, #64]	; 0x40
 8001a94:	4b4a      	ldr	r3, [pc, #296]	; (8001bc0 <HAL_I2S_MspInit+0x160>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	4b46      	ldr	r3, [pc, #280]	; (8001bc0 <HAL_I2S_MspInit+0x160>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	4a45      	ldr	r2, [pc, #276]	; (8001bc0 <HAL_I2S_MspInit+0x160>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab0:	4b43      	ldr	r3, [pc, #268]	; (8001bc0 <HAL_I2S_MspInit+0x160>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	4b3f      	ldr	r3, [pc, #252]	; (8001bc0 <HAL_I2S_MspInit+0x160>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	4a3e      	ldr	r2, [pc, #248]	; (8001bc0 <HAL_I2S_MspInit+0x160>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6313      	str	r3, [r2, #48]	; 0x30
 8001acc:	4b3c      	ldr	r3, [pc, #240]	; (8001bc0 <HAL_I2S_MspInit+0x160>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <HAL_I2S_MspInit+0x160>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	4a37      	ldr	r2, [pc, #220]	; (8001bc0 <HAL_I2S_MspInit+0x160>)
 8001ae2:	f043 0308 	orr.w	r3, r3, #8
 8001ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae8:	4b35      	ldr	r3, [pc, #212]	; (8001bc0 <HAL_I2S_MspInit+0x160>)
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <HAL_I2S_MspInit+0x160>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	4a30      	ldr	r2, [pc, #192]	; (8001bc0 <HAL_I2S_MspInit+0x160>)
 8001afe:	f043 0302 	orr.w	r3, r3, #2
 8001b02:	6313      	str	r3, [r2, #48]	; 0x30
 8001b04:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <HAL_I2S_MspInit+0x160>)
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8001b10:	2304      	movs	r3, #4
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001b20:	2306      	movs	r3, #6
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4826      	ldr	r0, [pc, #152]	; (8001bc4 <HAL_I2S_MspInit+0x164>)
 8001b2c:	f002 f80c 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8001b30:	2308      	movs	r3, #8
 8001b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b40:	2305      	movs	r3, #5
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	481e      	ldr	r0, [pc, #120]	; (8001bc4 <HAL_I2S_MspInit+0x164>)
 8001b4c:	f001 fffc 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001b50:	2308      	movs	r3, #8
 8001b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b60:	2305      	movs	r3, #5
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4817      	ldr	r0, [pc, #92]	; (8001bc8 <HAL_I2S_MspInit+0x168>)
 8001b6c:	f001 ffec 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8001b70:	2308      	movs	r3, #8
 8001b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b80:	2305      	movs	r3, #5
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4810      	ldr	r0, [pc, #64]	; (8001bcc <HAL_I2S_MspInit+0x16c>)
 8001b8c:	f001 ffdc 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001b90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	4808      	ldr	r0, [pc, #32]	; (8001bd0 <HAL_I2S_MspInit+0x170>)
 8001bae:	f001 ffcb 	bl	8003b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3730      	adds	r7, #48	; 0x30
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40003800 	.word	0x40003800
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020800 	.word	0x40020800
 8001bc8:	40020000 	.word	0x40020000
 8001bcc:	40020c00 	.word	0x40020c00
 8001bd0:	40020400 	.word	0x40020400

08001bd4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08e      	sub	sp, #56	; 0x38
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a56      	ldr	r2, [pc, #344]	; (8001d4c <HAL_QSPI_MspInit+0x178>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	f040 80a6 	bne.w	8001d44 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	623b      	str	r3, [r7, #32]
 8001bfc:	4b54      	ldr	r3, [pc, #336]	; (8001d50 <HAL_QSPI_MspInit+0x17c>)
 8001bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c00:	4a53      	ldr	r2, [pc, #332]	; (8001d50 <HAL_QSPI_MspInit+0x17c>)
 8001c02:	f043 0302 	orr.w	r3, r3, #2
 8001c06:	6393      	str	r3, [r2, #56]	; 0x38
 8001c08:	4b51      	ldr	r3, [pc, #324]	; (8001d50 <HAL_QSPI_MspInit+0x17c>)
 8001c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	623b      	str	r3, [r7, #32]
 8001c12:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	4b4d      	ldr	r3, [pc, #308]	; (8001d50 <HAL_QSPI_MspInit+0x17c>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	4a4c      	ldr	r2, [pc, #304]	; (8001d50 <HAL_QSPI_MspInit+0x17c>)
 8001c1e:	f043 0310 	orr.w	r3, r3, #16
 8001c22:	6313      	str	r3, [r2, #48]	; 0x30
 8001c24:	4b4a      	ldr	r3, [pc, #296]	; (8001d50 <HAL_QSPI_MspInit+0x17c>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	4b46      	ldr	r3, [pc, #280]	; (8001d50 <HAL_QSPI_MspInit+0x17c>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	4a45      	ldr	r2, [pc, #276]	; (8001d50 <HAL_QSPI_MspInit+0x17c>)
 8001c3a:	f043 0320 	orr.w	r3, r3, #32
 8001c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c40:	4b43      	ldr	r3, [pc, #268]	; (8001d50 <HAL_QSPI_MspInit+0x17c>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	f003 0320 	and.w	r3, r3, #32
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_QSPI_MspInit+0x17c>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	4a3e      	ldr	r2, [pc, #248]	; (8001d50 <HAL_QSPI_MspInit+0x17c>)
 8001c56:	f043 0302 	orr.w	r3, r3, #2
 8001c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5c:	4b3c      	ldr	r3, [pc, #240]	; (8001d50 <HAL_QSPI_MspInit+0x17c>)
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c68:	2300      	movs	r3, #0
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	4b38      	ldr	r3, [pc, #224]	; (8001d50 <HAL_QSPI_MspInit+0x17c>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	4a37      	ldr	r2, [pc, #220]	; (8001d50 <HAL_QSPI_MspInit+0x17c>)
 8001c72:	f043 0308 	orr.w	r3, r3, #8
 8001c76:	6313      	str	r3, [r2, #48]	; 0x30
 8001c78:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <HAL_QSPI_MspInit+0x17c>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <HAL_QSPI_MspInit+0x17c>)
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	4a30      	ldr	r2, [pc, #192]	; (8001d50 <HAL_QSPI_MspInit+0x17c>)
 8001c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c92:	6313      	str	r3, [r2, #48]	; 0x30
 8001c94:	4b2e      	ldr	r3, [pc, #184]	; (8001d50 <HAL_QSPI_MspInit+0x17c>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cac:	2303      	movs	r3, #3
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001cb0:	2309      	movs	r3, #9
 8001cb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4826      	ldr	r0, [pc, #152]	; (8001d54 <HAL_QSPI_MspInit+0x180>)
 8001cbc:	f001 ff44 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001cc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001cd2:	230a      	movs	r3, #10
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cda:	4619      	mov	r1, r3
 8001cdc:	481e      	ldr	r0, [pc, #120]	; (8001d58 <HAL_QSPI_MspInit+0x184>)
 8001cde:	f001 ff33 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001cf2:	2309      	movs	r3, #9
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4817      	ldr	r0, [pc, #92]	; (8001d5c <HAL_QSPI_MspInit+0x188>)
 8001cfe:	f001 ff23 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001d02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d10:	2303      	movs	r3, #3
 8001d12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001d14:	2309      	movs	r3, #9
 8001d16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4810      	ldr	r0, [pc, #64]	; (8001d60 <HAL_QSPI_MspInit+0x18c>)
 8001d20:	f001 ff12 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001d24:	2340      	movs	r3, #64	; 0x40
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d30:	2303      	movs	r3, #3
 8001d32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d34:	230a      	movs	r3, #10
 8001d36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4809      	ldr	r0, [pc, #36]	; (8001d64 <HAL_QSPI_MspInit+0x190>)
 8001d40:	f001 ff02 	bl	8003b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001d44:	bf00      	nop
 8001d46:	3738      	adds	r7, #56	; 0x38
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	a0001000 	.word	0xa0001000
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40021400 	.word	0x40021400
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	40020c00 	.word	0x40020c00
 8001d64:	40021800 	.word	0x40021800

08001d68 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a28      	ldr	r2, [pc, #160]	; (8001e28 <HAL_SD_MspInit+0xc0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d14a      	bne.n	8001e20 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4b27      	ldr	r3, [pc, #156]	; (8001e2c <HAL_SD_MspInit+0xc4>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	4a26      	ldr	r2, [pc, #152]	; (8001e2c <HAL_SD_MspInit+0xc4>)
 8001d94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d98:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9a:	4b24      	ldr	r3, [pc, #144]	; (8001e2c <HAL_SD_MspInit+0xc4>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b20      	ldr	r3, [pc, #128]	; (8001e2c <HAL_SD_MspInit+0xc4>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a1f      	ldr	r2, [pc, #124]	; (8001e2c <HAL_SD_MspInit+0xc4>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <HAL_SD_MspInit+0xc4>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_SD_MspInit+0xc4>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a18      	ldr	r2, [pc, #96]	; (8001e2c <HAL_SD_MspInit+0xc4>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <HAL_SD_MspInit+0xc4>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK 
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001dde:	2340      	movs	r3, #64	; 0x40
 8001de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dea:	2303      	movs	r3, #3
 8001dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001dee:	230c      	movs	r3, #12
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	4619      	mov	r1, r3
 8001df8:	480d      	ldr	r0, [pc, #52]	; (8001e30 <HAL_SD_MspInit+0xc8>)
 8001dfa:	f001 fea5 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin 
 8001dfe:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001e02:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e10:	230c      	movs	r3, #12
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4806      	ldr	r0, [pc, #24]	; (8001e34 <HAL_SD_MspInit+0xcc>)
 8001e1c:	f001 fe94 	bl	8003b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001e20:	bf00      	nop
 8001e22:	3728      	adds	r7, #40	; 0x28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40012c00 	.word	0x40012c00
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40020000 	.word	0x40020000
 8001e34:	40020800 	.word	0x40020800

08001e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08c      	sub	sp, #48	; 0x30
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 031c 	add.w	r3, r7, #28
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a33      	ldr	r2, [pc, #204]	; (8001f24 <HAL_UART_MspInit+0xec>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d12d      	bne.n	8001eb6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	4b32      	ldr	r3, [pc, #200]	; (8001f28 <HAL_UART_MspInit+0xf0>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	4a31      	ldr	r2, [pc, #196]	; (8001f28 <HAL_UART_MspInit+0xf0>)
 8001e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e68:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6a:	4b2f      	ldr	r3, [pc, #188]	; (8001f28 <HAL_UART_MspInit+0xf0>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e72:	61bb      	str	r3, [r7, #24]
 8001e74:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	4b2b      	ldr	r3, [pc, #172]	; (8001f28 <HAL_UART_MspInit+0xf0>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a2a      	ldr	r2, [pc, #168]	; (8001f28 <HAL_UART_MspInit+0xf0>)
 8001e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <HAL_UART_MspInit+0xf0>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration    
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX 
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8001e92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001ea4:	230b      	movs	r3, #11
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	4619      	mov	r1, r3
 8001eae:	481f      	ldr	r0, [pc, #124]	; (8001f2c <HAL_UART_MspInit+0xf4>)
 8001eb0:	f001 fe4a 	bl	8003b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001eb4:	e031      	b.n	8001f1a <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <HAL_UART_MspInit+0xf8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d12c      	bne.n	8001f1a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <HAL_UART_MspInit+0xf0>)
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec8:	4a17      	ldr	r2, [pc, #92]	; (8001f28 <HAL_UART_MspInit+0xf0>)
 8001eca:	f043 0320 	orr.w	r3, r3, #32
 8001ece:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_UART_MspInit+0xf0>)
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed4:	f003 0320 	and.w	r3, r3, #32
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_UART_MspInit+0xf0>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	4a10      	ldr	r2, [pc, #64]	; (8001f28 <HAL_UART_MspInit+0xf0>)
 8001ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eea:	6313      	str	r3, [r2, #48]	; 0x30
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <HAL_UART_MspInit+0xf0>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001ef8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f0a:	2308      	movs	r3, #8
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f0e:	f107 031c 	add.w	r3, r7, #28
 8001f12:	4619      	mov	r1, r3
 8001f14:	4805      	ldr	r0, [pc, #20]	; (8001f2c <HAL_UART_MspInit+0xf4>)
 8001f16:	f001 fe17 	bl	8003b48 <HAL_GPIO_Init>
}
 8001f1a:	bf00      	nop
 8001f1c:	3730      	adds	r7, #48	; 0x30
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40011c00 	.word	0x40011c00
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40021800 	.word	0x40021800
 8001f30:	40011400 	.word	0x40011400

08001f34 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001f48:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <HAL_FSMC_MspInit+0xc8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d151      	bne.n	8001ff4 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001f50:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <HAL_FSMC_MspInit+0xc8>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	4b29      	ldr	r3, [pc, #164]	; (8002000 <HAL_FSMC_MspInit+0xcc>)
 8001f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5e:	4a28      	ldr	r2, [pc, #160]	; (8002000 <HAL_FSMC_MspInit+0xcc>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6393      	str	r3, [r2, #56]	; 0x38
 8001f66:	4b26      	ldr	r3, [pc, #152]	; (8002000 <HAL_FSMC_MspInit+0xcc>)
 8001f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin 
 8001f72:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001f76:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin 
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f80:	2303      	movs	r3, #3
 8001f82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001f84:	230c      	movs	r3, #12
 8001f86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	481d      	ldr	r0, [pc, #116]	; (8002004 <HAL_FSMC_MspInit+0xd0>)
 8001f8e:	f001 fddb 	bl	8003b48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin 
 8001f92:	f240 433f 	movw	r3, #1087	; 0x43f
 8001f96:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001fa4:	230c      	movs	r3, #12
 8001fa6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	4619      	mov	r1, r3
 8001fac:	4816      	ldr	r0, [pc, #88]	; (8002008 <HAL_FSMC_MspInit+0xd4>)
 8001fae:	f001 fdcb 	bl	8003b48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin 
 8001fb2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001fb6:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin 
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001fc4:	230c      	movs	r3, #12
 8001fc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	4619      	mov	r1, r3
 8001fcc:	480f      	ldr	r0, [pc, #60]	; (800200c <HAL_FSMC_MspInit+0xd8>)
 8001fce:	f001 fdbb 	bl	8003b48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin 
 8001fd2:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001fd6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin 
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001fe4:	230c      	movs	r3, #12
 8001fe6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	4619      	mov	r1, r3
 8001fec:	4808      	ldr	r0, [pc, #32]	; (8002010 <HAL_FSMC_MspInit+0xdc>)
 8001fee:	f001 fdab 	bl	8003b48 <HAL_GPIO_Init>
 8001ff2:	e000      	b.n	8001ff6 <HAL_FSMC_MspInit+0xc2>
    return;
 8001ff4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	200000a0 	.word	0x200000a0
 8002000:	40023800 	.word	0x40023800
 8002004:	40021400 	.word	0x40021400
 8002008:	40021800 	.word	0x40021800
 800200c:	40021000 	.word	0x40021000
 8002010:	40020c00 	.word	0x40020c00

08002014 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800201c:	f7ff ff8a 	bl	8001f34 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203a:	e7fe      	b.n	800203a <HardFault_Handler+0x4>

0800203c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <MemManage_Handler+0x4>

08002042 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <BusFault_Handler+0x4>

08002048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <UsageFault_Handler+0x4>

0800204e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800207c:	f000 f942 	bl	8002304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}

08002084 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <DMA2_Stream0_IRQHandler+0x10>)
 800208a:	f001 fa1b 	bl	80034c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20003284 	.word	0x20003284

08002098 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm2_flt0);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <DMA2_Stream4_IRQHandler+0x10>)
 800209e:	f001 fa11 	bl	80034c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20003398 	.word	0x20003398

080020ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	e00a      	b.n	80020d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020be:	f3af 8000 	nop.w
 80020c2:	4601      	mov	r1, r0
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	60ba      	str	r2, [r7, #8]
 80020ca:	b2ca      	uxtb	r2, r1
 80020cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	3301      	adds	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	429a      	cmp	r2, r3
 80020da:	dbf0      	blt.n	80020be <_read+0x12>
	}

return len;
 80020dc:	687b      	ldr	r3, [r7, #4]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	e009      	b.n	800210c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	60ba      	str	r2, [r7, #8]
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3301      	adds	r3, #1
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	429a      	cmp	r2, r3
 8002112:	dbf1      	blt.n	80020f8 <_write+0x12>
	}
	return len;
 8002114:	687b      	ldr	r3, [r7, #4]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <_close>:

int _close(int file)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
	return -1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
}
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002146:	605a      	str	r2, [r3, #4]
	return 0;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <_isatty>:

int _isatty(int file)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
	return 1;
 800215e:	2301      	movs	r3, #1
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
	return 0;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <_sbrk+0x50>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d102      	bne.n	800219e <_sbrk+0x16>
		heap_end = &end;
 8002198:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <_sbrk+0x50>)
 800219a:	4a10      	ldr	r2, [pc, #64]	; (80021dc <_sbrk+0x54>)
 800219c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800219e:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <_sbrk+0x50>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <_sbrk+0x50>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4413      	add	r3, r2
 80021ac:	466a      	mov	r2, sp
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d907      	bls.n	80021c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80021b2:	f005 fb05 	bl	80077c0 <__errno>
 80021b6:	4602      	mov	r2, r0
 80021b8:	230c      	movs	r3, #12
 80021ba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80021bc:	f04f 33ff 	mov.w	r3, #4294967295
 80021c0:	e006      	b.n	80021d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80021c2:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <_sbrk+0x50>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	4a03      	ldr	r2, [pc, #12]	; (80021d8 <_sbrk+0x50>)
 80021cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80021ce:	68fb      	ldr	r3, [r7, #12]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	200000a4 	.word	0x200000a4
 80021dc:	200045a8 	.word	0x200045a8

080021e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <SystemInit+0x28>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	4a07      	ldr	r2, [pc, #28]	; (8002208 <SystemInit+0x28>)
 80021ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <SystemInit+0x28>)
 80021f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021fa:	609a      	str	r2, [r3, #8]
#endif
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800220c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002244 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002210:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002212:	e003      	b.n	800221c <LoopCopyDataInit>

08002214 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002216:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002218:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800221a:	3104      	adds	r1, #4

0800221c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800221c:	480b      	ldr	r0, [pc, #44]	; (800224c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002220:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002222:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002224:	d3f6      	bcc.n	8002214 <CopyDataInit>
  ldr  r2, =_sbss
 8002226:	4a0b      	ldr	r2, [pc, #44]	; (8002254 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002228:	e002      	b.n	8002230 <LoopFillZerobss>

0800222a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800222a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800222c:	f842 3b04 	str.w	r3, [r2], #4

08002230 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002232:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002234:	d3f9      	bcc.n	800222a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002236:	f7ff ffd3 	bl	80021e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223a:	f005 fac7 	bl	80077cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800223e:	f7fe f9bf 	bl	80005c0 <main>
  bx  lr    
 8002242:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002244:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002248:	080087cc 	.word	0x080087cc
  ldr  r0, =_sdata
 800224c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002250:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002254:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002258:	200045a8 	.word	0x200045a8

0800225c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800225c:	e7fe      	b.n	800225c <ADC_IRQHandler>
	...

08002260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002264:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <HAL_Init+0x40>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0d      	ldr	r2, [pc, #52]	; (80022a0 <HAL_Init+0x40>)
 800226a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800226e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_Init+0x40>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <HAL_Init+0x40>)
 8002276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800227a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <HAL_Init+0x40>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <HAL_Init+0x40>)
 8002282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002286:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002288:	2003      	movs	r0, #3
 800228a:	f000 fbbf 	bl	8002a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800228e:	2000      	movs	r0, #0
 8002290:	f000 f808 	bl	80022a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002294:	f7fe ffdc 	bl	8001250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40023c00 	.word	0x40023c00

080022a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_InitTick+0x54>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_InitTick+0x58>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	4619      	mov	r1, r3
 80022b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80022be:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fbd7 	bl	8002a76 <HAL_SYSTICK_Config>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00e      	b.n	80022f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b0f      	cmp	r3, #15
 80022d6:	d80a      	bhi.n	80022ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d8:	2200      	movs	r2, #0
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295
 80022e0:	f000 fb9f 	bl	8002a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e4:	4a06      	ldr	r2, [pc, #24]	; (8002300 <HAL_InitTick+0x5c>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e000      	b.n	80022f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000000 	.word	0x20000000
 80022fc:	20000008 	.word	0x20000008
 8002300:	20000004 	.word	0x20000004

08002304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_IncTick+0x20>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_IncTick+0x24>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4413      	add	r3, r2
 8002314:	4a04      	ldr	r2, [pc, #16]	; (8002328 <HAL_IncTick+0x24>)
 8002316:	6013      	str	r3, [r2, #0]
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000008 	.word	0x20000008
 8002328:	200045a0 	.word	0x200045a0

0800232c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return uwTick;
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <HAL_GetTick+0x14>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	200045a0 	.word	0x200045a0

08002344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800234c:	f7ff ffee 	bl	800232c <HAL_GetTick>
 8002350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235c:	d005      	beq.n	800236a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_Delay+0x40>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4413      	add	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800236a:	bf00      	nop
 800236c:	f7ff ffde 	bl	800232c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	429a      	cmp	r2, r3
 800237a:	d8f7      	bhi.n	800236c <HAL_Delay+0x28>
  {
  }
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000008 	.word	0x20000008

08002388 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e033      	b.n	8002406 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7fe ff7a 	bl	80012a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d118      	bne.n	80023f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023ce:	f023 0302 	bic.w	r3, r3, #2
 80023d2:	f043 0202 	orr.w	r2, r3, #2
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f94a 	bl	8002674 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f023 0303 	bic.w	r3, r3, #3
 80023ee:	f043 0201 	orr.w	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40
 80023f6:	e001      	b.n	80023fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002404:	7bfb      	ldrb	r3, [r7, #15]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1c>
 8002428:	2302      	movs	r3, #2
 800242a:	e113      	b.n	8002654 <HAL_ADC_ConfigChannel+0x244>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b09      	cmp	r3, #9
 800243a:	d925      	bls.n	8002488 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68d9      	ldr	r1, [r3, #12]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	3b1e      	subs	r3, #30
 8002452:	2207      	movs	r2, #7
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43da      	mvns	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	400a      	ands	r2, r1
 8002460:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68d9      	ldr	r1, [r3, #12]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	b29b      	uxth	r3, r3
 8002472:	4618      	mov	r0, r3
 8002474:	4603      	mov	r3, r0
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4403      	add	r3, r0
 800247a:	3b1e      	subs	r3, #30
 800247c:	409a      	lsls	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	e022      	b.n	80024ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6919      	ldr	r1, [r3, #16]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	2207      	movs	r2, #7
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	400a      	ands	r2, r1
 80024aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6919      	ldr	r1, [r3, #16]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	4618      	mov	r0, r3
 80024be:	4603      	mov	r3, r0
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4403      	add	r3, r0
 80024c4:	409a      	lsls	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d824      	bhi.n	8002520 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	3b05      	subs	r3, #5
 80024e8:	221f      	movs	r2, #31
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	400a      	ands	r2, r1
 80024f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	4618      	mov	r0, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	3b05      	subs	r3, #5
 8002512:	fa00 f203 	lsl.w	r2, r0, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	635a      	str	r2, [r3, #52]	; 0x34
 800251e:	e04c      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b0c      	cmp	r3, #12
 8002526:	d824      	bhi.n	8002572 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	3b23      	subs	r3, #35	; 0x23
 800253a:	221f      	movs	r2, #31
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43da      	mvns	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	400a      	ands	r2, r1
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	4618      	mov	r0, r3
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	3b23      	subs	r3, #35	; 0x23
 8002564:	fa00 f203 	lsl.w	r2, r0, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
 8002570:	e023      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	3b41      	subs	r3, #65	; 0x41
 8002584:	221f      	movs	r2, #31
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	400a      	ands	r2, r1
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	4618      	mov	r0, r3
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	3b41      	subs	r3, #65	; 0x41
 80025ae:	fa00 f203 	lsl.w	r2, r0, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025ba:	4b29      	ldr	r3, [pc, #164]	; (8002660 <HAL_ADC_ConfigChannel+0x250>)
 80025bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a28      	ldr	r2, [pc, #160]	; (8002664 <HAL_ADC_ConfigChannel+0x254>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d10f      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x1d8>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b12      	cmp	r3, #18
 80025ce:	d10b      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <HAL_ADC_ConfigChannel+0x254>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d12b      	bne.n	800264a <HAL_ADC_ConfigChannel+0x23a>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <HAL_ADC_ConfigChannel+0x258>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d003      	beq.n	8002604 <HAL_ADC_ConfigChannel+0x1f4>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b11      	cmp	r3, #17
 8002602:	d122      	bne.n	800264a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a11      	ldr	r2, [pc, #68]	; (8002668 <HAL_ADC_ConfigChannel+0x258>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d111      	bne.n	800264a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <HAL_ADC_ConfigChannel+0x25c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a11      	ldr	r2, [pc, #68]	; (8002670 <HAL_ADC_ConfigChannel+0x260>)
 800262c:	fba2 2303 	umull	r2, r3, r2, r3
 8002630:	0c9a      	lsrs	r2, r3, #18
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800263c:	e002      	b.n	8002644 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	3b01      	subs	r3, #1
 8002642:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f9      	bne.n	800263e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	40012300 	.word	0x40012300
 8002664:	40012000 	.word	0x40012000
 8002668:	10000012 	.word	0x10000012
 800266c:	20000000 	.word	0x20000000
 8002670:	431bde83 	.word	0x431bde83

08002674 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800267c:	4b79      	ldr	r3, [pc, #484]	; (8002864 <ADC_Init+0x1f0>)
 800267e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	431a      	orrs	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6859      	ldr	r1, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	021a      	lsls	r2, r3, #8
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6899      	ldr	r1, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	4a58      	ldr	r2, [pc, #352]	; (8002868 <ADC_Init+0x1f4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d022      	beq.n	8002752 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800271a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6899      	ldr	r1, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800273c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6899      	ldr	r1, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	e00f      	b.n	8002772 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002760:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002770:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0202 	bic.w	r2, r2, #2
 8002780:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6899      	ldr	r1, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	7e1b      	ldrb	r3, [r3, #24]
 800278c:	005a      	lsls	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d01b      	beq.n	80027d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6859      	ldr	r1, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	3b01      	subs	r3, #1
 80027cc:	035a      	lsls	r2, r3, #13
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	e007      	b.n	80027e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	3b01      	subs	r3, #1
 8002804:	051a      	lsls	r2, r3, #20
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800281c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6899      	ldr	r1, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800282a:	025a      	lsls	r2, r3, #9
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002842:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6899      	ldr	r1, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	029a      	lsls	r2, r3, #10
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	609a      	str	r2, [r3, #8]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	40012300 	.word	0x40012300
 8002868:	0f000001 	.word	0x0f000001

0800286c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <__NVIC_SetPriorityGrouping+0x44>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002888:	4013      	ands	r3, r2
 800288a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800289e:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <__NVIC_SetPriorityGrouping+0x44>)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	60d3      	str	r3, [r2, #12]
}
 80028a4:	bf00      	nop
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <__NVIC_GetPriorityGrouping+0x18>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	0a1b      	lsrs	r3, r3, #8
 80028be:	f003 0307 	and.w	r3, r3, #7
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	db0b      	blt.n	80028fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	f003 021f 	and.w	r2, r3, #31
 80028e8:	4907      	ldr	r1, [pc, #28]	; (8002908 <__NVIC_EnableIRQ+0x38>)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	2001      	movs	r0, #1
 80028f2:	fa00 f202 	lsl.w	r2, r0, r2
 80028f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000e100 	.word	0xe000e100

0800290c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	2b00      	cmp	r3, #0
 800291e:	db0a      	blt.n	8002936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	490c      	ldr	r1, [pc, #48]	; (8002958 <__NVIC_SetPriority+0x4c>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	0112      	lsls	r2, r2, #4
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	440b      	add	r3, r1
 8002930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002934:	e00a      	b.n	800294c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4908      	ldr	r1, [pc, #32]	; (800295c <__NVIC_SetPriority+0x50>)
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	3b04      	subs	r3, #4
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	440b      	add	r3, r1
 800294a:	761a      	strb	r2, [r3, #24]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000e100 	.word	0xe000e100
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f1c3 0307 	rsb	r3, r3, #7
 800297a:	2b04      	cmp	r3, #4
 800297c:	bf28      	it	cs
 800297e:	2304      	movcs	r3, #4
 8002980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3304      	adds	r3, #4
 8002986:	2b06      	cmp	r3, #6
 8002988:	d902      	bls.n	8002990 <NVIC_EncodePriority+0x30>
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3b03      	subs	r3, #3
 800298e:	e000      	b.n	8002992 <NVIC_EncodePriority+0x32>
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	f04f 32ff 	mov.w	r2, #4294967295
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	401a      	ands	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	43d9      	mvns	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	4313      	orrs	r3, r2
         );
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3724      	adds	r7, #36	; 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029d8:	d301      	bcc.n	80029de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029da:	2301      	movs	r3, #1
 80029dc:	e00f      	b.n	80029fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029de:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <SysTick_Config+0x40>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029e6:	210f      	movs	r1, #15
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ec:	f7ff ff8e 	bl	800290c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <SysTick_Config+0x40>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029f6:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <SysTick_Config+0x40>)
 80029f8:	2207      	movs	r2, #7
 80029fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	e000e010 	.word	0xe000e010

08002a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff ff29 	bl	800286c <__NVIC_SetPriorityGrouping>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4603      	mov	r3, r0
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a34:	f7ff ff3e 	bl	80028b4 <__NVIC_GetPriorityGrouping>
 8002a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	6978      	ldr	r0, [r7, #20]
 8002a40:	f7ff ff8e 	bl	8002960 <NVIC_EncodePriority>
 8002a44:	4602      	mov	r2, r0
 8002a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff5d 	bl	800290c <__NVIC_SetPriority>
}
 8002a52:	bf00      	nop
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff ff31 	bl	80028d0 <__NVIC_EnableIRQ>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff ffa2 	bl	80029c8 <SysTick_Config>
 8002a84:	4603      	mov	r3, r0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e014      	b.n	8002aca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	791b      	ldrb	r3, [r3, #4]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d105      	bne.n	8002ab6 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7fe fc71 	bl	8001398 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b087      	sub	sp, #28
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	795b      	ldrb	r3, [r3, #5]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_DAC_ConfigChannel+0x20>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e036      	b.n	8002b60 <HAL_DAC_ConfigChannel+0x8e>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2202      	movs	r2, #2
 8002afc:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002b06:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4013      	ands	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6819      	ldr	r1, [r3, #0]
 8002b40:	22c0      	movs	r2, #192	; 0xc0
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	400a      	ands	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2201      	movs	r2, #1
 8002b56:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	371c      	adds	r7, #28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0cf      	b.n	8002d1e <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a69      	ldr	r2, [pc, #420]	; (8002d28 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00e      	beq.n	8002ba6 <HAL_DFSDM_ChannelInit+0x3a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a67      	ldr	r2, [pc, #412]	; (8002d2c <HAL_DFSDM_ChannelInit+0x1c0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d009      	beq.n	8002ba6 <HAL_DFSDM_ChannelInit+0x3a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a66      	ldr	r2, [pc, #408]	; (8002d30 <HAL_DFSDM_ChannelInit+0x1c4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d004      	beq.n	8002ba6 <HAL_DFSDM_ChannelInit+0x3a>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a64      	ldr	r2, [pc, #400]	; (8002d34 <HAL_DFSDM_ChannelInit+0x1c8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d106      	bne.n	8002bb4 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8002ba6:	4b64      	ldr	r3, [pc, #400]	; (8002d38 <HAL_DFSDM_ChannelInit+0x1cc>)
 8002ba8:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8002baa:	4b64      	ldr	r3, [pc, #400]	; (8002d3c <HAL_DFSDM_ChannelInit+0x1d0>)
 8002bac:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8002bae:	4b5e      	ldr	r3, [pc, #376]	; (8002d28 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	e005      	b.n	8002bc0 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8002bb4:	4b62      	ldr	r3, [pc, #392]	; (8002d40 <HAL_DFSDM_ChannelInit+0x1d4>)
 8002bb6:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8002bb8:	4b62      	ldr	r3, [pc, #392]	; (8002d44 <HAL_DFSDM_ChannelInit+0x1d8>)
 8002bba:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8002bbc:	4b62      	ldr	r3, [pc, #392]	; (8002d48 <HAL_DFSDM_ChannelInit+0x1dc>)
 8002bbe:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 fabd 	bl	8003144 <DFSDM_GetChannelFromInstance>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0a0      	b.n	8002d1e <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fe fdcd 	bl	800177c <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d125      	bne.n	8002c40 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	791b      	ldrb	r3, [r3, #4]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d108      	bne.n	8002c34 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	041b      	lsls	r3, r3, #16
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002c4e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6819      	ldr	r1, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002c5e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002c64:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 020f 	bic.w	r2, r2, #15
 8002c7c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6819      	ldr	r1, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002ca4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6899      	ldr	r1, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f002 0207 	and.w	r2, r2, #7
 8002cd0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6859      	ldr	r1, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cfc:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fa1a 	bl	8003144 <DFSDM_GetChannelFromInstance>
 8002d10:	4603      	mov	r3, r0
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4413      	add	r3, r2
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40016000 	.word	0x40016000
 8002d2c:	40016020 	.word	0x40016020
 8002d30:	40016040 	.word	0x40016040
 8002d34:	40016060 	.word	0x40016060
 8002d38:	200000a8 	.word	0x200000a8
 8002d3c:	200000ac 	.word	0x200000ac
 8002d40:	200000bc 	.word	0x200000bc
 8002d44:	200000c0 	.word	0x200000c0
 8002d48:	40016400 	.word	0x40016400

08002d4c <HAL_DFSDM_ChannelGetState>:
  * @brief  This function allows to get the current DFSDM channel handle state.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval DFSDM channel state.
  */
HAL_DFSDM_Channel_StateTypeDef HAL_DFSDM_ChannelGetState(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Return DFSDM channel handle state */
  return hdfsdm_channel->State;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e0d9      	b.n	8002f2e <HAL_DFSDM_FilterInit+0x1c6>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6e      	ldr	r2, [pc, #440]	; (8002f38 <HAL_DFSDM_FilterInit+0x1d0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d109      	bne.n	8002d98 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d003      	beq.n	8002d94 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0ca      	b.n	8002f2e <HAL_DFSDM_FilterInit+0x1c6>
  }
#if defined (DFSDM2_Channel0)  
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a67      	ldr	r2, [pc, #412]	; (8002f3c <HAL_DFSDM_FilterInit+0x1d4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d109      	bne.n	8002db6 <HAL_DFSDM_FilterInit+0x4e>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d003      	beq.n	8002db2 <HAL_DFSDM_FilterInit+0x4a>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_DFSDM_FilterInit+0x4e>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e0bb      	b.n	8002f2e <HAL_DFSDM_FilterInit+0x1c6>
  }  
#endif /* DFSDM2_Channel0 */
       
  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1U;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1U;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fe fb26 	bl	8001420 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002de2:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	7a1b      	ldrb	r3, [r3, #8]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d108      	bne.n	8002dfe <HAL_DFSDM_FilterInit+0x96>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	e007      	b.n	8002e0e <HAL_DFSDM_FilterInit+0xa6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002e0c:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	7a5b      	ldrb	r3, [r3, #9]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d108      	bne.n	8002e28 <HAL_DFSDM_FilterInit+0xc0>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	e007      	b.n	8002e38 <HAL_DFSDM_FilterInit+0xd0>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002e36:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8002e46:	f023 0308 	bic.w	r3, r3, #8
 8002e4a:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d108      	bne.n	8002e66 <HAL_DFSDM_FilterInit+0xfe>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6819      	ldr	r1, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	7c1b      	ldrb	r3, [r3, #16]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d108      	bne.n	8002e80 <HAL_DFSDM_FilterInit+0x118>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0210 	orr.w	r2, r2, #16
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	e007      	b.n	8002e90 <HAL_DFSDM_FilterInit+0x128>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0210 	bic.w	r2, r2, #16
 8002e8e:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	7c5b      	ldrb	r3, [r3, #17]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d108      	bne.n	8002eaa <HAL_DFSDM_FilterInit+0x142>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0220 	orr.w	r2, r2, #32
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	e007      	b.n	8002eba <HAL_DFSDM_FilterInit+0x152>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0220 	bic.w	r2, r2, #32
 8002eb8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8002ec8:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8002ecc:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6959      	ldr	r1, [r3, #20]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002ee0:	431a      	orrs	r2, r3
                                     (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002ee8:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	7c1a      	ldrb	r2, [r3, #16]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40016100 	.word	0x40016100
 8002f3c:	40016500 	.word	0x40016500

08002f40 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d02e      	beq.n	8002fb8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8002f60:	2bff      	cmp	r3, #255	; 0xff
 8002f62:	d029      	beq.n	8002fb8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f76:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d10d      	bne.n	8002f9a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	021b      	lsls	r3, r3, #8
 8002f88:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	e00a      	b.n	8002fb0 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6819      	ldr	r1, [r3, #0]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30
 8002fb6:	e001      	b.n	8002fbc <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }  
  else
  {
    status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	371c      	adds	r7, #28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
	...

08002fcc <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0U))
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d102      	bne.n	8002fee <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	75fb      	strb	r3, [r7, #23]
 8002fec:	e066      	b.n	80030bc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ffc:	d002      	beq.n	8003004 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	75fb      	strb	r3, [r7, #23]
 8003002:	e05b      	b.n	80030bc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10e      	bne.n	800302a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10a      	bne.n	800302a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800301a:	2b00      	cmp	r3, #0
 800301c:	d105      	bne.n	800302a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d002      	beq.n	800302a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1U))
  {
    status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	75fb      	strb	r3, [r7, #23]
 8003028:	e048      	b.n	80030bc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10c      	bne.n	800304c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003036:	2b00      	cmp	r3, #0
 8003038:	d108      	bne.n	800304c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003044:	d102      	bne.n	800304c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	75fb      	strb	r3, [r7, #23]
 800304a:	e037      	b.n	80030bc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003052:	2b01      	cmp	r3, #1
 8003054:	d004      	beq.n	8003060 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800305c:	2b03      	cmp	r3, #3
 800305e:	d12b      	bne.n	80030b8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	4a18      	ldr	r2, [pc, #96]	; (80030c8 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8003066:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	4a17      	ldr	r2, [pc, #92]	; (80030cc <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800306e:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800307a:	d101      	bne.n	8003080 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 800307c:	4a14      	ldr	r2, [pc, #80]	; (80030d0 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 800307e:	e000      	b.n	8003082 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8003080:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	331c      	adds	r3, #28
 8003092:	4619      	mov	r1, r3
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f000 f9bc 	bl	8003414 <HAL_DMA_Start_IT>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d006      	beq.n	80030b0 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	22ff      	movs	r2, #255	; 0xff
 80030a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80030ae:	e005      	b.n	80030bc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f8ab 	bl	800320c <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80030b6:	e001      	b.n	80030bc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80030bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	08003105 	.word	0x08003105
 80030cc:	08003121 	.word	0x08003121
 80030d0:	080030e9 	.word	0x080030e9

080030d4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdfsdm_filter);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f7fe f882 	bl	8001200 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80030fc:	bf00      	nop
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f7fe f884 	bl	8001220 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2203      	movs	r2, #3
 8003132:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f7ff ffcd 	bl	80030d4 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800313a:	bf00      	nop
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a24      	ldr	r2, [pc, #144]	; (80031e0 <DFSDM_GetChannelFromInstance+0x9c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d003      	beq.n	800315c <DFSDM_GetChannelFromInstance+0x18>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a23      	ldr	r2, [pc, #140]	; (80031e4 <DFSDM_GetChannelFromInstance+0xa0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d102      	bne.n	8003162 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	e037      	b.n	80031d2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a20      	ldr	r2, [pc, #128]	; (80031e8 <DFSDM_GetChannelFromInstance+0xa4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d003      	beq.n	8003172 <DFSDM_GetChannelFromInstance+0x2e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a1f      	ldr	r2, [pc, #124]	; (80031ec <DFSDM_GetChannelFromInstance+0xa8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d102      	bne.n	8003178 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8003172:	2301      	movs	r3, #1
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	e02c      	b.n	80031d2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a1d      	ldr	r2, [pc, #116]	; (80031f0 <DFSDM_GetChannelFromInstance+0xac>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d003      	beq.n	8003188 <DFSDM_GetChannelFromInstance+0x44>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a1c      	ldr	r2, [pc, #112]	; (80031f4 <DFSDM_GetChannelFromInstance+0xb0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d102      	bne.n	800318e <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8003188:	2302      	movs	r3, #2
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	e021      	b.n	80031d2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a19      	ldr	r2, [pc, #100]	; (80031f8 <DFSDM_GetChannelFromInstance+0xb4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d003      	beq.n	800319e <DFSDM_GetChannelFromInstance+0x5a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a18      	ldr	r2, [pc, #96]	; (80031fc <DFSDM_GetChannelFromInstance+0xb8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d102      	bne.n	80031a4 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 800319e:	2303      	movs	r3, #3
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	e016      	b.n	80031d2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a16      	ldr	r2, [pc, #88]	; (8003200 <DFSDM_GetChannelFromInstance+0xbc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d102      	bne.n	80031b2 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 80031ac:	2304      	movs	r3, #4
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	e00f      	b.n	80031d2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a13      	ldr	r2, [pc, #76]	; (8003204 <DFSDM_GetChannelFromInstance+0xc0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d102      	bne.n	80031c0 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 80031ba:	2305      	movs	r3, #5
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	e008      	b.n	80031d2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a11      	ldr	r2, [pc, #68]	; (8003208 <DFSDM_GetChannelFromInstance+0xc4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d102      	bne.n	80031ce <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 80031c8:	2306      	movs	r3, #6
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	e001      	b.n	80031d2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 80031ce:	2307      	movs	r3, #7
 80031d0:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 80031d2:	68fb      	ldr	r3, [r7, #12]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	40016000 	.word	0x40016000
 80031e4:	40016400 	.word	0x40016400
 80031e8:	40016020 	.word	0x40016020
 80031ec:	40016420 	.word	0x40016420
 80031f0:	40016040 	.word	0x40016040
 80031f4:	40016440 	.word	0x40016440
 80031f8:	40016060 	.word	0x40016060
 80031fc:	40016460 	.word	0x40016460
 8003200:	40016480 	.word	0x40016480
 8003204:	400164a0 	.word	0x400164a0
 8003208:	400164c0 	.word	0x400164c0

0800320c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003218:	2b00      	cmp	r3, #0
 800321a:	d108      	bne.n	800322e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	e033      	b.n	8003296 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0201 	bic.w	r2, r2, #1
 800323c:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800324c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0201 	orr.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003264:	2b03      	cmp	r3, #3
 8003266:	d116      	bne.n	8003296 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326c:	2b00      	cmp	r3, #0
 800326e:	d107      	bne.n	8003280 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0202 	orr.w	r2, r2, #2
 800327e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003286:	2b01      	cmp	r3, #1
 8003288:	d102      	bne.n	8003290 <DFSDM_RegConvStart+0x84>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	e000      	b.n	8003292 <DFSDM_RegConvStart+0x86>
 8003290:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <DFSDM_RegConvStart+0x98>
 80032a0:	2202      	movs	r2, #2
 80032a2:	e000      	b.n	80032a6 <DFSDM_RegConvStart+0x9a>
 80032a4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032c4:	f7ff f832 	bl	800232c <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e099      	b.n	8003408 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0201 	bic.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032f4:	e00f      	b.n	8003316 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032f6:	f7ff f819 	bl	800232c <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b05      	cmp	r3, #5
 8003302:	d908      	bls.n	8003316 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2220      	movs	r2, #32
 8003308:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2203      	movs	r2, #3
 800330e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e078      	b.n	8003408 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1e8      	bne.n	80032f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	4b38      	ldr	r3, [pc, #224]	; (8003410 <HAL_DMA_Init+0x158>)
 8003330:	4013      	ands	r3, r2
 8003332:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003342:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800334e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800335a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	2b04      	cmp	r3, #4
 800336e:	d107      	bne.n	8003380 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	4313      	orrs	r3, r2
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f023 0307 	bic.w	r3, r3, #7
 8003396:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d117      	bne.n	80033da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00e      	beq.n	80033da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fa6f 	bl	80038a0 <DMA_CheckFifoParam>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2240      	movs	r2, #64	; 0x40
 80033cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033d6:	2301      	movs	r3, #1
 80033d8:	e016      	b.n	8003408 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fa26 	bl	8003834 <DMA_CalcBaseAndBitshift>
 80033e8:	4603      	mov	r3, r0
 80033ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f0:	223f      	movs	r2, #63	; 0x3f
 80033f2:	409a      	lsls	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	e010803f 	.word	0xe010803f

08003414 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_DMA_Start_IT+0x26>
 8003436:	2302      	movs	r3, #2
 8003438:	e040      	b.n	80034bc <HAL_DMA_Start_IT+0xa8>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d12f      	bne.n	80034ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2202      	movs	r2, #2
 8003452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f9b8 	bl	80037d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346c:	223f      	movs	r2, #63	; 0x3f
 800346e:	409a      	lsls	r2, r3
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0216 	orr.w	r2, r2, #22
 8003482:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0208 	orr.w	r2, r2, #8
 800349a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e005      	b.n	80034ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034b6:	2302      	movs	r3, #2
 80034b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034d0:	4b92      	ldr	r3, [pc, #584]	; (800371c <HAL_DMA_IRQHandler+0x258>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a92      	ldr	r2, [pc, #584]	; (8003720 <HAL_DMA_IRQHandler+0x25c>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	0a9b      	lsrs	r3, r3, #10
 80034dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	2208      	movs	r2, #8
 80034f0:	409a      	lsls	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d01a      	beq.n	8003530 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d013      	beq.n	8003530 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0204 	bic.w	r2, r2, #4
 8003516:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351c:	2208      	movs	r2, #8
 800351e:	409a      	lsls	r2, r3
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003528:	f043 0201 	orr.w	r2, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003534:	2201      	movs	r2, #1
 8003536:	409a      	lsls	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4013      	ands	r3, r2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d012      	beq.n	8003566 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003552:	2201      	movs	r2, #1
 8003554:	409a      	lsls	r2, r3
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	f043 0202 	orr.w	r2, r3, #2
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356a:	2204      	movs	r2, #4
 800356c:	409a      	lsls	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4013      	ands	r3, r2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d012      	beq.n	800359c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00b      	beq.n	800359c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	2204      	movs	r2, #4
 800358a:	409a      	lsls	r2, r3
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003594:	f043 0204 	orr.w	r2, r3, #4
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a0:	2210      	movs	r2, #16
 80035a2:	409a      	lsls	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d043      	beq.n	8003634 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d03c      	beq.n	8003634 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035be:	2210      	movs	r2, #16
 80035c0:	409a      	lsls	r2, r3
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d018      	beq.n	8003606 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d108      	bne.n	80035f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d024      	beq.n	8003634 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	4798      	blx	r3
 80035f2:	e01f      	b.n	8003634 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01b      	beq.n	8003634 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	4798      	blx	r3
 8003604:	e016      	b.n	8003634 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d107      	bne.n	8003624 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0208 	bic.w	r2, r2, #8
 8003622:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	2220      	movs	r2, #32
 800363a:	409a      	lsls	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4013      	ands	r3, r2
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 808e 	beq.w	8003762 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 8086 	beq.w	8003762 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365a:	2220      	movs	r2, #32
 800365c:	409a      	lsls	r2, r3
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b05      	cmp	r3, #5
 800366c:	d136      	bne.n	80036dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0216 	bic.w	r2, r2, #22
 800367c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695a      	ldr	r2, [r3, #20]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800368c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d103      	bne.n	800369e <HAL_DMA_IRQHandler+0x1da>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369a:	2b00      	cmp	r3, #0
 800369c:	d007      	beq.n	80036ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0208 	bic.w	r2, r2, #8
 80036ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b2:	223f      	movs	r2, #63	; 0x3f
 80036b4:	409a      	lsls	r2, r3
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d07d      	beq.n	80037ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	4798      	blx	r3
        }
        return;
 80036da:	e078      	b.n	80037ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d01c      	beq.n	8003724 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d108      	bne.n	800370a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d030      	beq.n	8003762 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	4798      	blx	r3
 8003708:	e02b      	b.n	8003762 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d027      	beq.n	8003762 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	4798      	blx	r3
 800371a:	e022      	b.n	8003762 <HAL_DMA_IRQHandler+0x29e>
 800371c:	20000000 	.word	0x20000000
 8003720:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10f      	bne.n	8003752 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0210 	bic.w	r2, r2, #16
 8003740:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	2b00      	cmp	r3, #0
 8003768:	d032      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d022      	beq.n	80037bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2205      	movs	r2, #5
 800377a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0201 	bic.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	3301      	adds	r3, #1
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	429a      	cmp	r2, r3
 8003798:	d307      	bcc.n	80037aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1f2      	bne.n	800378e <HAL_DMA_IRQHandler+0x2ca>
 80037a8:	e000      	b.n	80037ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80037aa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4798      	blx	r3
 80037cc:	e000      	b.n	80037d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80037ce:	bf00      	nop
    }
  }
}
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop

080037d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2b40      	cmp	r3, #64	; 0x40
 8003804:	d108      	bne.n	8003818 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003816:	e007      	b.n	8003828 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	60da      	str	r2, [r3, #12]
}
 8003828:	bf00      	nop
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	3b10      	subs	r3, #16
 8003844:	4a14      	ldr	r2, [pc, #80]	; (8003898 <DMA_CalcBaseAndBitshift+0x64>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800384e:	4a13      	ldr	r2, [pc, #76]	; (800389c <DMA_CalcBaseAndBitshift+0x68>)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4413      	add	r3, r2
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b03      	cmp	r3, #3
 8003860:	d909      	bls.n	8003876 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800386a:	f023 0303 	bic.w	r3, r3, #3
 800386e:	1d1a      	adds	r2, r3, #4
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	659a      	str	r2, [r3, #88]	; 0x58
 8003874:	e007      	b.n	8003886 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800387e:	f023 0303 	bic.w	r3, r3, #3
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	aaaaaaab 	.word	0xaaaaaaab
 800389c:	0800871c 	.word	0x0800871c

080038a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d11f      	bne.n	80038fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d855      	bhi.n	800396c <DMA_CheckFifoParam+0xcc>
 80038c0:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <DMA_CheckFifoParam+0x28>)
 80038c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c6:	bf00      	nop
 80038c8:	080038d9 	.word	0x080038d9
 80038cc:	080038eb 	.word	0x080038eb
 80038d0:	080038d9 	.word	0x080038d9
 80038d4:	0800396d 	.word	0x0800396d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d045      	beq.n	8003970 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e8:	e042      	b.n	8003970 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038f2:	d13f      	bne.n	8003974 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f8:	e03c      	b.n	8003974 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003902:	d121      	bne.n	8003948 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b03      	cmp	r3, #3
 8003908:	d836      	bhi.n	8003978 <DMA_CheckFifoParam+0xd8>
 800390a:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <DMA_CheckFifoParam+0x70>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	08003921 	.word	0x08003921
 8003914:	08003927 	.word	0x08003927
 8003918:	08003921 	.word	0x08003921
 800391c:	08003939 	.word	0x08003939
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
      break;
 8003924:	e02f      	b.n	8003986 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d024      	beq.n	800397c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003936:	e021      	b.n	800397c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003940:	d11e      	bne.n	8003980 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003946:	e01b      	b.n	8003980 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d902      	bls.n	8003954 <DMA_CheckFifoParam+0xb4>
 800394e:	2b03      	cmp	r3, #3
 8003950:	d003      	beq.n	800395a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003952:	e018      	b.n	8003986 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
      break;
 8003958:	e015      	b.n	8003986 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00e      	beq.n	8003984 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
      break;
 800396a:	e00b      	b.n	8003984 <DMA_CheckFifoParam+0xe4>
      break;
 800396c:	bf00      	nop
 800396e:	e00a      	b.n	8003986 <DMA_CheckFifoParam+0xe6>
      break;
 8003970:	bf00      	nop
 8003972:	e008      	b.n	8003986 <DMA_CheckFifoParam+0xe6>
      break;
 8003974:	bf00      	nop
 8003976:	e006      	b.n	8003986 <DMA_CheckFifoParam+0xe6>
      break;
 8003978:	bf00      	nop
 800397a:	e004      	b.n	8003986 <DMA_CheckFifoParam+0xe6>
      break;
 800397c:	bf00      	nop
 800397e:	e002      	b.n	8003986 <DMA_CheckFifoParam+0xe6>
      break;   
 8003980:	bf00      	nop
 8003982:	e000      	b.n	8003986 <DMA_CheckFifoParam+0xe6>
      break;
 8003984:	bf00      	nop
    }
  } 
  
  return status; 
 8003986:	7bfb      	ldrb	r3, [r7, #15]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e081      	b.n	8003aaa <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d106      	bne.n	80039c0 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7fe f808 	bl	80019d0 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2224      	movs	r2, #36	; 0x24
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0201 	bic.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039f4:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d107      	bne.n	8003a0e <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a0a:	609a      	str	r2, [r3, #8]
 8003a0c:	e006      	b.n	8003a1c <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d104      	bne.n	8003a2e <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a40:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a50:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	ea42 0103 	orr.w	r1, r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	021a      	lsls	r2, r3, #8
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69d9      	ldr	r1, [r3, #28]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1a      	ldr	r2, [r3, #32]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	d138      	bne.n	8003b3a <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e032      	b.n	8003b3c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2224      	movs	r2, #36	; 0x24
 8003ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0201 	bic.w	r2, r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b04:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6819      	ldr	r1, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0201 	orr.w	r2, r2, #1
 8003b24:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	e000      	b.n	8003b3c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b3a:	2302      	movs	r3, #2
  }
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b089      	sub	sp, #36	; 0x24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
 8003b62:	e165      	b.n	8003e30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b64:	2201      	movs	r2, #1
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	f040 8154 	bne.w	8003e2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d00b      	beq.n	8003ba2 <HAL_GPIO_Init+0x5a>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d007      	beq.n	8003ba2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b96:	2b11      	cmp	r3, #17
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b12      	cmp	r3, #18
 8003ba0:	d130      	bne.n	8003c04 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	2203      	movs	r2, #3
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bd8:	2201      	movs	r2, #1
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	091b      	lsrs	r3, r3, #4
 8003bee:	f003 0201 	and.w	r2, r3, #1
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	2203      	movs	r2, #3
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	43db      	mvns	r3, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d003      	beq.n	8003c44 <HAL_GPIO_Init+0xfc>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b12      	cmp	r3, #18
 8003c42:	d123      	bne.n	8003c8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	08da      	lsrs	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3208      	adds	r2, #8
 8003c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	220f      	movs	r2, #15
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	08da      	lsrs	r2, r3, #3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3208      	adds	r2, #8
 8003c86:	69b9      	ldr	r1, [r7, #24]
 8003c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	2203      	movs	r2, #3
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0203 	and.w	r2, r3, #3
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80ae 	beq.w	8003e2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	4b5c      	ldr	r3, [pc, #368]	; (8003e44 <HAL_GPIO_Init+0x2fc>)
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	4a5b      	ldr	r2, [pc, #364]	; (8003e44 <HAL_GPIO_Init+0x2fc>)
 8003cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cde:	4b59      	ldr	r3, [pc, #356]	; (8003e44 <HAL_GPIO_Init+0x2fc>)
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cea:	4a57      	ldr	r2, [pc, #348]	; (8003e48 <HAL_GPIO_Init+0x300>)
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	089b      	lsrs	r3, r3, #2
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	220f      	movs	r2, #15
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a4e      	ldr	r2, [pc, #312]	; (8003e4c <HAL_GPIO_Init+0x304>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d025      	beq.n	8003d62 <HAL_GPIO_Init+0x21a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a4d      	ldr	r2, [pc, #308]	; (8003e50 <HAL_GPIO_Init+0x308>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01f      	beq.n	8003d5e <HAL_GPIO_Init+0x216>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a4c      	ldr	r2, [pc, #304]	; (8003e54 <HAL_GPIO_Init+0x30c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d019      	beq.n	8003d5a <HAL_GPIO_Init+0x212>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a4b      	ldr	r2, [pc, #300]	; (8003e58 <HAL_GPIO_Init+0x310>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d013      	beq.n	8003d56 <HAL_GPIO_Init+0x20e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a4a      	ldr	r2, [pc, #296]	; (8003e5c <HAL_GPIO_Init+0x314>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00d      	beq.n	8003d52 <HAL_GPIO_Init+0x20a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a49      	ldr	r2, [pc, #292]	; (8003e60 <HAL_GPIO_Init+0x318>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d007      	beq.n	8003d4e <HAL_GPIO_Init+0x206>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a48      	ldr	r2, [pc, #288]	; (8003e64 <HAL_GPIO_Init+0x31c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <HAL_GPIO_Init+0x202>
 8003d46:	2306      	movs	r3, #6
 8003d48:	e00c      	b.n	8003d64 <HAL_GPIO_Init+0x21c>
 8003d4a:	2307      	movs	r3, #7
 8003d4c:	e00a      	b.n	8003d64 <HAL_GPIO_Init+0x21c>
 8003d4e:	2305      	movs	r3, #5
 8003d50:	e008      	b.n	8003d64 <HAL_GPIO_Init+0x21c>
 8003d52:	2304      	movs	r3, #4
 8003d54:	e006      	b.n	8003d64 <HAL_GPIO_Init+0x21c>
 8003d56:	2303      	movs	r3, #3
 8003d58:	e004      	b.n	8003d64 <HAL_GPIO_Init+0x21c>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e002      	b.n	8003d64 <HAL_GPIO_Init+0x21c>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <HAL_GPIO_Init+0x21c>
 8003d62:	2300      	movs	r3, #0
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	f002 0203 	and.w	r2, r2, #3
 8003d6a:	0092      	lsls	r2, r2, #2
 8003d6c:	4093      	lsls	r3, r2
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d74:	4934      	ldr	r1, [pc, #208]	; (8003e48 <HAL_GPIO_Init+0x300>)
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	089b      	lsrs	r3, r3, #2
 8003d7a:	3302      	adds	r3, #2
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d82:	4b39      	ldr	r3, [pc, #228]	; (8003e68 <HAL_GPIO_Init+0x320>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003da6:	4a30      	ldr	r2, [pc, #192]	; (8003e68 <HAL_GPIO_Init+0x320>)
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003dac:	4b2e      	ldr	r3, [pc, #184]	; (8003e68 <HAL_GPIO_Init+0x320>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dd0:	4a25      	ldr	r2, [pc, #148]	; (8003e68 <HAL_GPIO_Init+0x320>)
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dd6:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <HAL_GPIO_Init+0x320>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	43db      	mvns	r3, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4013      	ands	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dfa:	4a1b      	ldr	r2, [pc, #108]	; (8003e68 <HAL_GPIO_Init+0x320>)
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e00:	4b19      	ldr	r3, [pc, #100]	; (8003e68 <HAL_GPIO_Init+0x320>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e24:	4a10      	ldr	r2, [pc, #64]	; (8003e68 <HAL_GPIO_Init+0x320>)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	61fb      	str	r3, [r7, #28]
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	2b0f      	cmp	r3, #15
 8003e34:	f67f ae96 	bls.w	8003b64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e38:	bf00      	nop
 8003e3a:	3724      	adds	r7, #36	; 0x24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40013800 	.word	0x40013800
 8003e4c:	40020000 	.word	0x40020000
 8003e50:	40020400 	.word	0x40020400
 8003e54:	40020800 	.word	0x40020800
 8003e58:	40020c00 	.word	0x40020c00
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40021400 	.word	0x40021400
 8003e64:	40021800 	.word	0x40021800
 8003e68:	40013c00 	.word	0x40013c00

08003e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	807b      	strh	r3, [r7, #2]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e7c:	787b      	ldrb	r3, [r7, #1]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e82:	887a      	ldrh	r2, [r7, #2]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e88:	e003      	b.n	8003e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e8a:	887b      	ldrh	r3, [r7, #2]
 8003e8c:	041a      	lsls	r2, r3, #16
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	619a      	str	r2, [r3, #24]
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e154      	b.n	800415c <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a98      	ldr	r2, [pc, #608]	; (800412c <HAL_I2S_Init+0x28c>)
 8003eca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7fd fdc7 	bl	8001a60 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ee8:	f023 030f 	bic.w	r3, r3, #15
 8003eec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d06f      	beq.n	8003fde <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d102      	bne.n	8003f0c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003f06:	2310      	movs	r3, #16
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	e001      	b.n	8003f10 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003f0c:	2320      	movs	r3, #32
 8003f0e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d802      	bhi.n	8003f1e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a83      	ldr	r2, [pc, #524]	; (8004130 <HAL_I2S_Init+0x290>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d004      	beq.n	8003f32 <HAL_I2S_Init+0x92>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a81      	ldr	r2, [pc, #516]	; (8004134 <HAL_I2S_Init+0x294>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d104      	bne.n	8003f3c <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8003f32:	2001      	movs	r0, #1
 8003f34:	f001 f990 	bl	8005258 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	e003      	b.n	8003f44 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8003f3c:	2002      	movs	r0, #2
 8003f3e:	f001 f98b 	bl	8005258 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f42:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f4c:	d125      	bne.n	8003f9a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d010      	beq.n	8003f78 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	461a      	mov	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f72:	3305      	adds	r3, #5
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	e01f      	b.n	8003fb8 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f94:	3305      	adds	r3, #5
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	e00e      	b.n	8003fb8 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	461a      	mov	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb4:	3305      	adds	r3, #5
 8003fb6:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4a5f      	ldr	r2, [pc, #380]	; (8004138 <HAL_I2S_Init+0x298>)
 8003fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc0:	08db      	lsrs	r3, r3, #3
 8003fc2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	085b      	lsrs	r3, r3, #1
 8003fd4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	021b      	lsls	r3, r3, #8
 8003fda:	61bb      	str	r3, [r7, #24]
 8003fdc:	e003      	b.n	8003fe6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d902      	bls.n	8003ff2 <HAL_I2S_Init+0x152>
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2bff      	cmp	r3, #255	; 0xff
 8003ff0:	d907      	bls.n	8004002 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff6:	f043 0210 	orr.w	r2, r3, #16
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e0ac      	b.n	800415c <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	ea42 0103 	orr.w	r1, r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	430a      	orrs	r2, r1
 8004014:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004020:	f023 030f 	bic.w	r3, r3, #15
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6851      	ldr	r1, [r2, #4]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6892      	ldr	r2, [r2, #8]
 800402c:	4311      	orrs	r1, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68d2      	ldr	r2, [r2, #12]
 8004032:	4311      	orrs	r1, r2
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6992      	ldr	r2, [r2, #24]
 8004038:	430a      	orrs	r2, r1
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004044:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b30      	cmp	r3, #48	; 0x30
 800404c:	d003      	beq.n	8004056 <HAL_I2S_Init+0x1b6>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2bb0      	cmp	r3, #176	; 0xb0
 8004054:	d107      	bne.n	8004066 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004064:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d16e      	bne.n	800414c <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a32      	ldr	r2, [pc, #200]	; (800413c <HAL_I2S_Init+0x29c>)
 8004072:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a2d      	ldr	r2, [pc, #180]	; (8004130 <HAL_I2S_Init+0x290>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d101      	bne.n	8004082 <HAL_I2S_Init+0x1e2>
 800407e:	4b30      	ldr	r3, [pc, #192]	; (8004140 <HAL_I2S_Init+0x2a0>)
 8004080:	e001      	b.n	8004086 <HAL_I2S_Init+0x1e6>
 8004082:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	4928      	ldr	r1, [pc, #160]	; (8004130 <HAL_I2S_Init+0x290>)
 800408e:	428a      	cmp	r2, r1
 8004090:	d101      	bne.n	8004096 <HAL_I2S_Init+0x1f6>
 8004092:	4a2b      	ldr	r2, [pc, #172]	; (8004140 <HAL_I2S_Init+0x2a0>)
 8004094:	e001      	b.n	800409a <HAL_I2S_Init+0x1fa>
 8004096:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800409a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800409e:	f023 030f 	bic.w	r3, r3, #15
 80040a2:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a21      	ldr	r2, [pc, #132]	; (8004130 <HAL_I2S_Init+0x290>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d101      	bne.n	80040b2 <HAL_I2S_Init+0x212>
 80040ae:	4b24      	ldr	r3, [pc, #144]	; (8004140 <HAL_I2S_Init+0x2a0>)
 80040b0:	e001      	b.n	80040b6 <HAL_I2S_Init+0x216>
 80040b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040b6:	2202      	movs	r2, #2
 80040b8:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1c      	ldr	r2, [pc, #112]	; (8004130 <HAL_I2S_Init+0x290>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d101      	bne.n	80040c8 <HAL_I2S_Init+0x228>
 80040c4:	4b1e      	ldr	r3, [pc, #120]	; (8004140 <HAL_I2S_Init+0x2a0>)
 80040c6:	e001      	b.n	80040cc <HAL_I2S_Init+0x22c>
 80040c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040d8:	d003      	beq.n	80040e2 <HAL_I2S_Init+0x242>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d103      	bne.n	80040ea <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80040e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	e001      	b.n	80040ee <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80040ea:	2300      	movs	r3, #0
 80040ec:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	b299      	uxth	r1, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004104:	4303      	orrs	r3, r0
 8004106:	b29b      	uxth	r3, r3
 8004108:	430b      	orrs	r3, r1
 800410a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800410c:	4313      	orrs	r3, r2
 800410e:	b29a      	uxth	r2, r3
 8004110:	897b      	ldrh	r3, [r7, #10]
 8004112:	4313      	orrs	r3, r2
 8004114:	b29b      	uxth	r3, r3
 8004116:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800411a:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a03      	ldr	r2, [pc, #12]	; (8004130 <HAL_I2S_Init+0x290>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d10e      	bne.n	8004144 <HAL_I2S_Init+0x2a4>
 8004126:	4b06      	ldr	r3, [pc, #24]	; (8004140 <HAL_I2S_Init+0x2a0>)
 8004128:	e00e      	b.n	8004148 <HAL_I2S_Init+0x2a8>
 800412a:	bf00      	nop
 800412c:	0800425b 	.word	0x0800425b
 8004130:	40003800 	.word	0x40003800
 8004134:	40003c00 	.word	0x40003c00
 8004138:	cccccccd 	.word	0xcccccccd
 800413c:	08004371 	.word	0x08004371
 8004140:	40003400 	.word	0x40003400
 8004144:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004148:	897a      	ldrh	r2, [r7, #10]
 800414a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3720      	adds	r7, #32
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	881a      	ldrh	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	1c9a      	adds	r2, r3, #2
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10e      	bne.n	80041f4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041e4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff ffb8 	bl	8004164 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420e:	b292      	uxth	r2, r2
 8004210:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	1c9a      	adds	r2, r3, #2
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10e      	bne.n	8004252 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004242:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ff93 	bl	8004178 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b086      	sub	sp, #24
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b04      	cmp	r3, #4
 8004274:	d13a      	bne.n	80042ec <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	d109      	bne.n	8004294 <I2S_IRQHandler+0x3a>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	2b40      	cmp	r3, #64	; 0x40
 800428c:	d102      	bne.n	8004294 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7ff ffb4 	bl	80041fc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429a:	2b40      	cmp	r3, #64	; 0x40
 800429c:	d126      	bne.n	80042ec <I2S_IRQHandler+0x92>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d11f      	bne.n	80042ec <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	f043 0202 	orr.w	r2, r3, #2
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff ff50 	bl	800418c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d136      	bne.n	8004366 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d109      	bne.n	8004316 <I2S_IRQHandler+0xbc>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430c:	2b80      	cmp	r3, #128	; 0x80
 800430e:	d102      	bne.n	8004316 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff ff45 	bl	80041a0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b08      	cmp	r3, #8
 800431e:	d122      	bne.n	8004366 <I2S_IRQHandler+0x10c>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b20      	cmp	r3, #32
 800432c:	d11b      	bne.n	8004366 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800433c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004358:	f043 0204 	orr.w	r2, r3, #4
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff ff13 	bl	800418c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004366:	bf00      	nop
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4aa2      	ldr	r2, [pc, #648]	; (8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d101      	bne.n	800438e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800438a:	4ba2      	ldr	r3, [pc, #648]	; (8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800438c:	e001      	b.n	8004392 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800438e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a9b      	ldr	r2, [pc, #620]	; (8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d101      	bne.n	80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80043a8:	4b9a      	ldr	r3, [pc, #616]	; (8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043aa:	e001      	b.n	80043b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80043ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043bc:	d004      	beq.n	80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f040 8099 	bne.w	80044fa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d107      	bne.n	80043e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f925 	bl	800462c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d107      	bne.n	80043fc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f9c8 	bl	800478c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b40      	cmp	r3, #64	; 0x40
 8004404:	d13a      	bne.n	800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d035      	beq.n	800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a7e      	ldr	r2, [pc, #504]	; (8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d101      	bne.n	800441e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800441a:	4b7e      	ldr	r3, [pc, #504]	; (8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800441c:	e001      	b.n	8004422 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800441e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4979      	ldr	r1, [pc, #484]	; (8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800442a:	428b      	cmp	r3, r1
 800442c:	d101      	bne.n	8004432 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800442e:	4b79      	ldr	r3, [pc, #484]	; (8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004430:	e001      	b.n	8004436 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004432:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004436:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800443a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800444a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446e:	f043 0202 	orr.w	r2, r3, #2
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff fe88 	bl	800418c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b08      	cmp	r3, #8
 8004484:	f040 80be 	bne.w	8004604 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 80b8 	beq.w	8004604 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044a2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a59      	ldr	r2, [pc, #356]	; (8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d101      	bne.n	80044b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80044ae:	4b59      	ldr	r3, [pc, #356]	; (8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044b0:	e001      	b.n	80044b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80044b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4954      	ldr	r1, [pc, #336]	; (8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044be:	428b      	cmp	r3, r1
 80044c0:	d101      	bne.n	80044c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80044c2:	4b54      	ldr	r3, [pc, #336]	; (8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044c4:	e001      	b.n	80044ca <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80044c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044ce:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80044d0:	2300      	movs	r3, #0
 80044d2:	60bb      	str	r3, [r7, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ea:	f043 0204 	orr.w	r2, r3, #4
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff fe4a 	bl	800418c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044f8:	e084      	b.n	8004604 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b02      	cmp	r3, #2
 8004502:	d107      	bne.n	8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f8be 	bl	8004690 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b01      	cmp	r3, #1
 800451c:	d107      	bne.n	800452e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f8fd 	bl	8004728 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004534:	2b40      	cmp	r3, #64	; 0x40
 8004536:	d12f      	bne.n	8004598 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d02a      	beq.n	8004598 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004550:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a2e      	ldr	r2, [pc, #184]	; (8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d101      	bne.n	8004560 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800455c:	4b2d      	ldr	r3, [pc, #180]	; (8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800455e:	e001      	b.n	8004564 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004560:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4929      	ldr	r1, [pc, #164]	; (8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800456c:	428b      	cmp	r3, r1
 800456e:	d101      	bne.n	8004574 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004570:	4b28      	ldr	r3, [pc, #160]	; (8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004572:	e001      	b.n	8004578 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004574:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004578:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800457c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	f043 0202 	orr.w	r2, r3, #2
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff fdfa 	bl	800418c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d131      	bne.n	8004606 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d02c      	beq.n	8004606 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a17      	ldr	r2, [pc, #92]	; (8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d101      	bne.n	80045ba <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80045b6:	4b17      	ldr	r3, [pc, #92]	; (8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045b8:	e001      	b.n	80045be <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80045ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4912      	ldr	r1, [pc, #72]	; (8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045c6:	428b      	cmp	r3, r1
 80045c8:	d101      	bne.n	80045ce <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80045ca:	4b12      	ldr	r3, [pc, #72]	; (8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045cc:	e001      	b.n	80045d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80045ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045d6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045e6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f4:	f043 0204 	orr.w	r2, r3, #4
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff fdc5 	bl	800418c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004602:	e000      	b.n	8004606 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004604:	bf00      	nop
}
 8004606:	bf00      	nop
 8004608:	3720      	adds	r7, #32
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40003800 	.word	0x40003800
 8004614:	40003400 	.word	0x40003400

08004618 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	1c99      	adds	r1, r3, #2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6251      	str	r1, [r2, #36]	; 0x24
 800463e:	881a      	ldrh	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d113      	bne.n	8004686 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800466c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d106      	bne.n	8004686 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff ffc9 	bl	8004618 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	1c99      	adds	r1, r3, #2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6251      	str	r1, [r2, #36]	; 0x24
 80046a2:	8819      	ldrh	r1, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1d      	ldr	r2, [pc, #116]	; (8004720 <I2SEx_TxISR_I2SExt+0x90>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d101      	bne.n	80046b2 <I2SEx_TxISR_I2SExt+0x22>
 80046ae:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <I2SEx_TxISR_I2SExt+0x94>)
 80046b0:	e001      	b.n	80046b6 <I2SEx_TxISR_I2SExt+0x26>
 80046b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046b6:	460a      	mov	r2, r1
 80046b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d121      	bne.n	8004716 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a12      	ldr	r2, [pc, #72]	; (8004720 <I2SEx_TxISR_I2SExt+0x90>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d101      	bne.n	80046e0 <I2SEx_TxISR_I2SExt+0x50>
 80046dc:	4b11      	ldr	r3, [pc, #68]	; (8004724 <I2SEx_TxISR_I2SExt+0x94>)
 80046de:	e001      	b.n	80046e4 <I2SEx_TxISR_I2SExt+0x54>
 80046e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	490d      	ldr	r1, [pc, #52]	; (8004720 <I2SEx_TxISR_I2SExt+0x90>)
 80046ec:	428b      	cmp	r3, r1
 80046ee:	d101      	bne.n	80046f4 <I2SEx_TxISR_I2SExt+0x64>
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <I2SEx_TxISR_I2SExt+0x94>)
 80046f2:	e001      	b.n	80046f8 <I2SEx_TxISR_I2SExt+0x68>
 80046f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff ff81 	bl	8004618 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40003800 	.word	0x40003800
 8004724:	40003400 	.word	0x40003400

08004728 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68d8      	ldr	r0, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	1c99      	adds	r1, r3, #2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004740:	b282      	uxth	r2, r0
 8004742:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d113      	bne.n	8004784 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800476a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff ff4a 	bl	8004618 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004784:	bf00      	nop
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a20      	ldr	r2, [pc, #128]	; (800481c <I2SEx_RxISR_I2SExt+0x90>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d101      	bne.n	80047a2 <I2SEx_RxISR_I2SExt+0x16>
 800479e:	4b20      	ldr	r3, [pc, #128]	; (8004820 <I2SEx_RxISR_I2SExt+0x94>)
 80047a0:	e001      	b.n	80047a6 <I2SEx_RxISR_I2SExt+0x1a>
 80047a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047a6:	68d8      	ldr	r0, [r3, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	1c99      	adds	r1, r3, #2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80047b2:	b282      	uxth	r2, r0
 80047b4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d121      	bne.n	8004812 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a12      	ldr	r2, [pc, #72]	; (800481c <I2SEx_RxISR_I2SExt+0x90>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d101      	bne.n	80047dc <I2SEx_RxISR_I2SExt+0x50>
 80047d8:	4b11      	ldr	r3, [pc, #68]	; (8004820 <I2SEx_RxISR_I2SExt+0x94>)
 80047da:	e001      	b.n	80047e0 <I2SEx_RxISR_I2SExt+0x54>
 80047dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	490d      	ldr	r1, [pc, #52]	; (800481c <I2SEx_RxISR_I2SExt+0x90>)
 80047e8:	428b      	cmp	r3, r1
 80047ea:	d101      	bne.n	80047f0 <I2SEx_RxISR_I2SExt+0x64>
 80047ec:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <I2SEx_RxISR_I2SExt+0x94>)
 80047ee:	e001      	b.n	80047f4 <I2SEx_RxISR_I2SExt+0x68>
 80047f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047f8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d106      	bne.n	8004812 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff ff03 	bl	8004618 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40003800 	.word	0x40003800
 8004820:	40003400 	.word	0x40003400

08004824 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af02      	add	r7, sp, #8
 800482a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800482c:	f7fd fd7e 	bl	800232c <HAL_GetTick>
 8004830:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e069      	b.n	8004910 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10b      	bne.n	8004860 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7fd f9bf 	bl	8001bd4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004856:	f241 3188 	movw	r1, #5000	; 0x1388
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f85e 	bl	800491c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	3b01      	subs	r3, #1
 8004870:	021a      	lsls	r2, r3, #8
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	2120      	movs	r1, #32
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f856 	bl	8004938 <QSPI_WaitFlagStateUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004890:	7afb      	ldrb	r3, [r7, #11]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d137      	bne.n	8004906 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80048a0:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6852      	ldr	r2, [r2, #4]
 80048a8:	0611      	lsls	r1, r2, #24
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	68d2      	ldr	r2, [r2, #12]
 80048ae:	4311      	orrs	r1, r2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	69d2      	ldr	r2, [r2, #28]
 80048b4:	4311      	orrs	r1, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6a12      	ldr	r2, [r2, #32]
 80048ba:	4311      	orrs	r1, r2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6812      	ldr	r2, [r2, #0]
 80048c0:	430b      	orrs	r3, r1
 80048c2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	4b13      	ldr	r3, [pc, #76]	; (8004918 <HAL_QSPI_Init+0xf4>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6912      	ldr	r2, [r2, #16]
 80048d2:	0411      	lsls	r1, r2, #16
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6952      	ldr	r2, [r2, #20]
 80048d8:	4311      	orrs	r1, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6992      	ldr	r2, [r2, #24]
 80048de:	4311      	orrs	r1, r2
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6812      	ldr	r2, [r2, #0]
 80048e4:	430b      	orrs	r3, r1
 80048e6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800490e:	7afb      	ldrb	r3, [r7, #11]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	ffe0f8fe 	.word	0xffe0f8fe

0800491c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	4613      	mov	r3, r2
 8004946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004948:	e01a      	b.n	8004980 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004950:	d016      	beq.n	8004980 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004952:	f7fd fceb 	bl	800232c <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	429a      	cmp	r2, r3
 8004960:	d302      	bcc.n	8004968 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10b      	bne.n	8004980 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2204      	movs	r2, #4
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004974:	f043 0201 	orr.w	r2, r3, #1
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e00e      	b.n	800499e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	4013      	ands	r3, r2
 800498a:	2b00      	cmp	r3, #0
 800498c:	bf14      	ite	ne
 800498e:	2301      	movne	r3, #1
 8004990:	2300      	moveq	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	79fb      	ldrb	r3, [r7, #7]
 8004998:	429a      	cmp	r2, r3
 800499a:	d1d6      	bne.n	800494a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
	...

080049a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e0cc      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049bc:	4b68      	ldr	r3, [pc, #416]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 030f 	and.w	r3, r3, #15
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d90c      	bls.n	80049e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ca:	4b65      	ldr	r3, [pc, #404]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d2:	4b63      	ldr	r3, [pc, #396]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d001      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0b8      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d020      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049fc:	4b59      	ldr	r3, [pc, #356]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	4a58      	ldr	r2, [pc, #352]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a14:	4b53      	ldr	r3, [pc, #332]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	4a52      	ldr	r2, [pc, #328]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a20:	4b50      	ldr	r3, [pc, #320]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	494d      	ldr	r1, [pc, #308]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d044      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d107      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a46:	4b47      	ldr	r3, [pc, #284]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d119      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e07f      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d003      	beq.n	8004a66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d107      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a66:	4b3f      	ldr	r3, [pc, #252]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d109      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e06f      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a76:	4b3b      	ldr	r3, [pc, #236]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e067      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a86:	4b37      	ldr	r3, [pc, #220]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f023 0203 	bic.w	r2, r3, #3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	4934      	ldr	r1, [pc, #208]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a98:	f7fd fc48 	bl	800232c <HAL_GetTick>
 8004a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9e:	e00a      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa0:	f7fd fc44 	bl	800232c <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e04f      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab6:	4b2b      	ldr	r3, [pc, #172]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 020c 	and.w	r2, r3, #12
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d1eb      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac8:	4b25      	ldr	r3, [pc, #148]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 030f 	and.w	r3, r3, #15
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d20c      	bcs.n	8004af0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad6:	4b22      	ldr	r3, [pc, #136]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ade:	4b20      	ldr	r3, [pc, #128]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d001      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e032      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004afc:	4b19      	ldr	r3, [pc, #100]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	4916      	ldr	r1, [pc, #88]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d009      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b1a:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	490e      	ldr	r1, [pc, #56]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b2e:	f000 f821 	bl	8004b74 <HAL_RCC_GetSysClockFreq>
 8004b32:	4601      	mov	r1, r0
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	091b      	lsrs	r3, r3, #4
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	4a0a      	ldr	r2, [pc, #40]	; (8004b68 <HAL_RCC_ClockConfig+0x1c0>)
 8004b40:	5cd3      	ldrb	r3, [r2, r3]
 8004b42:	fa21 f303 	lsr.w	r3, r1, r3
 8004b46:	4a09      	ldr	r2, [pc, #36]	; (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b4a:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fd fba8 	bl	80022a4 <HAL_InitTick>

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	40023c00 	.word	0x40023c00
 8004b64:	40023800 	.word	0x40023800
 8004b68:	08008704 	.word	0x08008704
 8004b6c:	20000000 	.word	0x20000000
 8004b70:	20000004 	.word	0x20000004

08004b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	607b      	str	r3, [r7, #4]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	2300      	movs	r3, #0
 8004b84:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b8a:	4b50      	ldr	r3, [pc, #320]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x158>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d007      	beq.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x32>
 8004b96:	2b08      	cmp	r3, #8
 8004b98:	d008      	beq.n	8004bac <HAL_RCC_GetSysClockFreq+0x38>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f040 808d 	bne.w	8004cba <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ba0:	4b4b      	ldr	r3, [pc, #300]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004ba2:	60bb      	str	r3, [r7, #8]
       break;
 8004ba4:	e08c      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ba6:	4b4b      	ldr	r3, [pc, #300]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004ba8:	60bb      	str	r3, [r7, #8]
      break;
 8004baa:	e089      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bac:	4b47      	ldr	r3, [pc, #284]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x158>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bb6:	4b45      	ldr	r3, [pc, #276]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x158>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d023      	beq.n	8004c0a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc2:	4b42      	ldr	r3, [pc, #264]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x158>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	099b      	lsrs	r3, r3, #6
 8004bc8:	f04f 0400 	mov.w	r4, #0
 8004bcc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	ea03 0501 	and.w	r5, r3, r1
 8004bd8:	ea04 0602 	and.w	r6, r4, r2
 8004bdc:	4a3d      	ldr	r2, [pc, #244]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004bde:	fb02 f106 	mul.w	r1, r2, r6
 8004be2:	2200      	movs	r2, #0
 8004be4:	fb02 f205 	mul.w	r2, r2, r5
 8004be8:	440a      	add	r2, r1
 8004bea:	493a      	ldr	r1, [pc, #232]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004bec:	fba5 0101 	umull	r0, r1, r5, r1
 8004bf0:	1853      	adds	r3, r2, r1
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f04f 0400 	mov.w	r4, #0
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	4623      	mov	r3, r4
 8004bfe:	f7fb fb5f 	bl	80002c0 <__aeabi_uldivmod>
 8004c02:	4603      	mov	r3, r0
 8004c04:	460c      	mov	r4, r1
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	e049      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c0a:	4b30      	ldr	r3, [pc, #192]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x158>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	099b      	lsrs	r3, r3, #6
 8004c10:	f04f 0400 	mov.w	r4, #0
 8004c14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	ea03 0501 	and.w	r5, r3, r1
 8004c20:	ea04 0602 	and.w	r6, r4, r2
 8004c24:	4629      	mov	r1, r5
 8004c26:	4632      	mov	r2, r6
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	f04f 0400 	mov.w	r4, #0
 8004c30:	0154      	lsls	r4, r2, #5
 8004c32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c36:	014b      	lsls	r3, r1, #5
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	1b49      	subs	r1, r1, r5
 8004c3e:	eb62 0206 	sbc.w	r2, r2, r6
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	f04f 0400 	mov.w	r4, #0
 8004c4a:	0194      	lsls	r4, r2, #6
 8004c4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c50:	018b      	lsls	r3, r1, #6
 8004c52:	1a5b      	subs	r3, r3, r1
 8004c54:	eb64 0402 	sbc.w	r4, r4, r2
 8004c58:	f04f 0100 	mov.w	r1, #0
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	00e2      	lsls	r2, r4, #3
 8004c62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c66:	00d9      	lsls	r1, r3, #3
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4614      	mov	r4, r2
 8004c6c:	195b      	adds	r3, r3, r5
 8004c6e:	eb44 0406 	adc.w	r4, r4, r6
 8004c72:	f04f 0100 	mov.w	r1, #0
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	02a2      	lsls	r2, r4, #10
 8004c7c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c80:	0299      	lsls	r1, r3, #10
 8004c82:	460b      	mov	r3, r1
 8004c84:	4614      	mov	r4, r2
 8004c86:	4618      	mov	r0, r3
 8004c88:	4621      	mov	r1, r4
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f04f 0400 	mov.w	r4, #0
 8004c90:	461a      	mov	r2, r3
 8004c92:	4623      	mov	r3, r4
 8004c94:	f7fb fb14 	bl	80002c0 <__aeabi_uldivmod>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	460c      	mov	r4, r1
 8004c9c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x158>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	0c1b      	lsrs	r3, r3, #16
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	3301      	adds	r3, #1
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb6:	60bb      	str	r3, [r7, #8]
      break;
 8004cb8:	e002      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cba:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004cbc:	60bb      	str	r3, [r7, #8]
      break;
 8004cbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	00f42400 	.word	0x00f42400
 8004cd4:	017d7840 	.word	0x017d7840

08004cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cdc:	4b03      	ldr	r3, [pc, #12]	; (8004cec <HAL_RCC_GetHCLKFreq+0x14>)
 8004cde:	681b      	ldr	r3, [r3, #0]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20000000 	.word	0x20000000

08004cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cf4:	f7ff fff0 	bl	8004cd8 <HAL_RCC_GetHCLKFreq>
 8004cf8:	4601      	mov	r1, r0
 8004cfa:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	0a9b      	lsrs	r3, r3, #10
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	4a03      	ldr	r2, [pc, #12]	; (8004d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d06:	5cd3      	ldrb	r3, [r2, r3]
 8004d08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40023800 	.word	0x40023800
 8004d14:	08008714 	.word	0x08008714

08004d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d1c:	f7ff ffdc 	bl	8004cd8 <HAL_RCC_GetHCLKFreq>
 8004d20:	4601      	mov	r1, r0
 8004d22:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	0b5b      	lsrs	r3, r3, #13
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	4a03      	ldr	r2, [pc, #12]	; (8004d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d2e:	5cd3      	ldrb	r3, [r2, r3]
 8004d30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	08008714 	.word	0x08008714

08004d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d010      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004d64:	4b7a      	ldr	r3, [pc, #488]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d6a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	4977      	ldr	r1, [pc, #476]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8004d82:	2301      	movs	r3, #1
 8004d84:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d010      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004d92:	4b6f      	ldr	r3, [pc, #444]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d98:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	496b      	ldr	r1, [pc, #428]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8004db0:	2301      	movs	r3, #1
 8004db2:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d022      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8004dc0:	4b63      	ldr	r3, [pc, #396]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dce:	4960      	ldr	r1, [pc, #384]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8004dde:	2301      	movs	r3, #1
 8004de0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dea:	d10c      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004dec:	4b58      	ldr	r3, [pc, #352]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	021b      	lsls	r3, r3, #8
 8004dfe:	4954      	ldr	r1, [pc, #336]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d022      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8004e12:	4b4f      	ldr	r3, [pc, #316]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e20:	494b      	ldr	r1, [pc, #300]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004e30:	2301      	movs	r3, #1
 8004e32:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e3c:	d10c      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004e3e:	4b44      	ldr	r3, [pc, #272]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	021b      	lsls	r3, r3, #8
 8004e50:	493f      	ldr	r1, [pc, #252]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 808a 	beq.w	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	4b39      	ldr	r3, [pc, #228]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	4a38      	ldr	r2, [pc, #224]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e74:	6413      	str	r3, [r2, #64]	; 0x40
 8004e76:	4b36      	ldr	r3, [pc, #216]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e82:	4b34      	ldr	r3, [pc, #208]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a33      	ldr	r2, [pc, #204]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e8e:	f7fd fa4d 	bl	800232c <HAL_GetTick>
 8004e92:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e96:	f7fd fa49 	bl	800232c <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e1d1      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ea8:	4b2a      	ldr	r3, [pc, #168]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0f0      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eb4:	4b26      	ldr	r3, [pc, #152]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ebc:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d02f      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d028      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ed2:	4b1f      	ldr	r3, [pc, #124]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eda:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004edc:	4b1e      	ldr	r3, [pc, #120]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004ede:	2201      	movs	r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ee2:	4b1d      	ldr	r3, [pc, #116]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ee8:	4a19      	ldr	r2, [pc, #100]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004eee:	4b18      	ldr	r3, [pc, #96]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d114      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004efa:	f7fd fa17 	bl	800232c <HAL_GetTick>
 8004efe:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f00:	e00a      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f02:	f7fd fa13 	bl	800232c <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e199      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f18:	4b0d      	ldr	r3, [pc, #52]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0ee      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f30:	d114      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004f32:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f46:	4902      	ldr	r1, [pc, #8]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	608b      	str	r3, [r1, #8]
 8004f4c:	e00c      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004f4e:	bf00      	nop
 8004f50:	40023800 	.word	0x40023800
 8004f54:	40007000 	.word	0x40007000
 8004f58:	42470e40 	.word	0x42470e40
 8004f5c:	4b89      	ldr	r3, [pc, #548]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	4a88      	ldr	r2, [pc, #544]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004f62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f66:	6093      	str	r3, [r2, #8]
 8004f68:	4b86      	ldr	r3, [pc, #536]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004f6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f74:	4983      	ldr	r1, [pc, #524]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d004      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8004f8c:	4b7e      	ldr	r3, [pc, #504]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8004f8e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004f9c:	4b79      	ldr	r3, [pc, #484]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fa2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	4976      	ldr	r1, [pc, #472]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d011      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004fbe:	4b71      	ldr	r3, [pc, #452]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fc4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	496d      	ldr	r1, [pc, #436]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fdc:	d101      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004fee:	4b65      	ldr	r3, [pc, #404]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	4961      	ldr	r1, [pc, #388]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d004      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b80      	cmp	r3, #128	; 0x80
 8005010:	f040 80c6 	bne.w	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005014:	4b5d      	ldr	r3, [pc, #372]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800501a:	f7fd f987 	bl	800232c <HAL_GetTick>
 800501e:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005020:	e008      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005022:	f7fd f983 	bl	800232c <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e10b      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005034:	4b53      	ldr	r3, [pc, #332]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1f0      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005040:	4a53      	ldr	r2, [pc, #332]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005046:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d023      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d019      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005078:	2b00      	cmp	r3, #0
 800507a:	d004      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005080:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005084:	d00e      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800508e:	2b00      	cmp	r3, #0
 8005090:	d019      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005096:	2b00      	cmp	r3, #0
 8005098:	d115      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050a2:	d110      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	019b      	lsls	r3, r3, #6
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	061b      	lsls	r3, r3, #24
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	071b      	lsls	r3, r3, #28
 80050be:	4931      	ldr	r1, [pc, #196]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d009      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d026      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d122      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050ee:	4b25      	ldr	r3, [pc, #148]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80050f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f4:	0e1b      	lsrs	r3, r3, #24
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	019b      	lsls	r3, r3, #6
 8005106:	431a      	orrs	r2, r3
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	061b      	lsls	r3, r3, #24
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	071b      	lsls	r3, r3, #28
 8005114:	491b      	ldr	r1, [pc, #108]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 800511c:	4b19      	ldr	r3, [pc, #100]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800511e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005122:	f023 021f 	bic.w	r2, r3, #31
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	3b01      	subs	r3, #1
 800512c:	4915      	ldr	r1, [pc, #84]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513c:	2b00      	cmp	r3, #0
 800513e:	d010      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	019b      	lsls	r3, r3, #6
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	061b      	lsls	r3, r3, #24
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	071b      	lsls	r3, r3, #28
 800515a:	490a      	ldr	r1, [pc, #40]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005162:	4b0a      	ldr	r3, [pc, #40]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005164:	2201      	movs	r2, #1
 8005166:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005168:	f7fd f8e0 	bl	800232c <HAL_GetTick>
 800516c:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800516e:	e011      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005170:	f7fd f8dc 	bl	800232c <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b02      	cmp	r3, #2
 800517c:	d90a      	bls.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e064      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005182:	bf00      	nop
 8005184:	40023800 	.word	0x40023800
 8005188:	424711e0 	.word	0x424711e0
 800518c:	42470068 	.word	0x42470068
 8005190:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005194:	4b2f      	ldr	r3, [pc, #188]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0e7      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051ac:	4b29      	ldr	r3, [pc, #164]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80051ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ba:	4926      	ldr	r1, [pc, #152]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80051ce:	4b21      	ldr	r3, [pc, #132]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80051d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	491d      	ldr	r1, [pc, #116]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00a      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80051f0:	4b18      	ldr	r3, [pc, #96]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80051f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fe:	4915      	ldr	r1, [pc, #84]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005200:	4313      	orrs	r3, r2
 8005202:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8005212:	4b10      	ldr	r3, [pc, #64]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005218:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	490c      	ldr	r1, [pc, #48]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00a      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005234:	4b07      	ldr	r3, [pc, #28]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800523a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005242:	4904      	ldr	r1, [pc, #16]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3720      	adds	r7, #32
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40023800 	.word	0x40023800

08005258 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d003      	beq.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8005276:	2b02      	cmp	r3, #2
 8005278:	f000 8098 	beq.w	80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800527c:	e12d      	b.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800527e:	4b9a      	ldr	r3, [pc, #616]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005284:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005288:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005290:	d00c      	beq.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8005292:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005296:	d802      	bhi.n	800529e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 800529c:	e082      	b.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800529e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052a2:	d047      	beq.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80052a4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80052a8:	d06f      	beq.n	800538a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 80052aa:	e07b      	b.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80052ac:	4b8f      	ldr	r3, [pc, #572]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80052ae:	617b      	str	r3, [r7, #20]
          break;
 80052b0:	e07b      	b.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80052b2:	4b8d      	ldr	r3, [pc, #564]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80052b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052c0:	d109      	bne.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80052c2:	4b89      	ldr	r3, [pc, #548]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80052c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052cc:	4a87      	ldr	r2, [pc, #540]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80052ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	e019      	b.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80052d6:	4b84      	ldr	r3, [pc, #528]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052e2:	d109      	bne.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80052e4:	4b80      	ldr	r3, [pc, #512]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80052e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052ee:	4a80      	ldr	r2, [pc, #512]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80052f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	e008      	b.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80052f8:	4b7b      	ldr	r3, [pc, #492]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80052fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005302:	4a7c      	ldr	r2, [pc, #496]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005304:	fbb2 f3f3 	udiv	r3, r2, r3
 8005308:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800530a:	4b77      	ldr	r3, [pc, #476]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800530c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005310:	099b      	lsrs	r3, r3, #6
 8005312:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	fb02 f303 	mul.w	r3, r2, r3
 800531c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800531e:	4b72      	ldr	r3, [pc, #456]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005324:	0f1b      	lsrs	r3, r3, #28
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005330:	617b      	str	r3, [r7, #20]
          break;
 8005332:	e03a      	b.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005334:	4b6c      	ldr	r3, [pc, #432]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800533c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005340:	d108      	bne.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005342:	4b69      	ldr	r3, [pc, #420]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800534a:	4a69      	ldr	r2, [pc, #420]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800534c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	e007      	b.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005354:	4b64      	ldr	r3, [pc, #400]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800535c:	4a65      	ldr	r2, [pc, #404]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800535e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005362:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005364:	4b60      	ldr	r3, [pc, #384]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	099b      	lsrs	r3, r3, #6
 800536a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	fb02 f303 	mul.w	r3, r2, r3
 8005374:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005376:	4b5c      	ldr	r3, [pc, #368]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	0f1b      	lsrs	r3, r3, #28
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	fbb2 f3f3 	udiv	r3, r2, r3
 8005386:	617b      	str	r3, [r7, #20]
          break;
 8005388:	e00f      	b.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800538a:	4b57      	ldr	r3, [pc, #348]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005396:	d102      	bne.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8005398:	4b55      	ldr	r3, [pc, #340]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800539a:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800539c:	e005      	b.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 800539e:	4b55      	ldr	r3, [pc, #340]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80053a0:	617b      	str	r3, [r7, #20]
          break;
 80053a2:	e002      	b.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]
          break;
 80053a8:	bf00      	nop
        }
      }
      break;
 80053aa:	e096      	b.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80053ac:	4b4e      	ldr	r3, [pc, #312]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80053ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053b2:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80053b6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053be:	d00c      	beq.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80053c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053c4:	d802      	bhi.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80053ca:	e082      	b.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80053cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053d0:	d047      	beq.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80053d2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80053d6:	d06f      	beq.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80053d8:	e07b      	b.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80053da:	4b44      	ldr	r3, [pc, #272]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80053dc:	617b      	str	r3, [r7, #20]
          break;
 80053de:	e07b      	b.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80053e0:	4b41      	ldr	r3, [pc, #260]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80053e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053ee:	d109      	bne.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80053f0:	4b3d      	ldr	r3, [pc, #244]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80053f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053fa:	4a3c      	ldr	r2, [pc, #240]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80053fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	e019      	b.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005404:	4b38      	ldr	r3, [pc, #224]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800540c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005410:	d109      	bne.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005412:	4b35      	ldr	r3, [pc, #212]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800541c:	4a34      	ldr	r2, [pc, #208]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800541e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005422:	613b      	str	r3, [r7, #16]
 8005424:	e008      	b.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005426:	4b30      	ldr	r3, [pc, #192]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800542c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005430:	4a30      	ldr	r2, [pc, #192]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005432:	fbb2 f3f3 	udiv	r3, r2, r3
 8005436:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005438:	4b2b      	ldr	r3, [pc, #172]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800543a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800543e:	099b      	lsrs	r3, r3, #6
 8005440:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	fb02 f303 	mul.w	r3, r2, r3
 800544a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800544c:	4b26      	ldr	r3, [pc, #152]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800544e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005452:	0f1b      	lsrs	r3, r3, #28
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	fbb2 f3f3 	udiv	r3, r2, r3
 800545e:	617b      	str	r3, [r7, #20]
          break;
 8005460:	e03a      	b.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005462:	4b21      	ldr	r3, [pc, #132]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800546a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800546e:	d108      	bne.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005470:	4b1d      	ldr	r3, [pc, #116]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005478:	4a1d      	ldr	r2, [pc, #116]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800547a:	fbb2 f3f3 	udiv	r3, r2, r3
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	e007      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005482:	4b19      	ldr	r3, [pc, #100]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800548a:	4a1a      	ldr	r2, [pc, #104]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800548c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005490:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005492:	4b15      	ldr	r3, [pc, #84]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	099b      	lsrs	r3, r3, #6
 8005498:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	fb02 f303 	mul.w	r3, r2, r3
 80054a2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80054a4:	4b10      	ldr	r3, [pc, #64]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	0f1b      	lsrs	r3, r3, #28
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b4:	617b      	str	r3, [r7, #20]
          break;
 80054b6:	e00f      	b.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80054b8:	4b0b      	ldr	r3, [pc, #44]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054c4:	d102      	bne.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 80054c6:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80054c8:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80054ca:	e005      	b.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 80054cc:	4b09      	ldr	r3, [pc, #36]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80054ce:	617b      	str	r3, [r7, #20]
          break;
 80054d0:	e002      	b.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]
          break;
 80054d6:	bf00      	nop
        }
      }
      break;
 80054d8:	bf00      	nop
    }
  }
  return frequency;
 80054da:	697b      	ldr	r3, [r7, #20]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	371c      	adds	r7, #28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	40023800 	.word	0x40023800
 80054ec:	00bb8000 	.word	0x00bb8000
 80054f0:	017d7840 	.word	0x017d7840
 80054f4:	00f42400 	.word	0x00f42400

080054f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d075      	beq.n	80055fc <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005510:	4ba2      	ldr	r3, [pc, #648]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f003 030c 	and.w	r3, r3, #12
 8005518:	2b04      	cmp	r3, #4
 800551a:	d00c      	beq.n	8005536 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800551c:	4b9f      	ldr	r3, [pc, #636]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005524:	2b08      	cmp	r3, #8
 8005526:	d112      	bne.n	800554e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005528:	4b9c      	ldr	r3, [pc, #624]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005534:	d10b      	bne.n	800554e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005536:	4b99      	ldr	r3, [pc, #612]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d05b      	beq.n	80055fa <HAL_RCC_OscConfig+0x102>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d157      	bne.n	80055fa <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e20b      	b.n	8005966 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005556:	d106      	bne.n	8005566 <HAL_RCC_OscConfig+0x6e>
 8005558:	4b90      	ldr	r3, [pc, #576]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a8f      	ldr	r2, [pc, #572]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 800555e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	e01d      	b.n	80055a2 <HAL_RCC_OscConfig+0xaa>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800556e:	d10c      	bne.n	800558a <HAL_RCC_OscConfig+0x92>
 8005570:	4b8a      	ldr	r3, [pc, #552]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a89      	ldr	r2, [pc, #548]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 8005576:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	4b87      	ldr	r3, [pc, #540]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a86      	ldr	r2, [pc, #536]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 8005582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	e00b      	b.n	80055a2 <HAL_RCC_OscConfig+0xaa>
 800558a:	4b84      	ldr	r3, [pc, #528]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a83      	ldr	r2, [pc, #524]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 8005590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	4b81      	ldr	r3, [pc, #516]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a80      	ldr	r2, [pc, #512]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 800559c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d013      	beq.n	80055d2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055aa:	f7fc febf 	bl	800232c <HAL_GetTick>
 80055ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055b2:	f7fc febb 	bl	800232c <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b64      	cmp	r3, #100	; 0x64
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e1d0      	b.n	8005966 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055c4:	4b75      	ldr	r3, [pc, #468]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0f0      	beq.n	80055b2 <HAL_RCC_OscConfig+0xba>
 80055d0:	e014      	b.n	80055fc <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d2:	f7fc feab 	bl	800232c <HAL_GetTick>
 80055d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055da:	f7fc fea7 	bl	800232c <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b64      	cmp	r3, #100	; 0x64
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e1bc      	b.n	8005966 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ec:	4b6b      	ldr	r3, [pc, #428]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f0      	bne.n	80055da <HAL_RCC_OscConfig+0xe2>
 80055f8:	e000      	b.n	80055fc <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055fa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d063      	beq.n	80056d0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005608:	4b64      	ldr	r3, [pc, #400]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f003 030c 	and.w	r3, r3, #12
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00b      	beq.n	800562c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005614:	4b61      	ldr	r3, [pc, #388]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800561c:	2b08      	cmp	r3, #8
 800561e:	d11c      	bne.n	800565a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005620:	4b5e      	ldr	r3, [pc, #376]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d116      	bne.n	800565a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800562c:	4b5b      	ldr	r3, [pc, #364]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <HAL_RCC_OscConfig+0x14c>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d001      	beq.n	8005644 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e190      	b.n	8005966 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005644:	4b55      	ldr	r3, [pc, #340]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	4952      	ldr	r1, [pc, #328]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 8005654:	4313      	orrs	r3, r2
 8005656:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005658:	e03a      	b.n	80056d0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d020      	beq.n	80056a4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005662:	4b4f      	ldr	r3, [pc, #316]	; (80057a0 <HAL_RCC_OscConfig+0x2a8>)
 8005664:	2201      	movs	r2, #1
 8005666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fc fe60 	bl	800232c <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005670:	f7fc fe5c 	bl	800232c <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e171      	b.n	8005966 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005682:	4b46      	ldr	r3, [pc, #280]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0f0      	beq.n	8005670 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800568e:	4b43      	ldr	r3, [pc, #268]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	493f      	ldr	r1, [pc, #252]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	600b      	str	r3, [r1, #0]
 80056a2:	e015      	b.n	80056d0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056a4:	4b3e      	ldr	r3, [pc, #248]	; (80057a0 <HAL_RCC_OscConfig+0x2a8>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056aa:	f7fc fe3f 	bl	800232c <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056b0:	e008      	b.n	80056c4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056b2:	f7fc fe3b 	bl	800232c <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e150      	b.n	8005966 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056c4:	4b35      	ldr	r3, [pc, #212]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1f0      	bne.n	80056b2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d030      	beq.n	800573e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d016      	beq.n	8005712 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056e4:	4b2f      	ldr	r3, [pc, #188]	; (80057a4 <HAL_RCC_OscConfig+0x2ac>)
 80056e6:	2201      	movs	r2, #1
 80056e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ea:	f7fc fe1f 	bl	800232c <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056f0:	e008      	b.n	8005704 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056f2:	f7fc fe1b 	bl	800232c <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e130      	b.n	8005966 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005704:	4b25      	ldr	r3, [pc, #148]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 8005706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0f0      	beq.n	80056f2 <HAL_RCC_OscConfig+0x1fa>
 8005710:	e015      	b.n	800573e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005712:	4b24      	ldr	r3, [pc, #144]	; (80057a4 <HAL_RCC_OscConfig+0x2ac>)
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005718:	f7fc fe08 	bl	800232c <HAL_GetTick>
 800571c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005720:	f7fc fe04 	bl	800232c <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e119      	b.n	8005966 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005732:	4b1a      	ldr	r3, [pc, #104]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 8005734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1f0      	bne.n	8005720 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0304 	and.w	r3, r3, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 809f 	beq.w	800588a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800574c:	2300      	movs	r3, #0
 800574e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005750:	4b12      	ldr	r3, [pc, #72]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10f      	bne.n	800577c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	4b0e      	ldr	r3, [pc, #56]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	4a0d      	ldr	r2, [pc, #52]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 8005766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800576a:	6413      	str	r3, [r2, #64]	; 0x40
 800576c:	4b0b      	ldr	r3, [pc, #44]	; (800579c <HAL_RCC_OscConfig+0x2a4>)
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005778:	2301      	movs	r3, #1
 800577a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800577c:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <HAL_RCC_OscConfig+0x2b0>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005784:	2b00      	cmp	r3, #0
 8005786:	d120      	bne.n	80057ca <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005788:	4b07      	ldr	r3, [pc, #28]	; (80057a8 <HAL_RCC_OscConfig+0x2b0>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a06      	ldr	r2, [pc, #24]	; (80057a8 <HAL_RCC_OscConfig+0x2b0>)
 800578e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005792:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005794:	f7fc fdca 	bl	800232c <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800579a:	e010      	b.n	80057be <HAL_RCC_OscConfig+0x2c6>
 800579c:	40023800 	.word	0x40023800
 80057a0:	42470000 	.word	0x42470000
 80057a4:	42470e80 	.word	0x42470e80
 80057a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ac:	f7fc fdbe 	bl	800232c <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e0d3      	b.n	8005966 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057be:	4b6c      	ldr	r3, [pc, #432]	; (8005970 <HAL_RCC_OscConfig+0x478>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0f0      	beq.n	80057ac <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d106      	bne.n	80057e0 <HAL_RCC_OscConfig+0x2e8>
 80057d2:	4b68      	ldr	r3, [pc, #416]	; (8005974 <HAL_RCC_OscConfig+0x47c>)
 80057d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d6:	4a67      	ldr	r2, [pc, #412]	; (8005974 <HAL_RCC_OscConfig+0x47c>)
 80057d8:	f043 0301 	orr.w	r3, r3, #1
 80057dc:	6713      	str	r3, [r2, #112]	; 0x70
 80057de:	e01c      	b.n	800581a <HAL_RCC_OscConfig+0x322>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	2b05      	cmp	r3, #5
 80057e6:	d10c      	bne.n	8005802 <HAL_RCC_OscConfig+0x30a>
 80057e8:	4b62      	ldr	r3, [pc, #392]	; (8005974 <HAL_RCC_OscConfig+0x47c>)
 80057ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ec:	4a61      	ldr	r2, [pc, #388]	; (8005974 <HAL_RCC_OscConfig+0x47c>)
 80057ee:	f043 0304 	orr.w	r3, r3, #4
 80057f2:	6713      	str	r3, [r2, #112]	; 0x70
 80057f4:	4b5f      	ldr	r3, [pc, #380]	; (8005974 <HAL_RCC_OscConfig+0x47c>)
 80057f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f8:	4a5e      	ldr	r2, [pc, #376]	; (8005974 <HAL_RCC_OscConfig+0x47c>)
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005800:	e00b      	b.n	800581a <HAL_RCC_OscConfig+0x322>
 8005802:	4b5c      	ldr	r3, [pc, #368]	; (8005974 <HAL_RCC_OscConfig+0x47c>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	4a5b      	ldr	r2, [pc, #364]	; (8005974 <HAL_RCC_OscConfig+0x47c>)
 8005808:	f023 0301 	bic.w	r3, r3, #1
 800580c:	6713      	str	r3, [r2, #112]	; 0x70
 800580e:	4b59      	ldr	r3, [pc, #356]	; (8005974 <HAL_RCC_OscConfig+0x47c>)
 8005810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005812:	4a58      	ldr	r2, [pc, #352]	; (8005974 <HAL_RCC_OscConfig+0x47c>)
 8005814:	f023 0304 	bic.w	r3, r3, #4
 8005818:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d015      	beq.n	800584e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005822:	f7fc fd83 	bl	800232c <HAL_GetTick>
 8005826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005828:	e00a      	b.n	8005840 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800582a:	f7fc fd7f 	bl	800232c <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	f241 3288 	movw	r2, #5000	; 0x1388
 8005838:	4293      	cmp	r3, r2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e092      	b.n	8005966 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005840:	4b4c      	ldr	r3, [pc, #304]	; (8005974 <HAL_RCC_OscConfig+0x47c>)
 8005842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0ee      	beq.n	800582a <HAL_RCC_OscConfig+0x332>
 800584c:	e014      	b.n	8005878 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800584e:	f7fc fd6d 	bl	800232c <HAL_GetTick>
 8005852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005854:	e00a      	b.n	800586c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005856:	f7fc fd69 	bl	800232c <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	f241 3288 	movw	r2, #5000	; 0x1388
 8005864:	4293      	cmp	r3, r2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e07c      	b.n	8005966 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800586c:	4b41      	ldr	r3, [pc, #260]	; (8005974 <HAL_RCC_OscConfig+0x47c>)
 800586e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1ee      	bne.n	8005856 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005878:	7dfb      	ldrb	r3, [r7, #23]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d105      	bne.n	800588a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800587e:	4b3d      	ldr	r3, [pc, #244]	; (8005974 <HAL_RCC_OscConfig+0x47c>)
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	4a3c      	ldr	r2, [pc, #240]	; (8005974 <HAL_RCC_OscConfig+0x47c>)
 8005884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005888:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d068      	beq.n	8005964 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005892:	4b38      	ldr	r3, [pc, #224]	; (8005974 <HAL_RCC_OscConfig+0x47c>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 030c 	and.w	r3, r3, #12
 800589a:	2b08      	cmp	r3, #8
 800589c:	d060      	beq.n	8005960 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d145      	bne.n	8005932 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a6:	4b34      	ldr	r3, [pc, #208]	; (8005978 <HAL_RCC_OscConfig+0x480>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ac:	f7fc fd3e 	bl	800232c <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b4:	f7fc fd3a 	bl	800232c <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e04f      	b.n	8005966 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058c6:	4b2b      	ldr	r3, [pc, #172]	; (8005974 <HAL_RCC_OscConfig+0x47c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1f0      	bne.n	80058b4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69da      	ldr	r2, [r3, #28]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	019b      	lsls	r3, r3, #6
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	085b      	lsrs	r3, r3, #1
 80058ea:	3b01      	subs	r3, #1
 80058ec:	041b      	lsls	r3, r3, #16
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	061b      	lsls	r3, r3, #24
 80058f6:	431a      	orrs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fc:	071b      	lsls	r3, r3, #28
 80058fe:	491d      	ldr	r1, [pc, #116]	; (8005974 <HAL_RCC_OscConfig+0x47c>)
 8005900:	4313      	orrs	r3, r2
 8005902:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005904:	4b1c      	ldr	r3, [pc, #112]	; (8005978 <HAL_RCC_OscConfig+0x480>)
 8005906:	2201      	movs	r2, #1
 8005908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800590a:	f7fc fd0f 	bl	800232c <HAL_GetTick>
 800590e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005910:	e008      	b.n	8005924 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005912:	f7fc fd0b 	bl	800232c <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b02      	cmp	r3, #2
 800591e:	d901      	bls.n	8005924 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e020      	b.n	8005966 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005924:	4b13      	ldr	r3, [pc, #76]	; (8005974 <HAL_RCC_OscConfig+0x47c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0f0      	beq.n	8005912 <HAL_RCC_OscConfig+0x41a>
 8005930:	e018      	b.n	8005964 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005932:	4b11      	ldr	r3, [pc, #68]	; (8005978 <HAL_RCC_OscConfig+0x480>)
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005938:	f7fc fcf8 	bl	800232c <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005940:	f7fc fcf4 	bl	800232c <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e009      	b.n	8005966 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005952:	4b08      	ldr	r3, [pc, #32]	; (8005974 <HAL_RCC_OscConfig+0x47c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1f0      	bne.n	8005940 <HAL_RCC_OscConfig+0x448>
 800595e:	e001      	b.n	8005964 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e000      	b.n	8005966 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	40007000 	.word	0x40007000
 8005974:	40023800 	.word	0x40023800
 8005978:	42470060 	.word	0x42470060

0800597c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e022      	b.n	80059d4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d105      	bne.n	80059a6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7fc f9e1 	bl	8001d68 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2203      	movs	r2, #3
 80059aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f814 	bl	80059dc <HAL_SD_InitCard>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e00a      	b.n	80059d4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80059dc:	b5b0      	push	{r4, r5, r7, lr}
 80059de:	b08e      	sub	sp, #56	; 0x38
 80059e0:	af04      	add	r7, sp, #16
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80059e8:	2300      	movs	r3, #0
 80059ea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80059ec:	2300      	movs	r3, #0
 80059ee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80059f4:	2300      	movs	r3, #0
 80059f6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80059f8:	2376      	movs	r3, #118	; 0x76
 80059fa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681d      	ldr	r5, [r3, #0]
 8005a00:	466c      	mov	r4, sp
 8005a02:	f107 0314 	add.w	r3, r7, #20
 8005a06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a0e:	f107 0308 	add.w	r3, r7, #8
 8005a12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a14:	4628      	mov	r0, r5
 8005a16:	f001 fa4b 	bl	8006eb0 <SDIO_Init>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e031      	b.n	8005a90 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005a2c:	4b1a      	ldr	r3, [pc, #104]	; (8005a98 <HAL_SD_InitCard+0xbc>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f001 fa72 	bl	8006f20 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005a3c:	4b16      	ldr	r3, [pc, #88]	; (8005a98 <HAL_SD_InitCard+0xbc>)
 8005a3e:	2201      	movs	r2, #1
 8005a40:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fb18 	bl	8006078 <SD_PowerON>
 8005a48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00b      	beq.n	8005a68 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e013      	b.n	8005a90 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fa37 	bl	8005edc <SD_InitCard>
 8005a6e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00b      	beq.n	8005a8e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	431a      	orrs	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3728      	adds	r7, #40	; 0x28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bdb0      	pop	{r4, r5, r7, pc}
 8005a98:	422580a0 	.word	0x422580a0

08005a9c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aaa:	0f9b      	lsrs	r3, r3, #30
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ab6:	0e9b      	lsrs	r3, r3, #26
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ac8:	0e1b      	lsrs	r3, r3, #24
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	f003 0303 	and.w	r3, r3, #3
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ada:	0c1b      	lsrs	r3, r3, #16
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ae6:	0a1b      	lsrs	r3, r3, #8
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005afc:	0d1b      	lsrs	r3, r3, #20
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b08:	0c1b      	lsrs	r3, r3, #16
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	f003 030f 	and.w	r3, r3, #15
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b1a:	0bdb      	lsrs	r3, r3, #15
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b2c:	0b9b      	lsrs	r3, r3, #14
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b3e:	0b5b      	lsrs	r3, r3, #13
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b50:	0b1b      	lsrs	r3, r3, #12
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2200      	movs	r2, #0
 8005b62:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d163      	bne.n	8005c34 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b70:	009a      	lsls	r2, r3, #2
 8005b72:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b76:	4013      	ands	r3, r2
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005b7c:	0f92      	lsrs	r2, r2, #30
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b88:	0edb      	lsrs	r3, r3, #27
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	f003 0307 	and.w	r3, r3, #7
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b9a:	0e1b      	lsrs	r3, r3, #24
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	f003 0307 	and.w	r3, r3, #7
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bac:	0d5b      	lsrs	r3, r3, #21
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bbe:	0c9b      	lsrs	r3, r3, #18
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	f003 0307 	and.w	r3, r3, #7
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bd0:	0bdb      	lsrs	r3, r3, #15
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	7e1b      	ldrb	r3, [r3, #24]
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	3302      	adds	r3, #2
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005bfe:	fb02 f203 	mul.w	r2, r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	7a1b      	ldrb	r3, [r3, #8]
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	f003 030f 	and.w	r3, r3, #15
 8005c10:	2201      	movs	r2, #1
 8005c12:	409a      	lsls	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005c20:	0a52      	lsrs	r2, r2, #9
 8005c22:	fb02 f203 	mul.w	r2, r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c30:	661a      	str	r2, [r3, #96]	; 0x60
 8005c32:	e031      	b.n	8005c98 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d11d      	bne.n	8005c78 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c40:	041b      	lsls	r3, r3, #16
 8005c42:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c4a:	0c1b      	lsrs	r3, r3, #16
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	3301      	adds	r3, #1
 8005c58:	029a      	lsls	r2, r3, #10
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c6c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	661a      	str	r2, [r3, #96]	; 0x60
 8005c76:	e00f      	b.n	8005c98 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a58      	ldr	r2, [pc, #352]	; (8005de0 <HAL_SD_GetCardCSD+0x344>)
 8005c7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e09d      	b.n	8005dd4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c9c:	0b9b      	lsrs	r3, r3, #14
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cae:	09db      	lsrs	r3, r3, #7
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd0:	0fdb      	lsrs	r3, r3, #31
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cdc:	0f5b      	lsrs	r3, r3, #29
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	f003 0303 	and.w	r3, r3, #3
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cee:	0e9b      	lsrs	r3, r3, #26
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d00:	0d9b      	lsrs	r3, r3, #22
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	f003 030f 	and.w	r3, r3, #15
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d12:	0d5b      	lsrs	r3, r3, #21
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2e:	0c1b      	lsrs	r3, r3, #16
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d42:	0bdb      	lsrs	r3, r3, #15
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d56:	0b9b      	lsrs	r3, r3, #14
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6a:	0b5b      	lsrs	r3, r3, #13
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7e:	0b1b      	lsrs	r3, r3, #12
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d92:	0a9b      	lsrs	r3, r3, #10
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da6:	0a1b      	lsrs	r3, r3, #8
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	f003 0303 	and.w	r3, r3, #3
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dba:	085b      	lsrs	r3, r3, #1
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	004005ff 	.word	0x004005ff

08005de4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005de4:	b5b0      	push	{r4, r5, r7, lr}
 8005de6:	b08e      	sub	sp, #56	; 0x38
 8005de8:	af04      	add	r7, sp, #16
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2203      	movs	r2, #3
 8005df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d02e      	beq.n	8005e5c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e04:	d106      	bne.n	8005e14 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	639a      	str	r2, [r3, #56]	; 0x38
 8005e12:	e029      	b.n	8005e68 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e1a:	d10a      	bne.n	8005e32 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f9b9 	bl	8006194 <SD_WideBus_Enable>
 8005e22:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	639a      	str	r2, [r3, #56]	; 0x38
 8005e30:	e01a      	b.n	8005e68 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10a      	bne.n	8005e4e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f9f6 	bl	800622a <SD_WideBus_Disable>
 8005e3e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	639a      	str	r2, [r3, #56]	; 0x38
 8005e4c:	e00c      	b.n	8005e68 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	639a      	str	r2, [r3, #56]	; 0x38
 8005e5a:	e005      	b.n	8005e68 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d009      	beq.n	8005e84 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a18      	ldr	r2, [pc, #96]	; (8005ed8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8005e76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e024      	b.n	8005ece <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681d      	ldr	r5, [r3, #0]
 8005eaa:	466c      	mov	r4, sp
 8005eac:	f107 0318 	add.w	r3, r7, #24
 8005eb0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005eb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005eb8:	f107 030c 	add.w	r3, r7, #12
 8005ebc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	f000 fff6 	bl	8006eb0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3728      	adds	r7, #40	; 0x28
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	004005ff 	.word	0x004005ff

08005edc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005edc:	b5b0      	push	{r4, r5, r7, lr}
 8005ede:	b094      	sub	sp, #80	; 0x50
 8005ee0:	af04      	add	r7, sp, #16
 8005ee2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f001 f826 	bl	8006f3e <SDIO_GetPowerState>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d102      	bne.n	8005efe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005ef8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005efc:	e0b7      	b.n	800606e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d02f      	beq.n	8005f66 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f001 f9a5 	bl	800725a <SDMMC_CmdSendCID>
 8005f10:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <SD_InitCard+0x40>
    {
      return errorstate;
 8005f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1a:	e0a8      	b.n	800606e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2100      	movs	r1, #0
 8005f22:	4618      	mov	r0, r3
 8005f24:	f001 f850 	bl	8006fc8 <SDIO_GetResponse>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2104      	movs	r1, #4
 8005f34:	4618      	mov	r0, r3
 8005f36:	f001 f847 	bl	8006fc8 <SDIO_GetResponse>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2108      	movs	r1, #8
 8005f46:	4618      	mov	r0, r3
 8005f48:	f001 f83e 	bl	8006fc8 <SDIO_GetResponse>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	210c      	movs	r1, #12
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f001 f835 	bl	8006fc8 <SDIO_GetResponse>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d00d      	beq.n	8005f8a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f107 020e 	add.w	r2, r7, #14
 8005f76:	4611      	mov	r1, r2
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f001 f9ab 	bl	80072d4 <SDMMC_CmdSetRelAdd>
 8005f7e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <SD_InitCard+0xae>
    {
      return errorstate;
 8005f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f88:	e071      	b.n	800606e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d036      	beq.n	8006000 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005f92:	89fb      	ldrh	r3, [r7, #14]
 8005f94:	461a      	mov	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa2:	041b      	lsls	r3, r3, #16
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	f001 f975 	bl	8007296 <SDMMC_CmdSendCSD>
 8005fac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb6:	e05a      	b.n	800606e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f001 f802 	bl	8006fc8 <SDIO_GetResponse>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2104      	movs	r1, #4
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 fff9 	bl	8006fc8 <SDIO_GetResponse>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2108      	movs	r1, #8
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 fff0 	bl	8006fc8 <SDIO_GetResponse>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	210c      	movs	r1, #12
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 ffe7 	bl	8006fc8 <SDIO_GetResponse>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2104      	movs	r1, #4
 8006006:	4618      	mov	r0, r3
 8006008:	f000 ffde 	bl	8006fc8 <SDIO_GetResponse>
 800600c:	4603      	mov	r3, r0
 800600e:	0d1a      	lsrs	r2, r3, #20
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006014:	f107 0310 	add.w	r3, r7, #16
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff fd3e 	bl	8005a9c <HAL_SD_GetCardCSD>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006026:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800602a:	e020      	b.n	800606e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6819      	ldr	r1, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006034:	041b      	lsls	r3, r3, #16
 8006036:	f04f 0400 	mov.w	r4, #0
 800603a:	461a      	mov	r2, r3
 800603c:	4623      	mov	r3, r4
 800603e:	4608      	mov	r0, r1
 8006040:	f001 f823 	bl	800708a <SDMMC_CmdSelDesel>
 8006044:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <SD_InitCard+0x174>
  {
    return errorstate;
 800604c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800604e:	e00e      	b.n	800606e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681d      	ldr	r5, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	466c      	mov	r4, sp
 8006058:	f103 0210 	add.w	r2, r3, #16
 800605c:	ca07      	ldmia	r2, {r0, r1, r2}
 800605e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006062:	3304      	adds	r3, #4
 8006064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006066:	4628      	mov	r0, r5
 8006068:	f000 ff22 	bl	8006eb0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3740      	adds	r7, #64	; 0x40
 8006072:	46bd      	mov	sp, r7
 8006074:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006078 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	2300      	movs	r3, #0
 800608a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4618      	mov	r0, r3
 8006092:	f001 f81d 	bl	80070d0 <SDMMC_CmdGoIdleState>
 8006096:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	e072      	b.n	8006188 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f001 f830 	bl	800710c <SDMMC_CmdOperCond>
 80060ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00d      	beq.n	80060d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4618      	mov	r0, r3
 80060c0:	f001 f806 	bl	80070d0 <SDMMC_CmdGoIdleState>
 80060c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d004      	beq.n	80060d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	e05b      	b.n	8006188 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d137      	bne.n	800614e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2100      	movs	r1, #0
 80060e4:	4618      	mov	r0, r3
 80060e6:	f001 f830 	bl	800714a <SDMMC_CmdAppCommand>
 80060ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d02d      	beq.n	800614e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80060f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80060f6:	e047      	b.n	8006188 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2100      	movs	r1, #0
 80060fe:	4618      	mov	r0, r3
 8006100:	f001 f823 	bl	800714a <SDMMC_CmdAppCommand>
 8006104:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <SD_PowerON+0x98>
    {
      return errorstate;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	e03b      	b.n	8006188 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	491e      	ldr	r1, [pc, #120]	; (8006190 <SD_PowerON+0x118>)
 8006116:	4618      	mov	r0, r3
 8006118:	f001 f839 	bl	800718e <SDMMC_CmdAppOperCommand>
 800611c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006124:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006128:	e02e      	b.n	8006188 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2100      	movs	r1, #0
 8006130:	4618      	mov	r0, r3
 8006132:	f000 ff49 	bl	8006fc8 <SDIO_GetResponse>
 8006136:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	0fdb      	lsrs	r3, r3, #31
 800613c:	2b01      	cmp	r3, #1
 800613e:	d101      	bne.n	8006144 <SD_PowerON+0xcc>
 8006140:	2301      	movs	r3, #1
 8006142:	e000      	b.n	8006146 <SD_PowerON+0xce>
 8006144:	2300      	movs	r3, #0
 8006146:	613b      	str	r3, [r7, #16]

    count++;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	3301      	adds	r3, #1
 800614c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006154:	4293      	cmp	r3, r2
 8006156:	d802      	bhi.n	800615e <SD_PowerON+0xe6>
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0cc      	beq.n	80060f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006164:	4293      	cmp	r3, r2
 8006166:	d902      	bls.n	800616e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006168:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800616c:	e00c      	b.n	8006188 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	645a      	str	r2, [r3, #68]	; 0x44
 800617e:	e002      	b.n	8006186 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	c1100000 	.word	0xc1100000

08006194 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800619c:	2300      	movs	r3, #0
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	2300      	movs	r3, #0
 80061a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2100      	movs	r1, #0
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 ff0c 	bl	8006fc8 <SDIO_GetResponse>
 80061b0:	4603      	mov	r3, r0
 80061b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061ba:	d102      	bne.n	80061c2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80061bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061c0:	e02f      	b.n	8006222 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80061c2:	f107 030c 	add.w	r3, r7, #12
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f879 	bl	80062c0 <SD_FindSCR>
 80061ce:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	e023      	b.n	8006222 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d01c      	beq.n	800621e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ec:	041b      	lsls	r3, r3, #16
 80061ee:	4619      	mov	r1, r3
 80061f0:	4610      	mov	r0, r2
 80061f2:	f000 ffaa 	bl	800714a <SDMMC_CmdAppCommand>
 80061f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	e00f      	b.n	8006222 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2102      	movs	r1, #2
 8006208:	4618      	mov	r0, r3
 800620a:	f000 ffe3 	bl	80071d4 <SDMMC_CmdBusWidth>
 800620e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	e003      	b.n	8006222 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800621a:	2300      	movs	r3, #0
 800621c:	e001      	b.n	8006222 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800621e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b086      	sub	sp, #24
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006232:	2300      	movs	r3, #0
 8006234:	60fb      	str	r3, [r7, #12]
 8006236:	2300      	movs	r3, #0
 8006238:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2100      	movs	r1, #0
 8006240:	4618      	mov	r0, r3
 8006242:	f000 fec1 	bl	8006fc8 <SDIO_GetResponse>
 8006246:	4603      	mov	r3, r0
 8006248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006250:	d102      	bne.n	8006258 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006252:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006256:	e02f      	b.n	80062b8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006258:	f107 030c 	add.w	r3, r7, #12
 800625c:	4619      	mov	r1, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f82e 	bl	80062c0 <SD_FindSCR>
 8006264:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	e023      	b.n	80062b8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d01c      	beq.n	80062b4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006282:	041b      	lsls	r3, r3, #16
 8006284:	4619      	mov	r1, r3
 8006286:	4610      	mov	r0, r2
 8006288:	f000 ff5f 	bl	800714a <SDMMC_CmdAppCommand>
 800628c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	e00f      	b.n	80062b8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2100      	movs	r1, #0
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 ff98 	bl	80071d4 <SDMMC_CmdBusWidth>
 80062a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	e003      	b.n	80062b8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e001      	b.n	80062b8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80062b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80062c0:	b590      	push	{r4, r7, lr}
 80062c2:	b08f      	sub	sp, #60	; 0x3c
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80062ca:	f7fc f82f 	bl	800232c <HAL_GetTick>
 80062ce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80062d4:	2300      	movs	r3, #0
 80062d6:	60bb      	str	r3, [r7, #8]
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2108      	movs	r1, #8
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 fead 	bl	8007046 <SDMMC_CmdBlockLength>
 80062ec:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80062ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	e0a9      	b.n	800644c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006300:	041b      	lsls	r3, r3, #16
 8006302:	4619      	mov	r1, r3
 8006304:	4610      	mov	r0, r2
 8006306:	f000 ff20 	bl	800714a <SDMMC_CmdAppCommand>
 800630a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	e09a      	b.n	800644c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006316:	f04f 33ff 	mov.w	r3, #4294967295
 800631a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800631c:	2308      	movs	r3, #8
 800631e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006320:	2330      	movs	r3, #48	; 0x30
 8006322:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006324:	2302      	movs	r3, #2
 8006326:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006328:	2300      	movs	r3, #0
 800632a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800632c:	2301      	movs	r3, #1
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f107 0210 	add.w	r2, r7, #16
 8006338:	4611      	mov	r1, r2
 800633a:	4618      	mov	r0, r3
 800633c:	f000 fe57 	bl	8006fee <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4618      	mov	r0, r3
 8006346:	f000 ff67 	bl	8007218 <SDMMC_CmdSendSCR>
 800634a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	2b00      	cmp	r3, #0
 8006350:	d022      	beq.n	8006398 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	e07a      	b.n	800644c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800635c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00e      	beq.n	8006382 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6819      	ldr	r1, [r3, #0]
 8006368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	f107 0208 	add.w	r2, r7, #8
 8006370:	18d4      	adds	r4, r2, r3
 8006372:	4608      	mov	r0, r1
 8006374:	f000 fdc7 	bl	8006f06 <SDIO_ReadFIFO>
 8006378:	4603      	mov	r3, r0
 800637a:	6023      	str	r3, [r4, #0]
      index++;
 800637c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637e:	3301      	adds	r3, #1
 8006380:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006382:	f7fb ffd3 	bl	800232c <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006390:	d102      	bne.n	8006398 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006392:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006396:	e059      	b.n	800644c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800639e:	f240 432a 	movw	r3, #1066	; 0x42a
 80063a2:	4013      	ands	r3, r2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0d6      	beq.n	8006356 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ae:	f003 0308 	and.w	r3, r3, #8
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d005      	beq.n	80063c2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2208      	movs	r2, #8
 80063bc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80063be:	2308      	movs	r3, #8
 80063c0:	e044      	b.n	800644c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d005      	beq.n	80063dc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2202      	movs	r2, #2
 80063d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80063d8:	2302      	movs	r3, #2
 80063da:	e037      	b.n	800644c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d005      	beq.n	80063f6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2220      	movs	r2, #32
 80063f0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80063f2:	2320      	movs	r3, #32
 80063f4:	e02a      	b.n	800644c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f240 523a 	movw	r2, #1338	; 0x53a
 80063fe:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	061a      	lsls	r2, r3, #24
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	021b      	lsls	r3, r3, #8
 8006408:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800640c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	0a1b      	lsrs	r3, r3, #8
 8006412:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006416:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	0e1b      	lsrs	r3, r3, #24
 800641c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	601a      	str	r2, [r3, #0]
    scr++;
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	3304      	adds	r3, #4
 8006426:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	061a      	lsls	r2, r3, #24
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	021b      	lsls	r3, r3, #8
 8006430:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006434:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	0a1b      	lsrs	r3, r3, #8
 800643a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800643e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	0e1b      	lsrs	r3, r3, #24
 8006444:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006448:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	373c      	adds	r7, #60	; 0x3c
 8006450:	46bd      	mov	sp, r7
 8006452:	bd90      	pop	{r4, r7, pc}

08006454 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e034      	b.n	80064d4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d106      	bne.n	8006484 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f7fb fdc8 	bl	8002014 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3308      	adds	r3, #8
 800648c:	4619      	mov	r1, r3
 800648e:	4610      	mov	r0, r2
 8006490:	f000 fc0a 	bl	8006ca8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6818      	ldr	r0, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	461a      	mov	r2, r3
 800649e:	68b9      	ldr	r1, [r7, #8]
 80064a0:	f000 fc72 	bl	8006d88 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6858      	ldr	r0, [r3, #4]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b0:	6879      	ldr	r1, [r7, #4]
 80064b2:	f000 fcbd 	bl	8006e30 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	6892      	ldr	r2, [r2, #8]
 80064be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	6892      	ldr	r2, [r2, #8]
 80064ca:	f041 0101 	orr.w	r1, r1, #1
 80064ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e03f      	b.n	800656e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d106      	bne.n	8006508 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7fb fc98 	bl	8001e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2224      	movs	r2, #36	; 0x24
 800650c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800651e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f829 	bl	8006578 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	691a      	ldr	r2, [r3, #16]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006534:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	695a      	ldr	r2, [r3, #20]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006544:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006554:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2220      	movs	r2, #32
 8006560:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2220      	movs	r2, #32
 8006568:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	b085      	sub	sp, #20
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	431a      	orrs	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80065ba:	f023 030c 	bic.w	r3, r3, #12
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	6812      	ldr	r2, [r2, #0]
 80065c2:	68f9      	ldr	r1, [r7, #12]
 80065c4:	430b      	orrs	r3, r1
 80065c6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699a      	ldr	r2, [r3, #24]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065e6:	f040 8199 	bne.w	800691c <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4ac6      	ldr	r2, [pc, #792]	; (8006908 <UART_SetConfig+0x390>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00f      	beq.n	8006614 <UART_SetConfig+0x9c>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4ac4      	ldr	r2, [pc, #784]	; (800690c <UART_SetConfig+0x394>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00a      	beq.n	8006614 <UART_SetConfig+0x9c>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4ac3      	ldr	r2, [pc, #780]	; (8006910 <UART_SetConfig+0x398>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d005      	beq.n	8006614 <UART_SetConfig+0x9c>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4ac1      	ldr	r2, [pc, #772]	; (8006914 <UART_SetConfig+0x39c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	f040 80bd 	bne.w	800678e <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006614:	f7fe fb80 	bl	8004d18 <HAL_RCC_GetPCLK2Freq>
 8006618:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	461d      	mov	r5, r3
 800661e:	f04f 0600 	mov.w	r6, #0
 8006622:	46a8      	mov	r8, r5
 8006624:	46b1      	mov	r9, r6
 8006626:	eb18 0308 	adds.w	r3, r8, r8
 800662a:	eb49 0409 	adc.w	r4, r9, r9
 800662e:	4698      	mov	r8, r3
 8006630:	46a1      	mov	r9, r4
 8006632:	eb18 0805 	adds.w	r8, r8, r5
 8006636:	eb49 0906 	adc.w	r9, r9, r6
 800663a:	f04f 0100 	mov.w	r1, #0
 800663e:	f04f 0200 	mov.w	r2, #0
 8006642:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006646:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800664a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800664e:	4688      	mov	r8, r1
 8006650:	4691      	mov	r9, r2
 8006652:	eb18 0005 	adds.w	r0, r8, r5
 8006656:	eb49 0106 	adc.w	r1, r9, r6
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	461d      	mov	r5, r3
 8006660:	f04f 0600 	mov.w	r6, #0
 8006664:	196b      	adds	r3, r5, r5
 8006666:	eb46 0406 	adc.w	r4, r6, r6
 800666a:	461a      	mov	r2, r3
 800666c:	4623      	mov	r3, r4
 800666e:	f7f9 fe27 	bl	80002c0 <__aeabi_uldivmod>
 8006672:	4603      	mov	r3, r0
 8006674:	460c      	mov	r4, r1
 8006676:	461a      	mov	r2, r3
 8006678:	4ba7      	ldr	r3, [pc, #668]	; (8006918 <UART_SetConfig+0x3a0>)
 800667a:	fba3 2302 	umull	r2, r3, r3, r2
 800667e:	095b      	lsrs	r3, r3, #5
 8006680:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	461d      	mov	r5, r3
 8006688:	f04f 0600 	mov.w	r6, #0
 800668c:	46a9      	mov	r9, r5
 800668e:	46b2      	mov	sl, r6
 8006690:	eb19 0309 	adds.w	r3, r9, r9
 8006694:	eb4a 040a 	adc.w	r4, sl, sl
 8006698:	4699      	mov	r9, r3
 800669a:	46a2      	mov	sl, r4
 800669c:	eb19 0905 	adds.w	r9, r9, r5
 80066a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80066a4:	f04f 0100 	mov.w	r1, #0
 80066a8:	f04f 0200 	mov.w	r2, #0
 80066ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066b8:	4689      	mov	r9, r1
 80066ba:	4692      	mov	sl, r2
 80066bc:	eb19 0005 	adds.w	r0, r9, r5
 80066c0:	eb4a 0106 	adc.w	r1, sl, r6
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	461d      	mov	r5, r3
 80066ca:	f04f 0600 	mov.w	r6, #0
 80066ce:	196b      	adds	r3, r5, r5
 80066d0:	eb46 0406 	adc.w	r4, r6, r6
 80066d4:	461a      	mov	r2, r3
 80066d6:	4623      	mov	r3, r4
 80066d8:	f7f9 fdf2 	bl	80002c0 <__aeabi_uldivmod>
 80066dc:	4603      	mov	r3, r0
 80066de:	460c      	mov	r4, r1
 80066e0:	461a      	mov	r2, r3
 80066e2:	4b8d      	ldr	r3, [pc, #564]	; (8006918 <UART_SetConfig+0x3a0>)
 80066e4:	fba3 1302 	umull	r1, r3, r3, r2
 80066e8:	095b      	lsrs	r3, r3, #5
 80066ea:	2164      	movs	r1, #100	; 0x64
 80066ec:	fb01 f303 	mul.w	r3, r1, r3
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	3332      	adds	r3, #50	; 0x32
 80066f6:	4a88      	ldr	r2, [pc, #544]	; (8006918 <UART_SetConfig+0x3a0>)
 80066f8:	fba2 2303 	umull	r2, r3, r2, r3
 80066fc:	095b      	lsrs	r3, r3, #5
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006704:	4498      	add	r8, r3
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	461d      	mov	r5, r3
 800670a:	f04f 0600 	mov.w	r6, #0
 800670e:	46a9      	mov	r9, r5
 8006710:	46b2      	mov	sl, r6
 8006712:	eb19 0309 	adds.w	r3, r9, r9
 8006716:	eb4a 040a 	adc.w	r4, sl, sl
 800671a:	4699      	mov	r9, r3
 800671c:	46a2      	mov	sl, r4
 800671e:	eb19 0905 	adds.w	r9, r9, r5
 8006722:	eb4a 0a06 	adc.w	sl, sl, r6
 8006726:	f04f 0100 	mov.w	r1, #0
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006732:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006736:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800673a:	4689      	mov	r9, r1
 800673c:	4692      	mov	sl, r2
 800673e:	eb19 0005 	adds.w	r0, r9, r5
 8006742:	eb4a 0106 	adc.w	r1, sl, r6
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	461d      	mov	r5, r3
 800674c:	f04f 0600 	mov.w	r6, #0
 8006750:	196b      	adds	r3, r5, r5
 8006752:	eb46 0406 	adc.w	r4, r6, r6
 8006756:	461a      	mov	r2, r3
 8006758:	4623      	mov	r3, r4
 800675a:	f7f9 fdb1 	bl	80002c0 <__aeabi_uldivmod>
 800675e:	4603      	mov	r3, r0
 8006760:	460c      	mov	r4, r1
 8006762:	461a      	mov	r2, r3
 8006764:	4b6c      	ldr	r3, [pc, #432]	; (8006918 <UART_SetConfig+0x3a0>)
 8006766:	fba3 1302 	umull	r1, r3, r3, r2
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	2164      	movs	r1, #100	; 0x64
 800676e:	fb01 f303 	mul.w	r3, r1, r3
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	00db      	lsls	r3, r3, #3
 8006776:	3332      	adds	r3, #50	; 0x32
 8006778:	4a67      	ldr	r2, [pc, #412]	; (8006918 <UART_SetConfig+0x3a0>)
 800677a:	fba2 2303 	umull	r2, r3, r2, r3
 800677e:	095b      	lsrs	r3, r3, #5
 8006780:	f003 0207 	and.w	r2, r3, #7
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4442      	add	r2, r8
 800678a:	609a      	str	r2, [r3, #8]
 800678c:	e27d      	b.n	8006c8a <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800678e:	f7fe faaf 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 8006792:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	461d      	mov	r5, r3
 8006798:	f04f 0600 	mov.w	r6, #0
 800679c:	46a8      	mov	r8, r5
 800679e:	46b1      	mov	r9, r6
 80067a0:	eb18 0308 	adds.w	r3, r8, r8
 80067a4:	eb49 0409 	adc.w	r4, r9, r9
 80067a8:	4698      	mov	r8, r3
 80067aa:	46a1      	mov	r9, r4
 80067ac:	eb18 0805 	adds.w	r8, r8, r5
 80067b0:	eb49 0906 	adc.w	r9, r9, r6
 80067b4:	f04f 0100 	mov.w	r1, #0
 80067b8:	f04f 0200 	mov.w	r2, #0
 80067bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80067c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80067c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80067c8:	4688      	mov	r8, r1
 80067ca:	4691      	mov	r9, r2
 80067cc:	eb18 0005 	adds.w	r0, r8, r5
 80067d0:	eb49 0106 	adc.w	r1, r9, r6
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	461d      	mov	r5, r3
 80067da:	f04f 0600 	mov.w	r6, #0
 80067de:	196b      	adds	r3, r5, r5
 80067e0:	eb46 0406 	adc.w	r4, r6, r6
 80067e4:	461a      	mov	r2, r3
 80067e6:	4623      	mov	r3, r4
 80067e8:	f7f9 fd6a 	bl	80002c0 <__aeabi_uldivmod>
 80067ec:	4603      	mov	r3, r0
 80067ee:	460c      	mov	r4, r1
 80067f0:	461a      	mov	r2, r3
 80067f2:	4b49      	ldr	r3, [pc, #292]	; (8006918 <UART_SetConfig+0x3a0>)
 80067f4:	fba3 2302 	umull	r2, r3, r3, r2
 80067f8:	095b      	lsrs	r3, r3, #5
 80067fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	461d      	mov	r5, r3
 8006802:	f04f 0600 	mov.w	r6, #0
 8006806:	46a9      	mov	r9, r5
 8006808:	46b2      	mov	sl, r6
 800680a:	eb19 0309 	adds.w	r3, r9, r9
 800680e:	eb4a 040a 	adc.w	r4, sl, sl
 8006812:	4699      	mov	r9, r3
 8006814:	46a2      	mov	sl, r4
 8006816:	eb19 0905 	adds.w	r9, r9, r5
 800681a:	eb4a 0a06 	adc.w	sl, sl, r6
 800681e:	f04f 0100 	mov.w	r1, #0
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800682a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800682e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006832:	4689      	mov	r9, r1
 8006834:	4692      	mov	sl, r2
 8006836:	eb19 0005 	adds.w	r0, r9, r5
 800683a:	eb4a 0106 	adc.w	r1, sl, r6
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	461d      	mov	r5, r3
 8006844:	f04f 0600 	mov.w	r6, #0
 8006848:	196b      	adds	r3, r5, r5
 800684a:	eb46 0406 	adc.w	r4, r6, r6
 800684e:	461a      	mov	r2, r3
 8006850:	4623      	mov	r3, r4
 8006852:	f7f9 fd35 	bl	80002c0 <__aeabi_uldivmod>
 8006856:	4603      	mov	r3, r0
 8006858:	460c      	mov	r4, r1
 800685a:	461a      	mov	r2, r3
 800685c:	4b2e      	ldr	r3, [pc, #184]	; (8006918 <UART_SetConfig+0x3a0>)
 800685e:	fba3 1302 	umull	r1, r3, r3, r2
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	2164      	movs	r1, #100	; 0x64
 8006866:	fb01 f303 	mul.w	r3, r1, r3
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	3332      	adds	r3, #50	; 0x32
 8006870:	4a29      	ldr	r2, [pc, #164]	; (8006918 <UART_SetConfig+0x3a0>)
 8006872:	fba2 2303 	umull	r2, r3, r2, r3
 8006876:	095b      	lsrs	r3, r3, #5
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800687e:	4498      	add	r8, r3
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	461d      	mov	r5, r3
 8006884:	f04f 0600 	mov.w	r6, #0
 8006888:	46a9      	mov	r9, r5
 800688a:	46b2      	mov	sl, r6
 800688c:	eb19 0309 	adds.w	r3, r9, r9
 8006890:	eb4a 040a 	adc.w	r4, sl, sl
 8006894:	4699      	mov	r9, r3
 8006896:	46a2      	mov	sl, r4
 8006898:	eb19 0905 	adds.w	r9, r9, r5
 800689c:	eb4a 0a06 	adc.w	sl, sl, r6
 80068a0:	f04f 0100 	mov.w	r1, #0
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068b4:	4689      	mov	r9, r1
 80068b6:	4692      	mov	sl, r2
 80068b8:	eb19 0005 	adds.w	r0, r9, r5
 80068bc:	eb4a 0106 	adc.w	r1, sl, r6
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	461d      	mov	r5, r3
 80068c6:	f04f 0600 	mov.w	r6, #0
 80068ca:	196b      	adds	r3, r5, r5
 80068cc:	eb46 0406 	adc.w	r4, r6, r6
 80068d0:	461a      	mov	r2, r3
 80068d2:	4623      	mov	r3, r4
 80068d4:	f7f9 fcf4 	bl	80002c0 <__aeabi_uldivmod>
 80068d8:	4603      	mov	r3, r0
 80068da:	460c      	mov	r4, r1
 80068dc:	461a      	mov	r2, r3
 80068de:	4b0e      	ldr	r3, [pc, #56]	; (8006918 <UART_SetConfig+0x3a0>)
 80068e0:	fba3 1302 	umull	r1, r3, r3, r2
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	2164      	movs	r1, #100	; 0x64
 80068e8:	fb01 f303 	mul.w	r3, r1, r3
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	3332      	adds	r3, #50	; 0x32
 80068f2:	4a09      	ldr	r2, [pc, #36]	; (8006918 <UART_SetConfig+0x3a0>)
 80068f4:	fba2 2303 	umull	r2, r3, r2, r3
 80068f8:	095b      	lsrs	r3, r3, #5
 80068fa:	f003 0207 	and.w	r2, r3, #7
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4442      	add	r2, r8
 8006904:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006906:	e1c0      	b.n	8006c8a <UART_SetConfig+0x712>
 8006908:	40011000 	.word	0x40011000
 800690c:	40011400 	.word	0x40011400
 8006910:	40011800 	.word	0x40011800
 8006914:	40011c00 	.word	0x40011c00
 8006918:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4adc      	ldr	r2, [pc, #880]	; (8006c94 <UART_SetConfig+0x71c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00f      	beq.n	8006946 <UART_SetConfig+0x3ce>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4adb      	ldr	r2, [pc, #876]	; (8006c98 <UART_SetConfig+0x720>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d00a      	beq.n	8006946 <UART_SetConfig+0x3ce>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4ad9      	ldr	r2, [pc, #868]	; (8006c9c <UART_SetConfig+0x724>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d005      	beq.n	8006946 <UART_SetConfig+0x3ce>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4ad8      	ldr	r2, [pc, #864]	; (8006ca0 <UART_SetConfig+0x728>)
 8006940:	4293      	cmp	r3, r2
 8006942:	f040 80d1 	bne.w	8006ae8 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006946:	f7fe f9e7 	bl	8004d18 <HAL_RCC_GetPCLK2Freq>
 800694a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	469a      	mov	sl, r3
 8006950:	f04f 0b00 	mov.w	fp, #0
 8006954:	46d0      	mov	r8, sl
 8006956:	46d9      	mov	r9, fp
 8006958:	eb18 0308 	adds.w	r3, r8, r8
 800695c:	eb49 0409 	adc.w	r4, r9, r9
 8006960:	4698      	mov	r8, r3
 8006962:	46a1      	mov	r9, r4
 8006964:	eb18 080a 	adds.w	r8, r8, sl
 8006968:	eb49 090b 	adc.w	r9, r9, fp
 800696c:	f04f 0100 	mov.w	r1, #0
 8006970:	f04f 0200 	mov.w	r2, #0
 8006974:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006978:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800697c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006980:	4688      	mov	r8, r1
 8006982:	4691      	mov	r9, r2
 8006984:	eb1a 0508 	adds.w	r5, sl, r8
 8006988:	eb4b 0609 	adc.w	r6, fp, r9
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	4619      	mov	r1, r3
 8006992:	f04f 0200 	mov.w	r2, #0
 8006996:	f04f 0300 	mov.w	r3, #0
 800699a:	f04f 0400 	mov.w	r4, #0
 800699e:	0094      	lsls	r4, r2, #2
 80069a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069a4:	008b      	lsls	r3, r1, #2
 80069a6:	461a      	mov	r2, r3
 80069a8:	4623      	mov	r3, r4
 80069aa:	4628      	mov	r0, r5
 80069ac:	4631      	mov	r1, r6
 80069ae:	f7f9 fc87 	bl	80002c0 <__aeabi_uldivmod>
 80069b2:	4603      	mov	r3, r0
 80069b4:	460c      	mov	r4, r1
 80069b6:	461a      	mov	r2, r3
 80069b8:	4bba      	ldr	r3, [pc, #744]	; (8006ca4 <UART_SetConfig+0x72c>)
 80069ba:	fba3 2302 	umull	r2, r3, r3, r2
 80069be:	095b      	lsrs	r3, r3, #5
 80069c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	469b      	mov	fp, r3
 80069c8:	f04f 0c00 	mov.w	ip, #0
 80069cc:	46d9      	mov	r9, fp
 80069ce:	46e2      	mov	sl, ip
 80069d0:	eb19 0309 	adds.w	r3, r9, r9
 80069d4:	eb4a 040a 	adc.w	r4, sl, sl
 80069d8:	4699      	mov	r9, r3
 80069da:	46a2      	mov	sl, r4
 80069dc:	eb19 090b 	adds.w	r9, r9, fp
 80069e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069e4:	f04f 0100 	mov.w	r1, #0
 80069e8:	f04f 0200 	mov.w	r2, #0
 80069ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069f8:	4689      	mov	r9, r1
 80069fa:	4692      	mov	sl, r2
 80069fc:	eb1b 0509 	adds.w	r5, fp, r9
 8006a00:	eb4c 060a 	adc.w	r6, ip, sl
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	4619      	mov	r1, r3
 8006a0a:	f04f 0200 	mov.w	r2, #0
 8006a0e:	f04f 0300 	mov.w	r3, #0
 8006a12:	f04f 0400 	mov.w	r4, #0
 8006a16:	0094      	lsls	r4, r2, #2
 8006a18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a1c:	008b      	lsls	r3, r1, #2
 8006a1e:	461a      	mov	r2, r3
 8006a20:	4623      	mov	r3, r4
 8006a22:	4628      	mov	r0, r5
 8006a24:	4631      	mov	r1, r6
 8006a26:	f7f9 fc4b 	bl	80002c0 <__aeabi_uldivmod>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	461a      	mov	r2, r3
 8006a30:	4b9c      	ldr	r3, [pc, #624]	; (8006ca4 <UART_SetConfig+0x72c>)
 8006a32:	fba3 1302 	umull	r1, r3, r3, r2
 8006a36:	095b      	lsrs	r3, r3, #5
 8006a38:	2164      	movs	r1, #100	; 0x64
 8006a3a:	fb01 f303 	mul.w	r3, r1, r3
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	011b      	lsls	r3, r3, #4
 8006a42:	3332      	adds	r3, #50	; 0x32
 8006a44:	4a97      	ldr	r2, [pc, #604]	; (8006ca4 <UART_SetConfig+0x72c>)
 8006a46:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4a:	095b      	lsrs	r3, r3, #5
 8006a4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a50:	4498      	add	r8, r3
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	469b      	mov	fp, r3
 8006a56:	f04f 0c00 	mov.w	ip, #0
 8006a5a:	46d9      	mov	r9, fp
 8006a5c:	46e2      	mov	sl, ip
 8006a5e:	eb19 0309 	adds.w	r3, r9, r9
 8006a62:	eb4a 040a 	adc.w	r4, sl, sl
 8006a66:	4699      	mov	r9, r3
 8006a68:	46a2      	mov	sl, r4
 8006a6a:	eb19 090b 	adds.w	r9, r9, fp
 8006a6e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a72:	f04f 0100 	mov.w	r1, #0
 8006a76:	f04f 0200 	mov.w	r2, #0
 8006a7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a86:	4689      	mov	r9, r1
 8006a88:	4692      	mov	sl, r2
 8006a8a:	eb1b 0509 	adds.w	r5, fp, r9
 8006a8e:	eb4c 060a 	adc.w	r6, ip, sl
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	4619      	mov	r1, r3
 8006a98:	f04f 0200 	mov.w	r2, #0
 8006a9c:	f04f 0300 	mov.w	r3, #0
 8006aa0:	f04f 0400 	mov.w	r4, #0
 8006aa4:	0094      	lsls	r4, r2, #2
 8006aa6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006aaa:	008b      	lsls	r3, r1, #2
 8006aac:	461a      	mov	r2, r3
 8006aae:	4623      	mov	r3, r4
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	f7f9 fc04 	bl	80002c0 <__aeabi_uldivmod>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	460c      	mov	r4, r1
 8006abc:	461a      	mov	r2, r3
 8006abe:	4b79      	ldr	r3, [pc, #484]	; (8006ca4 <UART_SetConfig+0x72c>)
 8006ac0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ac4:	095b      	lsrs	r3, r3, #5
 8006ac6:	2164      	movs	r1, #100	; 0x64
 8006ac8:	fb01 f303 	mul.w	r3, r1, r3
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	011b      	lsls	r3, r3, #4
 8006ad0:	3332      	adds	r3, #50	; 0x32
 8006ad2:	4a74      	ldr	r2, [pc, #464]	; (8006ca4 <UART_SetConfig+0x72c>)
 8006ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad8:	095b      	lsrs	r3, r3, #5
 8006ada:	f003 020f 	and.w	r2, r3, #15
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4442      	add	r2, r8
 8006ae4:	609a      	str	r2, [r3, #8]
 8006ae6:	e0d0      	b.n	8006c8a <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ae8:	f7fe f902 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 8006aec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	469a      	mov	sl, r3
 8006af2:	f04f 0b00 	mov.w	fp, #0
 8006af6:	46d0      	mov	r8, sl
 8006af8:	46d9      	mov	r9, fp
 8006afa:	eb18 0308 	adds.w	r3, r8, r8
 8006afe:	eb49 0409 	adc.w	r4, r9, r9
 8006b02:	4698      	mov	r8, r3
 8006b04:	46a1      	mov	r9, r4
 8006b06:	eb18 080a 	adds.w	r8, r8, sl
 8006b0a:	eb49 090b 	adc.w	r9, r9, fp
 8006b0e:	f04f 0100 	mov.w	r1, #0
 8006b12:	f04f 0200 	mov.w	r2, #0
 8006b16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b22:	4688      	mov	r8, r1
 8006b24:	4691      	mov	r9, r2
 8006b26:	eb1a 0508 	adds.w	r5, sl, r8
 8006b2a:	eb4b 0609 	adc.w	r6, fp, r9
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	4619      	mov	r1, r3
 8006b34:	f04f 0200 	mov.w	r2, #0
 8006b38:	f04f 0300 	mov.w	r3, #0
 8006b3c:	f04f 0400 	mov.w	r4, #0
 8006b40:	0094      	lsls	r4, r2, #2
 8006b42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b46:	008b      	lsls	r3, r1, #2
 8006b48:	461a      	mov	r2, r3
 8006b4a:	4623      	mov	r3, r4
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	4631      	mov	r1, r6
 8006b50:	f7f9 fbb6 	bl	80002c0 <__aeabi_uldivmod>
 8006b54:	4603      	mov	r3, r0
 8006b56:	460c      	mov	r4, r1
 8006b58:	461a      	mov	r2, r3
 8006b5a:	4b52      	ldr	r3, [pc, #328]	; (8006ca4 <UART_SetConfig+0x72c>)
 8006b5c:	fba3 2302 	umull	r2, r3, r3, r2
 8006b60:	095b      	lsrs	r3, r3, #5
 8006b62:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	469b      	mov	fp, r3
 8006b6a:	f04f 0c00 	mov.w	ip, #0
 8006b6e:	46d9      	mov	r9, fp
 8006b70:	46e2      	mov	sl, ip
 8006b72:	eb19 0309 	adds.w	r3, r9, r9
 8006b76:	eb4a 040a 	adc.w	r4, sl, sl
 8006b7a:	4699      	mov	r9, r3
 8006b7c:	46a2      	mov	sl, r4
 8006b7e:	eb19 090b 	adds.w	r9, r9, fp
 8006b82:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b86:	f04f 0100 	mov.w	r1, #0
 8006b8a:	f04f 0200 	mov.w	r2, #0
 8006b8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b9a:	4689      	mov	r9, r1
 8006b9c:	4692      	mov	sl, r2
 8006b9e:	eb1b 0509 	adds.w	r5, fp, r9
 8006ba2:	eb4c 060a 	adc.w	r6, ip, sl
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	4619      	mov	r1, r3
 8006bac:	f04f 0200 	mov.w	r2, #0
 8006bb0:	f04f 0300 	mov.w	r3, #0
 8006bb4:	f04f 0400 	mov.w	r4, #0
 8006bb8:	0094      	lsls	r4, r2, #2
 8006bba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bbe:	008b      	lsls	r3, r1, #2
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	4623      	mov	r3, r4
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	4631      	mov	r1, r6
 8006bc8:	f7f9 fb7a 	bl	80002c0 <__aeabi_uldivmod>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	460c      	mov	r4, r1
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	4b34      	ldr	r3, [pc, #208]	; (8006ca4 <UART_SetConfig+0x72c>)
 8006bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8006bd8:	095b      	lsrs	r3, r3, #5
 8006bda:	2164      	movs	r1, #100	; 0x64
 8006bdc:	fb01 f303 	mul.w	r3, r1, r3
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	011b      	lsls	r3, r3, #4
 8006be4:	3332      	adds	r3, #50	; 0x32
 8006be6:	4a2f      	ldr	r2, [pc, #188]	; (8006ca4 <UART_SetConfig+0x72c>)
 8006be8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bec:	095b      	lsrs	r3, r3, #5
 8006bee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bf2:	4498      	add	r8, r3
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	469b      	mov	fp, r3
 8006bf8:	f04f 0c00 	mov.w	ip, #0
 8006bfc:	46d9      	mov	r9, fp
 8006bfe:	46e2      	mov	sl, ip
 8006c00:	eb19 0309 	adds.w	r3, r9, r9
 8006c04:	eb4a 040a 	adc.w	r4, sl, sl
 8006c08:	4699      	mov	r9, r3
 8006c0a:	46a2      	mov	sl, r4
 8006c0c:	eb19 090b 	adds.w	r9, r9, fp
 8006c10:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c14:	f04f 0100 	mov.w	r1, #0
 8006c18:	f04f 0200 	mov.w	r2, #0
 8006c1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c28:	4689      	mov	r9, r1
 8006c2a:	4692      	mov	sl, r2
 8006c2c:	eb1b 0509 	adds.w	r5, fp, r9
 8006c30:	eb4c 060a 	adc.w	r6, ip, sl
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	4619      	mov	r1, r3
 8006c3a:	f04f 0200 	mov.w	r2, #0
 8006c3e:	f04f 0300 	mov.w	r3, #0
 8006c42:	f04f 0400 	mov.w	r4, #0
 8006c46:	0094      	lsls	r4, r2, #2
 8006c48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c4c:	008b      	lsls	r3, r1, #2
 8006c4e:	461a      	mov	r2, r3
 8006c50:	4623      	mov	r3, r4
 8006c52:	4628      	mov	r0, r5
 8006c54:	4631      	mov	r1, r6
 8006c56:	f7f9 fb33 	bl	80002c0 <__aeabi_uldivmod>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	461a      	mov	r2, r3
 8006c60:	4b10      	ldr	r3, [pc, #64]	; (8006ca4 <UART_SetConfig+0x72c>)
 8006c62:	fba3 1302 	umull	r1, r3, r3, r2
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	2164      	movs	r1, #100	; 0x64
 8006c6a:	fb01 f303 	mul.w	r3, r1, r3
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	011b      	lsls	r3, r3, #4
 8006c72:	3332      	adds	r3, #50	; 0x32
 8006c74:	4a0b      	ldr	r2, [pc, #44]	; (8006ca4 <UART_SetConfig+0x72c>)
 8006c76:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7a:	095b      	lsrs	r3, r3, #5
 8006c7c:	f003 020f 	and.w	r2, r3, #15
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4442      	add	r2, r8
 8006c86:	609a      	str	r2, [r3, #8]
}
 8006c88:	e7ff      	b.n	8006c8a <UART_SetConfig+0x712>
 8006c8a:	bf00      	nop
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c94:	40011000 	.word	0x40011000
 8006c98:	40011400 	.word	0x40011400
 8006c9c:	40011800 	.word	0x40011800
 8006ca0:	40011c00 	.word	0x40011c00
 8006ca4:	51eb851f 	.word	0x51eb851f

08006ca8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc0:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	4b2f      	ldr	r3, [pc, #188]	; (8006d84 <FSMC_NORSRAM_Init+0xdc>)
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006cd2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006cd8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006cde:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006ce4:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8006cea:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006cf0:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006cf6:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006cfc:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006d02:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8006d08:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8006d0e:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8006d14:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8006d1a:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	2b08      	cmp	r3, #8
 8006d28:	d103      	bne.n	8006d32 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d30:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68f9      	ldr	r1, [r7, #12]
 8006d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d46:	d10a      	bne.n	8006d5e <FSMC_NORSRAM_Init+0xb6>
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d006      	beq.n	8006d5e <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d006      	beq.n	8006d74 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	ffc00480 	.word	0xffc00480

08006d88 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006daa:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006db6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006dbe:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006dc6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006dd0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	3b02      	subs	r3, #2
 8006dd8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006dda:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006de0:	4313      	orrs	r3, r2
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6979      	ldr	r1, [r7, #20]
 8006df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e00:	d10e      	bne.n	8006e20 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e0a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	3b01      	subs	r3, #1
 8006e12:	051b      	lsls	r3, r3, #20
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	371c      	adds	r7, #28
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
	...

08006e30 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e48:	d122      	bne.n	8006e90 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e52:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	4b15      	ldr	r3, [pc, #84]	; (8006eac <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006e58:	4013      	ands	r3, r2
 8006e5a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006e66:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006e6e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006e76:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006e7c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	6979      	ldr	r1, [r7, #20]
 8006e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006e8e:	e005      	b.n	8006e9c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	371c      	adds	r7, #28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	cff00000 	.word	0xcff00000

08006eb0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	b480      	push	{r7}
 8006eb4:	b085      	sub	sp, #20
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	f107 001c 	add.w	r0, r7, #28
 8006ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006ec6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006eca:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006ece:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006ed2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006ed6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006eda:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006eea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	b004      	add	sp, #16
 8006f04:	4770      	bx	lr

08006f06 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b083      	sub	sp, #12
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2203      	movs	r2, #3
 8006f2c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006f2e:	2002      	movs	r0, #2
 8006f30:	f7fb fa08 	bl	8002344 <HAL_Delay>
  
  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0303 	and.w	r3, r3, #3
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b085      	sub	sp, #20
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f78:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006f7e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006f84:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006f94:	f023 030f 	bic.w	r3, r3, #15
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b083      	sub	sp, #12
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	b2db      	uxtb	r3, r3
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	3314      	adds	r3, #20
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	4413      	add	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
}  
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b085      	sub	sp, #20
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007014:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800701a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007020:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007038:	2300      	movs	r3, #0

}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b088      	sub	sp, #32
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007054:	2310      	movs	r3, #16
 8007056:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007058:	2340      	movs	r3, #64	; 0x40
 800705a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800705c:	2300      	movs	r3, #0
 800705e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007064:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007066:	f107 0308 	add.w	r3, r7, #8
 800706a:	4619      	mov	r1, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7ff ff74 	bl	8006f5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007072:	f241 3288 	movw	r2, #5000	; 0x1388
 8007076:	2110      	movs	r1, #16
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f975 	bl	8007368 <SDMMC_GetCmdResp1>
 800707e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007080:	69fb      	ldr	r3, [r7, #28]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3720      	adds	r7, #32
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b08a      	sub	sp, #40	; 0x28
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800709a:	2307      	movs	r3, #7
 800709c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800709e:	2340      	movs	r3, #64	; 0x40
 80070a0:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070a2:	2300      	movs	r3, #0
 80070a4:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070aa:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070ac:	f107 0310 	add.w	r3, r7, #16
 80070b0:	4619      	mov	r1, r3
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f7ff ff51 	bl	8006f5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80070b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80070bc:	2107      	movs	r1, #7
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f000 f952 	bl	8007368 <SDMMC_GetCmdResp1>
 80070c4:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80070c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3728      	adds	r7, #40	; 0x28
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80070dc:	2300      	movs	r3, #0
 80070de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80070e0:	2300      	movs	r3, #0
 80070e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070e4:	2300      	movs	r3, #0
 80070e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070ee:	f107 0308 	add.w	r3, r7, #8
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff ff30 	bl	8006f5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f90c 	bl	8007318 <SDMMC_GetCmdError>
 8007100:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007102:	69fb      	ldr	r3, [r7, #28]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3720      	adds	r7, #32
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b088      	sub	sp, #32
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007114:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007118:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800711a:	2308      	movs	r3, #8
 800711c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800711e:	2340      	movs	r3, #64	; 0x40
 8007120:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007122:	2300      	movs	r3, #0
 8007124:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800712a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800712c:	f107 0308 	add.w	r3, r7, #8
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff ff11 	bl	8006f5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 faf5 	bl	8007728 <SDMMC_GetCmdResp7>
 800713e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007140:	69fb      	ldr	r3, [r7, #28]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3720      	adds	r7, #32
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b088      	sub	sp, #32
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007158:	2337      	movs	r3, #55	; 0x37
 800715a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800715c:	2340      	movs	r3, #64	; 0x40
 800715e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007160:	2300      	movs	r3, #0
 8007162:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007168:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800716a:	f107 0308 	add.w	r3, r7, #8
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7ff fef2 	bl	8006f5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007176:	f241 3288 	movw	r2, #5000	; 0x1388
 800717a:	2137      	movs	r1, #55	; 0x37
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f8f3 	bl	8007368 <SDMMC_GetCmdResp1>
 8007182:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007184:	69fb      	ldr	r3, [r7, #28]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3720      	adds	r7, #32
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b088      	sub	sp, #32
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800719e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80071a4:	2329      	movs	r3, #41	; 0x29
 80071a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071a8:	2340      	movs	r3, #64	; 0x40
 80071aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071ac:	2300      	movs	r3, #0
 80071ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071b6:	f107 0308 	add.w	r3, r7, #8
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7ff fecc 	bl	8006f5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fa02 	bl	80075cc <SDMMC_GetCmdResp3>
 80071c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071ca:	69fb      	ldr	r3, [r7, #28]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3720      	adds	r7, #32
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80071e2:	2306      	movs	r3, #6
 80071e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071e6:	2340      	movs	r3, #64	; 0x40
 80071e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071ea:	2300      	movs	r3, #0
 80071ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071f4:	f107 0308 	add.w	r3, r7, #8
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7ff fead 	bl	8006f5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007200:	f241 3288 	movw	r2, #5000	; 0x1388
 8007204:	2106      	movs	r1, #6
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f8ae 	bl	8007368 <SDMMC_GetCmdResp1>
 800720c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800720e:	69fb      	ldr	r3, [r7, #28]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3720      	adds	r7, #32
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007220:	2300      	movs	r3, #0
 8007222:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007224:	2333      	movs	r3, #51	; 0x33
 8007226:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007228:	2340      	movs	r3, #64	; 0x40
 800722a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800722c:	2300      	movs	r3, #0
 800722e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007234:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007236:	f107 0308 	add.w	r3, r7, #8
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff fe8c 	bl	8006f5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007242:	f241 3288 	movw	r2, #5000	; 0x1388
 8007246:	2133      	movs	r1, #51	; 0x33
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f88d 	bl	8007368 <SDMMC_GetCmdResp1>
 800724e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007250:	69fb      	ldr	r3, [r7, #28]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3720      	adds	r7, #32
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b088      	sub	sp, #32
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007266:	2302      	movs	r3, #2
 8007268:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800726a:	23c0      	movs	r3, #192	; 0xc0
 800726c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800726e:	2300      	movs	r3, #0
 8007270:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007276:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007278:	f107 0308 	add.w	r3, r7, #8
 800727c:	4619      	mov	r1, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7ff fe6b 	bl	8006f5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f95b 	bl	8007540 <SDMMC_GetCmdResp2>
 800728a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800728c:	69fb      	ldr	r3, [r7, #28]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3720      	adds	r7, #32
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b088      	sub	sp, #32
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80072a4:	2309      	movs	r3, #9
 80072a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80072a8:	23c0      	movs	r3, #192	; 0xc0
 80072aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072ac:	2300      	movs	r3, #0
 80072ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072b6:	f107 0308 	add.w	r3, r7, #8
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff fe4c 	bl	8006f5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f93c 	bl	8007540 <SDMMC_GetCmdResp2>
 80072c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072ca:	69fb      	ldr	r3, [r7, #28]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3720      	adds	r7, #32
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b088      	sub	sp, #32
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80072e2:	2303      	movs	r3, #3
 80072e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072e6:	2340      	movs	r3, #64	; 0x40
 80072e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072ea:	2300      	movs	r3, #0
 80072ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072f4:	f107 0308 	add.w	r3, r7, #8
 80072f8:	4619      	mov	r1, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7ff fe2d 	bl	8006f5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	2103      	movs	r1, #3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f99b 	bl	8007640 <SDMMC_GetCmdResp6>
 800730a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800730c:	69fb      	ldr	r3, [r7, #28]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3720      	adds	r7, #32
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007318:	b490      	push	{r4, r7}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007320:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <SDMMC_GetCmdError+0x48>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a0f      	ldr	r2, [pc, #60]	; (8007364 <SDMMC_GetCmdError+0x4c>)
 8007326:	fba2 2303 	umull	r2, r3, r2, r3
 800732a:	0a5b      	lsrs	r3, r3, #9
 800732c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007330:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007334:	4623      	mov	r3, r4
 8007336:	1e5c      	subs	r4, r3, #1
 8007338:	2b00      	cmp	r3, #0
 800733a:	d102      	bne.n	8007342 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800733c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007340:	e009      	b.n	8007356 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0f2      	beq.n	8007334 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	22c5      	movs	r2, #197	; 0xc5
 8007352:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bc90      	pop	{r4, r7}
 800735e:	4770      	bx	lr
 8007360:	20000000 	.word	0x20000000
 8007364:	10624dd3 	.word	0x10624dd3

08007368 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007368:	b590      	push	{r4, r7, lr}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	460b      	mov	r3, r1
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007376:	4b6f      	ldr	r3, [pc, #444]	; (8007534 <SDMMC_GetCmdResp1+0x1cc>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a6f      	ldr	r2, [pc, #444]	; (8007538 <SDMMC_GetCmdResp1+0x1d0>)
 800737c:	fba2 2303 	umull	r2, r3, r2, r3
 8007380:	0a5b      	lsrs	r3, r3, #9
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007388:	4623      	mov	r3, r4
 800738a:	1e5c      	subs	r4, r3, #1
 800738c:	2b00      	cmp	r3, #0
 800738e:	d102      	bne.n	8007396 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007390:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007394:	e0c9      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800739a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d0f0      	beq.n	8007388 <SDMMC_GetCmdResp1+0x20>
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1eb      	bne.n	8007388 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d004      	beq.n	80073c6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2204      	movs	r2, #4
 80073c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80073c2:	2304      	movs	r3, #4
 80073c4:	e0b1      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d004      	beq.n	80073dc <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2201      	movs	r2, #1
 80073d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80073d8:	2301      	movs	r3, #1
 80073da:	e0a6      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	22c5      	movs	r2, #197	; 0xc5
 80073e0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f7ff fde3 	bl	8006fae <SDIO_GetCommandResponse>
 80073e8:	4603      	mov	r3, r0
 80073ea:	461a      	mov	r2, r3
 80073ec:	7afb      	ldrb	r3, [r7, #11]
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d001      	beq.n	80073f6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e099      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80073f6:	2100      	movs	r1, #0
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f7ff fde5 	bl	8006fc8 <SDIO_GetResponse>
 80073fe:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	4b4e      	ldr	r3, [pc, #312]	; (800753c <SDMMC_GetCmdResp1+0x1d4>)
 8007404:	4013      	ands	r3, r2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800740a:	2300      	movs	r3, #0
 800740c:	e08d      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	da02      	bge.n	800741a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007414:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007418:	e087      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007424:	2340      	movs	r3, #64	; 0x40
 8007426:	e080      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007432:	2380      	movs	r3, #128	; 0x80
 8007434:	e079      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007444:	e071      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007454:	e069      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007464:	e061      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007470:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007474:	e059      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d002      	beq.n	8007486 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007484:	e051      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007494:	e049      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80074a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80074a4:	e041      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80074b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074b4:	e039      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80074c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074c4:	e031      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80074d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80074d4:	e029      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80074e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80074e4:	e021      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d002      	beq.n	80074f6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80074f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80074f4:	e019      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007500:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007504:	e011      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d002      	beq.n	8007516 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007510:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007514:	e009      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	f003 0308 	and.w	r3, r3, #8
 800751c:	2b00      	cmp	r3, #0
 800751e:	d002      	beq.n	8007526 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007520:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007524:	e001      	b.n	800752a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800752a:	4618      	mov	r0, r3
 800752c:	371c      	adds	r7, #28
 800752e:	46bd      	mov	sp, r7
 8007530:	bd90      	pop	{r4, r7, pc}
 8007532:	bf00      	nop
 8007534:	20000000 	.word	0x20000000
 8007538:	10624dd3 	.word	0x10624dd3
 800753c:	fdffe008 	.word	0xfdffe008

08007540 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007540:	b490      	push	{r4, r7}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007548:	4b1e      	ldr	r3, [pc, #120]	; (80075c4 <SDMMC_GetCmdResp2+0x84>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a1e      	ldr	r2, [pc, #120]	; (80075c8 <SDMMC_GetCmdResp2+0x88>)
 800754e:	fba2 2303 	umull	r2, r3, r2, r3
 8007552:	0a5b      	lsrs	r3, r3, #9
 8007554:	f241 3288 	movw	r2, #5000	; 0x1388
 8007558:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800755c:	4623      	mov	r3, r4
 800755e:	1e5c      	subs	r4, r3, #1
 8007560:	2b00      	cmp	r3, #0
 8007562:	d102      	bne.n	800756a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007564:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007568:	e026      	b.n	80075b8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0f0      	beq.n	800755c <SDMMC_GetCmdResp2+0x1c>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1eb      	bne.n	800755c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	2b00      	cmp	r3, #0
 800758e:	d004      	beq.n	800759a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2204      	movs	r2, #4
 8007594:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007596:	2304      	movs	r3, #4
 8007598:	e00e      	b.n	80075b8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d004      	beq.n	80075b0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e003      	b.n	80075b8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	22c5      	movs	r2, #197	; 0xc5
 80075b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bc90      	pop	{r4, r7}
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	20000000 	.word	0x20000000
 80075c8:	10624dd3 	.word	0x10624dd3

080075cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80075cc:	b490      	push	{r4, r7}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80075d4:	4b18      	ldr	r3, [pc, #96]	; (8007638 <SDMMC_GetCmdResp3+0x6c>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a18      	ldr	r2, [pc, #96]	; (800763c <SDMMC_GetCmdResp3+0x70>)
 80075da:	fba2 2303 	umull	r2, r3, r2, r3
 80075de:	0a5b      	lsrs	r3, r3, #9
 80075e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80075e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80075e8:	4623      	mov	r3, r4
 80075ea:	1e5c      	subs	r4, r3, #1
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d102      	bne.n	80075f6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80075f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075f4:	e01b      	b.n	800762e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007602:	2b00      	cmp	r3, #0
 8007604:	d0f0      	beq.n	80075e8 <SDMMC_GetCmdResp3+0x1c>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1eb      	bne.n	80075e8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b00      	cmp	r3, #0
 800761a:	d004      	beq.n	8007626 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2204      	movs	r2, #4
 8007620:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007622:	2304      	movs	r3, #4
 8007624:	e003      	b.n	800762e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	22c5      	movs	r2, #197	; 0xc5
 800762a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bc90      	pop	{r4, r7}
 8007636:	4770      	bx	lr
 8007638:	20000000 	.word	0x20000000
 800763c:	10624dd3 	.word	0x10624dd3

08007640 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007640:	b590      	push	{r4, r7, lr}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	460b      	mov	r3, r1
 800764a:	607a      	str	r2, [r7, #4]
 800764c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800764e:	4b34      	ldr	r3, [pc, #208]	; (8007720 <SDMMC_GetCmdResp6+0xe0>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a34      	ldr	r2, [pc, #208]	; (8007724 <SDMMC_GetCmdResp6+0xe4>)
 8007654:	fba2 2303 	umull	r2, r3, r2, r3
 8007658:	0a5b      	lsrs	r3, r3, #9
 800765a:	f241 3288 	movw	r2, #5000	; 0x1388
 800765e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007662:	4623      	mov	r3, r4
 8007664:	1e5c      	subs	r4, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	d102      	bne.n	8007670 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800766a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800766e:	e052      	b.n	8007716 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007674:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800767c:	2b00      	cmp	r3, #0
 800767e:	d0f0      	beq.n	8007662 <SDMMC_GetCmdResp6+0x22>
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1eb      	bne.n	8007662 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800768e:	f003 0304 	and.w	r3, r3, #4
 8007692:	2b00      	cmp	r3, #0
 8007694:	d004      	beq.n	80076a0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2204      	movs	r2, #4
 800769a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800769c:	2304      	movs	r3, #4
 800769e:	e03a      	b.n	8007716 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d004      	beq.n	80076b6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2201      	movs	r2, #1
 80076b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e02f      	b.n	8007716 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f7ff fc79 	bl	8006fae <SDIO_GetCommandResponse>
 80076bc:	4603      	mov	r3, r0
 80076be:	461a      	mov	r2, r3
 80076c0:	7afb      	ldrb	r3, [r7, #11]
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d001      	beq.n	80076ca <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e025      	b.n	8007716 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	22c5      	movs	r2, #197	; 0xc5
 80076ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80076d0:	2100      	movs	r1, #0
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f7ff fc78 	bl	8006fc8 <SDIO_GetResponse>
 80076d8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d106      	bne.n	80076f2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	0c1b      	lsrs	r3, r3, #16
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80076ee:	2300      	movs	r3, #0
 80076f0:	e011      	b.n	8007716 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80076fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007700:	e009      	b.n	8007716 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800770c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007710:	e001      	b.n	8007716 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007716:	4618      	mov	r0, r3
 8007718:	371c      	adds	r7, #28
 800771a:	46bd      	mov	sp, r7
 800771c:	bd90      	pop	{r4, r7, pc}
 800771e:	bf00      	nop
 8007720:	20000000 	.word	0x20000000
 8007724:	10624dd3 	.word	0x10624dd3

08007728 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007728:	b490      	push	{r4, r7}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007730:	4b21      	ldr	r3, [pc, #132]	; (80077b8 <SDMMC_GetCmdResp7+0x90>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a21      	ldr	r2, [pc, #132]	; (80077bc <SDMMC_GetCmdResp7+0x94>)
 8007736:	fba2 2303 	umull	r2, r3, r2, r3
 800773a:	0a5b      	lsrs	r3, r3, #9
 800773c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007740:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007744:	4623      	mov	r3, r4
 8007746:	1e5c      	subs	r4, r3, #1
 8007748:	2b00      	cmp	r3, #0
 800774a:	d102      	bne.n	8007752 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800774c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007750:	e02c      	b.n	80077ac <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007756:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800775e:	2b00      	cmp	r3, #0
 8007760:	d0f0      	beq.n	8007744 <SDMMC_GetCmdResp7+0x1c>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1eb      	bne.n	8007744 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007770:	f003 0304 	and.w	r3, r3, #4
 8007774:	2b00      	cmp	r3, #0
 8007776:	d004      	beq.n	8007782 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2204      	movs	r2, #4
 800777c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800777e:	2304      	movs	r3, #4
 8007780:	e014      	b.n	80077ac <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	d004      	beq.n	8007798 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007794:	2301      	movs	r3, #1
 8007796:	e009      	b.n	80077ac <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2240      	movs	r2, #64	; 0x40
 80077a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80077aa:	2300      	movs	r3, #0
  
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bc90      	pop	{r4, r7}
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	20000000 	.word	0x20000000
 80077bc:	10624dd3 	.word	0x10624dd3

080077c0 <__errno>:
 80077c0:	4b01      	ldr	r3, [pc, #4]	; (80077c8 <__errno+0x8>)
 80077c2:	6818      	ldr	r0, [r3, #0]
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	2000000c 	.word	0x2000000c

080077cc <__libc_init_array>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	4e0d      	ldr	r6, [pc, #52]	; (8007804 <__libc_init_array+0x38>)
 80077d0:	4c0d      	ldr	r4, [pc, #52]	; (8007808 <__libc_init_array+0x3c>)
 80077d2:	1ba4      	subs	r4, r4, r6
 80077d4:	10a4      	asrs	r4, r4, #2
 80077d6:	2500      	movs	r5, #0
 80077d8:	42a5      	cmp	r5, r4
 80077da:	d109      	bne.n	80077f0 <__libc_init_array+0x24>
 80077dc:	4e0b      	ldr	r6, [pc, #44]	; (800780c <__libc_init_array+0x40>)
 80077de:	4c0c      	ldr	r4, [pc, #48]	; (8007810 <__libc_init_array+0x44>)
 80077e0:	f000 ff68 	bl	80086b4 <_init>
 80077e4:	1ba4      	subs	r4, r4, r6
 80077e6:	10a4      	asrs	r4, r4, #2
 80077e8:	2500      	movs	r5, #0
 80077ea:	42a5      	cmp	r5, r4
 80077ec:	d105      	bne.n	80077fa <__libc_init_array+0x2e>
 80077ee:	bd70      	pop	{r4, r5, r6, pc}
 80077f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077f4:	4798      	blx	r3
 80077f6:	3501      	adds	r5, #1
 80077f8:	e7ee      	b.n	80077d8 <__libc_init_array+0xc>
 80077fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077fe:	4798      	blx	r3
 8007800:	3501      	adds	r5, #1
 8007802:	e7f2      	b.n	80077ea <__libc_init_array+0x1e>
 8007804:	080087c4 	.word	0x080087c4
 8007808:	080087c4 	.word	0x080087c4
 800780c:	080087c4 	.word	0x080087c4
 8007810:	080087c8 	.word	0x080087c8

08007814 <memset>:
 8007814:	4402      	add	r2, r0
 8007816:	4603      	mov	r3, r0
 8007818:	4293      	cmp	r3, r2
 800781a:	d100      	bne.n	800781e <memset+0xa>
 800781c:	4770      	bx	lr
 800781e:	f803 1b01 	strb.w	r1, [r3], #1
 8007822:	e7f9      	b.n	8007818 <memset+0x4>

08007824 <iprintf>:
 8007824:	b40f      	push	{r0, r1, r2, r3}
 8007826:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <iprintf+0x2c>)
 8007828:	b513      	push	{r0, r1, r4, lr}
 800782a:	681c      	ldr	r4, [r3, #0]
 800782c:	b124      	cbz	r4, 8007838 <iprintf+0x14>
 800782e:	69a3      	ldr	r3, [r4, #24]
 8007830:	b913      	cbnz	r3, 8007838 <iprintf+0x14>
 8007832:	4620      	mov	r0, r4
 8007834:	f000 fa22 	bl	8007c7c <__sinit>
 8007838:	ab05      	add	r3, sp, #20
 800783a:	9a04      	ldr	r2, [sp, #16]
 800783c:	68a1      	ldr	r1, [r4, #8]
 800783e:	9301      	str	r3, [sp, #4]
 8007840:	4620      	mov	r0, r4
 8007842:	f000 fbdb 	bl	8007ffc <_vfiprintf_r>
 8007846:	b002      	add	sp, #8
 8007848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800784c:	b004      	add	sp, #16
 800784e:	4770      	bx	lr
 8007850:	2000000c 	.word	0x2000000c

08007854 <_puts_r>:
 8007854:	b570      	push	{r4, r5, r6, lr}
 8007856:	460e      	mov	r6, r1
 8007858:	4605      	mov	r5, r0
 800785a:	b118      	cbz	r0, 8007864 <_puts_r+0x10>
 800785c:	6983      	ldr	r3, [r0, #24]
 800785e:	b90b      	cbnz	r3, 8007864 <_puts_r+0x10>
 8007860:	f000 fa0c 	bl	8007c7c <__sinit>
 8007864:	69ab      	ldr	r3, [r5, #24]
 8007866:	68ac      	ldr	r4, [r5, #8]
 8007868:	b913      	cbnz	r3, 8007870 <_puts_r+0x1c>
 800786a:	4628      	mov	r0, r5
 800786c:	f000 fa06 	bl	8007c7c <__sinit>
 8007870:	4b23      	ldr	r3, [pc, #140]	; (8007900 <_puts_r+0xac>)
 8007872:	429c      	cmp	r4, r3
 8007874:	d117      	bne.n	80078a6 <_puts_r+0x52>
 8007876:	686c      	ldr	r4, [r5, #4]
 8007878:	89a3      	ldrh	r3, [r4, #12]
 800787a:	071b      	lsls	r3, r3, #28
 800787c:	d51d      	bpl.n	80078ba <_puts_r+0x66>
 800787e:	6923      	ldr	r3, [r4, #16]
 8007880:	b1db      	cbz	r3, 80078ba <_puts_r+0x66>
 8007882:	3e01      	subs	r6, #1
 8007884:	68a3      	ldr	r3, [r4, #8]
 8007886:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800788a:	3b01      	subs	r3, #1
 800788c:	60a3      	str	r3, [r4, #8]
 800788e:	b9e9      	cbnz	r1, 80078cc <_puts_r+0x78>
 8007890:	2b00      	cmp	r3, #0
 8007892:	da2e      	bge.n	80078f2 <_puts_r+0x9e>
 8007894:	4622      	mov	r2, r4
 8007896:	210a      	movs	r1, #10
 8007898:	4628      	mov	r0, r5
 800789a:	f000 f83f 	bl	800791c <__swbuf_r>
 800789e:	3001      	adds	r0, #1
 80078a0:	d011      	beq.n	80078c6 <_puts_r+0x72>
 80078a2:	200a      	movs	r0, #10
 80078a4:	e011      	b.n	80078ca <_puts_r+0x76>
 80078a6:	4b17      	ldr	r3, [pc, #92]	; (8007904 <_puts_r+0xb0>)
 80078a8:	429c      	cmp	r4, r3
 80078aa:	d101      	bne.n	80078b0 <_puts_r+0x5c>
 80078ac:	68ac      	ldr	r4, [r5, #8]
 80078ae:	e7e3      	b.n	8007878 <_puts_r+0x24>
 80078b0:	4b15      	ldr	r3, [pc, #84]	; (8007908 <_puts_r+0xb4>)
 80078b2:	429c      	cmp	r4, r3
 80078b4:	bf08      	it	eq
 80078b6:	68ec      	ldreq	r4, [r5, #12]
 80078b8:	e7de      	b.n	8007878 <_puts_r+0x24>
 80078ba:	4621      	mov	r1, r4
 80078bc:	4628      	mov	r0, r5
 80078be:	f000 f87f 	bl	80079c0 <__swsetup_r>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d0dd      	beq.n	8007882 <_puts_r+0x2e>
 80078c6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ca:	bd70      	pop	{r4, r5, r6, pc}
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	da04      	bge.n	80078da <_puts_r+0x86>
 80078d0:	69a2      	ldr	r2, [r4, #24]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	dc06      	bgt.n	80078e4 <_puts_r+0x90>
 80078d6:	290a      	cmp	r1, #10
 80078d8:	d004      	beq.n	80078e4 <_puts_r+0x90>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	6022      	str	r2, [r4, #0]
 80078e0:	7019      	strb	r1, [r3, #0]
 80078e2:	e7cf      	b.n	8007884 <_puts_r+0x30>
 80078e4:	4622      	mov	r2, r4
 80078e6:	4628      	mov	r0, r5
 80078e8:	f000 f818 	bl	800791c <__swbuf_r>
 80078ec:	3001      	adds	r0, #1
 80078ee:	d1c9      	bne.n	8007884 <_puts_r+0x30>
 80078f0:	e7e9      	b.n	80078c6 <_puts_r+0x72>
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	200a      	movs	r0, #10
 80078f6:	1c5a      	adds	r2, r3, #1
 80078f8:	6022      	str	r2, [r4, #0]
 80078fa:	7018      	strb	r0, [r3, #0]
 80078fc:	e7e5      	b.n	80078ca <_puts_r+0x76>
 80078fe:	bf00      	nop
 8007900:	08008748 	.word	0x08008748
 8007904:	08008768 	.word	0x08008768
 8007908:	08008728 	.word	0x08008728

0800790c <puts>:
 800790c:	4b02      	ldr	r3, [pc, #8]	; (8007918 <puts+0xc>)
 800790e:	4601      	mov	r1, r0
 8007910:	6818      	ldr	r0, [r3, #0]
 8007912:	f7ff bf9f 	b.w	8007854 <_puts_r>
 8007916:	bf00      	nop
 8007918:	2000000c 	.word	0x2000000c

0800791c <__swbuf_r>:
 800791c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791e:	460e      	mov	r6, r1
 8007920:	4614      	mov	r4, r2
 8007922:	4605      	mov	r5, r0
 8007924:	b118      	cbz	r0, 800792e <__swbuf_r+0x12>
 8007926:	6983      	ldr	r3, [r0, #24]
 8007928:	b90b      	cbnz	r3, 800792e <__swbuf_r+0x12>
 800792a:	f000 f9a7 	bl	8007c7c <__sinit>
 800792e:	4b21      	ldr	r3, [pc, #132]	; (80079b4 <__swbuf_r+0x98>)
 8007930:	429c      	cmp	r4, r3
 8007932:	d12a      	bne.n	800798a <__swbuf_r+0x6e>
 8007934:	686c      	ldr	r4, [r5, #4]
 8007936:	69a3      	ldr	r3, [r4, #24]
 8007938:	60a3      	str	r3, [r4, #8]
 800793a:	89a3      	ldrh	r3, [r4, #12]
 800793c:	071a      	lsls	r2, r3, #28
 800793e:	d52e      	bpl.n	800799e <__swbuf_r+0x82>
 8007940:	6923      	ldr	r3, [r4, #16]
 8007942:	b363      	cbz	r3, 800799e <__swbuf_r+0x82>
 8007944:	6923      	ldr	r3, [r4, #16]
 8007946:	6820      	ldr	r0, [r4, #0]
 8007948:	1ac0      	subs	r0, r0, r3
 800794a:	6963      	ldr	r3, [r4, #20]
 800794c:	b2f6      	uxtb	r6, r6
 800794e:	4283      	cmp	r3, r0
 8007950:	4637      	mov	r7, r6
 8007952:	dc04      	bgt.n	800795e <__swbuf_r+0x42>
 8007954:	4621      	mov	r1, r4
 8007956:	4628      	mov	r0, r5
 8007958:	f000 f926 	bl	8007ba8 <_fflush_r>
 800795c:	bb28      	cbnz	r0, 80079aa <__swbuf_r+0x8e>
 800795e:	68a3      	ldr	r3, [r4, #8]
 8007960:	3b01      	subs	r3, #1
 8007962:	60a3      	str	r3, [r4, #8]
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	6022      	str	r2, [r4, #0]
 800796a:	701e      	strb	r6, [r3, #0]
 800796c:	6963      	ldr	r3, [r4, #20]
 800796e:	3001      	adds	r0, #1
 8007970:	4283      	cmp	r3, r0
 8007972:	d004      	beq.n	800797e <__swbuf_r+0x62>
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	07db      	lsls	r3, r3, #31
 8007978:	d519      	bpl.n	80079ae <__swbuf_r+0x92>
 800797a:	2e0a      	cmp	r6, #10
 800797c:	d117      	bne.n	80079ae <__swbuf_r+0x92>
 800797e:	4621      	mov	r1, r4
 8007980:	4628      	mov	r0, r5
 8007982:	f000 f911 	bl	8007ba8 <_fflush_r>
 8007986:	b190      	cbz	r0, 80079ae <__swbuf_r+0x92>
 8007988:	e00f      	b.n	80079aa <__swbuf_r+0x8e>
 800798a:	4b0b      	ldr	r3, [pc, #44]	; (80079b8 <__swbuf_r+0x9c>)
 800798c:	429c      	cmp	r4, r3
 800798e:	d101      	bne.n	8007994 <__swbuf_r+0x78>
 8007990:	68ac      	ldr	r4, [r5, #8]
 8007992:	e7d0      	b.n	8007936 <__swbuf_r+0x1a>
 8007994:	4b09      	ldr	r3, [pc, #36]	; (80079bc <__swbuf_r+0xa0>)
 8007996:	429c      	cmp	r4, r3
 8007998:	bf08      	it	eq
 800799a:	68ec      	ldreq	r4, [r5, #12]
 800799c:	e7cb      	b.n	8007936 <__swbuf_r+0x1a>
 800799e:	4621      	mov	r1, r4
 80079a0:	4628      	mov	r0, r5
 80079a2:	f000 f80d 	bl	80079c0 <__swsetup_r>
 80079a6:	2800      	cmp	r0, #0
 80079a8:	d0cc      	beq.n	8007944 <__swbuf_r+0x28>
 80079aa:	f04f 37ff 	mov.w	r7, #4294967295
 80079ae:	4638      	mov	r0, r7
 80079b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b2:	bf00      	nop
 80079b4:	08008748 	.word	0x08008748
 80079b8:	08008768 	.word	0x08008768
 80079bc:	08008728 	.word	0x08008728

080079c0 <__swsetup_r>:
 80079c0:	4b32      	ldr	r3, [pc, #200]	; (8007a8c <__swsetup_r+0xcc>)
 80079c2:	b570      	push	{r4, r5, r6, lr}
 80079c4:	681d      	ldr	r5, [r3, #0]
 80079c6:	4606      	mov	r6, r0
 80079c8:	460c      	mov	r4, r1
 80079ca:	b125      	cbz	r5, 80079d6 <__swsetup_r+0x16>
 80079cc:	69ab      	ldr	r3, [r5, #24]
 80079ce:	b913      	cbnz	r3, 80079d6 <__swsetup_r+0x16>
 80079d0:	4628      	mov	r0, r5
 80079d2:	f000 f953 	bl	8007c7c <__sinit>
 80079d6:	4b2e      	ldr	r3, [pc, #184]	; (8007a90 <__swsetup_r+0xd0>)
 80079d8:	429c      	cmp	r4, r3
 80079da:	d10f      	bne.n	80079fc <__swsetup_r+0x3c>
 80079dc:	686c      	ldr	r4, [r5, #4]
 80079de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	0715      	lsls	r5, r2, #28
 80079e6:	d42c      	bmi.n	8007a42 <__swsetup_r+0x82>
 80079e8:	06d0      	lsls	r0, r2, #27
 80079ea:	d411      	bmi.n	8007a10 <__swsetup_r+0x50>
 80079ec:	2209      	movs	r2, #9
 80079ee:	6032      	str	r2, [r6, #0]
 80079f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079f4:	81a3      	strh	r3, [r4, #12]
 80079f6:	f04f 30ff 	mov.w	r0, #4294967295
 80079fa:	e03e      	b.n	8007a7a <__swsetup_r+0xba>
 80079fc:	4b25      	ldr	r3, [pc, #148]	; (8007a94 <__swsetup_r+0xd4>)
 80079fe:	429c      	cmp	r4, r3
 8007a00:	d101      	bne.n	8007a06 <__swsetup_r+0x46>
 8007a02:	68ac      	ldr	r4, [r5, #8]
 8007a04:	e7eb      	b.n	80079de <__swsetup_r+0x1e>
 8007a06:	4b24      	ldr	r3, [pc, #144]	; (8007a98 <__swsetup_r+0xd8>)
 8007a08:	429c      	cmp	r4, r3
 8007a0a:	bf08      	it	eq
 8007a0c:	68ec      	ldreq	r4, [r5, #12]
 8007a0e:	e7e6      	b.n	80079de <__swsetup_r+0x1e>
 8007a10:	0751      	lsls	r1, r2, #29
 8007a12:	d512      	bpl.n	8007a3a <__swsetup_r+0x7a>
 8007a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a16:	b141      	cbz	r1, 8007a2a <__swsetup_r+0x6a>
 8007a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a1c:	4299      	cmp	r1, r3
 8007a1e:	d002      	beq.n	8007a26 <__swsetup_r+0x66>
 8007a20:	4630      	mov	r0, r6
 8007a22:	f000 fa19 	bl	8007e58 <_free_r>
 8007a26:	2300      	movs	r3, #0
 8007a28:	6363      	str	r3, [r4, #52]	; 0x34
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a30:	81a3      	strh	r3, [r4, #12]
 8007a32:	2300      	movs	r3, #0
 8007a34:	6063      	str	r3, [r4, #4]
 8007a36:	6923      	ldr	r3, [r4, #16]
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	f043 0308 	orr.w	r3, r3, #8
 8007a40:	81a3      	strh	r3, [r4, #12]
 8007a42:	6923      	ldr	r3, [r4, #16]
 8007a44:	b94b      	cbnz	r3, 8007a5a <__swsetup_r+0x9a>
 8007a46:	89a3      	ldrh	r3, [r4, #12]
 8007a48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a50:	d003      	beq.n	8007a5a <__swsetup_r+0x9a>
 8007a52:	4621      	mov	r1, r4
 8007a54:	4630      	mov	r0, r6
 8007a56:	f000 f9bf 	bl	8007dd8 <__smakebuf_r>
 8007a5a:	89a2      	ldrh	r2, [r4, #12]
 8007a5c:	f012 0301 	ands.w	r3, r2, #1
 8007a60:	d00c      	beq.n	8007a7c <__swsetup_r+0xbc>
 8007a62:	2300      	movs	r3, #0
 8007a64:	60a3      	str	r3, [r4, #8]
 8007a66:	6963      	ldr	r3, [r4, #20]
 8007a68:	425b      	negs	r3, r3
 8007a6a:	61a3      	str	r3, [r4, #24]
 8007a6c:	6923      	ldr	r3, [r4, #16]
 8007a6e:	b953      	cbnz	r3, 8007a86 <__swsetup_r+0xc6>
 8007a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007a78:	d1ba      	bne.n	80079f0 <__swsetup_r+0x30>
 8007a7a:	bd70      	pop	{r4, r5, r6, pc}
 8007a7c:	0792      	lsls	r2, r2, #30
 8007a7e:	bf58      	it	pl
 8007a80:	6963      	ldrpl	r3, [r4, #20]
 8007a82:	60a3      	str	r3, [r4, #8]
 8007a84:	e7f2      	b.n	8007a6c <__swsetup_r+0xac>
 8007a86:	2000      	movs	r0, #0
 8007a88:	e7f7      	b.n	8007a7a <__swsetup_r+0xba>
 8007a8a:	bf00      	nop
 8007a8c:	2000000c 	.word	0x2000000c
 8007a90:	08008748 	.word	0x08008748
 8007a94:	08008768 	.word	0x08008768
 8007a98:	08008728 	.word	0x08008728

08007a9c <__sflush_r>:
 8007a9c:	898a      	ldrh	r2, [r1, #12]
 8007a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	0710      	lsls	r0, r2, #28
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	d458      	bmi.n	8007b5c <__sflush_r+0xc0>
 8007aaa:	684b      	ldr	r3, [r1, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	dc05      	bgt.n	8007abc <__sflush_r+0x20>
 8007ab0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	dc02      	bgt.n	8007abc <__sflush_r+0x20>
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007abc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007abe:	2e00      	cmp	r6, #0
 8007ac0:	d0f9      	beq.n	8007ab6 <__sflush_r+0x1a>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ac8:	682f      	ldr	r7, [r5, #0]
 8007aca:	6a21      	ldr	r1, [r4, #32]
 8007acc:	602b      	str	r3, [r5, #0]
 8007ace:	d032      	beq.n	8007b36 <__sflush_r+0x9a>
 8007ad0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ad2:	89a3      	ldrh	r3, [r4, #12]
 8007ad4:	075a      	lsls	r2, r3, #29
 8007ad6:	d505      	bpl.n	8007ae4 <__sflush_r+0x48>
 8007ad8:	6863      	ldr	r3, [r4, #4]
 8007ada:	1ac0      	subs	r0, r0, r3
 8007adc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ade:	b10b      	cbz	r3, 8007ae4 <__sflush_r+0x48>
 8007ae0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ae2:	1ac0      	subs	r0, r0, r3
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aea:	6a21      	ldr	r1, [r4, #32]
 8007aec:	4628      	mov	r0, r5
 8007aee:	47b0      	blx	r6
 8007af0:	1c43      	adds	r3, r0, #1
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	d106      	bne.n	8007b04 <__sflush_r+0x68>
 8007af6:	6829      	ldr	r1, [r5, #0]
 8007af8:	291d      	cmp	r1, #29
 8007afa:	d848      	bhi.n	8007b8e <__sflush_r+0xf2>
 8007afc:	4a29      	ldr	r2, [pc, #164]	; (8007ba4 <__sflush_r+0x108>)
 8007afe:	40ca      	lsrs	r2, r1
 8007b00:	07d6      	lsls	r6, r2, #31
 8007b02:	d544      	bpl.n	8007b8e <__sflush_r+0xf2>
 8007b04:	2200      	movs	r2, #0
 8007b06:	6062      	str	r2, [r4, #4]
 8007b08:	04d9      	lsls	r1, r3, #19
 8007b0a:	6922      	ldr	r2, [r4, #16]
 8007b0c:	6022      	str	r2, [r4, #0]
 8007b0e:	d504      	bpl.n	8007b1a <__sflush_r+0x7e>
 8007b10:	1c42      	adds	r2, r0, #1
 8007b12:	d101      	bne.n	8007b18 <__sflush_r+0x7c>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	b903      	cbnz	r3, 8007b1a <__sflush_r+0x7e>
 8007b18:	6560      	str	r0, [r4, #84]	; 0x54
 8007b1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b1c:	602f      	str	r7, [r5, #0]
 8007b1e:	2900      	cmp	r1, #0
 8007b20:	d0c9      	beq.n	8007ab6 <__sflush_r+0x1a>
 8007b22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b26:	4299      	cmp	r1, r3
 8007b28:	d002      	beq.n	8007b30 <__sflush_r+0x94>
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f000 f994 	bl	8007e58 <_free_r>
 8007b30:	2000      	movs	r0, #0
 8007b32:	6360      	str	r0, [r4, #52]	; 0x34
 8007b34:	e7c0      	b.n	8007ab8 <__sflush_r+0x1c>
 8007b36:	2301      	movs	r3, #1
 8007b38:	4628      	mov	r0, r5
 8007b3a:	47b0      	blx	r6
 8007b3c:	1c41      	adds	r1, r0, #1
 8007b3e:	d1c8      	bne.n	8007ad2 <__sflush_r+0x36>
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d0c5      	beq.n	8007ad2 <__sflush_r+0x36>
 8007b46:	2b1d      	cmp	r3, #29
 8007b48:	d001      	beq.n	8007b4e <__sflush_r+0xb2>
 8007b4a:	2b16      	cmp	r3, #22
 8007b4c:	d101      	bne.n	8007b52 <__sflush_r+0xb6>
 8007b4e:	602f      	str	r7, [r5, #0]
 8007b50:	e7b1      	b.n	8007ab6 <__sflush_r+0x1a>
 8007b52:	89a3      	ldrh	r3, [r4, #12]
 8007b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b58:	81a3      	strh	r3, [r4, #12]
 8007b5a:	e7ad      	b.n	8007ab8 <__sflush_r+0x1c>
 8007b5c:	690f      	ldr	r7, [r1, #16]
 8007b5e:	2f00      	cmp	r7, #0
 8007b60:	d0a9      	beq.n	8007ab6 <__sflush_r+0x1a>
 8007b62:	0793      	lsls	r3, r2, #30
 8007b64:	680e      	ldr	r6, [r1, #0]
 8007b66:	bf08      	it	eq
 8007b68:	694b      	ldreq	r3, [r1, #20]
 8007b6a:	600f      	str	r7, [r1, #0]
 8007b6c:	bf18      	it	ne
 8007b6e:	2300      	movne	r3, #0
 8007b70:	eba6 0807 	sub.w	r8, r6, r7
 8007b74:	608b      	str	r3, [r1, #8]
 8007b76:	f1b8 0f00 	cmp.w	r8, #0
 8007b7a:	dd9c      	ble.n	8007ab6 <__sflush_r+0x1a>
 8007b7c:	4643      	mov	r3, r8
 8007b7e:	463a      	mov	r2, r7
 8007b80:	6a21      	ldr	r1, [r4, #32]
 8007b82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b84:	4628      	mov	r0, r5
 8007b86:	47b0      	blx	r6
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	dc06      	bgt.n	8007b9a <__sflush_r+0xfe>
 8007b8c:	89a3      	ldrh	r3, [r4, #12]
 8007b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b92:	81a3      	strh	r3, [r4, #12]
 8007b94:	f04f 30ff 	mov.w	r0, #4294967295
 8007b98:	e78e      	b.n	8007ab8 <__sflush_r+0x1c>
 8007b9a:	4407      	add	r7, r0
 8007b9c:	eba8 0800 	sub.w	r8, r8, r0
 8007ba0:	e7e9      	b.n	8007b76 <__sflush_r+0xda>
 8007ba2:	bf00      	nop
 8007ba4:	20400001 	.word	0x20400001

08007ba8 <_fflush_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	690b      	ldr	r3, [r1, #16]
 8007bac:	4605      	mov	r5, r0
 8007bae:	460c      	mov	r4, r1
 8007bb0:	b1db      	cbz	r3, 8007bea <_fflush_r+0x42>
 8007bb2:	b118      	cbz	r0, 8007bbc <_fflush_r+0x14>
 8007bb4:	6983      	ldr	r3, [r0, #24]
 8007bb6:	b90b      	cbnz	r3, 8007bbc <_fflush_r+0x14>
 8007bb8:	f000 f860 	bl	8007c7c <__sinit>
 8007bbc:	4b0c      	ldr	r3, [pc, #48]	; (8007bf0 <_fflush_r+0x48>)
 8007bbe:	429c      	cmp	r4, r3
 8007bc0:	d109      	bne.n	8007bd6 <_fflush_r+0x2e>
 8007bc2:	686c      	ldr	r4, [r5, #4]
 8007bc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bc8:	b17b      	cbz	r3, 8007bea <_fflush_r+0x42>
 8007bca:	4621      	mov	r1, r4
 8007bcc:	4628      	mov	r0, r5
 8007bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bd2:	f7ff bf63 	b.w	8007a9c <__sflush_r>
 8007bd6:	4b07      	ldr	r3, [pc, #28]	; (8007bf4 <_fflush_r+0x4c>)
 8007bd8:	429c      	cmp	r4, r3
 8007bda:	d101      	bne.n	8007be0 <_fflush_r+0x38>
 8007bdc:	68ac      	ldr	r4, [r5, #8]
 8007bde:	e7f1      	b.n	8007bc4 <_fflush_r+0x1c>
 8007be0:	4b05      	ldr	r3, [pc, #20]	; (8007bf8 <_fflush_r+0x50>)
 8007be2:	429c      	cmp	r4, r3
 8007be4:	bf08      	it	eq
 8007be6:	68ec      	ldreq	r4, [r5, #12]
 8007be8:	e7ec      	b.n	8007bc4 <_fflush_r+0x1c>
 8007bea:	2000      	movs	r0, #0
 8007bec:	bd38      	pop	{r3, r4, r5, pc}
 8007bee:	bf00      	nop
 8007bf0:	08008748 	.word	0x08008748
 8007bf4:	08008768 	.word	0x08008768
 8007bf8:	08008728 	.word	0x08008728

08007bfc <std>:
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	b510      	push	{r4, lr}
 8007c00:	4604      	mov	r4, r0
 8007c02:	e9c0 3300 	strd	r3, r3, [r0]
 8007c06:	6083      	str	r3, [r0, #8]
 8007c08:	8181      	strh	r1, [r0, #12]
 8007c0a:	6643      	str	r3, [r0, #100]	; 0x64
 8007c0c:	81c2      	strh	r2, [r0, #14]
 8007c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c12:	6183      	str	r3, [r0, #24]
 8007c14:	4619      	mov	r1, r3
 8007c16:	2208      	movs	r2, #8
 8007c18:	305c      	adds	r0, #92	; 0x5c
 8007c1a:	f7ff fdfb 	bl	8007814 <memset>
 8007c1e:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <std+0x38>)
 8007c20:	6263      	str	r3, [r4, #36]	; 0x24
 8007c22:	4b05      	ldr	r3, [pc, #20]	; (8007c38 <std+0x3c>)
 8007c24:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c26:	4b05      	ldr	r3, [pc, #20]	; (8007c3c <std+0x40>)
 8007c28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c2a:	4b05      	ldr	r3, [pc, #20]	; (8007c40 <std+0x44>)
 8007c2c:	6224      	str	r4, [r4, #32]
 8007c2e:	6323      	str	r3, [r4, #48]	; 0x30
 8007c30:	bd10      	pop	{r4, pc}
 8007c32:	bf00      	nop
 8007c34:	08008559 	.word	0x08008559
 8007c38:	0800857b 	.word	0x0800857b
 8007c3c:	080085b3 	.word	0x080085b3
 8007c40:	080085d7 	.word	0x080085d7

08007c44 <_cleanup_r>:
 8007c44:	4901      	ldr	r1, [pc, #4]	; (8007c4c <_cleanup_r+0x8>)
 8007c46:	f000 b885 	b.w	8007d54 <_fwalk_reent>
 8007c4a:	bf00      	nop
 8007c4c:	08007ba9 	.word	0x08007ba9

08007c50 <__sfmoreglue>:
 8007c50:	b570      	push	{r4, r5, r6, lr}
 8007c52:	1e4a      	subs	r2, r1, #1
 8007c54:	2568      	movs	r5, #104	; 0x68
 8007c56:	4355      	muls	r5, r2
 8007c58:	460e      	mov	r6, r1
 8007c5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c5e:	f000 f949 	bl	8007ef4 <_malloc_r>
 8007c62:	4604      	mov	r4, r0
 8007c64:	b140      	cbz	r0, 8007c78 <__sfmoreglue+0x28>
 8007c66:	2100      	movs	r1, #0
 8007c68:	e9c0 1600 	strd	r1, r6, [r0]
 8007c6c:	300c      	adds	r0, #12
 8007c6e:	60a0      	str	r0, [r4, #8]
 8007c70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c74:	f7ff fdce 	bl	8007814 <memset>
 8007c78:	4620      	mov	r0, r4
 8007c7a:	bd70      	pop	{r4, r5, r6, pc}

08007c7c <__sinit>:
 8007c7c:	6983      	ldr	r3, [r0, #24]
 8007c7e:	b510      	push	{r4, lr}
 8007c80:	4604      	mov	r4, r0
 8007c82:	bb33      	cbnz	r3, 8007cd2 <__sinit+0x56>
 8007c84:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007c88:	6503      	str	r3, [r0, #80]	; 0x50
 8007c8a:	4b12      	ldr	r3, [pc, #72]	; (8007cd4 <__sinit+0x58>)
 8007c8c:	4a12      	ldr	r2, [pc, #72]	; (8007cd8 <__sinit+0x5c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6282      	str	r2, [r0, #40]	; 0x28
 8007c92:	4298      	cmp	r0, r3
 8007c94:	bf04      	itt	eq
 8007c96:	2301      	moveq	r3, #1
 8007c98:	6183      	streq	r3, [r0, #24]
 8007c9a:	f000 f81f 	bl	8007cdc <__sfp>
 8007c9e:	6060      	str	r0, [r4, #4]
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f000 f81b 	bl	8007cdc <__sfp>
 8007ca6:	60a0      	str	r0, [r4, #8]
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f000 f817 	bl	8007cdc <__sfp>
 8007cae:	2200      	movs	r2, #0
 8007cb0:	60e0      	str	r0, [r4, #12]
 8007cb2:	2104      	movs	r1, #4
 8007cb4:	6860      	ldr	r0, [r4, #4]
 8007cb6:	f7ff ffa1 	bl	8007bfc <std>
 8007cba:	2201      	movs	r2, #1
 8007cbc:	2109      	movs	r1, #9
 8007cbe:	68a0      	ldr	r0, [r4, #8]
 8007cc0:	f7ff ff9c 	bl	8007bfc <std>
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	2112      	movs	r1, #18
 8007cc8:	68e0      	ldr	r0, [r4, #12]
 8007cca:	f7ff ff97 	bl	8007bfc <std>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	61a3      	str	r3, [r4, #24]
 8007cd2:	bd10      	pop	{r4, pc}
 8007cd4:	08008724 	.word	0x08008724
 8007cd8:	08007c45 	.word	0x08007c45

08007cdc <__sfp>:
 8007cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cde:	4b1b      	ldr	r3, [pc, #108]	; (8007d4c <__sfp+0x70>)
 8007ce0:	681e      	ldr	r6, [r3, #0]
 8007ce2:	69b3      	ldr	r3, [r6, #24]
 8007ce4:	4607      	mov	r7, r0
 8007ce6:	b913      	cbnz	r3, 8007cee <__sfp+0x12>
 8007ce8:	4630      	mov	r0, r6
 8007cea:	f7ff ffc7 	bl	8007c7c <__sinit>
 8007cee:	3648      	adds	r6, #72	; 0x48
 8007cf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	d503      	bpl.n	8007d00 <__sfp+0x24>
 8007cf8:	6833      	ldr	r3, [r6, #0]
 8007cfa:	b133      	cbz	r3, 8007d0a <__sfp+0x2e>
 8007cfc:	6836      	ldr	r6, [r6, #0]
 8007cfe:	e7f7      	b.n	8007cf0 <__sfp+0x14>
 8007d00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d04:	b16d      	cbz	r5, 8007d22 <__sfp+0x46>
 8007d06:	3468      	adds	r4, #104	; 0x68
 8007d08:	e7f4      	b.n	8007cf4 <__sfp+0x18>
 8007d0a:	2104      	movs	r1, #4
 8007d0c:	4638      	mov	r0, r7
 8007d0e:	f7ff ff9f 	bl	8007c50 <__sfmoreglue>
 8007d12:	6030      	str	r0, [r6, #0]
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d1f1      	bne.n	8007cfc <__sfp+0x20>
 8007d18:	230c      	movs	r3, #12
 8007d1a:	603b      	str	r3, [r7, #0]
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	4620      	mov	r0, r4
 8007d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d22:	4b0b      	ldr	r3, [pc, #44]	; (8007d50 <__sfp+0x74>)
 8007d24:	6665      	str	r5, [r4, #100]	; 0x64
 8007d26:	e9c4 5500 	strd	r5, r5, [r4]
 8007d2a:	60a5      	str	r5, [r4, #8]
 8007d2c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007d30:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007d34:	2208      	movs	r2, #8
 8007d36:	4629      	mov	r1, r5
 8007d38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d3c:	f7ff fd6a 	bl	8007814 <memset>
 8007d40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d48:	e7e9      	b.n	8007d1e <__sfp+0x42>
 8007d4a:	bf00      	nop
 8007d4c:	08008724 	.word	0x08008724
 8007d50:	ffff0001 	.word	0xffff0001

08007d54 <_fwalk_reent>:
 8007d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d58:	4680      	mov	r8, r0
 8007d5a:	4689      	mov	r9, r1
 8007d5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d60:	2600      	movs	r6, #0
 8007d62:	b914      	cbnz	r4, 8007d6a <_fwalk_reent+0x16>
 8007d64:	4630      	mov	r0, r6
 8007d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d6a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007d6e:	3f01      	subs	r7, #1
 8007d70:	d501      	bpl.n	8007d76 <_fwalk_reent+0x22>
 8007d72:	6824      	ldr	r4, [r4, #0]
 8007d74:	e7f5      	b.n	8007d62 <_fwalk_reent+0xe>
 8007d76:	89ab      	ldrh	r3, [r5, #12]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d907      	bls.n	8007d8c <_fwalk_reent+0x38>
 8007d7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d80:	3301      	adds	r3, #1
 8007d82:	d003      	beq.n	8007d8c <_fwalk_reent+0x38>
 8007d84:	4629      	mov	r1, r5
 8007d86:	4640      	mov	r0, r8
 8007d88:	47c8      	blx	r9
 8007d8a:	4306      	orrs	r6, r0
 8007d8c:	3568      	adds	r5, #104	; 0x68
 8007d8e:	e7ee      	b.n	8007d6e <_fwalk_reent+0x1a>

08007d90 <__swhatbuf_r>:
 8007d90:	b570      	push	{r4, r5, r6, lr}
 8007d92:	460e      	mov	r6, r1
 8007d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d98:	2900      	cmp	r1, #0
 8007d9a:	b096      	sub	sp, #88	; 0x58
 8007d9c:	4614      	mov	r4, r2
 8007d9e:	461d      	mov	r5, r3
 8007da0:	da07      	bge.n	8007db2 <__swhatbuf_r+0x22>
 8007da2:	2300      	movs	r3, #0
 8007da4:	602b      	str	r3, [r5, #0]
 8007da6:	89b3      	ldrh	r3, [r6, #12]
 8007da8:	061a      	lsls	r2, r3, #24
 8007daa:	d410      	bmi.n	8007dce <__swhatbuf_r+0x3e>
 8007dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007db0:	e00e      	b.n	8007dd0 <__swhatbuf_r+0x40>
 8007db2:	466a      	mov	r2, sp
 8007db4:	f000 fc36 	bl	8008624 <_fstat_r>
 8007db8:	2800      	cmp	r0, #0
 8007dba:	dbf2      	blt.n	8007da2 <__swhatbuf_r+0x12>
 8007dbc:	9a01      	ldr	r2, [sp, #4]
 8007dbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007dc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007dc6:	425a      	negs	r2, r3
 8007dc8:	415a      	adcs	r2, r3
 8007dca:	602a      	str	r2, [r5, #0]
 8007dcc:	e7ee      	b.n	8007dac <__swhatbuf_r+0x1c>
 8007dce:	2340      	movs	r3, #64	; 0x40
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	6023      	str	r3, [r4, #0]
 8007dd4:	b016      	add	sp, #88	; 0x58
 8007dd6:	bd70      	pop	{r4, r5, r6, pc}

08007dd8 <__smakebuf_r>:
 8007dd8:	898b      	ldrh	r3, [r1, #12]
 8007dda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ddc:	079d      	lsls	r5, r3, #30
 8007dde:	4606      	mov	r6, r0
 8007de0:	460c      	mov	r4, r1
 8007de2:	d507      	bpl.n	8007df4 <__smakebuf_r+0x1c>
 8007de4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	6123      	str	r3, [r4, #16]
 8007dec:	2301      	movs	r3, #1
 8007dee:	6163      	str	r3, [r4, #20]
 8007df0:	b002      	add	sp, #8
 8007df2:	bd70      	pop	{r4, r5, r6, pc}
 8007df4:	ab01      	add	r3, sp, #4
 8007df6:	466a      	mov	r2, sp
 8007df8:	f7ff ffca 	bl	8007d90 <__swhatbuf_r>
 8007dfc:	9900      	ldr	r1, [sp, #0]
 8007dfe:	4605      	mov	r5, r0
 8007e00:	4630      	mov	r0, r6
 8007e02:	f000 f877 	bl	8007ef4 <_malloc_r>
 8007e06:	b948      	cbnz	r0, 8007e1c <__smakebuf_r+0x44>
 8007e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e0c:	059a      	lsls	r2, r3, #22
 8007e0e:	d4ef      	bmi.n	8007df0 <__smakebuf_r+0x18>
 8007e10:	f023 0303 	bic.w	r3, r3, #3
 8007e14:	f043 0302 	orr.w	r3, r3, #2
 8007e18:	81a3      	strh	r3, [r4, #12]
 8007e1a:	e7e3      	b.n	8007de4 <__smakebuf_r+0xc>
 8007e1c:	4b0d      	ldr	r3, [pc, #52]	; (8007e54 <__smakebuf_r+0x7c>)
 8007e1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e20:	89a3      	ldrh	r3, [r4, #12]
 8007e22:	6020      	str	r0, [r4, #0]
 8007e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e28:	81a3      	strh	r3, [r4, #12]
 8007e2a:	9b00      	ldr	r3, [sp, #0]
 8007e2c:	6163      	str	r3, [r4, #20]
 8007e2e:	9b01      	ldr	r3, [sp, #4]
 8007e30:	6120      	str	r0, [r4, #16]
 8007e32:	b15b      	cbz	r3, 8007e4c <__smakebuf_r+0x74>
 8007e34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e38:	4630      	mov	r0, r6
 8007e3a:	f000 fc05 	bl	8008648 <_isatty_r>
 8007e3e:	b128      	cbz	r0, 8007e4c <__smakebuf_r+0x74>
 8007e40:	89a3      	ldrh	r3, [r4, #12]
 8007e42:	f023 0303 	bic.w	r3, r3, #3
 8007e46:	f043 0301 	orr.w	r3, r3, #1
 8007e4a:	81a3      	strh	r3, [r4, #12]
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	431d      	orrs	r5, r3
 8007e50:	81a5      	strh	r5, [r4, #12]
 8007e52:	e7cd      	b.n	8007df0 <__smakebuf_r+0x18>
 8007e54:	08007c45 	.word	0x08007c45

08007e58 <_free_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4605      	mov	r5, r0
 8007e5c:	2900      	cmp	r1, #0
 8007e5e:	d045      	beq.n	8007eec <_free_r+0x94>
 8007e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e64:	1f0c      	subs	r4, r1, #4
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	bfb8      	it	lt
 8007e6a:	18e4      	addlt	r4, r4, r3
 8007e6c:	f000 fc0e 	bl	800868c <__malloc_lock>
 8007e70:	4a1f      	ldr	r2, [pc, #124]	; (8007ef0 <_free_r+0x98>)
 8007e72:	6813      	ldr	r3, [r2, #0]
 8007e74:	4610      	mov	r0, r2
 8007e76:	b933      	cbnz	r3, 8007e86 <_free_r+0x2e>
 8007e78:	6063      	str	r3, [r4, #4]
 8007e7a:	6014      	str	r4, [r2, #0]
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e82:	f000 bc04 	b.w	800868e <__malloc_unlock>
 8007e86:	42a3      	cmp	r3, r4
 8007e88:	d90c      	bls.n	8007ea4 <_free_r+0x4c>
 8007e8a:	6821      	ldr	r1, [r4, #0]
 8007e8c:	1862      	adds	r2, r4, r1
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	bf04      	itt	eq
 8007e92:	681a      	ldreq	r2, [r3, #0]
 8007e94:	685b      	ldreq	r3, [r3, #4]
 8007e96:	6063      	str	r3, [r4, #4]
 8007e98:	bf04      	itt	eq
 8007e9a:	1852      	addeq	r2, r2, r1
 8007e9c:	6022      	streq	r2, [r4, #0]
 8007e9e:	6004      	str	r4, [r0, #0]
 8007ea0:	e7ec      	b.n	8007e7c <_free_r+0x24>
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	685a      	ldr	r2, [r3, #4]
 8007ea6:	b10a      	cbz	r2, 8007eac <_free_r+0x54>
 8007ea8:	42a2      	cmp	r2, r4
 8007eaa:	d9fa      	bls.n	8007ea2 <_free_r+0x4a>
 8007eac:	6819      	ldr	r1, [r3, #0]
 8007eae:	1858      	adds	r0, r3, r1
 8007eb0:	42a0      	cmp	r0, r4
 8007eb2:	d10b      	bne.n	8007ecc <_free_r+0x74>
 8007eb4:	6820      	ldr	r0, [r4, #0]
 8007eb6:	4401      	add	r1, r0
 8007eb8:	1858      	adds	r0, r3, r1
 8007eba:	4282      	cmp	r2, r0
 8007ebc:	6019      	str	r1, [r3, #0]
 8007ebe:	d1dd      	bne.n	8007e7c <_free_r+0x24>
 8007ec0:	6810      	ldr	r0, [r2, #0]
 8007ec2:	6852      	ldr	r2, [r2, #4]
 8007ec4:	605a      	str	r2, [r3, #4]
 8007ec6:	4401      	add	r1, r0
 8007ec8:	6019      	str	r1, [r3, #0]
 8007eca:	e7d7      	b.n	8007e7c <_free_r+0x24>
 8007ecc:	d902      	bls.n	8007ed4 <_free_r+0x7c>
 8007ece:	230c      	movs	r3, #12
 8007ed0:	602b      	str	r3, [r5, #0]
 8007ed2:	e7d3      	b.n	8007e7c <_free_r+0x24>
 8007ed4:	6820      	ldr	r0, [r4, #0]
 8007ed6:	1821      	adds	r1, r4, r0
 8007ed8:	428a      	cmp	r2, r1
 8007eda:	bf04      	itt	eq
 8007edc:	6811      	ldreq	r1, [r2, #0]
 8007ede:	6852      	ldreq	r2, [r2, #4]
 8007ee0:	6062      	str	r2, [r4, #4]
 8007ee2:	bf04      	itt	eq
 8007ee4:	1809      	addeq	r1, r1, r0
 8007ee6:	6021      	streq	r1, [r4, #0]
 8007ee8:	605c      	str	r4, [r3, #4]
 8007eea:	e7c7      	b.n	8007e7c <_free_r+0x24>
 8007eec:	bd38      	pop	{r3, r4, r5, pc}
 8007eee:	bf00      	nop
 8007ef0:	200000e0 	.word	0x200000e0

08007ef4 <_malloc_r>:
 8007ef4:	b570      	push	{r4, r5, r6, lr}
 8007ef6:	1ccd      	adds	r5, r1, #3
 8007ef8:	f025 0503 	bic.w	r5, r5, #3
 8007efc:	3508      	adds	r5, #8
 8007efe:	2d0c      	cmp	r5, #12
 8007f00:	bf38      	it	cc
 8007f02:	250c      	movcc	r5, #12
 8007f04:	2d00      	cmp	r5, #0
 8007f06:	4606      	mov	r6, r0
 8007f08:	db01      	blt.n	8007f0e <_malloc_r+0x1a>
 8007f0a:	42a9      	cmp	r1, r5
 8007f0c:	d903      	bls.n	8007f16 <_malloc_r+0x22>
 8007f0e:	230c      	movs	r3, #12
 8007f10:	6033      	str	r3, [r6, #0]
 8007f12:	2000      	movs	r0, #0
 8007f14:	bd70      	pop	{r4, r5, r6, pc}
 8007f16:	f000 fbb9 	bl	800868c <__malloc_lock>
 8007f1a:	4a21      	ldr	r2, [pc, #132]	; (8007fa0 <_malloc_r+0xac>)
 8007f1c:	6814      	ldr	r4, [r2, #0]
 8007f1e:	4621      	mov	r1, r4
 8007f20:	b991      	cbnz	r1, 8007f48 <_malloc_r+0x54>
 8007f22:	4c20      	ldr	r4, [pc, #128]	; (8007fa4 <_malloc_r+0xb0>)
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	b91b      	cbnz	r3, 8007f30 <_malloc_r+0x3c>
 8007f28:	4630      	mov	r0, r6
 8007f2a:	f000 fb05 	bl	8008538 <_sbrk_r>
 8007f2e:	6020      	str	r0, [r4, #0]
 8007f30:	4629      	mov	r1, r5
 8007f32:	4630      	mov	r0, r6
 8007f34:	f000 fb00 	bl	8008538 <_sbrk_r>
 8007f38:	1c43      	adds	r3, r0, #1
 8007f3a:	d124      	bne.n	8007f86 <_malloc_r+0x92>
 8007f3c:	230c      	movs	r3, #12
 8007f3e:	6033      	str	r3, [r6, #0]
 8007f40:	4630      	mov	r0, r6
 8007f42:	f000 fba4 	bl	800868e <__malloc_unlock>
 8007f46:	e7e4      	b.n	8007f12 <_malloc_r+0x1e>
 8007f48:	680b      	ldr	r3, [r1, #0]
 8007f4a:	1b5b      	subs	r3, r3, r5
 8007f4c:	d418      	bmi.n	8007f80 <_malloc_r+0x8c>
 8007f4e:	2b0b      	cmp	r3, #11
 8007f50:	d90f      	bls.n	8007f72 <_malloc_r+0x7e>
 8007f52:	600b      	str	r3, [r1, #0]
 8007f54:	50cd      	str	r5, [r1, r3]
 8007f56:	18cc      	adds	r4, r1, r3
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f000 fb98 	bl	800868e <__malloc_unlock>
 8007f5e:	f104 000b 	add.w	r0, r4, #11
 8007f62:	1d23      	adds	r3, r4, #4
 8007f64:	f020 0007 	bic.w	r0, r0, #7
 8007f68:	1ac3      	subs	r3, r0, r3
 8007f6a:	d0d3      	beq.n	8007f14 <_malloc_r+0x20>
 8007f6c:	425a      	negs	r2, r3
 8007f6e:	50e2      	str	r2, [r4, r3]
 8007f70:	e7d0      	b.n	8007f14 <_malloc_r+0x20>
 8007f72:	428c      	cmp	r4, r1
 8007f74:	684b      	ldr	r3, [r1, #4]
 8007f76:	bf16      	itet	ne
 8007f78:	6063      	strne	r3, [r4, #4]
 8007f7a:	6013      	streq	r3, [r2, #0]
 8007f7c:	460c      	movne	r4, r1
 8007f7e:	e7eb      	b.n	8007f58 <_malloc_r+0x64>
 8007f80:	460c      	mov	r4, r1
 8007f82:	6849      	ldr	r1, [r1, #4]
 8007f84:	e7cc      	b.n	8007f20 <_malloc_r+0x2c>
 8007f86:	1cc4      	adds	r4, r0, #3
 8007f88:	f024 0403 	bic.w	r4, r4, #3
 8007f8c:	42a0      	cmp	r0, r4
 8007f8e:	d005      	beq.n	8007f9c <_malloc_r+0xa8>
 8007f90:	1a21      	subs	r1, r4, r0
 8007f92:	4630      	mov	r0, r6
 8007f94:	f000 fad0 	bl	8008538 <_sbrk_r>
 8007f98:	3001      	adds	r0, #1
 8007f9a:	d0cf      	beq.n	8007f3c <_malloc_r+0x48>
 8007f9c:	6025      	str	r5, [r4, #0]
 8007f9e:	e7db      	b.n	8007f58 <_malloc_r+0x64>
 8007fa0:	200000e0 	.word	0x200000e0
 8007fa4:	200000e4 	.word	0x200000e4

08007fa8 <__sfputc_r>:
 8007fa8:	6893      	ldr	r3, [r2, #8]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	b410      	push	{r4}
 8007fb0:	6093      	str	r3, [r2, #8]
 8007fb2:	da08      	bge.n	8007fc6 <__sfputc_r+0x1e>
 8007fb4:	6994      	ldr	r4, [r2, #24]
 8007fb6:	42a3      	cmp	r3, r4
 8007fb8:	db01      	blt.n	8007fbe <__sfputc_r+0x16>
 8007fba:	290a      	cmp	r1, #10
 8007fbc:	d103      	bne.n	8007fc6 <__sfputc_r+0x1e>
 8007fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fc2:	f7ff bcab 	b.w	800791c <__swbuf_r>
 8007fc6:	6813      	ldr	r3, [r2, #0]
 8007fc8:	1c58      	adds	r0, r3, #1
 8007fca:	6010      	str	r0, [r2, #0]
 8007fcc:	7019      	strb	r1, [r3, #0]
 8007fce:	4608      	mov	r0, r1
 8007fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <__sfputs_r>:
 8007fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd8:	4606      	mov	r6, r0
 8007fda:	460f      	mov	r7, r1
 8007fdc:	4614      	mov	r4, r2
 8007fde:	18d5      	adds	r5, r2, r3
 8007fe0:	42ac      	cmp	r4, r5
 8007fe2:	d101      	bne.n	8007fe8 <__sfputs_r+0x12>
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	e007      	b.n	8007ff8 <__sfputs_r+0x22>
 8007fe8:	463a      	mov	r2, r7
 8007fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f7ff ffda 	bl	8007fa8 <__sfputc_r>
 8007ff4:	1c43      	adds	r3, r0, #1
 8007ff6:	d1f3      	bne.n	8007fe0 <__sfputs_r+0xa>
 8007ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ffc <_vfiprintf_r>:
 8007ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008000:	460c      	mov	r4, r1
 8008002:	b09d      	sub	sp, #116	; 0x74
 8008004:	4617      	mov	r7, r2
 8008006:	461d      	mov	r5, r3
 8008008:	4606      	mov	r6, r0
 800800a:	b118      	cbz	r0, 8008014 <_vfiprintf_r+0x18>
 800800c:	6983      	ldr	r3, [r0, #24]
 800800e:	b90b      	cbnz	r3, 8008014 <_vfiprintf_r+0x18>
 8008010:	f7ff fe34 	bl	8007c7c <__sinit>
 8008014:	4b7c      	ldr	r3, [pc, #496]	; (8008208 <_vfiprintf_r+0x20c>)
 8008016:	429c      	cmp	r4, r3
 8008018:	d158      	bne.n	80080cc <_vfiprintf_r+0xd0>
 800801a:	6874      	ldr	r4, [r6, #4]
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	0718      	lsls	r0, r3, #28
 8008020:	d55e      	bpl.n	80080e0 <_vfiprintf_r+0xe4>
 8008022:	6923      	ldr	r3, [r4, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d05b      	beq.n	80080e0 <_vfiprintf_r+0xe4>
 8008028:	2300      	movs	r3, #0
 800802a:	9309      	str	r3, [sp, #36]	; 0x24
 800802c:	2320      	movs	r3, #32
 800802e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008032:	2330      	movs	r3, #48	; 0x30
 8008034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008038:	9503      	str	r5, [sp, #12]
 800803a:	f04f 0b01 	mov.w	fp, #1
 800803e:	46b8      	mov	r8, r7
 8008040:	4645      	mov	r5, r8
 8008042:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008046:	b10b      	cbz	r3, 800804c <_vfiprintf_r+0x50>
 8008048:	2b25      	cmp	r3, #37	; 0x25
 800804a:	d154      	bne.n	80080f6 <_vfiprintf_r+0xfa>
 800804c:	ebb8 0a07 	subs.w	sl, r8, r7
 8008050:	d00b      	beq.n	800806a <_vfiprintf_r+0x6e>
 8008052:	4653      	mov	r3, sl
 8008054:	463a      	mov	r2, r7
 8008056:	4621      	mov	r1, r4
 8008058:	4630      	mov	r0, r6
 800805a:	f7ff ffbc 	bl	8007fd6 <__sfputs_r>
 800805e:	3001      	adds	r0, #1
 8008060:	f000 80c2 	beq.w	80081e8 <_vfiprintf_r+0x1ec>
 8008064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008066:	4453      	add	r3, sl
 8008068:	9309      	str	r3, [sp, #36]	; 0x24
 800806a:	f898 3000 	ldrb.w	r3, [r8]
 800806e:	2b00      	cmp	r3, #0
 8008070:	f000 80ba 	beq.w	80081e8 <_vfiprintf_r+0x1ec>
 8008074:	2300      	movs	r3, #0
 8008076:	f04f 32ff 	mov.w	r2, #4294967295
 800807a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800807e:	9304      	str	r3, [sp, #16]
 8008080:	9307      	str	r3, [sp, #28]
 8008082:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008086:	931a      	str	r3, [sp, #104]	; 0x68
 8008088:	46a8      	mov	r8, r5
 800808a:	2205      	movs	r2, #5
 800808c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008090:	485e      	ldr	r0, [pc, #376]	; (800820c <_vfiprintf_r+0x210>)
 8008092:	f7f8 f8c5 	bl	8000220 <memchr>
 8008096:	9b04      	ldr	r3, [sp, #16]
 8008098:	bb78      	cbnz	r0, 80080fa <_vfiprintf_r+0xfe>
 800809a:	06d9      	lsls	r1, r3, #27
 800809c:	bf44      	itt	mi
 800809e:	2220      	movmi	r2, #32
 80080a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80080a4:	071a      	lsls	r2, r3, #28
 80080a6:	bf44      	itt	mi
 80080a8:	222b      	movmi	r2, #43	; 0x2b
 80080aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80080ae:	782a      	ldrb	r2, [r5, #0]
 80080b0:	2a2a      	cmp	r2, #42	; 0x2a
 80080b2:	d02a      	beq.n	800810a <_vfiprintf_r+0x10e>
 80080b4:	9a07      	ldr	r2, [sp, #28]
 80080b6:	46a8      	mov	r8, r5
 80080b8:	2000      	movs	r0, #0
 80080ba:	250a      	movs	r5, #10
 80080bc:	4641      	mov	r1, r8
 80080be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080c2:	3b30      	subs	r3, #48	; 0x30
 80080c4:	2b09      	cmp	r3, #9
 80080c6:	d969      	bls.n	800819c <_vfiprintf_r+0x1a0>
 80080c8:	b360      	cbz	r0, 8008124 <_vfiprintf_r+0x128>
 80080ca:	e024      	b.n	8008116 <_vfiprintf_r+0x11a>
 80080cc:	4b50      	ldr	r3, [pc, #320]	; (8008210 <_vfiprintf_r+0x214>)
 80080ce:	429c      	cmp	r4, r3
 80080d0:	d101      	bne.n	80080d6 <_vfiprintf_r+0xda>
 80080d2:	68b4      	ldr	r4, [r6, #8]
 80080d4:	e7a2      	b.n	800801c <_vfiprintf_r+0x20>
 80080d6:	4b4f      	ldr	r3, [pc, #316]	; (8008214 <_vfiprintf_r+0x218>)
 80080d8:	429c      	cmp	r4, r3
 80080da:	bf08      	it	eq
 80080dc:	68f4      	ldreq	r4, [r6, #12]
 80080de:	e79d      	b.n	800801c <_vfiprintf_r+0x20>
 80080e0:	4621      	mov	r1, r4
 80080e2:	4630      	mov	r0, r6
 80080e4:	f7ff fc6c 	bl	80079c0 <__swsetup_r>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d09d      	beq.n	8008028 <_vfiprintf_r+0x2c>
 80080ec:	f04f 30ff 	mov.w	r0, #4294967295
 80080f0:	b01d      	add	sp, #116	; 0x74
 80080f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f6:	46a8      	mov	r8, r5
 80080f8:	e7a2      	b.n	8008040 <_vfiprintf_r+0x44>
 80080fa:	4a44      	ldr	r2, [pc, #272]	; (800820c <_vfiprintf_r+0x210>)
 80080fc:	1a80      	subs	r0, r0, r2
 80080fe:	fa0b f000 	lsl.w	r0, fp, r0
 8008102:	4318      	orrs	r0, r3
 8008104:	9004      	str	r0, [sp, #16]
 8008106:	4645      	mov	r5, r8
 8008108:	e7be      	b.n	8008088 <_vfiprintf_r+0x8c>
 800810a:	9a03      	ldr	r2, [sp, #12]
 800810c:	1d11      	adds	r1, r2, #4
 800810e:	6812      	ldr	r2, [r2, #0]
 8008110:	9103      	str	r1, [sp, #12]
 8008112:	2a00      	cmp	r2, #0
 8008114:	db01      	blt.n	800811a <_vfiprintf_r+0x11e>
 8008116:	9207      	str	r2, [sp, #28]
 8008118:	e004      	b.n	8008124 <_vfiprintf_r+0x128>
 800811a:	4252      	negs	r2, r2
 800811c:	f043 0302 	orr.w	r3, r3, #2
 8008120:	9207      	str	r2, [sp, #28]
 8008122:	9304      	str	r3, [sp, #16]
 8008124:	f898 3000 	ldrb.w	r3, [r8]
 8008128:	2b2e      	cmp	r3, #46	; 0x2e
 800812a:	d10e      	bne.n	800814a <_vfiprintf_r+0x14e>
 800812c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008130:	2b2a      	cmp	r3, #42	; 0x2a
 8008132:	d138      	bne.n	80081a6 <_vfiprintf_r+0x1aa>
 8008134:	9b03      	ldr	r3, [sp, #12]
 8008136:	1d1a      	adds	r2, r3, #4
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	9203      	str	r2, [sp, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	bfb8      	it	lt
 8008140:	f04f 33ff 	movlt.w	r3, #4294967295
 8008144:	f108 0802 	add.w	r8, r8, #2
 8008148:	9305      	str	r3, [sp, #20]
 800814a:	4d33      	ldr	r5, [pc, #204]	; (8008218 <_vfiprintf_r+0x21c>)
 800814c:	f898 1000 	ldrb.w	r1, [r8]
 8008150:	2203      	movs	r2, #3
 8008152:	4628      	mov	r0, r5
 8008154:	f7f8 f864 	bl	8000220 <memchr>
 8008158:	b140      	cbz	r0, 800816c <_vfiprintf_r+0x170>
 800815a:	2340      	movs	r3, #64	; 0x40
 800815c:	1b40      	subs	r0, r0, r5
 800815e:	fa03 f000 	lsl.w	r0, r3, r0
 8008162:	9b04      	ldr	r3, [sp, #16]
 8008164:	4303      	orrs	r3, r0
 8008166:	f108 0801 	add.w	r8, r8, #1
 800816a:	9304      	str	r3, [sp, #16]
 800816c:	f898 1000 	ldrb.w	r1, [r8]
 8008170:	482a      	ldr	r0, [pc, #168]	; (800821c <_vfiprintf_r+0x220>)
 8008172:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008176:	2206      	movs	r2, #6
 8008178:	f108 0701 	add.w	r7, r8, #1
 800817c:	f7f8 f850 	bl	8000220 <memchr>
 8008180:	2800      	cmp	r0, #0
 8008182:	d037      	beq.n	80081f4 <_vfiprintf_r+0x1f8>
 8008184:	4b26      	ldr	r3, [pc, #152]	; (8008220 <_vfiprintf_r+0x224>)
 8008186:	bb1b      	cbnz	r3, 80081d0 <_vfiprintf_r+0x1d4>
 8008188:	9b03      	ldr	r3, [sp, #12]
 800818a:	3307      	adds	r3, #7
 800818c:	f023 0307 	bic.w	r3, r3, #7
 8008190:	3308      	adds	r3, #8
 8008192:	9303      	str	r3, [sp, #12]
 8008194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008196:	444b      	add	r3, r9
 8008198:	9309      	str	r3, [sp, #36]	; 0x24
 800819a:	e750      	b.n	800803e <_vfiprintf_r+0x42>
 800819c:	fb05 3202 	mla	r2, r5, r2, r3
 80081a0:	2001      	movs	r0, #1
 80081a2:	4688      	mov	r8, r1
 80081a4:	e78a      	b.n	80080bc <_vfiprintf_r+0xc0>
 80081a6:	2300      	movs	r3, #0
 80081a8:	f108 0801 	add.w	r8, r8, #1
 80081ac:	9305      	str	r3, [sp, #20]
 80081ae:	4619      	mov	r1, r3
 80081b0:	250a      	movs	r5, #10
 80081b2:	4640      	mov	r0, r8
 80081b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081b8:	3a30      	subs	r2, #48	; 0x30
 80081ba:	2a09      	cmp	r2, #9
 80081bc:	d903      	bls.n	80081c6 <_vfiprintf_r+0x1ca>
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d0c3      	beq.n	800814a <_vfiprintf_r+0x14e>
 80081c2:	9105      	str	r1, [sp, #20]
 80081c4:	e7c1      	b.n	800814a <_vfiprintf_r+0x14e>
 80081c6:	fb05 2101 	mla	r1, r5, r1, r2
 80081ca:	2301      	movs	r3, #1
 80081cc:	4680      	mov	r8, r0
 80081ce:	e7f0      	b.n	80081b2 <_vfiprintf_r+0x1b6>
 80081d0:	ab03      	add	r3, sp, #12
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	4622      	mov	r2, r4
 80081d6:	4b13      	ldr	r3, [pc, #76]	; (8008224 <_vfiprintf_r+0x228>)
 80081d8:	a904      	add	r1, sp, #16
 80081da:	4630      	mov	r0, r6
 80081dc:	f3af 8000 	nop.w
 80081e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80081e4:	4681      	mov	r9, r0
 80081e6:	d1d5      	bne.n	8008194 <_vfiprintf_r+0x198>
 80081e8:	89a3      	ldrh	r3, [r4, #12]
 80081ea:	065b      	lsls	r3, r3, #25
 80081ec:	f53f af7e 	bmi.w	80080ec <_vfiprintf_r+0xf0>
 80081f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081f2:	e77d      	b.n	80080f0 <_vfiprintf_r+0xf4>
 80081f4:	ab03      	add	r3, sp, #12
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	4622      	mov	r2, r4
 80081fa:	4b0a      	ldr	r3, [pc, #40]	; (8008224 <_vfiprintf_r+0x228>)
 80081fc:	a904      	add	r1, sp, #16
 80081fe:	4630      	mov	r0, r6
 8008200:	f000 f888 	bl	8008314 <_printf_i>
 8008204:	e7ec      	b.n	80081e0 <_vfiprintf_r+0x1e4>
 8008206:	bf00      	nop
 8008208:	08008748 	.word	0x08008748
 800820c:	08008788 	.word	0x08008788
 8008210:	08008768 	.word	0x08008768
 8008214:	08008728 	.word	0x08008728
 8008218:	0800878e 	.word	0x0800878e
 800821c:	08008792 	.word	0x08008792
 8008220:	00000000 	.word	0x00000000
 8008224:	08007fd7 	.word	0x08007fd7

08008228 <_printf_common>:
 8008228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800822c:	4691      	mov	r9, r2
 800822e:	461f      	mov	r7, r3
 8008230:	688a      	ldr	r2, [r1, #8]
 8008232:	690b      	ldr	r3, [r1, #16]
 8008234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008238:	4293      	cmp	r3, r2
 800823a:	bfb8      	it	lt
 800823c:	4613      	movlt	r3, r2
 800823e:	f8c9 3000 	str.w	r3, [r9]
 8008242:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008246:	4606      	mov	r6, r0
 8008248:	460c      	mov	r4, r1
 800824a:	b112      	cbz	r2, 8008252 <_printf_common+0x2a>
 800824c:	3301      	adds	r3, #1
 800824e:	f8c9 3000 	str.w	r3, [r9]
 8008252:	6823      	ldr	r3, [r4, #0]
 8008254:	0699      	lsls	r1, r3, #26
 8008256:	bf42      	ittt	mi
 8008258:	f8d9 3000 	ldrmi.w	r3, [r9]
 800825c:	3302      	addmi	r3, #2
 800825e:	f8c9 3000 	strmi.w	r3, [r9]
 8008262:	6825      	ldr	r5, [r4, #0]
 8008264:	f015 0506 	ands.w	r5, r5, #6
 8008268:	d107      	bne.n	800827a <_printf_common+0x52>
 800826a:	f104 0a19 	add.w	sl, r4, #25
 800826e:	68e3      	ldr	r3, [r4, #12]
 8008270:	f8d9 2000 	ldr.w	r2, [r9]
 8008274:	1a9b      	subs	r3, r3, r2
 8008276:	42ab      	cmp	r3, r5
 8008278:	dc28      	bgt.n	80082cc <_printf_common+0xa4>
 800827a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800827e:	6822      	ldr	r2, [r4, #0]
 8008280:	3300      	adds	r3, #0
 8008282:	bf18      	it	ne
 8008284:	2301      	movne	r3, #1
 8008286:	0692      	lsls	r2, r2, #26
 8008288:	d42d      	bmi.n	80082e6 <_printf_common+0xbe>
 800828a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800828e:	4639      	mov	r1, r7
 8008290:	4630      	mov	r0, r6
 8008292:	47c0      	blx	r8
 8008294:	3001      	adds	r0, #1
 8008296:	d020      	beq.n	80082da <_printf_common+0xb2>
 8008298:	6823      	ldr	r3, [r4, #0]
 800829a:	68e5      	ldr	r5, [r4, #12]
 800829c:	f8d9 2000 	ldr.w	r2, [r9]
 80082a0:	f003 0306 	and.w	r3, r3, #6
 80082a4:	2b04      	cmp	r3, #4
 80082a6:	bf08      	it	eq
 80082a8:	1aad      	subeq	r5, r5, r2
 80082aa:	68a3      	ldr	r3, [r4, #8]
 80082ac:	6922      	ldr	r2, [r4, #16]
 80082ae:	bf0c      	ite	eq
 80082b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082b4:	2500      	movne	r5, #0
 80082b6:	4293      	cmp	r3, r2
 80082b8:	bfc4      	itt	gt
 80082ba:	1a9b      	subgt	r3, r3, r2
 80082bc:	18ed      	addgt	r5, r5, r3
 80082be:	f04f 0900 	mov.w	r9, #0
 80082c2:	341a      	adds	r4, #26
 80082c4:	454d      	cmp	r5, r9
 80082c6:	d11a      	bne.n	80082fe <_printf_common+0xd6>
 80082c8:	2000      	movs	r0, #0
 80082ca:	e008      	b.n	80082de <_printf_common+0xb6>
 80082cc:	2301      	movs	r3, #1
 80082ce:	4652      	mov	r2, sl
 80082d0:	4639      	mov	r1, r7
 80082d2:	4630      	mov	r0, r6
 80082d4:	47c0      	blx	r8
 80082d6:	3001      	adds	r0, #1
 80082d8:	d103      	bne.n	80082e2 <_printf_common+0xba>
 80082da:	f04f 30ff 	mov.w	r0, #4294967295
 80082de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e2:	3501      	adds	r5, #1
 80082e4:	e7c3      	b.n	800826e <_printf_common+0x46>
 80082e6:	18e1      	adds	r1, r4, r3
 80082e8:	1c5a      	adds	r2, r3, #1
 80082ea:	2030      	movs	r0, #48	; 0x30
 80082ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082f0:	4422      	add	r2, r4
 80082f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082fa:	3302      	adds	r3, #2
 80082fc:	e7c5      	b.n	800828a <_printf_common+0x62>
 80082fe:	2301      	movs	r3, #1
 8008300:	4622      	mov	r2, r4
 8008302:	4639      	mov	r1, r7
 8008304:	4630      	mov	r0, r6
 8008306:	47c0      	blx	r8
 8008308:	3001      	adds	r0, #1
 800830a:	d0e6      	beq.n	80082da <_printf_common+0xb2>
 800830c:	f109 0901 	add.w	r9, r9, #1
 8008310:	e7d8      	b.n	80082c4 <_printf_common+0x9c>
	...

08008314 <_printf_i>:
 8008314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008318:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800831c:	460c      	mov	r4, r1
 800831e:	7e09      	ldrb	r1, [r1, #24]
 8008320:	b085      	sub	sp, #20
 8008322:	296e      	cmp	r1, #110	; 0x6e
 8008324:	4617      	mov	r7, r2
 8008326:	4606      	mov	r6, r0
 8008328:	4698      	mov	r8, r3
 800832a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800832c:	f000 80b3 	beq.w	8008496 <_printf_i+0x182>
 8008330:	d822      	bhi.n	8008378 <_printf_i+0x64>
 8008332:	2963      	cmp	r1, #99	; 0x63
 8008334:	d036      	beq.n	80083a4 <_printf_i+0x90>
 8008336:	d80a      	bhi.n	800834e <_printf_i+0x3a>
 8008338:	2900      	cmp	r1, #0
 800833a:	f000 80b9 	beq.w	80084b0 <_printf_i+0x19c>
 800833e:	2958      	cmp	r1, #88	; 0x58
 8008340:	f000 8083 	beq.w	800844a <_printf_i+0x136>
 8008344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008348:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800834c:	e032      	b.n	80083b4 <_printf_i+0xa0>
 800834e:	2964      	cmp	r1, #100	; 0x64
 8008350:	d001      	beq.n	8008356 <_printf_i+0x42>
 8008352:	2969      	cmp	r1, #105	; 0x69
 8008354:	d1f6      	bne.n	8008344 <_printf_i+0x30>
 8008356:	6820      	ldr	r0, [r4, #0]
 8008358:	6813      	ldr	r3, [r2, #0]
 800835a:	0605      	lsls	r5, r0, #24
 800835c:	f103 0104 	add.w	r1, r3, #4
 8008360:	d52a      	bpl.n	80083b8 <_printf_i+0xa4>
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6011      	str	r1, [r2, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	da03      	bge.n	8008372 <_printf_i+0x5e>
 800836a:	222d      	movs	r2, #45	; 0x2d
 800836c:	425b      	negs	r3, r3
 800836e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008372:	486f      	ldr	r0, [pc, #444]	; (8008530 <_printf_i+0x21c>)
 8008374:	220a      	movs	r2, #10
 8008376:	e039      	b.n	80083ec <_printf_i+0xd8>
 8008378:	2973      	cmp	r1, #115	; 0x73
 800837a:	f000 809d 	beq.w	80084b8 <_printf_i+0x1a4>
 800837e:	d808      	bhi.n	8008392 <_printf_i+0x7e>
 8008380:	296f      	cmp	r1, #111	; 0x6f
 8008382:	d020      	beq.n	80083c6 <_printf_i+0xb2>
 8008384:	2970      	cmp	r1, #112	; 0x70
 8008386:	d1dd      	bne.n	8008344 <_printf_i+0x30>
 8008388:	6823      	ldr	r3, [r4, #0]
 800838a:	f043 0320 	orr.w	r3, r3, #32
 800838e:	6023      	str	r3, [r4, #0]
 8008390:	e003      	b.n	800839a <_printf_i+0x86>
 8008392:	2975      	cmp	r1, #117	; 0x75
 8008394:	d017      	beq.n	80083c6 <_printf_i+0xb2>
 8008396:	2978      	cmp	r1, #120	; 0x78
 8008398:	d1d4      	bne.n	8008344 <_printf_i+0x30>
 800839a:	2378      	movs	r3, #120	; 0x78
 800839c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083a0:	4864      	ldr	r0, [pc, #400]	; (8008534 <_printf_i+0x220>)
 80083a2:	e055      	b.n	8008450 <_printf_i+0x13c>
 80083a4:	6813      	ldr	r3, [r2, #0]
 80083a6:	1d19      	adds	r1, r3, #4
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	6011      	str	r1, [r2, #0]
 80083ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083b4:	2301      	movs	r3, #1
 80083b6:	e08c      	b.n	80084d2 <_printf_i+0x1be>
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6011      	str	r1, [r2, #0]
 80083bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083c0:	bf18      	it	ne
 80083c2:	b21b      	sxthne	r3, r3
 80083c4:	e7cf      	b.n	8008366 <_printf_i+0x52>
 80083c6:	6813      	ldr	r3, [r2, #0]
 80083c8:	6825      	ldr	r5, [r4, #0]
 80083ca:	1d18      	adds	r0, r3, #4
 80083cc:	6010      	str	r0, [r2, #0]
 80083ce:	0628      	lsls	r0, r5, #24
 80083d0:	d501      	bpl.n	80083d6 <_printf_i+0xc2>
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	e002      	b.n	80083dc <_printf_i+0xc8>
 80083d6:	0668      	lsls	r0, r5, #25
 80083d8:	d5fb      	bpl.n	80083d2 <_printf_i+0xbe>
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	4854      	ldr	r0, [pc, #336]	; (8008530 <_printf_i+0x21c>)
 80083de:	296f      	cmp	r1, #111	; 0x6f
 80083e0:	bf14      	ite	ne
 80083e2:	220a      	movne	r2, #10
 80083e4:	2208      	moveq	r2, #8
 80083e6:	2100      	movs	r1, #0
 80083e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083ec:	6865      	ldr	r5, [r4, #4]
 80083ee:	60a5      	str	r5, [r4, #8]
 80083f0:	2d00      	cmp	r5, #0
 80083f2:	f2c0 8095 	blt.w	8008520 <_printf_i+0x20c>
 80083f6:	6821      	ldr	r1, [r4, #0]
 80083f8:	f021 0104 	bic.w	r1, r1, #4
 80083fc:	6021      	str	r1, [r4, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d13d      	bne.n	800847e <_printf_i+0x16a>
 8008402:	2d00      	cmp	r5, #0
 8008404:	f040 808e 	bne.w	8008524 <_printf_i+0x210>
 8008408:	4665      	mov	r5, ip
 800840a:	2a08      	cmp	r2, #8
 800840c:	d10b      	bne.n	8008426 <_printf_i+0x112>
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	07db      	lsls	r3, r3, #31
 8008412:	d508      	bpl.n	8008426 <_printf_i+0x112>
 8008414:	6923      	ldr	r3, [r4, #16]
 8008416:	6862      	ldr	r2, [r4, #4]
 8008418:	429a      	cmp	r2, r3
 800841a:	bfde      	ittt	le
 800841c:	2330      	movle	r3, #48	; 0x30
 800841e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008422:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008426:	ebac 0305 	sub.w	r3, ip, r5
 800842a:	6123      	str	r3, [r4, #16]
 800842c:	f8cd 8000 	str.w	r8, [sp]
 8008430:	463b      	mov	r3, r7
 8008432:	aa03      	add	r2, sp, #12
 8008434:	4621      	mov	r1, r4
 8008436:	4630      	mov	r0, r6
 8008438:	f7ff fef6 	bl	8008228 <_printf_common>
 800843c:	3001      	adds	r0, #1
 800843e:	d14d      	bne.n	80084dc <_printf_i+0x1c8>
 8008440:	f04f 30ff 	mov.w	r0, #4294967295
 8008444:	b005      	add	sp, #20
 8008446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800844a:	4839      	ldr	r0, [pc, #228]	; (8008530 <_printf_i+0x21c>)
 800844c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008450:	6813      	ldr	r3, [r2, #0]
 8008452:	6821      	ldr	r1, [r4, #0]
 8008454:	1d1d      	adds	r5, r3, #4
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6015      	str	r5, [r2, #0]
 800845a:	060a      	lsls	r2, r1, #24
 800845c:	d50b      	bpl.n	8008476 <_printf_i+0x162>
 800845e:	07ca      	lsls	r2, r1, #31
 8008460:	bf44      	itt	mi
 8008462:	f041 0120 	orrmi.w	r1, r1, #32
 8008466:	6021      	strmi	r1, [r4, #0]
 8008468:	b91b      	cbnz	r3, 8008472 <_printf_i+0x15e>
 800846a:	6822      	ldr	r2, [r4, #0]
 800846c:	f022 0220 	bic.w	r2, r2, #32
 8008470:	6022      	str	r2, [r4, #0]
 8008472:	2210      	movs	r2, #16
 8008474:	e7b7      	b.n	80083e6 <_printf_i+0xd2>
 8008476:	064d      	lsls	r5, r1, #25
 8008478:	bf48      	it	mi
 800847a:	b29b      	uxthmi	r3, r3
 800847c:	e7ef      	b.n	800845e <_printf_i+0x14a>
 800847e:	4665      	mov	r5, ip
 8008480:	fbb3 f1f2 	udiv	r1, r3, r2
 8008484:	fb02 3311 	mls	r3, r2, r1, r3
 8008488:	5cc3      	ldrb	r3, [r0, r3]
 800848a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800848e:	460b      	mov	r3, r1
 8008490:	2900      	cmp	r1, #0
 8008492:	d1f5      	bne.n	8008480 <_printf_i+0x16c>
 8008494:	e7b9      	b.n	800840a <_printf_i+0xf6>
 8008496:	6813      	ldr	r3, [r2, #0]
 8008498:	6825      	ldr	r5, [r4, #0]
 800849a:	6961      	ldr	r1, [r4, #20]
 800849c:	1d18      	adds	r0, r3, #4
 800849e:	6010      	str	r0, [r2, #0]
 80084a0:	0628      	lsls	r0, r5, #24
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	d501      	bpl.n	80084aa <_printf_i+0x196>
 80084a6:	6019      	str	r1, [r3, #0]
 80084a8:	e002      	b.n	80084b0 <_printf_i+0x19c>
 80084aa:	066a      	lsls	r2, r5, #25
 80084ac:	d5fb      	bpl.n	80084a6 <_printf_i+0x192>
 80084ae:	8019      	strh	r1, [r3, #0]
 80084b0:	2300      	movs	r3, #0
 80084b2:	6123      	str	r3, [r4, #16]
 80084b4:	4665      	mov	r5, ip
 80084b6:	e7b9      	b.n	800842c <_printf_i+0x118>
 80084b8:	6813      	ldr	r3, [r2, #0]
 80084ba:	1d19      	adds	r1, r3, #4
 80084bc:	6011      	str	r1, [r2, #0]
 80084be:	681d      	ldr	r5, [r3, #0]
 80084c0:	6862      	ldr	r2, [r4, #4]
 80084c2:	2100      	movs	r1, #0
 80084c4:	4628      	mov	r0, r5
 80084c6:	f7f7 feab 	bl	8000220 <memchr>
 80084ca:	b108      	cbz	r0, 80084d0 <_printf_i+0x1bc>
 80084cc:	1b40      	subs	r0, r0, r5
 80084ce:	6060      	str	r0, [r4, #4]
 80084d0:	6863      	ldr	r3, [r4, #4]
 80084d2:	6123      	str	r3, [r4, #16]
 80084d4:	2300      	movs	r3, #0
 80084d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084da:	e7a7      	b.n	800842c <_printf_i+0x118>
 80084dc:	6923      	ldr	r3, [r4, #16]
 80084de:	462a      	mov	r2, r5
 80084e0:	4639      	mov	r1, r7
 80084e2:	4630      	mov	r0, r6
 80084e4:	47c0      	blx	r8
 80084e6:	3001      	adds	r0, #1
 80084e8:	d0aa      	beq.n	8008440 <_printf_i+0x12c>
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	079b      	lsls	r3, r3, #30
 80084ee:	d413      	bmi.n	8008518 <_printf_i+0x204>
 80084f0:	68e0      	ldr	r0, [r4, #12]
 80084f2:	9b03      	ldr	r3, [sp, #12]
 80084f4:	4298      	cmp	r0, r3
 80084f6:	bfb8      	it	lt
 80084f8:	4618      	movlt	r0, r3
 80084fa:	e7a3      	b.n	8008444 <_printf_i+0x130>
 80084fc:	2301      	movs	r3, #1
 80084fe:	464a      	mov	r2, r9
 8008500:	4639      	mov	r1, r7
 8008502:	4630      	mov	r0, r6
 8008504:	47c0      	blx	r8
 8008506:	3001      	adds	r0, #1
 8008508:	d09a      	beq.n	8008440 <_printf_i+0x12c>
 800850a:	3501      	adds	r5, #1
 800850c:	68e3      	ldr	r3, [r4, #12]
 800850e:	9a03      	ldr	r2, [sp, #12]
 8008510:	1a9b      	subs	r3, r3, r2
 8008512:	42ab      	cmp	r3, r5
 8008514:	dcf2      	bgt.n	80084fc <_printf_i+0x1e8>
 8008516:	e7eb      	b.n	80084f0 <_printf_i+0x1dc>
 8008518:	2500      	movs	r5, #0
 800851a:	f104 0919 	add.w	r9, r4, #25
 800851e:	e7f5      	b.n	800850c <_printf_i+0x1f8>
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1ac      	bne.n	800847e <_printf_i+0x16a>
 8008524:	7803      	ldrb	r3, [r0, #0]
 8008526:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800852a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800852e:	e76c      	b.n	800840a <_printf_i+0xf6>
 8008530:	08008799 	.word	0x08008799
 8008534:	080087aa 	.word	0x080087aa

08008538 <_sbrk_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	4c06      	ldr	r4, [pc, #24]	; (8008554 <_sbrk_r+0x1c>)
 800853c:	2300      	movs	r3, #0
 800853e:	4605      	mov	r5, r0
 8008540:	4608      	mov	r0, r1
 8008542:	6023      	str	r3, [r4, #0]
 8008544:	f7f9 fe20 	bl	8002188 <_sbrk>
 8008548:	1c43      	adds	r3, r0, #1
 800854a:	d102      	bne.n	8008552 <_sbrk_r+0x1a>
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	b103      	cbz	r3, 8008552 <_sbrk_r+0x1a>
 8008550:	602b      	str	r3, [r5, #0]
 8008552:	bd38      	pop	{r3, r4, r5, pc}
 8008554:	200045a4 	.word	0x200045a4

08008558 <__sread>:
 8008558:	b510      	push	{r4, lr}
 800855a:	460c      	mov	r4, r1
 800855c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008560:	f000 f896 	bl	8008690 <_read_r>
 8008564:	2800      	cmp	r0, #0
 8008566:	bfab      	itete	ge
 8008568:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800856a:	89a3      	ldrhlt	r3, [r4, #12]
 800856c:	181b      	addge	r3, r3, r0
 800856e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008572:	bfac      	ite	ge
 8008574:	6563      	strge	r3, [r4, #84]	; 0x54
 8008576:	81a3      	strhlt	r3, [r4, #12]
 8008578:	bd10      	pop	{r4, pc}

0800857a <__swrite>:
 800857a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800857e:	461f      	mov	r7, r3
 8008580:	898b      	ldrh	r3, [r1, #12]
 8008582:	05db      	lsls	r3, r3, #23
 8008584:	4605      	mov	r5, r0
 8008586:	460c      	mov	r4, r1
 8008588:	4616      	mov	r6, r2
 800858a:	d505      	bpl.n	8008598 <__swrite+0x1e>
 800858c:	2302      	movs	r3, #2
 800858e:	2200      	movs	r2, #0
 8008590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008594:	f000 f868 	bl	8008668 <_lseek_r>
 8008598:	89a3      	ldrh	r3, [r4, #12]
 800859a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800859e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085a2:	81a3      	strh	r3, [r4, #12]
 80085a4:	4632      	mov	r2, r6
 80085a6:	463b      	mov	r3, r7
 80085a8:	4628      	mov	r0, r5
 80085aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085ae:	f000 b817 	b.w	80085e0 <_write_r>

080085b2 <__sseek>:
 80085b2:	b510      	push	{r4, lr}
 80085b4:	460c      	mov	r4, r1
 80085b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ba:	f000 f855 	bl	8008668 <_lseek_r>
 80085be:	1c43      	adds	r3, r0, #1
 80085c0:	89a3      	ldrh	r3, [r4, #12]
 80085c2:	bf15      	itete	ne
 80085c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80085c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085ce:	81a3      	strheq	r3, [r4, #12]
 80085d0:	bf18      	it	ne
 80085d2:	81a3      	strhne	r3, [r4, #12]
 80085d4:	bd10      	pop	{r4, pc}

080085d6 <__sclose>:
 80085d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085da:	f000 b813 	b.w	8008604 <_close_r>
	...

080085e0 <_write_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	4c07      	ldr	r4, [pc, #28]	; (8008600 <_write_r+0x20>)
 80085e4:	4605      	mov	r5, r0
 80085e6:	4608      	mov	r0, r1
 80085e8:	4611      	mov	r1, r2
 80085ea:	2200      	movs	r2, #0
 80085ec:	6022      	str	r2, [r4, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	f7f9 fd79 	bl	80020e6 <_write>
 80085f4:	1c43      	adds	r3, r0, #1
 80085f6:	d102      	bne.n	80085fe <_write_r+0x1e>
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	b103      	cbz	r3, 80085fe <_write_r+0x1e>
 80085fc:	602b      	str	r3, [r5, #0]
 80085fe:	bd38      	pop	{r3, r4, r5, pc}
 8008600:	200045a4 	.word	0x200045a4

08008604 <_close_r>:
 8008604:	b538      	push	{r3, r4, r5, lr}
 8008606:	4c06      	ldr	r4, [pc, #24]	; (8008620 <_close_r+0x1c>)
 8008608:	2300      	movs	r3, #0
 800860a:	4605      	mov	r5, r0
 800860c:	4608      	mov	r0, r1
 800860e:	6023      	str	r3, [r4, #0]
 8008610:	f7f9 fd85 	bl	800211e <_close>
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	d102      	bne.n	800861e <_close_r+0x1a>
 8008618:	6823      	ldr	r3, [r4, #0]
 800861a:	b103      	cbz	r3, 800861e <_close_r+0x1a>
 800861c:	602b      	str	r3, [r5, #0]
 800861e:	bd38      	pop	{r3, r4, r5, pc}
 8008620:	200045a4 	.word	0x200045a4

08008624 <_fstat_r>:
 8008624:	b538      	push	{r3, r4, r5, lr}
 8008626:	4c07      	ldr	r4, [pc, #28]	; (8008644 <_fstat_r+0x20>)
 8008628:	2300      	movs	r3, #0
 800862a:	4605      	mov	r5, r0
 800862c:	4608      	mov	r0, r1
 800862e:	4611      	mov	r1, r2
 8008630:	6023      	str	r3, [r4, #0]
 8008632:	f7f9 fd80 	bl	8002136 <_fstat>
 8008636:	1c43      	adds	r3, r0, #1
 8008638:	d102      	bne.n	8008640 <_fstat_r+0x1c>
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	b103      	cbz	r3, 8008640 <_fstat_r+0x1c>
 800863e:	602b      	str	r3, [r5, #0]
 8008640:	bd38      	pop	{r3, r4, r5, pc}
 8008642:	bf00      	nop
 8008644:	200045a4 	.word	0x200045a4

08008648 <_isatty_r>:
 8008648:	b538      	push	{r3, r4, r5, lr}
 800864a:	4c06      	ldr	r4, [pc, #24]	; (8008664 <_isatty_r+0x1c>)
 800864c:	2300      	movs	r3, #0
 800864e:	4605      	mov	r5, r0
 8008650:	4608      	mov	r0, r1
 8008652:	6023      	str	r3, [r4, #0]
 8008654:	f7f9 fd7f 	bl	8002156 <_isatty>
 8008658:	1c43      	adds	r3, r0, #1
 800865a:	d102      	bne.n	8008662 <_isatty_r+0x1a>
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	b103      	cbz	r3, 8008662 <_isatty_r+0x1a>
 8008660:	602b      	str	r3, [r5, #0]
 8008662:	bd38      	pop	{r3, r4, r5, pc}
 8008664:	200045a4 	.word	0x200045a4

08008668 <_lseek_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	4c07      	ldr	r4, [pc, #28]	; (8008688 <_lseek_r+0x20>)
 800866c:	4605      	mov	r5, r0
 800866e:	4608      	mov	r0, r1
 8008670:	4611      	mov	r1, r2
 8008672:	2200      	movs	r2, #0
 8008674:	6022      	str	r2, [r4, #0]
 8008676:	461a      	mov	r2, r3
 8008678:	f7f9 fd78 	bl	800216c <_lseek>
 800867c:	1c43      	adds	r3, r0, #1
 800867e:	d102      	bne.n	8008686 <_lseek_r+0x1e>
 8008680:	6823      	ldr	r3, [r4, #0]
 8008682:	b103      	cbz	r3, 8008686 <_lseek_r+0x1e>
 8008684:	602b      	str	r3, [r5, #0]
 8008686:	bd38      	pop	{r3, r4, r5, pc}
 8008688:	200045a4 	.word	0x200045a4

0800868c <__malloc_lock>:
 800868c:	4770      	bx	lr

0800868e <__malloc_unlock>:
 800868e:	4770      	bx	lr

08008690 <_read_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	4c07      	ldr	r4, [pc, #28]	; (80086b0 <_read_r+0x20>)
 8008694:	4605      	mov	r5, r0
 8008696:	4608      	mov	r0, r1
 8008698:	4611      	mov	r1, r2
 800869a:	2200      	movs	r2, #0
 800869c:	6022      	str	r2, [r4, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	f7f9 fd04 	bl	80020ac <_read>
 80086a4:	1c43      	adds	r3, r0, #1
 80086a6:	d102      	bne.n	80086ae <_read_r+0x1e>
 80086a8:	6823      	ldr	r3, [r4, #0]
 80086aa:	b103      	cbz	r3, 80086ae <_read_r+0x1e>
 80086ac:	602b      	str	r3, [r5, #0]
 80086ae:	bd38      	pop	{r3, r4, r5, pc}
 80086b0:	200045a4 	.word	0x200045a4

080086b4 <_init>:
 80086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b6:	bf00      	nop
 80086b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ba:	bc08      	pop	{r3}
 80086bc:	469e      	mov	lr, r3
 80086be:	4770      	bx	lr

080086c0 <_fini>:
 80086c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c2:	bf00      	nop
 80086c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c6:	bc08      	pop	{r3}
 80086c8:	469e      	mov	lr, r3
 80086ca:	4770      	bx	lr
